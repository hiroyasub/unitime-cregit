<?xml version="1.0" encoding="UTF-8" ?>
<?xml-stylesheet type="text/css" href="Release-Notes.css"?>
<!DOCTYPE release-history PUBLIC "-//UniTime//UniTime Release Notes DTD/EN" "Release-Notes.dtd">
<!-- 
 * Licensed to The Apereo Foundation under one or more contributor license
 * agreements. See the NOTICE file distributed with this work for
 * additional information regarding copyright ownership.
 *
 * The Apereo Foundation licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 -->

<release-history>

<doc-title>UniTime 4.3 Release Notes</doc-title>
<release>
	<version>4.3.${build.number}</version>
	<release-date>${build.date}</release-date>
	<category>
		<title>Course Timetabling Solver</title>
		<item>
			<name>GWT</name>
			<description>
				<line>Remaining pages rewritten using the Google Web Toolkit.</line>
				<line>These include Suggestions, Timetables, Solver Reports, Conflict Statistics, Changes, and History.</line>
			</description>
		</item>
		<item>
			<name>Time Patterns: First Day Of Week</name>
			<description>
				<line>Added ability to change the first day of week for time patterns.</line>
				<line>Using unitime.timePattern.firstDayOfWeek application property (0 is Monday, 1 is Tuesday, etc.).</line>
			</description>
		</item>
		<item>
			<name>Automatic Instructor Constraints</name>
			<description>
				<line>Added ability to define distribution preferences that would be applied automatically to all instructors.
					<line>Using General.AutomaticInstructorConstraints solver parameter, containing a comma separated list of &lt;preference&gt; &lt;distribution&gt;.</line>
					<line>For example: General.AutomaticInstructorConstraints=Required At Most 5 Hrs, Required 6h Work-Day, Strongly Preferred 5h Work-Day</line>
				</line>
				<line>An automatic instructor distribution preference is only applied to instructors that do not have a preference of the same type already.
					<line>For instance, a Required At Most 5 Hrs will not be applied on an instructor that has a different At Most N Hrs preference already.</line>
				</line>
			</description>
		</item>
	</category>
	<category>
		<title>Online Student Scheduling</title>
		<item>
			<name>Special Registration</name>
			<description>
				<line>The following work has been done to support special registration at Purdue.</line>
				<line>Enable special registration in Scheduling Assistant by adding &amp;mode=specreg parameter in the URL.
					<line>In this mode, a student is allowed to pick a section that is not available, conflicting with some other section that the student has, or reserved for some other students.</line>
				</line>
				<line>Added ability to select the current academic session using URL parameters term and campus
					(these may include external term and campus names, if unitime.custom.ExternalTermProvider is configured).</line>
			</description>
		</item>
	</category>
	<category>
		<title>Constraint Solver</title>
		<item>
			<name>Course Timetabling: Max Half-Days Constraint</name>
			<description>
				<line>The MaxHalfDays constraint limits the number of half-days of week during which the given set of classes are taught.</line>
				<line>It has one parameter: a maximal number of week half-days during which the given set of classes can be placed.</line>
				<line>A day is split by noon (which can be changed using General.HalfDaySlot parameter).</line>
				<line>A class starting before noon is considered a morning class (despite of its end), a class starting at noon or later is considered an afternoon class.</line>
				<line>For instance, a reference MaxHalfDays:4 translates to a maximum number of 4 half-days a week.</line>
			</description>
		</item>
		<item>
			<name>Course Timetabling: added MaxHoles distribution constraint</name>
			<description>
				<line>The MaxHoles constraint limits the number of free time (holes) for an instructor on a day (between the first and the last class on a day).</line>
				<line>It has one parameter: a maximal amount of free time that an instructor can have on a day in minutes.</line>
				<line>For example, reference _MaxHoles:120_ translates to a maximum number of two hours of total free time between the first and the last class on a day:
					<line>if required, having more free time is prohibited</line>
					<line>if preferred or strongly preferred, the excessive free time is penalized</line>
				</line>
			</description>
		</item>
		<item>
			<name>Course Timetabling: Student Conflicts</name>
			<description>
				<line>Added a naive, yet effective approach for minimizing holes in student schedule.
					<line>The new StudentMinimizeScheduleHoles criterion penalizes all cases where a student has two classes taught on the same day that are not back-to-back.</line>
					<line>The penalization is based on the time distance between the two classes, computed in hours.</line>
					<line>These penalties are weighted by Comparator.MinimizeStudentScheduleHolesWeight, which defaults to 1/20 of the Comparator.StudentConflictWeight.</line>
					<line>To enable this criterion, add org.cpsolver.coursett.criteria.additional.StudentMinimizeScheduleHoles to General.AdditionalCriteria.</line>
				</line>
				<line>Added a naive, yet effective approach for minimizing number of days in student schedule.
					<line>The new StudentMinimizeDaysOfWeek criterion penalizes all cases where a student has two classes taught on different days.</line>
					<line>These penalties are weighted by Comparator.MinimizeStudentScheduleDaysWeight, which defaults to 1/20 of the Comparator.StudentConflictWeight.</line>
					<line>To enable this criterion, add org.cpsolver.coursett.criteria.additional.StudentMinimizeDaysOfWeek to General.AdditionalCriteria.</line>
				</line>
				<line>As the StudentMinimizeScheduleHoles criterion tends to spread the student among as many days as possible, the second criterion StudentMinimizeDaysOfWeek can be used to counteract this effect, if desired.</line>
			</description>
		</item>
		<item>
			<name>Course Timetabling: Week Start/End</name>
			<description>
				<line>Added ability to define when a work week starts (General.FirstWorkDay) and when it ends (General.LastWorkDay).</line>
				<line>It is possible that General.LastWorkDay &lt; General.FirstWorkDay, e.g., General.FirstWorkDay = 6 (Sunday) and General.LastWorkDay = 3 (Thursday).</line>
				<line>Corrected behavior of various constraints for the case when week starts on Sunday (PRECEDENCE, BTB_DAY, NDB_GT_1, FOLLOWING_DAY, SPREAD, MIN_ROOM_USE, and a few other places).</line>
			</description>
		</item>
		<item>
			<name>Examination Timetabling: Period Preferences</name>
			<description>
				<line>Added additional information about how well are the period preferences satisfied into the solution extended info
					(showing how many time a preferred, a strongly preferred, etc. period is selected for an exam).</line>
			</description>
		</item>
		<item>
			<name>Examination Timetabling: Room Split Penalty</name>
			<description>
				<line>Increased the limit on the maximal number of rooms that an exam can take to 30.</line>
			</description>
		</item>
		<item>
			<name>Examination Timetabling: Save XML</name>
			<description>
				<line>Corrected examination period penalty value.</line>
			</description>
		</item>
		<item>
			<name>Student Scheduling: Scheduling Assistant Weights</name>
			<description>
				<line>Corrected precision on the selected choices criterion as the result is a % of the selected classes.</line>
				<line>Put selected sections higher in the list.</line>
				<line>Minimize class penalties: divide penalty by the number of sections (counting average section penalty of the enrollment).
					<line>This is to avoid penalization of enrollments with more/fewer sections.</line>
				</line>
				<line>Prefer sections that are available (there is space in them).
					<line>This is especially useful when a student has an individual reservation that is not given for a particular section (student is allowed to pick any section).</line>
				</line>
			</description>
		</item>
		<item>
			<name>Student Scheduling: Student Conflict Constraint</name>
			<description>
				<line>Checking whether a student already has a complete schedule corrected.
					<line>If the request is over the limit (student already has a complete schedule), do not return a free time or a wait-listed course request as a conflict.</line>
				</line>
				<line>Ensure that completeness of a student schedule is properly checked during the assignment.
					<line>Using Student.canAssign(request) does not work as it returns true when the request is already assigned and the conflicts are checked when Constraint.assigned(value) is called.</line>
					<line>This was causing troubles for the IFS phase.</line>
				</line>
			</description>
		</item>
     </category>
	<category>
		<title>Event Management</title>
		<item>
			<name>Events: Time Grid</name>
			<description>
				<line>Added ability to define first day of week, using unitime.events.gridStartDay application property (0 is Monday, 1 is Tuesday, etc.).</line>
			</description>
		</item>
		<item>
			<name>Room Availability: Include Events From Other Academic Sessions</name>
			<description>
				<line>Course/Examination Timetabling: Added ability to include events (of the same type) from other academic sessions.</line>
				<line>To enable this, set tmtbl.room.availability.includeOtherTerms to true on the Application Configuration page.</line>
				<line>Rooms of the overlapping academic sessions must have the same permanent id.
					<line>This can be achieved, e.g., by rolling forward the rooms from one academic session to the next.</line>
					<line>Or, the rooms must be created using the Add Room page (of the first academic session) using the Update Future Academic Sessions section (room is created in multiple academic sessions at once).</line>
				</line>
			</description>
		</item>
	</category>
	<category>
		<title>Automation</title>
		<item>
			<name>Queue Processor: Clustering</name>
			<description>
				<line>Added ability to display queue processes across the cluster.
					<line>Roll forward, data exchange, scripts, and PDF exam reports use queue processor at the moment.</line>
				</line>
				<line>A task is executed locally, but it shows on other nodes as well and the resultant file can be accessed from the other nodes too.</line>
			</description>
		</item>
		<item>
			<name>Scripts: Script API</name>
			<description>
				<line>Added script API (UniTime/api/script)</line>
				<line>To execute script, use
					<line>GET/POST api/script?term=&lt;TERM&gt;&amp;script=&lt;SCRIPT_NAME&gt;</line>
					<line>plus all the parameters of the script</line>
					<line>use &amp;queue=false to execute the script immediately (outside of the process queue)</line>
					<line>when there is an input file, use POST with the file as the payload</line>
					<line>For example:
						<line>GET http://localhost:8080/UniTime/api/script?term=Fal2010woebegon&amp;name=Test+Script&amp;dept=0100&amp;name=TEST&amp;subjects=ALG&amp;subjects=BIOL</line>
					</line>
					<line>The request returns the appropriate task (queue item) when queue=false is not used.</line>
					<line>When queue=false is used, the request waits till the script is finished and returns the output file (if there is any) or the log (in the text format if there is no output file).</line>
				</line>
				<line>To retrieve all tasks (queue items) from the process queue, use GET without additional parameters, e.g.,
					<line>GET http://localhost:8080/UniTime/api/script?term=Fal2010woebegon</line>
				</line>
				<line>To check particular task (queue item), use id=&lt;ITEM_ID&gt;</line>
				<line>To get text log of a particular task (queue item), use log=&lt;ITEM_ID&gt;</line>
				<line>To get output file of a particular task (queue item), use output=&lt;ITEM_ID&gt;</line>
				<line>To delete a particular task from the queue, use delete=&lt;ITEM_ID&gt;</line>
			</description>
		</item>
		<item>
			<name>Scripts: Parameter Defaults</name>
			<description>
				<line>Added ability to use subject area abbreviation, department code, building abbreviation or room names as defaults.</line>
				<line>Added ability to provide multiple defaults (separated by a comma) when the list allows for multiple selection.</line>
			</description>
		</item>
	</category>
	<category>
		<title>Administration</title>
		<item>
			<name>Add/Edit Timetable Manager</name>
			<description>
				<line>Maximal length of the External ID field corrected (40 characters).</line>
			</description>
		</item>
		<item>
			<name>Staff Import / Lookup</name>
			<description>
				<line>Include campus code (academic initiative) in the Staff table.</line>
				<line>Manage Instructor List: match campus code when it is set.</line>
				<line>Add/Edit Instructor Lookup: include campus code in the Department column when the campus does not match the current session.</line>
			</description>
		</item>
	</category>
	<category>
		<title>Other</title>
		<item>
			<name>Technology Update</name>
			<description>
				<line>GWT updated to version 2.8.2 (from 2.7.0)</line>
			</description>
		</item>
		<item>
			<name>Query Encoder: Illegal Block Size Fix</name>
			<description>
				<line>Use Base64 by default.</line>
				<line>Fall back to base 36 big integers, but pad with sign bytes (0xff) when IllegalBlockSizeException is seen.
					<line>Using BigInteger to map bytes to strings is not ideal because of the sign bytes may get ignored, causing IllegalBlockSizeException during decoding.</line>
				</line>
			</description>
		</item>
	</category>
</release>
</release-history>