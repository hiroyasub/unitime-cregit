<?xml version="1.0" encoding="UTF-8" ?>
<?xml-stylesheet type="text/css" href="Release-Notes.css"?>
<!DOCTYPE release-history PUBLIC "-//UniTime//UniTime Release Notes DTD/EN" "Release-Notes.dtd">
<!-- 
 * Licensed to The Apereo Foundation under one or more contributor license
 * agreements. See the NOTICE file distributed with this work for
 * additional information regarding copyright ownership.
 *
 * The Apereo Foundation licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 -->

<release-history>

<doc-title>UniTime 4.1 Release Notes</doc-title>

<release>
	<version>4.1.${build.number}</version>
	<release-date>${build.date}</release-date>
	<category>
		<title>Event Management</title>
		<item>
			<name>Events: List of Meetings</name>
			<description>
				<line>Make sure all the lines of event name, section, and title are always displayed (e.g., when sorting by date and looking at a cross-listed class).</line>
				<line>Split instructors over multiple meeting lines (just like event name, section, title and note).</line>
			</description>
		</item>
		<item>
			<name>iCalendar Export</name>
			<description>
				<line>Added ability to avoid setting the ORGANIZER of an event (using the ATTENDEE with the ORGANIZER role instead).
					<line>This was done in an attempt to avoid receiving unsolicited accept/decline messages while keeping the instructor (or the main contact) of the event visible.</line>
					<line>This feature is driven by the application property unitime.events.ics_set_organizer, which defaults to true (the existing behavior).</line>
				</line>
			</description>
		</item>
		<item>
			<name>Event Detail: Examination Conflicts</name>
			<description>
				<line>Enrollments table of an examination event: include more than two exams on a day and back-to-back student conflicts.</line>
			</description>
		</item>
	</category>
	<category>
		<title>Student Scheduling</title>
		<item>
			<name>Online Student Scheduling Dashboard during registration</name>
			<description>
				<line>Fixed the ability to use the Online Student Scheduling Dashboard during student registration phase (null exception when executing an action).
					<line>The issue was created in commit e486db4, with the ability to provide a custom action factory.</line>
				</line>
			</description>
		</item>
		<item>
			<name>Class Detail: Enrollments</name>
			<description>
				<line>Fixed a Null exception preventing the Enrollment table from showing on a class.
					<line>The issue was introduced by commit 811bade, with the ability to exclude certain departments from student scheduling.</line>
				</line>
			</description>
		</item>
	</category>
	<category>
		<title>Rooms</title>
		<item>
			<name>Add/Edit Room: Data Validation</name>
			<description>
				<line>Room must have at least one department check disabled.</line>
			</description>
		</item>
		<item>
			<name>Edit Room: Room X does not exist</name>
			<description>
				<line>Corrected returned session information when the academic session is changed on the Rooms page (event management).
					<line>When user did not have a matching role in the selected academic session, wrong session information was returned.</line>
					<line>This caused some issues when the user attempted to edit the room in such a case.</line>
				</line>
			</description>
		</item>
		<item>
			<name>Rooms: Sort</name>
			<description>
				<line>Corrected sort by a number when there are Nulls in the table.</line>
			</description>
		</item>
		<item>
			<name>Rooms: All Departments</name>
			<description>
				<line>When a room is being shared among all departments (and there are more than three departments), display All instead of listing all the departments in the Departments column.</line>
			</description>
		</item>
		<item>
			<name>Room Features: Create/Update Room Feature</name>
			<description>
				<line>Fixed an issue causing the page not to work when there are no room fetaure types defined in the system.</line>
			</description>
		</item>
		<item>
			<name>Rooms: Permission Fixes</name>
			<description>
				<line>Rooms, Room Detail: do not check for Events permission.
					<line>This fixes the "Failed to load rooms: Access denied for Events" exception when the user is not allowed to see the events for the selected term.</line>
				</line>
				<line>Room Detail: show event properties after a room update if the uses has the RoomEditChangeEventProperties permission (when Events permission is not given).</line>
			</description>
		</item>
	</category>
	<category>
		<title>Localization</title>
		<item>
			<name>Class Detail: Instructors</name>
			<description>
				<line>The small table with instructors now has localized headers.</line>
			</description>
		</item>
		<item>
			<name>Events</name>
			<description>
				<line>Provided a separate label for person's name (as opposed to a room name or an event name).</line>
				<line>A few tweaks in the Czech translations.</line>
			</description>
		</item>
	</category>
	<category>
		<title>Course Timetabling</title>
		<item>
			<name>Solution Commit / Uncommit</name>
			<description>
				<line>When a solution is committed or uncommitted, force solution refresh along the cluster.</line>
			</description>
		</item>
	</category>
	<category>
		<title>Other</title>
		<item>
			<name>Roll Forward: Room Preferences on Departments</name>
			<description>
				<line>Neutral preference check corrected: do not roll or create Neutral room preferences on departments.</line>
			</description>
		</item>
		<item>
			<name>Roll Forward: Examination Configuration</name>
			<description>
				<line>Non-university location lookup: only lookup the location by its permanent id and session id (just like for the ordinary rooms).
					<line>This fixes the issue of rolling forward examination room information when the non-university location does not have a controlling department.</line>
				</line>
			</description>
		</item>
		<item>
			<name>Anonymous User Context</name>
			<description>
				<line>UserContext.setProperty: do not set user data for an anonymous user.
					<line>This fixes the "ORA-01400: cannot insert NULL into (USER_DATA.EXTERNAL_UID)" exception when using an ICS feed that was created for an unauthenticated user.</line>
				</line>
			</description>
		</item>
		<item>
			<name>Data Exchange: HQL Reports</name>
			<description>
				<line>Changed the exported report XML to comply with the Reports.dtd (flag elements are directly under report element).</line>
				<line>Changed the importer to import both versions of the XML (flag elements are under report or under flags element).</line>
			</description>
		</item>
		<item>
			<name>Edit Date Pattern: Navigation</name>
			<description>
				<line>Added Previous and Next buttons on the Edit Date Pattern page.</line>
			</description>
		</item>
		<item>
			<name>Edit Time Pattern: Navigation</name>
			<description>
				<line>Added Previous and Next buttons on the Edit Time Pattern page.</line>
			</description>
		</item>
	</category>
</release>

	
<release>
	<version>4.1.164</version>
	<release-date>Fri, 18 Mar 2016</release-date>
	<category>
		<title>Course Timetabling</title>
		<item>
			<name>Class Duration Types</name>
			<description>
				<line>Added ability to define different ways how class duration is entered and used in the system (to extend the former Minutes per Week selection).</line>
				<line>There is a new page (Administration > Other > Class Duration Types), where the class duration types can be managed.
					<line>Permission ClassDurationTypes is needed to access the page, ClassDurationTypeEdit is needed to make changes.</line>
				</line>
				<line>Default duration type can be defined on an academic session, it can be overridden on the instructional offering configuration level (Instructional Offering Configuration page).
					<line>Name of the default duration type is used in the column headers (Classes, Instructional Offerings), abbreviations are used to suffix durations that are using a non-default duration type.</line>
				</line>
				<line>Following class duration types have been implemented:
					<line>Minutes per Week (default): this is the existing behavior (minutes per week == number of meetings in a week x minutes per meeting)</line>
					<line>Average Weekly Minutes: average number of minutes a class takes during a week (weekly minutes = number of meetings x minutes per meeting x number of weeks of the date pattern / number of weeks in the term)
						<line>Parameter: number of weeks in the term (defaults to the number of weeks of the default date pattern)</line>
					</line>
					<line>Semester Minutes: number of minutes in the semester (semester minutes == number of meetings x minutes per meeting x number of weeks of the date pattern)</line>
					<line>Semester Hours: number of hours in the semester (semester hours == number of meetings x minutes per meeting x number of weeks of the date pattern / minutes in an hour)
						<line>Parameter: number of minutes in an hour (defaults to 50); an hour is meant as a lesson or "hour of instruction"</line>
					</line>
					<line>Meetings Minutes: number of minutes of all the meetings, excluding vacations (meeting minutes == number of meetings based on the date pattern x minutes per meeting)
						<line>Parameters: allowed variation of the meeting minutes, expressed as lower and upper bound (defaults to 0.95,1.10 -- meaning a class can have 5% less time, combinations with 10% more time will be also considered).</line>
						<line>If the number of meetings based on the date pattern exceeds the desired number of meeting minutes, only meetings covering the given number of meeting minutes are created.</line>
					</line>
					<line>Meeting Hours: just like meeting minutes, but with hours (meeting hours == number of meetings based on the date pattern x minutes per meeting / minutes in an hour)
						<line>Parameters: number of minutes in an hour and the allowed variation of the meeting minutes (defaults to 50,0.95,1.10 -- 50 minutes in an hour, 5% less time allowed, combinations with up to 10% excess time are considered).</line>
					</line>
				</line>
				<line>It is possible to hide class duration types that are not to be used by the users.
					<line>If only one type is visible, there is no selection of the class duration type on the Instructional Offering Configuration page.</line>
				</line>
			</description>
		</item>
		<item>
			<name>Cancelled Classes</name>
			<description>
				<line>Added ability to cancel a class.</line>
				<line>Multiple Class Setup page: class with enrollments cannot be deleted, but it could be cancelled instead.</line>
				<line>Cancelled classes retain their committed assignment, but the appropriate class event is cancelled.</line>
				<line>Cancelled classes are not loaded into the course timetabling solver.</line>
				<line>Cancelled classes cannot be edited or re-assigned and they do not block the room or instructor.</line>
				<line>When a cancelled class is reopened, the appropriate event is also re-approved.
					<line>This could cause conflicts, that have to be manually resolved.</line>
				</line>
				<line>In student scheduling, cancelled classes are avoided (no valid enrollment can contain a cancelled class).</line>
				<line>In online student scheduling, it is possible to keep existing students in cancelled classes when solver configuration parameter named Enrollment.CanKeepCancelledClass is set to true (defaults to false).</line>
				<line>New permissions:
					<line>Class Delete: ability to delete a class (class cannot be deleted when there is a committed solution and at least one student enrolled in the class)</line>
					<line>Class Delete No Enrollment Check: this permission overrides the enrollment check from the Class Delete permission (not given to any role by default)</line>
					<line>Class Cancel: ability to cancel a class (there must be a committed solution)</line>
					<line>The Class Delete and Class Cancel permissions are by default given to all roles that have Multiple Class Setup Class and / or Class Edit permissions.</line>
				</line>
				<line>Added a new permission (named Class Delete No Enrollment Check) that overrides the enrollment check from the Class Delete permission.
					<line>No role is given this permission by default.</line>
				</line>
				<line>Make Not-Offered: It is allowed to make an offering not-offered only when there are no students enrolled, there is no committed solution, or the user has the Class Delete No Enrollment Check permission.</line>
				<line>Cross Lists: it is allowed to remove a cross-listed course from an offering only when  there are no students enrolled, there is no committed solution, or the user has the Class Delete No Enrollment Check permission.</line>
			</description>
		</item>
		<item>
			<name>Conflicting Classes</name>
			<description>
				<line>Class Detail: Display conflicting classes.
					<line>There is a new table called Conflicting Classes, just below the Timetable section.</line>
					<line>The table is only visible when the class is conflicting with some other class (or classes).</line>
					<line>The same checking as on the Class Assignment page is used.</line>
				</line>
				<line>Instructional Offering Detail: Highlight conflicting classes with a light red background.
					<line>Conflicting classes are listed in the tool-tip (more details are provided on the Class Detail page, see above).</line>
				</line>
				<line>Conflict checking: avoid showing conflicts between classes that can overlap because of the Can Share Room or the Meet Together distribution.</line>
			</description>
		</item>
		<item>
			<name>Instructional Methods</name>
			<description>
				<line>Added instructional methods lookup table. Each method has a reference and a label.</line>
				<line>Example instructional methods: Online, Hybrid, or Face-to-Face.</line>
				<line>Instructional offering configuration can have an instructional method set.</line>
				<line>If set, instructional method appears on various pages, including the Scheduling Assistant and Events.</line>
				<line>It is usually included in the Type column, next to the instructional type, e.g., Lecture (Online).</line>
			</description>
		</item>
		<item>
			<name>Multiple-Major Curricula</name>
			<description>
				<line>A curriculum has a new property named multiple majors (boolean, default to false).</line>
				<line>If a curriculum is marked as multiple-major: a student meets the curriculum only when he/she has all the selected majors (not one of the selected).</line>
				<line>A multiple-major curriculum will inherit course projections from curricula that have no or one of the matching majors.</line>
				<line>There can be multiple curricula that get combined together to form a multiple-major curriculum.</line>
				<line>If a course is on several curricula, the highest percent share (of the particular classification) will be used.</line>
				<line>These shares can be overridden on the multiple-major curriculum, but no courses can be deleted (course projection must be set to zero instead).</line>
				<line>The parent (single or no major curricula) can have zero requested students, only acting as templates for the multiple-major curricula.</line>
				<line>If there is no multiple-major curriculum, everything works like before.</line>
			</description>
		</item>
		<item>
			<name>Reservations</name>
			<description>
				<line>Remember the last sort in the reservation cookie.</line>
				<line>Added Previous / Next buttons (Edit Reservation).</line>
				<line>Added confirmation message when deleting a reservation (Edit Reservation).</line>
			</description>
		</item>
	</category>
	<category>
		<title>Rooms</title>
		<item>
			<name>Overview</name>
			<description>
				<line>The room pages have been completely rewritten using the Google Web Toolkit.</line>
				<line>The new pages are localizable, they are using the same Room Filter as is used in the event management, and they are allowing a change to propagate over to the future academic sessions as well.</line>
				<line>It is also possible for users that are not managers in UniTime (e.g., instructors) and/or that have no relation to a particular department (e.g., students) to be allowed to use the new rooms pages.</line>
				<line>When accessed from the Events menu, the Rooms, Room Groups and Room Features pages contain the selection of an academic session, just like the Events page.</line>
				<line>It is possible to use the old pages by setting the application property unitime.legacy.rooms to true (defaults to false).</line>
			</description>
		</item>
		<item>
			<name>Rooms</name>
			<description>
				<line>The Rooms page now contains a Room Filter and a table with many features.</line>
				<line>The table of rooms can be sorted by a given column, can show pretty much any room property, and it can be exported to PDF or CSV.</line>
			</description>
		</item>
		<item>
			<name>Add/Edit Room</name>
			<description>
				<line>Add Room and Edit Room page now contains all the functionality of the various edit pages that were accessible from the Room Detail page.</line>
				<line>Moreover, it is now possible to make the update the room in the (selected) future academic sessions as well.</line>
				<line>Only selected groups of properties can be updated in a particular future session.</line>
			</description>
		</item>
		<item>
			<name>Edit Room Departments</name>
			<description>
				<line>The page can be used to assign multiple rooms to a particular department or examination problem).</line>
				<line>The page is only accessible when a department or an examination problem is selected in the Room Filter.</line>
				<line>The page is now using the same table of rooms as the Rooms page and it is populated by all the rooms matching the Room Filter (except the selected department / examination problem).</line>
				<line>Rooms not matching the Room Filter are left unchanged.</line>
			</description>
		</item>
		<item>
			<name>Room Groups / Features</name>
			<description>
				<line>The Room Groups and Room Features pages also use the Room Filter to list rooms (and matching room features and groups).</line>
				<line>The Add and Edit pages are also using the same table as on the Rooms page with the list of rooms populated by all the rooms matching the Room Filter.</line>
				<line>Rooms not matching the Room Filter are left unchanged.</line>
				<line>When creating / updating a room group or feature, it is possible to select one or more future academic sessions that would be updated as well.
					<line>Besides of the properties of the group (or feature) like name, abbreviation department, etc., only rooms with a change are updated.</line>
					<line>This means that the future group (or feature) is NOT reset to the rooms that are currently selected on the group (or feature).</line>
				</line>
			</description>
		</item>
	</category>
	<category>
		<title>Examination Timetabling</title>
		<item>
			<name>Examination Status</name>
			<description>
				<line>Added ability to set examination status individually for each examination type.
					<line>This examination status, if set, overrides the academic session status (for all users).</line>
					<line>Examination statues can be defined on the Administration > Other > Status Types page (Apply: Examinations).</line>
					<line>The following statuses are created by default: Examination Disabled, Examination Data Entry, Examination Timetabling, and Examination Published.</line>
					<line>Examination statuses can be set on the Administration > Academic Sessions > Examination Statuses page.</line>
				</line>
				<line>This allows for each examination problem to be viewed, edited, timetabled, and published at a different time.</line>
				<line>It is also possible to attach examination managers to each examination type (for the current academic session).
					<line>If this relation is defined, only the selected manager(s) can view, edit, or timetable the given examination problem (based on the status).</line>
					<line>If this relation is NOT defined, all examination managers can view, edit, or timetable all examination problems.</line>
					<line>This relation is also to be edited on the Administration > Academic Sessions > Examination Statuses page.</line>
					<line>Only managers with a role that is academic session dependent and that allows accessing the examination solver are listed.</line>
				</line>
			</description>
		</item>
		<item>
			<name>Data Exchange</name>
			<description>
				<line>Course Offering Export: More examination properties are now included (print offset, length, etc.).</line>
				<line>Course Offering Import: Added ability to import examinations together with the offerings (including period and room assignments).</line>
			</description>
		</item>
	</category>
	<category>
		<title>Batch Student Scheduling</title>
		<item>
			<name>Minimal Perturbation Mode</name>
			<description>
				<line>In priority and equal weighting, the difference of an enrollment (from the initial one) is computed as an average using the following schema:
					<line>an initial section counts as 1</line>
					<line>same choice section counts as 0.9 (parameter StudentWeights.SameChoice)</line>
					<line>same time section counts as 0.7 (parameter StudentWeights.SameTime)</line>
					<line>different time section counts as 0</line>
				</line>
				<line>Non-initial enrollment weight is penalized with weight StudentWeights.Perturbation (defaults to 0.100).</line>
				<line>When MPP is enabled, solution info contains the following three new properties:
					<line>Perturbations: same section assigned (% of initial section assigned over all course requests with initial enrollment)</line>
					<line>Perturbations: same choice assigned (% of same time and instructor section assigned over all course requests with initial enrollment)</line>
					<line>Perturbations: same time assigned (% of same time section assigned over all course requests with initial enrollment)</line>
				</line>
				<line>When Sectioning.KeepInitialAssignments is set to true (defaults to false), only the initial value is in the variable’s domain (when there is an initial value).
					<line>Also, there is a new global constraint (named FixInitialAssignments) that prevents unassignment of an initial value by another global constraint (limits, reservations).</line>
				</line>
			</description>
		</item>
		<item>
			<name>Request Groups</name>
			<description>
				<line>Added ability to keep students of the same group together.</line>
				<line>Measured as an average probability of two students (of a group) that are requesting the same course being given the same section (of the same subpart).</line>
				<line>There is a new weight (named StudentWeights.SameGroup, defaults to 0.1) expressing how much this criterion affects the student weight (in both priority and equal weighting).
					<line>This means that if a student is being enrolled into a completely different section, the weight of such an enrollment is decreased by 10%
						(the metric reflects how much are the students spread between the sections of the course).</line>
				</line>
				<line>There is a new Request Groups report on the Student Scheduling Solver Reports page.</line>
				<line>Request groups are loaded in only when the solver parameter Load.RequestGroups is set to true, default is false</line>
			</description>
		</item>
		<item>
			<name>Interactive Changes</name>
			<description>
				<line>Added ability to use the Scheduling Assistant page to make changes in a student's schedule (current solution).</line>
				<line>It is also possible to change input data (course and free time requests of a student).
					<line>This possibility can be disabled by setting the solver configuration parameter Interactive.UpdateCourseRequests to false (defaults to true).</line>
				</line>
			</description>
		</item>
		<item>
			<name>Student Filter</name>
			<description>
				<line>Added ability to filter what student will get loaded into the batch student scheduling solver using a boolean query.</line>
				<line>Solver parameter Load.StudentQuery, when set each student must match the query to be loaded in.
					<line>Students not matching the query would only count against the limits, just like with the no-batch status.</line>
					<line>The parameter could be used together with the no-batch student status (both filters will apply in such a case).</line>
				</line>
				<line>Available query terms (similar to the Filter of the Student Dashboard):
					<line>status (reference of the student status)</line>
					<line>area (abbreviation of the academic area)</line>
					<line>major (code of the academic major)</line>
					<line>clasf or classification (code of the academic classification)</line>
					<line>group (code of the student group)</line>
					<line>accommodation (code of the student accommodation)</line>
					<line>student (external id of the student)</line>
				</line>
				<line>Examples:
					<line>group:G1 or group:G2
						<line>Only students of groups G1 and G2 will get loaded in.</line>
					</line>
					<line>area:A and (major:M1 or major:M2)
						<line>Only student of area A and major M1 or M2 will get loaded in.</line>
					</line>
					<line>status:Batch
						<line>Only students of Batch status will get loaded in.</line>
					</line>
				</line>
			</description>
		</item>
	</category>
	<category>
		<title>Online Student Scheduling</title>
		<item>
			<name>Online Student Scheduling Dashboard</name>
			<description>
				<line>Added ability to use the Online Student Scheduling Dashboard page during the registration phase (Course Requests page is available to students).</line>
				<line>This is done by leveraging the DatabaseServer (version of the online scheduling server that does not keep any data in memory).</line>
			</description>
		</item>
		<item>
			<name>Custom Interfaces</name>
			<description>
				<line>Added ability to use automated wait-listing together with the student enrollment provider interface.</line>
				<line>Added ability to load course requests from an external system when there are none in UniTime (for a student).</line>
				<line>Added ability to display degree plans from an external system.</line>
			</description>
		</item>
		<item>
			<name>Student Scheduling Assistant</name>
			<description>
				<line>Added ability to hide Rearrange Schedule button.
					<line>By setting unitime.enrollment.allowScheduleReset to false, defaults to true.</line>
					<line>If made hidden, it is possible to show the button for advisors by setting unitime.enrollment.allowScheduleReset.manager to true.</line>
				</line>
				<line>Added ability to make enrolled course demands not editable (they can still be deleted, but it is harder to accidentally drop a course).
					<line>By setting unitime.enrollment.disableAssignedRequests to true, defaults to false.</line>
					<line>If enrolled demands are made read-only, it is possible to make them editable for advisors by setting unitime.enrollment.disableAssignedRequests.manager to false.</line>
				</line>
				<line>Added ability to display a confirmation message when dropping a course.
					<line>By setting unitime.enrollment.confirmCourseDrop to true, defaults to false</line>
					<line>Message: Together with other registration changes, the course {0} will be dropped. Do you want to proceed?</line>
					<line>Where {0} is the course or courses that are to be dropped.</line>
				</line>
				<line>When there is an Arrange Hours class in the schedule, the following message is displayed at the top of the Time Grid tab.
					<line>This schedule only displays classes with assigned time. To see your full list of classes, please open the List of classes tab.</line>
					<line>The message has a light blue background, same as other info messages.</line>
				</line>
			</description>
		</item>
		<item>
			<name>Exclude Some Departments from Student Scheduling</name>
			<description>
				<line>There is a new ability to exclude some departments completely from student scheduling.</line>
				<line>This is controlled by a new toggle that is present on each department (named Allow Student Scheduling on the Add/Edit Department page).
					<line>It defaults to true (student scheduling is enabled for the department).</line>
				</line>
				<line>When a department is excluded, all courses controlled by this department are not even loaded into the solver (both batch and online).
					<line>Students cannot see or take courses from the excluded department(s).</line>
				</line>
				<line>Instructional offerings that have all courses excluded from student scheduling do not need locking.</line>
				<line>If all departments of a solver group are excluded from student scheduling, the commit restriction during online student scheduling phase does not apply to the solutions of such a solver group.</line>
				<line>The online student scheduling server does not get automatically reloaded when the Allow Student Scheduling toggle is changed on a particular department during the online student scheduling phase.
					<line>It has to be reloaded manually, using the Manage Solvers page.</line>
				</line>
			</description>
		</item>
	</category>
	<category>
		<title>Other Improvements</title>
		<item>
			<name>iCalendar Queries</name>
			<description>
				<line>Automatically hash calendar queries to make the iCalendar URLs much shorter.
					<line>This is to overcome the 256 character limit on a subscribed calendar URL in Google Calendar.</line>
				</line>
				<line>Hashed queries are persisted in UniTime and they are automatically removed if not used for 92 days (can be changed by unitime.cleanup.hashedQueries property).</line>
				<line>This feature can be disabled by setting the application property unitime.encode.hash to false.</line>
			</description>
		</item>
		<item>
			<name>Student Group Timetable</name>
			<description>
				<line>On the Events Timetable page, it is now possible to select a student group.</line>
				<line>If a student group is selected, all classes / exams, and course-related events of students of the selected student group are displayed.</line>
				<line>It is possible to hide some events by defining a minimal enrollment parameter (see below).</line>
				<line>Parameters:
					<line>unitime.events.group.minimalEnrollment
						<line>Minimal enrollment for a class event to appear in the results (given as % of the group size or as an absolute number).</line>
						<line>For instance, set it to 5 (only classes with at least 5 students of the group are shown) or to 10% (limit is 10% of the number of students in the group).</line>
					</line>
					<line>unitime.events.group.showGroupEnrollment
						<line>On the Events / Timetable page, count the enrollments only within the group (may be slow).</line>
						<line>If set to true, enrollment field shows the number of students of the group enrolled in the class / exam / course related event (default is false).</line>
					</line>
					<line>GwtConstants: timeGridStudentGroupDoesNotOverlap
						<line>If true, it is assumed that there are no overlaps in the events of the group — the display is like on the personal timetable or when a single week / room is selected (defaults to false).</line>
						<line>This property needs to be set in the JavaSource/org/unitime/timetable/gwt/resources/GwtConstants.properties before the build.</line>
					</line>
				</line>
			</description>
		</item>
		<item>
			<name>People Lookup dialog</name>
			<description>
				<line>Added individual lookup permissions to be able to filter what sources can be searched (by a user of the given role).</line>
				<line>The following permissions were added:
					<line>Can Lookup Students (search student table)</line>
					<line>Can Lookup Instructor (search departmental_instructor table)</line>
					<line>Can Lookup Staff (search staff table)</line>
					<line>Can Lookup Managers (search timetable_manager table)</line>
					<line>Can Lookup Event Contacts (search event_contact table)</line>
					<line>Can Lookup Ldap (query LDAP directory, if configured)</line>
				</line>
				<line>By default, all roles that can use the People Lookup dialog can search through all the sources.</line>
				<line>On the personal schedule (event management), if another person is looked up, the new permissions are also used to filter the role:
					<line>Can Lookup Students is needed for the Student role (person is enrolled in a class, an exam, or a course related event as a student).</line>
					<line>Can Lookup Instructors is needed for the Instructor and Coordinator roles (person is assigned to a class or an exam as an instructor or coordinator).</line>
					<line>Can Lookup Event Contacts is needed for the Contact role (person is listed among contacts of the event).</line>
				</line>
			</description>
		</item>
		<item>
			<name>UniTime RESTful API</name>
			<description>
				<line>UniTime now offers a number of RESTful APIs (many of which have been merged back to UniTime 3.5 and 4.0), using JSON messages.</line>
				<line>Most APIs are for getting data out of UniTime, but there are a few exceptions.</line>
				<line>Following connectors have been created so far: (including UniTime 3.5 and 4.0)
					<line>/api/events: ability to retrieve events (using the EventInterface class converted to JSON, example: GET UniTime/api/events?type=PERSON&amp;ext=1001&amp;term=Fal2010)</line>
					<line>/api/json: JSON interface for GWT calls (that implement the GwtRpcRequest interface)</line>
					<line>/api/exchange: to export/import UniTime's data exchange XML files
						<line>export example: GET UniTime/api/exchange?term=Fal2010&amp;type=students</line>
						<line>import example: POST UniTime/api/exchange (with the XML as payload)</line>
					</line>
					<line>/api/roles?id=&lt;externalId&gt; returns a list of academic sessions (and roles) for a person (returns a list of academic sessions when there is no id parameter)</line>
					<line>/api/enrollments?eventId=&lt;id&gt; returns student enrollments for an event, a class (when classId parameter is used instead),
						 an exam (examId), a course offering (courseId), an instructional offering (offeringId), or instructional offering configuration (configId)</line>
					<line>/api/instructor-schedule?id=&lt;externalId&gt;&amp;term=&lt;term&gt; returns classes, courses, and examinations assigned to an instructor.</line>
					<line>/api/class-info?classId=&lt;id&gt; returns information about a class (including assigned instructors and coordinators)</line>
				</line>
				<line>Following connectors are only available in UniTime 4.1:
					<line>/api/rooms: ability to retrieve rooms (using RoomDetailInterface class converted to JSON, example GET UniTime/api/rooms?r:building=EDUC)
						<line>The rooms API can be also used to create, update and delete rooms and to retrieve, upload and delete room pictures.</line>
					</line>
					<line>/api/sectioning: online student scheduling api (covering all functionality of the SectioningService)
						<line>The SectioningService is used by the Online Student Scheduling Assistant and the Online Student Scheduling Dashboard pages.</line>
						<line>Example: POST UniTime/api/sectioning?term=Fal2010&amp;studentId=1001&amp;operation=section (with the payload containing course requests and optionally the previous student schedule).</line>
					</line>
				</line>
				<line>Each connector has the appropriate permission (see Api... permissions), with the ability to either use HTTP-simple authentication or an API token.</line>
				<line>It is possible to change the hibernate cache mode for a particular API connector by setting the unitime.api.X.cacheMode application property (where X is the connector name).
					<line>For example, setting unitime.api.enrollments.cacheMode=REFRESH will make the /api/enrollments connector to never read the hibernate cache, but it will keep it updated.</line>
				</line>
			</description>
		</item>
		<item>
			<name>Course Timetabling Solver</name>
			<description>
				<line>Default search algorithm changed to use Great Deluge during the improvement phase.</line>
			</description>
		</item>
	</category>
</release>
</release-history>