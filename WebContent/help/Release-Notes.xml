<?xml version="1.0" encoding="UTF-8" ?>
<?xml-stylesheet type="text/css" href="Release-Notes.css"?>
<!DOCTYPE release-history PUBLIC "-//UniTime//UniTime Release Notes DTD/EN" "Release-Notes.dtd">
<!-- 
 * Licensed to The Apereo Foundation under one or more contributor license
 * agreements. See the NOTICE file distributed with this work for
 * additional information regarding copyright ownership.
 *
 * The Apereo Foundation licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 -->

<release-history>

<doc-title>UniTime 4.1 Release Notes</doc-title>

<release>
	<version>4.1.${build.number}</version>
	<release-date>${build.date}</release-date>
	<category>
		<title>Course Timetabling</title>
		<item>
			<name>Class Duration Types</name>
			<description>
				<line>Added ability to define different ways how class duration is entered and used in the system (to extend the formal Minutes per Week selection).</line>
				<line>There is a new page (Administration > Other > Class Duration Types), where the class duration types can be managed.
					<line>Permission ClassDurationTypes is needed to access the page, ClassDurationTypeEdit is needed to make changes.</line>
				</line>
				<line>Default duration type can be defined on an academic session, it can be overriden on the instructional offering configuration level (Instructional Offering Configuration page).
					<line>Name of the default duration type is used in the column headers (Classes, Instructional Offerings), abbreviation is used to suffix durations that are using a non-default duration type.</line>
				</line>
				<line>Following class duration types have been implemented:
					<line>Minutes per Week (default): this is the existing behaviour (minutes per week == number of meetings x minutes per meeting)</line>
					<line>Average Weekly Mintes: average number of minutes a class takes during a week (weekly minutes = number of meetings x minutes per meeting x number of weeks of the data pattern / number of weeks in the term)
						<line>Paramter: number of weeks in the term (defaults to the number of weeks of the default date pattern)</line>
					</line>
					<line>Semester Minutes: number of minutes in the semester (semester minutes == number of meetings x minutes per meeting x number of weeks of the data pattern)</line>
					<line>Semester Hours: number of hours in the semester (semester hours == number of meetings x minutes per meeting x number of weeks of the data pattern / minutes in an hour)
						<line>Paramter: number of minutes in an hour (defaults to 50)</line>
					</line>
					<line>Meetings Minutes: number of minutes of all the meetings, excluding vacations (meeting minutes == number of meetings based on the date pattern x minutes per meeting)
						<line>Parameters: allowed variation of the meeting minutes, expressed as lower and upper bound (defaults to 0.95,1.10 -- meaning a class can have 5% less time, combinations with 10% more time will be also considered).</line>
						<line>If the number of meetings based on the date pattern exceeds the desired number of meeting minutes, only meetings covering the given number of meeting minutes are created.</line>
					</line>
					<line>Meeting Hours: just like meeting minutes, but with hours (semester hours == number of meetings based on the date pattern x minutes per meeting / minutes in an hour)
						<line>Paramters: number of minutes in an hour and the allowed variation of the meeting minutes (defaults to 50,0.95,1.10 -- 50 minutes in an hour, 5% less time allowed, combinations with up to 10% excess time are considered).</line>
					</line>
				</line>
				<line>It is possible to hide class duration types that are not to be used by the users.
					<line>If only one type is visible, there is no selection of the class duration type on the Instructional Offering Configuration page.</line>
				</line>
			</description>
		</item>
		<item>
			<name>Cancelled Classes</name>
			<description>
				<line>Added ability to cancel a class.</line>
				<line>Multiple Class Setup page: class with enrolments cannot be deleted, but it could be cancelled instead.</line>
				<line>Cancelled classes retain their committed assignment, but the appropriate class event is cancelled.</line>
				<line>Cancelled classes are not loaded into the course timetabling solver.</line>
				<line>Cancelled classes cannot be edited or re-assigned and they do not block the room or instructor.</line>
				<line>When a cancelled classes is reopened, the appropriate event is also re-approved.
					<line>This could cause conflicts, that have to be manually resolved.</line>
				</line>
				<line>In student scheduling, cancelled classes are avoided (no valid enrollment can contain a cancelled class).</line>
				<line>In online student scheduling, it is possible to keep existing students in cancelled classes when solver configuration parameter named Enrollment.CanKeepCancelledClass is set to true (defaults to false).</line>
				<line>New permissions:
					<line>Class Delete: ability to delete a class (class cannot be deleted when there is a committed solution and at least one student enrolled in the class)</line>
					<line>Class Delete No Enrollment Check: this permission overrides the enrollment check from the Class Delete permission (not given to any role by default)</line>
					<line>Class Cancel: ability to cancel a class (there must be a committed solution)</line>
					<line>The Class Delete and Class Cancel permissions are by default given to all roles that have Multiple Class Setup Class and / or Class Edit permissions.</line>
				</line>
				<line>Added a new permission (named Class Delete No Enrollment Check) that overrides the enrollment check from the Class Delete permission.
					<line>No role is given this permission by default.</line>
				</line>
				<line>Make Not-Offered: It is allowed to make an offering not-offered only when there are no students enrolled, there is no committed solution, or the user has the Class Delete No Enrollment Check permission.</line>
				<line>Cross Lists: it is allowed to remove a cross-listed course from an offering only when  there are no students enrolled, there is no committed solution, or the user has the Class Delete No Enrollment Check permission.</line>
			</description>
		</item>
		<item>
			<name>Conficting Classes</name>
			<description>
				<line>Class Detail: Display conflicting classes.
					<line>There is a new table called Conflicting Classes, just bellow the Timetable section.</line>
					<line>The table is only visible when the class is conflicting with some other class (or classes).</line>
					<line>The same checking as on the Class Assignment page is used.</line>
				</line>
				<line>Instructional Offering Detail: Highlight conflicting classes with light red background.
					<line>Conflicting classes are listed in the tooltip (more details are provided on the Class Detail page, see above).</line>
				</line>
				<line>Conflict checking: avoid showing conflicts between classes that can overlap because of the Can Share Room or the Meet Together distribution.</line>
			</description>
		</item>
	</category>
	<category>
		<title>Examination Timetabling</title>
		<item>
			<name>Examination Status</name>
			<description>
				<line>Added ability to set examination status individually for each examination type.
					<line>This examination status, if set, overrides the academic session status (for all users).</line>
					<line>Examination statues can be defined on the Administration > Other > Status Types page (Apply: Examinations).</line>
					<line>Following statuses are created by default: Examination Distabled, Examination Data Entry, Examination Timetabling, and Examination Published.</line>
					<line>Examination statuses can be set on the Administration > Academic Sessions > Examination Statuses page.</line>
				</line>
				<line>This allows for each examination problem to be viewed, edited, timetabled, and published at a different time.</line>
				<line>It is also possible to attach examination managers to each examination type (for the current academic session).
					<line>If this relation is defined, only the selected manager(s) can view, edit, or timetable the given examination problem (based on the status).</line>
					<line>If this relation is NOT defined, all examination managers can view, edit, or timetable all examination problems.</line>
					<line>This relation is also to be edited on the Administration > Academic Sessions > Examination Statuses page.</line>
					<line>Only managers with a role that is academic session dependent and that allows to access the examination solver are listed.</line>
				</line>
			</description>
		</item>
	</category>
	<category>
		<title>Batch Student Scheduling</title>
		<item>
			<name>Minimal Perturbation Mode</name>
			<description>
				<line>In priority and equal weigthing, the difference of an enrollment (from the initial one) is computed as an average using the following schema:
					<line>an initial section counts as 1</line>
					<line>same choice section counts as 0.9 (parameter StudentWeights.SameChoice)</line>
					<line>same time section counts as 0.7 (parameter StudentWeights.SameTime)</line>
					<line>different time section counts as 0</line>
				</line>
				<line>Non-initial enrollment weight is penalized with weight StudentWeights.Perturbation (defaults to 0.100).</line>
				<line>When MPP is enabled, solution info contains the following three new properties:
					<line>Perturbations: same section assigned (% of initial section assigned over all course requests with initial enrollment)</line>
					<line>Perturbations: same choice assigned (% of same time and instructor section assigned over all course requests with initial enrollment)</line>
					<line>Perturbations: same time assigned (% of same time section assigned over all course requests with initial enrollment)</line>
				</line>
				<line>When Sectioning.KeepInitialAssignments is set to true (defaults to false), only the initial value is in the variable’s domain (when there is an initial value).
					<line>Also there is a new global constraint (named FixInitialAssignments) that prevents unassignment of an initial value by another global constraint (limits, reservations).</line>
				</line>
			</description>
		</item>
		<item>
			<name>Request Groups</name>
			<description>
				<line>Added ability to keep students of the same group together.</line>
				<line>Measured as an average probability of two students (of a group) that are requesting the same course being given the same section (of the same subpart).</line>
				<line>There is a new weight (named StudentWeights.SameGroup, defaults to 0.1) expressing how much this criterion affects the student weight (in both priority and equal weighting).
					<line>This means that if a student is being enrolled into a completely different section, weight of such an enrollment is decreased by 10%
						(the metric reflects how much are the students spread between the sections of the course).</line>
				</line>
				<line>There is a new Request Groups report on the Student Scheduling Solver Reports page.</line>
				<line>Request groups are loaded in only when the solver paramter Load.RequestGroups is set to true, default is false</line>
			</description>
		</item>
		<item>
			<name>Interactive Changes</name>
			<description>
				<line>Added ability to use the Scheduling Assistant page to make changes in a student's schedule (current solution).</line>
				<line>It is also possible to change input data (course and free time requests of a student).
					<line>This possibility can be disabled by setting the solver configuration parameter Interactive.UpdateCourseRequests to false (defaults to true).</line>
				</line>
			</description>
		</item>
	</category>
	<category>
		<title>Event Management</title>
		<item>
			<name>iCalendar Queries</name>
			<description>
				<line>Automatically hash calendar queries to make the iCalendar URLs much shorter.
					<line>This is to overcome the 256 character limit on a subscribed calendar URL in Google Calendar.</line>
				</line>
				<line>Hashed queries are persisted in UniTime and they are automatically removed if not used for 92 days (can be changed by unitime.cleanup.hashedQueries property).</line>
				<line>This feature can be disabled by setting the application property unitime.encode.hash to false.</line>
			</description>
		</item>
	</category>
</release>
</release-history>