begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.3 (University Timetabling Application)  * Copyright (C) 2011, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|backup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ProgressWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PropertyConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|XMLWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|EntityMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|SessionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|engine
operator|.
name|SessionFactoryImplementor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|engine
operator|.
name|SessionImplementor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|metadata
operator|.
name|ClassMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|BinaryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|CollectionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|CustomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|DateType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|EmbeddedComponentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|EntityType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|ManyToOneType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|PrimitiveType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|StringType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|TimestampType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
import|;
end_import

begin_class
specifier|public
class|class
name|SessionBackup
block|{
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SessionBackup
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|SessionFactory
name|iHibSessionFactory
init|=
literal|null
decl_stmt|;
specifier|private
name|org
operator|.
name|hibernate
operator|.
name|Session
name|iHibSession
init|=
literal|null
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Entity
argument_list|>
name|iObjects
init|=
operator|new
name|HashSet
argument_list|<
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|CodedOutputStream
name|iOut
init|=
literal|null
decl_stmt|;
specifier|private
name|Long
name|iSessionId
init|=
literal|null
decl_stmt|;
specifier|private
name|Progress
name|iProgress
init|=
literal|null
decl_stmt|;
specifier|public
name|SessionBackup
parameter_list|(
name|OutputStream
name|out
parameter_list|)
block|{
name|iHibSession
operator|=
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|iHibSessionFactory
operator|=
name|iHibSession
operator|.
name|getSessionFactory
argument_list|()
expr_stmt|;
name|iOut
operator|=
name|CodedOutputStream
operator|.
name|newInstance
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|iProgress
operator|=
name|Progress
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Progress
name|getProgress
parameter_list|()
block|{
return|return
name|iProgress
return|;
block|}
specifier|private
name|void
name|add
parameter_list|(
name|TableData
operator|.
name|Table
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|iOut
operator|.
name|writeInt32NoTag
argument_list|(
name|table
operator|.
name|getSerializedSize
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|writeTo
argument_list|(
name|iOut
argument_list|)
expr_stmt|;
name|iOut
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|export
parameter_list|(
name|ClassMetadata
name|metadata
parameter_list|,
name|List
argument_list|<
name|Entity
argument_list|>
name|objects
parameter_list|)
throws|throws
name|IOException
block|{
name|iProgress
operator|.
name|setPhase
argument_list|(
name|metadata
operator|.
name|getEntityName
argument_list|()
operator|.
name|substring
argument_list|(
name|metadata
operator|.
name|getEntityName
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
operator|+
literal|" ["
operator|+
name|objects
operator|.
name|size
argument_list|()
operator|+
literal|"]"
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TableData
operator|.
name|Table
operator|.
name|Builder
name|table
init|=
name|TableData
operator|.
name|Table
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|table
operator|.
name|setName
argument_list|(
name|metadata
operator|.
name|getEntityName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Entity
name|entity
range|:
name|objects
control|)
block|{
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|TableData
operator|.
name|Record
operator|.
name|Builder
name|record
init|=
name|TableData
operator|.
name|Record
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|record
operator|.
name|setId
argument_list|(
name|metadata
operator|.
name|getIdentifier
argument_list|(
name|entity
operator|.
name|getObject
argument_list|()
argument_list|,
operator|(
name|SessionImplementor
operator|)
name|iHibSession
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|properties
label|:
for|for
control|(
name|String
name|property
range|:
name|metadata
operator|.
name|getPropertyNames
argument_list|()
control|)
block|{
name|Type
name|type
init|=
name|metadata
operator|.
name|getPropertyType
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|metadata
operator|.
name|getPropertyValue
argument_list|(
name|entity
operator|.
name|getObject
argument_list|()
argument_list|,
name|property
argument_list|,
name|EntityMode
operator|.
name|POJO
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
continue|continue;
name|TableData
operator|.
name|Element
operator|.
name|Builder
name|element
init|=
name|TableData
operator|.
name|Element
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|element
operator|.
name|setName
argument_list|(
name|property
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|instanceof
name|PrimitiveType
condition|)
block|{
name|element
operator|.
name|addValue
argument_list|(
operator|(
operator|(
name|PrimitiveType
operator|)
name|type
operator|)
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|instanceof
name|StringType
condition|)
block|{
name|element
operator|.
name|addValue
argument_list|(
operator|(
operator|(
name|StringType
operator|)
name|type
operator|)
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|instanceof
name|BinaryType
condition|)
block|{
name|element
operator|.
name|addValue
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|instanceof
name|TimestampType
condition|)
block|{
name|element
operator|.
name|addValue
argument_list|(
operator|(
operator|(
name|TimestampType
operator|)
name|type
operator|)
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|instanceof
name|DateType
condition|)
block|{
name|element
operator|.
name|addValue
argument_list|(
operator|(
operator|(
name|DateType
operator|)
name|type
operator|)
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|instanceof
name|EntityType
condition|)
block|{
name|ClassMetadata
name|m
init|=
name|iHibSessionFactory
operator|.
name|getClassMetadata
argument_list|(
operator|(
operator|(
name|EntityType
operator|)
name|type
operator|)
operator|.
name|getReturnedClass
argument_list|()
argument_list|)
decl_stmt|;
name|element
operator|.
name|addValue
argument_list|(
name|m
operator|.
name|getIdentifier
argument_list|(
name|value
argument_list|,
operator|(
name|SessionImplementor
operator|)
name|iHibSession
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|iObjects
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
name|m
argument_list|,
name|value
argument_list|,
name|entity
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|instanceof
name|CustomType
operator|&&
name|value
operator|instanceof
name|Document
condition|)
block|{
name|StringWriter
name|w
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|XMLWriter
name|x
init|=
operator|new
name|XMLWriter
argument_list|(
name|w
argument_list|,
name|OutputFormat
operator|.
name|createCompactFormat
argument_list|()
argument_list|)
decl_stmt|;
name|x
operator|.
name|write
argument_list|(
operator|(
name|Document
operator|)
name|value
argument_list|)
expr_stmt|;
name|x
operator|.
name|flush
argument_list|()
expr_stmt|;
name|x
operator|.
name|close
argument_list|()
expr_stmt|;
name|element
operator|.
name|addValue
argument_list|(
name|w
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|instanceof
name|CollectionType
condition|)
block|{
name|Collection
argument_list|<
name|?
argument_list|>
name|values
init|=
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|value
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue
name|properties
continue|;
name|ClassMetadata
name|m
init|=
name|iHibSessionFactory
operator|.
name|getClassMetadata
argument_list|(
operator|(
operator|(
name|CollectionType
operator|)
name|type
operator|)
operator|.
name|getElementType
argument_list|(
operator|(
name|SessionFactoryImplementor
operator|)
name|iHibSessionFactory
argument_list|)
operator|.
name|getReturnedClass
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|v
range|:
name|values
control|)
block|{
name|element
operator|.
name|addValue
argument_list|(
name|m
operator|.
name|getIdentifier
argument_list|(
name|v
argument_list|,
operator|(
name|SessionImplementor
operator|)
name|iHibSession
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|iObjects
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
name|m
argument_list|,
name|v
argument_list|,
name|entity
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|type
operator|instanceof
name|EmbeddedComponentType
operator|&&
name|property
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"uniqueCourseNbr"
argument_list|)
condition|)
block|{
continue|continue;
block|}
else|else
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Unknown data type: "
operator|+
name|type
operator|+
literal|" (property "
operator|+
name|metadata
operator|.
name|getEntityName
argument_list|()
operator|+
literal|"."
operator|+
name|property
operator|+
literal|", class "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|record
operator|.
name|addElement
argument_list|(
name|element
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|addRecord
argument_list|(
name|record
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|entity
operator|.
name|setExported
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|add
argument_list|(
name|table
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|backup
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|IOException
block|{
name|iProgress
operator|.
name|setStatus
argument_list|(
literal|"Exporting "
operator|+
name|session
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|Entity
name|sessionEntity
init|=
operator|new
name|Entity
argument_list|(
name|iHibSessionFactory
operator|.
name|getClassMetadata
argument_list|(
name|Session
operator|.
name|class
argument_list|)
argument_list|,
name|session
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|iSessionId
operator|=
name|session
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iObjects
operator|.
name|add
argument_list|(
name|sessionEntity
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|ClassMetadata
argument_list|>
name|allMeta
init|=
operator|new
name|TreeSet
argument_list|<
name|ClassMetadata
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|ClassMetadata
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ClassMetadata
name|m1
parameter_list|,
name|ClassMetadata
name|m2
parameter_list|)
block|{
return|return
name|m1
operator|.
name|getEntityName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getEntityName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|allMeta
operator|.
name|addAll
argument_list|(
name|iHibSessionFactory
operator|.
name|getAllClassMetadata
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Loading data"
argument_list|,
name|allMeta
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Queue
argument_list|<
name|QueueItem
argument_list|>
name|queue
init|=
operator|new
name|LinkedList
argument_list|<
name|QueueItem
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassMetadata
name|meta
range|:
name|allMeta
control|)
block|{
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
if|if
condition|(
name|meta
operator|.
name|hasSubclasses
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|String
name|property
range|:
name|meta
operator|.
name|getPropertyNames
argument_list|()
control|)
block|{
name|Type
name|type
init|=
name|meta
operator|.
name|getPropertyType
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|instanceof
name|ManyToOneType
operator|&&
name|type
operator|.
name|getReturnedClass
argument_list|()
operator|.
name|equals
argument_list|(
name|Session
operator|.
name|class
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
name|iHibSession
operator|.
name|createQuery
argument_list|(
literal|"from "
operator|+
name|meta
operator|.
name|getEntityName
argument_list|()
operator|+
literal|" where "
operator|+
name|property
operator|+
literal|".uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
name|sLog
operator|.
name|info
argument_list|(
literal|"Found "
operator|+
name|list
operator|.
name|size
argument_list|()
operator|+
literal|" x "
operator|+
name|meta
operator|.
name|getEntityName
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|added
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|list
control|)
block|{
name|Entity
name|entity
init|=
operator|new
name|Entity
argument_list|(
name|meta
argument_list|,
name|obj
argument_list|,
name|sessionEntity
argument_list|)
decl_stmt|;
if|if
condition|(
name|iObjects
operator|.
name|add
argument_list|(
name|entity
argument_list|)
operator|&&
operator|!
name|entity
operator|.
name|isExported
argument_list|()
condition|)
name|added
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|added
condition|)
name|queue
operator|.
name|add
argument_list|(
operator|new
name|QueueItem
argument_list|(
name|meta
operator|.
name|getMappedClass
argument_list|(
name|EntityMode
operator|.
name|POJO
argument_list|)
argument_list|,
name|property
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|QueueItem
name|item
init|=
literal|null
decl_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Loading data"
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|qSize
init|=
name|queue
operator|.
name|size
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|item
operator|=
name|queue
operator|.
name|poll
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
if|if
condition|(
name|iProgress
operator|.
name|getProgress
argument_list|()
operator|>=
name|qSize
condition|)
block|{
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Loading data"
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|qSize
operator|=
name|queue
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|ClassMetadata
name|meta
range|:
name|allMeta
control|)
block|{
if|if
condition|(
name|meta
operator|.
name|hasSubclasses
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|String
name|property
range|:
name|meta
operator|.
name|getPropertyNames
argument_list|()
control|)
block|{
name|Type
name|type
init|=
name|meta
operator|.
name|getPropertyType
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|instanceof
name|ManyToOneType
operator|&&
name|type
operator|.
name|getReturnedClass
argument_list|()
operator|.
name|equals
argument_list|(
name|item
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
name|iHibSession
operator|.
name|createQuery
argument_list|(
literal|"from "
operator|+
name|meta
operator|.
name|getEntityName
argument_list|()
operator|+
literal|" where "
operator|+
name|property
operator|+
literal|"."
operator|+
name|item
operator|.
name|getProperty
argument_list|()
operator|+
literal|".uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|boolean
name|added
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
name|sLog
operator|.
name|info
argument_list|(
literal|"Found "
operator|+
name|list
operator|.
name|size
argument_list|()
operator|+
literal|" x "
operator|+
name|meta
operator|.
name|getEntityName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|list
control|)
block|{
name|Entity
name|entity
init|=
operator|new
name|Entity
argument_list|(
name|meta
argument_list|,
name|obj
argument_list|,
name|sessionEntity
argument_list|)
decl_stmt|;
if|if
condition|(
name|iObjects
operator|.
name|add
argument_list|(
name|entity
argument_list|)
operator|&&
operator|!
name|entity
operator|.
name|isExported
argument_list|()
condition|)
name|added
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|added
condition|)
name|queue
operator|.
name|add
argument_list|(
operator|new
name|QueueItem
argument_list|(
name|meta
operator|.
name|getMappedClass
argument_list|(
name|EntityMode
operator|.
name|POJO
argument_list|)
argument_list|,
name|property
operator|+
literal|"."
operator|+
name|item
operator|.
name|getProperty
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|List
argument_list|<
name|Entity
argument_list|>
name|objects
init|=
operator|new
name|ArrayList
argument_list|<
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entity
name|e
range|:
name|iObjects
control|)
block|{
if|if
condition|(
name|e
operator|.
name|isExported
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|objects
operator|.
name|isEmpty
argument_list|()
operator|||
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|objects
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|objects
operator|.
name|clear
argument_list|()
expr_stmt|;
name|objects
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|objects
operator|.
name|isEmpty
argument_list|()
condition|)
break|break;
name|export
argument_list|(
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMetaData
argument_list|()
argument_list|,
name|objects
argument_list|)
expr_stmt|;
block|}
name|iProgress
operator|.
name|setStatus
argument_list|(
literal|"All done."
argument_list|)
expr_stmt|;
block|}
specifier|private
name|long
name|iSerialId
init|=
literal|0
decl_stmt|;
class|class
name|Entity
implements|implements
name|Comparable
argument_list|<
name|Entity
argument_list|>
block|{
specifier|private
name|ClassMetadata
name|iMetaData
decl_stmt|;
specifier|private
name|Serializable
name|iId
decl_stmt|;
specifier|private
name|Object
name|iObject
decl_stmt|;
specifier|private
name|Entity
name|iParent
decl_stmt|;
specifier|private
name|boolean
name|iExported
init|=
literal|false
decl_stmt|;
specifier|private
name|long
name|iSID
init|=
name|iSerialId
operator|++
decl_stmt|;
name|Entity
parameter_list|(
name|ClassMetadata
name|metadata
parameter_list|,
name|Object
name|object
parameter_list|,
name|Entity
name|parent
parameter_list|)
block|{
name|iMetaData
operator|=
name|iHibSessionFactory
operator|.
name|getClassMetadata
argument_list|(
name|object
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iMetaData
operator|==
literal|null
condition|)
name|iMetaData
operator|=
name|metadata
expr_stmt|;
if|if
condition|(
name|iMetaData
operator|.
name|hasSubclasses
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|iHibSessionFactory
operator|.
name|getAllClassMetadata
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ClassMetadata
name|classMetadata
init|=
operator|(
name|ClassMetadata
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|classMetadata
operator|.
name|getMappedClass
argument_list|(
name|EntityMode
operator|.
name|POJO
argument_list|)
operator|.
name|isInstance
argument_list|(
name|object
argument_list|)
operator|&&
operator|!
name|classMetadata
operator|.
name|hasSubclasses
argument_list|()
condition|)
block|{
name|iMetaData
operator|=
name|classMetadata
expr_stmt|;
break|break;
block|}
block|}
block|}
name|iObject
operator|=
name|object
expr_stmt|;
name|iParent
operator|=
name|parent
expr_stmt|;
name|iId
operator|=
name|iMetaData
operator|.
name|getIdentifier
argument_list|(
name|iObject
argument_list|,
operator|(
name|SessionImplementor
operator|)
name|iHibSession
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|property
range|:
name|iMetaData
operator|.
name|getPropertyNames
argument_list|()
control|)
block|{
name|Type
name|type
init|=
name|iMetaData
operator|.
name|getPropertyType
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|instanceof
name|ManyToOneType
operator|&&
name|type
operator|.
name|getReturnedClass
argument_list|()
operator|.
name|equals
argument_list|(
name|Session
operator|.
name|class
argument_list|)
condition|)
block|{
name|Session
name|session
init|=
operator|(
name|Session
operator|)
name|iMetaData
operator|.
name|getPropertyValue
argument_list|(
name|iObject
argument_list|,
name|property
argument_list|,
name|EntityMode
operator|.
name|POJO
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
operator|&&
operator|!
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|iSessionId
argument_list|)
condition|)
block|{
comment|// sLog.info("Skipping " + iObject + " (" + property + " refers to a wrong academic session)");
name|iExported
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
specifier|public
name|ClassMetadata
name|getMetaData
parameter_list|()
block|{
return|return
name|iMetaData
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|getMetaData
argument_list|()
operator|.
name|getEntityName
argument_list|()
return|;
block|}
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
return|return
name|iObject
return|;
block|}
specifier|public
name|Serializable
name|getId
parameter_list|()
block|{
return|return
name|iId
return|;
block|}
specifier|public
name|boolean
name|isExported
parameter_list|()
block|{
return|return
name|iExported
return|;
block|}
specifier|public
name|void
name|setExported
parameter_list|(
name|boolean
name|exported
parameter_list|)
block|{
name|iExported
operator|=
name|exported
expr_stmt|;
block|}
specifier|public
name|Entity
name|getParent
parameter_list|()
block|{
return|return
name|iParent
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|Entity
operator|)
condition|)
return|return
literal|false
return|;
name|Entity
name|e
init|=
operator|(
name|Entity
operator|)
name|o
decl_stmt|;
return|return
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getId
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Entity
name|e
parameter_list|)
block|{
return|return
name|iSID
operator|<
name|e
operator|.
name|iSID
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
block|}
class|class
name|QueueItem
block|{
specifier|private
name|Class
name|iType
decl_stmt|;
specifier|private
name|String
name|iProperty
decl_stmt|;
specifier|public
name|QueueItem
parameter_list|(
name|Class
name|type
parameter_list|,
name|String
name|property
parameter_list|)
block|{
name|iType
operator|=
name|type
expr_stmt|;
name|iProperty
operator|=
name|property
expr_stmt|;
block|}
specifier|public
name|Class
name|getType
parameter_list|()
block|{
return|return
name|iType
return|;
block|}
specifier|public
name|String
name|getProperty
parameter_list|()
block|{
return|return
name|iProperty
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.rootLogger"
argument_list|,
literal|"DEBUG, A1"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1"
argument_list|,
literal|"org.apache.log4j.ConsoleAppender"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1.layout"
argument_list|,
literal|"org.apache.log4j.PatternLayout"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1.layout.ConversionPattern"
argument_list|,
literal|"%-5p %c{2}: %m%n"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate.cfg"
argument_list|,
literal|"WARN"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate.cache.EhCacheProvider"
argument_list|,
literal|"ERROR"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.unitime.commons.hibernate"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.net"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|PropertyConfigurator
operator|.
name|configure
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|HibernateUtil
operator|.
name|configureHibernate
argument_list|(
name|ApplicationProperties
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"initiative"
argument_list|,
literal|"PWL"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"year"
argument_list|,
literal|"2010"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"term"
argument_list|,
literal|"Spring"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Academic session not found, use properties initiative, year, and term to set academic session."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Session: "
operator|+
name|session
argument_list|)
expr_stmt|;
block|}
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|args
operator|.
name|length
operator|==
literal|0
condition|?
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
name|session
operator|.
name|getAcademicYear
argument_list|()
operator|+
name|session
operator|.
name|getAcademicInitiative
argument_list|()
operator|+
literal|".dat"
else|:
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|SessionBackup
name|backup
init|=
operator|new
name|SessionBackup
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|backup
operator|.
name|getProgress
argument_list|()
operator|.
name|addProgressListener
argument_list|(
operator|new
name|ProgressWriter
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|backup
operator|.
name|backup
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|fatal
argument_list|(
literal|"Backup failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

