begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.3 (University Timetabling Application)  * Copyright (C) 2011, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|backup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ProgressWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PropertyConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|XMLWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|EntityMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|SessionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|engine
operator|.
name|SessionFactoryImplementor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|engine
operator|.
name|SessionImplementor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|metadata
operator|.
name|ClassMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|BinaryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|CollectionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|CustomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|DateType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|EmbeddedComponentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|EntityType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|PrimitiveType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|StringType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|TimestampType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AssignmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ConstraintInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|LastLikeCourseDemand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolutionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
import|;
end_import

begin_class
specifier|public
class|class
name|SessionBackup
block|{
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SessionBackup
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|SessionFactory
name|iHibSessionFactory
init|=
literal|null
decl_stmt|;
specifier|private
name|org
operator|.
name|hibernate
operator|.
name|Session
name|iHibSession
init|=
literal|null
decl_stmt|;
specifier|private
name|CodedOutputStream
name|iOut
init|=
literal|null
decl_stmt|;
specifier|private
name|PrintWriter
name|iDebug
init|=
literal|null
decl_stmt|;
specifier|private
name|Long
name|iSessionId
init|=
literal|null
decl_stmt|;
specifier|private
name|Progress
name|iProgress
init|=
literal|null
decl_stmt|;
specifier|public
name|SessionBackup
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|Progress
name|progress
parameter_list|)
block|{
name|iOut
operator|=
name|CodedOutputStream
operator|.
name|newInstance
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|iProgress
operator|=
name|progress
expr_stmt|;
block|}
specifier|public
name|Progress
name|getProgress
parameter_list|()
block|{
return|return
name|iProgress
return|;
block|}
specifier|private
name|void
name|add
parameter_list|(
name|TableData
operator|.
name|Table
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|iProgress
operator|.
name|info
argument_list|(
literal|"Writing "
operator|+
name|table
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
name|table
operator|.
name|getName
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
operator|+
literal|" ["
operator|+
name|table
operator|.
name|getRecordCount
argument_list|()
operator|+
literal|" records, "
operator|+
name|table
operator|.
name|getSerializedSize
argument_list|()
operator|+
literal|" bytes]"
argument_list|)
expr_stmt|;
name|iOut
operator|.
name|writeInt32NoTag
argument_list|(
name|table
operator|.
name|getSerializedSize
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|writeTo
argument_list|(
name|iOut
argument_list|)
expr_stmt|;
name|iOut
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|iDebug
operator|!=
literal|null
condition|)
block|{
name|iDebug
operator|.
name|println
argument_list|(
literal|"## "
operator|+
name|table
operator|.
name|getName
argument_list|()
operator|+
literal|" ##"
argument_list|)
expr_stmt|;
name|iDebug
operator|.
name|print
argument_list|(
name|table
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|iDebug
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|debug
parameter_list|(
name|PrintWriter
name|pw
parameter_list|)
block|{
name|iDebug
operator|=
name|pw
expr_stmt|;
block|}
specifier|public
name|void
name|backup
parameter_list|(
name|Long
name|sessionId
parameter_list|)
throws|throws
name|IOException
block|{
name|iSessionId
operator|=
name|sessionId
expr_stmt|;
name|iHibSession
operator|=
operator|new
name|_RootDAO
argument_list|()
operator|.
name|createNewSession
argument_list|()
expr_stmt|;
name|iHibSessionFactory
operator|=
name|iHibSession
operator|.
name|getSessionFactory
argument_list|()
expr_stmt|;
try|try
block|{
name|iProgress
operator|.
name|setStatus
argument_list|(
literal|"Exporting Session"
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Loading Model"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|ClassMetadata
argument_list|>
name|allMeta
init|=
operator|new
name|TreeSet
argument_list|<
name|ClassMetadata
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|ClassMetadata
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ClassMetadata
name|m1
parameter_list|,
name|ClassMetadata
name|m2
parameter_list|)
block|{
return|return
name|m1
operator|.
name|getEntityName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getEntityName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|allMeta
operator|.
name|addAll
argument_list|(
name|iHibSessionFactory
operator|.
name|getAllClassMetadata
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|Queue
argument_list|<
name|QueueItem
argument_list|>
name|queue
init|=
operator|new
name|LinkedList
argument_list|<
name|QueueItem
argument_list|>
argument_list|()
decl_stmt|;
name|queue
operator|.
name|add
argument_list|(
operator|new
name|QueueItem
argument_list|(
name|iHibSessionFactory
operator|.
name|getClassMetadata
argument_list|(
name|Session
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"uniqueId"
argument_list|,
name|Relation
operator|.
name|None
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|avoid
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// avoid following relations
name|avoid
operator|.
name|add
argument_list|(
name|TimetableManager
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".departments"
argument_list|)
expr_stmt|;
name|avoid
operator|.
name|add
argument_list|(
name|TimetableManager
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".solverGroups"
argument_list|)
expr_stmt|;
name|avoid
operator|.
name|add
argument_list|(
name|DistributionType
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".departments"
argument_list|)
expr_stmt|;
name|avoid
operator|.
name|add
argument_list|(
name|LastLikeCourseDemand
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".student"
argument_list|)
expr_stmt|;
name|avoid
operator|.
name|add
argument_list|(
name|Student
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".lastLikeCourseDemands"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|disallowedNotNullRelations
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|disallowedNotNullRelations
operator|.
name|add
argument_list|(
name|Assignment
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".datePattern"
argument_list|)
expr_stmt|;
name|disallowedNotNullRelations
operator|.
name|add
argument_list|(
name|Assignment
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".timePattern"
argument_list|)
expr_stmt|;
name|disallowedNotNullRelations
operator|.
name|add
argument_list|(
name|LastLikeCourseDemand
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".student"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|QueueItem
argument_list|>
argument_list|>
name|data
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|QueueItem
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|QueueItem
argument_list|>
name|sessions
init|=
operator|new
name|ArrayList
argument_list|<
name|QueueItem
argument_list|>
argument_list|()
decl_stmt|;
name|sessions
operator|.
name|add
argument_list|(
name|queue
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|queue
operator|.
name|peek
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|sessions
argument_list|)
expr_stmt|;
name|QueueItem
name|item
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|item
operator|=
name|queue
operator|.
name|poll
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|item
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
for|for
control|(
name|ClassMetadata
name|meta
range|:
name|allMeta
control|)
block|{
if|if
condition|(
name|meta
operator|.
name|hasSubclasses
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|meta
operator|.
name|getPropertyNames
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|property
init|=
name|meta
operator|.
name|getPropertyNames
argument_list|()
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|disallowedNotNullRelations
operator|.
name|contains
argument_list|(
name|meta
operator|.
name|getEntityName
argument_list|()
operator|+
literal|"."
operator|+
name|property
argument_list|)
operator|||
name|meta
operator|.
name|getPropertyNullability
argument_list|()
index|[
name|i
index|]
condition|)
continue|continue;
name|Type
name|type
init|=
name|meta
operator|.
name|getPropertyTypes
argument_list|()
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|type
operator|instanceof
name|EntityType
operator|&&
name|type
operator|.
name|getReturnedClass
argument_list|()
operator|.
name|equals
argument_list|(
name|item
operator|.
name|clazz
argument_list|()
argument_list|)
condition|)
block|{
name|QueueItem
name|qi
init|=
operator|new
name|QueueItem
argument_list|(
name|meta
argument_list|,
name|item
argument_list|,
name|property
argument_list|,
name|Relation
operator|.
name|Parent
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|data
operator|.
name|containsKey
argument_list|(
name|qi
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|QueueItem
argument_list|>
name|items
init|=
operator|new
name|ArrayList
argument_list|<
name|QueueItem
argument_list|>
argument_list|()
decl_stmt|;
name|data
operator|.
name|put
argument_list|(
name|qi
operator|.
name|name
argument_list|()
argument_list|,
name|items
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|qi
argument_list|)
expr_stmt|;
name|items
operator|.
name|add
argument_list|(
name|qi
argument_list|)
expr_stmt|;
if|if
condition|(
name|qi
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|iProgress
operator|.
name|info
argument_list|(
literal|"Parent: "
operator|+
name|qi
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|QueueItem
argument_list|>
name|list
range|:
name|data
operator|.
name|values
argument_list|()
control|)
name|queue
operator|.
name|addAll
argument_list|(
name|list
argument_list|)
expr_stmt|;
comment|// The following part is needed to ensure that instructor distribution preferences are saved including their distribution types
name|List
argument_list|<
name|QueueItem
argument_list|>
name|distributions
init|=
operator|new
name|ArrayList
argument_list|<
name|QueueItem
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|QueueItem
name|instructor
range|:
name|data
operator|.
name|get
argument_list|(
name|DepartmentalInstructor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
control|)
block|{
name|QueueItem
name|qi
init|=
operator|new
name|QueueItem
argument_list|(
name|iHibSessionFactory
operator|.
name|getClassMetadata
argument_list|(
name|DistributionPref
operator|.
name|class
argument_list|)
argument_list|,
name|instructor
argument_list|,
literal|"owner"
argument_list|,
name|Relation
operator|.
name|Parent
argument_list|)
decl_stmt|;
name|distributions
operator|.
name|add
argument_list|(
name|qi
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|qi
argument_list|)
expr_stmt|;
if|if
condition|(
name|qi
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|iProgress
operator|.
name|info
argument_list|(
literal|"Extra: "
operator|+
name|qi
argument_list|)
expr_stmt|;
block|}
name|data
operator|.
name|put
argument_list|(
name|DistributionPref
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|distributions
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
name|item
operator|=
name|queue
operator|.
name|poll
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|item
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|item
operator|.
name|meta
argument_list|()
operator|.
name|getPropertyNames
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|property
init|=
name|item
operator|.
name|meta
argument_list|()
operator|.
name|getPropertyNames
argument_list|()
index|[
name|i
index|]
decl_stmt|;
name|Type
name|type
init|=
name|item
operator|.
name|meta
argument_list|()
operator|.
name|getPropertyTypes
argument_list|()
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|type
operator|instanceof
name|EntityType
condition|)
block|{
if|if
condition|(
name|avoid
operator|.
name|contains
argument_list|(
name|item
operator|.
name|name
argument_list|()
operator|+
literal|"."
operator|+
name|property
argument_list|)
condition|)
continue|continue;
name|ClassMetadata
name|meta
init|=
name|iHibSessionFactory
operator|.
name|getClassMetadata
argument_list|(
name|type
operator|.
name|getReturnedClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|contains
argument_list|(
name|meta
operator|.
name|getEntityName
argument_list|()
argument_list|)
condition|)
continue|continue;
name|QueueItem
name|qi
init|=
operator|new
name|QueueItem
argument_list|(
name|meta
argument_list|,
name|item
argument_list|,
name|property
argument_list|,
name|Relation
operator|.
name|One
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|QueueItem
argument_list|>
name|items
init|=
name|data
operator|.
name|get
argument_list|(
name|qi
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|items
operator|==
literal|null
condition|)
block|{
name|items
operator|=
operator|new
name|ArrayList
argument_list|<
name|QueueItem
argument_list|>
argument_list|()
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|qi
operator|.
name|name
argument_list|()
argument_list|,
name|items
argument_list|)
expr_stmt|;
block|}
name|queue
operator|.
name|add
argument_list|(
name|qi
argument_list|)
expr_stmt|;
name|items
operator|.
name|add
argument_list|(
name|qi
argument_list|)
expr_stmt|;
if|if
condition|(
name|qi
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|iProgress
operator|.
name|info
argument_list|(
literal|"One: "
operator|+
name|qi
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|instanceof
name|CollectionType
condition|)
block|{
if|if
condition|(
name|avoid
operator|.
name|contains
argument_list|(
name|item
operator|.
name|name
argument_list|()
operator|+
literal|"."
operator|+
name|property
argument_list|)
condition|)
continue|continue;
name|ClassMetadata
name|meta
init|=
name|iHibSessionFactory
operator|.
name|getClassMetadata
argument_list|(
operator|(
operator|(
name|CollectionType
operator|)
name|type
operator|)
operator|.
name|getElementType
argument_list|(
operator|(
name|SessionFactoryImplementor
operator|)
name|iHibSessionFactory
argument_list|)
operator|.
name|getReturnedClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|meta
operator|==
literal|null
operator|||
name|item
operator|.
name|contains
argument_list|(
name|meta
operator|.
name|getEntityName
argument_list|()
argument_list|)
condition|)
continue|continue;
name|QueueItem
name|qi
init|=
operator|new
name|QueueItem
argument_list|(
name|meta
argument_list|,
name|item
argument_list|,
name|property
argument_list|,
name|Relation
operator|.
name|Many
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|QueueItem
argument_list|>
name|items
init|=
name|data
operator|.
name|get
argument_list|(
name|qi
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|items
operator|==
literal|null
condition|)
block|{
name|items
operator|=
operator|new
name|ArrayList
argument_list|<
name|QueueItem
argument_list|>
argument_list|()
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|qi
operator|.
name|name
argument_list|()
argument_list|,
name|items
argument_list|)
expr_stmt|;
block|}
name|queue
operator|.
name|add
argument_list|(
name|qi
argument_list|)
expr_stmt|;
name|items
operator|.
name|add
argument_list|(
name|qi
argument_list|)
expr_stmt|;
if|if
condition|(
name|qi
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|iProgress
operator|.
name|info
argument_list|(
literal|"Many: "
operator|+
name|qi
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Serializable
argument_list|>
argument_list|>
name|allExportedIds
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Serializable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|data
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|List
argument_list|<
name|QueueItem
argument_list|>
name|list
init|=
name|data
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|TableData
operator|.
name|Table
operator|.
name|Builder
argument_list|>
name|tables
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TableData
operator|.
name|Table
operator|.
name|Builder
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|QueueItem
name|current
range|:
name|list
control|)
block|{
if|if
condition|(
name|current
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
name|iProgress
operator|.
name|info
argument_list|(
literal|"Loading "
operator|+
name|current
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|objects
init|=
name|current
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|objects
operator|==
literal|null
operator|||
name|objects
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|iProgress
operator|.
name|setPhase
argument_list|(
name|current
operator|.
name|abbv
argument_list|()
operator|+
literal|" ["
operator|+
name|objects
operator|.
name|size
argument_list|()
operator|+
literal|"]"
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|objects
label|:
for|for
control|(
name|Object
name|object
range|:
name|objects
control|)
block|{
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
comment|// Get meta data (check for sub-classes)
name|ClassMetadata
name|meta
init|=
name|iHibSessionFactory
operator|.
name|getClassMetadata
argument_list|(
name|object
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|meta
operator|==
literal|null
condition|)
name|meta
operator|=
name|current
operator|.
name|meta
argument_list|()
expr_stmt|;
if|if
condition|(
name|meta
operator|.
name|hasSubclasses
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|iHibSessionFactory
operator|.
name|getAllClassMetadata
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ClassMetadata
name|classMetadata
init|=
operator|(
name|ClassMetadata
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|classMetadata
operator|.
name|getMappedClass
argument_list|(
name|EntityMode
operator|.
name|POJO
argument_list|)
operator|.
name|isInstance
argument_list|(
name|object
argument_list|)
operator|&&
operator|!
name|classMetadata
operator|.
name|hasSubclasses
argument_list|()
condition|)
block|{
name|meta
operator|=
name|classMetadata
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|// Get unique identifier
name|Serializable
name|id
init|=
name|meta
operator|.
name|getIdentifier
argument_list|(
name|object
argument_list|,
operator|(
name|SessionImplementor
operator|)
name|iHibSession
argument_list|)
decl_stmt|;
comment|// Check if already exported
name|Set
argument_list|<
name|Serializable
argument_list|>
name|exportedIds
init|=
name|allExportedIds
operator|.
name|get
argument_list|(
name|meta
operator|.
name|getEntityName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|exportedIds
operator|==
literal|null
condition|)
block|{
name|exportedIds
operator|=
operator|new
name|HashSet
argument_list|<
name|Serializable
argument_list|>
argument_list|()
expr_stmt|;
name|allExportedIds
operator|.
name|put
argument_list|(
name|meta
operator|.
name|getEntityName
argument_list|()
argument_list|,
name|exportedIds
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|exportedIds
operator|.
name|add
argument_list|(
name|id
argument_list|)
condition|)
continue|continue;
comment|// Check relation to an academic session (if exists)
for|for
control|(
name|String
name|property
range|:
name|meta
operator|.
name|getPropertyNames
argument_list|()
control|)
block|{
name|Type
name|type
init|=
name|meta
operator|.
name|getPropertyType
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|instanceof
name|EntityType
operator|&&
name|type
operator|.
name|getReturnedClass
argument_list|()
operator|.
name|equals
argument_list|(
name|Session
operator|.
name|class
argument_list|)
condition|)
block|{
name|Session
name|s
init|=
operator|(
name|Session
operator|)
name|meta
operator|.
name|getPropertyValue
argument_list|(
name|object
argument_list|,
name|property
argument_list|,
name|EntityMode
operator|.
name|POJO
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
operator|&&
operator|!
name|s
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|iSessionId
argument_list|)
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
name|meta
operator|.
name|getEntityName
argument_list|()
operator|.
name|substring
argument_list|(
name|meta
operator|.
name|getEntityName
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
operator|+
literal|"@"
operator|+
name|id
operator|+
literal|" belongs to a different academic session ("
operator|+
name|s
operator|+
literal|")"
argument_list|)
expr_stmt|;
continue|continue
name|objects
continue|;
comment|// wrong session
block|}
block|}
block|}
comment|// Get appropriate table
name|TableData
operator|.
name|Table
operator|.
name|Builder
name|table
init|=
name|tables
operator|.
name|get
argument_list|(
name|meta
operator|.
name|getEntityName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
name|table
operator|=
name|TableData
operator|.
name|Table
operator|.
name|newBuilder
argument_list|()
expr_stmt|;
name|tables
operator|.
name|put
argument_list|(
name|meta
operator|.
name|getEntityName
argument_list|()
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|table
operator|.
name|setName
argument_list|(
name|meta
operator|.
name|getEntityName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Export object
name|TableData
operator|.
name|Record
operator|.
name|Builder
name|record
init|=
name|TableData
operator|.
name|Record
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|record
operator|.
name|setId
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|property
range|:
name|meta
operator|.
name|getPropertyNames
argument_list|()
control|)
block|{
name|Type
name|type
init|=
name|meta
operator|.
name|getPropertyType
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|meta
operator|.
name|getPropertyValue
argument_list|(
name|object
argument_list|,
name|property
argument_list|,
name|EntityMode
operator|.
name|POJO
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
continue|continue;
name|TableData
operator|.
name|Element
operator|.
name|Builder
name|element
init|=
name|TableData
operator|.
name|Element
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|element
operator|.
name|setName
argument_list|(
name|property
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|instanceof
name|PrimitiveType
condition|)
block|{
name|element
operator|.
name|addValue
argument_list|(
operator|(
operator|(
name|PrimitiveType
operator|)
name|type
operator|)
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|instanceof
name|StringType
condition|)
block|{
name|element
operator|.
name|addValue
argument_list|(
operator|(
operator|(
name|StringType
operator|)
name|type
operator|)
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|instanceof
name|BinaryType
condition|)
block|{
name|element
operator|.
name|addValue
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|instanceof
name|TimestampType
condition|)
block|{
name|element
operator|.
name|addValue
argument_list|(
operator|(
operator|(
name|TimestampType
operator|)
name|type
operator|)
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|instanceof
name|DateType
condition|)
block|{
name|element
operator|.
name|addValue
argument_list|(
operator|(
operator|(
name|DateType
operator|)
name|type
operator|)
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|instanceof
name|EntityType
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|ids
init|=
name|current
operator|.
name|relation
argument_list|(
name|property
argument_list|,
name|id
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|ids
operator|!=
literal|null
condition|)
for|for
control|(
name|Object
name|i
range|:
name|ids
control|)
name|element
operator|.
name|addValue
argument_list|(
name|i
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|evict
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|instanceof
name|CustomType
operator|&&
name|value
operator|instanceof
name|Document
condition|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|CurriculumClassification
operator|&&
name|property
operator|.
name|equals
argument_list|(
literal|"students"
argument_list|)
condition|)
continue|continue;
name|StringWriter
name|w
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|XMLWriter
name|x
init|=
operator|new
name|XMLWriter
argument_list|(
name|w
argument_list|,
name|OutputFormat
operator|.
name|createCompactFormat
argument_list|()
argument_list|)
decl_stmt|;
name|x
operator|.
name|write
argument_list|(
operator|(
name|Document
operator|)
name|value
argument_list|)
expr_stmt|;
name|x
operator|.
name|flush
argument_list|()
expr_stmt|;
name|x
operator|.
name|close
argument_list|()
expr_stmt|;
name|element
operator|.
name|addValue
argument_list|(
name|w
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|instanceof
name|CollectionType
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|ids
init|=
name|current
operator|.
name|relation
argument_list|(
name|property
argument_list|,
name|id
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|ids
operator|!=
literal|null
condition|)
for|for
control|(
name|Object
name|i
range|:
name|ids
control|)
name|element
operator|.
name|addValue
argument_list|(
name|i
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|instanceof
name|EmbeddedComponentType
operator|&&
name|property
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"uniqueCourseNbr"
argument_list|)
condition|)
block|{
continue|continue;
block|}
else|else
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unknown data type: "
operator|+
name|type
operator|+
literal|" (property "
operator|+
name|meta
operator|.
name|getEntityName
argument_list|()
operator|+
literal|"."
operator|+
name|property
operator|+
literal|", class "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|record
operator|.
name|addElement
argument_list|(
name|element
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|addRecord
argument_list|(
name|record
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|evict
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
name|current
operator|.
name|clearCache
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|TableData
operator|.
name|Table
operator|.
name|Builder
name|table
range|:
name|tables
operator|.
name|values
argument_list|()
control|)
block|{
name|add
argument_list|(
name|table
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*             // Skip ConstraintInfo             if (!iData.containsKey(ConstraintInfo.class.getName()))             	iData.put(ConstraintInfo.class.getName(), new QueueItem(iHibSessionFactory.getClassMetadata(ConstraintInfo.class), null, null, Relation.Empty));              for (String name: items)             	export(iData.get(name));                          		while (true) {     			List<Object> objects = new ArrayList<Object>();     			ClassMetadata meta = null;     			for (Entity e: iObjects) {     				if (e.exported()) continue;     				if (objects.isEmpty() || meta.getEntityName().equals(e.name())) {     					meta = e.meta();     					objects.add(e.object());     					e.notifyExported();     				}     			}     			if (objects.isEmpty()) break;     			export(meta, objects, null);     		}     		*/
name|iProgress
operator|.
name|setStatus
argument_list|(
literal|"All done."
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|iHibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
enum|enum
name|Relation
block|{
name|None
block|,
name|Parent
block|,
name|One
block|,
name|Many
block|,
name|Empty
block|}
specifier|private
name|int
name|iQueueItemCoutner
init|=
literal|0
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Serializable
argument_list|>
argument_list|>
name|iExclude
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Serializable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
class|class
name|QueueItem
block|{
name|QueueItem
name|iParent
decl_stmt|;
name|ClassMetadata
name|iMeta
decl_stmt|;
name|String
name|iProperty
decl_stmt|;
name|int
name|iQueueItemId
init|=
name|iQueueItemCoutner
operator|++
decl_stmt|;
name|Relation
name|iRelation
decl_stmt|;
name|int
name|size
init|=
operator|-
literal|1
decl_stmt|;
name|QueueItem
parameter_list|(
name|ClassMetadata
name|meta
parameter_list|,
name|QueueItem
name|parent
parameter_list|,
name|String
name|property
parameter_list|,
name|Relation
name|relation
parameter_list|)
block|{
name|iMeta
operator|=
name|meta
expr_stmt|;
name|iParent
operator|=
name|parent
expr_stmt|;
name|iProperty
operator|=
name|property
expr_stmt|;
name|iRelation
operator|=
name|relation
expr_stmt|;
block|}
name|String
name|property
parameter_list|()
block|{
return|return
name|iProperty
return|;
block|}
name|QueueItem
name|parent
parameter_list|()
block|{
return|return
name|iParent
return|;
block|}
name|ClassMetadata
name|meta
parameter_list|()
block|{
return|return
name|iMeta
return|;
block|}
name|String
name|name
parameter_list|()
block|{
return|return
name|meta
argument_list|()
operator|.
name|getEntityName
argument_list|()
return|;
block|}
name|String
name|abbv
parameter_list|()
block|{
return|return
name|meta
argument_list|()
operator|.
name|getEntityName
argument_list|()
operator|.
name|substring
argument_list|(
name|meta
argument_list|()
operator|.
name|getEntityName
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
return|;
block|}
name|Class
name|clazz
parameter_list|()
block|{
return|return
name|meta
argument_list|()
operator|.
name|getMappedClass
argument_list|(
name|EntityMode
operator|.
name|POJO
argument_list|)
return|;
block|}
name|int
name|qid
parameter_list|()
block|{
return|return
name|iQueueItemId
return|;
block|}
name|Relation
name|relation
parameter_list|()
block|{
return|return
name|iRelation
return|;
block|}
name|boolean
name|contains
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|name
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|parent
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|parent
argument_list|()
operator|.
name|contains
argument_list|(
name|name
argument_list|)
return|;
block|}
name|int
name|depth
parameter_list|()
block|{
return|return
name|parent
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
literal|1
operator|+
name|parent
argument_list|()
operator|.
name|depth
argument_list|()
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|abbv
argument_list|()
operator|+
literal|": "
operator|+
name|chain
argument_list|()
operator|+
literal|" ["
operator|+
name|size
argument_list|()
operator|+
literal|"]"
return|;
block|}
specifier|public
name|String
name|chain
parameter_list|()
block|{
switch|switch
condition|(
name|relation
argument_list|()
condition|)
block|{
case|case
name|None
case|:
return|return
name|property
argument_list|()
return|;
case|case
name|Parent
case|:
return|return
name|property
argument_list|()
operator|+
literal|"."
operator|+
name|parent
argument_list|()
operator|.
name|chain
argument_list|()
return|;
default|default:
switch|switch
condition|(
name|parent
argument_list|()
operator|.
name|relation
argument_list|()
condition|)
block|{
case|case
name|Parent
case|:
return|return
literal|"("
operator|+
name|parent
argument_list|()
operator|.
name|abbv
argument_list|()
operator|+
literal|"."
operator|+
name|parent
argument_list|()
operator|.
name|chain
argument_list|()
operator|+
literal|")."
operator|+
name|property
argument_list|()
return|;
case|case
name|None
case|:
return|return
name|parent
argument_list|()
operator|.
name|abbv
argument_list|()
operator|+
literal|"."
operator|+
name|property
argument_list|()
return|;
default|default:
return|return
name|parent
argument_list|()
operator|.
name|chain
argument_list|()
operator|+
literal|"."
operator|+
name|property
argument_list|()
return|;
block|}
block|}
block|}
name|String
name|hqlName
parameter_list|()
block|{
return|return
literal|"q"
operator|+
name|qid
argument_list|()
return|;
block|}
name|String
name|hqlFrom
parameter_list|()
block|{
switch|switch
condition|(
name|relation
argument_list|()
condition|)
block|{
case|case
name|One
case|:
case|case
name|Many
case|:
return|return
name|parent
argument_list|()
operator|.
name|hqlFrom
argument_list|()
operator|+
literal|" inner join "
operator|+
name|parent
argument_list|()
operator|.
name|hqlName
argument_list|()
operator|+
literal|"."
operator|+
name|property
argument_list|()
operator|+
literal|" "
operator|+
name|hqlName
argument_list|()
return|;
default|default:
return|return
operator|(
name|parent
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|parent
argument_list|()
operator|.
name|hqlFrom
argument_list|()
operator|+
literal|", "
operator|)
operator|+
name|name
argument_list|()
operator|+
literal|" "
operator|+
name|hqlName
argument_list|()
return|;
block|}
block|}
name|String
name|hqlWhere
parameter_list|()
block|{
name|String
name|where
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|relation
argument_list|()
condition|)
block|{
case|case
name|None
case|:
name|where
operator|=
name|hqlName
argument_list|()
operator|+
literal|"."
operator|+
name|property
argument_list|()
operator|+
literal|" = :sessionId"
expr_stmt|;
break|break;
case|case
name|Parent
case|:
name|where
operator|=
name|hqlName
argument_list|()
operator|+
literal|"."
operator|+
name|property
argument_list|()
operator|+
literal|" = "
operator|+
name|parent
argument_list|()
operator|.
name|hqlName
argument_list|()
operator|+
literal|" and "
operator|+
name|parent
argument_list|()
operator|.
name|hqlWhere
argument_list|()
expr_stmt|;
break|break;
default|default:
name|where
operator|=
name|parent
argument_list|()
operator|.
name|hqlWhere
argument_list|()
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|Solution
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|()
argument_list|)
condition|)
name|where
operator|+=
literal|" and "
operator|+
name|hqlName
argument_list|()
operator|+
literal|".commited = true"
expr_stmt|;
if|if
condition|(
name|Assignment
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|()
argument_list|)
condition|)
name|where
operator|+=
literal|" and "
operator|+
name|hqlName
argument_list|()
operator|+
literal|".solution.commited = true"
expr_stmt|;
if|if
condition|(
name|SolutionInfo
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|()
argument_list|)
condition|)
name|where
operator|+=
literal|" and "
operator|+
name|hqlName
argument_list|()
operator|+
literal|".definition.name = 'GlobalInfo'"
expr_stmt|;
return|return
name|where
return|;
block|}
name|int
name|size
parameter_list|()
block|{
if|if
condition|(
name|relation
argument_list|()
operator|==
name|Relation
operator|.
name|Empty
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|AssignmentInfo
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|()
argument_list|)
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|ConstraintInfo
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|()
argument_list|)
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|ChangeLog
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|()
argument_list|)
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|size
operator|<
literal|0
condition|)
block|{
name|Set
argument_list|<
name|Serializable
argument_list|>
name|ids
init|=
name|iExclude
operator|.
name|get
argument_list|(
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ids
operator|==
literal|null
condition|)
block|{
name|ids
operator|=
operator|new
name|HashSet
argument_list|<
name|Serializable
argument_list|>
argument_list|()
expr_stmt|;
name|iExclude
operator|.
name|put
argument_list|(
name|name
argument_list|()
argument_list|,
name|ids
argument_list|)
expr_stmt|;
block|}
name|size
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Serializable
name|id
range|:
operator|(
name|List
argument_list|<
name|Serializable
argument_list|>
operator|)
name|iHibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct "
operator|+
name|hqlName
argument_list|()
operator|+
literal|"."
operator|+
name|meta
argument_list|()
operator|.
name|getIdentifierPropertyName
argument_list|()
operator|+
literal|" from "
operator|+
name|hqlFrom
argument_list|()
operator|+
literal|" where "
operator|+
name|hqlWhere
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
condition|)
name|size
operator|++
expr_stmt|;
block|}
block|}
return|return
name|size
return|;
block|}
name|boolean
name|hasBlob
parameter_list|()
block|{
for|for
control|(
name|String
name|property
range|:
name|iMeta
operator|.
name|getPropertyNames
argument_list|()
control|)
block|{
if|if
condition|(
name|iMeta
operator|.
name|getPropertyType
argument_list|(
name|property
argument_list|)
operator|instanceof
name|BinaryType
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
name|boolean
name|distinct
parameter_list|()
block|{
if|if
condition|(
name|hasBlob
argument_list|()
condition|)
return|return
literal|true
return|;
switch|switch
condition|(
name|relation
argument_list|()
condition|)
block|{
case|case
name|Many
case|:
return|return
literal|false
return|;
case|case
name|One
case|:
return|return
name|parent
argument_list|()
operator|.
name|distinct
argument_list|()
return|;
default|default:
return|return
literal|true
return|;
block|}
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|list
parameter_list|()
block|{
if|if
condition|(
name|relation
argument_list|()
operator|==
name|Relation
operator|.
name|Empty
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|AssignmentInfo
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|()
argument_list|)
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|ConstraintInfo
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|()
argument_list|)
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|ChangeLog
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|()
argument_list|)
condition|)
return|return
literal|null
return|;
return|return
name|iHibSession
operator|.
name|createQuery
argument_list|(
literal|"select "
operator|+
operator|(
name|distinct
argument_list|()
condition|?
literal|""
else|:
literal|"distinct "
operator|)
operator|+
name|hqlName
argument_list|()
operator|+
literal|" from "
operator|+
name|hqlFrom
argument_list|()
operator|+
literal|" where "
operator|+
name|hqlWhere
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Serializable
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
name|iRelationCache
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Serializable
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|relation
parameter_list|(
name|String
name|property
parameter_list|,
name|Serializable
name|id
parameter_list|,
name|boolean
name|data
parameter_list|)
block|{
name|Map
argument_list|<
name|Serializable
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|relation
init|=
name|iRelationCache
operator|.
name|get
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|relation
operator|==
literal|null
condition|)
block|{
name|Type
name|type
init|=
name|meta
argument_list|()
operator|.
name|getPropertyType
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|String
name|idProperty
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|data
condition|)
block|{
name|ClassMetadata
name|meta
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|type
operator|instanceof
name|CollectionType
condition|)
name|meta
operator|=
name|iHibSessionFactory
operator|.
name|getClassMetadata
argument_list|(
operator|(
operator|(
name|CollectionType
operator|)
name|type
operator|)
operator|.
name|getElementType
argument_list|(
operator|(
name|SessionFactoryImplementor
operator|)
name|iHibSessionFactory
argument_list|)
operator|.
name|getReturnedClass
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|meta
operator|=
name|iHibSessionFactory
operator|.
name|getClassMetadata
argument_list|(
name|type
operator|.
name|getReturnedClass
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|meta
operator|==
literal|null
condition|)
block|{
name|data
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|idProperty
operator|=
name|meta
operator|.
name|getIdentifierPropertyName
argument_list|()
expr_stmt|;
if|if
condition|(
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|LastLikeCourseDemand
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
literal|"student"
operator|.
name|equals
argument_list|(
name|property
argument_list|)
condition|)
name|idProperty
operator|=
literal|"externalUniqueId"
expr_stmt|;
block|}
block|}
name|relation
operator|=
operator|new
name|HashMap
argument_list|<
name|Serializable
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|iHibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct "
operator|+
name|hqlName
argument_list|()
operator|+
literal|"."
operator|+
name|meta
argument_list|()
operator|.
name|getIdentifierPropertyName
argument_list|()
operator|+
operator|(
name|data
condition|?
literal|", p"
else|:
literal|", p."
operator|+
name|idProperty
operator|)
operator|+
literal|" from "
operator|+
name|hqlFrom
argument_list|()
operator|+
literal|" inner join "
operator|+
name|hqlName
argument_list|()
operator|+
literal|"."
operator|+
name|property
operator|+
literal|" p where "
operator|+
name|hqlWhere
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
name|relation
operator|.
name|get
argument_list|(
operator|(
name|Serializable
operator|)
name|o
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|relation
operator|.
name|put
argument_list|(
operator|(
name|Serializable
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|o
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|iRelationCache
operator|.
name|put
argument_list|(
name|property
argument_list|,
name|relation
argument_list|)
expr_stmt|;
comment|// iProgress.info("Fetched " + property + " (" + cnt + (data ? " items" : " ids") + ")");
block|}
return|return
name|relation
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
specifier|private
name|void
name|clearCache
parameter_list|()
block|{
name|iRelationCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.rootLogger"
argument_list|,
literal|"DEBUG, A1"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1"
argument_list|,
literal|"org.apache.log4j.ConsoleAppender"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1.layout"
argument_list|,
literal|"org.apache.log4j.PatternLayout"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1.layout.ConversionPattern"
argument_list|,
literal|"%-5p %m%n"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate.cfg"
argument_list|,
literal|"WARN"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate.cache.EhCacheProvider"
argument_list|,
literal|"ERROR"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.unitime.commons.hibernate"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.net"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|PropertyConfigurator
operator|.
name|configure
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|HibernateUtil
operator|.
name|configureHibernate
argument_list|(
name|ApplicationProperties
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"initiative"
argument_list|,
literal|"PWL"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"year"
argument_list|,
literal|"2012"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"term"
argument_list|,
literal|"Spring"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Academic session not found, use properties initiative, year, and term to set academic session."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Session: "
operator|+
name|session
argument_list|)
expr_stmt|;
block|}
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|args
operator|.
name|length
operator|==
literal|0
condition|?
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
name|session
operator|.
name|getAcademicYear
argument_list|()
operator|+
name|session
operator|.
name|getAcademicInitiative
argument_list|()
operator|+
literal|".dat"
else|:
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|SessionBackup
name|backup
init|=
operator|new
name|SessionBackup
argument_list|(
name|out
argument_list|,
name|Progress
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|PrintWriter
name|debug
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>=
literal|2
condition|)
block|{
name|debug
operator|=
operator|new
name|PrintWriter
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|backup
operator|.
name|debug
argument_list|(
name|debug
argument_list|)
expr_stmt|;
block|}
name|backup
operator|.
name|getProgress
argument_list|()
operator|.
name|addProgressListener
argument_list|(
operator|new
name|ProgressWriter
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|backup
operator|.
name|backup
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|debug
operator|!=
literal|null
condition|)
name|debug
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|fatal
argument_list|(
literal|"Backup failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

