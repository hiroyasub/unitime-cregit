begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|criterion
operator|.
name|Restrictions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseRoomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomTypeOptionDAO
import|;
end_import

begin_class
specifier|public
class|class
name|RoomType
extends|extends
name|BaseRoomType
implements|implements
name|Comparable
argument_list|<
name|RoomType
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|RoomType
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|RoomType
parameter_list|(
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Constructor for required fields 	 */
specifier|public
name|RoomType
parameter_list|(
name|Long
name|uniqueId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|reference
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
specifier|public
specifier|static
name|TreeSet
argument_list|<
name|RoomType
argument_list|>
name|findAll
parameter_list|()
block|{
return|return
operator|new
name|TreeSet
argument_list|<
name|RoomType
argument_list|>
argument_list|(
name|RoomTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RoomType
name|findByReference
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
return|return
operator|(
name|RoomType
operator|)
name|RoomTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createCriteria
argument_list|(
name|RoomType
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
name|Restrictions
operator|.
name|eq
argument_list|(
literal|"reference"
argument_list|,
name|ref
argument_list|)
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|RoomType
name|t
parameter_list|)
block|{
name|int
name|cmp
init|=
name|getOrd
argument_list|()
operator|.
name|compareTo
argument_list|(
name|t
operator|.
name|getOrd
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|getLabel
argument_list|()
operator|.
name|compareTo
argument_list|(
name|t
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|t
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|RoomTypeOption
name|getOption
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|RoomTypeOption
name|opt
init|=
name|RoomTypeOptionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|RoomTypeOption
argument_list|(
name|this
argument_list|,
name|session
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|opt
operator|==
literal|null
condition|)
name|opt
operator|=
operator|new
name|RoomTypeOption
argument_list|(
name|this
argument_list|,
name|session
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt
operator|.
name|getStatus
argument_list|()
operator|==
literal|null
condition|)
name|opt
operator|.
name|setStatus
argument_list|(
name|RoomTypeOption
operator|.
name|sStatusNoOptions
argument_list|)
expr_stmt|;
return|return
name|opt
return|;
block|}
block|}
end_class

end_unit

