begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|criterion
operator|.
name|Restrictions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseRoomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomTypeOptionDAO
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|RoomType
extends|extends
name|BaseRoomType
implements|implements
name|Comparable
argument_list|<
name|RoomType
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|RoomType
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|RoomType
parameter_list|(
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
specifier|public
specifier|static
name|TreeSet
argument_list|<
name|RoomType
argument_list|>
name|findAll
parameter_list|()
block|{
return|return
operator|new
name|TreeSet
argument_list|<
name|RoomType
argument_list|>
argument_list|(
name|RoomTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TreeSet
argument_list|<
name|RoomType
argument_list|>
name|findAll
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
return|return
operator|new
name|TreeSet
argument_list|<
name|RoomType
argument_list|>
argument_list|(
name|RoomTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct t from Location l inner join l.roomType t where l.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TreeSet
argument_list|<
name|RoomType
argument_list|>
name|findAll
parameter_list|(
name|boolean
name|isRoom
parameter_list|)
block|{
return|return
operator|new
name|TreeSet
argument_list|<
name|RoomType
argument_list|>
argument_list|(
name|RoomTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createCriteria
argument_list|(
name|RoomType
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
name|Restrictions
operator|.
name|eq
argument_list|(
literal|"room"
argument_list|,
name|isRoom
argument_list|)
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RoomType
name|findByReference
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
return|return
operator|(
name|RoomType
operator|)
name|RoomTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createCriteria
argument_list|(
name|RoomType
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
name|Restrictions
operator|.
name|eq
argument_list|(
literal|"reference"
argument_list|,
name|ref
argument_list|)
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|RoomType
name|t
parameter_list|)
block|{
name|int
name|cmp
init|=
name|getOrd
argument_list|()
operator|.
name|compareTo
argument_list|(
name|t
operator|.
name|getOrd
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|getLabel
argument_list|()
operator|.
name|compareTo
argument_list|(
name|t
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
else|:
name|getUniqueId
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|t
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|t
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|RoomTypeOption
name|getOption
parameter_list|(
name|Department
name|department
parameter_list|)
block|{
if|if
condition|(
name|department
operator|==
literal|null
condition|)
block|{
name|RoomTypeOption
name|opt
init|=
operator|new
name|RoomTypeOption
argument_list|(
name|this
argument_list|,
name|department
argument_list|)
decl_stmt|;
name|opt
operator|.
name|setStatus
argument_list|(
name|RoomTypeOption
operator|.
name|getDefaultStatus
argument_list|()
argument_list|)
expr_stmt|;
name|opt
operator|.
name|setBreakTime
argument_list|(
name|ApplicationProperty
operator|.
name|RoomDefaultBreakTime
operator|.
name|intValue
argument_list|(
name|getReference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|opt
return|;
block|}
name|RoomTypeOption
name|opt
init|=
operator|(
name|RoomTypeOption
operator|)
name|RoomTypeOptionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from RoomTypeOption where department.uniqueId = :departmentId and roomType.uniqueId = :roomTypeId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"departmentId"
argument_list|,
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"roomTypeId"
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|opt
operator|==
literal|null
condition|)
name|opt
operator|=
operator|new
name|RoomTypeOption
argument_list|(
name|this
argument_list|,
name|department
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt
operator|.
name|getStatus
argument_list|()
operator|==
literal|null
condition|)
name|opt
operator|.
name|setStatus
argument_list|(
name|RoomTypeOption
operator|.
name|getDefaultStatus
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt
operator|.
name|getBreakTime
argument_list|()
operator|==
literal|null
condition|)
name|opt
operator|.
name|setBreakTime
argument_list|(
name|ApplicationProperty
operator|.
name|RoomDefaultBreakTime
operator|.
name|intValue
argument_list|(
name|getReference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|opt
return|;
block|}
annotation|@
name|Deprecated
specifier|public
name|boolean
name|canScheduleEvents
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
for|for
control|(
name|RoomTypeOption
name|option
range|:
operator|(
name|List
argument_list|<
name|RoomTypeOption
argument_list|>
operator|)
name|RoomTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct o from "
operator|+
operator|(
name|isRoom
argument_list|()
condition|?
literal|"Room"
else|:
literal|"NonUniversityLocation"
operator|)
operator|+
literal|" r, RoomTypeOption o "
operator|+
literal|"where r.roomType.uniqueId = :roomTypeId and r.session.uniqueId = :sessionId and "
operator|+
literal|"r.eventDepartment.allowEvents = true and r.eventDepartment = o.department and r.roomType = o.roomType"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"roomTypeId"
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
control|)
block|{
if|if
condition|(
name|option
operator|.
name|canScheduleEvents
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|countRooms
parameter_list|()
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|RoomTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(distinct r.permanentId) from "
operator|+
operator|(
name|isRoom
argument_list|()
condition|?
literal|"Room"
else|:
literal|"NonUniversityLocation"
operator|)
operator|+
literal|" r where r.roomType.uniqueId=:roomTypeId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"roomTypeId"
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
specifier|public
name|int
name|countRooms
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|RoomTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(r) from "
operator|+
operator|(
name|isRoom
argument_list|()
condition|?
literal|"Room"
else|:
literal|"NonUniversityLocation"
operator|)
operator|+
literal|" r where r.roomType.uniqueId=:roomTypeId and r.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"roomTypeId"
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
specifier|public
name|int
name|countManagableRooms
parameter_list|()
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|RoomTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(distinct r.permanentId) from "
operator|+
operator|(
name|isRoom
argument_list|()
condition|?
literal|"Room"
else|:
literal|"NonUniversityLocation"
operator|)
operator|+
literal|" r "
operator|+
literal|"where r.roomType.uniqueId=:roomTypeId and "
operator|+
literal|"r.eventDepartment.allowEvents = true"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"roomTypeId"
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|Location
argument_list|>
name|getManagableRooms
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
return|return
operator|(
name|List
argument_list|<
name|Location
argument_list|>
operator|)
name|RoomTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select r from "
operator|+
operator|(
name|isRoom
argument_list|()
condition|?
literal|"Room"
else|:
literal|"NonUniversityLocation"
operator|)
operator|+
literal|" r "
operator|+
literal|"where r.roomType.uniqueId=:roomTypeId and r.session.uniqueId=:sessionId and "
operator|+
literal|"r.eventDepartment.allowEvents = true"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"roomTypeId"
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|public
name|int
name|countManagableRooms
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|RoomTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(r) from "
operator|+
operator|(
name|isRoom
argument_list|()
condition|?
literal|"Room"
else|:
literal|"NonUniversityLocation"
operator|)
operator|+
literal|" r "
operator|+
literal|"where r.roomType.uniqueId=:roomTypeId and r.session.uniqueId=:sessionId and "
operator|+
literal|"r.eventDepartment.allowEvents = true"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"roomTypeId"
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
specifier|public
name|int
name|countManagableRoomsOfBuilding
parameter_list|(
name|Long
name|buildingId
parameter_list|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|RoomTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(r) from Room r "
operator|+
literal|"where r.roomType.uniqueId=:roomTypeId and r.building.uniqueId=:buildingId and "
operator|+
literal|"r.eventDepartment.allowEvents = true"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"roomTypeId"
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"buildingId"
argument_list|,
name|buildingId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
block|}
end_class

end_unit

