begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2008 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DistanceMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Hibernate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|HibernateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|LazyInitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|CourseMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamLocationPrefDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|LocationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|Qualifiable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamRoomInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|RequiredTimeTable
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|Location
extends|extends
name|BaseLocation
implements|implements
name|Comparable
block|{
specifier|public
specifier|static
specifier|final
name|CourseMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|CourseMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|AVAILABLE_LOCATIONS_ATTR
init|=
literal|"availableLocations"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|Location
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|Location
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|Location
operator|)
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|this
operator|instanceof
name|Room
condition|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Room
condition|)
block|{
name|Room
name|r1
init|=
operator|(
name|Room
operator|)
name|this
decl_stmt|;
name|Room
name|r2
init|=
operator|(
name|Room
operator|)
name|o
decl_stmt|;
name|int
name|cmp
init|=
name|r1
operator|.
name|getBuilding
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getBuilding
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|r1
operator|.
name|getRoomNumber
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getRoomNumber
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|r1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
else|else
return|return
operator|-
literal|1
return|;
comment|//rooms first
block|}
if|else if
condition|(
name|this
operator|instanceof
name|NonUniversityLocation
condition|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Room
condition|)
block|{
return|return
literal|1
return|;
comment|//rooms first
block|}
if|else if
condition|(
name|o
operator|instanceof
name|NonUniversityLocation
condition|)
block|{
name|NonUniversityLocation
name|l1
init|=
operator|(
name|NonUniversityLocation
operator|)
name|this
decl_stmt|;
name|NonUniversityLocation
name|l2
init|=
operator|(
name|NonUniversityLocation
operator|)
name|o
decl_stmt|;
name|int
name|cmp
init|=
name|l1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|l2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|l1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|l2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
else|else
return|return
operator|-
literal|1
return|;
comment|//all the rest after
block|}
else|else
block|{
return|return
operator|(
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
else|:
name|getUniqueId
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
operator|(
operator|(
name|Location
operator|)
name|o
operator|)
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
operator|(
operator|(
name|Location
operator|)
name|o
operator|)
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|abstract
name|String
name|getLabel
parameter_list|()
function_decl|;
comment|/** Room sharing table with all fields editable (for administrator) */
specifier|public
name|RequiredTimeTable
name|getRoomSharingTable
parameter_list|()
block|{
return|return
operator|new
name|RequiredTimeTable
argument_list|(
operator|new
name|RoomSharingModel
argument_list|(
name|this
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
comment|//all editable
block|}
specifier|public
name|RequiredTimeTable
name|getEventAvailabilityTable
parameter_list|()
block|{
name|RoomSharingModel
name|model
init|=
operator|new
name|RoomSharingModel
argument_list|(
name|this
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|model
operator|.
name|setEventAvailabilityPreference
argument_list|(
name|getEventAvailability
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|RequiredTimeTable
argument_list|(
name|model
argument_list|)
return|;
block|}
comment|/** Room sharing table with all fields editable (for administrator) 	 * @param departments list of departments (or depatment ids) 	 */
specifier|public
name|RequiredTimeTable
name|getRoomSharingTable
parameter_list|(
name|Collection
name|departments
parameter_list|)
block|{
return|return
operator|new
name|RequiredTimeTable
argument_list|(
operator|new
name|RoomSharingModel
argument_list|(
name|this
argument_list|,
literal|null
argument_list|,
name|departments
argument_list|)
argument_list|)
return|;
comment|//all editable
block|}
comment|/** Room sharing table editable by the given manager  	 * @param session current academic session 	 * @param editingManager current timetabling manager (the one whose departments should be editable) 	 * @param departments list of departments (or depatment ids) 	 * */
specifier|public
name|RequiredTimeTable
name|getRoomSharingTable
parameter_list|(
name|UserContext
name|editingUser
parameter_list|,
name|Collection
name|departments
parameter_list|)
block|{
return|return
operator|new
name|RequiredTimeTable
argument_list|(
name|getRoomSharingModel
argument_list|(
name|editingUser
argument_list|,
name|departments
argument_list|)
argument_list|)
return|;
block|}
comment|/** Room sharing table editable by the given manager  	 * @param session current academic session 	 * @param editingManager current timetabling manager (the one whose departments should be editable) 	 * */
specifier|public
name|RequiredTimeTable
name|getRoomSharingTable
parameter_list|(
name|UserContext
name|editingUser
parameter_list|)
block|{
return|return
operator|new
name|RequiredTimeTable
argument_list|(
name|getRoomSharingModel
argument_list|(
name|editingUser
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
block|}
comment|/** Room sharing model with all fields editable (for administrator) */
specifier|public
name|RoomSharingModel
name|getRoomSharingModel
parameter_list|()
block|{
return|return
operator|new
name|RoomSharingModel
argument_list|(
name|this
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/** Room sharing model editable by the given manager 	 * @param session current academic session 	 * @param editingManager current timetabling manager (the one whose departments should be editable) 	 * @param departments list of departments (or depatment ids) 	 * */
specifier|public
name|RoomSharingModel
name|getRoomSharingModel
parameter_list|(
name|UserContext
name|editingUser
parameter_list|)
block|{
return|return
name|getRoomSharingModel
argument_list|(
name|editingUser
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/** Room sharing model editable by the given manager 	 * @param session current academic session 	 * @param editingManager current timetabling manager (the one whose departments should be editable) 	 * */
specifier|public
name|RoomSharingModel
name|getRoomSharingModel
parameter_list|(
name|UserContext
name|editingUser
parameter_list|,
name|Collection
name|departments
parameter_list|)
block|{
if|if
condition|(
name|editingUser
operator|==
literal|null
operator|||
name|editingUser
operator|.
name|getCurrentAuthority
argument_list|()
operator|==
literal|null
operator|||
name|editingUser
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
condition|)
return|return
operator|new
name|RoomSharingModel
argument_list|(
name|this
argument_list|,
literal|null
argument_list|,
name|departments
argument_list|)
return|;
name|Set
argument_list|<
name|Long
argument_list|>
name|editingDepartments
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Qualifiable
name|dept
range|:
name|editingUser
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|getQualifiers
argument_list|(
literal|"Department"
argument_list|)
control|)
name|editingDepartments
operator|.
name|add
argument_list|(
operator|(
name|Long
operator|)
name|dept
operator|.
name|getQualifierId
argument_list|()
argument_list|)
expr_stmt|;
comment|//check whether one of the editing departments has control over the room
for|for
control|(
name|Iterator
name|i
init|=
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|rd
operator|.
name|isControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|editingDepartments
operator|.
name|contains
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
return|return
operator|new
name|RoomSharingModel
argument_list|(
name|this
argument_list|,
literal|null
argument_list|,
name|departments
argument_list|)
return|;
block|}
return|return
operator|new
name|RoomSharingModel
argument_list|(
name|this
argument_list|,
name|editingDepartments
argument_list|,
name|departments
argument_list|)
return|;
block|}
comment|/** Room sharing model editable by the given manager      * @param editingDepartmentIds editable departments (null if all)      */
specifier|public
name|RoomSharingModel
name|getRoomSharingModel
parameter_list|(
name|Set
name|editingDepartmentIds
parameter_list|)
block|{
return|return
name|getRoomSharingModel
argument_list|(
name|editingDepartmentIds
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/** Room sharing model editable by the given manager      * @param editingDepartmentIds editable departments (null if all)      * @param departments list of departments (or depatment ids)      */
specifier|public
name|RoomSharingModel
name|getRoomSharingModel
parameter_list|(
name|Set
name|editingDepartmentIds
parameter_list|,
name|Collection
name|departments
parameter_list|)
block|{
return|return
operator|new
name|RoomSharingModel
argument_list|(
name|this
argument_list|,
name|editingDepartmentIds
argument_list|,
name|departments
argument_list|)
return|;
block|}
comment|/** Save changes made in the room sharing model back to the room */
specifier|public
name|void
name|setRoomSharingModel
parameter_list|(
name|RoomSharingModel
name|model
parameter_list|)
block|{
if|if
condition|(
name|model
operator|==
literal|null
condition|)
block|{
name|setPattern
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setManagerIds
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setPattern
argument_list|(
name|model
operator|.
name|getPreferences
argument_list|()
argument_list|)
expr_stmt|;
name|setManagerIds
argument_list|(
name|model
operator|.
name|getManagerIds
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setRoomSharingTable
parameter_list|(
name|RequiredTimeTable
name|table
parameter_list|)
block|{
name|setRoomSharingModel
argument_list|(
operator|(
name|RoomSharingModel
operator|)
name|table
operator|.
name|getModel
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** 	 *  	 * @param roomGroup 	 * @return 	 */
specifier|public
name|boolean
name|hasGroup
parameter_list|(
name|RoomGroup
name|roomGroup
parameter_list|)
block|{
name|boolean
name|b
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|getRoomGroups
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|roomGroup
operator|.
name|equals
argument_list|(
operator|(
name|RoomGroup
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|)
condition|)
block|{
name|b
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
return|return
name|b
return|;
block|}
specifier|public
name|boolean
name|hasGroup
parameter_list|(
name|Long
name|roomGroup
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|getRoomGroups
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
if|if
condition|(
name|roomGroup
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|RoomGroup
operator|)
name|it
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
comment|/** 	 *  	 * @param roomDept 	 * @return 	 */
specifier|public
name|boolean
name|hasRoomDept
parameter_list|(
name|Department
name|d
parameter_list|)
block|{
name|boolean
name|b
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|equals
argument_list|(
name|d
argument_list|)
operator|&&
name|rd
operator|.
name|getRoom
argument_list|()
operator|.
name|equals
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|b
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
return|return
name|b
return|;
block|}
comment|/** 	 *  	 * @param roomFeature 	 * @return 	 */
specifier|public
name|boolean
name|hasFeature
parameter_list|(
name|RoomFeature
name|roomFeature
parameter_list|)
block|{
name|boolean
name|b
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|getFeatures
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|roomFeature
operator|.
name|equals
argument_list|(
operator|(
name|RoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|)
condition|)
block|{
name|b
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
return|return
name|b
return|;
block|}
specifier|public
name|boolean
name|hasFeature
parameter_list|(
name|Long
name|roomFeature
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|getFeatures
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
if|if
condition|(
name|roomFeature
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|RoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
comment|/** 	 *  	 * @param sisReference 	 * @return 	 * @throws SmasException 	 */
specifier|public
name|boolean
name|hasGlobalFeature
parameter_list|(
name|String
name|sisReference
parameter_list|)
block|{
name|GlobalRoomFeature
name|grf
init|=
name|GlobalRoomFeature
operator|.
name|featureWithSisReference
argument_list|(
name|getSession
argument_list|()
argument_list|,
name|sisReference
argument_list|)
decl_stmt|;
if|if
condition|(
name|grf
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|hasFeature
argument_list|(
name|grf
argument_list|)
return|;
block|}
comment|/** 	 *  	 * @param roomFeature 	 */
specifier|public
name|void
name|addTofeatures
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeature
name|roomFeature
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|getFeatures
argument_list|()
condition|)
name|setFeatures
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|getFeatures
argument_list|()
operator|.
name|add
argument_list|(
name|roomFeature
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * remove feature from room 	 * @param roomFeature 	 */
specifier|public
name|void
name|removeFromfeatures
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeature
name|roomFeature
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|getFeatures
argument_list|()
condition|)
name|setFeatures
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|getFeatures
argument_list|()
operator|.
name|remove
argument_list|(
name|roomFeature
argument_list|)
expr_stmt|;
block|}
comment|/** 	 *  	 * @throws HibernateException 	 */
specifier|public
name|void
name|saveOrUpdate
parameter_list|()
throws|throws
name|HibernateException
block|{
operator|(
operator|new
name|LocationDAO
argument_list|()
operator|)
operator|.
name|saveOrUpdate
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/** 	 *  	 * @return 	 */
specifier|public
name|TreeSet
argument_list|<
name|GlobalRoomFeature
argument_list|>
name|getGlobalRoomFeatures
parameter_list|()
block|{
name|TreeSet
argument_list|<
name|GlobalRoomFeature
argument_list|>
name|grfs
init|=
operator|new
name|TreeSet
argument_list|<
name|GlobalRoomFeature
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RoomFeature
name|rf
range|:
name|getFeatures
argument_list|()
control|)
if|if
condition|(
name|rf
operator|instanceof
name|GlobalRoomFeature
condition|)
block|{
name|grfs
operator|.
name|add
argument_list|(
operator|(
name|GlobalRoomFeature
operator|)
name|rf
argument_list|)
expr_stmt|;
block|}
return|return
name|grfs
return|;
block|}
specifier|public
name|TreeSet
argument_list|<
name|RoomGroup
argument_list|>
name|getGlobalRoomGroups
parameter_list|()
block|{
name|TreeSet
argument_list|<
name|RoomGroup
argument_list|>
name|grgs
init|=
operator|new
name|TreeSet
argument_list|<
name|RoomGroup
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RoomGroup
name|rg
range|:
name|getRoomGroups
argument_list|()
control|)
block|{
if|if
condition|(
name|rg
operator|.
name|isGlobal
argument_list|()
condition|)
name|grgs
operator|.
name|add
argument_list|(
name|rg
argument_list|)
expr_stmt|;
block|}
return|return
name|grgs
return|;
block|}
comment|/** 	 *  	 * @return 	 */
specifier|public
name|TreeSet
argument_list|<
name|DepartmentRoomFeature
argument_list|>
name|getDepartmentRoomFeatures
parameter_list|()
block|{
name|TreeSet
argument_list|<
name|DepartmentRoomFeature
argument_list|>
name|drfs
init|=
operator|new
name|TreeSet
argument_list|<
name|DepartmentRoomFeature
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RoomFeature
name|rf
range|:
name|getFeatures
argument_list|()
control|)
if|if
condition|(
name|rf
operator|instanceof
name|DepartmentRoomFeature
condition|)
name|drfs
operator|.
name|add
argument_list|(
operator|(
name|DepartmentRoomFeature
operator|)
name|rf
argument_list|)
expr_stmt|;
return|return
name|drfs
return|;
block|}
comment|/** 	 *  	 * @param department 	 * @return 	 */
specifier|public
name|PreferenceLevel
name|getRoomPreferenceLevel
parameter_list|(
name|Department
name|department
parameter_list|)
block|{
if|if
condition|(
name|department
operator|==
literal|null
condition|)
return|return
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
return|;
for|for
control|(
name|Iterator
name|i
init|=
name|department
operator|.
name|getRoomPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomPref
name|rp
init|=
operator|(
name|RoomPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|rp
operator|.
name|getRoom
argument_list|()
operator|.
name|equals
argument_list|(
name|this
argument_list|)
condition|)
return|return
name|rp
operator|.
name|getPrefLevel
argument_list|()
return|;
block|}
return|return
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
return|;
block|}
comment|/** 	 *  	 * @param department 	 * @return 	 */
specifier|public
name|RoomPref
name|getRoomPreference
parameter_list|(
name|Department
name|department
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|department
operator|.
name|getRoomPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomPref
name|rp
init|=
operator|(
name|RoomPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|rp
operator|.
name|getRoom
argument_list|()
operator|.
name|equals
argument_list|(
name|this
argument_list|)
condition|)
return|return
name|rp
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|removedFromDepartment
parameter_list|(
name|Department
name|department
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|getFeatures
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomFeature
name|rf
init|=
operator|(
name|RoomFeature
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|rf
operator|instanceof
name|DepartmentRoomFeature
operator|)
condition|)
continue|continue;
name|DepartmentRoomFeature
name|drf
init|=
operator|(
name|DepartmentRoomFeature
operator|)
name|rf
decl_stmt|;
if|if
condition|(
name|department
operator|.
name|equals
argument_list|(
name|drf
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
block|{
name|drf
operator|.
name|getRooms
argument_list|()
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|drf
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|getRoomGroups
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomGroup
name|rg
init|=
operator|(
name|RoomGroup
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|rg
operator|.
name|isGlobal
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|department
operator|.
name|equals
argument_list|(
name|rg
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
block|{
name|rg
operator|.
name|getRooms
argument_list|()
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|rg
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|department
operator|.
name|getPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|p
init|=
operator|(
name|Preference
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|instanceof
name|RoomPref
operator|&&
operator|(
operator|(
name|RoomPref
operator|)
name|p
operator|)
operator|.
name|getRoom
argument_list|()
operator|.
name|equals
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|hibSession
operator|.
name|delete
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|department
argument_list|)
expr_stmt|;
name|List
name|roomPrefs
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct rp from RoomPref rp where rp.room.uniqueId=:locationId"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"locationId"
argument_list|,
name|getUniqueId
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|roomPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomPref
name|rp
init|=
operator|(
name|RoomPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|rp
operator|.
name|getOwner
argument_list|()
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|rp
operator|.
name|getOwner
argument_list|()
decl_stmt|;
if|if
condition|(
name|department
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getManagingDept
argument_list|()
argument_list|)
condition|)
block|{
name|c
operator|.
name|getPreferences
argument_list|()
operator|.
name|remove
argument_list|(
name|rp
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|rp
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rp
operator|.
name|getOwner
argument_list|()
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
name|SchedulingSubpart
name|s
init|=
operator|(
name|SchedulingSubpart
operator|)
name|rp
operator|.
name|getOwner
argument_list|()
decl_stmt|;
if|if
condition|(
name|department
operator|.
name|equals
argument_list|(
name|s
operator|.
name|getManagingDept
argument_list|()
argument_list|)
condition|)
block|{
name|s
operator|.
name|getPreferences
argument_list|()
operator|.
name|remove
argument_list|(
name|rp
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|rp
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rp
operator|.
name|getOwner
argument_list|()
operator|instanceof
name|DepartmentalInstructor
condition|)
block|{
name|DepartmentalInstructor
name|d
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|rp
operator|.
name|getOwner
argument_list|()
decl_stmt|;
if|if
condition|(
name|department
operator|.
name|equals
argument_list|(
name|d
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
block|{
name|d
operator|.
name|getPreferences
argument_list|()
operator|.
name|remove
argument_list|(
name|rp
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|rp
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|this
operator|instanceof
name|Room
condition|)
block|{
name|Building
name|bldg
init|=
operator|(
operator|(
name|Room
operator|)
name|this
operator|)
operator|.
name|getBuilding
argument_list|()
decl_stmt|;
name|List
name|bldgPrefs
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct bp from BuildingPref bp where bp.building.uniqueId=:bldgId"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"bldgId"
argument_list|,
name|bldg
operator|.
name|getUniqueId
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|bldgPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BuildingPref
name|bp
init|=
operator|(
name|BuildingPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|bp
operator|.
name|getOwner
argument_list|()
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|bp
operator|.
name|getOwner
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|getAvailableBuildings
argument_list|()
operator|.
name|contains
argument_list|(
name|bldg
argument_list|)
operator|&&
name|department
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getManagingDept
argument_list|()
argument_list|)
condition|)
block|{
name|c
operator|.
name|getPreferences
argument_list|()
operator|.
name|remove
argument_list|(
name|bp
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|bp
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|bp
operator|.
name|getOwner
argument_list|()
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
name|SchedulingSubpart
name|s
init|=
operator|(
name|SchedulingSubpart
operator|)
name|bp
operator|.
name|getOwner
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|getAvailableBuildings
argument_list|()
operator|.
name|contains
argument_list|(
name|bldg
argument_list|)
operator|&&
name|department
operator|.
name|equals
argument_list|(
name|s
operator|.
name|getManagingDept
argument_list|()
argument_list|)
condition|)
block|{
name|s
operator|.
name|getPreferences
argument_list|()
operator|.
name|remove
argument_list|(
name|bp
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|bp
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|bp
operator|.
name|getOwner
argument_list|()
operator|instanceof
name|DepartmentalInstructor
condition|)
block|{
name|DepartmentalInstructor
name|d
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|bp
operator|.
name|getOwner
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|.
name|getAvailableBuildings
argument_list|()
operator|.
name|contains
argument_list|(
name|bldg
argument_list|)
operator|&&
name|department
operator|.
name|equals
argument_list|(
name|d
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
block|{
name|d
operator|.
name|getPreferences
argument_list|()
operator|.
name|remove
argument_list|(
name|bp
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|bp
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|public
name|double
name|getDistance
parameter_list|(
name|Location
name|other
parameter_list|)
block|{
if|if
condition|(
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
return|return
literal|0.0
return|;
if|if
condition|(
name|this
operator|instanceof
name|Location
operator|&&
name|isIgnoreTooFar
argument_list|()
operator|!=
literal|null
operator|&&
name|isIgnoreTooFar
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
return|return
literal|0.0
return|;
if|if
condition|(
name|other
operator|instanceof
name|Location
operator|&&
name|other
operator|.
name|isIgnoreTooFar
argument_list|()
operator|!=
literal|null
operator|&&
name|other
operator|.
name|isIgnoreTooFar
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
return|return
literal|0.0
return|;
name|DistanceMetric
name|m
init|=
operator|new
name|DistanceMetric
argument_list|(
name|DistanceMetric
operator|.
name|Ellipsoid
operator|.
name|valueOf
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.distance.ellipsoid"
argument_list|,
name|DistanceMetric
operator|.
name|Ellipsoid
operator|.
name|LEGACY
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|m
operator|.
name|getDistanceInMeters
argument_list|(
name|getUniqueId
argument_list|()
argument_list|,
name|getCoordinateX
argument_list|()
argument_list|,
name|getCoordinateY
argument_list|()
argument_list|,
name|other
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|other
operator|.
name|getCoordinateX
argument_list|()
argument_list|,
name|other
operator|.
name|getCoordinateY
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Department
name|getControllingDepartment
parameter_list|()
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|rd
operator|.
name|isControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
return|return
name|rd
operator|.
name|getDepartment
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|abstract
name|String
name|getRoomTypeLabel
parameter_list|()
function_decl|;
specifier|public
name|Hashtable
argument_list|<
name|ExamPeriod
argument_list|,
name|PreferenceLevel
argument_list|>
name|getExamPreferences
parameter_list|(
name|ExamType
name|examType
parameter_list|)
block|{
return|return
name|getExamPreferences
argument_list|(
name|examType
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Hashtable
argument_list|<
name|ExamPeriod
argument_list|,
name|PreferenceLevel
argument_list|>
name|getExamPreferences
parameter_list|(
name|Long
name|examTypeId
parameter_list|)
block|{
name|Hashtable
argument_list|<
name|ExamPeriod
argument_list|,
name|PreferenceLevel
argument_list|>
name|ret
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getExamPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamLocationPref
name|pref
init|=
operator|(
name|ExamLocationPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|examTypeId
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getExamPeriod
argument_list|()
operator|.
name|getExamType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|put
argument_list|(
name|pref
operator|.
name|getExamPeriod
argument_list|()
argument_list|,
name|pref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|PreferenceLevel
name|getExamPreference
parameter_list|(
name|ExamPeriod
name|period
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|getExamPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamLocationPref
name|pref
init|=
operator|(
name|ExamLocationPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|pref
operator|.
name|getExamPeriod
argument_list|()
operator|.
name|equals
argument_list|(
name|period
argument_list|)
condition|)
return|return
name|pref
operator|.
name|getPrefLevel
argument_list|()
return|;
block|}
return|return
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
return|;
block|}
specifier|public
name|void
name|clearExamPreferences
parameter_list|(
name|ExamType
name|examType
parameter_list|)
block|{
name|clearExamPreferences
argument_list|(
name|examType
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clearExamPreferences
parameter_list|(
name|Long
name|examTypeId
parameter_list|)
block|{
if|if
condition|(
name|getExamPreferences
argument_list|()
operator|==
literal|null
condition|)
name|setExamPreferences
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getExamPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamLocationPref
name|pref
init|=
operator|(
name|ExamLocationPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|examTypeId
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getExamPeriod
argument_list|()
operator|.
name|getExamType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
operator|new
name|ExamLocationPrefDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|delete
argument_list|(
name|pref
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|setExamPreference
parameter_list|(
name|ExamPeriod
name|period
parameter_list|,
name|PreferenceLevel
name|preference
parameter_list|)
block|{
if|if
condition|(
name|getExamPreferences
argument_list|()
operator|==
literal|null
condition|)
name|setExamPreferences
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getExamPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamLocationPref
name|pref
init|=
operator|(
name|ExamLocationPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|pref
operator|.
name|getExamPeriod
argument_list|()
operator|.
name|equals
argument_list|(
name|period
argument_list|)
condition|)
block|{
if|if
condition|(
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|preference
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
block|{
operator|new
name|ExamLocationPrefDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|delete
argument_list|(
name|pref
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|pref
operator|.
name|setPrefLevel
argument_list|(
name|preference
argument_list|)
expr_stmt|;
operator|new
name|ExamLocationPrefDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|update
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
if|if
condition|(
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|preference
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
return|return;
name|ExamLocationPref
name|pref
init|=
operator|new
name|ExamLocationPref
argument_list|()
decl_stmt|;
name|pref
operator|.
name|setExamPeriod
argument_list|(
name|period
argument_list|)
expr_stmt|;
name|pref
operator|.
name|setPrefLevel
argument_list|(
name|preference
argument_list|)
expr_stmt|;
name|pref
operator|.
name|setLocation
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|getExamPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|pref
argument_list|)
expr_stmt|;
operator|new
name|ExamLocationPrefDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addExamPreference
parameter_list|(
name|ExamPeriod
name|period
parameter_list|,
name|PreferenceLevel
name|preference
parameter_list|)
block|{
if|if
condition|(
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|preference
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
return|return;
name|ExamLocationPref
name|pref
init|=
operator|new
name|ExamLocationPref
argument_list|()
decl_stmt|;
name|pref
operator|.
name|setExamPeriod
argument_list|(
name|period
argument_list|)
expr_stmt|;
name|pref
operator|.
name|setPrefLevel
argument_list|(
name|preference
argument_list|)
expr_stmt|;
name|pref
operator|.
name|setLocation
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|getExamPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|pref
argument_list|)
expr_stmt|;
operator|new
name|ExamLocationPrefDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getExamPreferencesHtml
parameter_list|(
name|ExamType
name|examType
parameter_list|)
block|{
if|if
condition|(
name|examType
operator|.
name|getType
argument_list|()
operator|==
name|ExamType
operator|.
name|sExamTypeMidterm
condition|)
block|{
name|MidtermPeriodPreferenceModel
name|epx
init|=
operator|new
name|MidtermPeriodPreferenceModel
argument_list|(
name|getSession
argument_list|()
argument_list|,
name|examType
argument_list|)
decl_stmt|;
name|epx
operator|.
name|load
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|epx
operator|.
name|toString
argument_list|(
literal|true
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|", "
argument_list|,
literal|"<br>"
argument_list|)
return|;
block|}
name|StringBuffer
name|ret
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getExamPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamLocationPref
name|pref
init|=
operator|(
name|ExamLocationPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|examType
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getExamPeriod
argument_list|()
operator|.
name|getExamType
argument_list|()
argument_list|)
condition|)
continue|continue;
name|ret
operator|.
name|append
argument_list|(
literal|"<span style='color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|";'>"
operator|+
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefName
argument_list|()
operator|+
literal|" "
operator|+
name|pref
operator|.
name|getExamPeriod
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"</span>"
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getExamPreferencesAbbreviationHtml
parameter_list|(
name|ExamType
name|examType
parameter_list|)
block|{
if|if
condition|(
name|examType
operator|.
name|getType
argument_list|()
operator|==
name|ExamType
operator|.
name|sExamTypeMidterm
condition|)
block|{
name|MidtermPeriodPreferenceModel
name|epx
init|=
operator|new
name|MidtermPeriodPreferenceModel
argument_list|(
name|getSession
argument_list|()
argument_list|,
name|examType
argument_list|)
decl_stmt|;
name|epx
operator|.
name|load
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|epx
operator|.
name|toString
argument_list|(
literal|true
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|", "
argument_list|,
literal|"<br>"
argument_list|)
return|;
block|}
name|StringBuffer
name|ret
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getExamPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamLocationPref
name|pref
init|=
operator|(
name|ExamLocationPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|examType
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getExamPeriod
argument_list|()
operator|.
name|getExamType
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|ret
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ret
operator|.
name|append
argument_list|(
literal|"<br>"
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|append
argument_list|(
literal|"<span title='"
operator|+
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefName
argument_list|()
operator|+
literal|" "
operator|+
name|pref
operator|.
name|getExamPeriod
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"' style='color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|";'>"
operator|+
name|pref
operator|.
name|getExamPeriod
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|"</span>"
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getExamPreferencesAbbreviation
parameter_list|(
name|ExamType
name|examType
parameter_list|)
block|{
if|if
condition|(
name|examType
operator|.
name|getType
argument_list|()
operator|==
name|ExamType
operator|.
name|sExamTypeMidterm
condition|)
block|{
name|MidtermPeriodPreferenceModel
name|epx
init|=
operator|new
name|MidtermPeriodPreferenceModel
argument_list|(
name|getSession
argument_list|()
argument_list|,
name|examType
argument_list|)
decl_stmt|;
name|epx
operator|.
name|load
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|epx
operator|.
name|toString
argument_list|(
literal|false
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|", "
argument_list|,
literal|"\n"
argument_list|)
return|;
block|}
name|StringBuffer
name|ret
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getExamPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamLocationPref
name|pref
init|=
operator|(
name|ExamLocationPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|examType
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getExamPeriod
argument_list|()
operator|.
name|getExamType
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|ret
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|ret
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|pref
operator|.
name|getExamPeriod
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|TreeSet
name|findAllExamLocations
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|ExamType
name|examType
parameter_list|)
block|{
return|return
name|findAllExamLocations
argument_list|(
name|sessionId
argument_list|,
name|examType
operator|==
literal|null
condition|?
literal|null
else|:
name|examType
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TreeSet
name|findAllExamLocations
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Long
name|examTypeId
parameter_list|)
block|{
if|if
condition|(
name|examTypeId
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TreeSet
argument_list|(
operator|(
operator|new
name|LocationDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select room from Location as room where room.session.uniqueId = :sessionId and room.examTypes is not empty"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|TreeSet
argument_list|(
operator|(
operator|new
name|LocationDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select room from Location as room inner join room.examTypes as type where room.session.uniqueId = :sessionId and type.uniqueId = :typeId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"typeId"
argument_list|,
name|examTypeId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|TreeSet
name|findNotAvailableExamLocations
parameter_list|(
name|Long
name|periodId
parameter_list|)
block|{
return|return
operator|new
name|TreeSet
argument_list|(
operator|(
operator|new
name|LocationDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct r from Exam x inner join x.assignedRooms r where x.assignedPeriod.uniqueId=:periodId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"periodId"
argument_list|,
name|periodId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|findExamLocationTable
parameter_list|(
name|Long
name|periodId
parameter_list|)
block|{
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|table
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|(
operator|new
name|LocationDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct r.uniqueId, x.uniqueId from Exam x inner join x.assignedRooms r where x.assignedPeriod.uniqueId=:periodId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"periodId"
argument_list|,
name|periodId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|exams
init|=
name|table
operator|.
name|get
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|exams
operator|==
literal|null
condition|)
block|{
name|exams
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
name|exams
argument_list|)
expr_stmt|;
block|}
name|exams
operator|.
name|add
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|table
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|Assignment
argument_list|>
name|getCommitedAssignments
parameter_list|()
block|{
return|return
operator|new
name|LocationDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select a from Assignment a inner join a.rooms r where "
operator|+
literal|"a.solution.commited=true and r.uniqueId=:locationId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"locationId"
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|TreeSet
name|findAllAvailableExamLocations
parameter_list|(
name|ExamPeriod
name|period
parameter_list|)
block|{
name|TreeSet
name|locations
init|=
name|findAllExamLocations
argument_list|(
name|period
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|period
operator|.
name|getExamType
argument_list|()
argument_list|)
decl_stmt|;
name|locations
operator|.
name|removeAll
argument_list|(
name|findNotAvailableExamLocations
argument_list|(
name|period
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|locations
return|;
block|}
specifier|public
specifier|static
name|double
name|getDistance
parameter_list|(
name|Collection
name|rooms1
parameter_list|,
name|Collection
name|rooms2
parameter_list|)
block|{
if|if
condition|(
name|rooms1
operator|==
literal|null
operator|||
name|rooms1
operator|.
name|isEmpty
argument_list|()
operator|||
name|rooms2
operator|==
literal|null
operator|||
name|rooms2
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
name|double
name|maxDistance
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i1
init|=
name|rooms1
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|o1
init|=
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|Location
name|r1
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|o1
operator|instanceof
name|ExamRoomInfo
condition|)
name|r1
operator|=
operator|(
operator|(
name|ExamRoomInfo
operator|)
name|o1
operator|)
operator|.
name|getLocation
argument_list|()
expr_stmt|;
else|else
name|r1
operator|=
operator|(
name|Location
operator|)
name|o1
expr_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|rooms2
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|o2
init|=
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|Location
name|r2
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|o2
operator|instanceof
name|ExamRoomInfo
condition|)
name|r2
operator|=
operator|(
operator|(
name|ExamRoomInfo
operator|)
name|o2
operator|)
operator|.
name|getLocation
argument_list|()
expr_stmt|;
else|else
name|r2
operator|=
operator|(
name|Location
operator|)
name|o2
expr_stmt|;
name|maxDistance
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxDistance
argument_list|,
name|r1
operator|.
name|getDistance
argument_list|(
name|r2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|maxDistance
return|;
block|}
specifier|public
name|List
argument_list|<
name|Exam
argument_list|>
name|getExams
parameter_list|(
name|Long
name|periodId
parameter_list|)
block|{
return|return
operator|new
name|LocationDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select x from Exam x inner join x.assignedRooms r where "
operator|+
literal|"x.assignedPeriod.uniqueId=:periodId and r.uniqueId=:locationId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"periodId"
argument_list|,
name|periodId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"locationId"
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isExamEnabled
parameter_list|(
name|ExamType
name|examType
parameter_list|)
block|{
return|return
name|getExamTypes
argument_list|()
operator|!=
literal|null
operator|&&
name|getExamTypes
argument_list|()
operator|.
name|contains
argument_list|(
name|examType
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isExamEnabled
parameter_list|(
name|Long
name|examTypeId
parameter_list|)
block|{
if|if
condition|(
name|getExamTypes
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|ExamType
name|type
range|:
name|getExamTypes
argument_list|()
control|)
if|if
condition|(
name|type
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|examTypeId
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|hasFinalExamsEnabled
parameter_list|()
block|{
for|for
control|(
name|ExamType
name|type
range|:
name|getExamTypes
argument_list|()
control|)
if|if
condition|(
name|type
operator|.
name|getType
argument_list|()
operator|==
name|ExamType
operator|.
name|sExamTypeFinal
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|hasMidtermExamsEnabled
parameter_list|()
block|{
for|for
control|(
name|ExamType
name|type
range|:
name|getExamTypes
argument_list|()
control|)
if|if
condition|(
name|type
operator|.
name|getType
argument_list|()
operator|==
name|ExamType
operator|.
name|sExamTypeMidterm
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|hasAnyExamsEnabled
parameter_list|()
block|{
return|return
name|getExamTypes
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getExamTypes
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|setExamEnabled
parameter_list|(
name|ExamType
name|examType
parameter_list|,
name|boolean
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|getExamTypes
argument_list|()
operator|==
literal|null
condition|)
name|setExamTypes
argument_list|(
operator|new
name|HashSet
argument_list|<
name|ExamType
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|enabled
condition|)
name|getExamTypes
argument_list|()
operator|.
name|add
argument_list|(
name|examType
argument_list|)
expr_stmt|;
else|else
name|getExamTypes
argument_list|()
operator|.
name|remove
argument_list|(
name|examType
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|Location
argument_list|>
name|findAll
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
return|return
operator|(
name|List
argument_list|<
name|Location
argument_list|>
operator|)
operator|new
name|LocationDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select l from Location l where l.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|Location
argument_list|>
name|findAllEventRooms
parameter_list|(
name|Long
name|departmentId
parameter_list|)
block|{
return|return
operator|(
name|List
argument_list|<
name|Location
argument_list|>
operator|)
operator|new
name|LocationDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select l from Location l where l.eventDepartment.uniqueId=:departmentId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"departmentId"
argument_list|,
name|departmentId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|Room
argument_list|>
name|findAllRooms
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
return|return
operator|(
name|List
argument_list|<
name|Room
argument_list|>
operator|)
operator|new
name|LocationDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select l from Room l where l.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|NonUniversityLocation
argument_list|>
name|findAllNonUniversityLocations
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
return|return
operator|(
name|List
argument_list|<
name|NonUniversityLocation
argument_list|>
operator|)
operator|new
name|LocationDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select l from NonUniversityLocation l where l.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
specifier|abstract
name|RoomType
name|getRoomType
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|void
name|setRoomType
parameter_list|(
name|RoomType
name|roomType
parameter_list|)
function_decl|;
specifier|public
specifier|static
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|findClassLocationTable
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|int
name|startSlot
parameter_list|,
name|int
name|length
parameter_list|,
name|Vector
argument_list|<
name|Date
argument_list|>
name|dates
parameter_list|)
block|{
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|table
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|String
name|datesStr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dates
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|datesStr
operator|+=
literal|", "
expr_stmt|;
name|datesStr
operator|+=
literal|":date"
operator|+
name|i
expr_stmt|;
block|}
name|Query
name|q
init|=
name|LocationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct r.uniqueId, e.clazz.uniqueId from "
operator|+
literal|"ClassEvent e inner join e.meetings m, Location r where "
operator|+
literal|"r.session.uniqueId=:sessionId and r.permanentId=m.locationPermanentId and "
operator|+
comment|// link Location r with Meeting m
literal|"m.stopPeriod>:startSlot and :endSlot>m.startPeriod and "
operator|+
comment|// meeting time within given time period
literal|"m.meetingDate in ("
operator|+
name|datesStr
operator|+
literal|")"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"startSlot"
argument_list|,
name|startSlot
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"endSlot"
argument_list|,
name|startSlot
operator|+
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dates
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|q
operator|.
name|setDate
argument_list|(
literal|"date"
operator|+
name|i
argument_list|,
name|dates
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|ids
init|=
name|table
operator|.
name|get
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|ids
operator|==
literal|null
condition|)
block|{
name|ids
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
name|ids
argument_list|)
expr_stmt|;
block|}
name|ids
operator|.
name|add
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|table
return|;
block|}
specifier|public
name|Set
argument_list|<
name|Long
argument_list|>
name|findClassLocationTable
parameter_list|(
name|int
name|startSlot
parameter_list|,
name|int
name|length
parameter_list|,
name|Vector
argument_list|<
name|Date
argument_list|>
name|dates
parameter_list|)
block|{
name|String
name|datesStr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dates
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|datesStr
operator|+=
literal|", "
expr_stmt|;
name|datesStr
operator|+=
literal|":date"
operator|+
name|i
expr_stmt|;
block|}
name|Query
name|q
init|=
name|LocationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct e.clazz.uniqueId from "
operator|+
literal|"ClassEvent e inner join e.meetings m where "
operator|+
literal|"m.locationPermanentId=:permanentId and "
operator|+
literal|"m.stopPeriod>:startSlot and :endSlot>m.startPeriod and "
operator|+
comment|// meeting time within given time period
literal|"m.meetingDate in ("
operator|+
name|datesStr
operator|+
literal|")"
argument_list|)
comment|// and date
operator|.
name|setLong
argument_list|(
literal|"permanentId"
argument_list|,
name|getPermanentId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"startSlot"
argument_list|,
name|startSlot
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"endSlot"
argument_list|,
name|startSlot
operator|+
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dates
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|q
operator|.
name|setDate
argument_list|(
literal|"date"
operator|+
name|i
argument_list|,
name|dates
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|(
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|findClassLocationTable
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|permanentIds
parameter_list|,
name|int
name|startSlot
parameter_list|,
name|int
name|length
parameter_list|,
name|Vector
argument_list|<
name|Date
argument_list|>
name|dates
parameter_list|)
block|{
if|if
condition|(
name|permanentIds
operator|.
name|isEmpty
argument_list|()
operator|||
name|dates
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
return|;
name|EventDateMapping
operator|.
name|Class2EventDateMap
name|class2eventMap
init|=
name|EventDateMapping
operator|.
name|getMapping
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|String
name|datesStr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dates
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|datesStr
operator|+=
literal|", "
expr_stmt|;
name|datesStr
operator|+=
literal|":date"
operator|+
name|i
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|table
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Long
argument_list|>
name|permanentIdIterator
init|=
name|permanentIds
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|permanentIdIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|permIds
init|=
literal|""
decl_stmt|;
name|Long
name|permanentId
decl_stmt|;
name|int
name|cntPermIds
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|permanentIdIterator
operator|.
name|hasNext
argument_list|()
operator|&&
name|cntPermIds
operator|<
literal|1000
condition|)
block|{
name|permanentId
operator|=
name|permanentIdIterator
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|permIds
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|permIds
operator|+=
literal|","
expr_stmt|;
name|permIds
operator|+=
name|permanentId
expr_stmt|;
name|cntPermIds
operator|++
expr_stmt|;
block|}
name|Query
name|q
init|=
name|LocationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct m.locationPermanentId, e.clazz.uniqueId from "
operator|+
literal|"ClassEvent e inner join e.meetings m where "
operator|+
literal|"m.locationPermanentId in ("
operator|+
name|permIds
operator|+
literal|") and "
operator|+
literal|"m.stopPeriod>:startSlot and :endSlot>m.startPeriod and "
operator|+
comment|// meeting time within given time period
literal|"m.meetingDate in ("
operator|+
name|datesStr
operator|+
literal|")"
argument_list|)
comment|// and date
operator|.
name|setInteger
argument_list|(
literal|"startSlot"
argument_list|,
name|startSlot
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"endSlot"
argument_list|,
name|startSlot
operator|+
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dates
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|q
operator|.
name|setDate
argument_list|(
literal|"date"
operator|+
name|i
argument_list|,
name|class2eventMap
operator|.
name|getEventDate
argument_list|(
name|dates
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|ids
init|=
name|table
operator|.
name|get
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|ids
operator|==
literal|null
condition|)
block|{
name|ids
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
name|ids
argument_list|)
expr_stmt|;
block|}
name|ids
operator|.
name|add
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|table
return|;
block|}
specifier|public
specifier|static
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Event
argument_list|>
argument_list|>
name|findEventTable
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|permanentIds
parameter_list|,
name|int
name|startSlot
parameter_list|,
name|int
name|length
parameter_list|,
name|Vector
argument_list|<
name|Date
argument_list|>
name|dates
parameter_list|)
block|{
if|if
condition|(
name|permanentIds
operator|.
name|isEmpty
argument_list|()
operator|||
name|dates
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Event
argument_list|>
argument_list|>
argument_list|()
return|;
name|EventDateMapping
operator|.
name|Class2EventDateMap
name|class2eventMap
init|=
name|EventDateMapping
operator|.
name|getMapping
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|String
name|datesStr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dates
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|datesStr
operator|+=
literal|", "
expr_stmt|;
name|datesStr
operator|+=
literal|":date"
operator|+
name|i
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Event
argument_list|>
argument_list|>
name|table
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Event
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Long
argument_list|>
name|permanentIdIterator
init|=
name|permanentIds
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|permanentIdIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|permIds
init|=
literal|""
decl_stmt|;
name|Long
name|permanentId
decl_stmt|;
name|int
name|cntPermIds
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|permanentIdIterator
operator|.
name|hasNext
argument_list|()
operator|&&
name|cntPermIds
operator|<
literal|1000
condition|)
block|{
name|permanentId
operator|=
name|permanentIdIterator
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|permIds
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|permIds
operator|+=
literal|","
expr_stmt|;
name|permIds
operator|+=
name|permanentId
expr_stmt|;
name|cntPermIds
operator|++
expr_stmt|;
block|}
name|Query
name|q
init|=
name|LocationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct m.locationPermanentId, e from "
operator|+
literal|"Event e inner join e.meetings m where "
operator|+
literal|"e.class!=ClassEvent and "
operator|+
literal|"m.locationPermanentId in ("
operator|+
name|permIds
operator|+
literal|") and "
operator|+
literal|"m.stopPeriod>:startSlot and :endSlot>m.startPeriod and "
operator|+
comment|// meeting time within given time period
literal|"m.meetingDate in ("
operator|+
name|datesStr
operator|+
literal|") and m.approvalStatus = 1"
argument_list|)
comment|// and date
operator|.
name|setInteger
argument_list|(
literal|"startSlot"
argument_list|,
name|startSlot
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"endSlot"
argument_list|,
name|startSlot
operator|+
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dates
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|q
operator|.
name|setDate
argument_list|(
literal|"date"
operator|+
name|i
argument_list|,
name|class2eventMap
operator|.
name|getEventDate
argument_list|(
name|dates
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Event
argument_list|>
name|events
init|=
name|table
operator|.
name|get
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|events
operator|==
literal|null
condition|)
block|{
name|events
operator|=
operator|new
name|HashSet
argument_list|<
name|Event
argument_list|>
argument_list|()
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
name|events
argument_list|)
expr_stmt|;
block|}
name|events
operator|.
name|add
argument_list|(
operator|(
name|Event
operator|)
name|o
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|table
return|;
block|}
annotation|@
name|Deprecated
specifier|public
name|String
name|getHtmlHint
parameter_list|()
block|{
return|return
name|getHtmlHint
argument_list|(
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Deprecated
specifier|public
name|String
name|getHtmlHint
parameter_list|(
name|String
name|preference
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|Hibernate
operator|.
name|isPropertyInitialized
argument_list|(
name|this
argument_list|,
literal|"roomType"
argument_list|)
operator|||
operator|!
name|Hibernate
operator|.
name|isInitialized
argument_list|(
name|getRoomType
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|LocationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|getHtmlHintImpl
argument_list|(
name|preference
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getHtmlHintImpl
argument_list|(
name|preference
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|LazyInitializationException
name|e
parameter_list|)
block|{
return|return
name|LocationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|getHtmlHintImpl
argument_list|(
name|preference
argument_list|)
return|;
block|}
block|}
annotation|@
name|Deprecated
specifier|private
name|String
name|getHtmlHintImpl
parameter_list|(
name|String
name|preference
parameter_list|)
block|{
name|String
name|hint
init|=
operator|(
name|preference
operator|==
literal|null
condition|?
literal|""
else|:
name|preference
operator|+
literal|" "
operator|)
operator|+
name|getLabel
argument_list|()
operator|+
operator|(
name|getDisplayName
argument_list|()
operator|==
literal|null
condition|?
literal|" ("
operator|+
name|getRoomTypeLabel
argument_list|()
operator|+
literal|")"
else|:
literal|" ("
operator|+
name|getDisplayName
argument_list|()
operator|+
literal|")"
operator|)
decl_stmt|;
name|String
name|minimap
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.minimap.hint"
argument_list|)
decl_stmt|;
if|if
condition|(
name|minimap
operator|!=
literal|null
operator|&&
name|getCoordinateX
argument_list|()
operator|!=
literal|null
operator|&&
name|getCoordinateY
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|hint
operator|+=
literal|"<br><img src=\\'"
operator|+
name|minimap
operator|.
name|replace
argument_list|(
literal|"%x"
argument_list|,
name|getCoordinateX
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
literal|"%y"
argument_list|,
name|getCoordinateY
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
literal|"%n"
argument_list|,
name|getLabel
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
literal|"%i"
argument_list|,
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|getExternalUniqueId
argument_list|()
argument_list|)
operator|+
literal|"\\' border=\\'0\\' style=\\'border: 1px solid #9CB0CE;\\'/>"
expr_stmt|;
block|}
name|hint
operator|+=
literal|"<table width=\\'300px;\\'>"
expr_stmt|;
name|hint
operator|+=
literal|"<tr><td>Capacity:</td><td width=\\'99%\\'>"
operator|+
name|getCapacity
argument_list|()
expr_stmt|;
if|if
condition|(
name|getExamCapacity
argument_list|()
operator|!=
literal|null
operator|&&
name|getExamCapacity
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|getExamCapacity
argument_list|()
operator|.
name|equals
argument_list|(
name|getCapacity
argument_list|()
argument_list|)
operator|&&
operator|!
name|getExamTypes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|type
init|=
operator|(
name|getExamTypes
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
name|getExamTypes
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|" "
else|:
literal|""
operator|)
decl_stmt|;
name|hint
operator|+=
literal|" ("
operator|+
name|getExamCapacity
argument_list|()
operator|+
literal|" for "
operator|+
name|type
operator|+
literal|"examinations)"
expr_stmt|;
block|}
name|hint
operator|+=
literal|"</td></tr>"
expr_stmt|;
if|if
condition|(
name|getArea
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|hint
operator|+=
literal|"<tr><td>"
operator|+
name|MSG
operator|.
name|propertyRoomArea
argument_list|()
operator|+
literal|"</td><td width=\\'99%\\'>"
operator|+
operator|new
name|DecimalFormat
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.room.area.units.format"
argument_list|,
literal|"#,##0.00"
argument_list|)
argument_list|)
operator|.
name|format
argument_list|(
name|getArea
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|MSG
operator|.
name|roomAreaUnitsShort
argument_list|()
operator|+
literal|"</td></tr>"
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|features
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|GlobalRoomFeature
name|f
range|:
name|getGlobalRoomFeatures
argument_list|()
control|)
block|{
name|String
name|type
init|=
operator|(
name|f
operator|.
name|getFeatureType
argument_list|()
operator|==
literal|null
condition|?
literal|"Features"
else|:
name|f
operator|.
name|getFeatureType
argument_list|()
operator|.
name|getReference
argument_list|()
operator|)
decl_stmt|;
name|String
name|featuresThisType
init|=
name|features
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|featuresThisType
operator|==
literal|null
condition|)
block|{
name|featuresThisType
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|featuresThisType
operator|+=
literal|", "
expr_stmt|;
block|}
name|featuresThisType
operator|+=
name|f
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|features
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|featuresThisType
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|type
range|:
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|features
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
name|hint
operator|+=
literal|"<tr><td>"
operator|+
name|type
operator|+
literal|":</td><td>"
operator|+
name|features
operator|.
name|get
argument_list|(
name|type
argument_list|)
operator|+
literal|"</td></tr>"
expr_stmt|;
name|String
name|groups
init|=
literal|""
decl_stmt|;
for|for
control|(
name|RoomGroup
name|g
range|:
name|getGlobalRoomGroups
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|groups
operator|.
name|isEmpty
argument_list|()
condition|)
name|groups
operator|+=
literal|", "
expr_stmt|;
name|groups
operator|+=
name|g
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|groups
operator|.
name|isEmpty
argument_list|()
condition|)
name|hint
operator|+=
literal|"<tr><td>Groups:</td><td>"
operator|+
name|groups
operator|+
literal|"</td></tr>"
expr_stmt|;
name|hint
operator|+=
literal|"<tr><td>Events:</td><td><i>"
operator|+
operator|(
name|getEventDepartment
argument_list|()
operator|==
literal|null
condition|?
literal|"No Event Department"
else|:
name|getEffectiveEventStatus
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
operator|+
literal|"</i></td></tr>"
expr_stmt|;
name|String
name|message
init|=
name|getEventMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
operator|&&
operator|!
name|message
operator|.
name|isEmpty
argument_list|()
condition|)
name|hint
operator|+=
literal|"<tr><td colspan=\\'2\\'>"
operator|+
name|message
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\\'"
argument_list|)
operator|+
literal|"</td></tr>"
expr_stmt|;
name|hint
operator|+=
literal|"</table>"
expr_stmt|;
return|return
name|hint
return|;
block|}
specifier|public
name|String
name|getLabelWithHint
parameter_list|()
block|{
return|return
literal|"<span onmouseover=\"showGwtRoomHint(this, '"
operator|+
name|getUniqueId
argument_list|()
operator|+
literal|"');\" onmouseout=\"hideGwtRoomHint();\">"
operator|+
name|getLabel
argument_list|()
operator|+
literal|"</span>"
return|;
block|}
specifier|public
name|boolean
name|isUsed
parameter_list|()
block|{
name|Number
name|nrMeetings
init|=
operator|(
name|Number
operator|)
name|LocationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(m) from Meeting m, Location l where "
operator|+
literal|"l.uniqueId = :locId and m.locationPermanentId = l.permanentId "
operator|+
literal|"and m.meetingDate>= l.session.eventBeginDate and m.meetingDate<= l.session.eventEndDate"
argument_list|)
comment|// and m.approvedDate is not null
operator|.
name|setLong
argument_list|(
literal|"locId"
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
return|return
name|nrMeetings
operator|.
name|intValue
argument_list|()
operator|>
literal|0
return|;
block|}
specifier|public
name|int
name|getEffectiveBreakTime
parameter_list|()
block|{
if|if
condition|(
name|getBreakTime
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|getBreakTime
argument_list|()
return|;
if|if
condition|(
name|getEventDepartment
argument_list|()
operator|==
literal|null
condition|)
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.events.breakTime."
operator|+
name|getRoomType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|,
literal|"0"
argument_list|)
argument_list|)
return|;
else|else
return|return
name|getRoomType
argument_list|()
operator|.
name|getOption
argument_list|(
name|getEventDepartment
argument_list|()
argument_list|)
operator|.
name|getBreakTime
argument_list|()
return|;
block|}
specifier|public
name|RoomTypeOption
operator|.
name|Status
name|getEffectiveEventStatus
parameter_list|()
block|{
if|if
condition|(
name|getEventStatus
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|RoomTypeOption
operator|.
name|Status
operator|.
name|values
argument_list|()
index|[
name|getEventStatus
argument_list|()
index|]
return|;
if|if
condition|(
name|getEventDepartment
argument_list|()
operator|==
literal|null
condition|)
return|return
name|RoomTypeOption
operator|.
name|Status
operator|.
name|NoEventManagement
return|;
else|else
return|return
name|getRoomType
argument_list|()
operator|.
name|getOption
argument_list|(
name|getEventDepartment
argument_list|()
argument_list|)
operator|.
name|getEventStatus
argument_list|()
return|;
block|}
specifier|public
name|String
name|getEventMessage
parameter_list|()
block|{
if|if
condition|(
name|getNote
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getNote
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|getNote
argument_list|()
return|;
if|if
condition|(
name|getEventDepartment
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
else|else
return|return
name|getRoomType
argument_list|()
operator|.
name|getOption
argument_list|(
name|getEventDepartment
argument_list|()
argument_list|)
operator|.
name|getMessage
argument_list|()
return|;
block|}
specifier|public
name|String
name|getLabelWithCapacity
parameter_list|()
block|{
return|return
operator|(
name|getCapacity
argument_list|()
operator|==
literal|null
condition|?
name|getLabel
argument_list|()
else|:
name|MSG
operator|.
name|labelLocationLabelWithCapacity
argument_list|(
name|getLabel
argument_list|()
argument_list|,
name|getCapacity
argument_list|()
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPattern
parameter_list|()
block|{
name|String
name|pattern
init|=
name|super
operator|.
name|getPattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|pattern
operator|!=
literal|null
operator|&&
name|pattern
operator|.
name|length
argument_list|()
operator|==
literal|336
condition|)
block|{
comment|// Old format (1 character per half-hour) -> convert to 1 character per slot
name|StringBuffer
name|p
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2016
condition|;
name|i
operator|++
control|)
name|p
operator|.
name|append
argument_list|(
name|pattern
operator|.
name|charAt
argument_list|(
name|i
operator|/
literal|6
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|p
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
name|pattern
return|;
block|}
specifier|public
specifier|abstract
name|Set
argument_list|<
name|?
extends|extends
name|LocationPicture
argument_list|>
name|getPictures
parameter_list|()
function_decl|;
block|}
end_class

end_unit

