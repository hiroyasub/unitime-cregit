begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|criterion
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|criterion
operator|.
name|Restrictions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseTimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TimetableManagerDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|Qualifiable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|NameFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|NameInterface
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|TimetableManager
extends|extends
name|BaseTimetableManager
implements|implements
name|Comparable
implements|,
name|Qualifiable
implements|,
name|NameInterface
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|TimetableManager
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|TimetableManager
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
specifier|public
specifier|static
name|TimetableManager
name|findByExternalId
parameter_list|(
name|String
name|externalId
parameter_list|)
block|{
if|if
condition|(
name|externalId
operator|==
literal|null
operator|||
name|externalId
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
name|TimetableManagerDAO
name|tmDao
init|=
operator|new
name|TimetableManagerDAO
argument_list|()
decl_stmt|;
name|List
name|mgrs
init|=
name|tmDao
operator|.
name|getSession
argument_list|()
operator|.
name|createCriteria
argument_list|(
name|TimetableManager
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
name|Restrictions
operator|.
name|eq
argument_list|(
literal|"externalUniqueId"
argument_list|,
name|externalId
argument_list|)
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|mgrs
operator|!=
literal|null
operator|&&
name|mgrs
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
operator|(
operator|(
name|TimetableManager
operator|)
name|mgrs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
return|;
block|}
else|else
return|return
operator|(
literal|null
operator|)
return|;
block|}
specifier|public
specifier|static
name|TimetableManager
name|getWithUniqueId
parameter_list|(
name|Long
name|uniqueId
parameter_list|)
block|{
name|TimetableManagerDAO
name|tmDao
init|=
operator|new
name|TimetableManagerDAO
argument_list|()
decl_stmt|;
return|return
operator|(
name|tmDao
operator|.
name|get
argument_list|(
name|uniqueId
argument_list|)
operator|)
return|;
block|}
specifier|public
name|boolean
name|isExternalManager
parameter_list|()
block|{
name|boolean
name|isExternal
init|=
literal|false
decl_stmt|;
name|Department
name|d
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|this
operator|.
name|getDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|d
operator|=
operator|(
name|Department
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|.
name|isExternalManager
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|isExternal
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
operator|(
name|isExternal
operator|)
return|;
block|}
specifier|public
name|Set
name|departmentsForSession
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|HashSet
name|l
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|getDepartments
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Department
name|d
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|this
operator|.
name|getDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|d
operator|=
operator|(
name|Department
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|.
name|getSessionId
argument_list|()
operator|.
name|equals
argument_list|(
name|sessionId
argument_list|)
condition|)
block|{
name|l
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|(
name|l
operator|)
return|;
block|}
specifier|public
name|Set
name|sessionsCanManage
parameter_list|()
block|{
name|TreeSet
name|sessions
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|Department
name|dept
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|getDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|dept
operator|=
operator|(
name|Department
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|sessions
operator|.
name|add
argument_list|(
name|dept
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|sessions
operator|)
return|;
block|}
specifier|public
name|boolean
name|hasLastName
parameter_list|()
block|{
return|return
name|getLastName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getLastName
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|hasFirstName
parameter_list|()
block|{
return|return
name|getFirstName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getFirstName
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|hasMiddleName
parameter_list|()
block|{
return|return
name|getMiddleName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getMiddleName
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
operator|(
name|hasLastName
argument_list|()
condition|?
name|getLastName
argument_list|()
else|:
literal|""
operator|)
operator|+
operator|(
name|hasFirstName
argument_list|()
operator|||
name|hasMiddleName
argument_list|()
condition|?
literal|","
else|:
literal|""
operator|)
operator|+
operator|(
name|hasFirstName
argument_list|()
condition|?
literal|" "
operator|+
name|getFirstName
argument_list|()
else|:
literal|""
operator|)
operator|+
operator|(
name|hasMiddleName
argument_list|()
condition|?
literal|" "
operator|+
name|getMiddleName
argument_list|()
else|:
literal|""
operator|)
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|(
name|String
name|instructorNameFormat
parameter_list|)
block|{
return|return
name|NameFormat
operator|.
name|fromReference
argument_list|(
name|instructorNameFormat
argument_list|)
operator|.
name|format
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|Collection
name|getClasses
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|Vector
name|classes
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|departmentsForSession
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|classes
operator|.
name|addAll
argument_list|(
name|d
operator|.
name|getClasses
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|classes
return|;
block|}
specifier|public
name|Collection
name|getNotAssignedClasses
parameter_list|(
name|Solution
name|solution
parameter_list|)
block|{
name|Vector
name|classes
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|departmentsForSession
argument_list|(
name|solution
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|classes
operator|.
name|addAll
argument_list|(
name|d
operator|.
name|getNotAssignedClasses
argument_list|(
name|solution
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|classes
return|;
block|}
specifier|public
name|Set
name|getDistributionPreferences
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|TreeSet
name|prefs
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|departmentsForSession
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|prefs
operator|.
name|addAll
argument_list|(
name|d
operator|.
name|getDistributionPreferences
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|prefs
return|;
block|}
specifier|public
name|Set
name|getSolverGroups
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|TreeSet
name|groups
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getSolverGroups
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SolverGroup
name|g
init|=
operator|(
name|SolverGroup
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|session
operator|.
name|equals
argument_list|(
name|g
operator|.
name|getSession
argument_list|()
argument_list|)
condition|)
name|groups
operator|.
name|add
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
return|return
name|groups
return|;
block|}
specifier|public
name|String
name|getShortName
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|getFirstName
argument_list|()
operator|!=
literal|null
operator|&&
name|getFirstName
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|getFirstName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|". "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getLastName
argument_list|()
operator|!=
literal|null
operator|&&
name|getLastName
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|getLastName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getLastName
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|Math
operator|.
name|min
argument_list|(
literal|10
argument_list|,
name|getLastName
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|TimetableManager
operator|)
condition|)
return|return
operator|-
literal|1
return|;
name|TimetableManager
name|m
init|=
operator|(
name|TimetableManager
operator|)
name|o
decl_stmt|;
name|int
name|cmp
init|=
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
else|:
name|getUniqueId
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|m
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|m
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
comment|/** Request attribute name for manager list **/
specifier|public
specifier|static
name|String
name|MGR_LIST_ATTR_NAME
init|=
literal|"managerList"
decl_stmt|;
comment|/** 	 * Retrieves all consent types in the database 	 * ordered by column last name, first name      * @return Vector of TimetableManager objects      */
specifier|public
specifier|static
specifier|synchronized
name|Vector
name|getManagerList
parameter_list|()
block|{
name|TimetableManagerDAO
name|tdao
init|=
operator|new
name|TimetableManagerDAO
argument_list|()
decl_stmt|;
name|List
name|l
init|=
name|tdao
operator|.
name|findAll
argument_list|(
name|Order
operator|.
name|asc
argument_list|(
literal|"lastName"
argument_list|)
argument_list|,
name|Order
operator|.
name|asc
argument_list|(
literal|"firstName"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
return|return
operator|new
name|Vector
argument_list|(
name|l
argument_list|)
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|Roles
name|getPrimaryRole
parameter_list|()
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|getManagerRoles
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ManagerRole
name|role
init|=
operator|(
name|ManagerRole
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|role
operator|.
name|isPrimary
argument_list|()
condition|)
return|return
name|role
operator|.
name|getRole
argument_list|()
return|;
block|}
if|if
condition|(
name|getManagerRoles
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
return|return
operator|(
operator|(
name|ManagerRole
operator|)
name|getManagerRoles
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getRole
argument_list|()
return|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Serializable
name|getQualifierId
parameter_list|()
block|{
return|return
name|getUniqueId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getQualifierType
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getQualifierReference
parameter_list|()
block|{
return|return
name|getExternalUniqueId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getQualifierLabel
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

