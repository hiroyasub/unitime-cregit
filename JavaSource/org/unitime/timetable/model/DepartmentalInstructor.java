begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|FlushMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|NonUniqueResultException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|ObjectNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|criterion
operator|.
name|Restrictions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalUidLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalUidLookup
operator|.
name|UserInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|RoomAvailabilityInterface
operator|.
name|TimeBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseDepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|NameFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|NameInterface
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller, Stephanie Schluttenhofer  */
end_comment

begin_class
specifier|public
class|class
name|DepartmentalInstructor
extends|extends
name|BaseDepartmentalInstructor
implements|implements
name|Comparable
implements|,
name|NameInterface
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|DepartmentalInstructor
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|DepartmentalInstructor
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
comment|/// Copied from Instructor& InstructorDept
comment|/** Request attribute name for available instructors **/
specifier|public
specifier|static
name|String
name|INSTR_LIST_ATTR_NAME
init|=
literal|"instructorsList"
decl_stmt|;
specifier|public
specifier|static
name|String
name|INSTR_HAS_PREF_ATTR_NAME
init|=
literal|"instructorsHasPrefs"
decl_stmt|;
comment|/** Request attribute name for instructor departments  **/
specifier|public
specifier|static
name|String
name|INSTRDEPT_LIST_ATTR_NAME
init|=
literal|"instructorDeptList"
decl_stmt|;
comment|/** Name Format */
specifier|public
specifier|static
specifier|final
name|String
name|sNameFormatLastFist
init|=
name|NameFormat
operator|.
name|LAST_FIRST
operator|.
name|reference
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|sNameFormatFirstLast
init|=
name|NameFormat
operator|.
name|FIRST_LAST
operator|.
name|reference
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|sNameFormatInitialLast
init|=
name|NameFormat
operator|.
name|INITIAL_LAST
operator|.
name|reference
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|sNameFormatLastInitial
init|=
name|NameFormat
operator|.
name|LAST_INITIAL
operator|.
name|reference
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|sNameFormatFirstMiddleLast
init|=
name|NameFormat
operator|.
name|FIRST_MIDDLE_LAST
operator|.
name|reference
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|sNameFormatLastFirstMiddle
init|=
name|NameFormat
operator|.
name|LAST_FIRST_MIDDLE
operator|.
name|reference
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|sNameFormatShort
init|=
name|NameFormat
operator|.
name|SHORT
operator|.
name|reference
argument_list|()
decl_stmt|;
comment|/** 	 *  	 * @return 	 */
specifier|public
name|String
name|nameLastNameFirst
parameter_list|()
block|{
return|return
name|nameLastFirstMiddle
argument_list|()
return|;
block|}
comment|/** 	 *  	 * @return 	 */
specifier|public
name|String
name|nameFirstNameFirst
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|toInitialCase
argument_list|(
operator|(
name|hasFirstName
argument_list|()
condition|?
name|getFirstName
argument_list|()
else|:
literal|""
operator|)
operator|+
operator|(
name|hasMiddleName
argument_list|()
condition|?
literal|" "
operator|+
name|getMiddleName
argument_list|()
else|:
literal|""
operator|)
operator|+
operator|(
name|hasLastName
argument_list|()
condition|?
literal|" "
operator|+
name|getLastName
argument_list|()
else|:
literal|""
operator|)
argument_list|)
operator|.
name|trim
argument_list|()
return|;
block|}
specifier|public
name|String
name|nameShort
parameter_list|()
block|{
return|return
operator|(
name|hasFirstName
argument_list|()
condition|?
name|getFirstName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|". "
else|:
literal|""
operator|)
operator|+
operator|(
name|hasLastName
argument_list|()
condition|?
name|getLastName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|+
name|getLastName
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|Math
operator|.
name|min
argument_list|(
literal|10
argument_list|,
name|getLastName
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toLowerCase
argument_list|()
else|:
literal|""
operator|)
operator|.
name|trim
argument_list|()
return|;
block|}
comment|/** 	 * Property nameFirst used in JSPs 	 * Gets full name with first name first  	 * @return 	 */
specifier|public
name|String
name|getNameFirst
parameter_list|()
block|{
return|return
name|nameFirstNameFirst
argument_list|()
return|;
block|}
comment|/** 	 * Property nameLast used in JSPs 	 * Gets full name with last name first  	 * @return 	 */
specifier|public
name|String
name|getNameLast
parameter_list|()
block|{
return|return
name|nameLastNameFirst
argument_list|()
return|;
block|}
comment|/** 	 *  	 * @return 	 */
specifier|public
name|String
name|getNameLastFirst
parameter_list|()
block|{
return|return
name|nameLastFirst
argument_list|()
return|;
block|}
comment|/** 	 *  	 * @return 	 */
specifier|public
name|String
name|getNameInitLast
parameter_list|()
block|{
return|return
name|nameInitLast
argument_list|()
return|;
block|}
comment|/** 	 *  	 * @return 	 */
specifier|private
name|String
name|nameInitLast
parameter_list|()
block|{
return|return
operator|(
operator|(
name|hasFirstName
argument_list|()
condition|?
name|getFirstName
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
else|:
literal|""
operator|)
operator|+
operator|(
name|hasMiddleName
argument_list|()
condition|?
literal|" "
operator|+
name|getMiddleName
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
else|:
literal|""
operator|)
operator|+
operator|(
name|hasLastName
argument_list|()
condition|?
literal|" "
operator|+
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|getLastName
argument_list|()
argument_list|)
else|:
literal|""
operator|)
operator|)
operator|.
name|trim
argument_list|()
return|;
block|}
comment|/** 	 *  	 * @return 	 */
specifier|private
name|String
name|nameLastFirst
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|toInitialCase
argument_list|(
operator|(
name|hasLastName
argument_list|()
condition|?
name|getLastName
argument_list|()
else|:
literal|""
operator|)
operator|+
operator|(
name|hasFirstName
argument_list|()
condition|?
literal|", "
operator|+
name|getFirstName
argument_list|()
else|:
literal|""
operator|)
argument_list|)
operator|.
name|trim
argument_list|()
return|;
block|}
specifier|public
name|String
name|nameFirstLast
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|toInitialCase
argument_list|(
operator|(
name|hasFirstName
argument_list|()
condition|?
name|getFirstName
argument_list|()
else|:
literal|""
operator|)
operator|+
operator|(
name|hasLastName
argument_list|()
condition|?
literal|" "
operator|+
name|getLastName
argument_list|()
else|:
literal|""
operator|)
argument_list|)
operator|.
name|trim
argument_list|()
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|(
name|String
name|instructorNameFormat
parameter_list|)
block|{
return|return
name|NameFormat
operator|.
name|fromReference
argument_list|(
name|instructorNameFormat
argument_list|)
operator|.
name|format
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasLastName
parameter_list|()
block|{
return|return
name|getLastName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getLastName
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|hasFirstName
parameter_list|()
block|{
return|return
name|getFirstName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getFirstName
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|hasMiddleName
parameter_list|()
block|{
return|return
name|getMiddleName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getMiddleName
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|private
name|String
name|nameLastFirstMiddle
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|toInitialCase
argument_list|(
operator|(
name|hasLastName
argument_list|()
condition|?
name|getLastName
argument_list|()
else|:
literal|""
operator|)
operator|+
operator|(
name|hasFirstName
argument_list|()
operator|||
name|hasMiddleName
argument_list|()
condition|?
literal|","
else|:
literal|""
operator|)
operator|+
operator|(
name|hasFirstName
argument_list|()
condition|?
literal|" "
operator|+
name|getFirstName
argument_list|()
else|:
literal|""
operator|)
operator|+
operator|(
name|hasMiddleName
argument_list|()
condition|?
literal|" "
operator|+
name|getMiddleName
argument_list|()
else|:
literal|""
operator|)
argument_list|)
operator|.
name|trim
argument_list|()
return|;
block|}
comment|/** 	 * Remove class from instructor list 	 * @param ci 	 */
specifier|public
name|void
name|removeClassInstructor
parameter_list|(
name|ClassInstructor
name|classInstr
parameter_list|)
block|{
name|Set
name|s
init|=
name|this
operator|.
name|getClasses
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|s
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ci
operator|.
name|getUniqueId
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|classInstr
operator|.
name|getUniqueId
argument_list|()
operator|.
name|intValue
argument_list|()
condition|)
block|{
name|s
operator|.
name|remove
argument_list|(
name|ci
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
specifier|public
name|String
name|htmlLabel
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|nameFirstNameFirst
argument_list|()
operator|+
literal|", "
operator|+
name|this
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
operator|)
return|;
block|}
specifier|public
name|Set
name|getAvailableRooms
parameter_list|()
block|{
name|Set
name|rooms
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getDepartment
argument_list|()
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|roomDept
init|=
operator|(
name|RoomDept
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|rooms
operator|.
name|add
argument_list|(
name|roomDept
operator|.
name|getRoom
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|rooms
return|;
block|}
specifier|public
name|Set
name|getAvailableRoomFeatures
parameter_list|()
block|{
name|Set
name|features
init|=
name|super
operator|.
name|getAvailableRoomFeatures
argument_list|()
decl_stmt|;
name|features
operator|.
name|addAll
argument_list|(
operator|(
name|DepartmentRoomFeature
operator|.
name|getAllDepartmentRoomFeatures
argument_list|(
name|getDepartment
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
return|return
name|features
return|;
block|}
specifier|public
name|Set
name|getAvailableRoomGroups
parameter_list|()
block|{
name|Set
name|groups
init|=
name|super
operator|.
name|getAvailableRoomGroups
argument_list|()
decl_stmt|;
name|groups
operator|.
name|addAll
argument_list|(
name|RoomGroup
operator|.
name|getAllDepartmentRoomGroups
argument_list|(
name|getDepartment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|groups
return|;
block|}
specifier|public
name|Set
name|prefsOfTypeForDepartment
parameter_list|(
name|Class
name|type
parameter_list|,
name|Department
name|dept
parameter_list|)
block|{
if|if
condition|(
name|dept
operator|==
literal|null
operator|||
name|dept
operator|.
name|equals
argument_list|(
name|getDepartment
argument_list|()
argument_list|)
condition|)
return|return
name|getPreferences
argument_list|(
name|type
argument_list|)
return|;
else|else
return|return
literal|null
return|;
block|}
comment|/** 	 *  	 * @param sessionId 	 * @param di 	 * @return 	 */
specifier|public
specifier|static
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|getAllForInstructor
parameter_list|(
name|DepartmentalInstructor
name|di
parameter_list|,
name|Long
name|sessionId
parameter_list|)
block|{
if|if
condition|(
name|di
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
operator|||
name|di
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ArrayList
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|DepartmentalInstructor
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|DepartmentalInstructorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|di
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
return|return
operator|(
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
operator|)
name|DepartmentalInstructorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from DepartmentalInstructor where externalUniqueId=:puid and "
operator|+
literal|"department.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"puid"
argument_list|,
name|di
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|getAllForInstructor
parameter_list|(
name|DepartmentalInstructor
name|di
parameter_list|)
block|{
return|return
name|getAllForInstructor
argument_list|(
name|di
argument_list|,
name|di
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|findInstructorsForDepartment
parameter_list|(
name|Long
name|departmentId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
operator|)
name|DepartmentalInstructorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from DepartmentalInstructor where department.uniqueId = :departmentId order by lastName, firstName, middleName"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"departmentId"
argument_list|,
name|departmentId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|findInstructorsForSession
parameter_list|(
name|Long
name|sessionId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
operator|)
name|DepartmentalInstructorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from DepartmentalInstructor where department.session.uniqueId = :sessionId order by lastName, firstName, middleName"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
comment|/** 	 *  	 * @param o 	 * @return 	 */
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|DepartmentalInstructor
operator|)
condition|)
return|return
operator|-
literal|1
return|;
name|DepartmentalInstructor
name|i
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|o
decl_stmt|;
name|int
name|cmp
init|=
name|nameLastNameFirst
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|i
operator|.
name|nameLastNameFirst
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
name|Long
operator|.
name|valueOf
argument_list|(
operator|-
literal|1
argument_list|)
else|:
name|getUniqueId
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|i
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|i
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
comment|/** 	 *  	 * @param puid 	 * @return 	 */
specifier|public
specifier|static
name|boolean
name|existInst
parameter_list|(
name|String
name|puid
parameter_list|)
block|{
if|if
condition|(
name|puid
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|false
operator|)
return|;
block|}
name|DepartmentalInstructorDAO
name|ddao
init|=
operator|new
name|DepartmentalInstructorDAO
argument_list|()
decl_stmt|;
name|List
name|list
init|=
name|ddao
operator|.
name|getSession
argument_list|()
operator|.
name|createCriteria
argument_list|(
name|DepartmentalInstructor
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
name|Restrictions
operator|.
name|eq
argument_list|(
literal|"externalUniqueId"
argument_list|,
name|puid
argument_list|)
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
specifier|static
name|DepartmentalInstructor
name|findByPuidDepartmentId
parameter_list|(
name|String
name|puid
parameter_list|,
name|Long
name|deptId
parameter_list|)
block|{
return|return
operator|(
name|findByPuidDepartmentId
argument_list|(
name|puid
argument_list|,
name|deptId
argument_list|,
operator|(
operator|new
name|DepartmentalInstructorDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|public
specifier|static
name|DepartmentalInstructor
name|findByPuidDepartmentId
parameter_list|(
name|String
name|puid
parameter_list|,
name|Long
name|deptId
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
try|try
block|{
return|return
operator|(
name|DepartmentalInstructor
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select d from DepartmentalInstructor d where d.externalUniqueId=:puid and d.department.uniqueId=:deptId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"puid"
argument_list|,
name|puid
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"deptId"
argument_list|,
name|deptId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setFlushMode
argument_list|(
name|FlushMode
operator|.
name|MANUAL
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NonUniqueResultException
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|warning
argument_list|(
literal|"There are two or more instructors with puid "
operator|+
name|puid
operator|+
literal|" for department "
operator|+
name|deptId
operator|+
literal|" -- returning the first one."
argument_list|)
expr_stmt|;
return|return
operator|(
name|DepartmentalInstructor
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select d from DepartmentalInstructor d where d.externalUniqueId=:puid and d.department.uniqueId=:deptId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"puid"
argument_list|,
name|puid
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"deptId"
argument_list|,
name|deptId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setFlushMode
argument_list|(
name|FlushMode
operator|.
name|MANUAL
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
specifier|public
name|DepartmentalInstructor
name|findThisInstructorInSession
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
return|return
name|findThisInstructorInSession
argument_list|(
name|sessionId
argument_list|,
operator|(
operator|new
name|DepartmentalInstructorDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|DepartmentalInstructor
name|findThisInstructorInSession
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|Department
name|newDept
init|=
name|this
operator|.
name|getDepartment
argument_list|()
operator|.
name|findSameDepartmentInSession
argument_list|(
name|sessionId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|newDept
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|findByPuidDepartmentId
argument_list|(
name|this
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|newDept
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
operator|)
return|;
block|}
return|return
operator|(
literal|null
operator|)
return|;
block|}
specifier|public
name|DepartmentalInstructor
name|getNextDepartmentalInstructor
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|Right
name|right
parameter_list|)
throws|throws
name|Exception
block|{
name|List
name|instructors
init|=
name|DepartmentalInstructor
operator|.
name|findInstructorsForDepartment
argument_list|(
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|DepartmentalInstructor
name|next
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|instructors
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|di
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|right
operator|!=
literal|null
operator|&&
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|Department
operator|.
name|class
operator|.
name|equals
argument_list|(
name|right
operator|.
name|type
argument_list|()
argument_list|)
condition|?
name|di
operator|.
name|getDepartment
argument_list|()
else|:
name|di
argument_list|,
name|right
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|this
operator|.
name|compareTo
argument_list|(
name|di
argument_list|)
operator|>=
literal|0
condition|)
continue|continue;
if|if
condition|(
name|next
operator|==
literal|null
operator|||
name|next
operator|.
name|compareTo
argument_list|(
name|di
argument_list|)
operator|>
literal|0
condition|)
name|next
operator|=
name|di
expr_stmt|;
block|}
return|return
name|next
return|;
block|}
specifier|public
name|DepartmentalInstructor
name|getPreviousDepartmentalInstructor
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|Right
name|right
parameter_list|)
throws|throws
name|Exception
block|{
name|List
name|instructors
init|=
name|DepartmentalInstructor
operator|.
name|findInstructorsForDepartment
argument_list|(
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|DepartmentalInstructor
name|prev
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|instructors
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|di
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|right
operator|!=
literal|null
operator|&&
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|Department
operator|.
name|class
operator|.
name|equals
argument_list|(
name|right
operator|.
name|type
argument_list|()
argument_list|)
condition|?
name|di
operator|.
name|getDepartment
argument_list|()
else|:
name|di
argument_list|,
name|right
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|this
operator|.
name|compareTo
argument_list|(
name|di
argument_list|)
operator|<=
literal|0
condition|)
continue|continue;
if|if
condition|(
name|prev
operator|==
literal|null
operator|||
name|prev
operator|.
name|compareTo
argument_list|(
name|di
argument_list|)
operator|<
literal|0
condition|)
name|prev
operator|=
name|di
expr_stmt|;
block|}
return|return
name|prev
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|nameShort
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|hasPreferences
parameter_list|()
block|{
name|Iterator
name|i
init|=
literal|null
decl_stmt|;
try|try
block|{
name|i
operator|=
name|getPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ObjectNotFoundException
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
literal|"Exception "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" seen for "
operator|+
name|this
argument_list|)
expr_stmt|;
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|refresh
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|getPreferences
argument_list|()
operator|!=
literal|null
condition|)
name|i
operator|=
name|getPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
else|else
name|i
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|i
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|==
literal|null
condition|)
return|return
literal|false
return|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Preference
name|preference
init|=
operator|(
name|Preference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|preference
operator|instanceof
name|TimePref
condition|)
block|{
name|TimePref
name|timePref
init|=
operator|(
name|TimePref
operator|)
name|preference
decl_stmt|;
if|if
condition|(
name|timePref
operator|.
name|getPreference
argument_list|()
operator|==
literal|null
operator|||
name|timePref
operator|.
name|getPreference
argument_list|()
operator|.
name|matches
argument_list|(
literal|"2*"
argument_list|)
condition|)
continue|continue;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|DepartmentalInstructor
name|newDepartmentalInstructor
init|=
operator|new
name|DepartmentalInstructor
argument_list|()
decl_stmt|;
name|newDepartmentalInstructor
operator|.
name|setCareerAcct
argument_list|(
name|getCareerAcct
argument_list|()
argument_list|)
expr_stmt|;
name|newDepartmentalInstructor
operator|.
name|setDepartment
argument_list|(
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|newDepartmentalInstructor
operator|.
name|setExternalUniqueId
argument_list|(
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|newDepartmentalInstructor
operator|.
name|setFirstName
argument_list|(
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|newDepartmentalInstructor
operator|.
name|setMiddleName
argument_list|(
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|newDepartmentalInstructor
operator|.
name|setLastName
argument_list|(
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|newDepartmentalInstructor
operator|.
name|setAcademicTitle
argument_list|(
name|getAcademicTitle
argument_list|()
argument_list|)
expr_stmt|;
name|newDepartmentalInstructor
operator|.
name|setIgnoreToFar
argument_list|(
name|isIgnoreToFar
argument_list|()
argument_list|)
expr_stmt|;
name|newDepartmentalInstructor
operator|.
name|setNote
argument_list|(
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|newDepartmentalInstructor
operator|.
name|setPositionType
argument_list|(
name|getPositionType
argument_list|()
argument_list|)
expr_stmt|;
name|newDepartmentalInstructor
operator|.
name|setEmail
argument_list|(
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|newDepartmentalInstructor
operator|.
name|setRole
argument_list|(
name|getRole
argument_list|()
argument_list|)
expr_stmt|;
name|newDepartmentalInstructor
operator|.
name|setTeachingPreference
argument_list|(
name|getTeachingPreference
argument_list|()
argument_list|)
expr_stmt|;
name|newDepartmentalInstructor
operator|.
name|setMaxLoad
argument_list|(
name|getMaxLoad
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|newDepartmentalInstructor
operator|)
return|;
block|}
specifier|public
specifier|static
name|List
name|findAllExamInstructors
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Long
name|examTypeId
parameter_list|)
block|{
return|return
operator|(
operator|new
name|DepartmentalInstructorDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct i from Exam x inner join x.instructors i where x.session.uniqueId=:sessionId and x.examType.uniqueId=:examTypeId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|examTypeId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|Exam
argument_list|>
name|getExams
parameter_list|(
name|Integer
name|examType
parameter_list|)
block|{
if|if
condition|(
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
operator|new
name|DepartmentalInstructorDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct x from Exam x inner join x.instructors i where "
operator|+
literal|"(i.uniqueId=:instructorId or (i.externalUniqueId=:externalId and i.department.session.uniqueId=:sessionId)) "
operator|+
literal|"and x.examType.type=:examType"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"instructorId"
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|getExternalUniqueId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|examType
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|(
operator|new
name|DepartmentalInstructorDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct x from Exam x inner join x.instructors i where i.uniqueId=:instructorId and x.examType=:examType"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"instructorId"
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|examType
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|Exam
argument_list|>
name|getExams
parameter_list|(
name|ExamType
name|examType
parameter_list|)
block|{
if|if
condition|(
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
operator|new
name|DepartmentalInstructorDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct x from Exam x inner join x.instructors i where "
operator|+
literal|"(i.uniqueId=:instructorId or (i.externalUniqueId=:externalId and i.department.session.uniqueId=:sessionId)) "
operator|+
literal|"and x.examType.uniqueId=:examTypeId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"instructorId"
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|getExternalUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|examType
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|(
operator|new
name|DepartmentalInstructorDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct x from Exam x inner join x.instructors i where i.uniqueId=:instructorId and x.examType.uniqueId=:examTypeId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"instructorId"
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|examType
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|Exam
argument_list|>
name|getAllExams
parameter_list|()
block|{
if|if
condition|(
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
operator|new
name|DepartmentalInstructorDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct x from Exam x inner join x.instructors i where "
operator|+
literal|"(i.uniqueId=:instructorId or (i.externalUniqueId=:externalId and i.department.session.uniqueId=:sessionId))"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"instructorId"
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|getExternalUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|(
operator|new
name|DepartmentalInstructorDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct x from Exam x inner join x.instructors i where i.uniqueId=:instructorId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"instructorId"
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|Assignment
argument_list|>
name|getCommitedAssignments
parameter_list|()
block|{
return|return
operator|new
name|DepartmentalInstructorDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select a from Assignment a inner join a.instructors i where "
operator|+
literal|"a.solution.commited=true and i.uniqueId=:instructorId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"instructorId"
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Session
name|getSession
parameter_list|()
block|{
return|return
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|boolean
name|canLookupInstructor
parameter_list|()
block|{
return|return
name|ApplicationProperty
operator|.
name|InstructorExternalIdLookupClass
operator|.
name|value
argument_list|()
operator|!=
literal|null
return|;
block|}
specifier|public
specifier|static
name|UserInfo
name|lookupInstructor
parameter_list|(
name|String
name|externalId
parameter_list|)
throws|throws
name|Exception
block|{
name|ExternalUidLookup
name|lookup
init|=
literal|null
decl_stmt|;
name|String
name|className
init|=
name|ApplicationProperty
operator|.
name|InstructorExternalIdLookupClass
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
condition|)
name|lookup
operator|=
operator|(
name|ExternalUidLookup
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
return|return
operator|(
name|lookup
operator|==
literal|null
condition|?
literal|null
else|:
name|lookup
operator|.
name|doLookup
argument_list|(
name|externalId
argument_list|)
operator|)
return|;
block|}
specifier|public
name|Set
argument_list|<
name|InstructorAttribute
argument_list|>
name|getAttributes
parameter_list|(
name|InstructorAttributeType
name|type
parameter_list|)
block|{
name|Set
argument_list|<
name|InstructorAttribute
argument_list|>
name|ret
init|=
operator|new
name|TreeSet
argument_list|<
name|InstructorAttribute
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|InstructorAttribute
name|a
range|:
name|getAttributes
argument_list|()
control|)
block|{
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|Set
argument_list|<
name|CourseOffering
argument_list|>
name|getAvailableCourses
parameter_list|()
block|{
return|return
operator|new
name|TreeSet
argument_list|<
name|CourseOffering
argument_list|>
argument_list|(
name|DepartmentalInstructorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from CourseOffering c where c.subjectArea.department.uniqueId = :departmentId and c.isControl = true and c.instructionalOffering.notOffered = false"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"departmentId"
argument_list|,
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Set
name|getAvailableAttributeTypes
parameter_list|()
block|{
return|return
name|getDepartment
argument_list|()
operator|.
name|getAvailableAttributeTypes
argument_list|()
return|;
block|}
specifier|public
name|Set
name|getAvailableAttributes
parameter_list|()
block|{
return|return
name|getDepartment
argument_list|()
operator|.
name|getAvailableAttributes
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|hasUnavailabilities
parameter_list|()
block|{
if|if
condition|(
name|getUnavailableDays
argument_list|()
operator|==
literal|null
operator|||
name|getUnavailableDays
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
name|getUnavailableDays
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|'1'
argument_list|)
operator|>=
literal|0
return|;
block|}
specifier|public
name|boolean
name|isUnavailable
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|month
parameter_list|)
block|{
if|if
condition|(
name|getUnavailableDays
argument_list|()
operator|==
literal|null
operator|||
name|getUnavailableDays
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|int
name|idx
init|=
name|getSession
argument_list|()
operator|.
name|getDayOfYear
argument_list|(
name|day
argument_list|,
name|month
argument_list|)
operator|-
name|getUnavailablePatternOffset
argument_list|()
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
operator|||
name|idx
operator|>=
name|getUnavailableDays
argument_list|()
operator|.
name|length
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
operator|(
name|getUnavailableDays
argument_list|()
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
operator|==
literal|'1'
operator|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|TimeBlock
argument_list|>
name|listUnavailableDays
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasUnavailabilities
argument_list|()
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|TimeBlock
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|TimeBlock
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|i
init|=
operator|-
literal|1
decl_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|Date
name|start
init|=
name|getUnavailableStartDate
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|i
operator|=
name|getUnavailableDays
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|'1'
argument_list|,
name|i
operator|+
literal|1
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|cal
operator|.
name|setTime
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|UnavailableDay
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|List
argument_list|<
name|TimeLocation
argument_list|>
name|listUnavailableTimes
parameter_list|()
block|{
if|if
condition|(
name|getUnavailableDays
argument_list|()
operator|==
literal|null
operator|||
name|getUnavailableDays
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|TimeLocation
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|TimeLocation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|BitSet
name|weekCode
init|=
name|getUnavailableBitSet
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|weekCode
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|name
init|=
literal|""
decl_stmt|;
name|int
name|idx
init|=
operator|-
literal|1
decl_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|Date
name|start
init|=
name|DateUtils
operator|.
name|getDate
argument_list|(
literal|1
argument_list|,
name|getSession
argument_list|()
operator|.
name|getPatternStartMonth
argument_list|()
argument_list|,
name|getSession
argument_list|()
operator|.
name|getSessionStartYear
argument_list|()
argument_list|)
decl_stmt|;
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|df
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_SHORT
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|idx
operator|=
name|weekCode
operator|.
name|nextSetBit
argument_list|(
literal|1
operator|+
name|idx
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|cal
operator|.
name|setTime
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|name
operator|+=
operator|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|", "
operator|)
operator|+
name|df
operator|.
name|format
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|add
argument_list|(
operator|new
name|TimeLocation
argument_list|(
name|Constants
operator|.
name|DAY_CODES
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
literal|288
argument_list|,
literal|0
argument_list|,
literal|0.0
argument_list|,
literal|null
argument_list|,
name|name
argument_list|,
name|weekCode
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|BitSet
name|getUnavailableBitSet
parameter_list|(
name|int
name|targetDow
parameter_list|)
block|{
if|if
condition|(
name|getUnavailableDays
argument_list|()
operator|==
literal|null
operator|||
name|getUnavailableOffset
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|int
name|startMonth
init|=
name|getSession
argument_list|()
operator|.
name|getPatternStartMonth
argument_list|()
decl_stmt|;
name|int
name|endMonth
init|=
name|getSession
argument_list|()
operator|.
name|getPatternEndMonth
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|getSession
argument_list|()
operator|.
name|getDayOfYear
argument_list|(
literal|0
argument_list|,
name|endMonth
operator|+
literal|1
argument_list|)
operator|-
name|getSession
argument_list|()
operator|.
name|getDayOfYear
argument_list|(
literal|1
argument_list|,
name|startMonth
argument_list|)
decl_stmt|;
name|BitSet
name|ret
init|=
operator|new
name|BitSet
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
name|getUnavailablePatternOffset
argument_list|()
operator|-
name|getSession
argument_list|()
operator|.
name|getDayOfYear
argument_list|(
literal|1
argument_list|,
name|startMonth
argument_list|)
decl_stmt|;
name|int
name|dayOfWeekOffset
init|=
name|Constants
operator|.
name|getDayOfWeek
argument_list|(
name|DateUtils
operator|.
name|getDate
argument_list|(
literal|1
argument_list|,
name|getSession
argument_list|()
operator|.
name|getPatternStartMonth
argument_list|()
argument_list|,
name|getSession
argument_list|()
operator|.
name|getSessionStartYear
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getUnavailableDays
argument_list|()
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|dow
init|=
operator|(
name|i
operator|+
name|offset
operator|+
name|dayOfWeekOffset
operator|)
operator|%
literal|7
decl_stmt|;
if|if
condition|(
name|getUnavailableDays
argument_list|()
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'1'
operator|&&
name|i
operator|+
name|offset
operator|>=
literal|0
operator|&&
name|dow
operator|==
name|targetDow
condition|)
name|ret
operator|.
name|set
argument_list|(
name|i
operator|+
name|offset
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|getUserInstructors
parameter_list|(
name|UserContext
name|user
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
operator|||
name|user
operator|.
name|getCurrentAcademicSessionId
argument_list|()
operator|==
literal|null
operator|||
name|user
operator|.
name|getExternalUserId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|(
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
operator|)
name|DepartmentalInstructorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from DepartmentalInstructor i where i.department.session.uniqueId = :sessionId and i.externalUniqueId = :externalId "
operator|+
literal|"order by i.department.deptCode"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|user
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|user
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
name|int
name|getUnavailablePatternOffset
parameter_list|()
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|getSession
argument_list|()
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|beginDate
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|)
decl_stmt|;
return|return
name|beginDate
operator|-
operator|(
name|getUnavailableOffset
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|getUnavailableOffset
argument_list|()
operator|.
name|intValue
argument_list|()
operator|)
operator|-
literal|1
return|;
block|}
specifier|public
name|String
name|getUnavailablePatternArray
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
name|int
name|startMonth
init|=
name|getSession
argument_list|()
operator|.
name|getPatternStartMonth
argument_list|()
decl_stmt|;
name|int
name|endMonth
init|=
name|getSession
argument_list|()
operator|.
name|getPatternEndMonth
argument_list|()
decl_stmt|;
name|int
name|year
init|=
name|getSession
argument_list|()
operator|.
name|getSessionStartYear
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
name|startMonth
init|;
name|m
operator|<=
name|endMonth
condition|;
name|m
operator|++
control|)
block|{
if|if
condition|(
name|m
operator|!=
name|startMonth
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|int
name|daysOfMonth
init|=
name|DateUtils
operator|.
name|getNrDaysOfMonth
argument_list|(
name|m
argument_list|,
name|year
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<=
name|daysOfMonth
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
name|d
operator|>
literal|1
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|isUnavailable
argument_list|(
name|d
argument_list|,
name|m
argument_list|)
condition|?
literal|"'1'"
else|:
literal|"'0'"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getUnavailableBorderArray
parameter_list|()
block|{
name|int
name|startMonth
init|=
name|getSession
argument_list|()
operator|.
name|getPatternStartMonth
argument_list|()
decl_stmt|;
name|int
name|endMonth
init|=
name|getSession
argument_list|()
operator|.
name|getPatternEndMonth
argument_list|()
decl_stmt|;
name|int
name|year
init|=
name|getSession
argument_list|()
operator|.
name|getSessionStartYear
argument_list|()
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
name|startMonth
init|;
name|m
operator|<=
name|endMonth
condition|;
name|m
operator|++
control|)
block|{
if|if
condition|(
name|m
operator|!=
name|startMonth
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|int
name|daysOfMonth
init|=
name|DateUtils
operator|.
name|getNrDaysOfMonth
argument_list|(
name|m
argument_list|,
name|year
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<=
name|daysOfMonth
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
name|d
operator|>
literal|1
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|String
name|border
init|=
name|getSession
argument_list|()
operator|.
name|getBorder
argument_list|(
name|d
argument_list|,
name|m
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|border
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getUnavailablePatternHtml
parameter_list|()
block|{
return|return
name|getUnavailablePatternHtml
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|String
name|getUnavailablePatternHtml
parameter_list|(
name|boolean
name|editable
parameter_list|)
block|{
return|return
name|getUnavailablePatternHtml
argument_list|(
name|editable
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|String
name|getUnavailablePatternHtml
parameter_list|(
name|boolean
name|editable
parameter_list|,
name|boolean
name|includeScript
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeScript
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"<script language='JavaScript' type='text/javascript' src='scripts/datepatt.js'></script>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<script language='JavaScript'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"calGenerate2("
operator|+
name|getSession
argument_list|()
operator|.
name|getSessionStartYear
argument_list|()
operator|+
literal|","
operator|+
operator|(
name|getSession
argument_list|()
operator|.
name|getPatternStartMonth
argument_list|()
operator|)
operator|+
literal|","
operator|+
operator|(
name|getSession
argument_list|()
operator|.
name|getPatternEndMonth
argument_list|()
operator|)
operator|+
literal|","
operator|+
name|getUnavailablePatternArray
argument_list|()
operator|+
literal|","
operator|+
literal|"['1','0'],"
operator|+
literal|"['"
operator|+
name|MSG
operator|.
name|dateNotAvailable
argument_list|()
operator|+
literal|"','"
operator|+
name|MSG
operator|.
name|dateAvailable
argument_list|()
operator|+
literal|"'],"
operator|+
literal|"['rgb(150,150,150)','rgb(240,240,240)'],"
operator|+
literal|"'1',"
operator|+
name|getUnavailableBorderArray
argument_list|()
operator|+
literal|","
operator|+
name|getSession
argument_list|()
operator|.
name|getColorArray
argument_list|()
operator|+
literal|","
operator|+
name|editable
operator|+
literal|","
operator|+
name|editable
operator|+
literal|");"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</script>"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|setUnavailablePatternAndOffset
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|int
name|startMonth
init|=
name|getSession
argument_list|()
operator|.
name|getPatternStartMonth
argument_list|()
decl_stmt|;
name|int
name|endMonth
init|=
name|getSession
argument_list|()
operator|.
name|getPatternEndMonth
argument_list|()
decl_stmt|;
name|int
name|firstOne
init|=
literal|0
decl_stmt|,
name|lastOne
init|=
literal|0
decl_stmt|;
name|int
name|year
init|=
name|getSession
argument_list|()
operator|.
name|getSessionStartYear
argument_list|()
decl_stmt|;
name|StringBuffer
name|sb
init|=
literal|null
decl_stmt|;
name|int
name|idx
init|=
name|getSession
argument_list|()
operator|.
name|getDayOfYear
argument_list|(
literal|1
argument_list|,
name|startMonth
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
name|startMonth
init|;
name|m
operator|<=
name|endMonth
condition|;
name|m
operator|++
control|)
block|{
name|int
name|daysOfMonth
init|=
name|DateUtils
operator|.
name|getNrDaysOfMonth
argument_list|(
name|m
argument_list|,
name|year
argument_list|)
decl_stmt|;
name|int
name|yr
init|=
name|DateUtils
operator|.
name|calculateActualYear
argument_list|(
name|m
argument_list|,
name|year
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<=
name|daysOfMonth
condition|;
name|d
operator|++
control|)
block|{
name|String
name|unavailable
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"cal_val_"
operator|+
name|yr
operator|+
literal|"_"
operator|+
operator|(
operator|(
literal|12
operator|+
name|m
operator|)
operator|%
literal|12
operator|)
operator|+
literal|"_"
operator|+
name|d
argument_list|)
decl_stmt|;
if|if
condition|(
name|unavailable
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sb
operator|!=
literal|null
operator|||
operator|!
name|unavailable
operator|.
name|equals
argument_list|(
literal|"0"
argument_list|)
condition|)
block|{
if|if
condition|(
name|sb
operator|==
literal|null
condition|)
block|{
name|firstOne
operator|=
name|idx
expr_stmt|;
name|sb
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|unavailable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|unavailable
operator|.
name|equals
argument_list|(
literal|"0"
argument_list|)
condition|)
name|lastOne
operator|=
name|idx
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
block|}
block|}
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|getSession
argument_list|()
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sb
operator|!=
literal|null
condition|)
block|{
name|setUnavailableDays
argument_list|(
name|sb
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastOne
operator|-
name|firstOne
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|setUnavailableOffset
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|)
operator|-
name|firstOne
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setUnavailableDays
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setUnavailableOffset
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Date
name|getUnavailableStartDate
parameter_list|()
block|{
if|if
condition|(
name|getUnavailableDays
argument_list|()
operator|==
literal|null
operator|||
name|getUnavailableOffset
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|int
name|idx
init|=
name|getUnavailableDays
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|'1'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
return|return
name|getSession
argument_list|()
operator|.
name|getSessionBeginDateTime
argument_list|()
return|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|getSession
argument_list|()
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
operator|-
name|getUnavailableOffset
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|cal
operator|.
name|getTime
argument_list|()
return|;
block|}
specifier|public
name|Date
name|getUnavailableEndDate
parameter_list|()
block|{
if|if
condition|(
name|getUnavailableDays
argument_list|()
operator|==
literal|null
operator|||
name|getUnavailableOffset
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|int
name|idx
init|=
name|getUnavailableDays
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'1'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
return|return
name|getSession
argument_list|()
operator|.
name|getSessionEndDateTime
argument_list|()
return|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|getSession
argument_list|()
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
operator|-
name|getUnavailableOffset
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|cal
operator|.
name|getTime
argument_list|()
return|;
block|}
specifier|public
name|Map
argument_list|<
name|Date
argument_list|,
name|Date
argument_list|>
name|getUnavailablePatternDateStringHashMaps
parameter_list|()
block|{
name|Calendar
name|startDate
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|startDate
operator|.
name|setTime
argument_list|(
name|getUnavailableStartDate
argument_list|()
argument_list|)
expr_stmt|;
name|Calendar
name|endDate
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|endDate
operator|.
name|setTime
argument_list|(
name|getUnavailableEndDate
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|startMonth
init|=
name|startDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
decl_stmt|;
name|int
name|endMonth
init|=
name|endDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
decl_stmt|;
name|int
name|startYear
init|=
name|startDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
decl_stmt|;
name|int
name|endYear
init|=
name|endDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
decl_stmt|;
if|if
condition|(
name|endYear
operator|>
name|startYear
condition|)
block|{
name|endMonth
operator|+=
operator|(
literal|12
operator|*
operator|(
name|endYear
operator|-
name|startYear
operator|)
operator|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|Date
argument_list|,
name|Date
argument_list|>
name|mapStartToEndDate
init|=
operator|new
name|HashMap
argument_list|<
name|Date
argument_list|,
name|Date
argument_list|>
argument_list|()
decl_stmt|;
name|Date
name|first
init|=
literal|null
decl_stmt|,
name|previous
init|=
literal|null
decl_stmt|;
name|char
index|[]
name|ptrn
init|=
name|getUnavailableDays
argument_list|()
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
literal|0
decl_stmt|;
name|int
name|dayOfWeek
init|=
name|startDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
name|startMonth
init|;
name|m
operator|<=
name|endMonth
condition|;
name|m
operator|++
control|)
block|{
name|int
name|daysOfMonth
init|=
name|DateUtils
operator|.
name|getNrDaysOfMonth
argument_list|(
name|m
argument_list|,
name|startYear
argument_list|)
decl_stmt|;
name|int
name|d
decl_stmt|;
if|if
condition|(
name|m
operator|==
name|startMonth
condition|)
block|{
name|d
operator|=
name|startDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|=
literal|1
expr_stmt|;
block|}
for|for
control|(
init|;
name|d
operator|<=
name|daysOfMonth
operator|&&
name|charPosition
operator|<
name|ptrn
operator|.
name|length
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
name|ptrn
index|[
name|charPosition
index|]
operator|==
literal|'1'
operator|||
operator|(
name|first
operator|!=
literal|null
operator|&&
name|dayOfWeek
operator|==
name|Calendar
operator|.
name|SUNDAY
operator|&&
name|charPosition
operator|+
literal|1
operator|<
name|ptrn
operator|.
name|length
operator|&&
name|ptrn
index|[
literal|1
operator|+
name|charPosition
index|]
operator|==
literal|'1'
operator|)
condition|)
block|{
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
comment|//first = ((m<0?12+m:m%12)+1)+"/"+d+"/"+((m>=12)?startYear+1:startYear);
name|cal
operator|.
name|setTime
argument_list|(
name|getUnavailableStartDate
argument_list|()
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|charPosition
argument_list|)
expr_stmt|;
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|first
operator|!=
literal|null
condition|)
block|{
name|mapStartToEndDate
operator|.
name|put
argument_list|(
name|first
argument_list|,
name|previous
argument_list|)
expr_stmt|;
name|first
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|//previous = ((m<0?12+m:m%12)+1)+"/"+d+"/"+((m>=12)?startYear+1:startYear);
name|cal
operator|.
name|setTime
argument_list|(
name|getUnavailableStartDate
argument_list|()
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|charPosition
argument_list|)
expr_stmt|;
name|previous
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|charPosition
operator|++
expr_stmt|;
name|dayOfWeek
operator|++
expr_stmt|;
if|if
condition|(
name|dayOfWeek
operator|>
name|Calendar
operator|.
name|SATURDAY
condition|)
block|{
name|dayOfWeek
operator|=
name|Calendar
operator|.
name|SUNDAY
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|first
operator|!=
literal|null
condition|)
block|{
name|mapStartToEndDate
operator|.
name|put
argument_list|(
name|first
argument_list|,
name|previous
argument_list|)
expr_stmt|;
name|first
operator|=
literal|null
expr_stmt|;
block|}
return|return
operator|(
name|mapStartToEndDate
operator|)
return|;
block|}
specifier|public
name|String
name|getUnavailableDaysText
parameter_list|(
name|String
name|separator
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|Map
argument_list|<
name|Date
argument_list|,
name|Date
argument_list|>
name|dates
init|=
name|getUnavailablePatternDateStringHashMaps
argument_list|()
decl_stmt|;
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|df
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_SHORT
argument_list|)
decl_stmt|;
for|for
control|(
name|Date
name|startDate
range|:
operator|new
name|TreeSet
argument_list|<
name|Date
argument_list|>
argument_list|(
name|dates
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|Date
name|endDate
init|=
name|dates
operator|.
name|get
argument_list|(
name|startDate
argument_list|)
decl_stmt|;
name|String
name|startDateStr
init|=
name|df
operator|.
name|format
argument_list|(
name|startDate
argument_list|)
decl_stmt|;
name|String
name|endDateStr
init|=
name|df
operator|.
name|format
argument_list|(
name|endDate
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|startDateStr
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|startDateStr
operator|.
name|equals
argument_list|(
name|endDateStr
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"-"
operator|+
name|endDateStr
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
class|class
name|UnavailableDay
implements|implements
name|TimeBlock
implements|,
name|Comparable
argument_list|<
name|TimeBlock
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Date
name|iDate
decl_stmt|;
specifier|private
name|UnavailableDay
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
name|iDate
operator|=
name|date
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|getEventId
parameter_list|()
block|{
return|return
operator|-
name|getUniqueId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getEventName
parameter_list|()
block|{
return|return
name|MSG
operator|.
name|instructorNotAvailableName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getEventType
parameter_list|()
block|{
return|return
name|MSG
operator|.
name|instructorNotAvailableType
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Date
name|getStartTime
parameter_list|()
block|{
return|return
name|iDate
return|;
block|}
annotation|@
name|Override
specifier|public
name|Date
name|getEndTime
parameter_list|()
block|{
return|return
operator|new
name|Date
argument_list|(
name|iDate
operator|.
name|getTime
argument_list|()
operator|+
literal|86400000l
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|TimeBlock
name|block
parameter_list|)
block|{
name|int
name|cmp
init|=
name|getStartTime
argument_list|()
operator|.
name|compareTo
argument_list|(
name|block
operator|.
name|getStartTime
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|getEndTime
argument_list|()
operator|.
name|compareTo
argument_list|(
name|block
operator|.
name|getEndTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|getEventName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|block
operator|.
name|getEventName
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

