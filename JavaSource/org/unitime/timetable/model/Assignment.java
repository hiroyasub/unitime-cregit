begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Lecture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Hibernate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|LazyInitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|criterion
operator|.
name|Restrictions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|AssignmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|AssignmentInfoDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ConstraintInfoDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|TimetableInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|duration
operator|.
name|DurationModel
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller, Stephanie Schluttenhofer  */
end_comment

begin_class
specifier|public
class|class
name|Assignment
extends|extends
name|BaseAssignment
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|Assignment
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|Assignment
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
specifier|public
name|int
index|[]
name|getStartSlots
parameter_list|()
block|{
name|int
name|ret
index|[]
init|=
operator|new
name|int
index|[
name|getTimePattern
argument_list|()
operator|.
name|getNrMeetings
argument_list|()
operator|.
name|intValue
argument_list|()
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|(
name|getDays
argument_list|()
operator|.
name|intValue
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|i
index|]
operator|)
operator|!=
literal|0
condition|)
name|ret
index|[
name|idx
operator|++
index|]
operator|=
name|getStartSlot
argument_list|()
operator|.
name|intValue
argument_list|()
operator|+
name|i
operator|*
name|Constants
operator|.
name|SLOTS_PER_DAY
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|Vector
name|getStartSlotsVect
parameter_list|()
block|{
name|Vector
name|ret
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|(
name|getDays
argument_list|()
operator|.
name|intValue
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|i
index|]
operator|)
operator|!=
literal|0
condition|)
name|ret
operator|.
name|addElement
argument_list|(
operator|new
name|Integer
argument_list|(
name|getStartSlot
argument_list|()
operator|.
name|intValue
argument_list|()
operator|+
name|i
operator|*
name|Constants
operator|.
name|SLOTS_PER_DAY
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
specifier|transient
name|Hashtable
name|iAssignmentInfoCache
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|public
name|TimetableInfo
name|getAssignmentInfo
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|TimetableInfo
name|tInfo
init|=
operator|(
name|TimetableInfo
operator|)
name|iAssignmentInfoCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|tInfo
operator|==
literal|null
condition|)
block|{
try|try
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|getAssignmentInfo
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AssignmentInfo
name|info
init|=
operator|(
name|AssignmentInfo
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getDefinition
argument_list|()
operator|!=
literal|null
operator|&&
name|info
operator|.
name|getDefinition
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|tInfo
operator|=
name|info
operator|.
name|getInfo
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|LazyInitializationException
name|e
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|session
init|=
operator|(
operator|new
name|AssignmentInfoDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|SolverInfoDef
name|def
init|=
name|SolverInfoDef
operator|.
name|findByName
argument_list|(
name|session
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|def
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|AssignmentInfo
name|info
init|=
operator|(
name|AssignmentInfo
operator|)
name|session
operator|.
name|createCriteria
argument_list|(
name|AssignmentInfo
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
name|Restrictions
operator|.
name|eq
argument_list|(
literal|"definition"
argument_list|,
name|def
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Restrictions
operator|.
name|eq
argument_list|(
literal|"assignment"
argument_list|,
name|this
argument_list|)
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|tInfo
operator|=
name|info
operator|.
name|getInfo
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|tInfo
operator|!=
literal|null
condition|)
name|iAssignmentInfoCache
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|tInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|tInfo
return|;
block|}
specifier|public
name|void
name|cleastAssignmentInfoCache
parameter_list|()
block|{
name|iAssignmentInfoCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|transient
name|Hashtable
name|iConstraintInfoCache
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|public
name|TimetableInfo
name|getConstraintInfo
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Vector
name|infos
init|=
name|getConstraintInfos
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|infos
operator|==
literal|null
operator|||
name|infos
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
operator|(
name|TimetableInfo
operator|)
name|infos
operator|.
name|firstElement
argument_list|()
return|;
block|}
specifier|public
name|Vector
name|getConstraintInfos
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Vector
name|tInfos
init|=
operator|(
name|Vector
operator|)
name|iConstraintInfoCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|tInfos
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|tInfos
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getConstraintInfo
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ConstraintInfo
name|info
init|=
operator|(
name|ConstraintInfo
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getDefinition
argument_list|()
operator|!=
literal|null
operator|&&
name|info
operator|.
name|getDefinition
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|TimetableInfo
name|tInfo
init|=
name|info
operator|.
name|getInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|tInfo
operator|!=
literal|null
condition|)
name|tInfos
operator|.
name|add
argument_list|(
name|tInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|LazyInitializationException
name|e
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|session
init|=
operator|(
operator|new
name|ConstraintInfoDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
name|session
operator|.
name|createQuery
argument_list|(
literal|"select distinct c from ConstraintInfo as c inner join c.assignments as a where "
operator|+
literal|"c.definition.name=:name and a.uniqueId=:assignmentId"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"assignmentId"
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|tInfos
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|q
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ConstraintInfo
name|info
init|=
operator|(
name|ConstraintInfo
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|TimetableInfo
name|tInfo
init|=
name|info
operator|.
name|getInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|tInfo
operator|!=
literal|null
condition|)
name|tInfos
operator|.
name|add
argument_list|(
name|tInfo
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tInfos
operator|!=
literal|null
condition|)
name|iConstraintInfoCache
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|tInfos
argument_list|)
expr_stmt|;
block|}
return|return
name|tInfos
return|;
block|}
specifier|public
name|Hashtable
name|getConstraintInfoTable
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Hashtable
name|ret
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|getConstraintInfo
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ConstraintInfo
name|info
init|=
operator|(
name|ConstraintInfo
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getDefinition
argument_list|()
operator|!=
literal|null
operator|&&
name|info
operator|.
name|getDefinition
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|TimetableInfo
name|tInfo
init|=
name|info
operator|.
name|getInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|tInfo
operator|!=
literal|null
condition|)
name|ret
operator|.
name|put
argument_list|(
name|info
argument_list|,
name|tInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|LazyInitializationException
name|e
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|session
init|=
operator|(
operator|new
name|ConstraintInfoDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
name|session
operator|.
name|createQuery
argument_list|(
literal|"select distinct c from ConstraintInfo as c inner join c.assignments as a where "
operator|+
literal|"c.definition.name=:name and a.uniqueId=:assignmentId"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"assignmentId"
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|q
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ConstraintInfo
name|info
init|=
operator|(
name|ConstraintInfo
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|TimetableInfo
name|tInfo
init|=
name|info
operator|.
name|getInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|tInfo
operator|!=
literal|null
condition|)
name|ret
operator|.
name|put
argument_list|(
name|info
argument_list|,
name|tInfo
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|int
name|iSlotsPerMtg
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|void
name|setSlotsPerMtg
parameter_list|(
name|int
name|slotsPerMtg
parameter_list|)
block|{
name|iSlotsPerMtg
operator|=
name|slotsPerMtg
expr_stmt|;
block|}
specifier|public
name|int
name|getSlotPerMtg
parameter_list|()
block|{
if|if
condition|(
name|iSlotsPerMtg
operator|>=
literal|0
condition|)
return|return
name|iSlotsPerMtg
return|;
name|TimePattern
name|pattern
init|=
name|getTimePattern
argument_list|()
decl_stmt|;
name|iSlotsPerMtg
operator|=
name|pattern
operator|.
name|getSlotsPerMtg
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|pattern
operator|.
name|getType
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|TimePattern
operator|.
name|sTypeExactTime
condition|)
block|{
name|DurationModel
name|dm
init|=
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getDurationModel
argument_list|()
decl_stmt|;
name|int
name|minsPerMeeting
init|=
name|dm
operator|.
name|getExactTimeMinutesPerMeeting
argument_list|(
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|,
name|getDatePattern
argument_list|()
argument_list|,
name|getDays
argument_list|()
argument_list|)
decl_stmt|;
name|iSlotsPerMtg
operator|=
name|ExactTimeMins
operator|.
name|getNrSlotsPerMtg
argument_list|(
name|minsPerMeeting
argument_list|)
expr_stmt|;
block|}
return|return
name|iSlotsPerMtg
return|;
block|}
specifier|private
name|int
name|iBreakTime
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|void
name|setBreakTime
parameter_list|(
name|int
name|breakTime
parameter_list|)
block|{
name|iBreakTime
operator|=
name|breakTime
expr_stmt|;
block|}
specifier|public
name|int
name|getBreakTime
parameter_list|()
block|{
if|if
condition|(
name|iBreakTime
operator|>=
literal|0
condition|)
return|return
name|iBreakTime
return|;
name|TimePattern
name|pattern
init|=
name|getTimePattern
argument_list|()
decl_stmt|;
name|iBreakTime
operator|=
name|pattern
operator|.
name|getBreakTime
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|pattern
operator|.
name|getType
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|TimePattern
operator|.
name|sTypeExactTime
condition|)
block|{
name|DurationModel
name|dm
init|=
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getDurationModel
argument_list|()
decl_stmt|;
name|int
name|minsPerMeeting
init|=
name|dm
operator|.
name|getExactTimeMinutesPerMeeting
argument_list|(
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|,
name|getDatePattern
argument_list|()
argument_list|,
name|getDays
argument_list|()
argument_list|)
decl_stmt|;
name|iBreakTime
operator|=
name|ExactTimeMins
operator|.
name|getBreakTime
argument_list|(
name|minsPerMeeting
argument_list|)
expr_stmt|;
block|}
return|return
name|iBreakTime
return|;
block|}
specifier|private
specifier|transient
name|TimeLocation
name|iTimeLocation
init|=
literal|null
decl_stmt|;
specifier|public
name|TimeLocation
name|getTimeLocation
parameter_list|()
block|{
if|if
condition|(
name|iPlacement
operator|!=
literal|null
condition|)
return|return
name|iPlacement
operator|.
name|getTimeLocation
argument_list|()
return|;
if|if
condition|(
name|iTimeLocation
operator|==
literal|null
condition|)
block|{
name|DatePattern
name|datePattern
init|=
name|getDatePattern
argument_list|()
decl_stmt|;
name|iTimeLocation
operator|=
operator|new
name|TimeLocation
argument_list|(
name|getDays
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|getStartSlot
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|getSlotPerMtg
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|(
name|datePattern
operator|==
literal|null
condition|?
literal|null
else|:
name|datePattern
operator|.
name|getUniqueId
argument_list|()
operator|)
argument_list|,
operator|(
name|datePattern
operator|==
literal|null
condition|?
literal|"?"
else|:
name|datePattern
operator|.
name|getName
argument_list|()
operator|)
argument_list|,
operator|(
name|datePattern
operator|==
literal|null
condition|?
operator|new
name|BitSet
argument_list|()
else|:
name|datePattern
operator|.
name|getPatternBitSet
argument_list|()
operator|)
argument_list|,
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|iTimeLocation
operator|.
name|setTimePatternId
argument_list|(
name|getTimePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|iTimeLocation
return|;
block|}
specifier|public
name|Vector
name|getRoomLocations
parameter_list|()
block|{
name|Vector
name|ret
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|room
init|=
operator|(
name|Location
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|RoomLocation
name|roomLocation
init|=
operator|new
name|RoomLocation
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|room
operator|.
name|getLabel
argument_list|()
argument_list|,
operator|(
name|room
operator|instanceof
name|Room
condition|?
operator|(
operator|(
name|Room
operator|)
name|room
operator|)
operator|.
name|getBuilding
argument_list|()
operator|.
name|getUniqueId
argument_list|()
else|:
literal|null
operator|)
argument_list|,
literal|0
argument_list|,
name|room
operator|.
name|getCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|room
operator|.
name|getCoordinateX
argument_list|()
argument_list|,
name|room
operator|.
name|getCoordinateY
argument_list|()
argument_list|,
name|room
operator|.
name|isIgnoreTooFar
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ret
operator|.
name|addElement
argument_list|(
name|roomLocation
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
specifier|transient
name|Placement
name|iPlacement
init|=
literal|null
decl_stmt|;
specifier|public
name|Placement
name|getPlacement
parameter_list|()
block|{
if|if
condition|(
name|iPlacement
operator|!=
literal|null
condition|)
return|return
name|iPlacement
return|;
name|TimeLocation
name|timeLocation
init|=
name|getTimeLocation
argument_list|()
decl_stmt|;
name|Vector
name|timeLocations
init|=
operator|new
name|Vector
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|timeLocations
operator|.
name|addElement
argument_list|(
name|timeLocation
argument_list|)
expr_stmt|;
name|Vector
name|roomLocations
init|=
name|getRoomLocations
argument_list|()
decl_stmt|;
name|Lecture
name|lecture
init|=
operator|new
name|Lecture
argument_list|(
name|getClassId
argument_list|()
argument_list|,
operator|(
name|getSolution
argument_list|()
operator|==
literal|null
operator|||
name|getSolution
argument_list|()
operator|.
name|getOwner
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|getSolution
argument_list|()
operator|.
name|getOwner
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|)
argument_list|,
operator|(
name|getClazz
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|)
argument_list|,
name|getClassName
argument_list|()
argument_list|,
name|timeLocations
argument_list|,
name|roomLocations
argument_list|,
name|roomLocations
operator|.
name|size
argument_list|()
argument_list|,
operator|new
name|Placement
argument_list|(
literal|null
argument_list|,
name|timeLocation
argument_list|,
name|roomLocations
argument_list|)
argument_list|,
operator|(
name|getClazz
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|getClazz
argument_list|()
operator|.
name|getExpectedCapacity
argument_list|()
operator|)
argument_list|,
operator|(
name|getClazz
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|getClazz
argument_list|()
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|)
argument_list|,
operator|(
name|getClazz
argument_list|()
operator|==
literal|null
condition|?
literal|1.0f
else|:
name|getClazz
argument_list|()
operator|.
name|getRoomRatio
argument_list|()
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|getClazz
argument_list|()
operator|!=
literal|null
condition|)
name|lecture
operator|.
name|setNote
argument_list|(
name|getClazz
argument_list|()
operator|.
name|getNotes
argument_list|()
argument_list|)
expr_stmt|;
name|iPlacement
operator|=
operator|(
name|Placement
operator|)
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
expr_stmt|;
name|iPlacement
operator|.
name|setVariable
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
name|iPlacement
operator|.
name|setAssignmentId
argument_list|(
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|lecture
operator|.
name|setBestAssignment
argument_list|(
name|iPlacement
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|getSolution
argument_list|()
operator|!=
literal|null
operator|&&
name|getSolution
argument_list|()
operator|.
name|isCommited
argument_list|()
operator|!=
literal|null
condition|)
name|lecture
operator|.
name|setCommitted
argument_list|(
name|getSolution
argument_list|()
operator|.
name|isCommited
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|iPlacement
operator|.
name|setAssignment
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|iPlacement
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClassName
argument_list|()
operator|+
literal|" "
operator|+
name|getPlacement
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|public
name|DatePattern
name|getDatePattern
parameter_list|()
block|{
name|DatePattern
name|dp
init|=
name|super
operator|.
name|getDatePattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|dp
operator|!=
literal|null
operator|&&
operator|!
name|Hibernate
operator|.
name|isInitialized
argument_list|(
name|dp
operator|.
name|getSession
argument_list|()
argument_list|)
condition|)
return|return
operator|(
name|DatePattern
operator|)
name|AssignmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|merge
argument_list|(
name|dp
argument_list|)
return|;
if|if
condition|(
name|dp
operator|==
literal|null
operator|&&
name|getClazz
argument_list|()
operator|!=
literal|null
condition|)
name|dp
operator|=
name|getClazz
argument_list|()
operator|.
name|effectiveDatePattern
argument_list|()
expr_stmt|;
return|return
name|dp
return|;
block|}
specifier|public
name|String
name|getClassName
parameter_list|()
block|{
if|if
condition|(
name|super
operator|.
name|getClassName
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|super
operator|.
name|getClassName
argument_list|()
return|;
return|return
name|getClazz
argument_list|()
operator|.
name|getClassLabel
argument_list|(
name|ApplicationProperty
operator|.
name|SolverShowClassSufix
operator|.
name|isTrue
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getClassName
parameter_list|(
name|boolean
name|showSuffix
parameter_list|)
block|{
return|return
name|getClazz
argument_list|()
operator|.
name|getClassLabel
argument_list|(
name|showSuffix
argument_list|)
return|;
block|}
specifier|public
name|Set
argument_list|<
name|Location
argument_list|>
name|getRooms
parameter_list|()
block|{
try|try
block|{
return|return
name|super
operator|.
name|getRooms
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LazyInitializationException
name|e
parameter_list|)
block|{
operator|(
operator|new
name|AssignmentDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|merge
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getRooms
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
name|double
name|getDistance
parameter_list|(
name|Assignment
name|a1
parameter_list|,
name|Assignment
name|a2
parameter_list|)
block|{
name|double
name|dist
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|Iterator
name|i1
init|=
name|a1
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|r1
init|=
operator|(
name|Location
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|a2
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|r2
init|=
operator|(
name|Location
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|dist
operator|=
name|Math
operator|.
name|max
argument_list|(
name|dist
argument_list|,
name|r1
operator|.
name|getDistance
argument_list|(
name|r2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dist
return|;
block|}
specifier|public
name|boolean
name|isInConflict
parameter_list|(
name|Assignment
name|other
parameter_list|)
block|{
return|return
name|isInConflict
argument_list|(
name|this
argument_list|,
name|other
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isInConflict
parameter_list|(
name|Assignment
name|a1
parameter_list|,
name|Assignment
name|a2
parameter_list|,
name|boolean
name|useDistances
parameter_list|)
block|{
if|if
condition|(
name|a1
operator|==
literal|null
operator|||
name|a2
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|TimeLocation
name|t1
init|=
name|a1
operator|.
name|getTimeLocation
argument_list|()
decl_stmt|,
name|t2
init|=
name|a2
operator|.
name|getTimeLocation
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|t1
operator|.
name|shareDays
argument_list|(
name|t2
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|t1
operator|.
name|shareWeeks
argument_list|(
name|t2
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|t1
operator|.
name|shareHours
argument_list|(
name|t2
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
name|useDistances
condition|)
return|return
literal|false
return|;
name|int
name|s1
init|=
name|t1
operator|.
name|getStartSlot
argument_list|()
decl_stmt|,
name|s2
init|=
name|t2
operator|.
name|getStartSlot
argument_list|()
decl_stmt|;
if|if
condition|(
name|s1
operator|+
name|t1
operator|.
name|getNrSlotsPerMeeting
argument_list|()
operator|!=
name|s2
operator|&&
name|s2
operator|+
name|t2
operator|.
name|getNrSlotsPerMeeting
argument_list|()
operator|!=
name|s1
condition|)
return|return
literal|false
return|;
name|double
name|distance
init|=
name|getDistance
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|)
decl_stmt|;
if|if
condition|(
name|distance
operator|<=
name|a1
operator|.
name|getSolution
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyDouble
argument_list|(
literal|"Student.DistanceLimit"
argument_list|,
literal|67.0
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|distance
operator|<=
name|a1
operator|.
name|getSolution
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyDouble
argument_list|(
literal|"Student.DistanceLimit75min"
argument_list|,
literal|100.0
argument_list|)
operator|&&
operator|(
operator|(
name|t1
operator|.
name|getLength
argument_list|()
operator|==
literal|18
operator|&&
name|s1
operator|+
name|t1
operator|.
name|getLength
argument_list|()
operator|==
name|s2
operator|)
operator|||
operator|(
name|t2
operator|.
name|getLength
argument_list|()
operator|==
literal|18
operator|&&
name|s2
operator|+
name|t2
operator|.
name|getLength
argument_list|()
operator|==
name|s1
operator|)
operator|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|getMinutesPerMeeting
parameter_list|()
block|{
name|TimePattern
name|pattern
init|=
name|getTimePattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|pattern
operator|.
name|getType
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|TimePattern
operator|.
name|sTypeExactTime
condition|)
block|{
name|DurationModel
name|dm
init|=
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getDurationModel
argument_list|()
decl_stmt|;
return|return
name|dm
operator|.
name|getExactTimeMinutesPerMeeting
argument_list|(
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|,
name|getDatePattern
argument_list|()
argument_list|,
name|getDays
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|pattern
operator|.
name|getMinPerMtg
argument_list|()
return|;
block|}
block|}
specifier|public
name|ClassEvent
name|generateCommittedEvent
parameter_list|(
name|ClassEvent
name|event
parameter_list|,
name|boolean
name|createNoRoomMeetings
parameter_list|)
block|{
name|Class_
name|clazz
init|=
name|getClazz
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
name|event
operator|=
operator|new
name|ClassEvent
argument_list|()
expr_stmt|;
name|event
operator|.
name|setClazz
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
if|if
condition|(
name|getClazz
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getStatusType
argument_list|()
operator|.
name|isTestSession
argument_list|()
condition|)
return|return
literal|null
return|;
block|}
name|event
operator|.
name|setEventName
argument_list|(
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setMinCapacity
argument_list|(
name|clazz
operator|.
name|getClassLimit
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|event
operator|.
name|setMaxCapacity
argument_list|(
name|clazz
operator|.
name|getClassLimit
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|changePast
init|=
name|ApplicationProperty
operator|.
name|ClassAssignmentChangePastMeetings
operator|.
name|isTrue
argument_list|()
decl_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Date
name|today
init|=
name|cal
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getMeetings
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|changePast
condition|)
block|{
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Meeting
argument_list|>
name|i
init|=
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
if|if
condition|(
operator|!
name|i
operator|.
name|next
argument_list|()
operator|.
name|getMeetingDate
argument_list|()
operator|.
name|before
argument_list|(
name|today
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|event
operator|.
name|setMeetings
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DurationModel
name|dm
init|=
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getDurationModel
argument_list|()
decl_stmt|;
name|TimeLocation
name|time
init|=
name|getTimeLocation
argument_list|()
decl_stmt|;
for|for
control|(
name|Date
name|meetingDate
range|:
name|dm
operator|.
name|getDates
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|,
name|getDatePattern
argument_list|()
argument_list|,
name|time
operator|.
name|getDayCode
argument_list|()
argument_list|,
name|getMinutesPerMeeting
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|changePast
operator|||
operator|!
name|meetingDate
operator|.
name|before
argument_list|(
name|today
argument_list|)
condition|)
block|{
name|boolean
name|created
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|location
operator|.
name|getPermanentId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Meeting
name|m
init|=
operator|new
name|Meeting
argument_list|()
decl_stmt|;
name|m
operator|.
name|setMeetingDate
argument_list|(
name|meetingDate
argument_list|)
expr_stmt|;
name|m
operator|.
name|setStartPeriod
argument_list|(
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setStartOffset
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|m
operator|.
name|setStopPeriod
argument_list|(
name|time
operator|.
name|getStartSlot
argument_list|()
operator|+
name|time
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setStopOffset
argument_list|(
operator|-
name|time
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setClassCanOverride
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m
operator|.
name|setLocationPermanentId
argument_list|(
name|location
operator|.
name|getPermanentId
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setStatus
argument_list|(
name|Meeting
operator|.
name|Status
operator|.
name|APPROVED
argument_list|)
expr_stmt|;
name|m
operator|.
name|setApprovalDate
argument_list|(
name|getSolution
argument_list|()
operator|.
name|getCommitDate
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|created
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|created
operator|&&
name|createNoRoomMeetings
condition|)
block|{
name|Meeting
name|m
init|=
operator|new
name|Meeting
argument_list|()
decl_stmt|;
name|m
operator|.
name|setMeetingDate
argument_list|(
name|meetingDate
argument_list|)
expr_stmt|;
name|m
operator|.
name|setStartPeriod
argument_list|(
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setStartOffset
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|m
operator|.
name|setStopPeriod
argument_list|(
name|time
operator|.
name|getStartSlot
argument_list|()
operator|+
name|time
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setStopOffset
argument_list|(
operator|-
name|time
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setClassCanOverride
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m
operator|.
name|setLocationPermanentId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|m
operator|.
name|setStatus
argument_list|(
name|Meeting
operator|.
name|Status
operator|.
name|APPROVED
argument_list|)
expr_stmt|;
name|m
operator|.
name|setApprovalDate
argument_list|(
name|getSolution
argument_list|()
operator|.
name|getCommitDate
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*         DatePattern dp = getDatePattern();         cal.setTime(dp.getStartDate()); cal.setLenient(true);         TimeLocation time = getTimeLocation();          EventDateMapping.Class2EventDateMap class2eventDates = EventDateMapping.getMapping(clazz.getSessionId());         for (int idx=0;idx<dp.getPattern().length();idx++) {             if (dp.getPattern().charAt(idx)=='1') {                 boolean offered = false;                 switch (cal.get(Calendar.DAY_OF_WEEK)) {                     case Calendar.MONDAY : offered = ((time.getDayCode()& Constants.DAY_CODES[Constants.DAY_MON]) != 0); break;                     case Calendar.TUESDAY : offered = ((time.getDayCode()& Constants.DAY_CODES[Constants.DAY_TUE]) != 0); break;                     case Calendar.WEDNESDAY : offered = ((time.getDayCode()& Constants.DAY_CODES[Constants.DAY_WED]) != 0); break;                     case Calendar.THURSDAY : offered = ((time.getDayCode()& Constants.DAY_CODES[Constants.DAY_THU]) != 0); break;                     case Calendar.FRIDAY : offered = ((time.getDayCode()& Constants.DAY_CODES[Constants.DAY_FRI]) != 0); break;                     case Calendar.SATURDAY : offered = ((time.getDayCode()& Constants.DAY_CODES[Constants.DAY_SAT]) != 0); break;                     case Calendar.SUNDAY : offered = ((time.getDayCode()& Constants.DAY_CODES[Constants.DAY_SUN]) != 0); break;                 }                 Date meetingDate = class2eventDates.getEventDate(cal.getTime());                 if (offered&& (changePast || !meetingDate.before(today))) {                     boolean created = false;                     for (Iterator i=getRooms().iterator();i.hasNext();) {                         Location location = (Location)i.next();                         if (location.getPermanentId()!=null) {                             Meeting m = new Meeting();                             m.setMeetingDate(meetingDate);                             m.setStartPeriod(time.getStartSlot());                             m.setStartOffset(0);                             m.setStopPeriod(time.getStartSlot()+time.getLength());                             m.setStopOffset(-time.getBreakTime());                             m.setClassCanOverride(false);                             m.setLocationPermanentId(location.getPermanentId());                             m.setStatus(Meeting.Status.APPROVED);                             m.setApprovalDate(getSolution().getCommitDate());                             m.setEvent(event);                             event.getMeetings().add(m);                             created = true;                         }                     }                     if (!created&& createNoRoomMeetings) {                         Meeting m = new Meeting();                         m.setMeetingDate(meetingDate);                         m.setStartPeriod(time.getStartSlot());                         m.setStartOffset(0);                         m.setStopPeriod(time.getStartSlot()+time.getLength());                         m.setStopOffset(-time.getBreakTime());                         m.setClassCanOverride(false);                         m.setLocationPermanentId(null);                         m.setStatus(Meeting.Status.APPROVED);                         m.setApprovalDate(getSolution().getCommitDate());                         m.setEvent(event);                         event.getMeetings().add(m);                     }                 }             }             cal.add(Calendar.DAY_OF_YEAR, 1);         }*/
return|return
name|event
return|;
block|}
specifier|public
name|boolean
name|shareDays
parameter_list|(
name|Assignment
name|another
parameter_list|)
block|{
return|return
operator|(
operator|(
name|getDays
argument_list|()
operator|&
name|another
operator|.
name|getDays
argument_list|()
operator|)
operator|!=
literal|0
operator|)
return|;
block|}
specifier|public
name|boolean
name|shareHours
parameter_list|(
name|Assignment
name|another
parameter_list|)
block|{
return|return
operator|(
name|getStartSlot
argument_list|()
operator|+
name|getSlotPerMtg
argument_list|()
operator|>
name|another
operator|.
name|getStartSlot
argument_list|()
operator|)
operator|&&
operator|(
name|another
operator|.
name|getStartSlot
argument_list|()
operator|+
name|another
operator|.
name|getSlotPerMtg
argument_list|()
operator|>
name|getStartSlot
argument_list|()
operator|)
return|;
block|}
specifier|public
name|boolean
name|shareWeeks
parameter_list|(
name|Assignment
name|another
parameter_list|)
block|{
return|return
name|getDatePattern
argument_list|()
operator|==
literal|null
operator|||
name|another
operator|.
name|getDatePattern
argument_list|()
operator|==
literal|null
operator|||
name|getDatePattern
argument_list|()
operator|.
name|getPatternBitSet
argument_list|()
operator|.
name|intersects
argument_list|(
name|another
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getPatternBitSet
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|overlaps
parameter_list|(
name|Assignment
name|another
parameter_list|)
block|{
return|return
name|shareDays
argument_list|(
name|another
argument_list|)
operator|&&
name|shareHours
argument_list|(
name|another
argument_list|)
operator|&&
name|shareWeeks
argument_list|(
name|another
argument_list|)
return|;
block|}
block|}
end_class

end_unit

