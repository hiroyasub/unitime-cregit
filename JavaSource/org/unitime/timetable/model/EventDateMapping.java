begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2010 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseEventDateMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|EventDateMappingDAO
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|EventDateMapping
extends|extends
name|BaseEventDateMapping
implements|implements
name|Comparable
argument_list|<
name|EventDateMapping
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|EventDateMapping
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Date
name|getClassDate
parameter_list|()
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|getSession
argument_list|()
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|getClassDateOffset
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|c
operator|.
name|getTime
argument_list|()
return|;
block|}
specifier|public
name|void
name|setClassDate
parameter_list|(
name|Date
name|classDate
parameter_list|)
block|{
name|long
name|diff
init|=
name|classDate
operator|.
name|getTime
argument_list|()
operator|-
name|getSession
argument_list|()
operator|.
name|getSessionBeginDateTime
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|setClassDateOffset
argument_list|(
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|diff
operator|/
operator|(
literal|1000.0
operator|*
literal|60
operator|*
literal|60
operator|*
literal|24
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Date
name|getEventDate
parameter_list|()
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|getSession
argument_list|()
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|getEventDateOffset
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|c
operator|.
name|getTime
argument_list|()
return|;
block|}
specifier|public
name|void
name|setEventDate
parameter_list|(
name|Date
name|eventDate
parameter_list|)
block|{
name|long
name|diff
init|=
name|eventDate
operator|.
name|getTime
argument_list|()
operator|-
name|getSession
argument_list|()
operator|.
name|getSessionBeginDateTime
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|setEventDateOffset
argument_list|(
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|diff
operator|/
operator|(
literal|1000.0
operator|*
literal|60
operator|*
literal|60
operator|*
literal|24
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|EventDateMapping
argument_list|>
name|findAll
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
return|return
operator|(
name|List
argument_list|<
name|EventDateMapping
argument_list|>
operator|)
name|EventDateMappingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from EventDateMapping where session.uniqueId = :sessionId order by classDateOffset"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|boolean
name|hasMapping
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|EventDateMappingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(m) from EventDateMapping m where m.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
operator|>
literal|0
return|;
block|}
specifier|public
specifier|static
name|Class2EventDateMap
name|getMapping
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
return|return
name|sessionId
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|Class2EventDateMap
argument_list|(
name|findAll
argument_list|(
name|sessionId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|EventDateMapping
name|m
parameter_list|)
block|{
name|int
name|cmp
init|=
name|getClassDateOffset
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m
operator|.
name|getClassDateOffset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
else|:
name|getUniqueId
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|m
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|m
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|Class2EventDateMap
block|{
specifier|private
name|SimpleDateFormat
name|iDateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyMMdd"
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Date
argument_list|>
name|iClass2EventDates
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Date
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Date
argument_list|>
name|iEvent2ClassDates
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Date
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|Class2EventDateMap
parameter_list|()
block|{
block|}
specifier|public
name|Class2EventDateMap
parameter_list|(
name|List
argument_list|<
name|EventDateMapping
argument_list|>
name|mappings
parameter_list|)
block|{
for|for
control|(
name|EventDateMapping
name|mapping
range|:
name|mappings
control|)
name|addMapping
argument_list|(
name|mapping
operator|.
name|getClassDate
argument_list|()
argument_list|,
name|mapping
operator|.
name|getEventDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addMapping
parameter_list|(
name|Date
name|classDate
parameter_list|,
name|Date
name|eventDate
parameter_list|)
block|{
name|iClass2EventDates
operator|.
name|put
argument_list|(
name|iDateFormat
operator|.
name|format
argument_list|(
name|classDate
argument_list|)
argument_list|,
name|eventDate
argument_list|)
expr_stmt|;
name|iEvent2ClassDates
operator|.
name|put
argument_list|(
name|iDateFormat
operator|.
name|format
argument_list|(
name|eventDate
argument_list|)
argument_list|,
name|classDate
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasEventDate
parameter_list|(
name|Date
name|eventDate
parameter_list|)
block|{
return|return
operator|(
name|eventDate
operator|==
literal|null
condition|?
literal|false
else|:
name|iEvent2ClassDates
operator|.
name|containsKey
argument_list|(
name|iDateFormat
operator|.
name|format
argument_list|(
name|eventDate
argument_list|)
argument_list|)
operator|)
return|;
block|}
specifier|public
name|Date
name|getClassDate
parameter_list|(
name|Date
name|eventDate
parameter_list|)
block|{
name|Date
name|classDate
init|=
operator|(
name|eventDate
operator|==
literal|null
condition|?
literal|null
else|:
name|iEvent2ClassDates
operator|.
name|get
argument_list|(
name|iDateFormat
operator|.
name|format
argument_list|(
name|eventDate
argument_list|)
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|classDate
operator|==
literal|null
operator|&&
name|hasClassDate
argument_list|(
name|eventDate
argument_list|)
condition|)
return|return
literal|null
return|;
return|return
operator|(
name|classDate
operator|==
literal|null
condition|?
name|eventDate
else|:
name|classDate
operator|)
return|;
block|}
specifier|public
name|boolean
name|hasClassDate
parameter_list|(
name|Date
name|classDate
parameter_list|)
block|{
return|return
operator|(
name|classDate
operator|==
literal|null
condition|?
literal|false
else|:
name|iClass2EventDates
operator|.
name|containsKey
argument_list|(
name|iDateFormat
operator|.
name|format
argument_list|(
name|classDate
argument_list|)
argument_list|)
operator|)
return|;
block|}
specifier|public
name|Date
name|getEventDate
parameter_list|(
name|Date
name|classDate
parameter_list|)
block|{
name|Date
name|eventDate
init|=
operator|(
name|classDate
operator|==
literal|null
condition|?
literal|null
else|:
name|iClass2EventDates
operator|.
name|get
argument_list|(
name|iDateFormat
operator|.
name|format
argument_list|(
name|classDate
argument_list|)
argument_list|)
operator|)
decl_stmt|;
return|return
operator|(
name|eventDate
operator|==
literal|null
condition|?
name|classDate
else|:
name|eventDate
operator|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|ToolBox
operator|.
name|dict2string
argument_list|(
name|iClass2EventDates
argument_list|,
literal|2
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

