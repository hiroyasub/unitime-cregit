begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseNonUniversityLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|LocationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|NonUniversityLocationDAO
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller, Stephanie Schluttenhofer  */
end_comment

begin_class
specifier|public
class|class
name|NonUniversityLocation
extends|extends
name|BaseNonUniversityLocation
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|NonUniversityLocation
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|NonUniversityLocation
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|getName
argument_list|()
operator|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|NonUniversityLocation
name|l
init|=
operator|new
name|NonUniversityLocation
argument_list|()
decl_stmt|;
name|l
operator|.
name|setCapacity
argument_list|(
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|setCoordinateX
argument_list|(
name|getCoordinateX
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|setCoordinateY
argument_list|(
name|getCoordinateY
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|setArea
argument_list|(
name|getArea
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|setDisplayName
argument_list|(
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|setName
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|setIgnoreRoomCheck
argument_list|(
name|isIgnoreRoomCheck
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|setIgnoreTooFar
argument_list|(
name|isIgnoreTooFar
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|setPattern
argument_list|(
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|setSession
argument_list|(
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|setPermanentId
argument_list|(
name|getPermanentId
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|setExamCapacity
argument_list|(
name|getExamCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|setExamTypes
argument_list|(
operator|new
name|HashSet
argument_list|<
name|ExamType
argument_list|>
argument_list|(
name|getExamTypes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|l
operator|.
name|setRoomType
argument_list|(
name|getRoomType
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|setEventStatus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|l
operator|.
name|setBreakTime
argument_list|(
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|setNote
argument_list|(
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|setEventAvailability
argument_list|(
name|getEventAvailability
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|setExternalUniqueId
argument_list|(
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|setShareNote
argument_list|(
name|getShareNote
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|l
return|;
block|}
specifier|public
name|NonUniversityLocation
name|findSameNonUniversityLocationInSession
parameter_list|(
name|Session
name|newSession
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|newSession
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
name|NonUniversityLocation
name|newNonUniversityLocation
init|=
literal|null
decl_stmt|;
name|NonUniversityLocationDAO
name|nulDao
init|=
operator|new
name|NonUniversityLocationDAO
argument_list|()
decl_stmt|;
name|String
name|query
init|=
literal|"from NonUniversityLocation nul inner join RoomDept rd where nul.permanentId = '"
operator|+
name|getPermanentId
argument_list|()
operator|+
literal|"'"
decl_stmt|;
name|query
operator|+=
literal|" and nul.session.uniqueId = "
operator|+
name|newSession
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|query
operator|+=
literal|" and rd.control = "
operator|+
literal|1
expr_stmt|;
name|query
operator|+=
literal|" and rd.department.uniqueId ="
operator|+
name|getControllingDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|newNonUniversityLocation
operator|=
operator|(
name|NonUniversityLocation
operator|)
name|nulDao
operator|.
name|getQuery
argument_list|(
name|query
argument_list|)
operator|.
name|uniqueResult
argument_list|()
expr_stmt|;
return|return
operator|(
name|newNonUniversityLocation
operator|)
return|;
block|}
specifier|public
name|String
name|getRoomTypeLabel
parameter_list|()
block|{
return|return
name|getRoomType
argument_list|()
operator|.
name|getLabel
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Location
argument_list|>
name|getFutureLocations
parameter_list|()
block|{
name|List
argument_list|<
name|Location
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|Location
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|futureSessionIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|blackListedSessionIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Location
name|location
range|:
operator|(
name|List
argument_list|<
name|Location
argument_list|>
operator|)
name|LocationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select f from NonUniversityLocation l, NonUniversityLocation f where "
operator|+
literal|"l.uniqueId = :uniqueId and "
operator|+
literal|"l.session.academicInitiative = f.session.academicInitiative and l.session.sessionBeginDateTime< f.session.sessionBeginDateTime and "
operator|+
literal|"((l.permanentId = f.permanentId) or "
operator|+
comment|// match on permanent ids
literal|"(not exists (from Location x where x.permanentId = f.permanentId and x.session = l.session) and "
operator|+
comment|// no match on permanent id exist
literal|"l.roomType = f.roomType and "
operator|+
comment|// room type match
literal|"((length(f.externalUniqueId)> 0 and l.externalUniqueId = f.externalUniqueId) or "
operator|+
comment|// external id match
literal|"((f.externalUniqueId is null or length(f.externalUniqueId) = 0) and (l.externalUniqueId is null or length(l.externalUniqueId) = 0) and "
operator|+
comment|// no external id match
literal|"f.name = l.name and f.capacity = l.capacity)))) "
operator|+
comment|// name& capacity match
literal|"order by f.session.sessionBeginDateTime"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"uniqueId"
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|futureSessionIds
operator|.
name|add
argument_list|(
name|location
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
else|else
name|blackListedSessionIds
operator|.
name|add
argument_list|(
name|location
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|blackListedSessionIds
operator|.
name|isEmpty
argument_list|()
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|Location
argument_list|>
name|i
init|=
name|ret
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|location
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|blackListedSessionIds
operator|.
name|contains
argument_list|(
name|location
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

