begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|HibernateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|BuildingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TimetableManagerDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
operator|.
name|ReloadOfferingAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|ReferenceList
import|;
end_import

begin_comment
comment|/**  * @hibernate.class table="SESSIONS" schema = "TIMETABLE"  */
end_comment

begin_class
specifier|public
class|class
name|Session
extends|extends
name|BaseSession
implements|implements
name|Comparable
block|{
specifier|public
specifier|static
name|int
name|sHolidayTypeNone
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|sHolidayTypeHoliday
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
name|int
name|sHolidayTypeBreak
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
name|String
index|[]
name|sHolidayTypeNames
init|=
operator|new
name|String
index|[]
block|{
literal|"No Holiday"
block|,
literal|"Holiday"
block|,
literal|"(Spring/October/Thanksgiving) Break"
block|}
decl_stmt|;
specifier|public
specifier|static
name|String
index|[]
name|sHolidayTypeColors
init|=
operator|new
name|String
index|[]
block|{
literal|"rgb(240,240,240)"
block|,
literal|"rgb(200,30,20)"
block|,
literal|"rgb(240,50,240)"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|3691040980400813366L
decl_stmt|;
comment|/* 	 * @return all sessions 	 */
specifier|public
specifier|static
name|TreeSet
name|getAllSessions
parameter_list|()
throws|throws
name|HibernateException
block|{
return|return
operator|new
name|TreeSet
argument_list|(
operator|(
operator|new
name|SessionDAO
argument_list|()
operator|)
operator|.
name|findAll
argument_list|()
argument_list|)
return|;
block|}
comment|/** 	 * @param id 	 * @return 	 * @throws HibernateException 	 */
specifier|public
specifier|static
name|Session
name|getSessionById
parameter_list|(
name|Long
name|id
parameter_list|)
throws|throws
name|HibernateException
block|{
return|return
operator|(
operator|new
name|SessionDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|/** 	 * @param id 	 * @throws HibernateException 	 */
specifier|public
specifier|static
name|void
name|deleteSessionById
parameter_list|(
name|Long
name|id
parameter_list|)
throws|throws
name|HibernateException
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|new
name|SessionDAO
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from Location where session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|id
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|loc
init|=
operator|(
name|Location
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|loc
operator|.
name|getFeatures
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|loc
operator|.
name|getRoomGroups
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|loc
argument_list|)
expr_stmt|;
block|}
comment|/*             for (Iterator i=hibSession.createQuery("from Exam where session.uniqueId=:sessionId").setLong("sessionId", id).iterate();i.hasNext();) {                 Exam x = (Exam)i.next();                 for (Iterator j=x.getConflicts().iterator();j.hasNext();) {                     ExamConflict conf = (ExamConflict)j.next();                     hibSession.delete(conf);                     j.remove();                 }                 hibSession.update(x);             }             */
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"delete InstructionalOffering o where o.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|id
argument_list|)
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"delete Department d where d.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|id
argument_list|)
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"delete DistributionPref d where d.owner in (select s from Session s where s.uniqueId=:sessionId)"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|id
argument_list|)
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"delete Session s where s.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|id
argument_list|)
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"delete Preference where owner not in (from PreferenceGroup)"
argument_list|)
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"delete ExamConflict x where x.exams is empty"
argument_list|)
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HibernateException
name|e
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
block|}
throw|throw
name|e
throw|;
block|}
name|HibernateUtil
operator|.
name|clearCache
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|saveOrUpdate
parameter_list|()
throws|throws
name|HibernateException
block|{
operator|(
operator|new
name|SessionDAO
argument_list|()
operator|)
operator|.
name|saveOrUpdate
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getAcademicYearTerm
parameter_list|()
block|{
return|return
operator|(
name|getAcademicYear
argument_list|()
operator|+
name|getAcademicTerm
argument_list|()
operator|)
return|;
block|}
specifier|public
name|boolean
name|isDefault
parameter_list|()
throws|throws
name|HibernateException
block|{
name|Session
name|defSessn
init|=
name|Session
operator|.
name|defaultSession
argument_list|()
decl_stmt|;
return|return
operator|(
operator|(
name|defSessn
operator|==
literal|null
operator|)
condition|?
literal|false
else|:
name|this
operator|.
name|getSessionId
argument_list|()
operator|.
name|equals
argument_list|(
name|defSessn
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|public
name|boolean
name|getIsDefault
parameter_list|()
throws|throws
name|HibernateException
block|{
return|return
name|isDefault
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Session
name|defaultSession
parameter_list|()
throws|throws
name|HibernateException
block|{
return|return
name|defaultSession
argument_list|(
name|getAllSessions
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Set
name|availableSessions
parameter_list|(
name|ManagerRole
name|role
parameter_list|)
block|{
if|if
condition|(
name|role
operator|==
literal|null
operator|||
name|role
operator|.
name|getRole
argument_list|()
operator|==
literal|null
condition|)
return|return
name|getAllSessions
argument_list|()
return|;
if|if
condition|(
name|Roles
operator|.
name|ADMIN_ROLE
operator|.
name|equals
argument_list|(
name|role
operator|.
name|getRole
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
return|return
name|getAllSessions
argument_list|()
return|;
name|Set
name|sessions
init|=
name|role
operator|.
name|getTimetableManager
argument_list|()
operator|.
name|sessionsCanManage
argument_list|()
decl_stmt|;
if|if
condition|(
name|Roles
operator|.
name|VIEW_ALL_ROLE
operator|.
name|equals
argument_list|(
name|role
operator|.
name|getRole
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
operator|&&
name|sessions
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|getAllSessions
argument_list|()
return|;
if|if
condition|(
name|Roles
operator|.
name|EXAM_MGR_ROLE
operator|.
name|equals
argument_list|(
name|role
operator|.
name|getRole
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
operator|&&
name|sessions
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|getAllSessions
argument_list|()
return|;
return|return
name|sessions
return|;
block|}
specifier|public
specifier|static
name|Session
name|defaultSession
parameter_list|(
name|ManagerRole
name|role
parameter_list|)
throws|throws
name|HibernateException
block|{
return|return
name|defaultSession
argument_list|(
name|availableSessions
argument_list|(
name|role
argument_list|)
argument_list|,
name|role
operator|.
name|getRole
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Session
name|defaultSession
parameter_list|(
name|Set
name|sessions
parameter_list|,
name|Roles
name|role
parameter_list|)
throws|throws
name|HibernateException
block|{
if|if
condition|(
name|sessions
operator|==
literal|null
operator|||
name|sessions
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
comment|// no session -> no default
name|TreeSet
name|orderedSession
init|=
operator|(
name|sessions
operator|instanceof
name|TreeSet
condition|?
operator|(
name|TreeSet
operator|)
name|sessions
else|:
operator|new
name|TreeSet
argument_list|(
name|sessions
argument_list|)
operator|)
decl_stmt|;
comment|//try to pick among active sessions first (check that all active sessions are of the same initiative)
name|String
name|initiative
init|=
literal|null
decl_stmt|;
name|Session
name|lastActive
init|=
literal|null
decl_stmt|;
name|Session
name|currentActive
init|=
literal|null
decl_stmt|;
name|Session
name|firstFutureSession
init|=
literal|null
decl_stmt|;
name|long
name|now
init|=
operator|(
operator|new
name|Date
argument_list|()
operator|)
operator|.
name|getTime
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|sessions
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Session
name|session
init|=
operator|(
name|Session
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|session
operator|.
name|getStatusType
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|initiative
operator|==
literal|null
condition|)
name|initiative
operator|=
name|session
operator|.
name|getAcademicInitiative
argument_list|()
expr_stmt|;
if|else if
condition|(
operator|!
name|initiative
operator|.
name|equals
argument_list|(
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|)
condition|)
return|return
literal|null
return|;
comment|// multiple initiatives -> no default
if|if
condition|(
name|currentActive
operator|==
literal|null
operator|&&
name|session
operator|.
name|getSessionBeginDateTime
argument_list|()
operator|.
name|getTime
argument_list|()
operator|<
name|now
operator|&&
name|session
operator|.
name|getSessionEndDateTime
argument_list|()
operator|.
name|getTime
argument_list|()
operator|>
name|now
condition|)
block|{
name|currentActive
operator|=
name|session
expr_stmt|;
block|}
if|if
condition|(
name|currentActive
operator|!=
literal|null
operator|&&
name|firstFutureSession
operator|==
literal|null
operator|&&
name|currentActive
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
operator|!=
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
condition|)
block|{
name|firstFutureSession
operator|=
name|session
expr_stmt|;
block|}
if|if
condition|(
name|currentActive
operator|==
literal|null
operator|&&
name|firstFutureSession
operator|==
literal|null
operator|&&
name|now
operator|<
name|session
operator|.
name|getSessionBeginDateTime
argument_list|()
operator|.
name|getTime
argument_list|()
condition|)
block|{
name|firstFutureSession
operator|=
name|session
expr_stmt|;
block|}
name|lastActive
operator|=
name|session
expr_stmt|;
block|}
if|if
condition|(
name|role
operator|==
literal|null
operator|||
name|Roles
operator|.
name|EVENT_MGR_ROLE
operator|.
name|equals
argument_list|(
name|role
operator|.
name|getReference
argument_list|()
argument_list|)
operator|||
name|Roles
operator|.
name|VIEW_ALL_ROLE
operator|.
name|equals
argument_list|(
name|role
operator|.
name|getReference
argument_list|()
argument_list|)
operator|||
name|Roles
operator|.
name|ADMIN_ROLE
operator|.
name|equals
argument_list|(
name|role
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|currentActive
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|currentActive
operator|)
return|;
block|}
if|if
condition|(
name|firstFutureSession
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|firstFutureSession
operator|)
return|;
block|}
block|}
if|if
condition|(
name|role
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|Roles
operator|.
name|DEPT_SCHED_MGR_ROLE
operator|.
name|equals
argument_list|(
name|role
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|firstFutureSession
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|firstFutureSession
operator|)
return|;
block|}
if|if
condition|(
name|currentActive
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|currentActive
operator|)
return|;
block|}
block|}
if|if
condition|(
name|Roles
operator|.
name|EXAM_MGR_ROLE
operator|.
name|equals
argument_list|(
name|role
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|currentActive
operator|!=
literal|null
operator|&&
operator|!
name|currentActive
operator|.
name|getStatusType
argument_list|()
operator|.
name|canNoRoleReportExamFinal
argument_list|()
condition|)
block|{
return|return
operator|(
name|currentActive
operator|)
return|;
block|}
if|if
condition|(
name|firstFutureSession
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|firstFutureSession
operator|)
return|;
block|}
block|}
block|}
if|if
condition|(
name|lastActive
operator|!=
literal|null
condition|)
return|return
name|lastActive
return|;
comment|//return the last (most recent) active session
comment|//pick among all sessions (check that all sessions are of the same initiative)
for|for
control|(
name|Iterator
name|it
init|=
name|sessions
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Session
name|session
init|=
operator|(
name|Session
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|initiative
operator|==
literal|null
condition|)
name|initiative
operator|=
name|session
operator|.
name|getAcademicInitiative
argument_list|()
expr_stmt|;
if|else if
condition|(
operator|!
name|initiative
operator|.
name|equals
argument_list|(
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|)
condition|)
return|return
literal|null
return|;
comment|// multiple initiatives -> no default
block|}
return|return
operator|(
name|Session
operator|)
name|orderedSession
operator|.
name|last
argument_list|()
return|;
comment|// return the last one, i.e., the most recent one
block|}
comment|/** 	 * Gets the current user session 	 *  	 * @param user 	 *            User object 	 * @return Session object of found, throws Exception otherwise 	 * @throws HibernateException 	 */
specifier|public
specifier|static
name|Session
name|getCurrentAcadSession
parameter_list|(
name|User
name|user
parameter_list|)
block|{
name|Object
name|sessionId
init|=
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_ID_ATTR_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
operator|||
name|sessionId
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
else|else
return|return
name|Session
operator|.
name|getSessionById
argument_list|(
operator|new
name|Long
argument_list|(
name|sessionId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/** 	 * @return Returns the term. 	 */
specifier|public
name|String
name|getTermLabel
parameter_list|()
block|{
return|return
name|this
operator|.
name|getAcademicTerm
argument_list|()
return|;
block|}
comment|/** 	 * @return Returns the label. 	 */
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
name|getAcademicTerm
argument_list|()
operator|+
literal|" "
operator|+
name|getSessionStartYear
argument_list|()
operator|+
literal|" ("
operator|+
operator|(
name|getAcademicInitiative
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|9
condition|?
name|getAcademicInitiative
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|9
argument_list|)
else|:
name|getAcademicInitiative
argument_list|()
operator|)
operator|+
literal|")"
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|getLabel
argument_list|()
return|;
block|}
comment|/** 	 * @return Returns the year the session begins. 	 */
specifier|public
name|int
name|getSessionStartYear
parameter_list|()
block|{
if|if
condition|(
name|getSessionBeginDateTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
return|;
block|}
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|this
operator|.
name|getAcademicYear
argument_list|()
argument_list|)
return|;
block|}
comment|/** 	 * @return Returns the year. 	 */
specifier|public
specifier|static
name|int
name|getYear
parameter_list|(
name|String
name|acadYrTerm
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|acadYrTerm
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|)
return|;
block|}
comment|/** 	 * @param bldgUniqueId 	 * @return 	 */
specifier|public
name|Building
name|building
parameter_list|(
name|String
name|bldgUniqueId
parameter_list|)
block|{
comment|// TODO make faster
for|for
control|(
name|Iterator
name|it
init|=
name|this
operator|.
name|getBuildings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Building
name|bldg
init|=
operator|(
name|Building
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|bldg
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|bldgUniqueId
argument_list|)
condition|)
block|{
return|return
name|bldg
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|academicInitiativeDisplayString
parameter_list|()
block|{
return|return
name|this
operator|.
name|getAcademicInitiative
argument_list|()
return|;
block|}
specifier|public
name|String
name|statusDisplayString
parameter_list|()
block|{
return|return
name|getStatusType
argument_list|()
operator|.
name|getLabel
argument_list|()
return|;
block|}
comment|/** 	 * @return Returns the sessionStatusMap. 	 */
specifier|public
specifier|static
name|ReferenceList
name|getSessionStatusList
parameter_list|()
block|{
name|ReferenceList
name|ref
init|=
operator|new
name|ReferenceList
argument_list|()
decl_stmt|;
name|ref
operator|.
name|addAll
argument_list|(
name|DepartmentStatusType
operator|.
name|findAllForSession
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ref
return|;
block|}
comment|/** 	 * Fetch rooms efficiently, joining features and roomDepts 	 *  	 * @return 	 */
specifier|public
name|java
operator|.
name|util
operator|.
name|Set
name|getRoomsFast
parameter_list|(
name|String
index|[]
name|depts
parameter_list|)
block|{
if|if
condition|(
name|depts
operator|!=
literal|null
operator|&&
name|depts
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
operator|new
name|TreeSet
argument_list|(
operator|(
operator|new
name|RoomDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select room from Location as room "
operator|+
literal|"left outer join room.roomDepts as roomDept "
operator|+
literal|"where room.session.uniqueId = :sessionId"
operator|+
literal|" and roomDept.department.deptCode  in ( "
operator|+
name|Constants
operator|.
name|arrayToStr
argument_list|(
name|depts
argument_list|,
literal|"'"
argument_list|,
literal|", "
argument_list|)
operator|+
literal|" ) "
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getSessionId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|TreeSet
argument_list|(
operator|(
operator|new
name|RoomDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select room from Location as room where room.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getSessionId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Set
name|getRoomsFast
parameter_list|(
name|User
name|user
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|user
operator|.
name|getRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|ADMIN_ROLE
argument_list|)
condition|)
return|return
name|getRoomsFast
argument_list|(
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
return|;
name|Long
name|sessionId
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
name|String
name|mgrId
init|=
operator|(
name|String
operator|)
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|TMTBL_MGR_ID_ATTR_NAME
argument_list|)
decl_stmt|;
name|TimetableManager
name|manager
init|=
operator|(
operator|new
name|TimetableManagerDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|mgrId
argument_list|)
argument_list|)
decl_stmt|;
name|Set
name|departments
init|=
name|manager
operator|.
name|departmentsForSession
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|departments
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|depts
init|=
operator|new
name|String
index|[
name|departments
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|departments
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|depts
index|[
name|idx
operator|++
index|]
operator|=
operator|(
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getDeptCode
argument_list|()
expr_stmt|;
block|}
return|return
name|getRoomsFast
argument_list|(
name|depts
argument_list|)
return|;
block|}
return|return
operator|new
name|TreeSet
argument_list|()
return|;
block|}
comment|/** 	 *  	 * @param depts 	 * @return 	 */
specifier|public
name|java
operator|.
name|util
operator|.
name|Set
name|getBldgsFast
parameter_list|(
name|String
index|[]
name|depts
parameter_list|)
block|{
if|if
condition|(
name|depts
operator|!=
literal|null
operator|&&
name|depts
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|List
name|rooms
init|=
operator|(
operator|new
name|RoomDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select room from Room as room "
operator|+
literal|"left outer join room.roomDepts as roomDept "
operator|+
literal|"where room.session.uniqueId = :sessionId"
operator|+
literal|" and roomDept.department.deptCode  in ( "
operator|+
name|Constants
operator|.
name|arrayToStr
argument_list|(
name|depts
argument_list|,
literal|"'"
argument_list|,
literal|", "
argument_list|)
operator|+
literal|" ) "
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"sessionId"
argument_list|,
name|this
operator|.
name|getSessionId
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|TreeSet
name|bldgs
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|rooms
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Room
name|room
init|=
operator|(
name|Room
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|bldgs
operator|.
name|add
argument_list|(
name|room
operator|.
name|getBuilding
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|bldgs
return|;
block|}
else|else
block|{
return|return
operator|new
name|TreeSet
argument_list|(
operator|(
operator|new
name|BuildingDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select building from Building as building where building.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"sessionId"
argument_list|,
name|getSessionId
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|Session
name|getSessionUsingInitiativeYearTerm
parameter_list|(
name|String
name|academicInitiative
parameter_list|,
name|String
name|academicYear
parameter_list|,
name|String
name|academicTerm
parameter_list|)
block|{
name|Session
name|s
init|=
literal|null
decl_stmt|;
name|StringBuffer
name|queryString
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|SessionDAO
name|sdao
init|=
operator|new
name|SessionDAO
argument_list|()
decl_stmt|;
name|queryString
operator|.
name|append
argument_list|(
literal|" from Session as s where s.academicInitiative = '"
operator|+
name|academicInitiative
operator|+
literal|"' "
argument_list|)
expr_stmt|;
name|queryString
operator|.
name|append
argument_list|(
literal|" and s.academicYear = '"
operator|+
name|academicYear
operator|+
literal|"' "
argument_list|)
expr_stmt|;
name|queryString
operator|.
name|append
argument_list|(
literal|" and s.academicTerm = '"
operator|+
name|academicTerm
operator|+
literal|"' "
argument_list|)
expr_stmt|;
name|Query
name|q
init|=
name|sdao
operator|.
name|getQuery
argument_list|(
name|queryString
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|.
name|list
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|s
operator|=
operator|(
name|Session
operator|)
name|q
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|s
operator|)
return|;
block|}
specifier|public
name|Session
name|getLastLikeSession
parameter_list|()
block|{
name|String
name|lastYr
init|=
operator|new
name|Integer
argument_list|(
name|this
operator|.
name|getSessionStartYear
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|this
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|,
name|lastYr
argument_list|,
name|getAcademicTerm
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Session
name|getNextLikeSession
parameter_list|()
block|{
name|String
name|nextYr
init|=
operator|new
name|Integer
argument_list|(
name|this
operator|.
name|getSessionStartYear
argument_list|()
operator|+
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|this
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|,
name|nextYr
argument_list|,
name|getAcademicTerm
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|loadInstrAndCrsOffering
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|(
literal|"done"
operator|)
return|;
block|}
specifier|public
name|Long
name|getSessionId
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|getUniqueId
argument_list|()
operator|)
return|;
block|}
specifier|public
name|void
name|setSessionId
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|this
operator|.
name|setUniqueId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * (non-Javadoc) 	 *  	 * @see org.unitime.timetable.model.PreferenceGroup#canUserEdit(org.unitime.commons.User) 	 */
specifier|protected
name|boolean
name|canUserEdit
parameter_list|(
name|User
name|user
parameter_list|)
block|{
return|return
operator|(
literal|false
operator|)
return|;
block|}
specifier|protected
name|boolean
name|canUserView
parameter_list|(
name|User
name|user
parameter_list|)
block|{
return|return
operator|(
literal|false
operator|)
return|;
block|}
specifier|public
name|String
name|htmlLabel
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|getLabel
argument_list|()
operator|)
return|;
block|}
specifier|public
name|Date
name|earliestSessionRelatedDate
parameter_list|()
block|{
return|return
operator|(
name|getEventBeginDate
argument_list|()
operator|!=
literal|null
operator|&&
name|getEventBeginDate
argument_list|()
operator|.
name|before
argument_list|(
name|getSessionBeginDateTime
argument_list|()
argument_list|)
condition|?
name|getEventBeginDate
argument_list|()
else|:
name|getSessionBeginDateTime
argument_list|()
operator|)
return|;
block|}
specifier|public
name|Date
name|latestSessionRelatedDate
parameter_list|()
block|{
return|return
operator|(
name|getEventEndDate
argument_list|()
operator|!=
literal|null
operator|&&
name|getEventEndDate
argument_list|()
operator|.
name|after
argument_list|(
name|getSessionEndDateTime
argument_list|()
argument_list|)
condition|?
name|getEventEndDate
argument_list|()
else|:
name|getSessionEndDateTime
argument_list|()
operator|)
return|;
block|}
specifier|public
name|int
name|getStartMonth
parameter_list|()
block|{
return|return
name|DateUtils
operator|.
name|getStartMonth
argument_list|(
name|earliestSessionRelatedDate
argument_list|()
argument_list|,
name|getSessionStartYear
argument_list|()
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.session.nrExcessDays"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|int
name|getEndMonth
parameter_list|()
block|{
return|return
name|DateUtils
operator|.
name|getEndMonth
argument_list|(
name|latestSessionRelatedDate
argument_list|()
argument_list|,
name|getSessionStartYear
argument_list|()
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.session.nrExcessDays"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|int
name|getPatternStartMonth
parameter_list|()
block|{
return|return
name|getStartMonth
argument_list|()
operator|-
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.pattern.nrExcessMoths"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|int
name|getPatternEndMonth
parameter_list|()
block|{
return|return
name|getEndMonth
argument_list|()
operator|+
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.pattern.nrExcessMoths"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|int
name|getDayOfYear
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|month
parameter_list|)
block|{
return|return
name|DateUtils
operator|.
name|getDayOfYear
argument_list|(
name|day
argument_list|,
name|month
argument_list|,
name|getSessionStartYear
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|getHoliday
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|month
parameter_list|)
block|{
return|return
name|getHoliday
argument_list|(
name|day
argument_list|,
name|month
argument_list|,
name|getSessionStartYear
argument_list|()
argument_list|,
name|getStartMonth
argument_list|()
argument_list|,
name|getHolidays
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|getHoliday
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|month
parameter_list|,
name|int
name|year
parameter_list|,
name|int
name|startMonth
parameter_list|,
name|String
name|holidays
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|holidays
operator|==
literal|null
condition|)
return|return
name|sHolidayTypeNone
return|;
name|int
name|idx
init|=
name|DateUtils
operator|.
name|getDayOfYear
argument_list|(
name|day
argument_list|,
name|month
argument_list|,
name|year
argument_list|)
operator|-
name|DateUtils
operator|.
name|getDayOfYear
argument_list|(
literal|1
argument_list|,
name|startMonth
argument_list|,
name|year
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
operator|||
name|idx
operator|>=
name|holidays
operator|.
name|length
argument_list|()
condition|)
return|return
name|sHolidayTypeNone
return|;
return|return
operator|(
name|int
operator|)
operator|(
name|holidays
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
operator|-
literal|'0'
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|e
parameter_list|)
block|{
return|return
name|sHolidayTypeNone
return|;
block|}
block|}
specifier|public
name|String
name|getHolidaysHtml
parameter_list|()
block|{
return|return
name|getHolidaysHtml
argument_list|(
literal|true
argument_list|)
return|;
block|}
specifier|public
name|String
name|getHolidaysHtml
parameter_list|(
name|boolean
name|editable
parameter_list|)
block|{
return|return
name|getHolidaysHtml
argument_list|(
name|getSessionBeginDateTime
argument_list|()
argument_list|,
name|getSessionEndDateTime
argument_list|()
argument_list|,
name|getClassesEndDateTime
argument_list|()
argument_list|,
name|getExamBeginDate
argument_list|()
argument_list|,
name|getEventBeginDate
argument_list|()
argument_list|,
name|getEventEndDate
argument_list|()
argument_list|,
name|getSessionStartYear
argument_list|()
argument_list|,
name|getHolidays
argument_list|()
argument_list|,
name|editable
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getHolidaysHtml
parameter_list|(
name|Date
name|sessionBeginTime
parameter_list|,
name|Date
name|sessionEndTime
parameter_list|,
name|Date
name|classesEndTime
parameter_list|,
name|Date
name|examBeginTime
parameter_list|,
name|Date
name|eventBeginTime
parameter_list|,
name|Date
name|eventEndTime
parameter_list|,
name|int
name|acadYear
parameter_list|,
name|String
name|holidays
parameter_list|,
name|boolean
name|editable
parameter_list|)
block|{
name|StringBuffer
name|prefTable
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|prefNames
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|prefColors
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sHolidayTypeNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|prefTable
operator|.
name|append
argument_list|(
operator|(
name|i
operator|==
literal|0
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|"'"
operator|+
name|i
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|prefNames
operator|.
name|append
argument_list|(
operator|(
name|i
operator|==
literal|0
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|"'"
operator|+
name|sHolidayTypeNames
index|[
name|i
index|]
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|prefColors
operator|.
name|append
argument_list|(
operator|(
name|i
operator|==
literal|0
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|"'"
operator|+
name|sHolidayTypeColors
index|[
name|i
index|]
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|StringBuffer
name|holidayArray
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|borderArray
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Calendar
name|sessionBeginDate
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|sessionBeginDate
operator|.
name|setTime
argument_list|(
name|sessionBeginTime
argument_list|)
expr_stmt|;
name|Calendar
name|sessionEndDate
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|sessionEndDate
operator|.
name|setTime
argument_list|(
name|sessionEndTime
argument_list|)
expr_stmt|;
name|Calendar
name|classesEndDate
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|classesEndDate
operator|.
name|setTime
argument_list|(
name|classesEndTime
argument_list|)
expr_stmt|;
name|Calendar
name|examBeginDate
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
if|if
condition|(
name|examBeginTime
operator|!=
literal|null
condition|)
name|examBeginDate
operator|.
name|setTime
argument_list|(
name|examBeginTime
argument_list|)
expr_stmt|;
name|Calendar
name|eventBeginDate
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
if|if
condition|(
name|eventBeginTime
operator|!=
literal|null
condition|)
name|eventBeginDate
operator|.
name|setTime
argument_list|(
name|eventBeginTime
argument_list|)
expr_stmt|;
name|Calendar
name|eventEndDate
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
if|if
condition|(
name|eventEndTime
operator|!=
literal|null
condition|)
name|eventEndDate
operator|.
name|setTime
argument_list|(
name|eventEndTime
argument_list|)
expr_stmt|;
name|int
name|startMonth
init|=
name|DateUtils
operator|.
name|getStartMonth
argument_list|(
name|eventBeginTime
operator|!=
literal|null
operator|&&
name|eventBeginTime
operator|.
name|before
argument_list|(
name|sessionBeginTime
argument_list|)
condition|?
name|eventBeginTime
else|:
name|sessionBeginTime
argument_list|,
name|acadYear
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.session.nrExcessDays"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|endMonth
init|=
name|DateUtils
operator|.
name|getEndMonth
argument_list|(
name|eventEndTime
operator|!=
literal|null
operator|&&
name|eventEndTime
operator|.
name|after
argument_list|(
name|sessionEndTime
argument_list|)
condition|?
name|eventEndTime
else|:
name|sessionEndTime
argument_list|,
name|acadYear
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.session.nrExcessDays"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
name|startMonth
init|;
name|m
operator|<=
name|endMonth
condition|;
name|m
operator|++
control|)
block|{
name|int
name|yr
init|=
name|DateUtils
operator|.
name|calculateActualYear
argument_list|(
name|m
argument_list|,
name|acadYear
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
name|startMonth
condition|)
block|{
name|holidayArray
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|borderArray
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|holidayArray
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|borderArray
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|int
name|daysOfMonth
init|=
name|DateUtils
operator|.
name|getNrDaysOfMonth
argument_list|(
name|m
argument_list|,
name|acadYear
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<=
name|daysOfMonth
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
name|d
operator|>
literal|1
condition|)
block|{
name|holidayArray
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|borderArray
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|holidayArray
operator|.
name|append
argument_list|(
literal|"'"
operator|+
name|getHoliday
argument_list|(
name|d
argument_list|,
name|m
argument_list|,
name|acadYear
argument_list|,
name|startMonth
argument_list|,
name|holidays
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|==
name|sessionBeginDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
operator|&&
operator|(
name|m
operator|%
literal|12
operator|)
operator|==
name|sessionBeginDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
operator|&&
name|yr
operator|==
name|sessionBeginDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
condition|)
name|borderArray
operator|.
name|append
argument_list|(
literal|"'#660000 2px solid'"
argument_list|)
expr_stmt|;
if|else if
condition|(
name|d
operator|==
name|sessionEndDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
operator|&&
operator|(
name|m
operator|%
literal|12
operator|)
operator|==
name|sessionEndDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
operator|&&
name|yr
operator|==
name|sessionEndDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
condition|)
name|borderArray
operator|.
name|append
argument_list|(
literal|"'#333399 2px solid'"
argument_list|)
expr_stmt|;
if|else if
condition|(
name|d
operator|==
name|classesEndDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
operator|&&
operator|(
name|m
operator|%
literal|12
operator|)
operator|==
name|classesEndDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
operator|&&
name|yr
operator|==
name|classesEndDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
condition|)
name|borderArray
operator|.
name|append
argument_list|(
literal|"'#339933 2px solid'"
argument_list|)
expr_stmt|;
if|else if
condition|(
name|d
operator|==
name|examBeginDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
operator|&&
operator|(
name|m
operator|%
literal|12
operator|)
operator|==
name|examBeginDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
operator|&&
name|yr
operator|==
name|examBeginDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
condition|)
name|borderArray
operator|.
name|append
argument_list|(
literal|"'#999933 2px solid'"
argument_list|)
expr_stmt|;
if|else if
condition|(
name|d
operator|==
name|eventBeginDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
operator|&&
operator|(
name|m
operator|%
literal|12
operator|)
operator|==
name|eventBeginDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
operator|&&
name|yr
operator|==
name|eventBeginDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
condition|)
name|borderArray
operator|.
name|append
argument_list|(
literal|"'yellow 2px solid'"
argument_list|)
expr_stmt|;
if|else if
condition|(
name|d
operator|==
name|eventEndDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
operator|&&
operator|(
name|m
operator|%
literal|12
operator|)
operator|==
name|eventEndDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
operator|&&
name|yr
operator|==
name|eventEndDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
condition|)
name|borderArray
operator|.
name|append
argument_list|(
literal|"'red 2px solid'"
argument_list|)
expr_stmt|;
else|else
name|borderArray
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
name|holidayArray
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|borderArray
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|StringBuffer
name|table
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|table
operator|.
name|append
argument_list|(
literal|"<script language='JavaScript' type='text/javascript' src='scripts/datepatt.js'></script>"
argument_list|)
expr_stmt|;
name|table
operator|.
name|append
argument_list|(
literal|"<script language='JavaScript'>"
argument_list|)
expr_stmt|;
name|table
operator|.
name|append
argument_list|(
literal|"calGenerate("
operator|+
name|acadYear
operator|+
literal|","
operator|+
name|startMonth
operator|+
literal|","
operator|+
name|endMonth
operator|+
literal|","
operator|+
literal|"["
operator|+
name|holidayArray
operator|+
literal|"],"
operator|+
literal|"["
operator|+
name|prefTable
operator|+
literal|"],"
operator|+
literal|"["
operator|+
name|prefNames
operator|+
literal|"],"
operator|+
literal|"["
operator|+
name|prefColors
operator|+
literal|"],"
operator|+
literal|"'"
operator|+
name|sHolidayTypeNone
operator|+
literal|"',"
operator|+
literal|"["
operator|+
name|borderArray
operator|+
literal|"],"
operator|+
name|editable
operator|+
literal|","
operator|+
name|editable
operator|+
literal|");"
argument_list|)
expr_stmt|;
name|table
operator|.
name|append
argument_list|(
literal|"</script>"
argument_list|)
expr_stmt|;
return|return
name|table
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|setHolidays
parameter_list|(
name|String
name|holidays
parameter_list|)
block|{
name|super
operator|.
name|setHolidays
argument_list|(
name|holidays
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setHolidays
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|int
name|startMonth
init|=
name|getStartMonth
argument_list|()
decl_stmt|;
name|int
name|endMonth
init|=
name|getEndMonth
argument_list|()
decl_stmt|;
name|Calendar
name|startCal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|startCal
operator|.
name|setTime
argument_list|(
name|earliestSessionRelatedDate
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|startYear
init|=
name|getSessionStartYear
argument_list|()
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
name|startMonth
init|;
name|m
operator|<=
name|endMonth
condition|;
name|m
operator|++
control|)
block|{
name|int
name|year
init|=
name|DateUtils
operator|.
name|calculateActualYear
argument_list|(
name|m
argument_list|,
name|startYear
argument_list|)
decl_stmt|;
name|int
name|daysOfMonth
init|=
name|DateUtils
operator|.
name|getNrDaysOfMonth
argument_list|(
name|m
argument_list|,
name|startYear
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<=
name|daysOfMonth
condition|;
name|d
operator|++
control|)
block|{
name|String
name|holiday
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"cal_val_"
operator|+
name|year
operator|+
literal|"_"
operator|+
operator|(
operator|(
literal|12
operator|+
name|m
operator|)
operator|%
literal|12
operator|)
operator|+
literal|"_"
operator|+
name|d
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|holiday
operator|==
literal|null
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|sHolidayTypeNone
argument_list|)
else|:
name|holiday
argument_list|)
expr_stmt|;
block|}
block|}
name|setHolidays
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|Session
operator|)
condition|)
return|return
operator|-
literal|1
return|;
name|Session
name|s
init|=
operator|(
name|Session
operator|)
name|o
decl_stmt|;
name|int
name|cmp
init|=
name|getAcademicInitiative
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|getSessionBeginDateTime
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|DatePattern
name|getDefaultDatePatternNotNull
parameter_list|()
block|{
name|DatePattern
name|dp
init|=
name|super
operator|.
name|getDefaultDatePattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|dp
operator|==
literal|null
condition|)
block|{
name|dp
operator|=
name|DatePattern
operator|.
name|findByName
argument_list|(
name|this
argument_list|,
literal|"Full Term"
argument_list|)
expr_stmt|;
block|}
return|return
name|dp
return|;
block|}
specifier|public
name|int
name|getNrWeeks
parameter_list|()
block|{
name|Calendar
name|sessionBeginDate
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|sessionBeginDate
operator|.
name|setTime
argument_list|(
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|Calendar
name|sessionEndDate
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|sessionEndDate
operator|.
name|setTime
argument_list|(
name|getSessionEndDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|beginDay
init|=
name|getDayOfYear
argument_list|(
name|sessionBeginDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
argument_list|,
name|sessionBeginDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
argument_list|)
operator|-
name|getDayOfYear
argument_list|(
literal|1
argument_list|,
name|getStartMonth
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|endDay
init|=
name|getDayOfYear
argument_list|(
name|sessionEndDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
argument_list|,
name|sessionEndDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
argument_list|)
operator|-
name|getDayOfYear
argument_list|(
literal|1
argument_list|,
name|getStartMonth
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|nrDays
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|beginDay
init|;
name|i
operator|<=
name|endDay
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|getHolidays
argument_list|()
operator|==
literal|null
operator|||
name|i
operator|>=
name|getHolidays
argument_list|()
operator|.
name|length
argument_list|()
operator|||
operator|(
name|getHolidays
argument_list|()
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|-
literal|'0'
operator|)
operator|==
name|sHolidayTypeNone
condition|)
name|nrDays
operator|++
expr_stmt|;
block|}
name|nrDays
operator|-=
literal|7
expr_stmt|;
return|return
operator|(
literal|6
operator|+
name|nrDays
operator|)
operator|/
literal|7
return|;
block|}
specifier|public
name|int
name|getExamBeginOffset
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
operator|(
name|getSessionBeginDateTime
argument_list|()
operator|.
name|getTime
argument_list|()
operator|-
name|getExamBeginDate
argument_list|()
operator|.
name|getTime
argument_list|()
operator|)
operator|/
literal|86.4e6
argument_list|)
return|;
block|}
specifier|public
name|String
name|getBorder
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|month
parameter_list|)
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|day
operator|==
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
operator|&&
operator|(
operator|(
literal|12
operator|+
name|month
operator|)
operator|%
literal|12
operator|)
operator|==
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
condition|)
return|return
literal|"'blue 2px solid'"
return|;
name|cal
operator|.
name|setTime
argument_list|(
name|getSessionEndDateTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|day
operator|==
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
operator|&&
operator|(
operator|(
literal|12
operator|+
name|month
operator|)
operator|%
literal|12
operator|)
operator|==
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
condition|)
return|return
literal|"'blue 2px solid'"
return|;
if|if
condition|(
name|getExamBeginDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cal
operator|.
name|setTime
argument_list|(
name|getExamBeginDate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|day
operator|==
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
operator|&&
operator|(
operator|(
literal|12
operator|+
name|month
operator|)
operator|%
literal|12
operator|)
operator|==
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
condition|)
return|return
literal|"'green 2px solid'"
return|;
block|}
name|int
name|holiday
init|=
name|getHoliday
argument_list|(
name|day
argument_list|,
name|month
argument_list|)
decl_stmt|;
if|if
condition|(
name|holiday
operator|!=
name|Session
operator|.
name|sHolidayTypeNone
condition|)
return|return
literal|"'"
operator|+
name|Session
operator|.
name|sHolidayTypeColors
index|[
name|holiday
index|]
operator|+
literal|" 2px solid'"
return|;
return|return
literal|"null"
return|;
block|}
comment|/** Return distance of the given date outside the session start/end date (in milliseconds) */
specifier|public
name|long
name|getDistance
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
if|if
condition|(
name|date
operator|.
name|compareTo
argument_list|(
name|getEventBeginDate
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
comment|//before session
return|return
name|getEventBeginDate
argument_list|()
operator|.
name|getTime
argument_list|()
operator|-
name|date
operator|.
name|getTime
argument_list|()
return|;
if|if
condition|(
name|date
operator|.
name|compareTo
argument_list|(
name|getEventEndDate
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
comment|//after session
return|return
name|date
operator|.
name|getTime
argument_list|()
operator|-
name|getEventEndDate
argument_list|()
operator|.
name|getTime
argument_list|()
return|;
return|return
literal|0
return|;
comment|//inside session
block|}
specifier|public
name|boolean
name|hasStudentSchedule
parameter_list|()
block|{
return|return
operator|(
operator|(
name|Number
operator|)
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(x) from StudentClassEnrollment x "
operator|+
literal|"where x.student.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
operator|>
literal|0
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|Long
argument_list|>
name|getLockedOfferings
parameter_list|()
block|{
if|if
condition|(
operator|!
name|getStatusType
argument_list|()
operator|.
name|canLockOfferings
argument_list|()
condition|)
return|return
literal|null
return|;
name|OnlineSectioningServer
name|server
init|=
name|OnlineSectioningService
operator|.
name|getInstance
argument_list|(
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|server
operator|==
literal|null
condition|?
literal|null
else|:
name|server
operator|.
name|getLockedOfferings
argument_list|()
operator|)
return|;
block|}
specifier|public
name|boolean
name|isOfferingLocked
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getStatusType
argument_list|()
operator|.
name|canLockOfferings
argument_list|()
condition|)
return|return
literal|false
return|;
name|OnlineSectioningServer
name|server
init|=
name|OnlineSectioningService
operator|.
name|getInstance
argument_list|(
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|server
operator|!=
literal|null
operator|&&
name|server
operator|.
name|isOfferingLocked
argument_list|(
name|offeringId
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isOfferingLockNeeded
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getStatusType
argument_list|()
operator|.
name|canOnlineSectionStudents
argument_list|()
condition|)
return|return
literal|false
return|;
name|OnlineSectioningServer
name|server
init|=
name|OnlineSectioningService
operator|.
name|getInstance
argument_list|(
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|server
operator|!=
literal|null
operator|&&
operator|!
name|server
operator|.
name|isOfferingLocked
argument_list|(
name|offeringId
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isOfferingFullLockNeeded
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getStatusType
argument_list|()
operator|.
name|canOnlineSectionStudents
argument_list|()
operator|&&
operator|!
name|getStatusType
argument_list|()
operator|.
name|canSectionAssistStudents
argument_list|()
condition|)
return|return
literal|false
return|;
name|OnlineSectioningServer
name|server
init|=
name|OnlineSectioningService
operator|.
name|getInstance
argument_list|(
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|server
operator|!=
literal|null
operator|&&
operator|!
name|server
operator|.
name|isOfferingLocked
argument_list|(
name|offeringId
argument_list|)
return|;
block|}
specifier|public
name|void
name|lockOffering
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
if|if
condition|(
name|getStatusType
argument_list|()
operator|.
name|canLockOfferings
argument_list|()
condition|)
block|{
name|OnlineSectioningServer
name|server
init|=
name|OnlineSectioningService
operator|.
name|getInstance
argument_list|(
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
name|server
operator|.
name|lockOffering
argument_list|(
name|offeringId
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|unlockOffering
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
name|OnlineSectioningServer
name|server
init|=
name|OnlineSectioningService
operator|.
name|getInstance
argument_list|(
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|execute
argument_list|(
operator|new
name|ReloadOfferingAction
argument_list|(
name|offeringId
argument_list|)
argument_list|)
expr_stmt|;
name|server
operator|.
name|unlockOffering
argument_list|(
name|offeringId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

