begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|HibernateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|BuildingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TimetableManagerDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|ReferenceList
import|;
end_import

begin_comment
comment|/**  * @hibernate.class table="SESSIONS" schema = "TIMETABLE"  */
end_comment

begin_class
specifier|public
class|class
name|Session
extends|extends
name|BaseSession
implements|implements
name|Comparable
block|{
specifier|public
specifier|static
name|int
name|sNrExcessDays
init|=
literal|31
decl_stmt|;
specifier|public
specifier|static
name|int
name|sHolidayTypeNone
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|sHolidayTypeHoliday
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
name|int
name|sHolidayTypeBreak
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
name|String
index|[]
name|sHolidayTypeNames
init|=
operator|new
name|String
index|[]
block|{
literal|"No Holiday"
block|,
literal|"Holiday"
block|,
literal|"(Spring/October/Thanksgiving) Break"
block|}
decl_stmt|;
specifier|public
specifier|static
name|String
index|[]
name|sHolidayTypeColors
init|=
operator|new
name|String
index|[]
block|{
literal|"rgb(240,240,240)"
block|,
literal|"rgb(200,30,20)"
block|,
literal|"rgb(240,50,240)"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|3691040980400813366L
decl_stmt|;
specifier|static
name|String
name|mappingTable
init|=
literal|"timetable.ll_course_mapping"
decl_stmt|;
comment|/* 	 * @return all sessions 	 */
specifier|public
specifier|static
name|ArrayList
name|getAllSessions
parameter_list|()
throws|throws
name|HibernateException
block|{
return|return
operator|(
name|ArrayList
operator|)
operator|(
operator|new
name|SessionDAO
argument_list|()
operator|)
operator|.
name|findAll
argument_list|()
return|;
block|}
comment|/** 	 * @param id 	 * @return 	 * @throws HibernateException 	 */
specifier|public
specifier|static
name|Session
name|getSessionById
parameter_list|(
name|Long
name|id
parameter_list|)
throws|throws
name|HibernateException
block|{
return|return
operator|(
operator|new
name|SessionDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|/** 	 * @param id 	 * @throws HibernateException 	 */
specifier|public
specifier|static
name|void
name|deleteSessionById
parameter_list|(
name|Long
name|id
parameter_list|)
throws|throws
name|HibernateException
block|{
name|Session
name|sessn
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|sessn
operator|!=
literal|null
condition|)
block|{
operator|(
operator|new
name|SessionDAO
argument_list|()
operator|)
operator|.
name|delete
argument_list|(
name|sessn
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|saveOrUpdate
parameter_list|()
throws|throws
name|HibernateException
block|{
operator|(
operator|new
name|SessionDAO
argument_list|()
operator|)
operator|.
name|saveOrUpdate
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getAcademicYearTerm
parameter_list|()
block|{
return|return
operator|(
name|getAcademicYear
argument_list|()
operator|+
name|getAcademicTerm
argument_list|()
operator|)
return|;
block|}
specifier|public
name|boolean
name|isDefault
parameter_list|()
throws|throws
name|HibernateException
block|{
name|Session
name|defSessn
init|=
name|Session
operator|.
name|defaultSession
argument_list|()
decl_stmt|;
return|return
operator|(
operator|(
name|defSessn
operator|==
literal|null
operator|)
condition|?
literal|false
else|:
name|this
operator|.
name|getSessionId
argument_list|()
operator|.
name|equals
argument_list|(
name|defSessn
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|public
name|boolean
name|getIsDefault
parameter_list|()
throws|throws
name|HibernateException
block|{
return|return
name|isDefault
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Session
name|defaultSession
parameter_list|()
throws|throws
name|HibernateException
block|{
name|Iterator
name|it
init|=
name|getAllSessions
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Session
name|sessn
init|=
literal|null
decl_stmt|;
name|Calendar
name|now
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Calendar
name|t
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|t
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
operator|(
literal|365
operator|*
literal|200
operator|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Session
name|sessn1
init|=
operator|(
name|Session
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessn1
operator|.
name|getSessionBeginDateTime
argument_list|()
operator|.
name|before
argument_list|(
name|t
operator|.
name|getTime
argument_list|()
argument_list|)
operator|&&
name|sessn1
operator|.
name|getSessionBeginDateTime
argument_list|()
operator|.
name|after
argument_list|(
name|now
operator|.
name|getTime
argument_list|()
argument_list|)
condition|)
block|{
name|t
operator|.
name|setTime
argument_list|(
name|sessn1
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|sessn
operator|=
name|sessn1
expr_stmt|;
break|break;
block|}
block|}
return|return
name|sessn
return|;
block|}
comment|/** 	 * Gets the current user session 	 *  	 * @param user 	 *            User object 	 * @return Session object of found, throws Exception otherwise 	 * @throws HibernateException 	 */
specifier|public
specifier|static
name|Session
name|getCurrentAcadSession
parameter_list|(
name|User
name|user
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|sessionId
init|=
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_ID_ATTR_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
operator|||
name|sessionId
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Current Academic Session cannot be determined for user"
argument_list|)
throw|;
else|else
block|{
name|Session
name|s
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
operator|new
name|Long
argument_list|(
name|sessionId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|s
return|;
block|}
block|}
comment|/** 	 * @return Returns the term. 	 */
specifier|public
name|String
name|getTermLabel
parameter_list|()
block|{
return|return
name|this
operator|.
name|getAcademicTerm
argument_list|()
return|;
block|}
comment|/** 	 * @return Returns the label. 	 */
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
name|this
operator|.
name|getAcademicTerm
argument_list|()
operator|+
literal|" "
operator|+
name|this
operator|.
name|getYear
argument_list|()
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|getLabel
argument_list|()
return|;
block|}
comment|/** 	 * @return Returns the year. 	 */
specifier|public
name|int
name|getYear
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|this
operator|.
name|getAcademicYear
argument_list|()
argument_list|)
return|;
block|}
comment|/** 	 * @return Returns the year. 	 */
specifier|public
specifier|static
name|int
name|getYear
parameter_list|(
name|String
name|acadYrTerm
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|acadYrTerm
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|)
return|;
block|}
comment|/** 	 * @param bldgUniqueId 	 * @return 	 */
specifier|public
name|Building
name|building
parameter_list|(
name|String
name|bldgUniqueId
parameter_list|)
block|{
comment|// TODO make faster
for|for
control|(
name|Iterator
name|it
init|=
name|this
operator|.
name|getBuildings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Building
name|bldg
init|=
operator|(
name|Building
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|bldg
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|bldgUniqueId
argument_list|)
condition|)
block|{
return|return
name|bldg
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|academicInitiativeDisplayString
parameter_list|()
block|{
return|return
name|this
operator|.
name|getAcademicInitiative
argument_list|()
return|;
block|}
specifier|public
name|String
name|statusDisplayString
parameter_list|()
block|{
return|return
name|getStatusType
argument_list|()
operator|.
name|getLabel
argument_list|()
return|;
block|}
comment|/** 	 * @return Returns the sessionStatusMap. 	 */
specifier|public
specifier|static
name|ReferenceList
name|getSessionStatusList
parameter_list|()
block|{
name|ReferenceList
name|ref
init|=
operator|new
name|ReferenceList
argument_list|()
decl_stmt|;
name|ref
operator|.
name|addAll
argument_list|(
name|DepartmentStatusType
operator|.
name|findAllForSession
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ref
return|;
block|}
comment|/** 	 * Fetch rooms efficiently, joining features and roomDepts 	 *  	 * @return 	 */
specifier|public
name|java
operator|.
name|util
operator|.
name|Set
name|getRoomsFast
parameter_list|(
name|String
index|[]
name|depts
parameter_list|)
block|{
if|if
condition|(
name|depts
operator|!=
literal|null
operator|&&
name|depts
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
operator|new
name|TreeSet
argument_list|(
operator|(
operator|new
name|RoomDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select room from Location as room "
operator|+
literal|"left outer join room.roomDepts as roomDept "
operator|+
literal|"where room.session.uniqueId = :sessionId"
operator|+
literal|" and roomDept.department.deptCode  in ( "
operator|+
name|Constants
operator|.
name|arrayToStr
argument_list|(
name|depts
argument_list|,
literal|"'"
argument_list|,
literal|", "
argument_list|)
operator|+
literal|" ) "
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getSessionId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|TreeSet
argument_list|(
operator|(
operator|new
name|RoomDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select room from Location as room where room.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getSessionId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Set
name|getRoomsFast
parameter_list|(
name|User
name|user
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|user
operator|.
name|getRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|ADMIN_ROLE
argument_list|)
condition|)
return|return
name|getRoomsFast
argument_list|(
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
return|;
name|Long
name|sessionId
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
name|String
name|mgrId
init|=
operator|(
name|String
operator|)
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|TMTBL_MGR_ID_ATTR_NAME
argument_list|)
decl_stmt|;
name|TimetableManager
name|manager
init|=
operator|(
operator|new
name|TimetableManagerDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|mgrId
argument_list|)
argument_list|)
decl_stmt|;
name|Set
name|departments
init|=
name|manager
operator|.
name|departmentsForSession
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|departments
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|depts
init|=
operator|new
name|String
index|[
name|departments
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|departments
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|depts
index|[
name|idx
operator|++
index|]
operator|=
operator|(
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getDeptCode
argument_list|()
expr_stmt|;
block|}
return|return
name|getRoomsFast
argument_list|(
name|depts
argument_list|)
return|;
block|}
return|return
operator|new
name|TreeSet
argument_list|()
return|;
block|}
comment|/** 	 *  	 * @param depts 	 * @return 	 */
specifier|public
name|java
operator|.
name|util
operator|.
name|Set
name|getBldgsFast
parameter_list|(
name|String
index|[]
name|depts
parameter_list|)
block|{
if|if
condition|(
name|depts
operator|!=
literal|null
operator|&&
name|depts
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|List
name|rooms
init|=
operator|(
operator|new
name|RoomDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select room from Room as room "
operator|+
literal|"left outer join room.roomDepts as roomDept "
operator|+
literal|"where room.session.uniqueId = :sessionId"
operator|+
literal|" and roomDept.department.deptCode  in ( "
operator|+
name|Constants
operator|.
name|arrayToStr
argument_list|(
name|depts
argument_list|,
literal|"'"
argument_list|,
literal|", "
argument_list|)
operator|+
literal|" ) "
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"sessionId"
argument_list|,
name|this
operator|.
name|getSessionId
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|TreeSet
name|bldgs
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|rooms
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Room
name|room
init|=
operator|(
name|Room
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|bldgs
operator|.
name|add
argument_list|(
name|room
operator|.
name|getBuilding
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|bldgs
return|;
block|}
else|else
block|{
return|return
operator|new
name|TreeSet
argument_list|(
operator|(
operator|new
name|BuildingDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select building from Building as building where building.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"sessionId"
argument_list|,
name|getSessionId
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/** 	 * Build the msf schema name for the academic year term provided 	 *  	 * @param acadYrTerm 	 *            Academic Year Term (format yyyyTtt - 2005Fal) 	 * @return Msf Schema Name 	 */
specifier|public
specifier|static
name|String
name|getMsfSchemaName
parameter_list|(
name|String
name|acadYr
parameter_list|,
name|String
name|acadTerm
parameter_list|)
block|{
name|String
name|schema
init|=
literal|"msf1"
decl_stmt|;
if|if
condition|(
name|acadYr
operator|.
name|length
argument_list|()
operator|!=
literal|4
condition|)
return|return
literal|""
return|;
if|if
condition|(
name|acadTerm
operator|.
name|length
argument_list|()
operator|!=
literal|3
condition|)
return|return
literal|""
return|;
name|int
name|year
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|acadYr
argument_list|)
decl_stmt|;
name|schema
operator|=
name|schema
operator|+
name|getLegacyYearTermCode
argument_list|(
name|year
argument_list|,
name|acadTerm
argument_list|)
expr_stmt|;
return|return
name|schema
return|;
block|}
comment|/** 	 * Build the last like msf schema name for the academic year term provided 	 *  	 * @param acadYrTerm 	 *            Academic Year Term (format yyyyTtt - 2005Fal) 	 * @return Last like Msf Schema Name 	 */
specifier|public
specifier|static
name|String
name|getLLMsfSchemaName
parameter_list|(
name|String
name|acadYr
parameter_list|,
name|String
name|acadTerm
parameter_list|)
block|{
name|String
name|schema
init|=
literal|"msf1"
decl_stmt|;
if|if
condition|(
name|acadYr
operator|.
name|length
argument_list|()
operator|!=
literal|4
condition|)
return|return
literal|""
return|;
if|if
condition|(
name|acadTerm
operator|.
name|length
argument_list|()
operator|!=
literal|3
condition|)
return|return
literal|""
return|;
name|int
name|year
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|acadYr
argument_list|)
operator|-
literal|1
decl_stmt|;
name|schema
operator|=
name|schema
operator|+
name|getLegacyYearTermCode
argument_list|(
name|year
argument_list|,
name|acadTerm
argument_list|)
expr_stmt|;
return|return
name|schema
return|;
block|}
specifier|private
specifier|static
name|String
name|getLegacyYearTermCode
parameter_list|(
name|int
name|year
parameter_list|,
name|String
name|term
parameter_list|)
block|{
name|String
name|termCode
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|year
operator|>=
literal|2000
condition|)
block|{
name|year
operator|=
name|year
operator|-
literal|2000
expr_stmt|;
block|}
else|else
block|{
name|year
operator|=
name|year
operator|-
literal|1900
expr_stmt|;
block|}
if|if
condition|(
name|year
operator|<
literal|10
condition|)
name|termCode
operator|=
name|termCode
operator|+
literal|"0"
expr_stmt|;
name|termCode
operator|=
name|termCode
operator|+
name|year
expr_stmt|;
if|if
condition|(
name|term
operator|.
name|equals
argument_list|(
literal|"Fal"
argument_list|)
condition|)
name|termCode
operator|=
name|termCode
operator|+
literal|"0"
expr_stmt|;
if|if
condition|(
name|term
operator|.
name|equals
argument_list|(
literal|"Spr"
argument_list|)
condition|)
name|termCode
operator|=
name|termCode
operator|+
literal|"1"
expr_stmt|;
if|if
condition|(
name|term
operator|.
name|equals
argument_list|(
literal|"Sum"
argument_list|)
condition|)
name|termCode
operator|=
name|termCode
operator|+
literal|"2"
expr_stmt|;
return|return
name|termCode
return|;
block|}
comment|/** 	 * Build the legacy year term code to represent this session 	 *  	 * @return Legacy year term code (e.g. 061) 	 */
specifier|public
name|String
name|getLegacyYearTermCode
parameter_list|()
block|{
return|return
operator|(
name|getLegacyYearTermCode
argument_list|(
name|getYear
argument_list|()
argument_list|,
name|getAcademicTerm
argument_list|()
argument_list|)
operator|)
return|;
block|}
comment|/** 	 * Populate last-like course mapping table (LL_COURSE_MAPPING) 	 *  	 * @throws Exception 	 */
specifier|public
name|void
name|createLastLikeCourseMapping
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|currMsf
init|=
name|getMsfSchemaName
argument_list|(
name|getAcademicYear
argument_list|()
argument_list|,
name|getAcademicTerm
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|llMsf
init|=
name|getLLMsfSchemaName
argument_list|(
name|getAcademicYear
argument_list|()
argument_list|,
name|getAcademicTerm
argument_list|()
argument_list|)
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Curr Msf: "
operator|+
name|currMsf
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"LL Msf: "
operator|+
name|llMsf
argument_list|)
expr_stmt|;
comment|// Check if schemas are valid
if|if
condition|(
name|currMsf
operator|.
name|length
argument_list|()
operator|!=
literal|7
operator|||
name|llMsf
operator|.
name|length
argument_list|()
operator|!=
literal|7
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Error in determining MSF Schema names"
argument_list|)
throw|;
block|}
name|SessionDAO
name|sdao
init|=
operator|new
name|SessionDAO
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
literal|null
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|PreparedStatement
name|stmt
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"Building course info ..."
argument_list|)
expr_stmt|;
name|hibSession
operator|=
name|sdao
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|conn
operator|=
name|hibSession
operator|.
name|connection
argument_list|()
expr_stmt|;
comment|// truncate mapping table
name|stmt
operator|=
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"delete from "
operator|+
name|mappingTable
argument_list|)
expr_stmt|;
name|int
name|ct
init|=
name|stmt
operator|.
name|executeUpdate
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Add courses with a future course
name|stmt
operator|=
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"insert into "
operator|+
name|mappingTable
operator|+
literal|" SELECT course.course, new_course.permanent_id perm_id, t.uniqueid, new_subject.abbreviation, new_course.COURSE_NUMBER course_nbr "
operator|+
literal|"FROM ADMIN.COURSE@siq old_course, "
operator|+
literal|"ADMIN.ACAD_INITIATIVE_SBJ_AREA@siq old_subj_area, "
operator|+
literal|"ADMIN.SUBJECT_AREA@siq old_subject, "
operator|+
name|llMsf
operator|+
literal|".course, "
operator|+
name|llMsf
operator|+
literal|".this_term, "
operator|+
name|currMsf
operator|+
literal|".this_term new_this_term, "
operator|+
literal|"timetable.subject_area t, "
operator|+
literal|"admin.course@siq new_course, "
operator|+
literal|"admin.acad_initiative_sbj_area@siq new_subj_area, "
operator|+
literal|"admin.subject_area@siq new_subject "
operator|+
literal|"WHERE "
operator|+
literal|"old_subject.abbreviation=rtrim(substr(course.course,1,4)) "
operator|+
literal|"AND old_course.course_number=rtrim(substr(course.course,5,8)) "
operator|+
literal|"and (old_course.SUBJECT_AREA_UNIQUEID=old_subj_area.UNIQUEID  "
operator|+
literal|"AND old_subj_area.SUBJECT_AREA_UNIQUEID=old_subject.UNIQUEID) "
operator|+
literal|"AND (old_subj_area.ACADEMIC_INITIATIVE=?) "
operator|+
literal|"AND old_course.first_effective_date<=this_term.begin_date "
operator|+
literal|"AND (old_course.last_effective_date IS NULL OR old_course.last_effective_date>=this_term.begin_date) "
operator|+
literal|"AND old_subj_area.first_effective_date<=this_term.begin_date "
operator|+
literal|"AND (old_subj_area.last_effective_date IS NULL OR old_subj_area.last_effective_date>=this_term.begin_date) "
operator|+
literal|"and old_course.permanent_id = new_course.permanent_id "
operator|+
literal|"and (new_course.SUBJECT_AREA_UNIQUEID=new_subj_area.UNIQUEID  "
operator|+
literal|"AND new_subj_area.SUBJECT_AREA_UNIQUEID=new_subject.UNIQUEID) "
operator|+
literal|"AND new_course.first_effective_date<=new_this_term.begin_date "
operator|+
literal|"AND (new_course.last_effective_date IS NULL OR new_course.last_effective_date>=new_this_term.begin_date) "
operator|+
literal|"and t.sis_uniqueid = new_subj_area.uniqueid "
operator|+
literal|"and t.session_id = ? "
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setInt
argument_list|(
literal|2
argument_list|,
name|this
operator|.
name|getSessionId
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|ct
operator|=
name|stmt
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
name|ct
operator|+
literal|" Courses added with a future course"
argument_list|)
expr_stmt|;
comment|// Add courses where subject area has a successor
name|stmt
operator|=
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"insert into "
operator|+
name|mappingTable
operator|+
literal|" SELECT course.course, old_course.permanent_id perm_id, t.uniqueid, new_subject.abbreviation, old_course.COURSE_NUMBER course_nbr "
operator|+
literal|"FROM ADMIN.COURSE@siq old_course, "
operator|+
literal|"ADMIN.ACAD_INITIATIVE_SBJ_AREA@siq old_subj_area, "
operator|+
literal|"ADMIN.SUBJECT_AREA@siq old_subject, "
operator|+
name|llMsf
operator|+
literal|".course, "
operator|+
name|llMsf
operator|+
literal|".this_term, "
operator|+
literal|"timetable.subject_area t, "
operator|+
literal|"admin.acad_int_sbj_area_scsr@siq sdr, "
operator|+
literal|"admin.acad_initiative_sbj_area@siq new_subj_area, "
operator|+
literal|"admin.subject_area@siq new_subject "
operator|+
literal|"WHERE "
operator|+
literal|"not exists (select 1 from "
operator|+
name|mappingTable
operator|+
literal|" llcm where course.course = llcm.course) "
operator|+
literal|"and old_subject.abbreviation=rtrim(substr(course.course,1,4)) "
operator|+
literal|"AND old_course.course_number=rtrim(substr(course.course,5,8)) "
operator|+
literal|"and (old_course.SUBJECT_AREA_UNIQUEID=old_subj_area.UNIQUEID "
operator|+
literal|"AND old_subj_area.SUBJECT_AREA_UNIQUEID=old_subject.UNIQUEID) "
operator|+
literal|"AND (old_subj_area.ACADEMIC_INITIATIVE=?) "
operator|+
literal|"AND old_course.first_effective_date<=this_term.begin_date "
operator|+
literal|"AND (old_course.last_effective_date IS NULL OR old_course.last_effective_date>=this_term.begin_date) "
operator|+
literal|"AND old_subj_area.first_effective_date<=this_term.begin_date "
operator|+
literal|"AND (old_subj_area.last_effective_date IS NULL OR old_subj_area.last_effective_date>=this_term.begin_date) "
operator|+
literal|"AND new_subj_area.SUBJECT_AREA_UNIQUEID=new_subject.UNIQUEID "
operator|+
literal|"and t.sis_uniqueid = new_subj_area.uniqueid "
operator|+
literal|"and t.session_id = ? "
operator|+
literal|"and sdr.parentid  = old_subj_area.uniqueid "
operator|+
literal|"and sdr.value = new_subj_area.uniqueid "
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setInt
argument_list|(
literal|2
argument_list|,
name|this
operator|.
name|getSessionId
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|ct
operator|=
name|stmt
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
name|ct
operator|+
literal|" Courses added where subject area has a successor"
argument_list|)
expr_stmt|;
comment|// Add other courses - where current subject is still valid
name|stmt
operator|=
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"insert into "
operator|+
name|mappingTable
operator|+
literal|" SELECT "
operator|+
literal|"course.course, old_course.permanent_id perm_id, t.uniqueid, old_subject.abbreviation, old_course.COURSE_NUMBER course_nbr "
operator|+
literal|"FROM ADMIN.COURSE@siq old_course, "
operator|+
literal|"ADMIN.ACAD_INITIATIVE_SBJ_AREA@siq old_subj_area, "
operator|+
literal|"ADMIN.SUBJECT_AREA@siq old_subject, "
operator|+
name|llMsf
operator|+
literal|".course, "
operator|+
name|llMsf
operator|+
literal|".this_term, "
operator|+
literal|"timetable.subject_area t "
operator|+
literal|"WHERE "
operator|+
literal|"not exists (select 1 from "
operator|+
name|mappingTable
operator|+
literal|" llcm where course.course = llcm.course) "
operator|+
literal|"and old_subject.abbreviation=rtrim(substr(course.course,1,4)) "
operator|+
literal|"AND old_course.course_number=rtrim(substr(course.course,5,8)) "
operator|+
literal|"and (old_course.SUBJECT_AREA_UNIQUEID=old_subj_area.UNIQUEID "
operator|+
literal|"AND old_subj_area.SUBJECT_AREA_UNIQUEID=old_subject.UNIQUEID) "
operator|+
literal|"AND (old_subj_area.ACADEMIC_INITIATIVE=?) "
operator|+
literal|"AND old_course.first_effective_date<=this_term.begin_date "
operator|+
literal|"AND (old_course.last_effective_date IS NULL OR old_course.last_effective_date>=this_term.begin_date) "
operator|+
literal|"AND old_subj_area.first_effective_date<=this_term.begin_date "
operator|+
literal|"AND (old_subj_area.last_effective_date IS NULL OR old_subj_area.last_effective_date>=this_term.begin_date) "
operator|+
literal|"and t.sis_uniqueid = old_subj_area.uniqueid "
operator|+
literal|"and t.session_id = ?"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setInt
argument_list|(
literal|2
argument_list|,
name|this
operator|.
name|getSessionId
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|ct
operator|=
name|stmt
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
name|ct
operator|+
literal|" Other courses added"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|stmt
operator|!=
literal|null
condition|)
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// if (hibSession!=null&& hibSession.isOpen()) hibSession.close();
throw|throw
operator|(
name|e
operator|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|Session
name|getSessionUsingInitiativeYearTerm
parameter_list|(
name|String
name|academicInitiative
parameter_list|,
name|String
name|academicYear
parameter_list|,
name|String
name|academicTerm
parameter_list|)
block|{
name|Session
name|s
init|=
literal|null
decl_stmt|;
name|StringBuffer
name|queryString
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|SessionDAO
name|sdao
init|=
operator|new
name|SessionDAO
argument_list|()
decl_stmt|;
name|queryString
operator|.
name|append
argument_list|(
literal|" from Session as s where s.academicInitiative = '"
operator|+
name|academicInitiative
operator|+
literal|"' "
argument_list|)
expr_stmt|;
name|queryString
operator|.
name|append
argument_list|(
literal|" and s.academicYear = '"
operator|+
name|academicYear
operator|+
literal|"' "
argument_list|)
expr_stmt|;
name|queryString
operator|.
name|append
argument_list|(
literal|" and s.academicTerm = '"
operator|+
name|academicTerm
operator|+
literal|"' "
argument_list|)
expr_stmt|;
name|Query
name|q
init|=
name|sdao
operator|.
name|getQuery
argument_list|(
name|queryString
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|.
name|list
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|s
operator|=
operator|(
name|Session
operator|)
name|q
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|s
operator|)
return|;
block|}
specifier|public
name|Session
name|getLastLikeSession
parameter_list|()
block|{
name|String
name|lastYr
init|=
operator|new
name|Integer
argument_list|(
name|this
operator|.
name|getYear
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|this
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|,
name|lastYr
argument_list|,
name|getAcademicTerm
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Session
name|getNextLikeSession
parameter_list|()
block|{
name|String
name|nextYr
init|=
operator|new
name|Integer
argument_list|(
name|this
operator|.
name|getYear
argument_list|()
operator|+
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|this
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|,
name|nextYr
argument_list|,
name|getAcademicTerm
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|loadInstrAndCrsOffering
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|(
literal|"done"
operator|)
return|;
block|}
specifier|private
name|String
name|getInsertCrsOffering
parameter_list|(
name|String
name|llMsf
parameter_list|,
name|int
name|control
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|sql
init|=
literal|"INSERT INTO timetable.course_offering "
operator|+
literal|"(UNIQUEID, SUBJECT_AREA_ID, COURSE_NBR, PERM_ID, INSTR_OFFR_ID, IS_CONTROL, PROJ_DEMAND) "
operator|+
literal|"	SELECT "
operator|+
literal|"    	   timetable.crs_offr_seq.nextval, "
operator|+
literal|"	       subject_id, course_nbr, perm_id, "
operator|+
literal|"    	   timetable.instr_offr_seq.currval, "
operator|+
name|control
operator|+
literal|", proj_demand"
operator|+
literal|"   FROM ( "
operator|+
literal|"	SELECT "
operator|+
literal|"	       llcm.course_nbr, llcm.perm_id,"
operator|+
literal|"    	   nvl(SUM(crscurr.requests), 0) proj_demand, llcm.subject_id "
operator|+
literal|"  	  FROM "
operator|+
name|mappingTable
operator|+
literal|" llcm, "
operator|+
name|llMsf
operator|+
literal|".crscurr, "
operator|+
name|mappingTable
operator|+
literal|" llcm_related"
operator|+
literal|"  	 WHERE llcm.course=?"
operator|+
literal|"      AND llcm_related.subject_id  = llcm.subject_id AND llcm_related.course_nbr = llcm.course_nbr"
operator|+
literal|"  	   AND llcm_related.course = crscurr.course(+)"
operator|+
literal|"  	 GROUP BY llcm.course_nbr, llcm.perm_id, llcm.subject_id ) xx "
operator|+
literal|" where not exists (select 1 from timetable.course_offering yy where xx.subject_id = yy.subject_area_id and xx.course_nbr = yy.course_nbr)"
decl_stmt|;
return|return
name|sql
return|;
block|}
specifier|public
name|Long
name|getSessionId
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|getUniqueId
argument_list|()
operator|)
return|;
block|}
specifier|public
name|void
name|setSessionId
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|this
operator|.
name|setUniqueId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * (non-Javadoc) 	 *  	 * @see org.unitime.timetable.model.PreferenceGroup#canUserEdit(org.unitime.commons.User) 	 */
specifier|protected
name|boolean
name|canUserEdit
parameter_list|(
name|User
name|user
parameter_list|)
block|{
return|return
operator|(
literal|false
operator|)
return|;
block|}
specifier|protected
name|boolean
name|canUserView
parameter_list|(
name|User
name|user
parameter_list|)
block|{
return|return
operator|(
literal|false
operator|)
return|;
block|}
specifier|public
name|String
name|htmlLabel
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|getLabel
argument_list|()
operator|)
return|;
block|}
specifier|public
name|int
name|getStartMonth
parameter_list|()
block|{
return|return
name|DateUtils
operator|.
name|getStartMonth
argument_list|(
name|getSessionBeginDateTime
argument_list|()
argument_list|,
name|getYear
argument_list|()
argument_list|,
name|sNrExcessDays
argument_list|)
return|;
block|}
specifier|public
name|int
name|getEndMonth
parameter_list|()
block|{
return|return
name|DateUtils
operator|.
name|getEndMonth
argument_list|(
name|getSessionEndDateTime
argument_list|()
argument_list|,
name|getYear
argument_list|()
argument_list|,
name|sNrExcessDays
argument_list|)
return|;
block|}
specifier|public
name|int
name|getDayOfYear
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|month
parameter_list|)
block|{
return|return
name|DateUtils
operator|.
name|getDayOfYear
argument_list|(
name|day
argument_list|,
name|month
argument_list|,
name|getYear
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|getNrDaysOfMonth
parameter_list|(
name|int
name|month
parameter_list|)
block|{
return|return
name|DateUtils
operator|.
name|getNrDaysOfMonth
argument_list|(
name|month
argument_list|,
name|getYear
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|getHoliday
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|month
parameter_list|)
block|{
return|return
name|getHoliday
argument_list|(
name|day
argument_list|,
name|month
argument_list|,
name|getYear
argument_list|()
argument_list|,
name|getStartMonth
argument_list|()
argument_list|,
name|getHolidays
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|getHoliday
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|month
parameter_list|,
name|int
name|year
parameter_list|,
name|int
name|startMonth
parameter_list|,
name|String
name|holidays
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|holidays
operator|==
literal|null
condition|)
return|return
name|sHolidayTypeNone
return|;
name|int
name|idx
init|=
name|DateUtils
operator|.
name|getDayOfYear
argument_list|(
name|day
argument_list|,
name|month
argument_list|,
name|year
argument_list|)
operator|-
name|DateUtils
operator|.
name|getDayOfYear
argument_list|(
literal|1
argument_list|,
name|startMonth
argument_list|,
name|year
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
operator|||
name|idx
operator|>=
name|holidays
operator|.
name|length
argument_list|()
condition|)
return|return
name|sHolidayTypeNone
return|;
return|return
operator|(
name|int
operator|)
operator|(
name|holidays
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
operator|-
literal|'0'
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|e
parameter_list|)
block|{
return|return
name|sHolidayTypeNone
return|;
block|}
block|}
specifier|public
name|String
name|getHolidaysHtml
parameter_list|()
block|{
return|return
name|getHolidaysHtml
argument_list|(
literal|true
argument_list|)
return|;
block|}
specifier|public
name|String
name|getHolidaysHtml
parameter_list|(
name|boolean
name|editable
parameter_list|)
block|{
return|return
name|getHolidaysHtml
argument_list|(
name|getSessionBeginDateTime
argument_list|()
argument_list|,
name|getSessionEndDateTime
argument_list|()
argument_list|,
name|getClassesEndDateTime
argument_list|()
argument_list|,
name|getYear
argument_list|()
argument_list|,
name|getHolidays
argument_list|()
argument_list|,
name|editable
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getHolidaysHtml
parameter_list|(
name|Date
name|sessionBeginTime
parameter_list|,
name|Date
name|sessionEndTime
parameter_list|,
name|Date
name|classesEndTime
parameter_list|,
name|int
name|acadYear
parameter_list|,
name|String
name|holidays
parameter_list|,
name|boolean
name|editable
parameter_list|)
block|{
name|StringBuffer
name|prefTable
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|prefNames
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|prefColors
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sHolidayTypeNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|prefTable
operator|.
name|append
argument_list|(
operator|(
name|i
operator|==
literal|0
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|"'"
operator|+
name|i
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|prefNames
operator|.
name|append
argument_list|(
operator|(
name|i
operator|==
literal|0
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|"'"
operator|+
name|sHolidayTypeNames
index|[
name|i
index|]
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|prefColors
operator|.
name|append
argument_list|(
operator|(
name|i
operator|==
literal|0
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|"'"
operator|+
name|sHolidayTypeColors
index|[
name|i
index|]
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|StringBuffer
name|holidayArray
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|borderArray
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Calendar
name|sessionBeginDate
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|sessionBeginDate
operator|.
name|setTime
argument_list|(
name|sessionBeginTime
argument_list|)
expr_stmt|;
name|Calendar
name|sessionEndDate
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|sessionEndDate
operator|.
name|setTime
argument_list|(
name|sessionEndTime
argument_list|)
expr_stmt|;
name|Calendar
name|classesEndDate
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|classesEndDate
operator|.
name|setTime
argument_list|(
name|classesEndTime
argument_list|)
expr_stmt|;
name|int
name|startMonth
init|=
name|DateUtils
operator|.
name|getStartMonth
argument_list|(
name|sessionBeginTime
argument_list|,
name|acadYear
argument_list|,
name|sNrExcessDays
argument_list|)
decl_stmt|;
name|int
name|endMonth
init|=
name|DateUtils
operator|.
name|getEndMonth
argument_list|(
name|sessionEndTime
argument_list|,
name|acadYear
argument_list|,
name|sNrExcessDays
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
name|startMonth
init|;
name|m
operator|<=
name|endMonth
condition|;
name|m
operator|++
control|)
block|{
if|if
condition|(
name|m
operator|!=
name|startMonth
condition|)
block|{
name|holidayArray
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|borderArray
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|holidayArray
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|borderArray
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|int
name|daysOfMonth
init|=
name|DateUtils
operator|.
name|getNrDaysOfMonth
argument_list|(
name|m
argument_list|,
name|acadYear
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<=
name|daysOfMonth
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
name|d
operator|>
literal|1
condition|)
block|{
name|holidayArray
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|borderArray
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|holidayArray
operator|.
name|append
argument_list|(
literal|"'"
operator|+
name|getHoliday
argument_list|(
name|d
argument_list|,
name|m
argument_list|,
name|acadYear
argument_list|,
name|startMonth
argument_list|,
name|holidays
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|==
name|sessionBeginDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
operator|&&
name|m
operator|==
name|sessionBeginDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
condition|)
name|borderArray
operator|.
name|append
argument_list|(
literal|"'#660000 2px solid'"
argument_list|)
expr_stmt|;
if|else if
condition|(
name|d
operator|==
name|sessionEndDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
operator|&&
name|m
operator|==
name|sessionEndDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
condition|)
name|borderArray
operator|.
name|append
argument_list|(
literal|"'#333399 2px solid'"
argument_list|)
expr_stmt|;
if|else if
condition|(
name|d
operator|==
name|classesEndDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
operator|&&
name|m
operator|==
name|classesEndDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
condition|)
name|borderArray
operator|.
name|append
argument_list|(
literal|"'#339933 2px solid'"
argument_list|)
expr_stmt|;
else|else
name|borderArray
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
name|holidayArray
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|borderArray
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|StringBuffer
name|table
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|table
operator|.
name|append
argument_list|(
literal|"<script language='JavaScript' type='text/javascript' src='scripts/datepatt.js'></script>"
argument_list|)
expr_stmt|;
name|table
operator|.
name|append
argument_list|(
literal|"<script language='JavaScript'>"
argument_list|)
expr_stmt|;
name|table
operator|.
name|append
argument_list|(
literal|"calGenerate("
operator|+
name|acadYear
operator|+
literal|","
operator|+
name|startMonth
operator|+
literal|","
operator|+
name|endMonth
operator|+
literal|","
operator|+
literal|"["
operator|+
name|holidayArray
operator|+
literal|"],"
operator|+
literal|"["
operator|+
name|prefTable
operator|+
literal|"],"
operator|+
literal|"["
operator|+
name|prefNames
operator|+
literal|"],"
operator|+
literal|"["
operator|+
name|prefColors
operator|+
literal|"],"
operator|+
literal|"'"
operator|+
name|sHolidayTypeNone
operator|+
literal|"',"
operator|+
literal|"["
operator|+
name|borderArray
operator|+
literal|"],"
operator|+
name|editable
operator|+
literal|","
operator|+
name|editable
operator|+
literal|");"
argument_list|)
expr_stmt|;
name|table
operator|.
name|append
argument_list|(
literal|"</script>"
argument_list|)
expr_stmt|;
return|return
name|table
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|setHolidays
parameter_list|(
name|String
name|holidays
parameter_list|)
block|{
name|super
operator|.
name|setHolidays
argument_list|(
name|holidays
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setHolidays
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|int
name|startMonth
init|=
name|getStartMonth
argument_list|()
decl_stmt|;
name|int
name|endMonth
init|=
name|getEndMonth
argument_list|()
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
name|startMonth
init|;
name|m
operator|<=
name|endMonth
condition|;
name|m
operator|++
control|)
block|{
name|int
name|daysOfMonth
init|=
name|getNrDaysOfMonth
argument_list|(
name|m
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<=
name|daysOfMonth
condition|;
name|d
operator|++
control|)
block|{
name|String
name|holiday
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"cal_val_"
operator|+
operator|(
operator|(
literal|12
operator|+
name|m
operator|)
operator|%
literal|12
operator|)
operator|+
literal|"_"
operator|+
name|d
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|holiday
operator|==
literal|null
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|sHolidayTypeNone
argument_list|)
else|:
name|holiday
argument_list|)
expr_stmt|;
block|}
block|}
name|setHolidays
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|Session
operator|)
condition|)
return|return
operator|(
operator|-
literal|1
operator|)
return|;
name|Session
name|s
init|=
operator|(
name|Session
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|s
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|this
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
literal|0
operator|)
return|;
block|}
if|if
condition|(
name|this
operator|.
name|getAcademicInitiative
argument_list|()
operator|.
name|equals
argument_list|(
name|s
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|getYear
argument_list|()
operator|==
name|s
operator|.
name|getYear
argument_list|()
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|getAcademicTerm
argument_list|()
operator|!=
literal|null
operator|&&
name|s
operator|.
name|getAcademicTerm
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|getAcademicTerm
argument_list|()
operator|.
name|equals
argument_list|(
name|s
operator|.
name|getAcademicTerm
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
literal|0
operator|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|this
operator|.
name|getAcademicTerm
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Fal"
argument_list|)
condition|)
block|{
return|return
operator|(
literal|1
operator|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|this
operator|.
name|getAcademicTerm
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Sum"
argument_list|)
operator|&&
name|s
operator|.
name|getAcademicTerm
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Fal"
argument_list|)
condition|)
block|{
return|return
operator|(
operator|-
literal|1
operator|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|this
operator|.
name|getAcademicTerm
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Sum"
argument_list|)
operator|&&
name|s
operator|.
name|getAcademicTerm
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Spr"
argument_list|)
condition|)
block|{
return|return
operator|(
literal|1
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
operator|-
literal|1
operator|)
return|;
block|}
block|}
block|}
block|}
block|}
else|else
block|{
return|return
operator|(
operator|-
literal|1
operator|)
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|this
operator|.
name|getYear
argument_list|()
operator|>
name|s
operator|.
name|getYear
argument_list|()
condition|)
block|{
return|return
operator|(
literal|1
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
operator|-
literal|1
operator|)
return|;
block|}
block|}
block|}
else|else
block|{
return|return
operator|(
name|this
operator|.
name|getAcademicInitiative
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|)
operator|)
return|;
block|}
block|}
specifier|public
name|DatePattern
name|getDefaultDatePatternNotNull
parameter_list|()
block|{
name|DatePattern
name|dp
init|=
name|super
operator|.
name|getDefaultDatePattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|dp
operator|==
literal|null
condition|)
block|{
name|dp
operator|=
name|DatePattern
operator|.
name|findByName
argument_list|(
name|this
argument_list|,
literal|"Full Term"
argument_list|)
expr_stmt|;
block|}
return|return
name|dp
return|;
block|}
specifier|public
name|int
name|getNrWeeks
parameter_list|()
block|{
name|Calendar
name|sessionBeginDate
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|sessionBeginDate
operator|.
name|setTime
argument_list|(
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|Calendar
name|sessionEndDate
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|sessionEndDate
operator|.
name|setTime
argument_list|(
name|getSessionEndDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|beginDay
init|=
name|getDayOfYear
argument_list|(
name|sessionBeginDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
argument_list|,
name|sessionBeginDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
argument_list|)
operator|-
name|getDayOfYear
argument_list|(
literal|1
argument_list|,
name|getStartMonth
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|endDay
init|=
name|getDayOfYear
argument_list|(
name|sessionEndDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
argument_list|,
name|sessionEndDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
argument_list|)
operator|-
name|getDayOfYear
argument_list|(
literal|1
argument_list|,
name|getStartMonth
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|nrDays
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|beginDay
init|;
name|i
operator|<=
name|endDay
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|getHolidays
argument_list|()
operator|==
literal|null
operator|||
name|i
operator|>=
name|getHolidays
argument_list|()
operator|.
name|length
argument_list|()
operator|||
operator|(
name|getHolidays
argument_list|()
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|-
literal|'0'
operator|)
operator|==
name|sHolidayTypeNone
condition|)
name|nrDays
operator|++
expr_stmt|;
block|}
name|nrDays
operator|-=
literal|7
expr_stmt|;
return|return
operator|(
literal|6
operator|+
name|nrDays
operator|)
operator|/
literal|7
return|;
block|}
block|}
end_class

end_unit

