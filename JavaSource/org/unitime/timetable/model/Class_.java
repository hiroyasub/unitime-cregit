begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|preference
operator|.
name|MinMaxPreferenceCombination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|preference
operator|.
name|PreferenceCombination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|FlushMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|StringType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|CourseMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalClassEditAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalClassNameHelperInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseClass_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|InstructorComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|NavigationComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DatePatternDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SectioningInfoDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ClassAssignmentProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|CommitedClassAssignmentProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|course
operator|.
name|ui
operator|.
name|ClassAssignmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|course
operator|.
name|ui
operator|.
name|ClassInstructorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|course
operator|.
name|ui
operator|.
name|ClassRoomInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|AssignmentPreferenceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DefaultExternalClassNameHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|duration
operator|.
name|DurationModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|Navigation
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller, Stephanie Schluttenhofer  */
end_comment

begin_class
specifier|public
class|class
name|Class_
extends|extends
name|BaseClass_
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
name|ExternalClassNameHelperInterface
name|externalClassNameHelper
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|CourseMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|CourseMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|GwtConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/* [CONSTRUCTOR MARKER BEGIN] */
specifier|public
name|Class_
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|Class_
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/* [CONSTRUCTOR MARKER END] */
specifier|public
name|String
name|getCourseName
parameter_list|()
block|{
return|return
name|getSchedulingSubpart
argument_list|()
operator|.
name|getCourseName
argument_list|()
return|;
block|}
specifier|public
name|String
name|getCourseNameWithTitle
parameter_list|()
block|{
return|return
name|getSchedulingSubpart
argument_list|()
operator|.
name|getCourseNameWithTitle
argument_list|()
return|;
block|}
comment|/**      *      * @return      */
specifier|public
name|String
name|getItypeDesc
parameter_list|()
block|{
return|return
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
return|;
block|}
specifier|public
name|Department
name|getManagingDept
parameter_list|()
block|{
if|if
condition|(
name|super
operator|.
name|getManagingDept
argument_list|()
operator|==
literal|null
condition|)
return|return
name|getControllingDept
argument_list|()
return|;
return|return
name|super
operator|.
name|getManagingDept
argument_list|()
return|;
block|}
specifier|public
name|Department
name|getControllingDept
parameter_list|()
block|{
if|if
condition|(
name|super
operator|.
name|getControllingDept
argument_list|()
operator|==
literal|null
condition|)
return|return
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingDept
argument_list|()
return|;
return|return
name|super
operator|.
name|getControllingDept
argument_list|()
return|;
block|}
specifier|public
name|void
name|setManagingDept
parameter_list|(
name|Department
name|dept
parameter_list|)
block|{
name|Department
name|oldDept
init|=
name|getManagingDept
argument_list|()
decl_stmt|;
name|super
operator|.
name|setManagingDept
argument_list|(
name|dept
argument_list|)
expr_stmt|;
if|if
condition|(
name|dept
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|oldDept
operator|!=
literal|null
operator|&&
operator|!
name|oldDept
operator|.
name|equals
argument_list|(
name|dept
argument_list|)
operator|&&
name|getAssignments
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Assignment
name|a
init|=
operator|(
name|Assignment
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|a
operator|.
name|getSolution
argument_list|()
operator|.
name|getOwner
argument_list|()
operator|.
name|getDepartments
argument_list|()
operator|.
name|contains
argument_list|(
name|dept
argument_list|)
condition|)
block|{
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|delete
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|ClassEvent
name|event
init|=
name|getEvent
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|!=
literal|null
condition|)
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|delete
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Retrieves the department for the subject area of the      * controlling course offering for the class      * @return Department object      */
specifier|public
name|Department
name|getDepartmentForSubjectArea
parameter_list|()
block|{
name|Department
name|dept
init|=
name|this
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getDepartment
argument_list|()
decl_stmt|;
return|return
name|dept
return|;
block|}
specifier|public
name|Session
name|getSession
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getSession
argument_list|()
operator|)
return|;
block|}
specifier|public
name|Long
name|getSessionId
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getSessionId
argument_list|()
operator|)
return|;
block|}
specifier|public
name|Set
name|classInstructorPrefsOfType
parameter_list|(
name|Class
name|type
parameter_list|)
block|{
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|instructors
init|=
name|getLeadInstructors
argument_list|()
decl_stmt|;
if|if
condition|(
name|instructors
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|Set
name|ret
init|=
literal|null
decl_stmt|;
for|for
control|(
name|DepartmentalInstructor
name|instructor
range|:
name|instructors
control|)
block|{
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
name|ret
operator|=
name|instructor
operator|.
name|getPreferences
argument_list|(
name|type
argument_list|)
expr_stmt|;
else|else
name|ret
operator|=
name|combinePreferences
argument_list|(
name|ret
argument_list|,
name|instructor
operator|.
name|getPreferences
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|Set
name|weakenHardPreferences
parameter_list|(
name|Set
name|prefs
parameter_list|)
block|{
if|if
condition|(
name|prefs
operator|==
literal|null
operator|||
name|prefs
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|prefs
return|;
name|Set
name|ret
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|prefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|pref
init|=
operator|(
name|Preference
operator|)
operator|(
operator|(
name|Preference
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|clone
argument_list|()
decl_stmt|;
if|if
condition|(
name|pref
operator|.
name|weakenHardPreferences
argument_list|()
condition|)
name|ret
operator|.
name|add
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|Set
name|removeNeutralPreferences
parameter_list|(
name|Set
name|prefs
parameter_list|)
block|{
if|if
condition|(
name|prefs
operator|==
literal|null
condition|)
return|return
operator|new
name|TreeSet
argument_list|()
return|;
if|if
condition|(
name|prefs
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|prefs
return|;
name|Set
name|ret
init|=
operator|new
name|TreeSet
argument_list|(
name|prefs
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|ret
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|pref
init|=
operator|(
name|Preference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|Set
name|removeDepartmentalPreferences
parameter_list|(
name|Set
name|prefs
parameter_list|)
block|{
if|if
condition|(
name|prefs
operator|==
literal|null
condition|)
return|return
operator|new
name|TreeSet
argument_list|()
return|;
if|if
condition|(
name|prefs
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|prefs
return|;
name|Set
name|ret
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|prefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|pref
init|=
operator|(
name|Preference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|pref
operator|instanceof
name|RoomPref
condition|)
block|{
name|Location
name|loc
init|=
operator|(
operator|(
name|RoomPref
operator|)
name|pref
operator|)
operator|.
name|getRoom
argument_list|()
decl_stmt|;
for|for
control|(
name|RoomDept
name|rd
range|:
name|loc
operator|.
name|getRoomDepts
argument_list|()
control|)
if|if
condition|(
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|equals
argument_list|(
name|getManagingDept
argument_list|()
argument_list|)
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|pref
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|else if
condition|(
name|pref
operator|instanceof
name|BuildingPref
condition|)
block|{
name|Building
name|b
init|=
operator|(
operator|(
name|BuildingPref
operator|)
name|pref
operator|)
operator|.
name|getBuilding
argument_list|()
decl_stmt|;
if|if
condition|(
name|getAvailableBuildings
argument_list|()
operator|.
name|contains
argument_list|(
name|b
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|pref
operator|instanceof
name|RoomFeaturePref
condition|)
block|{
name|RoomFeature
name|rf
init|=
operator|(
operator|(
name|RoomFeaturePref
operator|)
name|pref
operator|)
operator|.
name|getRoomFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|rf
operator|instanceof
name|GlobalRoomFeature
condition|)
name|ret
operator|.
name|add
argument_list|(
name|pref
argument_list|)
expr_stmt|;
if|else if
condition|(
name|rf
operator|instanceof
name|DepartmentRoomFeature
operator|&&
operator|(
operator|(
name|DepartmentRoomFeature
operator|)
name|rf
operator|)
operator|.
name|getDepartment
argument_list|()
operator|.
name|equals
argument_list|(
name|getManagingDept
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|pref
operator|instanceof
name|RoomGroupPref
condition|)
block|{
name|RoomGroup
name|rg
init|=
operator|(
operator|(
name|RoomGroupPref
operator|)
name|pref
operator|)
operator|.
name|getRoomGroup
argument_list|()
decl_stmt|;
if|if
condition|(
name|rg
operator|.
name|isGlobal
argument_list|()
operator|||
name|getManagingDept
argument_list|()
operator|.
name|equals
argument_list|(
name|rg
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|pref
operator|instanceof
name|InstructorAttributePref
condition|)
block|{
name|InstructorAttribute
name|at
init|=
operator|(
operator|(
name|InstructorAttributePref
operator|)
name|pref
operator|)
operator|.
name|getAttribute
argument_list|()
decl_stmt|;
if|if
condition|(
name|at
operator|.
name|getDepartment
argument_list|()
operator|==
literal|null
operator|||
name|getManagingDept
argument_list|()
operator|.
name|equals
argument_list|(
name|at
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|add
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|Set
argument_list|<
name|Preference
argument_list|>
name|combinePreferences
parameter_list|(
name|Set
argument_list|<
name|Preference
argument_list|>
name|instrPrefs1
parameter_list|,
name|Set
argument_list|<
name|Preference
argument_list|>
name|instrPrefs2
parameter_list|)
block|{
if|if
condition|(
name|instrPrefs1
operator|==
literal|null
operator|||
name|instrPrefs1
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|instrPrefs2
return|;
if|if
condition|(
name|instrPrefs2
operator|==
literal|null
operator|||
name|instrPrefs2
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|instrPrefs1
return|;
name|Set
argument_list|<
name|Preference
argument_list|>
name|ret
init|=
operator|new
name|TreeSet
argument_list|<
name|Preference
argument_list|>
argument_list|()
decl_stmt|;
name|TimePref
name|tp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Preference
argument_list|>
name|i
init|=
name|instrPrefs1
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|p1
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p1
operator|instanceof
name|TimePref
condition|)
block|{
if|if
condition|(
name|tp
operator|==
literal|null
condition|)
block|{
name|tp
operator|=
operator|(
name|TimePref
operator|)
name|p1
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
else|else
name|tp
operator|.
name|combineWith
argument_list|(
operator|(
name|TimePref
operator|)
name|p1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
name|ret
operator|.
name|add
argument_list|(
name|p1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Preference
argument_list|>
name|i
init|=
name|instrPrefs2
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|p2
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p2
operator|instanceof
name|TimePref
condition|)
block|{
if|if
condition|(
name|tp
operator|==
literal|null
condition|)
block|{
name|tp
operator|=
operator|(
name|TimePref
operator|)
name|p2
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
else|else
name|tp
operator|.
name|combineWith
argument_list|(
operator|(
name|TimePref
operator|)
name|p2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Preference
argument_list|>
name|i
init|=
name|instrPrefs2
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|p2
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Preference
name|p1
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Preference
argument_list|>
name|j
init|=
name|ret
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|p
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isSame
argument_list|(
name|p2
argument_list|)
condition|)
block|{
name|p1
operator|=
name|p
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|p1
operator|==
literal|null
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|p2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Preference
name|combPref
init|=
operator|(
name|Preference
operator|)
name|p1
operator|.
name|clone
argument_list|()
decl_stmt|;
name|PreferenceCombination
name|com
init|=
operator|new
name|MinMaxPreferenceCombination
argument_list|()
decl_stmt|;
name|com
operator|.
name|addPreferenceProlog
argument_list|(
name|p1
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
name|com
operator|.
name|addPreferenceProlog
argument_list|(
name|p2
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
name|combPref
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|com
operator|.
name|getPreferenceProlog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|combPref
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tp
operator|!=
literal|null
condition|)
name|ret
operator|.
name|add
argument_list|(
name|tp
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|private
name|Set
name|combinePreferences
parameter_list|(
name|Class
name|type
parameter_list|,
name|Set
name|subpartPrefs
parameter_list|,
name|Set
name|instrPrefs
parameter_list|)
block|{
if|if
condition|(
name|TimePref
operator|.
name|class
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
if|if
condition|(
name|subpartPrefs
operator|==
literal|null
operator|||
name|subpartPrefs
operator|.
name|isEmpty
argument_list|()
operator|||
name|instrPrefs
operator|==
literal|null
operator|||
name|instrPrefs
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|subpartPrefs
return|;
name|TimePref
name|instrPref
init|=
operator|(
name|TimePref
operator|)
name|instrPrefs
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//there has to be only one TimePref for instructor/department/session
name|Set
name|ret
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|subpartPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|pref
init|=
operator|(
name|TimePref
operator|)
operator|(
operator|(
name|TimePref
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|clone
argument_list|()
decl_stmt|;
name|pref
operator|.
name|combineWith
argument_list|(
name|instrPref
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
if|if
condition|(
name|subpartPrefs
operator|==
literal|null
operator|||
name|subpartPrefs
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|instrPrefs
return|;
if|if
condition|(
name|instrPrefs
operator|==
literal|null
operator|||
name|instrPrefs
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|subpartPrefs
return|;
name|Set
name|ret
init|=
operator|new
name|TreeSet
argument_list|(
name|subpartPrefs
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|instrPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|instrPref
init|=
operator|(
name|Preference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Preference
name|subpartPref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|ret
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|p
init|=
operator|(
name|Preference
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isSame
argument_list|(
name|instrPref
argument_list|)
condition|)
block|{
name|subpartPref
operator|=
name|p
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|subpartPref
operator|==
literal|null
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|instrPref
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Preference
name|combPref
init|=
operator|(
name|Preference
operator|)
name|subpartPref
operator|.
name|clone
argument_list|()
decl_stmt|;
name|PreferenceCombination
name|com
init|=
operator|new
name|MinMaxPreferenceCombination
argument_list|()
decl_stmt|;
name|com
operator|.
name|addPreferenceProlog
argument_list|(
name|instrPref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
name|com
operator|.
name|addPreferenceProlog
argument_list|(
name|subpartPref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
name|combPref
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|com
operator|.
name|getPreferenceProlog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|combPref
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|Set
name|combinePreferences
parameter_list|(
name|Class
name|type
parameter_list|,
name|Set
name|classPrefs
parameter_list|,
name|Set
name|subpartPrefs
parameter_list|,
name|Set
name|instrPrefs
parameter_list|)
block|{
name|Set
name|ret
init|=
operator|new
name|TreeSet
argument_list|(
name|classPrefs
argument_list|)
decl_stmt|;
name|Set
name|combined
init|=
name|combinePreferences
argument_list|(
name|type
argument_list|,
name|subpartPrefs
argument_list|,
name|instrPrefs
argument_list|)
decl_stmt|;
if|if
condition|(
name|combined
operator|==
literal|null
condition|)
return|return
name|ret
return|;
for|for
control|(
name|Iterator
name|i
init|=
name|combined
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|combPref
init|=
operator|(
name|Preference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Preference
name|classPref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|classPrefs
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|p
init|=
operator|(
name|Preference
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isSame
argument_list|(
name|combPref
argument_list|)
condition|)
block|{
name|classPref
operator|=
name|p
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|classPref
operator|==
literal|null
condition|)
name|ret
operator|.
name|add
argument_list|(
name|combPref
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|Set
name|getDistributionPreferences
parameter_list|()
block|{
name|TreeSet
name|prefs
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|getDistributionObjects
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|distObj
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|prefs
operator|.
name|add
argument_list|(
name|distObj
operator|.
name|getDistributionPref
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|prefs
return|;
block|}
specifier|public
name|Set
name|effectiveDistributionPreferences
parameter_list|(
name|Department
name|owningDept
parameter_list|)
block|{
name|TreeSet
name|prefs
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|getDistributionObjects
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|distObj
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|DistributionPref
name|pref
init|=
name|distObj
operator|.
name|getDistributionPref
argument_list|()
decl_stmt|;
if|if
condition|(
name|owningDept
operator|==
literal|null
operator|||
name|owningDept
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getOwner
argument_list|()
argument_list|)
condition|)
name|prefs
operator|.
name|add
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|getSchedulingSubpart
argument_list|()
operator|.
name|getDistributionObjects
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|getSchedulingSubpart
argument_list|()
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|distObj
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|DistributionPref
name|pref
init|=
name|distObj
operator|.
name|getDistributionPref
argument_list|()
decl_stmt|;
if|if
condition|(
name|owningDept
operator|==
literal|null
operator|||
name|owningDept
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getOwner
argument_list|()
argument_list|)
condition|)
name|prefs
operator|.
name|add
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|prefs
return|;
block|}
specifier|private
name|Set
name|fixDurationInTimePreferences
parameter_list|(
name|Set
name|prefs
parameter_list|)
block|{
if|if
condition|(
name|prefs
operator|==
literal|null
operator|||
name|prefs
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|prefs
return|;
name|DatePattern
name|dp
init|=
name|effectiveDatePattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|dp
operator|==
literal|null
condition|)
return|return
name|prefs
return|;
name|DurationModel
name|dm
init|=
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getDurationModel
argument_list|()
decl_stmt|;
name|Set
name|ret
init|=
operator|new
name|TreeSet
argument_list|(
name|prefs
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TimePref
argument_list|>
name|fixed
init|=
operator|new
name|ArrayList
argument_list|<
name|TimePref
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|ret
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|pref
init|=
operator|(
name|Preference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|pref
operator|instanceof
name|TimePref
condition|)
block|{
name|TimePref
name|tp
init|=
operator|(
name|TimePref
operator|)
name|pref
decl_stmt|;
if|if
condition|(
name|tp
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getType
argument_list|()
operator|!=
literal|null
operator|&&
name|tp
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|TimePattern
operator|.
name|sTypeExactTime
condition|)
continue|continue;
name|Set
argument_list|<
name|Integer
argument_list|>
name|days
init|=
name|dm
operator|.
name|getDayCodes
argument_list|(
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|,
name|dp
argument_list|,
name|tp
operator|.
name|getTimePattern
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|days
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|days
operator|.
name|size
argument_list|()
operator|<
name|tp
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getDays
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|TimePatternModel
name|model
init|=
name|tp
operator|.
name|getTimePatternModel
argument_list|()
decl_stmt|;
name|boolean
name|req
init|=
name|model
operator|.
name|hasRequiredPreferences
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|model
operator|.
name|getNrDays
argument_list|()
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|days
operator|.
name|contains
argument_list|(
name|model
operator|.
name|getDayCode
argument_list|(
name|d
argument_list|)
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|model
operator|.
name|getNrTimes
argument_list|()
condition|;
name|t
operator|++
control|)
name|model
operator|.
name|setPreference
argument_list|(
name|d
argument_list|,
name|t
argument_list|,
name|PreferenceLevel
operator|.
name|sNotAvailable
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|req
operator|&&
operator|!
name|model
operator|.
name|hasRequiredPreferences
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|model
operator|.
name|getNrDays
argument_list|()
condition|;
name|d
operator|++
control|)
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|model
operator|.
name|getDayCode
argument_list|(
name|d
argument_list|)
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|model
operator|.
name|getNrTimes
argument_list|()
condition|;
name|t
operator|++
control|)
name|model
operator|.
name|setPreference
argument_list|(
name|d
argument_list|,
name|t
argument_list|,
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
block|}
block|}
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|TimePref
name|copy
init|=
operator|(
name|TimePref
operator|)
name|tp
operator|.
name|clone
argument_list|()
decl_stmt|;
name|copy
operator|.
name|setPreference
argument_list|(
name|model
operator|.
name|getPreferences
argument_list|()
argument_list|)
expr_stmt|;
name|fixed
operator|.
name|add
argument_list|(
name|copy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ret
operator|.
name|addAll
argument_list|(
name|fixed
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|Set
name|effectivePreferences
parameter_list|(
name|Class
name|type
parameter_list|,
name|Vector
name|leadInstructors
parameter_list|,
name|boolean
name|fixDurationInTimePreferences
parameter_list|)
block|{
name|Department
name|mngDept
init|=
name|getManagingDept
argument_list|()
decl_stmt|;
if|if
condition|(
name|DistributionPref
operator|.
name|class
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|effectiveDistributionPreferences
argument_list|(
name|mngDept
argument_list|)
return|;
block|}
if|if
condition|(
name|leadInstructors
operator|==
literal|null
operator|||
name|leadInstructors
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|effectivePreferences
argument_list|(
name|type
argument_list|,
name|fixDurationInTimePreferences
argument_list|)
return|;
name|Set
name|instrPrefs
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|leadInstructors
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|leadInstructor
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|instrPrefs
operator|=
name|combinePreferences
argument_list|(
name|instrPrefs
argument_list|,
name|leadInstructor
operator|.
name|prefsOfTypeForDepartment
argument_list|(
name|type
argument_list|,
name|getControllingDept
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// weaken instructor preferences, if needed
if|if
condition|(
name|instrPrefs
operator|!=
literal|null
operator|&&
operator|!
name|instrPrefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|TimePref
operator|.
name|class
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
if|if
condition|(
name|mngDept
operator|.
name|isExternalManager
argument_list|()
operator|&&
operator|!
name|mngDept
operator|.
name|isAllowReqTime
argument_list|()
condition|)
name|instrPrefs
operator|=
name|weakenHardPreferences
argument_list|(
name|instrPrefs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|mngDept
operator|.
name|isExternalManager
argument_list|()
operator|&&
operator|!
name|mngDept
operator|.
name|isAllowReqRoom
argument_list|()
condition|)
name|instrPrefs
operator|=
name|weakenHardPreferences
argument_list|(
name|instrPrefs
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if external department, remove departmental preferences
if|if
condition|(
name|mngDept
operator|.
name|isExternalManager
argument_list|()
operator|&&
name|instrPrefs
operator|!=
literal|null
operator|&&
operator|!
name|instrPrefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|instrPrefs
operator|=
name|removeDepartmentalPreferences
argument_list|(
name|instrPrefs
argument_list|)
expr_stmt|;
block|}
comment|// take subpart preferences
name|Set
name|subpartPrefs
init|=
name|getSchedulingSubpart
argument_list|()
operator|.
name|effectivePreferences
argument_list|(
name|type
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|subpartPrefs
operator|!=
literal|null
operator|&&
operator|!
name|subpartPrefs
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|mngDept
operator|.
name|equals
argument_list|(
name|getSchedulingSubpart
argument_list|()
operator|.
name|getManagingDept
argument_list|()
argument_list|)
condition|)
block|{
comment|// different managers -> weaken preferences, if needed
if|if
condition|(
name|TimePref
operator|.
name|class
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
if|if
condition|(
name|mngDept
operator|.
name|isExternalManager
argument_list|()
operator|&&
operator|!
name|mngDept
operator|.
name|isAllowReqTime
argument_list|()
condition|)
name|subpartPrefs
operator|=
name|weakenHardPreferences
argument_list|(
name|subpartPrefs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|mngDept
operator|.
name|isExternalManager
argument_list|()
operator|&&
operator|!
name|mngDept
operator|.
name|isAllowReqRoom
argument_list|()
condition|)
name|subpartPrefs
operator|=
name|weakenHardPreferences
argument_list|(
name|subpartPrefs
argument_list|)
expr_stmt|;
block|}
comment|// remove departmental preferences
if|if
condition|(
name|mngDept
operator|.
name|isExternalManager
argument_list|()
operator|&&
name|instrPrefs
operator|!=
literal|null
operator|&&
operator|!
name|instrPrefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|subpartPrefs
operator|=
name|removeDepartmentalPreferences
argument_list|(
name|subpartPrefs
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
name|ret
init|=
name|removeNeutralPreferences
argument_list|(
name|combinePreferences
argument_list|(
name|type
argument_list|,
name|subpartPrefs
argument_list|,
name|instrPrefs
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|fixDurationInTimePreferences
condition|?
name|fixDurationInTimePreferences
argument_list|(
name|ret
argument_list|)
else|:
name|ret
return|;
block|}
specifier|public
name|Set
name|effectivePreferences
parameter_list|(
name|Class
name|type
parameter_list|,
name|boolean
name|fixDurationInTimePreferences
parameter_list|)
block|{
name|Department
name|mngDept
init|=
name|getManagingDept
argument_list|()
decl_stmt|;
comment|// special handling of distribution preferences
if|if
condition|(
name|DistributionPref
operator|.
name|class
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|Set
name|prefs
init|=
name|effectiveDistributionPreferences
argument_list|(
name|mngDept
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|mngDept
operator|.
name|isExternalManager
argument_list|()
condition|)
block|{
name|Set
name|instPref
init|=
name|classInstructorPrefsOfType
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|instPref
operator|!=
literal|null
condition|)
name|prefs
operator|.
name|addAll
argument_list|(
name|instPref
argument_list|)
expr_stmt|;
block|}
return|return
name|prefs
return|;
block|}
if|if
condition|(
name|InstructorAttributePref
operator|.
name|class
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|||
name|InstructorPref
operator|.
name|class
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|Preference
argument_list|>
name|prefs
init|=
operator|new
name|TreeSet
argument_list|<
name|Preference
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TeachingClassRequest
name|tcr
range|:
name|getTeachingRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|tcr
operator|.
name|getAssignInstructor
argument_list|()
condition|)
name|prefs
operator|.
name|addAll
argument_list|(
name|tcr
operator|.
name|getTeachingRequest
argument_list|()
operator|.
name|getPreferences
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|prefs
return|;
block|}
name|Set
name|classPrefs
init|=
name|getPreferences
argument_list|(
name|type
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|Set
name|instrPrefs
init|=
literal|null
decl_stmt|;
comment|// take instructor preferences if allowed
if|if
condition|(
name|mngDept
operator|.
name|isInheritInstructorPreferences
argument_list|()
condition|)
block|{
name|instrPrefs
operator|=
name|classInstructorPrefsOfType
argument_list|(
name|type
argument_list|)
expr_stmt|;
comment|// weaken instructor preferences, if needed
if|if
condition|(
name|instrPrefs
operator|!=
literal|null
operator|&&
operator|!
name|instrPrefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|mngDept
operator|.
name|isExternalManager
argument_list|()
operator|&&
name|TimePref
operator|.
name|class
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|mngDept
operator|.
name|isAllowReqTime
argument_list|()
condition|)
name|instrPrefs
operator|=
name|weakenHardPreferences
argument_list|(
name|instrPrefs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|mngDept
operator|.
name|isExternalManager
argument_list|()
operator|&&
operator|!
name|mngDept
operator|.
name|isAllowReqRoom
argument_list|()
condition|)
name|instrPrefs
operator|=
name|weakenHardPreferences
argument_list|(
name|instrPrefs
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if external department, remove departmental preferences
if|if
condition|(
name|mngDept
operator|.
name|isExternalManager
argument_list|()
operator|&&
name|instrPrefs
operator|!=
literal|null
operator|&&
operator|!
name|instrPrefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|instrPrefs
operator|=
name|removeDepartmentalPreferences
argument_list|(
name|instrPrefs
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|hasExactTimePattern
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|TimePref
operator|.
name|class
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
if|if
condition|(
name|classPrefs
operator|!=
literal|null
operator|&&
operator|!
name|classPrefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|classPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|tp
init|=
operator|(
name|TimePref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|tp
operator|.
name|getTimePattern
argument_list|()
operator|!=
literal|null
operator|&&
name|tp
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getType
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|TimePattern
operator|.
name|sTypeExactTime
condition|)
block|{
name|hasExactTimePattern
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
comment|// take subpart preferences
name|Set
name|subpartPrefs
init|=
operator|(
name|hasExactTimePattern
condition|?
literal|null
else|:
name|getSchedulingSubpart
argument_list|()
operator|.
name|effectivePreferences
argument_list|(
name|type
argument_list|,
name|this
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|subpartPrefs
operator|!=
literal|null
operator|&&
operator|!
name|subpartPrefs
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|mngDept
operator|.
name|equals
argument_list|(
name|getSchedulingSubpart
argument_list|()
operator|.
name|getManagingDept
argument_list|()
argument_list|)
condition|)
block|{
comment|// different managers -> weaken preferences, if needed
if|if
condition|(
name|TimePref
operator|.
name|class
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
if|if
condition|(
name|mngDept
operator|.
name|isExternalManager
argument_list|()
operator|&&
operator|!
name|mngDept
operator|.
name|isAllowReqTime
argument_list|()
condition|)
name|subpartPrefs
operator|=
name|weakenHardPreferences
argument_list|(
name|subpartPrefs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|mngDept
operator|.
name|isExternalManager
argument_list|()
operator|&&
operator|!
name|mngDept
operator|.
name|isAllowReqRoom
argument_list|()
condition|)
name|subpartPrefs
operator|=
name|weakenHardPreferences
argument_list|(
name|subpartPrefs
argument_list|)
expr_stmt|;
block|}
comment|// remove departmental preferences
if|if
condition|(
name|mngDept
operator|.
name|isExternalManager
argument_list|()
operator|&&
name|instrPrefs
operator|!=
literal|null
operator|&&
operator|!
name|instrPrefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|subpartPrefs
operator|=
name|removeDepartmentalPreferences
argument_list|(
name|subpartPrefs
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
name|ret
init|=
name|removeNeutralPreferences
argument_list|(
name|combinePreferences
argument_list|(
name|type
argument_list|,
name|classPrefs
argument_list|,
name|subpartPrefs
argument_list|,
name|instrPrefs
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|fixDurationInTimePreferences
condition|?
name|fixDurationInTimePreferences
argument_list|(
name|ret
argument_list|)
else|:
name|ret
return|;
block|}
specifier|public
name|String
name|instructorHtml
parameter_list|(
name|String
name|instructorNameFormat
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|getClassInstructors
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|""
return|;
name|TreeSet
name|sortedInstructors
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|InstructorComparator
argument_list|()
argument_list|)
decl_stmt|;
name|sortedInstructors
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|getClassInstructors
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|sortedInstructors
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|ClassInstructor
name|ci
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ci
operator|=
operator|(
name|ClassInstructor
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|String
name|title
init|=
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getNameLastFirst
argument_list|()
decl_stmt|;
name|title
operator|+=
literal|" ("
operator|+
operator|(
name|ci
operator|.
name|getResponsibility
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|ci
operator|.
name|getResponsibility
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|" "
operator|)
operator|+
name|ci
operator|.
name|getPercentShare
argument_list|()
operator|+
literal|"%"
operator|+
operator|(
name|ci
operator|.
name|isLead
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|", "
operator|+
name|MSG
operator|.
name|toolTipInstructorLead
argument_list|()
else|:
literal|""
operator|)
operator|+
literal|")"
expr_stmt|;
if|if
condition|(
operator|!
name|isDisplayInstructor
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|title
operator|+=
name|MSG
operator|.
name|toolTipInstructorDoNotDisplay
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ci
operator|.
name|isLead
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<span style='font-weight:bold;"
operator|+
operator|(
name|isDisplayInstructor
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|""
else|:
literal|"font-style:italic;"
operator|)
operator|+
literal|"' title='"
operator|+
name|title
operator|+
literal|"'>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<span title='"
operator|+
name|title
operator|+
literal|"'>"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getName
argument_list|(
name|instructorNameFormat
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ci
operator|.
name|getResponsibility
argument_list|()
operator|!=
literal|null
operator|&&
name|ci
operator|.
name|getResponsibility
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|ci
operator|.
name|getResponsibility
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|" ("
operator|+
name|ci
operator|.
name|getResponsibility
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</span>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"<br>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|public
name|String
name|instructorText
parameter_list|(
name|String
name|instructorNameFormat
parameter_list|,
name|String
name|separator
parameter_list|)
block|{
if|if
condition|(
name|getClassInstructors
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|""
return|;
name|TreeSet
name|sortedInstructors
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|InstructorComparator
argument_list|()
argument_list|)
decl_stmt|;
name|sortedInstructors
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|getClassInstructors
argument_list|()
argument_list|)
expr_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|sortedInstructors
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getName
argument_list|(
name|instructorNameFormat
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|htmlForTimePatterns
parameter_list|(
name|Set
name|patterns
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|patterns
operator|!=
literal|null
condition|)
block|{
name|Iterator
name|it
init|=
name|patterns
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|TimePattern
name|t
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|t
operator|=
operator|(
name|TimePattern
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<BR>"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|patterns
operator|==
literal|null
operator|||
name|patterns
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|DurationModel
name|dm
init|=
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getDurationModel
argument_list|()
decl_stmt|;
name|Integer
name|ah
init|=
name|dm
operator|.
name|getArrangedHours
argument_list|(
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|,
name|effectiveDatePattern
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ah
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<span title='Arrange Hours'>Arr Hrs</span>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<span title='Arrange "
operator|+
name|ah
operator|+
literal|" Hours'>Arr "
operator|+
name|ah
operator|+
literal|" Hrs</span>"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|public
name|String
name|effectiveTimePatternHtml
parameter_list|()
block|{
return|return
operator|(
name|htmlForTimePatterns
argument_list|(
name|this
operator|.
name|effectiveTimePatterns
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|public
name|String
name|timePatternHtml
parameter_list|()
block|{
return|return
operator|(
name|htmlForTimePatterns
argument_list|(
name|this
operator|.
name|getTimePatterns
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|public
name|Integer
name|getSectionNumber
parameter_list|()
block|{
return|return
name|getSectionNumber
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|Integer
name|getSectionNumber
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
return|return
name|getSectionNumber
argument_list|(
name|hibSession
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|Integer
name|getSectionNumber
parameter_list|(
name|boolean
name|save
parameter_list|)
block|{
return|return
name|getSectionNumber
argument_list|(
literal|null
argument_list|,
name|save
argument_list|)
return|;
block|}
specifier|public
name|Integer
name|getSectionNumber
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|boolean
name|save
parameter_list|)
block|{
name|Integer
name|sectionNumber
init|=
name|getSectionNumberCache
argument_list|()
decl_stmt|;
if|if
condition|(
name|sectionNumber
operator|!=
literal|null
condition|)
return|return
name|sectionNumber
return|;
name|Comparator
name|cmp
init|=
operator|new
name|Comparator
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|Class_
name|c1
init|=
operator|(
name|Class_
operator|)
name|o1
decl_stmt|;
name|Class_
name|c2
init|=
operator|(
name|Class_
operator|)
name|o2
decl_stmt|;
if|if
condition|(
name|c1
operator|.
name|getParentClass
argument_list|()
operator|==
literal|null
operator|||
name|c2
operator|.
name|getParentClass
argument_list|()
operator|==
literal|null
operator|||
name|c1
operator|.
name|getParentClass
argument_list|()
operator|.
name|equals
argument_list|(
name|c2
operator|.
name|getParentClass
argument_list|()
argument_list|)
condition|)
return|return
name|c1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
else|else
return|return
name|compare
argument_list|(
name|c1
operator|.
name|getParentClass
argument_list|()
argument_list|,
name|c2
operator|.
name|getParentClass
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getSchedulingSubpart
argument_list|()
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cmp
operator|.
name|compare
argument_list|(
name|clazz
argument_list|,
name|this
argument_list|)
operator|<
literal|0
condition|)
name|idx
operator|++
expr_stmt|;
block|}
name|sectionNumber
operator|=
operator|new
name|Integer
argument_list|(
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getFirstSectionNumber
argument_list|(
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
operator|+
name|idx
argument_list|)
expr_stmt|;
name|setSectionNumberCache
argument_list|(
name|sectionNumber
argument_list|)
expr_stmt|;
if|if
condition|(
name|save
condition|)
block|{
if|if
condition|(
name|hibSession
operator|!=
literal|null
condition|)
block|{
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|new
name|Class_DAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|this
argument_list|)
expr_stmt|;
operator|(
operator|new
name|Class_DAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|sectionNumber
return|;
block|}
specifier|public
name|String
name|getSectionNumberString
parameter_list|()
block|{
return|return
name|getSectionNumber
argument_list|()
operator|+
name|getSchedulingSubpart
argument_list|()
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
return|;
block|}
specifier|public
name|String
name|getSectionNumberString
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
return|return
name|getSectionNumber
argument_list|(
name|hibSession
argument_list|)
operator|+
name|getSchedulingSubpart
argument_list|()
operator|.
name|getSchedulingSubpartSuffix
argument_list|(
name|hibSession
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|getLeadInstructors
parameter_list|()
block|{
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|DepartmentalInstructor
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|getClassInstructors
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|ret
return|;
block|}
for|for
control|(
name|ClassInstructor
name|classInstructor
range|:
name|getClassInstructors
argument_list|()
control|)
block|{
if|if
condition|(
name|classInstructor
operator|.
name|isLead
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|ret
operator|.
name|add
argument_list|(
name|classInstructor
operator|.
name|getInstructor
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**      * @return Class Label of the form {CourseName} {Itype} {[config]} {Section No.}      */
specifier|public
name|String
name|getClassLabel
parameter_list|()
block|{
comment|/*         SchedulingSubpart ss = getSchedulingSubpart();     	String itypeDesc = ss.getItypeDesc();     	if (ss.getInstrOfferingConfig().getInstructionalOffering().hasMultipleConfigurations())     		itypeDesc += " [" + ss.getInstrOfferingConfig().getName() + "]";         */
return|return
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|" "
operator|+
name|getSectionNumberString
argument_list|()
return|;
comment|//    	return(getClassLabel(getSchedulingSubpart().getControllingCourseOffering()));
block|}
specifier|public
name|String
name|getClassLabel
parameter_list|(
name|CourseOffering
name|course
parameter_list|,
name|boolean
name|includeSuffix
parameter_list|)
block|{
if|if
condition|(
name|includeSuffix
condition|)
block|{
name|String
name|extId
init|=
name|getClassSuffix
argument_list|(
name|course
argument_list|)
decl_stmt|;
return|return
name|course
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|" "
operator|+
name|getSectionNumberString
argument_list|()
operator|+
operator|(
name|extId
operator|==
literal|null
operator|||
name|extId
operator|.
name|isEmpty
argument_list|()
operator|||
name|extId
operator|.
name|equalsIgnoreCase
argument_list|(
name|getSectionNumberString
argument_list|()
argument_list|)
condition|?
literal|""
else|:
literal|" - "
operator|+
name|extId
operator|)
return|;
block|}
else|else
block|{
return|return
name|course
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|" "
operator|+
name|getSectionNumberString
argument_list|()
return|;
block|}
block|}
specifier|public
name|String
name|getClassLabel
parameter_list|(
name|boolean
name|includeSuffix
parameter_list|)
block|{
return|return
name|getClassLabel
argument_list|(
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
argument_list|,
name|includeSuffix
argument_list|)
return|;
block|}
specifier|public
name|String
name|getClassLabel
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
return|return
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|" "
operator|+
name|getSectionNumberString
argument_list|(
name|hibSession
argument_list|)
return|;
block|}
specifier|public
name|String
name|getClassLabelWithTitle
parameter_list|()
block|{
return|return
name|getCourseNameWithTitle
argument_list|()
operator|+
literal|" "
operator|+
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|" "
operator|+
name|getSectionNumberString
argument_list|()
return|;
comment|//    	return(getClassLabelWithTitle(getSchedulingSubpart().getControllingCourseOffering()));
block|}
comment|/**      * @see getClassLabel()      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClassLabel
argument_list|()
return|;
block|}
comment|/** 	 * @return Class type to distinguish the sub class in PrefGroup 	 */
specifier|public
name|Class
name|getInstanceOf
parameter_list|()
block|{
return|return
name|Class_
operator|.
name|class
return|;
block|}
specifier|public
name|String
name|htmlLabel
parameter_list|()
block|{
return|return
operator|(
name|getItypeDesc
argument_list|()
operator|+
literal|" "
operator|+
name|getSectionNumberString
argument_list|()
operator|)
return|;
block|}
specifier|public
name|boolean
name|canBeDeleted
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|getChildClasses
argument_list|()
operator|!=
literal|null
operator|&&
name|this
operator|.
name|getChildClasses
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
operator|(
literal|false
operator|)
return|;
block|}
if|if
condition|(
name|this
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|totalCapacity
init|=
literal|0
decl_stmt|;
name|Class_
name|c
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|this
operator|.
name|getParentClass
argument_list|()
operator|.
name|getChildClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|c
operator|=
operator|(
name|Class_
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|totalCapacity
operator|+=
name|c
operator|.
name|getExpectedCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|totalCapacity
operator|-=
name|this
operator|.
name|getExpectedCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|totalCapacity
operator|<
name|this
operator|.
name|getParentClass
argument_list|()
operator|.
name|getExpectedCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
condition|)
block|{
return|return
operator|(
literal|false
operator|)
return|;
block|}
block|}
return|return
operator|(
literal|true
operator|)
return|;
block|}
comment|/**      * Remove class from instructor list      * @param ci      */
specifier|public
name|void
name|removeClassInstructor
parameter_list|(
name|ClassInstructor
name|classInstr
parameter_list|)
block|{
name|Set
name|s
init|=
name|this
operator|.
name|getClassInstructors
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|s
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ci
operator|.
name|getUniqueId
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|classInstr
operator|.
name|getUniqueId
argument_list|()
operator|.
name|intValue
argument_list|()
condition|)
block|{
name|s
operator|.
name|remove
argument_list|(
name|ci
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
specifier|public
name|DatePattern
name|effectiveDatePattern
parameter_list|()
block|{
if|if
condition|(
name|getDatePattern
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|getDatePattern
argument_list|()
return|;
return|return
name|getSchedulingSubpart
argument_list|()
operator|.
name|effectiveDatePattern
argument_list|()
return|;
block|}
specifier|public
name|Set
argument_list|<
name|Location
argument_list|>
name|getAvailableRooms
parameter_list|()
block|{
name|Set
argument_list|<
name|Location
argument_list|>
name|rooms
init|=
operator|new
name|TreeSet
argument_list|<
name|Location
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getManagingDept
argument_list|()
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|roomDept
init|=
operator|(
name|RoomDept
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|rooms
operator|.
name|add
argument_list|(
name|roomDept
operator|.
name|getRoom
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|rooms
return|;
block|}
specifier|public
name|Set
name|getAvailableRoomFeatures
parameter_list|()
block|{
name|Set
name|features
init|=
operator|new
name|TreeSet
argument_list|(
name|GlobalRoomFeature
operator|.
name|getAllGlobalRoomFeatures
argument_list|(
name|getSession
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Department
name|dept
init|=
name|getManagingDept
argument_list|()
decl_stmt|;
if|if
condition|(
name|dept
operator|!=
literal|null
condition|)
name|features
operator|.
name|addAll
argument_list|(
name|DepartmentRoomFeature
operator|.
name|getAllDepartmentRoomFeatures
argument_list|(
name|dept
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|features
return|;
block|}
specifier|public
name|Set
name|getAvailableRoomGroups
parameter_list|()
block|{
name|Set
name|groups
init|=
name|super
operator|.
name|getAvailableRoomGroups
argument_list|()
decl_stmt|;
name|Department
name|dept
init|=
name|getManagingDept
argument_list|()
decl_stmt|;
if|if
condition|(
name|dept
operator|!=
literal|null
condition|)
name|groups
operator|.
name|addAll
argument_list|(
name|RoomGroup
operator|.
name|getAllDepartmentRoomGroups
argument_list|(
name|dept
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|groups
return|;
block|}
specifier|public
name|Set
name|getAvailableAttributeTypes
parameter_list|()
block|{
return|return
name|getControllingDept
argument_list|()
operator|.
name|getAvailableAttributeTypes
argument_list|()
return|;
block|}
specifier|public
name|Set
name|getAvailableAttributes
parameter_list|()
block|{
return|return
name|getControllingDept
argument_list|()
operator|.
name|getAvailableAttributes
argument_list|()
return|;
block|}
specifier|public
name|Class_
name|getNextClass
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|Right
name|right
parameter_list|)
block|{
return|return
name|getNextClass
argument_list|(
name|context
argument_list|,
operator|new
name|NavigationComparator
argument_list|()
argument_list|,
name|right
argument_list|)
return|;
block|}
specifier|public
name|Class_
name|getPreviousClass
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|Right
name|right
parameter_list|)
block|{
return|return
name|getPreviousClass
argument_list|(
name|context
argument_list|,
operator|new
name|NavigationComparator
argument_list|()
argument_list|,
name|right
argument_list|)
return|;
block|}
specifier|public
name|Class_
name|getNextClass
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|Comparator
name|cmp
parameter_list|,
name|Right
name|right
parameter_list|)
block|{
name|Long
name|nextId
init|=
name|Navigation
operator|.
name|getNext
argument_list|(
name|context
argument_list|,
name|Navigation
operator|.
name|sClassLevel
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|nextId
operator|.
name|longValue
argument_list|()
operator|<
literal|0
condition|)
return|return
literal|null
return|;
name|Class_
name|next
init|=
operator|(
operator|new
name|Class_DAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|nextId
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|right
operator|!=
literal|null
operator|&&
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|Department
operator|.
name|class
operator|.
name|equals
argument_list|(
name|right
operator|.
name|type
argument_list|()
argument_list|)
condition|?
name|next
operator|.
name|getControllingDept
argument_list|()
else|:
name|next
argument_list|,
name|right
argument_list|)
condition|)
return|return
name|next
operator|.
name|getNextClass
argument_list|(
name|context
argument_list|,
name|cmp
argument_list|,
name|right
argument_list|)
return|;
return|return
name|next
return|;
block|}
name|Class_
name|next
init|=
literal|null
decl_stmt|;
name|SchedulingSubpart
name|subpart
init|=
name|getSchedulingSubpart
argument_list|()
decl_stmt|;
while|while
condition|(
name|next
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|subpart
operator|==
literal|null
condition|)
break|break;
for|for
control|(
name|Iterator
name|i
init|=
name|subpart
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|right
operator|!=
literal|null
operator|&&
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|Department
operator|.
name|class
operator|.
name|equals
argument_list|(
name|right
operator|.
name|type
argument_list|()
argument_list|)
condition|?
name|c
operator|.
name|getControllingDept
argument_list|()
else|:
name|c
argument_list|,
name|right
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|subpart
operator|.
name|equals
argument_list|(
name|getSchedulingSubpart
argument_list|()
argument_list|)
operator|&&
name|cmp
operator|.
name|compare
argument_list|(
name|this
argument_list|,
name|c
argument_list|)
operator|>=
literal|0
condition|)
continue|continue;
if|if
condition|(
name|next
operator|==
literal|null
operator|||
name|cmp
operator|.
name|compare
argument_list|(
name|next
argument_list|,
name|c
argument_list|)
operator|>
literal|0
condition|)
name|next
operator|=
name|c
expr_stmt|;
block|}
name|subpart
operator|=
name|subpart
operator|.
name|getNextSchedulingSubpart
argument_list|(
name|context
argument_list|,
name|cmp
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|next
return|;
block|}
specifier|public
name|Class_
name|getPreviousClass
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|Comparator
name|cmp
parameter_list|,
name|Right
name|right
parameter_list|)
block|{
name|Long
name|previosId
init|=
name|Navigation
operator|.
name|getPrevious
argument_list|(
name|context
argument_list|,
name|Navigation
operator|.
name|sClassLevel
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|previosId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|previosId
operator|.
name|longValue
argument_list|()
operator|<
literal|0
condition|)
return|return
literal|null
return|;
name|Class_
name|previos
init|=
operator|(
operator|new
name|Class_DAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|previosId
argument_list|)
decl_stmt|;
if|if
condition|(
name|previos
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|right
operator|!=
literal|null
operator|&&
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|Department
operator|.
name|class
operator|.
name|equals
argument_list|(
name|right
operator|.
name|type
argument_list|()
argument_list|)
condition|?
name|previos
operator|.
name|getControllingDept
argument_list|()
else|:
name|previos
argument_list|,
name|right
argument_list|)
condition|)
return|return
name|previos
operator|.
name|getPreviousClass
argument_list|(
name|context
argument_list|,
name|cmp
argument_list|,
name|right
argument_list|)
return|;
return|return
name|previos
return|;
block|}
name|Class_
name|previous
init|=
literal|null
decl_stmt|;
name|SchedulingSubpart
name|subpart
init|=
name|getSchedulingSubpart
argument_list|()
decl_stmt|;
while|while
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|subpart
operator|==
literal|null
condition|)
break|break;
for|for
control|(
name|Iterator
name|i
init|=
name|subpart
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|right
operator|!=
literal|null
operator|&&
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|Department
operator|.
name|class
operator|.
name|equals
argument_list|(
name|right
operator|.
name|type
argument_list|()
argument_list|)
condition|?
name|c
operator|.
name|getControllingDept
argument_list|()
else|:
name|c
argument_list|,
name|right
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|subpart
operator|.
name|equals
argument_list|(
name|getSchedulingSubpart
argument_list|()
argument_list|)
operator|&&
name|cmp
operator|.
name|compare
argument_list|(
name|this
argument_list|,
name|c
argument_list|)
operator|<=
literal|0
condition|)
continue|continue;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|cmp
operator|.
name|compare
argument_list|(
name|previous
argument_list|,
name|c
argument_list|)
operator|<
literal|0
condition|)
name|previous
operator|=
name|c
expr_stmt|;
block|}
name|subpart
operator|=
name|subpart
operator|.
name|getPreviousSchedulingSubpart
argument_list|(
name|context
argument_list|,
name|cmp
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|previous
return|;
block|}
comment|/**      * Deletes all distribution prefs and updates the class_ objects      * @param hibSession      */
specifier|public
name|void
name|deleteAllDistributionPreferences
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|deleteAllDistributionPreferences
argument_list|(
name|hibSession
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Deletes all distribution prefs      * @param hibSession      * @param updateClass If true then class_ object is updated      */
specifier|public
name|void
name|deleteAllDistributionPreferences
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|boolean
name|updateClass
parameter_list|)
block|{
name|boolean
name|deleted
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|getDistributionObjects
argument_list|()
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|Iterator
name|i
init|=
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|relatedObject
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|DistributionPref
name|distributionPref
init|=
name|relatedObject
operator|.
name|getDistributionPref
argument_list|()
decl_stmt|;
name|distributionPref
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|remove
argument_list|(
name|relatedObject
argument_list|)
expr_stmt|;
name|Integer
name|seqNo
init|=
name|relatedObject
operator|.
name|getSequenceNumber
argument_list|()
decl_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|relatedObject
argument_list|)
expr_stmt|;
name|deleted
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|distributionPref
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PreferenceGroup
name|owner
init|=
name|distributionPref
operator|.
name|getOwner
argument_list|()
decl_stmt|;
name|owner
operator|.
name|getPreferences
argument_list|()
operator|.
name|remove
argument_list|(
name|distributionPref
argument_list|)
expr_stmt|;
name|getPreferences
argument_list|()
operator|.
name|remove
argument_list|(
name|distributionPref
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|distributionPref
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|seqNo
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|j
init|=
name|distributionPref
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|dObj
init|=
operator|(
name|DistributionObject
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|seqNo
operator|.
name|compareTo
argument_list|(
name|dObj
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
block|{
name|dObj
operator|.
name|setSequenceNumber
argument_list|(
operator|new
name|Integer
argument_list|(
name|dObj
operator|.
name|getSequenceNumber
argument_list|()
operator|.
name|intValue
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|dObj
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|updateClass
condition|)
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|distributionPref
argument_list|)
expr_stmt|;
block|}
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|deleted
operator|&&
name|updateClass
condition|)
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Integer
name|getMinRoomLimit
parameter_list|()
block|{
name|int
name|expCap
init|=
operator|(
name|getExpectedCapacity
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|getExpectedCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
operator|)
decl_stmt|;
name|float
name|roomRatio
init|=
operator|(
name|getRoomRatio
argument_list|()
operator|==
literal|null
condition|?
literal|0.0f
else|:
name|getRoomRatio
argument_list|()
operator|.
name|floatValue
argument_list|()
operator|)
decl_stmt|;
return|return
operator|new
name|Integer
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|expCap
operator|<=
literal|0
condition|?
name|roomRatio
else|:
name|expCap
operator|*
name|roomRatio
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
name|findAll
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
return|return
name|findAll
argument_list|(
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|,
name|sessionId
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
name|findAll
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Long
name|sessionId
parameter_list|)
block|{
return|return
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct c from Class_ c where "
operator|+
literal|"c.schedulingSubpart.instrOfferingConfig.instructionalOffering.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|List
name|findAllForControllingSubjectArea
parameter_list|(
name|String
name|subjectAreaAbbv
parameter_list|,
name|Long
name|sessionId
parameter_list|)
block|{
return|return
operator|(
name|findAllForControllingSubjectArea
argument_list|(
name|subjectAreaAbbv
argument_list|,
name|sessionId
argument_list|,
operator|(
operator|new
name|Class_DAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|public
specifier|static
name|List
name|findAllForControllingSubjectArea
parameter_list|(
name|String
name|subjectAreaAbbv
parameter_list|,
name|Long
name|sessionId
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
return|return
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct c from Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings as co where "
operator|+
literal|"co.subjectArea.subjectAreaAbbreviation=:subjectAreaAbbv and c.schedulingSubpart.instrOfferingConfig.instructionalOffering.session.uniqueId=:sessionId and co.isControl=1"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"subjectAreaAbbv"
argument_list|,
name|subjectAreaAbbv
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setFlushMode
argument_list|(
name|FlushMode
operator|.
name|MANUAL
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
name|String
name|getDivSecNumber
parameter_list|()
block|{
if|if
condition|(
name|getParentClass
argument_list|()
operator|!=
literal|null
operator|&&
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|equals
argument_list|(
name|getParentClass
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getParentClass
argument_list|()
operator|.
name|getDivSecNumber
argument_list|()
return|;
block|}
name|String
name|suffix
init|=
name|getClassSuffix
argument_list|()
decl_stmt|;
if|if
condition|(
name|suffix
operator|!=
literal|null
operator|&&
name|suffix
operator|.
name|length
argument_list|()
operator|==
literal|6
condition|)
return|return
name|suffix
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
operator|+
literal|"-"
operator|+
name|suffix
operator|.
name|substring
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|)
return|;
return|return
name|suffix
return|;
block|}
specifier|public
name|int
name|getClassLimit
parameter_list|()
block|{
return|return
name|getClassLimit
argument_list|(
operator|new
name|CommitedClassAssignmentProxy
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|getClassLimit
parameter_list|(
name|Assignment
name|assignment
parameter_list|)
block|{
name|int
name|minLimit
init|=
name|getExpectedCapacity
argument_list|()
decl_stmt|;
name|int
name|maxLimit
init|=
name|getMaxExpectedCapacity
argument_list|()
decl_stmt|;
name|int
name|limit
init|=
name|maxLimit
decl_stmt|;
if|if
condition|(
name|minLimit
operator|<
name|maxLimit
operator|&&
name|assignment
operator|!=
literal|null
condition|)
block|{
name|int
name|roomLimit
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|assignment
operator|.
name|getPlacement
argument_list|()
operator|.
name|getRoomSize
argument_list|()
operator|/
operator|(
name|getRoomRatio
argument_list|()
operator|==
literal|null
condition|?
literal|1.0f
else|:
name|getRoomRatio
argument_list|()
operator|)
argument_list|)
decl_stmt|;
name|limit
operator|=
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|minLimit
argument_list|,
name|roomLimit
argument_list|)
argument_list|,
name|maxLimit
argument_list|)
expr_stmt|;
block|}
return|return
name|limit
return|;
block|}
specifier|public
name|int
name|getClassLimit
parameter_list|(
name|ClassAssignmentProxy
name|proxy
parameter_list|)
block|{
comment|// min and max limits
name|int
name|minLimit
init|=
name|getExpectedCapacity
argument_list|()
decl_stmt|;
name|int
name|maxLimit
init|=
name|getMaxExpectedCapacity
argument_list|()
decl_stmt|;
comment|// is there a twiggle room?
if|if
condition|(
name|minLimit
operator|==
name|maxLimit
condition|)
return|return
name|maxLimit
return|;
comment|// get assignment
name|Assignment
name|assignment
init|=
literal|null
decl_stmt|;
try|try
block|{
name|assignment
operator|=
operator|(
name|proxy
operator|==
literal|null
condition|?
literal|null
else|:
name|proxy
operator|.
name|getAssignment
argument_list|(
name|this
argument_list|)
operator|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|// if there is an assignment, check the room limit
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
name|int
name|roomLimit
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|assignment
operator|.
name|getPlacement
argument_list|()
operator|.
name|getRoomSize
argument_list|()
operator|/
operator|(
name|getRoomRatio
argument_list|()
operator|==
literal|null
condition|?
literal|1.0f
else|:
name|getRoomRatio
argument_list|()
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|roomLimit
operator|<
name|maxLimit
condition|)
name|maxLimit
operator|=
name|roomLimit
expr_stmt|;
block|}
comment|// if there are children classes ...
for|for
control|(
name|SchedulingSubpart
name|childSubpart
range|:
name|getSchedulingSubpart
argument_list|()
operator|.
name|getChildSubparts
argument_list|()
control|)
block|{
comment|// take all children classes of the same subpart, sum their class limit
name|int
name|childrenLimit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Class_
name|childClass
range|:
name|getChildClasses
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|childClass
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|equals
argument_list|(
name|childSubpart
argument_list|)
condition|)
continue|continue;
name|childrenLimit
operator|+=
name|childClass
operator|.
name|getClassLimit
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
comment|// children class limit cannot be exceeded
if|if
condition|(
name|childrenLimit
operator|<
name|maxLimit
condition|)
name|maxLimit
operator|=
name|childrenLimit
expr_stmt|;
block|}
return|return
name|Math
operator|.
name|max
argument_list|(
name|minLimit
argument_list|,
name|maxLimit
argument_list|)
return|;
block|}
specifier|public
name|int
name|getClassLimit
parameter_list|(
name|CourseOffering
name|offering
parameter_list|)
block|{
return|return
name|getClassLimit
argument_list|(
operator|new
name|CommitedClassAssignmentProxy
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|hasChildClass
parameter_list|(
name|Reservation
name|r
parameter_list|)
block|{
if|if
condition|(
name|r
operator|.
name|getClasses
argument_list|()
operator|.
name|contains
argument_list|(
name|this
argument_list|)
condition|)
return|return
literal|true
return|;
for|for
control|(
name|Class_
name|child
range|:
name|getChildClasses
argument_list|()
control|)
if|if
condition|(
name|child
operator|.
name|hasChildClass
argument_list|(
name|r
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|hasClass
parameter_list|(
name|Reservation
name|r
parameter_list|)
block|{
if|if
condition|(
name|r
operator|.
name|getClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|Class_
name|c
init|=
name|this
decl_stmt|;
while|while
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|r
operator|.
name|getClasses
argument_list|()
operator|.
name|contains
argument_list|(
name|c
argument_list|)
condition|)
return|return
literal|true
return|;
name|c
operator|=
name|c
operator|.
name|getParentClass
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Class_
name|child
range|:
name|getChildClasses
argument_list|()
control|)
if|if
condition|(
name|child
operator|.
name|hasChildClass
argument_list|(
name|r
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
comment|/**      * Delete all objects that have an identifying relationship with a class      * Usually use this method when one needs to delete a class      * (in which case set updateClass to false because the class will eventually be deleted)      * @param hibSession      * @param updateClass Updates class when all dependent objects are deleted      */
specifier|public
name|void
name|deleteAllDependentObjects
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|boolean
name|updateClass
parameter_list|)
block|{
comment|// Call individual methods to delete specific collections
name|deleteAllDistributionPreferences
argument_list|(
name|hibSession
argument_list|,
name|updateClass
argument_list|)
expr_stmt|;
name|deleteClassInstructors
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|deleteAssignments
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|Exam
operator|.
name|deleteFromExams
argument_list|(
name|hibSession
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|Event
operator|.
name|deleteFromEvents
argument_list|(
name|hibSession
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// Add more collection deletes if needed
if|if
condition|(
name|updateClass
condition|)
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Delete all class instructors 	 * @param hibSession 	 */
specifier|public
name|void
name|deleteClassInstructors
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|Set
name|s
init|=
name|getClassInstructors
argument_list|()
decl_stmt|;
comment|//deleteObjectsFromCollection(hibSession, s);
if|if
condition|(
name|s
operator|==
literal|null
operator|||
name|s
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
for|for
control|(
name|Iterator
name|i
init|=
name|s
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
operator|(
name|i
operator|.
name|next
argument_list|()
operator|)
decl_stmt|;
name|DepartmentalInstructor
name|di
init|=
operator|new
name|DepartmentalInstructorDAO
argument_list|()
operator|.
name|get
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|di
operator|.
name|getClasses
argument_list|()
operator|.
name|remove
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setInstructor
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setClassInstructing
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|di
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** 	 * Delete all class assignments 	 * @param hibSession 	 */
specifier|public
name|void
name|deleteAssignments
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|Set
name|s
init|=
name|getAssignments
argument_list|()
decl_stmt|;
name|deleteObjectsFromCollection
argument_list|(
name|hibSession
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Common method to delete objects from acollection 	 * @param hibSession 	 * @param s Collection from which objects have to be deleted 	 */
specifier|private
name|void
name|deleteObjectsFromCollection
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Collection
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
operator|||
name|s
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
for|for
control|(
name|Iterator
name|i
init|=
name|s
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|hibSession
operator|.
name|delete
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isOddOrEvenWeeksOnly
parameter_list|()
block|{
if|if
condition|(
name|effectiveDatePattern
argument_list|()
operator|!=
literal|null
operator|&&
name|effectiveDatePattern
argument_list|()
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|Integer
argument_list|(
name|DatePattern
operator|.
name|sTypeAlternate
argument_list|)
argument_list|)
condition|)
block|{
return|return
operator|(
literal|true
operator|)
return|;
block|}
return|return
operator|(
literal|false
operator|)
return|;
block|}
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|Class_
name|newClass
init|=
operator|new
name|Class_
argument_list|()
decl_stmt|;
name|newClass
operator|.
name|setDatePattern
argument_list|(
name|getDatePattern
argument_list|()
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setEnabledForStudentScheduling
argument_list|(
name|isEnabledForStudentScheduling
argument_list|()
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setDisplayInstructor
argument_list|(
name|isDisplayInstructor
argument_list|()
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setExpectedCapacity
argument_list|(
name|getExpectedCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setManagingDept
argument_list|(
name|getManagingDept
argument_list|()
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setMaxExpectedCapacity
argument_list|(
name|getMaxExpectedCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setNbrRooms
argument_list|(
name|getNbrRooms
argument_list|()
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setNotes
argument_list|(
name|getNotes
argument_list|()
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setRoomRatio
argument_list|(
name|getRoomRatio
argument_list|()
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setSchedulePrintNote
argument_list|(
name|getSchedulePrintNote
argument_list|()
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setSchedulingSubpart
argument_list|(
name|getSchedulingSubpart
argument_list|()
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setCancelled
argument_list|(
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|newClass
operator|)
return|;
block|}
specifier|public
name|Object
name|cloneWithPreferences
parameter_list|()
block|{
name|Class_
name|newClass
init|=
operator|(
name|Class_
operator|)
name|this
operator|.
name|clone
argument_list|()
decl_stmt|;
if|if
condition|(
name|getPreferences
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Preference
name|origPref
init|=
literal|null
decl_stmt|;
name|Preference
name|newPref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|prefIt
init|=
name|getPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|prefIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|origPref
operator|=
operator|(
name|Preference
operator|)
name|prefIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|origPref
operator|instanceof
name|DistributionPref
operator|)
condition|)
block|{
name|newPref
operator|=
operator|(
name|Preference
operator|)
name|origPref
operator|.
name|clone
argument_list|()
expr_stmt|;
name|newPref
operator|.
name|setOwner
argument_list|(
name|newClass
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|addTopreferences
argument_list|(
name|newPref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|getClassInstructors
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getClassInstructors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ClassInstructor
name|ci
init|=
literal|null
decl_stmt|;
name|ClassInstructor
name|newCi
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|ciIt
init|=
name|getClassInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|ciIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ci
operator|=
operator|(
name|ClassInstructor
operator|)
name|ciIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|newCi
operator|=
operator|new
name|ClassInstructor
argument_list|()
expr_stmt|;
name|newCi
operator|.
name|setClassInstructing
argument_list|(
name|newClass
argument_list|)
expr_stmt|;
name|newCi
operator|.
name|setInstructor
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
argument_list|)
expr_stmt|;
name|newCi
operator|.
name|setLead
argument_list|(
name|ci
operator|.
name|isLead
argument_list|()
argument_list|)
expr_stmt|;
name|newCi
operator|.
name|setPercentShare
argument_list|(
name|ci
operator|.
name|getPercentShare
argument_list|()
argument_list|)
expr_stmt|;
name|newCi
operator|.
name|setResponsibility
argument_list|(
name|ci
operator|.
name|getResponsibility
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|addToclasses
argument_list|(
name|newCi
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|addToclassInstructors
argument_list|(
name|newCi
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|newClass
operator|)
return|;
block|}
specifier|public
specifier|static
name|Class_
name|findByExternalId
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|String
name|externalId
parameter_list|)
block|{
return|return
operator|(
name|Class_
operator|)
operator|new
name|Class_DAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c from Class_ c where c.schedulingSubpart.instrOfferingConfig.instructionalOffering.session.uniqueId=:sessionId and c.externalUniqueId=:externalId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|externalId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Class_
name|findByIdRolledForwardFrom
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Long
name|uniqueIdRolledForwardFrom
parameter_list|)
block|{
return|return
operator|(
name|Class_
operator|)
operator|new
name|Class_DAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c from Class_ c where c.schedulingSubpart.instrOfferingConfig.instructionalOffering.session.uniqueId=:sessionId and c.uniqueIdRolledForwardFrom=:uniqueIdRolledForwardFrom"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"uniqueIdRolledForwardFrom"
argument_list|,
name|uniqueIdRolledForwardFrom
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|private
name|ClassEvent
name|iEvent
init|=
literal|null
decl_stmt|;
specifier|public
name|ClassEvent
name|getEvent
parameter_list|()
block|{
if|if
condition|(
name|iEvent
operator|==
literal|null
condition|)
name|iEvent
operator|=
operator|(
name|ClassEvent
operator|)
operator|new
name|Class_DAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e from ClassEvent e left join fetch e.meetings m where e.clazz.uniqueId=:classId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"classId"
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
expr_stmt|;
return|return
name|iEvent
return|;
block|}
specifier|public
name|void
name|setEvent
parameter_list|(
name|ClassEvent
name|event
parameter_list|)
block|{
name|iEvent
operator|=
name|event
expr_stmt|;
block|}
specifier|public
name|ClassEvent
name|getCachedEvent
parameter_list|()
block|{
return|return
name|iEvent
return|;
block|}
specifier|public
name|void
name|cancelEvent
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|boolean
name|cancelled
parameter_list|)
block|{
name|ClassEvent
name|event
init|=
name|getEvent
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|!=
literal|null
condition|)
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Date
name|today
init|=
name|cal
operator|.
name|getTime
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Meeting
argument_list|>
name|i
init|=
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|meeting
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|meeting
operator|.
name|getMeetingDate
argument_list|()
operator|.
name|before
argument_list|(
name|today
argument_list|)
operator|&&
operator|!
name|ApplicationProperty
operator|.
name|ClassAssignmentChangePastMeetings
operator|.
name|isTrue
argument_list|()
condition|)
continue|continue;
name|meeting
operator|.
name|setStatus
argument_list|(
name|cancelled
condition|?
name|Meeting
operator|.
name|Status
operator|.
name|CANCELLED
else|:
name|Meeting
operator|.
name|Status
operator|.
name|APPROVED
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|getNotes
argument_list|()
operator|==
literal|null
condition|)
name|event
operator|.
name|setNotes
argument_list|(
operator|new
name|HashSet
argument_list|<
name|EventNote
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|EventNote
name|note
init|=
operator|new
name|EventNote
argument_list|()
decl_stmt|;
name|note
operator|.
name|setEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|note
operator|.
name|setNoteType
argument_list|(
name|cancelled
condition|?
name|EventNote
operator|.
name|sEventNoteTypeCancel
else|:
name|EventNote
operator|.
name|sEventNoteTypeApproval
argument_list|)
expr_stmt|;
name|note
operator|.
name|setTimeStamp
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|setUser
argument_list|(
name|user
operator|.
name|getTrueName
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|setUserId
argument_list|(
name|user
operator|.
name|getTrueExternalUserId
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|setTextNote
argument_list|(
name|cancelled
condition|?
name|MSG
operator|.
name|classNoteCancelled
argument_list|(
name|getClassLabel
argument_list|(
name|hibSession
argument_list|)
argument_list|)
else|:
name|MSG
operator|.
name|classNoteReopened
argument_list|(
name|getClassLabel
argument_list|(
name|hibSession
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|getCommittedAssignment
argument_list|()
operator|==
literal|null
condition|)
name|note
operator|.
name|setMeetings
argument_list|(
name|MSG
operator|.
name|classMeetingsNotApplicable
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|note
operator|.
name|setMeetings
argument_list|(
name|getCommittedAssignment
argument_list|()
operator|.
name|getPlacement
argument_list|()
operator|.
name|getLongName
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|event
operator|.
name|getNotes
argument_list|()
operator|.
name|add
argument_list|(
name|note
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|unassignCommited
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Assignment
name|oldAssignment
init|=
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldAssignment
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Class "
operator|+
name|getClassLabel
argument_list|()
operator|+
literal|" does not have an assignment."
argument_list|)
throw|;
name|ClassEvent
name|event
init|=
name|getEvent
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ApplicationProperty
operator|.
name|ClassAssignmentChangePastMeetings
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|hibSession
operator|.
name|delete
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Date
name|today
init|=
name|cal
operator|.
name|getTime
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Meeting
argument_list|>
name|i
init|=
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
if|if
condition|(
operator|!
name|i
operator|.
name|next
argument_list|()
operator|.
name|getMeetingDate
argument_list|()
operator|.
name|before
argument_list|(
name|today
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|hibSession
operator|.
name|delete
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|event
operator|.
name|getNotes
argument_list|()
operator|==
literal|null
condition|)
name|event
operator|.
name|setNotes
argument_list|(
operator|new
name|HashSet
argument_list|<
name|EventNote
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|EventNote
name|note
init|=
operator|new
name|EventNote
argument_list|()
decl_stmt|;
name|note
operator|.
name|setEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|note
operator|.
name|setNoteType
argument_list|(
name|EventNote
operator|.
name|sEventNoteTypeDeletion
argument_list|)
expr_stmt|;
name|note
operator|.
name|setTimeStamp
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|setUser
argument_list|(
name|user
operator|.
name|getTrueName
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|setUserId
argument_list|(
name|user
operator|.
name|getTrueExternalUserId
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|setTextNote
argument_list|(
name|MSG
operator|.
name|classNoteUnassigned
argument_list|(
name|oldAssignment
operator|.
name|getPlacement
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|note
operator|.
name|setMeetings
argument_list|(
name|MSG
operator|.
name|classMeetingsNotApplicable
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|getNotes
argument_list|()
operator|.
name|add
argument_list|(
name|note
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|old
init|=
name|oldAssignment
operator|.
name|getPlacement
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|oldAssignment
operator|.
name|getSolution
argument_list|()
operator|.
name|getAssignments
argument_list|()
operator|.
name|remove
argument_list|(
name|oldAssignment
argument_list|)
expr_stmt|;
comment|// Remove all related constraint infos to avoid hibernate cache issues
comment|// when an orphaned constraint info is automatically deleted
for|for
control|(
name|ConstraintInfo
name|ci
range|:
name|oldAssignment
operator|.
name|getConstraintInfo
argument_list|()
control|)
block|{
for|for
control|(
name|Assignment
name|a
range|:
name|ci
operator|.
name|getAssignments
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|a
operator|.
name|equals
argument_list|(
name|oldAssignment
argument_list|)
condition|)
block|{
name|a
operator|.
name|getConstraintInfo
argument_list|()
operator|.
name|remove
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|delete
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|delete
argument_list|(
name|oldAssignment
argument_list|)
expr_stmt|;
name|setCommittedAssignment
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|TimetableManager
operator|.
name|findByExternalId
argument_list|(
name|user
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
argument_list|,
name|getSession
argument_list|()
argument_list|,
name|this
argument_list|,
name|getClassLabel
argument_list|()
operator|+
literal|" ("
operator|+
name|old
operator|+
literal|"&rarr; N/A)"
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|CLASS_INFO
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|UNASSIGN
argument_list|,
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|getManagingDept
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|refresh
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|String
name|className
init|=
name|ApplicationProperty
operator|.
name|ExternalActionClassEdit
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExternalClassEditAction
name|editAction
init|=
operator|(
name|ExternalClassEditAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|editAction
operator|.
name|performExternalClassEditAction
argument_list|(
name|this
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|"Unassignment of "
operator|+
name|getClassLabel
argument_list|()
operator|+
literal|" failed, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
return|;
block|}
block|}
specifier|public
name|String
name|assignCommited
parameter_list|(
name|ClassAssignmentInfo
name|assignment
parameter_list|,
name|UserContext
name|user
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|String
name|old
init|=
literal|"N/A"
decl_stmt|;
name|Assignment
name|oldAssignment
init|=
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldAssignment
operator|!=
literal|null
condition|)
block|{
name|old
operator|=
name|oldAssignment
operator|.
name|getPlacement
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|oldAssignment
operator|.
name|getSolution
argument_list|()
operator|.
name|getAssignments
argument_list|()
operator|.
name|remove
argument_list|(
name|oldAssignment
argument_list|)
expr_stmt|;
comment|// Remove all related constraint infos to avoid hibernate cache issues
comment|// when an orphaned constraint info is automatically deleted
for|for
control|(
name|ConstraintInfo
name|ci
range|:
name|oldAssignment
operator|.
name|getConstraintInfo
argument_list|()
control|)
block|{
for|for
control|(
name|Assignment
name|a
range|:
name|ci
operator|.
name|getAssignments
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|a
operator|.
name|equals
argument_list|(
name|oldAssignment
argument_list|)
condition|)
block|{
name|a
operator|.
name|getConstraintInfo
argument_list|()
operator|.
name|remove
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|delete
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|delete
argument_list|(
name|oldAssignment
argument_list|)
expr_stmt|;
block|}
name|SolverGroup
name|group
init|=
name|getManagingDept
argument_list|()
operator|.
name|getSolverGroup
argument_list|()
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Department "
operator|+
name|getManagingDept
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|" has no solver group."
argument_list|)
throw|;
name|Solution
name|solution
init|=
name|group
operator|.
name|getCommittedSolution
argument_list|()
decl_stmt|;
if|if
condition|(
name|solution
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Solver group "
operator|+
name|group
operator|.
name|getName
argument_list|()
operator|+
literal|" has no commited solution."
argument_list|)
throw|;
name|DatePattern
name|dp
init|=
name|DatePatternDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|assignment
operator|.
name|getDate
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|Assignment
name|a
init|=
operator|new
name|Assignment
argument_list|()
decl_stmt|;
name|a
operator|.
name|setSolution
argument_list|(
name|solution
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSlotsPerMtg
argument_list|(
name|assignment
operator|.
name|getTime
argument_list|()
operator|.
name|getNrSlotsPerMeeting
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setBreakTime
argument_list|(
name|assignment
operator|.
name|getTime
argument_list|()
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setClazz
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|a
operator|.
name|setClassName
argument_list|(
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setClassId
argument_list|(
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setDays
argument_list|(
name|assignment
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setRooms
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setInstructors
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStartSlot
argument_list|(
name|assignment
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setTimePattern
argument_list|(
name|assignment
operator|.
name|getTime
argument_list|()
operator|.
name|getTimePattern
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setDatePattern
argument_list|(
name|dp
operator|!=
literal|null
condition|?
name|dp
else|:
name|effectiveDatePattern
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setAssignmentInfo
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ClassRoomInfo
name|room
range|:
name|assignment
operator|.
name|getRooms
argument_list|()
control|)
name|a
operator|.
name|getRooms
argument_list|()
operator|.
name|add
argument_list|(
name|room
operator|.
name|getLocation
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ClassInstructorInfo
name|inst
range|:
name|assignment
operator|.
name|getInstructors
argument_list|()
control|)
if|if
condition|(
name|inst
operator|.
name|isLead
argument_list|()
condition|)
name|a
operator|.
name|getInstructors
argument_list|()
operator|.
name|add
argument_list|(
name|inst
operator|.
name|getInstructor
argument_list|(
name|hibSession
argument_list|)
operator|.
name|getInstructor
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|a
argument_list|)
expr_stmt|;
comment|//TODO: More information should be gathered about the assignment.
name|AssignmentPreferenceInfo
name|pref
init|=
operator|new
name|AssignmentPreferenceInfo
argument_list|()
decl_stmt|;
name|pref
operator|.
name|setTimePreference
argument_list|(
name|assignment
operator|.
name|getTime
argument_list|()
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ClassRoomInfo
name|room
range|:
name|assignment
operator|.
name|getRooms
argument_list|()
control|)
name|pref
operator|.
name|setRoomPreference
argument_list|(
name|room
operator|.
name|getLocationId
argument_list|()
argument_list|,
name|room
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
name|AssignmentInfo
name|ai
init|=
operator|new
name|AssignmentInfo
argument_list|()
decl_stmt|;
name|ai
operator|.
name|setAssignment
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|ai
operator|.
name|setDefinition
argument_list|(
name|SolverInfoDef
operator|.
name|findByName
argument_list|(
name|hibSession
argument_list|,
literal|"AssignmentInfo"
argument_list|)
argument_list|)
expr_stmt|;
name|ai
operator|.
name|setOpt
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ai
operator|.
name|setInfo
argument_list|(
name|pref
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|ai
argument_list|)
expr_stmt|;
name|a
operator|.
name|getAssignmentInfo
argument_list|()
operator|.
name|add
argument_list|(
name|ai
argument_list|)
expr_stmt|;
name|a
operator|.
name|cleastAssignmentInfoCache
argument_list|()
expr_stmt|;
name|ClassEvent
name|event
init|=
name|getEvent
argument_list|()
decl_stmt|;
name|event
operator|=
name|a
operator|.
name|generateCommittedEvent
argument_list|(
name|event
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|!=
literal|null
operator|&&
operator|!
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|event
operator|.
name|getNotes
argument_list|()
operator|==
literal|null
condition|)
name|event
operator|.
name|setNotes
argument_list|(
operator|new
name|HashSet
argument_list|<
name|EventNote
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|EventNote
name|note
init|=
operator|new
name|EventNote
argument_list|()
decl_stmt|;
name|note
operator|.
name|setEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|note
operator|.
name|setNoteType
argument_list|(
name|event
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
name|EventNote
operator|.
name|sEventNoteTypeCreateEvent
else|:
name|EventNote
operator|.
name|sEventNoteTypeEditEvent
argument_list|)
expr_stmt|;
name|note
operator|.
name|setTimeStamp
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|setUser
argument_list|(
name|user
operator|.
name|getTrueName
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|setUserId
argument_list|(
name|user
operator|.
name|getTrueExternalUserId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldAssignment
operator|==
literal|null
condition|)
name|note
operator|.
name|setTextNote
argument_list|(
name|MSG
operator|.
name|classNoteAssigned
argument_list|(
name|a
operator|.
name|getPlacement
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|note
operator|.
name|setTextNote
argument_list|(
name|MSG
operator|.
name|classNoteReassigned
argument_list|(
name|oldAssignment
operator|.
name|getPlacement
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|a
operator|.
name|getPlacement
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|note
operator|.
name|setMeetings
argument_list|(
name|assignment
operator|.
name|getTime
argument_list|()
operator|.
name|getLongName
argument_list|()
operator|+
operator|(
name|assignment
operator|.
name|getNrRooms
argument_list|()
operator|>
literal|0
condition|?
literal|" "
operator|+
name|assignment
operator|.
name|getRoomNames
argument_list|(
literal|", "
argument_list|)
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|event
operator|.
name|getNotes
argument_list|()
operator|.
name|add
argument_list|(
name|note
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|!=
literal|null
operator|&&
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|event
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|hibSession
operator|.
name|delete
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|setCommittedAssignment
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|TimetableManager
operator|.
name|findByExternalId
argument_list|(
name|user
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
argument_list|,
name|getSession
argument_list|()
argument_list|,
name|this
argument_list|,
name|getClassLabel
argument_list|()
operator|+
literal|" ("
operator|+
name|old
operator|+
literal|"&rarr; "
operator|+
name|assignment
operator|.
name|getTime
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|assignment
operator|.
name|getRoomNames
argument_list|(
literal|", "
argument_list|)
operator|+
literal|")"
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|CLASS_INFO
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|ASSIGN
argument_list|,
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|getManagingDept
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|refresh
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|String
name|className
init|=
name|ApplicationProperty
operator|.
name|ExternalActionClassEdit
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExternalClassEditAction
name|editAction
init|=
operator|(
name|ExternalClassEditAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|editAction
operator|.
name|performExternalClassEditAction
argument_list|(
name|this
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|"Assignment of "
operator|+
name|getClassLabel
argument_list|()
operator|+
literal|" failed, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
return|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|Long
argument_list|>
name|getEnrolledStudentIds
parameter_list|()
block|{
return|return
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e.student.uniqueId from StudentClassEnrollment e where "
operator|+
literal|"e.clazz.uniqueId=:classId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"classId"
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
name|String
name|buildAssignedTimeHtml
parameter_list|(
name|ClassAssignmentProxy
name|proxy
parameter_list|)
block|{
name|Assignment
name|a
init|=
literal|null
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
try|try
block|{
name|a
operator|=
name|proxy
operator|.
name|getAssignment
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|Enumeration
argument_list|<
name|Integer
argument_list|>
name|e
init|=
name|a
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDays
argument_list|()
decl_stmt|;
while|while
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
index|[
name|e
operator|.
name|nextElement
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|a
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getStartTimeHeader
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|a
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getEndTimeHeader
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|getEffectiveTimePreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|DurationModel
name|dm
init|=
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getDurationModel
argument_list|()
decl_stmt|;
name|Integer
name|ah
init|=
name|dm
operator|.
name|getArrangedHours
argument_list|(
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|,
name|effectiveDatePattern
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ah
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Arr Hrs"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Arr "
operator|+
name|ah
operator|+
literal|" Hrs"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|public
name|String
name|buildAssignedRoomHtml
parameter_list|(
name|ClassAssignmentProxy
name|proxy
parameter_list|)
block|{
name|Assignment
name|a
init|=
literal|null
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
try|try
block|{
name|a
operator|=
name|proxy
operator|.
name|getAssignment
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|Iterator
name|it2
init|=
name|a
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Location
name|room
init|=
operator|(
name|Location
operator|)
name|it2
operator|.
name|next
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|getEffectiveTimePreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|getEffectiveRoomPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomPref
name|rp
init|=
operator|(
name|RoomPref
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|rp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefId
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|PREF_LEVEL_REQUIRED
argument_list|)
condition|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<br>"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|rp
operator|.
name|getRoom
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|public
name|String
name|buildInstructorHtml
parameter_list|(
name|String
name|nameFormat
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|getClassInstructors
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getClassInstructors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ClassInstructor
name|ci
range|:
operator|(
name|Set
argument_list|<
name|ClassInstructor
argument_list|>
operator|)
name|getClassInstructors
argument_list|()
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<br>"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getName
argument_list|(
name|nameFormat
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|public
specifier|static
name|ExternalClassNameHelperInterface
name|getExternalClassNameHelper
parameter_list|()
block|{
if|if
condition|(
name|externalClassNameHelper
operator|==
literal|null
condition|)
block|{
name|String
name|className
init|=
name|ApplicationProperty
operator|.
name|ClassNamingHelper
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|externalClassNameHelper
operator|=
operator|(
name|ExternalClassNameHelperInterface
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
literal|"Failed to instantiate instance of: "
operator|+
name|className
operator|+
literal|" using the default class name helper."
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|externalClassNameHelper
operator|=
operator|new
name|DefaultExternalClassNameHelper
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
literal|"Illegal Access Exception on: "
operator|+
name|className
operator|+
literal|" using the default class name helper."
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|externalClassNameHelper
operator|=
operator|new
name|DefaultExternalClassNameHelper
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
literal|"Failed to find class: "
operator|+
name|className
operator|+
literal|" using the default class name helper."
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|externalClassNameHelper
operator|=
operator|new
name|DefaultExternalClassNameHelper
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|externalClassNameHelper
operator|=
operator|new
name|DefaultExternalClassNameHelper
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|externalClassNameHelper
return|;
block|}
specifier|public
name|String
name|getClassLabel
parameter_list|(
name|CourseOffering
name|courseOffering
parameter_list|)
block|{
return|return
operator|(
name|getExternalClassNameHelper
argument_list|()
operator|.
name|getClassLabel
argument_list|(
name|this
argument_list|,
name|courseOffering
argument_list|)
operator|)
return|;
block|}
specifier|public
name|String
name|getClassSuffix
parameter_list|(
name|CourseOffering
name|courseOffering
parameter_list|)
block|{
return|return
operator|(
name|getExternalClassNameHelper
argument_list|()
operator|.
name|getClassSuffix
argument_list|(
name|this
argument_list|,
name|courseOffering
argument_list|)
operator|)
return|;
block|}
specifier|public
name|String
name|getClassLabelWithTitle
parameter_list|(
name|CourseOffering
name|courseOffering
parameter_list|)
block|{
return|return
operator|(
name|getExternalClassNameHelper
argument_list|()
operator|.
name|getClassLabelWithTitle
argument_list|(
name|this
argument_list|,
name|courseOffering
argument_list|)
operator|)
return|;
block|}
specifier|public
name|String
name|getExternalId
parameter_list|(
name|CourseOffering
name|courseOffering
parameter_list|)
block|{
return|return
operator|(
name|getExternalClassNameHelper
argument_list|()
operator|.
name|getExternalId
argument_list|(
name|this
argument_list|,
name|courseOffering
argument_list|)
operator|)
return|;
block|}
specifier|public
name|SectioningInfo
name|getSectioningInfo
parameter_list|()
block|{
return|return
operator|(
name|SectioningInfo
operator|)
name|SectioningInfoDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select i from SectioningInfo i where i.clazz.uniqueId = :classId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"classId"
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
comment|//	/* (non-Javadoc)
comment|//	 * @see org.unitime.timetable.model.base.BaseClass_#getClassSuffix()
comment|//	 */
comment|//	@Override
comment|//	public String getClassSuffix() {
comment|//		return(getClassSuffix(getSchedulingSubpart().getControllingCourseOffering()));
comment|//	}
annotation|@
name|Override
specifier|public
name|Department
name|getDepartment
parameter_list|()
block|{
return|return
name|getManagingDept
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|DistributionPref
argument_list|>
name|getSharedPreferences
parameter_list|(
name|Long
name|classId
parameter_list|,
name|Long
name|subpartId
parameter_list|,
name|String
index|[]
name|preferences
parameter_list|,
name|String
index|[]
name|types
parameter_list|)
block|{
if|if
condition|(
name|classId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Query
name|q1
init|=
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select o1.distributionPref from DistributionObject o1, DistributionObject o2"
operator|+
operator|(
name|subpartId
operator|==
literal|null
condition|?
literal|", Class_ c2"
else|:
literal|""
operator|)
operator|+
literal|" where "
operator|+
literal|"o1.distributionPref = o2.distributionPref and o1.prefGroup.uniqueId in (:c1, :s1)"
operator|+
operator|(
name|subpartId
operator|==
literal|null
condition|?
literal|" and o2.prefGroup.uniqueId in (c2.uniqueId, c2.schedulingSubpart.uniqueId) and c2.uniqueId = :c2"
else|:
literal|" and o2.prefGroup.uniqueId in (:c2, :s2)"
operator|)
operator|+
operator|(
name|preferences
operator|==
literal|null
operator|||
name|preferences
operator|.
name|length
operator|==
literal|0
condition|?
literal|""
else|:
literal|" and o1.distributionPref.prefLevel.prefProlog "
operator|+
operator|(
name|preferences
operator|.
name|length
operator|==
literal|1
condition|?
literal|"="
else|:
literal|"in"
operator|)
operator|+
literal|" :p"
operator|)
operator|+
operator|(
name|types
operator|==
literal|null
operator|||
name|types
operator|.
name|length
operator|==
literal|0
condition|?
literal|""
else|:
literal|" and o1.distributionPref.distributionType.reference "
operator|+
operator|(
name|types
operator|.
name|length
operator|==
literal|1
condition|?
literal|"="
else|:
literal|"in"
operator|)
operator|+
literal|" :t"
operator|)
argument_list|)
decl_stmt|;
name|Query
name|q2
init|=
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select p from ClassInstructor c1 inner join c1.instructor.preferences p, ClassInstructor c2 where "
operator|+
literal|"c1.classInstructing = :c1 and c2.classInstructing = :c2 and c1.instructor = c2.instructor and p.class = DistributionPref"
operator|+
operator|(
name|preferences
operator|==
literal|null
operator|||
name|preferences
operator|.
name|length
operator|==
literal|0
condition|?
literal|""
else|:
literal|" and p.prefLevel.prefProlog "
operator|+
operator|(
name|preferences
operator|.
name|length
operator|==
literal|1
condition|?
literal|"="
else|:
literal|"in"
operator|)
operator|+
literal|" :p"
operator|)
operator|+
operator|(
name|types
operator|==
literal|null
operator|||
name|types
operator|.
name|length
operator|==
literal|0
condition|?
literal|""
else|:
literal|" and p.distributionType.reference "
operator|+
operator|(
name|types
operator|.
name|length
operator|==
literal|1
condition|?
literal|"="
else|:
literal|"in"
operator|)
operator|+
literal|" :t"
operator|)
argument_list|)
decl_stmt|;
name|q1
operator|.
name|setLong
argument_list|(
literal|"c1"
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"s1"
argument_list|,
name|getSchedulingSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"c2"
argument_list|,
name|classId
argument_list|)
expr_stmt|;
name|q2
operator|.
name|setLong
argument_list|(
literal|"c1"
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"c2"
argument_list|,
name|classId
argument_list|)
expr_stmt|;
if|if
condition|(
name|subpartId
operator|!=
literal|null
condition|)
name|q1
operator|.
name|setLong
argument_list|(
literal|"s2"
argument_list|,
name|subpartId
argument_list|)
expr_stmt|;
if|if
condition|(
name|preferences
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|preferences
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|q1
operator|.
name|setString
argument_list|(
literal|"p"
argument_list|,
name|preferences
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|q2
operator|.
name|setString
argument_list|(
literal|"p"
argument_list|,
name|preferences
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|preferences
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|q1
operator|.
name|setParameterList
argument_list|(
literal|"p"
argument_list|,
name|preferences
argument_list|,
operator|new
name|StringType
argument_list|()
argument_list|)
expr_stmt|;
name|q2
operator|.
name|setParameterList
argument_list|(
literal|"p"
argument_list|,
name|preferences
argument_list|,
operator|new
name|StringType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|types
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|types
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|q1
operator|.
name|setString
argument_list|(
literal|"t"
argument_list|,
name|types
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|q2
operator|.
name|setString
argument_list|(
literal|"t"
argument_list|,
name|types
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|types
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|q1
operator|.
name|setParameterList
argument_list|(
literal|"t"
argument_list|,
name|types
argument_list|,
operator|new
name|StringType
argument_list|()
argument_list|)
expr_stmt|;
name|q2
operator|.
name|setParameterList
argument_list|(
literal|"t"
argument_list|,
name|types
argument_list|,
operator|new
name|StringType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|DistributionPref
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|DistributionPref
argument_list|>
argument_list|(
name|q1
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
decl_stmt|;
name|ret
operator|.
name|addAll
argument_list|(
name|q2
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|boolean
name|canShareRoom
parameter_list|(
name|Class_
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
operator|!
name|getSharedPreferences
argument_list|(
name|other
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|other
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
name|PreferenceLevel
operator|.
name|sRequired
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"CAN_SHARE_ROOM"
block|,
literal|"MEET_WITH"
block|}
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|canShareInstructor
parameter_list|(
name|Class_
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
operator|!
name|getSharedPreferences
argument_list|(
name|other
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|other
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
name|PreferenceLevel
operator|.
name|sRequired
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"MEET_WITH"
block|}
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|canShareRoom
parameter_list|(
name|Long
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
operator|!
name|getSharedPreferences
argument_list|(
name|other
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|PreferenceLevel
operator|.
name|sRequired
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"CAN_SHARE_ROOM"
block|,
literal|"MEET_WITH"
block|}
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|canShareInstructor
parameter_list|(
name|Long
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
operator|!
name|getSharedPreferences
argument_list|(
name|other
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|PreferenceLevel
operator|.
name|sRequired
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"MEET_WITH"
block|}
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isParentOf
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
name|Class_
name|parent
init|=
name|clazz
operator|.
name|getParentClass
argument_list|()
decl_stmt|;
return|return
name|parent
operator|!=
literal|null
operator|&&
operator|(
name|this
operator|.
name|equals
argument_list|(
name|parent
argument_list|)
operator|||
name|isParentOf
argument_list|(
name|parent
argument_list|)
operator|)
return|;
block|}
specifier|public
name|int
name|getSectioningLimit
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isEnabledForStudentScheduling
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
if|else if
condition|(
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|isUnlimitedEnrollment
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
name|int
name|limit
init|=
name|getMaxExpectedCapacity
argument_list|()
decl_stmt|;
name|Assignment
name|assignment
init|=
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|getExpectedCapacity
argument_list|()
operator|<
name|getMaxExpectedCapacity
argument_list|()
operator|&&
name|assignment
operator|!=
literal|null
operator|&&
operator|!
name|assignment
operator|.
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|roomSize
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|Location
name|room
range|:
name|assignment
operator|.
name|getRooms
argument_list|()
control|)
name|roomSize
operator|=
name|Math
operator|.
name|min
argument_list|(
name|roomSize
argument_list|,
name|room
operator|.
name|getCapacity
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|room
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|roomLimit
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|roomSize
operator|/
operator|(
name|getRoomRatio
argument_list|()
operator|==
literal|null
condition|?
literal|1.0f
else|:
name|getRoomRatio
argument_list|()
operator|)
argument_list|)
decl_stmt|;
name|limit
operator|=
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|getExpectedCapacity
argument_list|()
argument_list|,
name|roomLimit
argument_list|)
argument_list|,
name|getMaxExpectedCapacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|limit
operator|>=
literal|9999
condition|)
name|limit
operator|=
operator|-
literal|1
expr_stmt|;
return|return
name|limit
return|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|Reservation
argument_list|>
name|getSectionReservations
parameter_list|()
block|{
name|List
argument_list|<
name|Reservation
argument_list|>
name|reservations
init|=
operator|new
name|ArrayList
argument_list|<
name|Reservation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Reservation
name|reservation
range|:
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getReservations
argument_list|()
control|)
block|{
if|if
condition|(
name|reservation
operator|.
name|getClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|Class_
name|clazz
range|:
name|reservation
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|this
operator|.
name|equals
argument_list|(
name|clazz
argument_list|)
operator|||
name|this
operator|.
name|isParentOf
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|reservations
operator|.
name|add
argument_list|(
name|reservation
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|reservations
return|;
block|}
specifier|public
name|int
name|getUnreservedSectionSpace
parameter_list|()
block|{
comment|// section is unlimited -> there is unreserved space unless there is an unlimited reservation too
comment|// (in which case there is no unreserved space)
if|if
condition|(
name|getSectioningLimit
argument_list|()
operator|<
literal|0
condition|)
block|{
comment|// exclude reservations that are not directly set on this section
for|for
control|(
name|Reservation
name|r
range|:
name|getSectionReservations
argument_list|()
control|)
block|{
comment|// ignore expired reservations
if|if
condition|(
name|r
operator|.
name|isExpired
argument_list|()
condition|)
continue|continue;
comment|// there is an unlimited reservation -> no unreserved space
if|if
condition|(
name|r
operator|.
name|getReservationLimit
argument_list|()
operator|<
literal|0
condition|)
return|return
literal|0
return|;
block|}
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
name|int
name|available
init|=
name|getSectioningLimit
argument_list|()
operator|-
name|getEnrollment
argument_list|()
decl_stmt|;
comment|// exclude reservations that are not directly set on this section
for|for
control|(
name|Reservation
name|r
range|:
name|getSectionReservations
argument_list|()
control|)
block|{
comment|// ignore expired reservations
if|if
condition|(
name|r
operator|.
name|isExpired
argument_list|()
condition|)
continue|continue;
comment|// unlimited reservation -> all the space is reserved
if|if
condition|(
name|r
operator|.
name|getReservationLimit
argument_list|()
operator|<
literal|0.0
condition|)
return|return
literal|0
return|;
comment|// compute space that can be potentially taken by this reservation
name|int
name|reserved
init|=
name|r
operator|.
name|getReservedAvailableSpace
argument_list|()
decl_stmt|;
comment|// deduct the space from available space
name|available
operator|-=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|reserved
argument_list|)
expr_stmt|;
block|}
return|return
name|available
return|;
block|}
specifier|public
name|boolean
name|isInstructorAssignmentNeeded
parameter_list|()
block|{
for|for
control|(
name|TeachingClassRequest
name|tcr
range|:
name|getTeachingRequests
argument_list|()
control|)
if|if
condition|(
name|tcr
operator|.
name|isAssignInstructor
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|effectiveNbrInstructors
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TeachingClassRequest
name|tcr
range|:
name|getTeachingRequests
argument_list|()
control|)
if|if
condition|(
name|tcr
operator|.
name|isAssignInstructor
argument_list|()
condition|)
name|ret
operator|+=
name|tcr
operator|.
name|getTeachingRequest
argument_list|()
operator|.
name|getNbrInstructors
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|float
name|effectiveTeachingLoad
parameter_list|()
block|{
name|int
name|instructors
init|=
literal|0
decl_stmt|;
name|float
name|totalLoad
init|=
literal|0f
decl_stmt|;
for|for
control|(
name|TeachingClassRequest
name|tcr
range|:
name|getTeachingRequests
argument_list|()
control|)
if|if
condition|(
name|tcr
operator|.
name|isAssignInstructor
argument_list|()
condition|)
block|{
name|instructors
operator|+=
name|tcr
operator|.
name|getTeachingRequest
argument_list|()
operator|.
name|getNbrInstructors
argument_list|()
expr_stmt|;
name|totalLoad
operator|+=
name|tcr
operator|.
name|getTeachingRequest
argument_list|()
operator|.
name|getNbrInstructors
argument_list|()
operator|*
name|tcr
operator|.
name|getTeachingRequest
argument_list|()
operator|.
name|getTeachingLoad
argument_list|()
expr_stmt|;
block|}
return|return
name|totalLoad
operator|/
name|instructors
return|;
block|}
block|}
end_class

end_unit

