begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|preference
operator|.
name|MinMaxPreferenceCombination
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|preference
operator|.
name|PreferenceCombination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|LazyInitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseClass_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|AcadAreaReservationComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|CourseReservationComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|IndividualReservationComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|InstructorComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|NavigationComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|PosReservationComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|StudentGroupReservationComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ClassAssignmentProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|CommitedClassAssignmentProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|Navigation
import|;
end_import

begin_class
specifier|public
class|class
name|Class_
extends|extends
name|BaseClass_
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/* [CONSTRUCTOR MARKER BEGIN] */
specifier|public
name|Class_
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|Class_
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/* [CONSTRUCTOR MARKER END] */
specifier|public
name|String
name|getCourseName
parameter_list|()
block|{
return|return
name|getSchedulingSubpart
argument_list|()
operator|.
name|getCourseName
argument_list|()
return|;
block|}
specifier|public
name|String
name|getCourseNameWithTitle
parameter_list|()
block|{
return|return
name|getSchedulingSubpart
argument_list|()
operator|.
name|getCourseNameWithTitle
argument_list|()
return|;
block|}
comment|/**      *      * @return      */
specifier|public
name|String
name|getItypeDesc
parameter_list|()
block|{
return|return
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
return|;
block|}
specifier|public
name|Department
name|getManagingDept
parameter_list|()
block|{
if|if
condition|(
name|super
operator|.
name|getManagingDept
argument_list|()
operator|==
literal|null
condition|)
return|return
name|getControllingDept
argument_list|()
return|;
return|return
name|super
operator|.
name|getManagingDept
argument_list|()
return|;
block|}
specifier|public
name|void
name|setManagingDept
parameter_list|(
name|Department
name|dept
parameter_list|)
block|{
name|Department
name|oldDept
init|=
name|getManagingDept
argument_list|()
decl_stmt|;
name|super
operator|.
name|setManagingDept
argument_list|(
name|dept
argument_list|)
expr_stmt|;
if|if
condition|(
name|dept
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|oldDept
operator|!=
literal|null
operator|&&
operator|!
name|oldDept
operator|.
name|equals
argument_list|(
name|dept
argument_list|)
operator|&&
name|getAssignments
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Assignment
name|a
init|=
operator|(
name|Assignment
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
operator|new
name|Class_DAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|delete
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Retrieves the department for the subject area of the      * controlling course offering for the class      * @return Department object      */
specifier|public
name|Department
name|getDepartmentForSubjectArea
parameter_list|()
block|{
name|Department
name|dept
init|=
name|this
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getDepartment
argument_list|()
decl_stmt|;
return|return
name|dept
return|;
block|}
specifier|public
name|Session
name|getSession
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getSession
argument_list|()
operator|)
return|;
block|}
specifier|public
name|Long
name|getSessionId
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getSessionId
argument_list|()
operator|)
return|;
block|}
specifier|private
name|Set
name|classInstructorPrefsOfType
parameter_list|(
name|Class
name|type
parameter_list|)
block|{
name|Vector
name|instructors
init|=
name|getLeadInstructors
argument_list|()
decl_stmt|;
if|if
condition|(
name|instructors
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|Set
name|ret
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|instructors
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
name|ret
operator|=
name|instructor
operator|.
name|getPreferences
argument_list|(
name|type
argument_list|)
expr_stmt|;
else|else
name|ret
operator|=
name|combinePreferences
argument_list|(
name|ret
argument_list|,
name|instructor
operator|.
name|getPreferences
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|Set
name|weakenHardPreferences
parameter_list|(
name|Set
name|prefs
parameter_list|)
block|{
if|if
condition|(
name|prefs
operator|==
literal|null
operator|||
name|prefs
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|prefs
return|;
name|Set
name|ret
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|prefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|pref
init|=
operator|(
name|Preference
operator|)
operator|(
operator|(
name|Preference
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|clone
argument_list|()
decl_stmt|;
if|if
condition|(
name|pref
operator|.
name|weakenHardPreferences
argument_list|()
condition|)
name|ret
operator|.
name|add
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|Set
name|removeNeutralPreferences
parameter_list|(
name|Set
name|prefs
parameter_list|)
block|{
if|if
condition|(
name|prefs
operator|==
literal|null
condition|)
return|return
operator|new
name|TreeSet
argument_list|()
return|;
if|if
condition|(
name|prefs
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|prefs
return|;
name|Set
name|ret
init|=
operator|new
name|TreeSet
argument_list|(
name|prefs
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|ret
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|pref
init|=
operator|(
name|Preference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|Set
name|combinePreferences
parameter_list|(
name|Set
name|instrPrefs1
parameter_list|,
name|Set
name|instrPrefs2
parameter_list|)
block|{
if|if
condition|(
name|instrPrefs1
operator|==
literal|null
operator|||
name|instrPrefs1
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|instrPrefs2
return|;
if|if
condition|(
name|instrPrefs2
operator|==
literal|null
operator|||
name|instrPrefs2
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|instrPrefs1
return|;
name|Set
name|ret
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|TimePref
name|tp
init|=
literal|null
decl_stmt|;
name|boolean
name|hasTimePref
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|instrPrefs1
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|p1
init|=
operator|(
name|Preference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p1
operator|instanceof
name|TimePref
condition|)
block|{
if|if
condition|(
name|tp
operator|==
literal|null
condition|)
block|{
name|tp
operator|=
operator|(
name|TimePref
operator|)
name|p1
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
else|else
name|tp
operator|.
name|combineWith
argument_list|(
operator|(
name|TimePref
operator|)
name|p1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
name|ret
operator|.
name|add
argument_list|(
name|p1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|instrPrefs2
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|p2
init|=
operator|(
name|Preference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p2
operator|instanceof
name|TimePref
condition|)
block|{
if|if
condition|(
name|tp
operator|==
literal|null
condition|)
block|{
name|tp
operator|=
operator|(
name|TimePref
operator|)
name|p2
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
else|else
name|tp
operator|.
name|combineWith
argument_list|(
operator|(
name|TimePref
operator|)
name|p2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|instrPrefs2
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|p2
init|=
operator|(
name|Preference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Preference
name|p1
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|ret
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|p
init|=
operator|(
name|Preference
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isSame
argument_list|(
name|p2
argument_list|)
condition|)
block|{
name|p1
operator|=
name|p
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|p1
operator|==
literal|null
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|p2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Preference
name|combPref
init|=
operator|(
name|Preference
operator|)
name|p1
operator|.
name|clone
argument_list|()
decl_stmt|;
name|PreferenceCombination
name|com
init|=
operator|new
name|MinMaxPreferenceCombination
argument_list|()
decl_stmt|;
name|com
operator|.
name|addPreferenceProlog
argument_list|(
name|p1
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
name|com
operator|.
name|addPreferenceProlog
argument_list|(
name|p2
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
name|combPref
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|com
operator|.
name|getPreferenceProlog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|combPref
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tp
operator|!=
literal|null
condition|)
name|ret
operator|.
name|add
argument_list|(
name|tp
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|private
name|Set
name|combinePreferences
parameter_list|(
name|Class
name|type
parameter_list|,
name|Set
name|subpartPrefs
parameter_list|,
name|Set
name|instrPrefs
parameter_list|)
block|{
if|if
condition|(
name|TimePref
operator|.
name|class
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
if|if
condition|(
name|subpartPrefs
operator|==
literal|null
operator|||
name|subpartPrefs
operator|.
name|isEmpty
argument_list|()
operator|||
name|instrPrefs
operator|==
literal|null
operator|||
name|instrPrefs
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|subpartPrefs
return|;
name|TimePref
name|instrPref
init|=
operator|(
name|TimePref
operator|)
name|instrPrefs
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//there has to be only one TimePref for instructor/department/session
name|Set
name|ret
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|subpartPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|pref
init|=
operator|(
name|TimePref
operator|)
operator|(
operator|(
name|TimePref
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|clone
argument_list|()
decl_stmt|;
name|pref
operator|.
name|combineWith
argument_list|(
name|instrPref
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
if|if
condition|(
name|subpartPrefs
operator|==
literal|null
operator|||
name|subpartPrefs
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|instrPrefs
return|;
if|if
condition|(
name|instrPrefs
operator|==
literal|null
operator|||
name|instrPrefs
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|subpartPrefs
return|;
name|Set
name|ret
init|=
operator|new
name|TreeSet
argument_list|(
name|subpartPrefs
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|instrPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|instrPref
init|=
operator|(
name|Preference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Preference
name|subpartPref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|ret
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|p
init|=
operator|(
name|Preference
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isSame
argument_list|(
name|instrPref
argument_list|)
condition|)
block|{
name|subpartPref
operator|=
name|p
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|subpartPref
operator|==
literal|null
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|instrPref
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Preference
name|combPref
init|=
operator|(
name|Preference
operator|)
name|subpartPref
operator|.
name|clone
argument_list|()
decl_stmt|;
name|PreferenceCombination
name|com
init|=
operator|new
name|MinMaxPreferenceCombination
argument_list|()
decl_stmt|;
name|com
operator|.
name|addPreferenceProlog
argument_list|(
name|instrPref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
name|com
operator|.
name|addPreferenceProlog
argument_list|(
name|subpartPref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
name|combPref
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|com
operator|.
name|getPreferenceProlog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|combPref
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|Set
name|combinePreferences
parameter_list|(
name|Class
name|type
parameter_list|,
name|Set
name|classPrefs
parameter_list|,
name|Set
name|subpartPrefs
parameter_list|,
name|Set
name|instrPrefs
parameter_list|)
block|{
name|Set
name|ret
init|=
operator|new
name|TreeSet
argument_list|(
name|classPrefs
argument_list|)
decl_stmt|;
name|Set
name|combined
init|=
name|combinePreferences
argument_list|(
name|type
argument_list|,
name|subpartPrefs
argument_list|,
name|instrPrefs
argument_list|)
decl_stmt|;
if|if
condition|(
name|combined
operator|==
literal|null
condition|)
return|return
name|ret
return|;
for|for
control|(
name|Iterator
name|i
init|=
name|combined
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|combPref
init|=
operator|(
name|Preference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Preference
name|classPref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|classPrefs
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|p
init|=
operator|(
name|Preference
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isSame
argument_list|(
name|combPref
argument_list|)
condition|)
block|{
name|classPref
operator|=
name|p
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|classPref
operator|==
literal|null
condition|)
name|ret
operator|.
name|add
argument_list|(
name|combPref
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|Set
name|getDistributionPreferences
parameter_list|()
block|{
name|TreeSet
name|prefs
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|getDistributionObjects
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|distObj
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|prefs
operator|.
name|add
argument_list|(
name|distObj
operator|.
name|getDistributionPref
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|prefs
return|;
block|}
specifier|public
name|Set
name|effectiveDistributionPreferences
parameter_list|(
name|Department
name|owningDept
parameter_list|)
block|{
name|TreeSet
name|prefs
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|getDistributionObjects
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|distObj
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|DistributionPref
name|pref
init|=
name|distObj
operator|.
name|getDistributionPref
argument_list|()
decl_stmt|;
if|if
condition|(
name|owningDept
operator|==
literal|null
operator|||
name|owningDept
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getOwner
argument_list|()
argument_list|)
condition|)
name|prefs
operator|.
name|add
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|getSchedulingSubpart
argument_list|()
operator|.
name|getDistributionObjects
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|getSchedulingSubpart
argument_list|()
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|distObj
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|DistributionPref
name|pref
init|=
name|distObj
operator|.
name|getDistributionPref
argument_list|()
decl_stmt|;
if|if
condition|(
name|owningDept
operator|==
literal|null
operator|||
name|owningDept
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getOwner
argument_list|()
argument_list|)
condition|)
name|prefs
operator|.
name|add
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|prefs
return|;
block|}
specifier|public
name|Set
name|effectivePreferences
parameter_list|(
name|Class
name|type
parameter_list|,
name|Vector
name|leadInstructors
parameter_list|)
block|{
name|Department
name|mngDept
init|=
name|getManagingDept
argument_list|()
decl_stmt|;
if|if
condition|(
name|DistributionPref
operator|.
name|class
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|effectiveDistributionPreferences
argument_list|(
name|mngDept
argument_list|)
return|;
comment|//return (mngDept==null?null:mngDept.getPreferences(type, this));
block|}
if|if
condition|(
name|leadInstructors
operator|==
literal|null
operator|||
name|leadInstructors
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|effectivePreferences
argument_list|(
name|type
argument_list|)
return|;
name|Set
name|instrPrefs
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|leadInstructors
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|leadInstructor
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|mngDept
operator|.
name|isExternalManager
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
comment|// departmental class -> take instructor preferences as they are
name|instrPrefs
operator|=
name|combinePreferences
argument_list|(
name|instrPrefs
argument_list|,
name|leadInstructor
operator|.
name|prefsOfTypeForDepartment
argument_list|(
name|type
argument_list|,
name|getControllingDept
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//LLR/LAB class take weaken form of time instructor preferences
if|if
condition|(
name|TimePref
operator|.
name|class
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
name|instrPrefs
operator|=
name|combinePreferences
argument_list|(
name|instrPrefs
argument_list|,
name|weakenHardPreferences
argument_list|(
name|leadInstructor
operator|.
name|prefsOfTypeForDepartment
argument_list|(
name|type
argument_list|,
name|getControllingDept
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|getSchedulingSubpart
argument_list|()
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|mngDept
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
comment|//subpart of the same owner -> take subpart preferences
name|Set
name|subpartPrefs
init|=
name|getSchedulingSubpart
argument_list|()
operator|.
name|getPreferences
argument_list|(
name|type
argument_list|)
decl_stmt|;
return|return
name|removeNeutralPreferences
argument_list|(
name|combinePreferences
argument_list|(
name|type
argument_list|,
name|subpartPrefs
argument_list|,
name|instrPrefs
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
comment|//subpart of different owner -> take only time pattern
name|Set
name|subpartPrefs
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|TimePref
operator|.
name|class
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|Set
name|subpartTimePrefs
init|=
name|getSchedulingSubpart
argument_list|()
operator|.
name|getPreferences
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|subpartTimePrefs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|subpartTimePrefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|tp
init|=
operator|(
name|TimePref
operator|)
operator|(
operator|(
name|TimePref
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|clone
argument_list|()
decl_stmt|;
name|TimePatternModel
name|m
init|=
name|tp
operator|.
name|getTimePatternModel
argument_list|()
decl_stmt|;
if|if
condition|(
name|mngDept
operator|.
name|isExternalManager
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|m
operator|.
name|weakenHardPreferences
argument_list|()
expr_stmt|;
name|tp
operator|.
name|setTimePatternModel
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|subpartPrefs
operator|.
name|add
argument_list|(
name|tp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|removeNeutralPreferences
argument_list|(
name|combinePreferences
argument_list|(
name|type
argument_list|,
name|subpartPrefs
argument_list|,
name|instrPrefs
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|public
name|Set
name|effectivePreferences
parameter_list|(
name|Class
name|type
parameter_list|)
block|{
name|Department
name|mngDept
init|=
name|getManagingDept
argument_list|()
decl_stmt|;
comment|// special handling of distribution preferences
if|if
condition|(
name|DistributionPref
operator|.
name|class
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|Set
name|prefs
init|=
name|effectiveDistributionPreferences
argument_list|(
name|mngDept
argument_list|)
decl_stmt|;
comment|//(mngDept==null?new TreeSet():mngDept.getPreferences(type, this));
if|if
condition|(
operator|!
name|mngDept
operator|.
name|isExternalManager
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|Set
name|instPref
init|=
name|classInstructorPrefsOfType
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|instPref
operator|!=
literal|null
condition|)
name|prefs
operator|.
name|addAll
argument_list|(
name|instPref
argument_list|)
expr_stmt|;
block|}
return|return
name|prefs
return|;
block|}
name|Set
name|classPrefs
init|=
name|super
operator|.
name|effectivePreferences
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|Set
name|instrPrefs
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|mngDept
operator|.
name|isExternalManager
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
comment|// departmental class -> take instructor preferences
name|instrPrefs
operator|=
name|classInstructorPrefsOfType
argument_list|(
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|instrPrefs
operator|==
literal|null
operator|||
name|instrPrefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|RoomPref
operator|.
name|class
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
comment|//Department Room Prefs are not used in this way
name|instrPrefs
operator|=
name|getManagingDept
argument_list|()
operator|.
name|getPreferences
argument_list|(
name|type
argument_list|)
expr_stmt|;
comment|//take department preference if there is no instructor pref
block|}
block|}
if|if
condition|(
name|instrPrefs
operator|==
literal|null
operator|||
name|instrPrefs
operator|.
name|isEmpty
argument_list|()
condition|)
name|instrPrefs
operator|=
name|getSession
argument_list|()
operator|.
name|getPreferences
argument_list|(
name|type
argument_list|)
expr_stmt|;
comment|// get session preference if there is no instructor or dept. pref
block|}
name|boolean
name|hasExactTimePattern
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|TimePref
operator|.
name|class
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
if|if
condition|(
name|classPrefs
operator|!=
literal|null
operator|&&
operator|!
name|classPrefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|classPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|tp
init|=
operator|(
name|TimePref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|tp
operator|.
name|getTimePattern
argument_list|()
operator|!=
literal|null
operator|&&
name|tp
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getType
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|TimePattern
operator|.
name|sTypeExactTime
condition|)
block|{
name|hasExactTimePattern
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|mngDept
operator|!=
literal|null
operator|&&
name|mngDept
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|getSchedulingSubpart
argument_list|()
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
comment|//subpart with the same owner -> take subpart preferences
name|Set
name|subpartPrefs
init|=
operator|(
name|hasExactTimePattern
condition|?
literal|null
else|:
name|getSchedulingSubpart
argument_list|()
operator|.
name|getPreferences
argument_list|(
name|type
argument_list|)
operator|)
decl_stmt|;
return|return
name|removeNeutralPreferences
argument_list|(
name|combinePreferences
argument_list|(
name|type
argument_list|,
name|classPrefs
argument_list|,
name|subpartPrefs
argument_list|,
name|instrPrefs
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
comment|//subpart with different owner -> take only time pattern from subpart preferences
if|if
condition|(
name|TimePref
operator|.
name|class
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|Set
name|subpartPrefs
init|=
operator|(
name|hasExactTimePattern
condition|?
literal|null
else|:
name|getSchedulingSubpart
argument_list|()
operator|.
name|getPreferences
argument_list|(
name|type
argument_list|)
operator|)
decl_stmt|;
name|Set
name|clearedSubpartPrefs
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|subpartPrefs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|subpartPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|tp
init|=
operator|(
name|TimePref
operator|)
operator|(
operator|(
name|TimePref
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|clone
argument_list|()
decl_stmt|;
name|TimePatternModel
name|m
init|=
name|tp
operator|.
name|getTimePatternModel
argument_list|()
decl_stmt|;
if|if
condition|(
name|mngDept
operator|.
name|isExternalManager
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|m
operator|.
name|weakenHardPreferences
argument_list|()
expr_stmt|;
name|tp
operator|.
name|setTimePatternModel
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|clearedSubpartPrefs
operator|.
name|add
argument_list|(
name|tp
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|removeNeutralPreferences
argument_list|(
name|combinePreferences
argument_list|(
name|type
argument_list|,
name|classPrefs
argument_list|,
name|clearedSubpartPrefs
argument_list|,
name|instrPrefs
argument_list|)
argument_list|)
return|;
block|}
else|else
return|return
name|removeNeutralPreferences
argument_list|(
name|classPrefs
argument_list|)
return|;
block|}
block|}
specifier|public
name|String
name|instructorHtml
parameter_list|(
name|String
name|instructorNameFormat
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|getClassInstructors
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|""
return|;
name|TreeSet
name|sortedInstructors
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|InstructorComparator
argument_list|()
argument_list|)
decl_stmt|;
name|sortedInstructors
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|getClassInstructors
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|sortedInstructors
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|ClassInstructor
name|ci
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ci
operator|=
operator|(
name|ClassInstructor
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|String
name|title
init|=
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getNameLastFirst
argument_list|()
decl_stmt|;
name|title
operator|+=
literal|" ("
operator|+
name|ci
operator|.
name|getPercentShare
argument_list|()
operator|+
literal|"%"
operator|+
operator|(
name|ci
operator|.
name|isLead
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|", lead"
else|:
literal|""
operator|)
operator|+
literal|")"
expr_stmt|;
if|if
condition|(
operator|!
name|isDisplayInstructor
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|title
operator|+=
literal|" - Do Not Display Instructor."
expr_stmt|;
block|}
if|if
condition|(
name|ci
operator|.
name|isLead
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<span style='font-weight:bold;"
operator|+
operator|(
name|isDisplayInstructor
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|""
else|:
literal|"font-style:italic;"
operator|)
operator|+
literal|"' title='"
operator|+
name|title
operator|+
literal|"'>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<span title='"
operator|+
name|title
operator|+
literal|"'>"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getName
argument_list|(
name|instructorNameFormat
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</span>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"<br>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|private
name|String
name|htmlForTimePatterns
parameter_list|(
name|Set
name|patterns
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|patterns
operator|!=
literal|null
condition|)
block|{
name|Iterator
name|it
init|=
name|patterns
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|TimePattern
name|t
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|t
operator|=
operator|(
name|TimePattern
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<BR>"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|patterns
operator|==
literal|null
operator|||
name|patterns
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
operator|.
name|intValue
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<span title='Arrange Hours'>Arr Hrs</span>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|nrHours
init|=
name|Math
operator|.
name|round
argument_list|(
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
operator|.
name|intValue
argument_list|()
operator|/
literal|50.0f
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<span title='Arrange "
operator|+
name|nrHours
operator|+
literal|" Hours'>Arr "
operator|+
name|nrHours
operator|+
literal|" Hrs</span>"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|public
name|String
name|effectiveTimePatternHtml
parameter_list|()
block|{
return|return
operator|(
name|htmlForTimePatterns
argument_list|(
name|this
operator|.
name|effectiveTimePatterns
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|public
name|String
name|timePatternHtml
parameter_list|()
block|{
return|return
operator|(
name|htmlForTimePatterns
argument_list|(
name|this
operator|.
name|getTimePatterns
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|public
name|Integer
name|getSectionNumber
parameter_list|()
block|{
return|return
name|getSectionNumber
argument_list|(
literal|true
argument_list|)
return|;
block|}
specifier|public
name|Integer
name|getSectionNumber
parameter_list|(
name|boolean
name|save
parameter_list|)
block|{
name|Integer
name|sectionNumber
init|=
name|getSectionNumberCache
argument_list|()
decl_stmt|;
if|if
condition|(
name|sectionNumber
operator|!=
literal|null
condition|)
return|return
name|sectionNumber
return|;
name|Comparator
name|cmp
init|=
operator|new
name|Comparator
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|Class_
name|c1
init|=
operator|(
name|Class_
operator|)
name|o1
decl_stmt|;
name|Class_
name|c2
init|=
operator|(
name|Class_
operator|)
name|o2
decl_stmt|;
if|if
condition|(
name|c1
operator|.
name|getParentClass
argument_list|()
operator|==
literal|null
operator|||
name|c2
operator|.
name|getParentClass
argument_list|()
operator|==
literal|null
operator|||
name|c1
operator|.
name|getParentClass
argument_list|()
operator|.
name|equals
argument_list|(
name|c2
operator|.
name|getParentClass
argument_list|()
argument_list|)
condition|)
return|return
name|c1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
else|else
return|return
name|compare
argument_list|(
name|c1
operator|.
name|getParentClass
argument_list|()
argument_list|,
name|c2
operator|.
name|getParentClass
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getSchedulingSubpart
argument_list|()
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cmp
operator|.
name|compare
argument_list|(
name|clazz
argument_list|,
name|this
argument_list|)
operator|<
literal|0
condition|)
name|idx
operator|++
expr_stmt|;
block|}
name|sectionNumber
operator|=
operator|new
name|Integer
argument_list|(
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getFirstSectionNumber
argument_list|(
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
operator|+
name|idx
argument_list|)
expr_stmt|;
name|setSectionNumberCache
argument_list|(
name|sectionNumber
argument_list|)
expr_stmt|;
if|if
condition|(
name|save
condition|)
block|{
operator|(
operator|new
name|Class_DAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|this
argument_list|)
expr_stmt|;
operator|(
operator|new
name|Class_DAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
return|return
name|sectionNumber
return|;
block|}
specifier|public
name|String
name|getSectionNumberString
parameter_list|()
block|{
return|return
name|getSectionNumber
argument_list|()
operator|+
name|getSchedulingSubpart
argument_list|()
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
return|;
block|}
specifier|public
name|Vector
name|getLeadInstructors
parameter_list|()
block|{
name|Vector
name|ret
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getClassInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|classInstructor
init|=
operator|(
name|ClassInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|classInstructor
operator|.
name|isLead
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|ret
operator|.
name|addElement
argument_list|(
name|classInstructor
operator|.
name|getInstructor
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**      * @return Class Label of the form {CourseName} {Itype} {[config]} {Section No.}      */
specifier|public
name|String
name|getClassLabel
parameter_list|()
block|{
comment|/*         SchedulingSubpart ss = getSchedulingSubpart();     	String itypeDesc = ss.getItypeDesc();     	if (ss.getInstrOfferingConfig().getInstructionalOffering().hasMultipleConfigurations())     		itypeDesc += " [" + ss.getInstrOfferingConfig().getName() + "]";         */
return|return
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|" "
operator|+
name|getSectionNumberString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getClassLabelWithTitle
parameter_list|()
block|{
return|return
name|getCourseNameWithTitle
argument_list|()
operator|+
literal|" "
operator|+
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|" "
operator|+
name|getSectionNumberString
argument_list|()
return|;
block|}
comment|/**      * @see getClassLabel()      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClassLabel
argument_list|()
return|;
block|}
comment|/** 	 * @return Class type to distinguish the sub class in PrefGroup 	 */
specifier|public
name|Class
name|getInstanceOf
parameter_list|()
block|{
return|return
name|Class_
operator|.
name|class
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.unitime.timetable.model.PreferenceGroup#canUserEdit(org.unitime.commons.User) 	 */
specifier|protected
name|boolean
name|canUserEdit
parameter_list|(
name|User
name|user
parameter_list|)
block|{
name|TimetableManager
name|tm
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|tm
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|Roles
operator|.
name|DEPT_SCHED_MGR_ROLE
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getRole
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|tm
operator|.
name|getDepartments
argument_list|()
operator|.
name|contains
argument_list|(
name|getManagingDept
argument_list|()
argument_list|)
condition|)
block|{
comment|//I am manager, return true if manager can edit the class
if|if
condition|(
name|getManagingDept
argument_list|()
operator|.
name|effectiveStatusType
argument_list|()
operator|.
name|canManagerEdit
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
name|tm
operator|.
name|getDepartments
argument_list|()
operator|.
name|contains
argument_list|(
name|getControllingDept
argument_list|()
argument_list|)
condition|)
block|{
comment|//I am owner, return true if owner can edit the class
if|if
condition|(
name|getManagingDept
argument_list|()
operator|.
name|effectiveStatusType
argument_list|()
operator|.
name|canOwnerEdit
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/* 	 * canUserEdit() - if the user can edit any of the classes in the same 	 * 	   SchedulingSubpart as this class then the user can view this class 	 */
specifier|protected
name|boolean
name|canUserView
parameter_list|(
name|User
name|user
parameter_list|)
block|{
name|TimetableManager
name|tm
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|tm
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|tm
operator|.
name|getDepartments
argument_list|()
operator|.
name|contains
argument_list|(
name|getManagingDept
argument_list|()
argument_list|)
condition|)
block|{
comment|//I am manager, return true if manager can view the class
if|if
condition|(
name|getManagingDept
argument_list|()
operator|.
name|effectiveStatusType
argument_list|()
operator|.
name|canManagerView
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
name|tm
operator|.
name|getDepartments
argument_list|()
operator|.
name|contains
argument_list|(
name|getControllingDept
argument_list|()
argument_list|)
condition|)
block|{
comment|//I am owner, return true if owner can view the class
if|if
condition|(
name|getManagingDept
argument_list|()
operator|.
name|effectiveStatusType
argument_list|()
operator|.
name|canOwnerView
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
name|tm
operator|.
name|isExternalManager
argument_list|()
operator|&&
name|getManagingDept
argument_list|()
operator|.
name|effectiveStatusType
argument_list|()
operator|.
name|canManagerView
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isLimitedEditable
parameter_list|(
name|User
name|user
parameter_list|)
block|{
if|if
condition|(
name|isEditableBy
argument_list|(
name|user
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|user
operator|.
name|isAdmin
argument_list|()
condition|)
return|return
literal|true
return|;
name|TimetableManager
name|tm
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|tm
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|Roles
operator|.
name|DEPT_SCHED_MGR_ROLE
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getRole
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|tm
operator|.
name|getDepartments
argument_list|()
operator|.
name|contains
argument_list|(
name|getManagingDept
argument_list|()
argument_list|)
condition|)
block|{
comment|//I am manager, return true if manager can view the class
if|if
condition|(
name|getManagingDept
argument_list|()
operator|.
name|effectiveStatusType
argument_list|()
operator|.
name|canManagerLimitedEdit
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
name|tm
operator|.
name|getDepartments
argument_list|()
operator|.
name|contains
argument_list|(
name|getControllingDept
argument_list|()
argument_list|)
condition|)
block|{
comment|//I am owner, return true if owner can view the class
if|if
condition|(
name|getManagingDept
argument_list|()
operator|.
name|effectiveStatusType
argument_list|()
operator|.
name|canOwnerLimitedEdit
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|String
name|htmlLabel
parameter_list|()
block|{
return|return
operator|(
name|getItypeDesc
argument_list|()
operator|+
literal|" "
operator|+
name|getSectionNumberString
argument_list|()
operator|)
return|;
block|}
specifier|public
name|boolean
name|canBeDeleted
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|getChildClasses
argument_list|()
operator|!=
literal|null
operator|&&
name|this
operator|.
name|getChildClasses
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
operator|(
literal|false
operator|)
return|;
block|}
if|if
condition|(
name|this
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|totalCapacity
init|=
literal|0
decl_stmt|;
name|Class_
name|c
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|this
operator|.
name|getParentClass
argument_list|()
operator|.
name|getChildClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|c
operator|=
operator|(
name|Class_
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|totalCapacity
operator|+=
name|c
operator|.
name|getExpectedCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|totalCapacity
operator|-=
name|this
operator|.
name|getExpectedCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|totalCapacity
operator|<
name|this
operator|.
name|getParentClass
argument_list|()
operator|.
name|getExpectedCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
condition|)
block|{
return|return
operator|(
literal|false
operator|)
return|;
block|}
block|}
return|return
operator|(
literal|true
operator|)
return|;
block|}
comment|/**      * Remove class from instructor list      * @param ci      */
specifier|public
name|void
name|removeClassInstructor
parameter_list|(
name|ClassInstructor
name|classInstr
parameter_list|)
block|{
name|Set
name|s
init|=
name|this
operator|.
name|getClassInstructors
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|s
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ci
operator|.
name|getUniqueId
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|classInstr
operator|.
name|getUniqueId
argument_list|()
operator|.
name|intValue
argument_list|()
condition|)
block|{
name|s
operator|.
name|remove
argument_list|(
name|ci
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
specifier|public
name|DatePattern
name|effectiveDatePattern
parameter_list|()
block|{
if|if
condition|(
name|getDatePattern
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|getDatePattern
argument_list|()
return|;
return|return
name|getSchedulingSubpart
argument_list|()
operator|.
name|effectiveDatePattern
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|canUseHardTimePreferences
parameter_list|(
name|User
name|user
parameter_list|)
block|{
if|if
condition|(
name|user
operator|.
name|isAdmin
argument_list|()
condition|)
return|return
literal|true
return|;
name|TimetableManager
name|tm
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|tm
operator|.
name|getDepartments
argument_list|()
operator|.
name|contains
argument_list|(
name|getManagingDept
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|getControllingDept
argument_list|()
operator|.
name|isAllowReqTime
argument_list|()
operator|!=
literal|null
operator|&&
name|getControllingDept
argument_list|()
operator|.
name|isAllowReqTime
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|getManagingDept
argument_list|()
operator|.
name|isAllowReqTime
argument_list|()
operator|!=
literal|null
operator|&&
name|getManagingDept
argument_list|()
operator|.
name|isAllowReqTime
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
operator|(
literal|false
operator|)
return|;
block|}
specifier|public
name|boolean
name|canUseHardRoomPreferences
parameter_list|(
name|User
name|user
parameter_list|)
block|{
if|if
condition|(
name|user
operator|.
name|isAdmin
argument_list|()
condition|)
return|return
literal|true
return|;
name|TimetableManager
name|tm
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|tm
operator|.
name|getDepartments
argument_list|()
operator|.
name|contains
argument_list|(
name|getManagingDept
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|getControllingDept
argument_list|()
operator|.
name|isAllowReqRoom
argument_list|()
operator|!=
literal|null
operator|&&
name|getControllingDept
argument_list|()
operator|.
name|isAllowReqRoom
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|getManagingDept
argument_list|()
operator|.
name|isAllowReqRoom
argument_list|()
operator|!=
literal|null
operator|&&
name|getManagingDept
argument_list|()
operator|.
name|isAllowReqRoom
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
operator|(
literal|false
operator|)
return|;
block|}
specifier|public
name|Set
name|getAvailableRooms
parameter_list|()
block|{
name|Set
name|rooms
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getManagingDept
argument_list|()
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|roomDept
init|=
operator|(
name|RoomDept
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|rooms
operator|.
name|add
argument_list|(
name|roomDept
operator|.
name|getRoom
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|rooms
return|;
block|}
specifier|public
name|Set
name|getAvailableRoomFeatures
parameter_list|()
block|{
name|Set
name|features
init|=
name|super
operator|.
name|getAvailableRoomFeatures
argument_list|()
decl_stmt|;
name|Department
name|dept
init|=
name|getManagingDept
argument_list|()
decl_stmt|;
if|if
condition|(
name|dept
operator|!=
literal|null
condition|)
name|features
operator|.
name|addAll
argument_list|(
name|DepartmentRoomFeature
operator|.
name|getAllDepartmentRoomFeatures
argument_list|(
name|dept
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|features
return|;
block|}
specifier|public
name|Set
name|getAvailableRoomGroups
parameter_list|()
block|{
name|Set
name|groups
init|=
name|super
operator|.
name|getAvailableRoomGroups
argument_list|()
decl_stmt|;
name|Department
name|dept
init|=
name|getManagingDept
argument_list|()
decl_stmt|;
if|if
condition|(
name|dept
operator|!=
literal|null
condition|)
name|groups
operator|.
name|addAll
argument_list|(
name|RoomGroup
operator|.
name|getAllDepartmentRoomGroups
argument_list|(
name|dept
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|groups
return|;
block|}
specifier|public
name|Class_
name|getNextClass
parameter_list|(
name|HttpSession
name|session
parameter_list|,
name|User
name|user
parameter_list|,
name|boolean
name|canEdit
parameter_list|,
name|boolean
name|canView
parameter_list|)
block|{
return|return
name|getNextClass
argument_list|(
name|session
argument_list|,
operator|new
name|NavigationComparator
argument_list|()
argument_list|,
name|user
argument_list|,
name|canEdit
argument_list|,
name|canView
argument_list|)
return|;
block|}
specifier|public
name|Class_
name|getPreviousClass
parameter_list|(
name|HttpSession
name|session
parameter_list|,
name|User
name|user
parameter_list|,
name|boolean
name|canEdit
parameter_list|,
name|boolean
name|canView
parameter_list|)
block|{
return|return
name|getPreviousClass
argument_list|(
name|session
argument_list|,
operator|new
name|NavigationComparator
argument_list|()
argument_list|,
name|user
argument_list|,
name|canEdit
argument_list|,
name|canView
argument_list|)
return|;
block|}
specifier|public
name|Class_
name|getNextClass
parameter_list|(
name|HttpSession
name|session
parameter_list|,
name|Comparator
name|cmp
parameter_list|,
name|User
name|user
parameter_list|,
name|boolean
name|canEdit
parameter_list|,
name|boolean
name|canView
parameter_list|)
block|{
name|Long
name|nextId
init|=
name|Navigation
operator|.
name|getNext
argument_list|(
name|session
argument_list|,
name|Navigation
operator|.
name|sClassLevel
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|nextId
operator|.
name|longValue
argument_list|()
operator|<
literal|0
condition|)
return|return
literal|null
return|;
name|Class_
name|next
init|=
operator|(
operator|new
name|Class_DAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|nextId
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|canEdit
operator|&&
operator|!
name|next
operator|.
name|isEditableBy
argument_list|(
name|user
argument_list|)
condition|)
return|return
name|next
operator|.
name|getNextClass
argument_list|(
name|session
argument_list|,
name|cmp
argument_list|,
name|user
argument_list|,
name|canEdit
argument_list|,
name|canView
argument_list|)
return|;
if|if
condition|(
name|canView
operator|&&
operator|!
name|next
operator|.
name|isViewableBy
argument_list|(
name|user
argument_list|)
condition|)
return|return
name|next
operator|.
name|getNextClass
argument_list|(
name|session
argument_list|,
name|cmp
argument_list|,
name|user
argument_list|,
name|canEdit
argument_list|,
name|canView
argument_list|)
return|;
return|return
name|next
return|;
block|}
name|Class_
name|next
init|=
literal|null
decl_stmt|;
name|SchedulingSubpart
name|subpart
init|=
name|getSchedulingSubpart
argument_list|()
decl_stmt|;
while|while
condition|(
name|next
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|subpart
operator|==
literal|null
condition|)
break|break;
for|for
control|(
name|Iterator
name|i
init|=
name|subpart
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|canEdit
operator|&&
operator|!
name|c
operator|.
name|isEditableBy
argument_list|(
name|user
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|canView
operator|&&
operator|!
name|c
operator|.
name|isViewableBy
argument_list|(
name|user
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|subpart
operator|.
name|equals
argument_list|(
name|getSchedulingSubpart
argument_list|()
argument_list|)
operator|&&
name|cmp
operator|.
name|compare
argument_list|(
name|this
argument_list|,
name|c
argument_list|)
operator|>=
literal|0
condition|)
continue|continue;
if|if
condition|(
name|next
operator|==
literal|null
operator|||
name|cmp
operator|.
name|compare
argument_list|(
name|next
argument_list|,
name|c
argument_list|)
operator|>
literal|0
condition|)
name|next
operator|=
name|c
expr_stmt|;
block|}
name|subpart
operator|=
name|subpart
operator|.
name|getNextSchedulingSubpart
argument_list|(
name|session
argument_list|,
name|cmp
argument_list|,
name|user
argument_list|,
name|canEdit
argument_list|,
name|canView
argument_list|)
expr_stmt|;
block|}
return|return
name|next
return|;
block|}
specifier|public
name|Class_
name|getPreviousClass
parameter_list|(
name|HttpSession
name|session
parameter_list|,
name|Comparator
name|cmp
parameter_list|,
name|User
name|user
parameter_list|,
name|boolean
name|canEdit
parameter_list|,
name|boolean
name|canView
parameter_list|)
block|{
name|Long
name|previosId
init|=
name|Navigation
operator|.
name|getPrevious
argument_list|(
name|session
argument_list|,
name|Navigation
operator|.
name|sClassLevel
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|previosId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|previosId
operator|.
name|longValue
argument_list|()
operator|<
literal|0
condition|)
return|return
literal|null
return|;
name|Class_
name|previos
init|=
operator|(
operator|new
name|Class_DAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|previosId
argument_list|)
decl_stmt|;
if|if
condition|(
name|previos
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|canEdit
operator|&&
operator|!
name|previos
operator|.
name|isEditableBy
argument_list|(
name|user
argument_list|)
condition|)
return|return
name|previos
operator|.
name|getPreviousClass
argument_list|(
name|session
argument_list|,
name|cmp
argument_list|,
name|user
argument_list|,
name|canEdit
argument_list|,
name|canView
argument_list|)
return|;
if|if
condition|(
name|canView
operator|&&
operator|!
name|previos
operator|.
name|isViewableBy
argument_list|(
name|user
argument_list|)
condition|)
return|return
name|previos
operator|.
name|getPreviousClass
argument_list|(
name|session
argument_list|,
name|cmp
argument_list|,
name|user
argument_list|,
name|canEdit
argument_list|,
name|canView
argument_list|)
return|;
return|return
name|previos
return|;
block|}
name|Class_
name|previous
init|=
literal|null
decl_stmt|;
name|SchedulingSubpart
name|subpart
init|=
name|getSchedulingSubpart
argument_list|()
decl_stmt|;
while|while
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|subpart
operator|==
literal|null
condition|)
break|break;
for|for
control|(
name|Iterator
name|i
init|=
name|subpart
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|canEdit
operator|&&
operator|!
name|c
operator|.
name|isEditableBy
argument_list|(
name|user
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|canView
operator|&&
operator|!
name|c
operator|.
name|isViewableBy
argument_list|(
name|user
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|subpart
operator|.
name|equals
argument_list|(
name|getSchedulingSubpart
argument_list|()
argument_list|)
operator|&&
name|cmp
operator|.
name|compare
argument_list|(
name|this
argument_list|,
name|c
argument_list|)
operator|<=
literal|0
condition|)
continue|continue;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|cmp
operator|.
name|compare
argument_list|(
name|previous
argument_list|,
name|c
argument_list|)
operator|<
literal|0
condition|)
name|previous
operator|=
name|c
expr_stmt|;
block|}
name|subpart
operator|=
name|subpart
operator|.
name|getPreviousSchedulingSubpart
argument_list|(
name|session
argument_list|,
name|cmp
argument_list|,
name|user
argument_list|,
name|canEdit
argument_list|,
name|canView
argument_list|)
expr_stmt|;
block|}
return|return
name|previous
return|;
block|}
comment|/**      * Deletes all distribution prefs and updates the class_ objects      * @param hibSession      */
specifier|public
name|void
name|deleteAllDistributionPreferences
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|deleteAllDistributionPreferences
argument_list|(
name|hibSession
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Deletes all distribution prefs      * @param hibSession      * @param updateClass If true then class_ object is updated      */
specifier|public
name|void
name|deleteAllDistributionPreferences
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|boolean
name|updateClass
parameter_list|)
block|{
name|boolean
name|deleted
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|getDistributionObjects
argument_list|()
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|Iterator
name|i
init|=
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|relatedObject
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|DistributionPref
name|distributionPref
init|=
name|relatedObject
operator|.
name|getDistributionPref
argument_list|()
decl_stmt|;
name|distributionPref
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|remove
argument_list|(
name|relatedObject
argument_list|)
expr_stmt|;
name|Integer
name|seqNo
init|=
name|relatedObject
operator|.
name|getSequenceNumber
argument_list|()
decl_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|relatedObject
argument_list|)
expr_stmt|;
name|deleted
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|distributionPref
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PreferenceGroup
name|owner
init|=
name|distributionPref
operator|.
name|getOwner
argument_list|()
decl_stmt|;
name|owner
operator|.
name|getPreferences
argument_list|()
operator|.
name|remove
argument_list|(
name|distributionPref
argument_list|)
expr_stmt|;
name|getPreferences
argument_list|()
operator|.
name|remove
argument_list|(
name|distributionPref
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|distributionPref
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|seqNo
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|j
init|=
name|distributionPref
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|dObj
init|=
operator|(
name|DistributionObject
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|seqNo
operator|.
name|compareTo
argument_list|(
name|dObj
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
block|{
name|dObj
operator|.
name|setSequenceNumber
argument_list|(
operator|new
name|Integer
argument_list|(
name|dObj
operator|.
name|getSequenceNumber
argument_list|()
operator|.
name|intValue
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|dObj
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|updateClass
condition|)
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|distributionPref
argument_list|)
expr_stmt|;
block|}
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|deleted
operator|&&
name|updateClass
condition|)
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Integer
name|getMinRoomLimit
parameter_list|()
block|{
name|int
name|expCap
init|=
operator|(
name|getExpectedCapacity
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|getExpectedCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
operator|)
decl_stmt|;
name|float
name|roomRatio
init|=
operator|(
name|getRoomRatio
argument_list|()
operator|==
literal|null
condition|?
literal|0.0f
else|:
name|getRoomRatio
argument_list|()
operator|.
name|floatValue
argument_list|()
operator|)
decl_stmt|;
return|return
operator|new
name|Integer
argument_list|(
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|expCap
operator|<=
literal|0
condition|?
name|roomRatio
else|:
name|expCap
operator|*
name|roomRatio
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
name|findAll
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
return|return
operator|(
operator|new
name|Class_DAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct c from Class_ c where "
operator|+
literal|"c.schedulingSubpart.instrOfferingConfig.instructionalOffering.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|List
name|findAllForControllingSubjectArea
parameter_list|(
name|String
name|subjectAreaAbbv
parameter_list|,
name|Long
name|sessionId
parameter_list|)
block|{
return|return
operator|(
operator|new
name|Class_DAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct c from Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings as co where "
operator|+
literal|"co.subjectArea.subjectAreaAbbreviation=:subjectAreaAbbv and c.schedulingSubpart.instrOfferingConfig.instructionalOffering.session.uniqueId=:sessionId and co.isControl=1"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"subjectAreaAbbv"
argument_list|,
name|subjectAreaAbbv
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
name|String
name|getDivSecNumber
parameter_list|()
block|{
if|if
condition|(
name|getParentClass
argument_list|()
operator|!=
literal|null
operator|&&
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|equals
argument_list|(
name|getParentClass
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getParentClass
argument_list|()
operator|.
name|getDivSecNumber
argument_list|()
return|;
block|}
name|String
name|suffix
init|=
name|getClassSuffix
argument_list|()
decl_stmt|;
if|if
condition|(
name|suffix
operator|!=
literal|null
operator|&&
name|suffix
operator|.
name|length
argument_list|()
operator|==
literal|6
condition|)
return|return
name|suffix
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
operator|+
literal|"-"
operator|+
name|suffix
operator|.
name|substring
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|)
return|;
return|return
name|suffix
return|;
block|}
specifier|public
name|int
name|getClassLimit
parameter_list|()
block|{
return|return
name|getClassLimit
argument_list|(
operator|new
name|CommitedClassAssignmentProxy
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|getClassLimit
parameter_list|(
name|ClassAssignmentProxy
name|proxy
parameter_list|)
block|{
comment|// MinClassLimit == MaxClassLimit == ClassLimit
if|if
condition|(
name|getExpectedCapacity
argument_list|()
operator|.
name|equals
argument_list|(
name|getMaxExpectedCapacity
argument_list|()
argument_list|)
condition|)
return|return
name|getExpectedCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
return|;
comment|// No assignment -> take MaxClassLimit
name|int
name|maxClassLimit
init|=
name|getMaxExpectedCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|Assignment
name|assignment
init|=
literal|null
decl_stmt|;
try|try
block|{
name|assignment
operator|=
operator|(
name|proxy
operator|==
literal|null
condition|?
literal|null
else|:
name|proxy
operator|.
name|getAssignment
argument_list|(
name|this
argument_list|)
operator|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
comment|// Assignment -> take smaller from MaxClassLimit and RoomSize / RoomRatio
name|maxClassLimit
operator|=
name|Math
operator|.
name|min
argument_list|(
name|getMaxExpectedCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|assignment
operator|.
name|getPlacement
argument_list|()
operator|.
name|minRoomSize
argument_list|()
operator|/
name|getRoomRatio
argument_list|()
operator|.
name|floatValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getChildClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|maxClassLimit
return|;
comment|// if there are children classes ...
for|for
control|(
name|Iterator
name|i
init|=
name|getSchedulingSubpart
argument_list|()
operator|.
name|getChildSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|childSubpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// take all children classes of the same subpart, sum their class limit
name|int
name|maxChildrenLimit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|getChildClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|childClass
init|=
operator|(
name|Class_
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|childClass
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|equals
argument_list|(
name|childSubpart
argument_list|)
condition|)
continue|continue;
name|maxChildrenLimit
operator|+=
name|childClass
operator|.
name|getClassLimit
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
comment|// children class limit cannot be exceeded
name|maxClassLimit
operator|=
name|Math
operator|.
name|min
argument_list|(
name|maxClassLimit
argument_list|,
name|maxChildrenLimit
argument_list|)
expr_stmt|;
block|}
return|return
name|maxClassLimit
return|;
block|}
specifier|public
name|int
name|getClassLimit
parameter_list|(
name|CourseOffering
name|offering
parameter_list|)
block|{
return|return
name|getClassLimit
argument_list|(
operator|new
name|CommitedClassAssignmentProxy
argument_list|()
argument_list|,
name|offering
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|hasCourseReservation
parameter_list|(
name|CourseOffering
name|offering
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|getCourseReservations
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOfferingReservation
name|reservation
init|=
operator|(
name|CourseOfferingReservation
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|reservation
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|equals
argument_list|(
name|offering
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|getChildClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|hasCourseReservation
argument_list|(
name|offering
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|getClassLimit
parameter_list|(
name|ClassAssignmentProxy
name|proxy
parameter_list|,
name|CourseOffering
name|offering
parameter_list|)
block|{
name|int
name|limit
init|=
name|getClassLimit
argument_list|(
name|proxy
argument_list|)
decl_stmt|;
if|if
condition|(
name|limit
operator|==
literal|0
operator|||
name|offering
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|//CASE 0: no cross-listing or zero class limit -> return the class limit as it is
return|return
name|limit
return|;
block|}
name|Long
name|solutionId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Assignment
name|a
init|=
name|proxy
operator|.
name|getAssignment
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
name|solutionId
operator|=
name|a
operator|.
name|getSolution
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|solutionId
operator|==
literal|null
operator|&&
name|getCommittedAssignment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|solutionId
operator|=
name|getCommittedAssignment
argument_list|()
operator|.
name|getSolution
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
block|}
name|float
name|nrReservedStudents
init|=
literal|0
decl_stmt|;
name|float
name|nrReservedStudentsThisOffering
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|offering
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseReservations
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOfferingReservation
name|reservation
init|=
operator|(
name|CourseOfferingReservation
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|reservation
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|equals
argument_list|(
name|offering
argument_list|)
condition|)
name|nrReservedStudentsThisOffering
operator|+=
name|reservation
operator|.
name|getReserved
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|nrReservedStudents
operator|+=
name|reservation
operator|.
name|getReserved
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|float
name|nrLastLikeStudents
init|=
operator|(
name|float
operator|)
operator|(
name|offering
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getDemand
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|offering
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getDemand
argument_list|()
operator|.
name|intValue
argument_list|()
operator|)
decl_stmt|;
name|float
name|nrLastLikeStudentsThisOffering
init|=
operator|(
name|float
operator|)
name|offering
operator|.
name|getDemand
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|boolean
name|canUseLastLikeData
init|=
operator|(
name|solutionId
operator|!=
literal|null
operator|&&
name|nrLastLikeStudentsThisOffering
operator|>
literal|0
operator|)
decl_stmt|;
if|if
condition|(
name|canUseLastLikeData
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|offering
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|co
init|=
operator|(
name|CourseOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|co
operator|.
name|getDemand
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
literal|0
condition|)
block|{
name|canUseLastLikeData
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|canUseLastLikeData
condition|)
block|{
comment|//CASE 1: last-like term student course demands are there
name|float
name|nrStudents
init|=
operator|(
operator|(
name|Number
operator|)
operator|(
operator|new
name|Class_DAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count (distinct cod.student.uniqueId) from LastLikeCourseDemand cod, "
operator|+
literal|"StudentEnrollment se, "
operator|+
literal|"CourseOffering co left outer join co.demandOffering cox "
operator|+
literal|"where co.instructionalOffering.uniqueId=:instructionalOfferingId and "
operator|+
literal|"se.studentId=cod.student.uniqueId and se.solution.uniqueId=:solutionId and se.clazz.uniqueId=:classId and "
operator|+
literal|"((cod.subjectArea = co.subjectArea and cod.courseNbr=co.courseNbr) or "
operator|+
literal|"(cod.subjectArea = cox.subjectArea and cod.courseNbr=cox.courseNbr))"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"instructionalOfferingId"
argument_list|,
name|offering
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"solutionId"
argument_list|,
name|solutionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"classId"
argument_list|,
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|floatValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|nrStudents
operator|==
literal|0
condition|)
return|return
literal|0
return|;
name|float
name|nrStudentsThisOffering
init|=
operator|(
operator|(
name|Number
operator|)
operator|(
operator|new
name|Class_DAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count (distinct cod.student.uniqueId) from LastLikeCourseDemand cod, "
operator|+
literal|"StudentEnrollment se, "
operator|+
literal|"CourseOffering co left outer join co.demandOffering cox "
operator|+
literal|"where co.uniqueId=:offeringId and "
operator|+
literal|"se.studentId=cod.student.uniqueId and se.solution.uniqueId=:solutionId and se.clazz.uniqueId=:classId and "
operator|+
literal|"((cod.subjectArea = co.subjectArea and cod.courseNbr=co.courseNbr) or "
operator|+
literal|"(cod.subjectArea = cox.subjectArea and cod.courseNbr=cox.courseNbr))"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"offeringId"
argument_list|,
name|offering
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"solutionId"
argument_list|,
name|solutionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"classId"
argument_list|,
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|floatValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|nrStudentsThisOffering
operator|==
literal|0
condition|)
return|return
literal|0
return|;
comment|// return number proportional to the number of enrolled students
name|float
name|studentWeightThisOffering
init|=
name|nrReservedStudentsThisOffering
operator|/
name|nrLastLikeStudentsThisOffering
decl_stmt|;
name|float
name|otherStudentWeight
init|=
operator|(
name|nrReservedStudents
operator|-
name|nrReservedStudentsThisOffering
operator|)
operator|/
operator|(
name|nrLastLikeStudents
operator|-
name|nrLastLikeStudentsThisOffering
operator|)
decl_stmt|;
name|float
name|ratio
init|=
operator|(
name|studentWeightThisOffering
operator|*
name|nrStudentsThisOffering
operator|)
operator|/
operator|(
name|studentWeightThisOffering
operator|*
name|nrStudentsThisOffering
operator|+
operator|(
name|nrStudents
operator|-
name|nrStudentsThisOffering
operator|)
operator|*
name|otherStudentWeight
operator|)
decl_stmt|;
return|return
name|Math
operator|.
name|round
argument_list|(
name|ratio
operator|*
name|limit
argument_list|)
return|;
block|}
if|if
condition|(
name|nrReservedStudents
operator|>
literal|0
condition|)
block|{
comment|//CASE 2: no last-like term student course demands, but there are course reservations
if|if
condition|(
operator|!
name|getChildClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//CASE 2a: base the class limit on the limits of children
name|float
name|limitThisOffering
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getSchedulingSubpart
argument_list|()
operator|.
name|getChildSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|float
name|limitThisSubpart
init|=
literal|0
decl_stmt|;
name|float
name|limitThisSubpartThisOffering
init|=
literal|0
decl_stmt|;
name|boolean
name|hasCourseReservation
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|getChildClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|childClass
init|=
operator|(
name|Class_
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|childClass
operator|.
name|hasCourseReservation
argument_list|(
name|offering
argument_list|)
condition|)
name|hasCourseReservation
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|childClass
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|equals
argument_list|(
name|subpart
argument_list|)
condition|)
continue|continue;
name|limitThisSubpart
operator|+=
name|childClass
operator|.
name|getClassLimit
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
name|limitThisSubpartThisOffering
operator|+=
name|childClass
operator|.
name|getClassLimit
argument_list|(
name|proxy
argument_list|,
name|offering
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|limitThisOffering
operator|<
literal|0f
condition|)
block|{
name|limitThisOffering
operator|=
name|limitThisSubpartThisOffering
operator|*
operator|(
name|limit
operator|/
name|limitThisSubpart
operator|)
expr_stmt|;
block|}
if|else if
condition|(
name|hasCourseReservation
condition|)
block|{
name|limitThisOffering
operator|=
name|limitThisSubpartThisOffering
operator|*
operator|(
name|limit
operator|/
name|limitThisSubpart
operator|)
expr_stmt|;
break|break;
block|}
else|else
block|{
name|limitThisOffering
operator|=
name|Math
operator|.
name|min
argument_list|(
name|limitThisOffering
argument_list|,
name|limitThisSubpartThisOffering
operator|*
operator|(
name|limit
operator|/
name|limitThisSubpart
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|Math
operator|.
name|round
argument_list|(
name|limitThisOffering
argument_list|)
operator|>=
literal|0
condition|)
return|return
name|Math
operator|.
name|round
argument_list|(
name|limitThisOffering
argument_list|)
return|;
block|}
else|else
block|{
comment|//CASE 2b: compute limit on bottom most classes
name|Hashtable
name|reservedClasses
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getSchedulingSubpart
argument_list|()
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|HashSet
name|courseOfferingsThisClass
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|Class_
name|c
init|=
name|clazz
decl_stmt|;
while|while
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|Iterator
name|j
init|=
literal|null
decl_stmt|;
try|try
block|{
name|j
operator|=
name|c
operator|.
name|getCourseReservations
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LazyInitializationException
name|e
parameter_list|)
block|{
name|c
operator|=
operator|new
name|Class_DAO
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|j
operator|=
name|c
operator|.
name|getCourseReservations
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|j
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CourseOfferingReservation
name|res
init|=
operator|(
name|CourseOfferingReservation
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|courseOfferingsThisClass
operator|.
name|add
argument_list|(
name|res
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|c
operator|=
name|c
operator|.
name|getParentClass
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|j
init|=
name|courseOfferingsThisClass
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|co
init|=
operator|(
name|CourseOffering
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|HashSet
name|reservedClassesThisCO
init|=
operator|(
name|HashSet
operator|)
name|reservedClasses
operator|.
name|get
argument_list|(
name|co
argument_list|)
decl_stmt|;
if|if
condition|(
name|reservedClassesThisCO
operator|==
literal|null
condition|)
block|{
name|reservedClassesThisCO
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|reservedClasses
operator|.
name|put
argument_list|(
name|co
argument_list|,
name|reservedClassesThisCO
argument_list|)
expr_stmt|;
block|}
name|reservedClassesThisCO
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|reservedClasses
operator|.
name|get
argument_list|(
name|offering
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|HashSet
name|reservedClassesThisCO
init|=
operator|(
name|HashSet
operator|)
name|reservedClasses
operator|.
name|get
argument_list|(
name|offering
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|reservedClassesThisCO
operator|.
name|contains
argument_list|(
name|this
argument_list|)
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|reservedClassesThisCO
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
return|return
name|Math
operator|.
name|round
argument_list|(
name|nrReservedStudentsThisOffering
argument_list|)
return|;
name|float
name|totalLimit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|reservedClassesThisCO
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|totalLimit
operator|+=
name|clazz
operator|.
name|getClassLimit
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
return|return
name|Math
operator|.
name|round
argument_list|(
name|nrReservedStudentsThisOffering
operator|*
operator|(
name|limit
operator|/
name|totalLimit
operator|)
argument_list|)
return|;
block|}
else|else
block|{
comment|//all classes but the ones reserved
name|int
name|updatedLimit
init|=
name|limit
decl_stmt|;
name|float
name|updatedNrReservedStudents
init|=
name|nrReservedStudents
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|reservedClasses
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|CourseOffering
name|co
init|=
operator|(
name|CourseOffering
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|HashSet
name|classes
init|=
operator|(
name|HashSet
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|float
name|nrReservedStudentsCO
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|offering
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseReservations
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOfferingReservation
name|reservation
init|=
operator|(
name|CourseOfferingReservation
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|reservation
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|equals
argument_list|(
name|co
argument_list|)
condition|)
name|nrReservedStudentsCO
operator|+=
name|reservation
operator|.
name|getReserved
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|updatedNrReservedStudents
operator|-=
name|nrReservedStudentsCO
expr_stmt|;
if|if
condition|(
operator|!
name|classes
operator|.
name|contains
argument_list|(
name|this
argument_list|)
condition|)
continue|continue;
name|float
name|totalLimit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|totalLimit
operator|+=
name|clazz
operator|.
name|getClassLimit
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
name|updatedLimit
operator|-=
name|Math
operator|.
name|round
argument_list|(
name|nrReservedStudentsCO
operator|*
operator|(
name|limit
operator|/
name|totalLimit
operator|)
argument_list|)
expr_stmt|;
block|}
name|float
name|ratio
init|=
name|nrReservedStudentsThisOffering
operator|/
name|updatedNrReservedStudents
decl_stmt|;
return|return
name|Math
operator|.
name|round
argument_list|(
name|ratio
operator|*
name|updatedLimit
argument_list|)
return|;
block|}
block|}
comment|// return number proportional to the reserved spaces
name|float
name|ratio
init|=
name|nrReservedStudentsThisOffering
operator|/
name|nrReservedStudents
decl_stmt|;
return|return
name|Math
operator|.
name|round
argument_list|(
name|ratio
operator|*
name|limit
argument_list|)
return|;
block|}
comment|//CASE 3: no last-like term student course demands, no course reservations
comment|// return the class limit as it is
return|return
name|limit
return|;
block|}
comment|/**      * Returns a list containing all the types of reservations for a Class      * in the order: Individual, Group, Acad Area, POS, Course Offering      * @param individual include individual reservations      * @param studentGroup include student group reservations      * @param acadArea include academic area reservations      * @param pos include pos reservations      * @param course include course reservations      * @return collection of reservations (collection is empty is none found)      */
specifier|public
name|Collection
name|getReservations
parameter_list|(
name|boolean
name|individual
parameter_list|,
name|boolean
name|studentGroup
parameter_list|,
name|boolean
name|acadArea
parameter_list|,
name|boolean
name|pos
parameter_list|,
name|boolean
name|course
parameter_list|)
block|{
name|Collection
name|resv
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
if|if
condition|(
name|individual
operator|&&
name|this
operator|.
name|getIndividualReservations
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
name|c
init|=
operator|new
name|Vector
argument_list|(
name|this
operator|.
name|getIndividualReservations
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|c
argument_list|,
operator|new
name|IndividualReservationComparator
argument_list|()
argument_list|)
expr_stmt|;
name|resv
operator|.
name|addAll
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|studentGroup
operator|&&
name|this
operator|.
name|getStudentGroupReservations
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
name|c
init|=
operator|new
name|Vector
argument_list|(
name|this
operator|.
name|getStudentGroupReservations
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|c
argument_list|,
operator|new
name|StudentGroupReservationComparator
argument_list|()
argument_list|)
expr_stmt|;
name|resv
operator|.
name|addAll
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|acadArea
operator|&&
name|this
operator|.
name|getAcadAreaReservations
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
name|c
init|=
operator|new
name|Vector
argument_list|(
name|this
operator|.
name|getAcadAreaReservations
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|c
argument_list|,
operator|new
name|AcadAreaReservationComparator
argument_list|()
argument_list|)
expr_stmt|;
name|resv
operator|.
name|addAll
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pos
operator|&&
name|this
operator|.
name|getPosReservations
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
name|c
init|=
operator|new
name|Vector
argument_list|(
name|this
operator|.
name|getPosReservations
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|c
argument_list|,
operator|new
name|PosReservationComparator
argument_list|()
argument_list|)
expr_stmt|;
name|resv
operator|.
name|addAll
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|course
operator|&&
name|this
operator|.
name|getCourseReservations
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
name|c
init|=
operator|new
name|Vector
argument_list|(
name|this
operator|.
name|getCourseReservations
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|c
argument_list|,
operator|new
name|CourseReservationComparator
argument_list|()
argument_list|)
expr_stmt|;
name|resv
operator|.
name|addAll
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|resv
return|;
block|}
comment|/**      * Returns effective reservations for the class      * @param individual include individual reservations      * @param studentGroup include student group reservations      * @param acadArea include academic area reservations      * @param pos include pos reservations      * @param course include course reservations      * @return collection of reservations (collection is empty is none found)      */
specifier|public
name|Collection
name|effectiveReservations
parameter_list|(
name|boolean
name|individual
parameter_list|,
name|boolean
name|studentGroup
parameter_list|,
name|boolean
name|acadArea
parameter_list|,
name|boolean
name|pos
parameter_list|,
name|boolean
name|course
parameter_list|)
block|{
comment|//TODO hfernan - effective reservations - if applicable
return|return
name|getReservations
argument_list|(
name|individual
argument_list|,
name|studentGroup
argument_list|,
name|acadArea
argument_list|,
name|pos
argument_list|,
name|course
argument_list|)
return|;
block|}
comment|/**      * Delete all objects that have an identifying relationship with a class      * Usually use this method when one needs to delete a class      * (in which case set updateClass to false because the class will eventually be deleted)      * @param hibSession      * @param updateClass Updates class when all dependent objects are deleted      */
specifier|public
name|void
name|deleteAllDependentObjects
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|boolean
name|updateClass
parameter_list|)
block|{
comment|// Call individual methods to delete specific collections
name|deleteAllDistributionPreferences
argument_list|(
name|hibSession
argument_list|,
name|updateClass
argument_list|)
expr_stmt|;
name|deleteClassInstructors
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|deleteAssignments
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|deleteReservations
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|Exam
operator|.
name|deleteFromExams
argument_list|(
name|hibSession
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|Event
operator|.
name|deleteFromEvents
argument_list|(
name|hibSession
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// Add more collection deletes if needed
if|if
condition|(
name|updateClass
condition|)
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Delete all class instructors 	 * @param hibSession 	 */
specifier|public
name|void
name|deleteClassInstructors
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|Set
name|s
init|=
name|getClassInstructors
argument_list|()
decl_stmt|;
comment|//deleteObjectsFromCollection(hibSession, s);
if|if
condition|(
name|s
operator|==
literal|null
operator|||
name|s
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
for|for
control|(
name|Iterator
name|i
init|=
name|s
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
operator|(
name|i
operator|.
name|next
argument_list|()
operator|)
decl_stmt|;
name|DepartmentalInstructor
name|di
init|=
operator|new
name|DepartmentalInstructorDAO
argument_list|()
operator|.
name|get
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|di
operator|.
name|getClasses
argument_list|()
operator|.
name|remove
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setInstructor
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setClassInstructing
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|di
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** 	 * Delete all class assignments 	 * @param hibSession 	 */
specifier|public
name|void
name|deleteAssignments
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|Set
name|s
init|=
name|getAssignments
argument_list|()
decl_stmt|;
name|deleteObjectsFromCollection
argument_list|(
name|hibSession
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Delete all class reservations 	 * @param hibSession 	 */
specifier|public
name|void
name|deleteReservations
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|Collection
name|s
init|=
name|getReservations
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|deleteObjectsFromCollection
argument_list|(
name|hibSession
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Common method to delete objects from acollection 	 * @param hibSession 	 * @param s Collection from which objects have to be deleted 	 */
specifier|private
name|void
name|deleteObjectsFromCollection
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Collection
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
operator|||
name|s
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
for|for
control|(
name|Iterator
name|i
init|=
name|s
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|hibSession
operator|.
name|delete
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isOddOrEvenWeeksOnly
parameter_list|()
block|{
if|if
condition|(
name|effectiveDatePattern
argument_list|()
operator|!=
literal|null
operator|&&
name|effectiveDatePattern
argument_list|()
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|Integer
argument_list|(
name|DatePattern
operator|.
name|sTypeAlternate
argument_list|)
argument_list|)
condition|)
block|{
return|return
operator|(
literal|true
operator|)
return|;
block|}
return|return
operator|(
literal|false
operator|)
return|;
block|}
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|Class_
name|newClass
init|=
operator|new
name|Class_
argument_list|()
decl_stmt|;
name|newClass
operator|.
name|setDatePattern
argument_list|(
name|getDatePattern
argument_list|()
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setDisplayInScheduleBook
argument_list|(
name|isDisplayInScheduleBook
argument_list|()
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setDisplayInstructor
argument_list|(
name|isDisplayInstructor
argument_list|()
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setExpectedCapacity
argument_list|(
name|getExpectedCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setManagingDept
argument_list|(
name|getManagingDept
argument_list|()
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setMaxExpectedCapacity
argument_list|(
name|getMaxExpectedCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setNbrRooms
argument_list|(
name|getNbrRooms
argument_list|()
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setNotes
argument_list|(
name|getNotes
argument_list|()
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setRoomRatio
argument_list|(
name|getRoomRatio
argument_list|()
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setSchedulePrintNote
argument_list|(
name|getSchedulePrintNote
argument_list|()
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setSchedulingSubpart
argument_list|(
name|getSchedulingSubpart
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|newClass
operator|)
return|;
block|}
specifier|public
name|Object
name|cloneWithPreferences
parameter_list|()
block|{
name|Class_
name|newClass
init|=
operator|(
name|Class_
operator|)
name|this
operator|.
name|clone
argument_list|()
decl_stmt|;
if|if
condition|(
name|getPreferences
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Preference
name|origPref
init|=
literal|null
decl_stmt|;
name|Preference
name|newPref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|prefIt
init|=
name|getPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|prefIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|origPref
operator|=
operator|(
name|Preference
operator|)
name|prefIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|origPref
operator|instanceof
name|DistributionPref
operator|)
condition|)
block|{
name|newPref
operator|=
operator|(
name|Preference
operator|)
name|origPref
operator|.
name|clone
argument_list|()
expr_stmt|;
name|newPref
operator|.
name|setOwner
argument_list|(
name|newClass
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|addTopreferences
argument_list|(
name|newPref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|getClassInstructors
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getClassInstructors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ClassInstructor
name|ci
init|=
literal|null
decl_stmt|;
name|ClassInstructor
name|newCi
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|ciIt
init|=
name|getClassInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|ciIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ci
operator|=
operator|(
name|ClassInstructor
operator|)
name|ciIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|newCi
operator|=
operator|new
name|ClassInstructor
argument_list|()
expr_stmt|;
name|newCi
operator|.
name|setClassInstructing
argument_list|(
name|newClass
argument_list|)
expr_stmt|;
name|newCi
operator|.
name|setInstructor
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
argument_list|)
expr_stmt|;
name|newCi
operator|.
name|setLead
argument_list|(
name|ci
operator|.
name|isLead
argument_list|()
argument_list|)
expr_stmt|;
name|newCi
operator|.
name|setPercentShare
argument_list|(
name|ci
operator|.
name|getPercentShare
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|addToclasses
argument_list|(
name|newCi
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|addToclassInstructors
argument_list|(
name|newCi
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|newClass
operator|)
return|;
block|}
specifier|public
specifier|static
name|Class_
name|findByExternalId
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|String
name|externalId
parameter_list|)
block|{
return|return
operator|(
name|Class_
operator|)
operator|new
name|Class_DAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c from Class_ c where c.schedulingSubpart.instrOfferingConfig.instructionalOffering.session.uniqueId=:sessionId and c.externalUniqueId=:externalId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|externalId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Class_
name|findByIdRolledForwardFrom
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Long
name|uniqueIdRolledForwardFrom
parameter_list|)
block|{
return|return
operator|(
name|Class_
operator|)
operator|new
name|Class_DAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c from Class_ c where c.schedulingSubpart.instrOfferingConfig.instructionalOffering.session.uniqueId=:sessionId and c.uniqueIdRolledForwardFrom=:uniqueIdRolledForwardFrom"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"uniqueIdRolledForwardFrom"
argument_list|,
name|uniqueIdRolledForwardFrom
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|private
name|ClassEvent
name|iEvent
init|=
literal|null
decl_stmt|;
specifier|public
name|ClassEvent
name|getEvent
parameter_list|()
block|{
if|if
condition|(
name|iEvent
operator|==
literal|null
condition|)
name|iEvent
operator|=
operator|(
name|ClassEvent
operator|)
operator|new
name|Class_DAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e from ClassEvent e left join fetch e.meetings m where e.clazz.uniqueId=:classId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"classId"
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
expr_stmt|;
return|return
name|iEvent
return|;
block|}
specifier|public
name|void
name|setEvent
parameter_list|(
name|ClassEvent
name|event
parameter_list|)
block|{
name|iEvent
operator|=
name|event
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|updateClassEnrollmentForSession
parameter_list|(
name|Session
name|acadSession
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
throws|throws
name|Exception
block|{
name|Transaction
name|trans
init|=
literal|null
decl_stmt|;
try|try
block|{
name|trans
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"update Class_  c "
operator|+
literal|"set c.enrollment=(select count(distinct d.student) "
operator|+
literal|" from StudentClassEnrollment d "
operator|+
literal|" where d.clazz.uniqueId =c.uniqueId) "
operator|+
literal|" where c.uniqueId in (select cls.uniqueId "
operator|+
literal|" from Class_ cls inner join cls.schedulingSubpart.instrOfferingConfig.instructionalOffering as io "
operator|+
literal|" where io.session.uniqueId = :sessionId)"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|acadSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|trans
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|trans
operator|!=
literal|null
condition|)
block|{
name|trans
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
operator|(
name|e
operator|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

