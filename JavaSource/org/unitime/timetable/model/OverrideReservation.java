begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2010 - 2014, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ReservationInterface
operator|.
name|OverrideType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseOverrideReservation
import|;
end_import

begin_class
specifier|public
class|class
name|OverrideReservation
extends|extends
name|BaseOverrideReservation
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|OverrideReservation
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|OverrideType
name|getOverrideType
parameter_list|()
block|{
return|return
name|getType
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|OverrideType
operator|.
name|values
argument_list|()
index|[
name|getType
argument_list|()
index|]
return|;
block|}
specifier|public
name|void
name|setOverrideType
parameter_list|(
name|OverrideType
name|type
parameter_list|)
block|{
name|setType
argument_list|(
name|type
operator|==
literal|null
condition|?
literal|null
else|:
name|type
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isExpired
parameter_list|()
block|{
name|OverrideType
name|type
init|=
name|getOverrideType
argument_list|()
decl_stmt|;
return|return
operator|(
name|type
operator|==
literal|null
operator|||
name|type
operator|.
name|isCanHaveExpirationDate
argument_list|()
condition|?
name|super
operator|.
name|isExpired
argument_list|()
else|:
name|type
operator|.
name|isExpired
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Date
name|getExpirationDate
parameter_list|()
block|{
name|OverrideType
name|type
init|=
name|getOverrideType
argument_list|()
decl_stmt|;
return|return
operator|(
name|type
operator|==
literal|null
operator|||
name|type
operator|.
name|isCanHaveExpirationDate
argument_list|()
condition|?
name|super
operator|.
name|getExpirationDate
argument_list|()
else|:
literal|null
operator|)
return|;
block|}
block|}
end_class

end_unit

