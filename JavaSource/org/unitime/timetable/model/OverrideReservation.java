begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ReservationInterface
operator|.
name|OverrideType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseOverrideReservation
import|;
end_import

begin_class
specifier|public
class|class
name|OverrideReservation
extends|extends
name|BaseOverrideReservation
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|OverrideReservation
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|OverrideType
name|getOverrideType
parameter_list|()
block|{
return|return
name|getType
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|OverrideType
operator|.
name|values
argument_list|()
index|[
name|getType
argument_list|()
index|]
return|;
block|}
specifier|public
name|void
name|setOverrideType
parameter_list|(
name|OverrideType
name|type
parameter_list|)
block|{
name|setType
argument_list|(
name|type
operator|==
literal|null
condition|?
literal|null
else|:
name|type
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isExpired
parameter_list|()
block|{
name|OverrideType
name|type
init|=
name|getOverrideType
argument_list|()
decl_stmt|;
return|return
operator|(
name|type
operator|==
literal|null
operator|||
name|type
operator|.
name|isCanHaveExpirationDate
argument_list|()
condition|?
name|super
operator|.
name|isExpired
argument_list|()
else|:
name|type
operator|.
name|isExpired
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Date
name|getExpirationDate
parameter_list|()
block|{
name|OverrideType
name|type
init|=
name|getOverrideType
argument_list|()
decl_stmt|;
return|return
operator|(
name|type
operator|==
literal|null
operator|||
name|type
operator|.
name|isCanHaveExpirationDate
argument_list|()
condition|?
name|super
operator|.
name|getExpirationDate
argument_list|()
else|:
literal|null
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
name|ApplicationProperty
operator|.
name|ReservationPriorityOverride
operator|.
name|intValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCanAssignOverLimit
parameter_list|()
block|{
name|OverrideType
name|type
init|=
name|getOverrideType
argument_list|()
decl_stmt|;
return|return
name|type
operator|!=
literal|null
operator|&&
name|type
operator|.
name|isAllowOverLimit
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMustBeUsed
parameter_list|()
block|{
name|OverrideType
name|type
init|=
name|getOverrideType
argument_list|()
decl_stmt|;
return|return
name|type
operator|!=
literal|null
operator|&&
name|type
operator|.
name|isMustBeUsed
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAllowOverlap
parameter_list|()
block|{
name|OverrideType
name|type
init|=
name|getOverrideType
argument_list|()
decl_stmt|;
return|return
name|type
operator|!=
literal|null
operator|&&
name|type
operator|.
name|isAllowTimeConflict
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAlwaysExpired
parameter_list|()
block|{
name|OverrideType
name|type
init|=
name|getOverrideType
argument_list|()
decl_stmt|;
return|return
name|type
operator|!=
literal|null
operator|&&
operator|!
name|type
operator|.
name|isCanHaveExpirationDate
argument_list|()
return|;
block|}
block|}
end_class

end_unit

