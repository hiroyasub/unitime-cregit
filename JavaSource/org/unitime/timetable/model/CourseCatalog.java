begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseCourseCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SubjectAreaDAO
import|;
end_import

begin_comment
comment|/**  * @author Stephanie Schluttenhofer, Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CourseCatalog
extends|extends
name|BaseCourseCatalog
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|CourseCatalog
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|CourseCatalog
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
specifier|public
specifier|static
name|CourseCatalog
name|findCourseFromPreviousSessionInCatalogForSession
parameter_list|(
name|CourseOffering
name|courseOffering
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
if|if
condition|(
name|courseOffering
operator|==
literal|null
operator|||
name|session
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
name|String
name|query
init|=
literal|"select distinct cc from CourseCatalog cc"
decl_stmt|;
name|query
operator|+=
literal|" where cc.session.uniqueId=:sessionId"
expr_stmt|;
name|query
operator|+=
literal|"  and ((cc.subject=:subjectAbbv"
expr_stmt|;
name|query
operator|+=
literal|"    and cc.courseNumber=:courseNbr"
expr_stmt|;
name|query
operator|+=
literal|"    and (cc.previousSubject is null or cc.previousSubject = cc.subject)"
expr_stmt|;
name|query
operator|+=
literal|"    and (cc.previousCourseNumber is null or cc.previousCourseNumber = cc.courseNumber))"
expr_stmt|;
name|query
operator|+=
literal|"   or (cc.previousSubject=:subjectAbbv"
expr_stmt|;
name|query
operator|+=
literal|"    and cc.previousCourseNumber=:courseNbr))"
expr_stmt|;
if|if
condition|(
name|courseOffering
operator|.
name|getPermId
argument_list|()
operator|!=
literal|null
operator|&&
name|Integer
operator|.
name|parseInt
argument_list|(
name|courseOffering
operator|.
name|getPermId
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
block|{
name|query
operator|+=
literal|"  and cc.permanentId = '"
operator|+
name|courseOffering
operator|.
name|getPermId
argument_list|()
operator|+
literal|"'"
expr_stmt|;
block|}
name|List
name|l
init|=
name|SubjectAreaDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getQuery
argument_list|(
name|query
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"subjectAbbv"
argument_list|,
name|courseOffering
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"courseNbr"
argument_list|,
name|courseOffering
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
name|l
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
operator|(
operator|(
name|CourseCatalog
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
return|;
block|}
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
name|l
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|CourseCatalog
name|cc
init|=
literal|null
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|ccIt
init|=
name|l
operator|.
name|iterator
argument_list|()
init|;
operator|(
name|ccIt
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|found
operator|)
condition|;
control|)
block|{
name|cc
operator|=
operator|(
name|CourseCatalog
operator|)
name|ccIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|cc
operator|.
name|getPreviousSubject
argument_list|()
operator|.
name|equals
argument_list|(
name|courseOffering
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
operator|&&
name|cc
operator|.
name|getPreviousCourseNumber
argument_list|()
operator|.
name|equals
argument_list|(
name|courseOffering
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|cc
operator|.
name|getPermanentId
argument_list|()
operator|!=
literal|null
operator|&&
name|courseOffering
operator|.
name|getPermId
argument_list|()
operator|!=
literal|null
operator|&&
name|cc
operator|.
name|getPermanentId
argument_list|()
operator|.
name|equals
argument_list|(
name|courseOffering
operator|.
name|getPermId
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|found
condition|)
block|{
return|return
operator|(
name|cc
operator|)
return|;
block|}
block|}
return|return
operator|(
literal|null
operator|)
return|;
block|}
specifier|public
specifier|static
name|CourseCatalog
name|findCourseInCatalogForSession
parameter_list|(
name|CourseOffering
name|courseOffering
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
if|if
condition|(
name|courseOffering
operator|==
literal|null
operator|||
name|session
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
name|String
name|query
init|=
literal|"select distinct cc.* from CourseCatalog cc"
decl_stmt|;
name|query
operator|+=
literal|" where cc.session.uniqueId=:sessionId"
expr_stmt|;
name|query
operator|+=
literal|"  and cc.subject=:subjectAbbv"
expr_stmt|;
name|query
operator|+=
literal|"  and cc.courseNumber=:courseNbr"
expr_stmt|;
name|List
name|l
init|=
name|SubjectAreaDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getQuery
argument_list|(
name|query
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"subjectAbbv"
argument_list|,
name|courseOffering
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"courseNbr"
argument_list|,
name|courseOffering
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
name|l
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
operator|(
operator|(
name|CourseCatalog
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
return|;
block|}
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
name|l
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|CourseCatalog
name|cc
init|=
literal|null
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|ccIt
init|=
name|l
operator|.
name|iterator
argument_list|()
init|;
operator|(
name|ccIt
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|found
operator|)
condition|;
control|)
block|{
name|cc
operator|=
operator|(
name|CourseCatalog
operator|)
name|ccIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|cc
operator|.
name|getSubject
argument_list|()
operator|.
name|equals
argument_list|(
name|courseOffering
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
operator|&&
name|cc
operator|.
name|getCourseNumber
argument_list|()
operator|.
name|equals
argument_list|(
name|courseOffering
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|found
condition|)
block|{
return|return
operator|(
name|cc
operator|)
return|;
block|}
block|}
return|return
operator|(
literal|null
operator|)
return|;
block|}
block|}
end_class

end_unit

