begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|HibernateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|criterion
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|criterion
operator|.
name|Restrictions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseReservationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ReservationTypeDAO
import|;
end_import

begin_class
specifier|public
class|class
name|ReservationType
extends|extends
name|BaseReservationType
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|ReservationType
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|ReservationType
parameter_list|(
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
comment|/* 	 * @return all Reservation Types 	 */
specifier|public
specifier|static
name|ArrayList
name|getAll
parameter_list|()
throws|throws
name|HibernateException
block|{
return|return
operator|(
name|ArrayList
operator|)
operator|(
operator|new
name|ReservationTypeDAO
argument_list|()
operator|)
operator|.
name|findAll
argument_list|()
return|;
block|}
comment|/** Request attribute name for available reservation types **/
specifier|public
specifier|static
name|String
name|RESVTYPE_ATTR_NAME
init|=
literal|"reservationTypeList"
decl_stmt|;
comment|/** Reservation Type List **/
specifier|private
specifier|static
name|Vector
name|resvTypeList
init|=
literal|null
decl_stmt|;
comment|/** 	 * Retrieves all reservation types in the database 	 * ordered by column label 	 * @param refresh true - refreshes the list from database 	 * @return Vector of ReservationType objects 	 */
specifier|public
specifier|static
specifier|synchronized
name|Vector
name|getReservationTypeList
parameter_list|(
name|boolean
name|refresh
parameter_list|)
block|{
if|if
condition|(
name|resvTypeList
operator|!=
literal|null
operator|&&
operator|!
name|refresh
condition|)
return|return
name|resvTypeList
return|;
name|ReservationTypeDAO
name|rdao
init|=
operator|new
name|ReservationTypeDAO
argument_list|()
decl_stmt|;
name|List
name|l
init|=
name|rdao
operator|.
name|findAll
argument_list|(
name|Order
operator|.
name|asc
argument_list|(
literal|"label"
argument_list|)
argument_list|)
decl_stmt|;
name|resvTypeList
operator|=
operator|new
name|Vector
argument_list|(
name|l
argument_list|)
expr_stmt|;
return|return
name|resvTypeList
return|;
block|}
comment|/**      * Gets the reservation type object matching the particular reference value      * @param ref Reference value      * @return ReservationType object if found, null if not found      */
specifier|public
specifier|static
name|ReservationType
name|getReservationTypebyRef
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
name|ReservationTypeDAO
name|rdao
init|=
operator|new
name|ReservationTypeDAO
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|rdao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|List
name|l
init|=
name|hibSession
operator|.
name|createCriteria
argument_list|(
name|ReservationType
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
name|Restrictions
operator|.
name|eq
argument_list|(
literal|"reference"
argument_list|,
name|ref
argument_list|)
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|==
literal|null
operator|||
name|l
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
return|return
operator|(
name|ReservationType
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
end_class

end_unit

