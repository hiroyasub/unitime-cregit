begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseTeachingRequest
import|;
end_import

begin_class
specifier|public
class|class
name|TeachingRequest
extends|extends
name|BaseTeachingRequest
implements|implements
name|Comparable
argument_list|<
name|TeachingRequest
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|TeachingRequest
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|htmlLabel
parameter_list|()
block|{
name|Set
argument_list|<
name|TeachingClassRequest
argument_list|>
name|requests
init|=
operator|new
name|TreeSet
argument_list|<
name|TeachingClassRequest
argument_list|>
argument_list|(
name|getClassRequests
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|classes
init|=
literal|null
decl_stmt|;
for|for
control|(
name|TeachingClassRequest
name|r
range|:
name|requests
control|)
block|{
if|if
condition|(
name|classes
operator|==
literal|null
condition|)
name|classes
operator|=
name|r
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|htmlLabel
argument_list|()
expr_stmt|;
else|else
name|classes
operator|+=
literal|", "
operator|+
name|r
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|htmlLabel
argument_list|()
expr_stmt|;
block|}
return|return
name|getOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
operator|(
name|classes
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|classes
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Session
name|getSession
parameter_list|()
block|{
return|return
name|getOffering
argument_list|()
operator|.
name|getSession
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Department
name|getDepartment
parameter_list|()
block|{
return|return
name|getOffering
argument_list|()
operator|.
name|getDepartment
argument_list|()
return|;
block|}
specifier|public
name|Map
argument_list|<
name|SchedulingSubpart
argument_list|,
name|List
argument_list|<
name|TeachingClassRequest
argument_list|>
argument_list|>
name|getSubparMap
parameter_list|()
block|{
name|Map
argument_list|<
name|SchedulingSubpart
argument_list|,
name|List
argument_list|<
name|TeachingClassRequest
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|SchedulingSubpart
argument_list|,
name|List
argument_list|<
name|TeachingClassRequest
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TeachingClassRequest
name|r
range|:
name|getClassRequests
argument_list|()
control|)
block|{
name|List
argument_list|<
name|TeachingClassRequest
argument_list|>
name|requests
init|=
name|map
operator|.
name|get
argument_list|(
name|r
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|requests
operator|==
literal|null
condition|)
block|{
name|requests
operator|=
operator|new
name|ArrayList
argument_list|<
name|TeachingClassRequest
argument_list|>
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|r
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|,
name|requests
argument_list|)
expr_stmt|;
block|}
name|requests
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
specifier|public
name|TeachingClassRequest
name|getMasterRequest
parameter_list|(
name|boolean
name|checkClassRequests
parameter_list|)
block|{
name|Map
argument_list|<
name|SchedulingSubpart
argument_list|,
name|List
argument_list|<
name|TeachingClassRequest
argument_list|>
argument_list|>
name|map
init|=
name|getSubparMap
argument_list|()
decl_stmt|;
name|TeachingClassRequest
name|master
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|SchedulingSubpart
argument_list|,
name|List
argument_list|<
name|TeachingClassRequest
argument_list|>
argument_list|>
name|e
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
if|if
condition|(
name|checkClassRequests
condition|)
block|{
name|TeachingClassRequest
name|r1
init|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|TeachingClassRequest
name|r2
init|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|r1
operator|.
name|isAssignInstructor
argument_list|()
argument_list|,
name|r2
operator|.
name|isAssignInstructor
argument_list|()
argument_list|)
condition|)
return|return
literal|null
return|;
if|if
condition|(
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|r1
operator|.
name|isCommon
argument_list|()
argument_list|,
name|r2
operator|.
name|isCommon
argument_list|()
argument_list|)
condition|)
return|return
literal|null
return|;
if|if
condition|(
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|r1
operator|.
name|getPercentShare
argument_list|()
argument_list|,
name|r2
operator|.
name|getPercentShare
argument_list|()
argument_list|)
condition|)
return|return
literal|null
return|;
if|if
condition|(
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|r1
operator|.
name|isLead
argument_list|()
argument_list|,
name|r2
operator|.
name|isLead
argument_list|()
argument_list|)
condition|)
return|return
literal|null
return|;
if|if
condition|(
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|r1
operator|.
name|isCanOverlap
argument_list|()
argument_list|,
name|r2
operator|.
name|isCanOverlap
argument_list|()
argument_list|)
condition|)
return|return
literal|null
return|;
block|}
block|}
continue|continue;
block|}
name|TeachingClassRequest
name|adept
init|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|master
operator|==
literal|null
condition|)
block|{
name|master
operator|=
name|adept
expr_stmt|;
block|}
if|else if
condition|(
name|master
operator|.
name|isParentOf
argument_list|(
name|adept
argument_list|)
condition|)
block|{
name|master
operator|=
name|adept
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|adept
operator|.
name|isParentOf
argument_list|(
name|master
argument_list|)
operator|&&
name|adept
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
operator|>
name|master
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|master
operator|=
name|adept
expr_stmt|;
block|}
block|}
return|return
name|master
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|Class_
argument_list|>
name|getClasses
parameter_list|(
name|Class_
name|master
parameter_list|,
name|Set
argument_list|<
name|SchedulingSubpart
argument_list|>
name|subparts
parameter_list|)
block|{
name|List
argument_list|<
name|Class_
argument_list|>
name|classes
init|=
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|subparts
control|)
block|{
if|if
condition|(
name|subpart
operator|.
name|equals
argument_list|(
name|master
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
condition|)
block|{
name|classes
operator|.
name|add
argument_list|(
name|master
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|subpart
operator|.
name|isParentOf
argument_list|(
name|master
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Class_
name|c
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
if|if
condition|(
name|c
operator|.
name|isParentOf
argument_list|(
name|master
argument_list|)
condition|)
name|classes
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|master
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|isParentOf
argument_list|(
name|subpart
argument_list|)
condition|)
block|{
for|for
control|(
name|Class_
name|c
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
if|if
condition|(
name|master
operator|.
name|isParentOf
argument_list|(
name|c
argument_list|)
condition|)
name|classes
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Class_
name|parent
init|=
name|master
operator|.
name|getParentClass
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
operator|&&
operator|!
name|parent
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|isParentOf
argument_list|(
name|subpart
argument_list|)
condition|)
name|parent
operator|=
name|parent
operator|.
name|getParentClass
argument_list|()
expr_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Class_
name|c
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
if|if
condition|(
name|parent
operator|.
name|isParentOf
argument_list|(
name|c
argument_list|)
condition|)
name|classes
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|classes
operator|.
name|addAll
argument_list|(
name|subpart
operator|.
name|getClasses
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|classes
return|;
block|}
specifier|public
name|boolean
name|isStandard
parameter_list|(
name|TeachingClassRequest
name|master
parameter_list|)
block|{
if|if
condition|(
name|master
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|Set
argument_list|<
name|SchedulingSubpart
argument_list|>
name|subparts
init|=
operator|new
name|HashSet
argument_list|<
name|SchedulingSubpart
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Class_
argument_list|>
name|classes
init|=
operator|new
name|HashSet
argument_list|<
name|Class_
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TeachingClassRequest
name|r
range|:
name|getClassRequests
argument_list|()
control|)
block|{
name|classes
operator|.
name|add
argument_list|(
name|r
operator|.
name|getTeachingClass
argument_list|()
argument_list|)
expr_stmt|;
name|subparts
operator|.
name|add
argument_list|(
name|r
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Class_
argument_list|>
name|std
init|=
name|getClasses
argument_list|(
name|master
operator|.
name|getTeachingClass
argument_list|()
argument_list|,
name|subparts
argument_list|)
decl_stmt|;
if|if
condition|(
name|std
operator|.
name|size
argument_list|()
operator|!=
name|classes
operator|.
name|size
argument_list|()
condition|)
return|return
literal|false
return|;
for|for
control|(
name|Class_
name|c
range|:
name|std
control|)
if|if
condition|(
operator|!
name|classes
operator|.
name|contains
argument_list|(
name|c
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|canCombine
parameter_list|(
name|TeachingRequest
name|other
parameter_list|)
block|{
name|TeachingClassRequest
name|m1
init|=
name|getMasterRequest
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|m1
operator|==
literal|null
operator|||
operator|!
name|isStandard
argument_list|(
name|m1
argument_list|)
condition|)
return|return
literal|false
return|;
name|TeachingClassRequest
name|m2
init|=
name|other
operator|.
name|getMasterRequest
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|m2
operator|==
literal|null
operator|||
name|m1
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|equals
argument_list|(
name|m2
operator|.
name|getTeachingClass
argument_list|()
argument_list|)
operator|||
operator|!
name|other
operator|.
name|isStandard
argument_list|(
name|m2
argument_list|)
operator|||
operator|!
name|m1
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|equals
argument_list|(
name|m2
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// different properties
if|if
condition|(
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|getTeachingLoad
argument_list|()
argument_list|,
name|other
operator|.
name|getTeachingLoad
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|getResponsibility
argument_list|()
argument_list|,
name|other
operator|.
name|getResponsibility
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|getSameCoursePreference
argument_list|()
argument_list|,
name|other
operator|.
name|getSameCoursePreference
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|getSameCommonPart
argument_list|()
argument_list|,
name|other
operator|.
name|getSameCommonPart
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|isAssignCoordinator
argument_list|()
argument_list|,
name|other
operator|.
name|isAssignCoordinator
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// different preferences
name|Set
argument_list|<
name|Preference
argument_list|>
name|p1
init|=
name|getPreferences
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Preference
argument_list|>
name|p2
init|=
name|other
operator|.
name|getPreferences
argument_list|()
decl_stmt|;
if|if
condition|(
name|p1
operator|.
name|size
argument_list|()
operator|!=
name|p2
operator|.
name|size
argument_list|()
condition|)
return|return
literal|false
return|;
name|p1
label|:
for|for
control|(
name|Preference
name|p
range|:
name|p1
control|)
block|{
for|for
control|(
name|Preference
name|q
range|:
name|p2
control|)
block|{
if|if
condition|(
name|p
operator|.
name|isSame
argument_list|(
name|q
argument_list|)
operator|&&
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|equals
argument_list|(
name|q
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
condition|)
continue|continue
name|p1
continue|;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|TeachingRequest
name|r
parameter_list|)
block|{
name|int
name|cmp
init|=
name|getOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|getOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|Iterator
argument_list|<
name|TeachingClassRequest
argument_list|>
name|i1
init|=
operator|new
name|TreeSet
argument_list|<
name|TeachingClassRequest
argument_list|>
argument_list|(
name|getClassRequests
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|TeachingClassRequest
argument_list|>
name|i2
init|=
operator|new
name|TreeSet
argument_list|<
name|TeachingClassRequest
argument_list|>
argument_list|(
name|r
operator|.
name|getClassRequests
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i1
operator|.
name|hasNext
argument_list|()
operator|&&
name|i2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|cmp
operator|=
name|i1
operator|.
name|next
argument_list|()
operator|.
name|compareTo
argument_list|(
name|i2
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
if|if
condition|(
name|i2
operator|.
name|hasNext
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|i1
operator|.
name|hasNext
argument_list|()
condition|)
return|return
literal|1
return|;
return|return
operator|(
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
else|:
name|getUniqueId
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|r
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

