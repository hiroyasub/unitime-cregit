begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|FlushMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseExactTimeMins
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExactTimeMinsDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller, Stephanie Schluttenhofer  */
end_comment

begin_class
specifier|public
class|class
name|ExactTimeMins
extends|extends
name|BaseExactTimeMins
implements|implements
name|Comparable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|ExactTimeMins
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|ExactTimeMins
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
specifier|public
specifier|static
name|ExactTimeMins
name|findByMinPerMtg
parameter_list|(
name|int
name|minPerMtg
parameter_list|)
block|{
return|return
operator|(
name|ExactTimeMins
operator|)
operator|(
operator|new
name|ExactTimeMinsDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select m from ExactTimeMins m where m.minsPerMtgMin<=:minPerMtg and :minPerMtg<=m.minsPerMtgMax"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"minPerMtg"
argument_list|,
name|minPerMtg
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setFlushMode
argument_list|(
name|FlushMode
operator|.
name|MANUAL
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|int
name|getNrSlotsPerMtg
parameter_list|(
name|int
name|minPerMtg
parameter_list|)
block|{
name|ExactTimeMins
name|ex
init|=
name|findByMinPerMtg
argument_list|(
name|minPerMtg
argument_list|)
decl_stmt|;
if|if
condition|(
name|ex
operator|==
literal|null
condition|)
block|{
name|int
name|slotsPerMtg
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
operator|(
literal|6.0
operator|/
literal|5.0
operator|)
operator|*
name|minPerMtg
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
argument_list|)
decl_stmt|;
if|if
condition|(
name|minPerMtg
operator|<
literal|30.0
condition|)
name|slotsPerMtg
operator|=
name|Math
operator|.
name|min
argument_list|(
literal|6
argument_list|,
name|slotsPerMtg
argument_list|)
expr_stmt|;
return|return
name|slotsPerMtg
return|;
block|}
else|else
block|{
return|return
name|ex
operator|.
name|getNrSlots
argument_list|()
operator|.
name|intValue
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
name|int
name|getBreakTime
parameter_list|(
name|int
name|minPerMtg
parameter_list|)
block|{
name|ExactTimeMins
name|ex
init|=
name|findByMinPerMtg
argument_list|(
name|minPerMtg
argument_list|)
decl_stmt|;
if|if
condition|(
name|ex
operator|==
literal|null
condition|)
block|{
name|int
name|slotsPerMtg
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
operator|(
literal|6.0
operator|/
literal|5.0
operator|)
operator|*
name|minPerMtg
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
argument_list|)
decl_stmt|;
if|if
condition|(
name|minPerMtg
operator|<
literal|30.0
condition|)
name|slotsPerMtg
operator|=
name|Math
operator|.
name|min
argument_list|(
literal|6
argument_list|,
name|slotsPerMtg
argument_list|)
expr_stmt|;
name|int
name|breakTime
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|slotsPerMtg
operator|%
literal|12
operator|==
literal|0
condition|)
name|breakTime
operator|=
literal|10
expr_stmt|;
if|else if
condition|(
name|slotsPerMtg
operator|>
literal|6
condition|)
name|breakTime
operator|=
literal|15
expr_stmt|;
return|return
name|breakTime
return|;
block|}
else|else
block|{
return|return
name|ex
operator|.
name|getBreakTime
argument_list|()
operator|.
name|intValue
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
name|int
name|getNrSlotsPerMtg
parameter_list|(
name|int
name|dayCode
parameter_list|,
name|int
name|minPerWeek
parameter_list|)
block|{
name|int
name|nrDays
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|NR_DAYS
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|i
index|]
operator|)
operator|!=
literal|0
condition|)
name|nrDays
operator|++
expr_stmt|;
if|if
condition|(
name|nrDays
operator|==
literal|0
condition|)
name|nrDays
operator|=
literal|1
expr_stmt|;
name|int
name|minPerMtg
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
operator|(
operator|(
name|double
operator|)
name|minPerWeek
operator|)
operator|/
name|nrDays
argument_list|)
decl_stmt|;
return|return
name|getNrSlotsPerMtg
argument_list|(
name|minPerMtg
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|getBreakTime
parameter_list|(
name|int
name|dayCode
parameter_list|,
name|int
name|minPerWeek
parameter_list|)
block|{
name|int
name|nrDays
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|NR_DAYS
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|i
index|]
operator|)
operator|!=
literal|0
condition|)
name|nrDays
operator|++
expr_stmt|;
if|if
condition|(
name|nrDays
operator|==
literal|0
condition|)
name|nrDays
operator|=
literal|1
expr_stmt|;
name|int
name|minPerMtg
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
operator|(
operator|(
name|double
operator|)
name|minPerWeek
operator|)
operator|/
name|nrDays
argument_list|)
decl_stmt|;
return|return
name|getBreakTime
argument_list|(
name|minPerMtg
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|ExactTimeMins
operator|)
condition|)
return|return
operator|-
literal|1
return|;
name|ExactTimeMins
name|ex
init|=
operator|(
name|ExactTimeMins
operator|)
name|o
decl_stmt|;
name|int
name|cmp
init|=
name|getMinsPerMtgMin
argument_list|()
operator|.
name|compareTo
argument_list|(
name|ex
operator|.
name|getMinsPerMtgMin
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|getMinsPerMtgMax
argument_list|()
operator|.
name|compareTo
argument_list|(
name|ex
operator|.
name|getMinsPerMtgMax
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
else|:
name|getUniqueId
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|ex
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|ex
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

