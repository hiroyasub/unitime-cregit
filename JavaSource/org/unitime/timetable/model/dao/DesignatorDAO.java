begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseDesignatorDAO
import|;
end_import

begin_class
specifier|public
class|class
name|DesignatorDAO
extends|extends
name|BaseDesignatorDAO
block|{
comment|/** 	 * Default constructor.  Can be used in place of getInstance() 	 */
specifier|public
name|DesignatorDAO
parameter_list|()
block|{
block|}
comment|/** 	 * Checks that the same designator code is not assigned to another 	 * instructor in the subject area 	 * @param subjectAreaId 	 * @param code 	 * @param uniqueId If this parameter is not null, it excludes records with this uniqueid 	 * @return true if duplicate exists, false otherwise 	 */
specifier|public
specifier|static
name|boolean
name|find
parameter_list|(
name|Long
name|subjectAreaId
parameter_list|,
name|String
name|code
parameter_list|,
name|Long
name|uniqueId
parameter_list|)
block|{
name|SubjectAreaDAO
name|sdao
init|=
operator|new
name|SubjectAreaDAO
argument_list|()
decl_stmt|;
name|SubjectArea
name|sa
init|=
name|sdao
operator|.
name|get
argument_list|(
name|subjectAreaId
argument_list|)
decl_stmt|;
name|Long
name|acadSessionId
init|=
name|sa
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
name|String
name|sql
init|=
literal|" from Designator d "
operator|+
literal|"where d.subjectArea.session.uniqueId=:acadSessionId "
operator|+
literal|"	and d.code=:code "
operator|+
literal|"	and d.subjectArea.uniqueId=:subjectAreaId"
decl_stmt|;
if|if
condition|(
name|uniqueId
operator|!=
literal|null
condition|)
block|{
name|sql
operator|+=
literal|" and d.uniqueId!=:uniqueId"
expr_stmt|;
block|}
name|Session
name|hibSession
init|=
name|sdao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Query
name|query
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|query
operator|.
name|setLong
argument_list|(
literal|"acadSessionId"
argument_list|,
name|acadSessionId
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|setString
argument_list|(
literal|"code"
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|query
operator|.
name|setLong
argument_list|(
literal|"subjectAreaId"
argument_list|,
name|subjectAreaId
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|uniqueId
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|setLong
argument_list|(
literal|"uniqueId"
argument_list|,
name|uniqueId
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
name|l
init|=
name|query
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
name|l
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

