begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TeachingClassRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TeachingRequest
import|;
end_import

begin_comment
comment|/**  * Do not change this class. It has been automatically generated using ant create-model.  * @see org.unitime.commons.ant.CreateBaseModelFromXml  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|BaseTeachingClassRequest
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Long
name|iUniqueId
decl_stmt|;
specifier|private
name|Integer
name|iPercentShare
decl_stmt|;
specifier|private
name|Boolean
name|iLead
decl_stmt|;
specifier|private
name|Boolean
name|iCanOverlap
decl_stmt|;
specifier|private
name|Boolean
name|iAssignInstructor
decl_stmt|;
specifier|private
name|Boolean
name|iCommon
decl_stmt|;
specifier|private
name|TeachingRequest
name|iTeachingRequest
decl_stmt|;
specifier|private
name|Class_
name|iTeachingClass
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_UNIQUEID
init|=
literal|"uniqueId"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_PERCENT_SHARE
init|=
literal|"percentShare"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_IS_LEAD
init|=
literal|"lead"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_CAN_OVERLAP
init|=
literal|"canOverlap"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_ASSIGN_INSTRUCTOR
init|=
literal|"assignInstructor"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_COMMON
init|=
literal|"common"
decl_stmt|;
specifier|public
name|BaseTeachingClassRequest
parameter_list|()
block|{
name|initialize
argument_list|()
expr_stmt|;
block|}
specifier|public
name|BaseTeachingClassRequest
parameter_list|(
name|Long
name|uniqueId
parameter_list|)
block|{
name|setUniqueId
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
name|initialize
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|initialize
parameter_list|()
block|{
block|}
specifier|public
name|Long
name|getUniqueId
parameter_list|()
block|{
return|return
name|iUniqueId
return|;
block|}
specifier|public
name|void
name|setUniqueId
parameter_list|(
name|Long
name|uniqueId
parameter_list|)
block|{
name|iUniqueId
operator|=
name|uniqueId
expr_stmt|;
block|}
specifier|public
name|Integer
name|getPercentShare
parameter_list|()
block|{
return|return
name|iPercentShare
return|;
block|}
specifier|public
name|void
name|setPercentShare
parameter_list|(
name|Integer
name|percentShare
parameter_list|)
block|{
name|iPercentShare
operator|=
name|percentShare
expr_stmt|;
block|}
specifier|public
name|Boolean
name|isLead
parameter_list|()
block|{
return|return
name|iLead
return|;
block|}
specifier|public
name|Boolean
name|getLead
parameter_list|()
block|{
return|return
name|iLead
return|;
block|}
specifier|public
name|void
name|setLead
parameter_list|(
name|Boolean
name|lead
parameter_list|)
block|{
name|iLead
operator|=
name|lead
expr_stmt|;
block|}
specifier|public
name|Boolean
name|isCanOverlap
parameter_list|()
block|{
return|return
name|iCanOverlap
return|;
block|}
specifier|public
name|Boolean
name|getCanOverlap
parameter_list|()
block|{
return|return
name|iCanOverlap
return|;
block|}
specifier|public
name|void
name|setCanOverlap
parameter_list|(
name|Boolean
name|canOverlap
parameter_list|)
block|{
name|iCanOverlap
operator|=
name|canOverlap
expr_stmt|;
block|}
specifier|public
name|Boolean
name|isAssignInstructor
parameter_list|()
block|{
return|return
name|iAssignInstructor
return|;
block|}
specifier|public
name|Boolean
name|getAssignInstructor
parameter_list|()
block|{
return|return
name|iAssignInstructor
return|;
block|}
specifier|public
name|void
name|setAssignInstructor
parameter_list|(
name|Boolean
name|assignInstructor
parameter_list|)
block|{
name|iAssignInstructor
operator|=
name|assignInstructor
expr_stmt|;
block|}
specifier|public
name|Boolean
name|isCommon
parameter_list|()
block|{
return|return
name|iCommon
return|;
block|}
specifier|public
name|Boolean
name|getCommon
parameter_list|()
block|{
return|return
name|iCommon
return|;
block|}
specifier|public
name|void
name|setCommon
parameter_list|(
name|Boolean
name|common
parameter_list|)
block|{
name|iCommon
operator|=
name|common
expr_stmt|;
block|}
specifier|public
name|TeachingRequest
name|getTeachingRequest
parameter_list|()
block|{
return|return
name|iTeachingRequest
return|;
block|}
specifier|public
name|void
name|setTeachingRequest
parameter_list|(
name|TeachingRequest
name|teachingRequest
parameter_list|)
block|{
name|iTeachingRequest
operator|=
name|teachingRequest
expr_stmt|;
block|}
specifier|public
name|Class_
name|getTeachingClass
parameter_list|()
block|{
return|return
name|iTeachingClass
return|;
block|}
specifier|public
name|void
name|setTeachingClass
parameter_list|(
name|Class_
name|teachingClass
parameter_list|)
block|{
name|iTeachingClass
operator|=
name|teachingClass
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|TeachingClassRequest
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getUniqueId
argument_list|()
operator|==
literal|null
operator|||
operator|(
operator|(
name|TeachingClassRequest
operator|)
name|o
operator|)
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|TeachingClassRequest
operator|)
name|o
operator|)
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
return|return
name|getUniqueId
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"TeachingClassRequest["
operator|+
name|getUniqueId
argument_list|()
operator|+
literal|"]"
return|;
block|}
specifier|public
name|String
name|toDebugString
parameter_list|()
block|{
return|return
literal|"TeachingClassRequest["
operator|+
literal|"\n	AssignInstructor: "
operator|+
name|getAssignInstructor
argument_list|()
operator|+
literal|"\n	CanOverlap: "
operator|+
name|getCanOverlap
argument_list|()
operator|+
literal|"\n	Common: "
operator|+
name|getCommon
argument_list|()
operator|+
literal|"\n	Lead: "
operator|+
name|getLead
argument_list|()
operator|+
literal|"\n	PercentShare: "
operator|+
name|getPercentShare
argument_list|()
operator|+
literal|"\n	TeachingClass: "
operator|+
name|getTeachingClass
argument_list|()
operator|+
literal|"\n	TeachingRequest: "
operator|+
name|getTeachingRequest
argument_list|()
operator|+
literal|"\n	UniqueId: "
operator|+
name|getUniqueId
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

