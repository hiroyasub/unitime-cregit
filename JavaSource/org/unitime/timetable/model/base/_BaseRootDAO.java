begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Criteria
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|HibernateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|SessionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|cfg
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|criterion
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|criterion
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|DatabaseUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|_BaseRootDAO
block|{
specifier|protected
specifier|static
name|Map
name|sessionFactoryMap
decl_stmt|;
specifier|protected
specifier|static
name|SessionFactory
name|sessionFactory
decl_stmt|;
specifier|protected
specifier|static
name|ThreadLocal
name|mappedSessions
decl_stmt|;
specifier|protected
specifier|static
name|ThreadLocal
name|sessions
decl_stmt|;
specifier|protected
specifier|static
name|Configuration
name|configuration
decl_stmt|;
comment|/** 	 * Configure the session factory by reading hibernate config file 	 */
specifier|public
specifier|static
name|void
name|initialize
parameter_list|()
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
operator|.
name|initialize
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Configure the session factory by reading hibernate config file 	 * @param configFileName the name of the configuration file 	 */
specifier|public
specifier|static
name|void
name|initialize
parameter_list|(
name|String
name|configFileName
parameter_list|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
operator|.
name|initialize
argument_list|(
name|configFileName
argument_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
operator|.
name|getNewConfiguration
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|initialize
parameter_list|(
name|String
name|configFileName
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
block|{
if|if
condition|(
name|configFileName
operator|==
literal|null
operator|&&
name|sessionFactory
operator|!=
literal|null
condition|)
return|return;
if|if
condition|(
name|sessionFactoryMap
operator|!=
literal|null
operator|&&
name|sessionFactoryMap
operator|.
name|get
argument_list|(
name|configFileName
argument_list|)
operator|!=
literal|null
condition|)
return|return;
name|HibernateUtil
operator|.
name|configureHibernateFromRootDAO
argument_list|(
name|configFileName
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
operator|.
name|setSessionFactory
argument_list|(
name|configuration
operator|.
name|buildSessionFactory
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|DatabaseUpdate
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Set the session factory 	 */
specifier|protected
specifier|static
name|void
name|setSessionFactory
parameter_list|(
name|SessionFactory
name|sessionFactory
parameter_list|)
block|{
name|setSessionFactory
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|,
name|sessionFactory
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Set the session factory 	 */
specifier|protected
specifier|static
name|void
name|setSessionFactory
parameter_list|(
name|String
name|configFileName
parameter_list|,
name|SessionFactory
name|sf
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|configFileName
condition|)
block|{
name|sessionFactory
operator|=
name|sf
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
literal|null
operator|==
name|sessionFactoryMap
condition|)
name|sessionFactoryMap
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|sessionFactoryMap
operator|.
name|put
argument_list|(
name|configFileName
argument_list|,
name|sessionFactory
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Return the SessionFactory that is to be used by these DAOs.  Change this 	 * and implement your own strategy if you, for example, want to pull the SessionFactory 	 * from the JNDI tree. 	 */
specifier|protected
name|SessionFactory
name|getSessionFactory
parameter_list|()
block|{
return|return
name|getSessionFactory
argument_list|(
name|getConfigurationFileName
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|SessionFactory
name|getSessionFactory
parameter_list|(
name|String
name|configFile
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|configFile
condition|)
block|{
if|if
condition|(
literal|null
operator|==
name|sessionFactory
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The session factory has not been initialized (or an error occured during initialization)"
argument_list|)
throw|;
else|else
return|return
name|sessionFactory
return|;
block|}
else|else
block|{
if|if
condition|(
literal|null
operator|==
name|sessionFactoryMap
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The session factory for '"
operator|+
name|configFile
operator|+
literal|"' has not been initialized (or an error occured during initialization)"
argument_list|)
throw|;
else|else
block|{
name|SessionFactory
name|sf
init|=
operator|(
name|SessionFactory
operator|)
name|sessionFactoryMap
operator|.
name|get
argument_list|(
name|configFile
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|sf
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The session factory for '"
operator|+
name|configFile
operator|+
literal|"' has not been initialized (or an error occured during initialization)"
argument_list|)
throw|;
else|else
return|return
name|sf
return|;
block|}
block|}
block|}
comment|/** 	 * Return a new Session object that must be closed when the work has been completed. 	 * @return the active Session 	 */
specifier|public
name|Session
name|getSession
parameter_list|()
block|{
return|return
name|getSession
argument_list|(
name|getConfigurationFileName
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/** 	 * Return a new Session object that must be closed when the work has been completed. 	 * @return the active Session 	 */
specifier|public
name|Session
name|createNewSession
parameter_list|()
block|{
return|return
name|getSession
argument_list|(
name|getConfigurationFileName
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** 	 * Return a new Session object that must be closed when the work has been completed. 	 * @param configFile the config file must match the meta attribute "config-file" in the hibernate mapping file 	 * @return the active Session 	 */
specifier|private
name|Session
name|getSession
parameter_list|(
name|String
name|configFile
parameter_list|,
name|boolean
name|createNew
parameter_list|)
block|{
if|if
condition|(
name|createNew
condition|)
block|{
return|return
name|getSessionFactory
argument_list|(
name|configFile
argument_list|)
operator|.
name|openSession
argument_list|()
return|;
block|}
else|else
block|{
if|if
condition|(
literal|null
operator|==
name|configFile
condition|)
block|{
if|if
condition|(
literal|null
operator|==
name|sessions
condition|)
name|sessions
operator|=
operator|new
name|ThreadLocal
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
operator|(
name|Session
operator|)
name|sessions
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|session
operator|||
operator|!
name|session
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|session
operator|=
name|getSessionFactory
argument_list|(
literal|null
argument_list|)
operator|.
name|openSession
argument_list|()
expr_stmt|;
name|sessions
operator|.
name|set
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
return|return
name|session
return|;
block|}
else|else
block|{
if|if
condition|(
literal|null
operator|==
name|mappedSessions
condition|)
name|mappedSessions
operator|=
operator|new
name|ThreadLocal
argument_list|()
expr_stmt|;
name|java
operator|.
name|util
operator|.
name|HashMap
name|map
init|=
operator|(
name|java
operator|.
name|util
operator|.
name|HashMap
operator|)
name|mappedSessions
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|map
condition|)
block|{
name|map
operator|=
operator|new
name|HashMap
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mappedSessions
operator|.
name|set
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
name|Session
name|session
init|=
operator|(
name|Session
operator|)
name|map
operator|.
name|get
argument_list|(
name|configFile
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|session
operator|||
operator|!
name|session
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|session
operator|=
name|getSessionFactory
argument_list|(
name|configFile
argument_list|)
operator|.
name|openSession
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|configFile
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
return|return
name|session
return|;
block|}
block|}
block|}
comment|/** 	 * Close all sessions for the current thread 	 */
specifier|public
specifier|static
name|void
name|closeCurrentThreadSessions
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|!=
name|sessions
condition|)
block|{
name|Session
name|session
init|=
operator|(
name|Session
operator|)
name|sessions
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|session
operator|&&
name|session
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|null
operator|!=
name|mappedSessions
condition|)
block|{
name|java
operator|.
name|util
operator|.
name|HashMap
name|map
init|=
operator|(
name|java
operator|.
name|util
operator|.
name|HashMap
operator|)
name|mappedSessions
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|map
condition|)
block|{
name|HibernateException
name|thrownException
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|map
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|session
operator|=
operator|(
name|Session
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
literal|null
operator|!=
name|session
operator|&&
name|session
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|HibernateException
name|e
parameter_list|)
block|{
name|thrownException
operator|=
name|e
expr_stmt|;
block|}
block|}
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|thrownException
condition|)
throw|throw
name|thrownException
throw|;
block|}
block|}
block|}
comment|/** 	 * Close the session 	 */
specifier|public
name|void
name|closeSession
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
comment|// TODO - further research required; assumes servlet filter does closing
comment|// if (null != session) session.close();
block|}
comment|/** 	 * Begin the transaction related to the session 	 */
specifier|public
name|Transaction
name|beginTransaction
parameter_list|(
name|Session
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|beginTransaction
argument_list|()
return|;
block|}
comment|/** 	 * Commit the given transaction 	 */
specifier|public
name|void
name|commitTransaction
parameter_list|(
name|Transaction
name|t
parameter_list|)
block|{
name|t
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Return a new Configuration to use 	 */
specifier|public
specifier|static
name|Configuration
name|getNewConfiguration
parameter_list|(
name|String
name|configFileName
parameter_list|)
block|{
return|return
operator|new
name|Configuration
argument_list|()
return|;
block|}
comment|/** 	 * @return Returns the configuration. 	 */
specifier|public
specifier|static
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
comment|/** 	 * Return the name of the configuration file to be used with this DAO or null if default 	 */
specifier|public
name|String
name|getConfigurationFileName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/** 	 * Return the specific Object class that will be used for class-specific 	 * implementation of this DAO. 	 * @return the reference Class 	 */
specifier|protected
specifier|abstract
name|Class
name|getReferenceClass
parameter_list|()
function_decl|;
comment|/** 	 * Used by the base DAO classes but here for your modification 	 * Get object matching the given key and return it. 	 */
specifier|protected
name|Object
name|get
parameter_list|(
name|Class
name|refClass
parameter_list|,
name|Serializable
name|key
parameter_list|)
block|{
name|Session
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|getSession
argument_list|()
expr_stmt|;
return|return
name|get
argument_list|(
name|refClass
argument_list|,
name|key
argument_list|,
name|s
argument_list|)
return|;
block|}
finally|finally
block|{
name|closeSession
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Used by the base DAO classes but here for your modification 	 * Get object matching the given key and return it. 	 */
specifier|protected
name|Object
name|get
parameter_list|(
name|Class
name|refClass
parameter_list|,
name|Serializable
name|key
parameter_list|,
name|Session
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|get
argument_list|(
name|refClass
argument_list|,
name|key
argument_list|)
return|;
block|}
comment|/** 	 * Used by the base DAO classes but here for your modification 	 * Load object matching the given key and return it. 	 */
specifier|protected
name|Object
name|load
parameter_list|(
name|Class
name|refClass
parameter_list|,
name|Serializable
name|key
parameter_list|)
block|{
name|Session
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|getSession
argument_list|()
expr_stmt|;
return|return
name|load
argument_list|(
name|refClass
argument_list|,
name|key
argument_list|,
name|s
argument_list|)
return|;
block|}
finally|finally
block|{
name|closeSession
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Used by the base DAO classes but here for your modification 	 * Load object matching the given key and return it. 	 */
specifier|protected
name|Object
name|load
parameter_list|(
name|Class
name|refClass
parameter_list|,
name|Serializable
name|key
parameter_list|,
name|Session
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|load
argument_list|(
name|refClass
argument_list|,
name|key
argument_list|)
return|;
block|}
comment|/** 	 * Return all objects related to the implementation of this DAO with no filter. 	 */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
name|findAll
parameter_list|()
block|{
name|Session
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|getSession
argument_list|()
expr_stmt|;
return|return
name|findAll
argument_list|(
name|s
argument_list|)
return|;
block|}
finally|finally
block|{
name|closeSession
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Return all objects related to the implementation of this DAO with no filter. 	 * Use the session given. 	 * @param s the Session 	 */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
name|findAll
parameter_list|(
name|Session
name|s
parameter_list|)
block|{
return|return
name|findAll
argument_list|(
name|s
argument_list|,
name|getDefaultOrder
argument_list|()
argument_list|)
return|;
block|}
comment|/** 	 * Return all objects related to the implementation of this DAO with no filter. 	 */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
name|findAll
parameter_list|(
name|Order
name|defaultOrder
parameter_list|)
block|{
name|Session
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|getSession
argument_list|()
expr_stmt|;
return|return
name|findAll
argument_list|(
name|s
argument_list|,
name|defaultOrder
argument_list|)
return|;
block|}
finally|finally
block|{
name|closeSession
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Return all objects related to the implementation of this DAO with no filter. 	 * Use the session given. 	 * @param s the Session 	 */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
name|findAll
parameter_list|(
name|Session
name|s
parameter_list|,
name|Order
name|defaultOrder
parameter_list|)
block|{
name|Criteria
name|crit
init|=
name|s
operator|.
name|createCriteria
argument_list|(
name|getReferenceClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|defaultOrder
condition|)
name|crit
operator|.
name|addOrder
argument_list|(
name|defaultOrder
argument_list|)
expr_stmt|;
return|return
name|crit
operator|.
name|list
argument_list|()
return|;
block|}
comment|/** 	 * Return all objects related to the implementation of this DAO with a filter. 	 * Use the session given. 	 * @param propName the name of the property to use for filtering 	 * @param filter the value of the filter 	 */
specifier|protected
name|java
operator|.
name|util
operator|.
name|List
name|findFiltered
parameter_list|(
name|String
name|propName
parameter_list|,
name|Object
name|filter
parameter_list|)
block|{
return|return
name|findFiltered
argument_list|(
name|propName
argument_list|,
name|filter
argument_list|,
name|getDefaultOrder
argument_list|()
argument_list|)
return|;
block|}
comment|/** 	 * Return all objects related to the implementation of this DAO with a filter. 	 * Use the session given. 	 * @param propName the name of the property to use for filtering 	 * @param filter the value of the filter 	 * @param orderProperty the name of the property used for ordering 	 */
specifier|protected
name|java
operator|.
name|util
operator|.
name|List
name|findFiltered
parameter_list|(
name|String
name|propName
parameter_list|,
name|Object
name|filter
parameter_list|,
name|Order
name|order
parameter_list|)
block|{
name|Session
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|getSession
argument_list|()
expr_stmt|;
return|return
name|findFiltered
argument_list|(
name|s
argument_list|,
name|propName
argument_list|,
name|filter
argument_list|,
name|getDefaultOrder
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|closeSession
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Return all objects related to the implementation of this DAO with a filter. 	 * Use the session given. 	 * @param s the Session 	 * @param propName the name of the property to use for filtering 	 * @param filter the value of the filter 	 * @param orderProperty the name of the property used for ordering 	 */
specifier|protected
name|java
operator|.
name|util
operator|.
name|List
name|findFiltered
parameter_list|(
name|Session
name|s
parameter_list|,
name|String
name|propName
parameter_list|,
name|Object
name|filter
parameter_list|,
name|Order
name|order
parameter_list|)
block|{
name|Criteria
name|crit
init|=
name|s
operator|.
name|createCriteria
argument_list|(
name|getReferenceClass
argument_list|()
argument_list|)
decl_stmt|;
name|crit
operator|.
name|add
argument_list|(
name|Expression
operator|.
name|eq
argument_list|(
name|propName
argument_list|,
name|filter
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|order
condition|)
name|crit
operator|.
name|addOrder
argument_list|(
name|order
argument_list|)
expr_stmt|;
return|return
name|crit
operator|.
name|list
argument_list|()
return|;
block|}
comment|/** 	 * Obtain an instance of Query for a named query string defined in the mapping file. 	 * @param name the name of a query defined externally  	 * @return Query 	 */
specifier|protected
name|Query
name|getNamedQuery
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Session
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|getSession
argument_list|()
expr_stmt|;
return|return
name|getNamedQuery
argument_list|(
name|name
argument_list|,
name|s
argument_list|)
return|;
block|}
finally|finally
block|{
name|closeSession
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Obtain an instance of Query for a named query string defined in the mapping file. 	 * Use the session given. 	 * @param name the name of a query defined externally  	 * @param s the Session 	 * @return Query 	 */
specifier|protected
name|Query
name|getNamedQuery
parameter_list|(
name|String
name|name
parameter_list|,
name|Session
name|s
parameter_list|)
block|{
name|Query
name|q
init|=
name|s
operator|.
name|getNamedQuery
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|q
return|;
block|}
comment|/** 	 * Obtain an instance of Query for a named query string defined in the mapping file. 	 * @param name the name of a query defined externally  	 * @param param the first parameter to set 	 * @return Query 	 */
specifier|protected
name|Query
name|getNamedQuery
parameter_list|(
name|String
name|name
parameter_list|,
name|Serializable
name|param
parameter_list|)
block|{
name|Session
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|getSession
argument_list|()
expr_stmt|;
return|return
name|getNamedQuery
argument_list|(
name|name
argument_list|,
name|param
argument_list|,
name|s
argument_list|)
return|;
block|}
finally|finally
block|{
name|closeSession
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Obtain an instance of Query for a named query string defined in the mapping file. 	 * Use the session given. 	 * @param name the name of a query defined externally  	 * @param param the first parameter to set 	 * @param s the Session 	 * @return Query 	 */
specifier|protected
name|Query
name|getNamedQuery
parameter_list|(
name|String
name|name
parameter_list|,
name|Serializable
name|param
parameter_list|,
name|Session
name|s
parameter_list|)
block|{
name|Query
name|q
init|=
name|s
operator|.
name|getNamedQuery
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|q
operator|.
name|setParameter
argument_list|(
literal|0
argument_list|,
name|param
argument_list|)
expr_stmt|;
return|return
name|q
return|;
block|}
comment|/** 	 * Obtain an instance of Query for a named query string defined in the mapping file. 	 * Use the parameters given. 	 * @param name the name of a query defined externally  	 * @param params the parameter array 	 * @return Query 	 */
specifier|protected
name|Query
name|getNamedQuery
parameter_list|(
name|String
name|name
parameter_list|,
name|Serializable
index|[]
name|params
parameter_list|)
block|{
name|Session
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|getSession
argument_list|()
expr_stmt|;
return|return
name|getNamedQuery
argument_list|(
name|name
argument_list|,
name|params
argument_list|,
name|s
argument_list|)
return|;
block|}
finally|finally
block|{
name|closeSession
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Obtain an instance of Query for a named query string defined in the mapping file. 	 * Use the parameters given and the Session given. 	 * @param name the name of a query defined externally  	 * @param params the parameter array 	 * @s the Session 	 * @return Query 	 */
specifier|protected
name|Query
name|getNamedQuery
parameter_list|(
name|String
name|name
parameter_list|,
name|Serializable
index|[]
name|params
parameter_list|,
name|Session
name|s
parameter_list|)
block|{
name|Query
name|q
init|=
name|s
operator|.
name|getNamedQuery
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|params
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|q
operator|.
name|setParameter
argument_list|(
name|i
argument_list|,
name|params
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|q
return|;
block|}
comment|/** 	 * Obtain an instance of Query for a named query string defined in the mapping file. 	 * Use the parameters given. 	 * @param name the name of a query defined externally  	 * @param params the parameter Map 	 * @return Query 	 */
specifier|protected
name|Query
name|getNamedQuery
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
name|params
parameter_list|)
block|{
name|Session
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|getSession
argument_list|()
expr_stmt|;
return|return
name|getNamedQuery
argument_list|(
name|name
argument_list|,
name|params
argument_list|,
name|s
argument_list|)
return|;
block|}
finally|finally
block|{
name|closeSession
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Obtain an instance of Query for a named query string defined in the mapping file. 	 * Use the parameters given and the Session given. 	 * @param name the name of a query defined externally  	 * @param params the parameter Map 	 * @s the Session 	 * @return Query 	 */
specifier|protected
name|Query
name|getNamedQuery
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
name|params
parameter_list|,
name|Session
name|s
parameter_list|)
block|{
name|Query
name|q
init|=
name|s
operator|.
name|getNamedQuery
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|params
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|params
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|q
operator|.
name|setParameter
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|q
return|;
block|}
comment|/** 	 * Execute a query.  	 * @param queryStr a query expressed in Hibernate's query language 	 * @return a distinct list of instances (or arrays of instances) 	 */
specifier|public
name|Query
name|getQuery
parameter_list|(
name|String
name|queryStr
parameter_list|)
block|{
name|Session
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|getSession
argument_list|()
expr_stmt|;
return|return
name|getQuery
argument_list|(
name|queryStr
argument_list|,
name|s
argument_list|)
return|;
block|}
finally|finally
block|{
name|closeSession
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Execute a query but use the session given instead of creating a new one. 	 * @param queryStr a query expressed in Hibernate's query language 	 * @s the Session to use 	 */
specifier|public
name|Query
name|getQuery
parameter_list|(
name|String
name|queryStr
parameter_list|,
name|Session
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|createQuery
argument_list|(
name|queryStr
argument_list|)
return|;
block|}
comment|/** 	 * Execute a query.  	 * @param query a query expressed in Hibernate's query language 	 * @param queryStr the name of a query defined externally  	 * @param param the first parameter to set 	 * @return Query 	 */
specifier|protected
name|Query
name|getQuery
parameter_list|(
name|String
name|queryStr
parameter_list|,
name|Serializable
name|param
parameter_list|)
block|{
name|Session
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|getSession
argument_list|()
expr_stmt|;
return|return
name|getQuery
argument_list|(
name|queryStr
argument_list|,
name|param
argument_list|,
name|s
argument_list|)
return|;
block|}
finally|finally
block|{
name|closeSession
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Execute a query but use the session given instead of creating a new one. 	 * @param queryStr a query expressed in Hibernate's query language 	 * @param param the first parameter to set 	 * @s the Session to use 	 * @return Query 	 */
specifier|protected
name|Query
name|getQuery
parameter_list|(
name|String
name|queryStr
parameter_list|,
name|Serializable
name|param
parameter_list|,
name|Session
name|s
parameter_list|)
block|{
name|Query
name|q
init|=
name|getQuery
argument_list|(
name|queryStr
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|q
operator|.
name|setParameter
argument_list|(
literal|0
argument_list|,
name|param
argument_list|)
expr_stmt|;
return|return
name|q
return|;
block|}
comment|/** 	 * Execute a query.  	 * @param queryStr a query expressed in Hibernate's query language 	 * @param params the parameter array 	 * @return Query 	 */
specifier|protected
name|Query
name|getQuery
parameter_list|(
name|String
name|queryStr
parameter_list|,
name|Serializable
index|[]
name|params
parameter_list|)
block|{
name|Session
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|getSession
argument_list|()
expr_stmt|;
return|return
name|getQuery
argument_list|(
name|queryStr
argument_list|,
name|params
argument_list|,
name|s
argument_list|)
return|;
block|}
finally|finally
block|{
name|closeSession
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Execute a query but use the session given instead of creating a new one. 	 * @param queryStr a query expressed in Hibernate's query language 	 * @param params the parameter array 	 * @s the Session 	 * @return Query 	 */
specifier|protected
name|Query
name|getQuery
parameter_list|(
name|String
name|queryStr
parameter_list|,
name|Serializable
index|[]
name|params
parameter_list|,
name|Session
name|s
parameter_list|)
block|{
name|Query
name|q
init|=
name|getQuery
argument_list|(
name|queryStr
argument_list|,
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|params
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|q
operator|.
name|setParameter
argument_list|(
name|i
argument_list|,
name|params
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|q
return|;
block|}
comment|/** 	 * Obtain an instance of Query for a named query string defined in the mapping file. 	 * Use the parameters given. 	 * @param queryStr a query expressed in Hibernate's query language 	 * @param params the parameter Map 	 * @return Query 	 */
specifier|protected
name|Query
name|getQuery
parameter_list|(
name|String
name|queryStr
parameter_list|,
name|Map
name|params
parameter_list|)
block|{
name|Session
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|getSession
argument_list|()
expr_stmt|;
return|return
name|getQuery
argument_list|(
name|queryStr
argument_list|,
name|params
argument_list|,
name|s
argument_list|)
return|;
block|}
finally|finally
block|{
name|closeSession
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Obtain an instance of Query for a named query string defined in the mapping file. 	 * Use the parameters given and the Session given. 	 * @param queryStr a query expressed in Hibernate's query language 	 * @param params the parameter Map 	 * @s the Session 	 * @return Query 	 */
specifier|protected
name|Query
name|getQuery
parameter_list|(
name|String
name|queryStr
parameter_list|,
name|Map
name|params
parameter_list|,
name|Session
name|s
parameter_list|)
block|{
name|Query
name|q
init|=
name|getQuery
argument_list|(
name|queryStr
argument_list|,
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|params
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|params
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|q
operator|.
name|setParameter
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|q
return|;
block|}
specifier|protected
name|Order
name|getDefaultOrder
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/** 	 * Used by the base DAO classes but here for your modification 	 * Persist the given transient instance, first assigning a generated identifier.  	 * (Or using the current value of the identifier property if the assigned generator is used.)  	 */
specifier|protected
name|Serializable
name|save
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|Transaction
name|t
init|=
literal|null
decl_stmt|;
name|Session
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|getSession
argument_list|()
expr_stmt|;
name|t
operator|=
name|beginTransaction
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|Serializable
name|rtn
init|=
name|save
argument_list|(
name|obj
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|commitTransaction
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
name|rtn
return|;
block|}
catch|catch
parameter_list|(
name|HibernateException
name|e
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|t
condition|)
name|t
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|closeSession
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Used by the base DAO classes but here for your modification 	 * Persist the given transient instance, first assigning a generated identifier.  	 * (Or using the current value of the identifier property if the assigned generator is used.)  	 */
specifier|protected
name|Serializable
name|save
parameter_list|(
name|Object
name|obj
parameter_list|,
name|Session
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|save
argument_list|(
name|obj
argument_list|)
return|;
block|}
comment|/** 	 * Used by the base DAO classes but here for your modification 	 * Either save() or update() the given instance, depending upon the value of its 	 * identifier property. 	 */
specifier|protected
name|void
name|saveOrUpdate
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|Transaction
name|t
init|=
literal|null
decl_stmt|;
name|Session
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|getSession
argument_list|()
expr_stmt|;
name|t
operator|=
name|beginTransaction
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|saveOrUpdate
argument_list|(
name|obj
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|commitTransaction
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HibernateException
name|e
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|t
condition|)
name|t
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|closeSession
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Used by the base DAO classes but here for your modification 	 * Either save() or update() the given instance, depending upon the value of its 	 * identifier property. 	 */
specifier|protected
name|void
name|saveOrUpdate
parameter_list|(
name|Object
name|obj
parameter_list|,
name|Session
name|s
parameter_list|)
block|{
name|s
operator|.
name|saveOrUpdate
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Used by the base DAO classes but here for your modification 	 * Update the persistent state associated with the given identifier. An exception is thrown if there is a persistent 	 * instance with the same identifier in the current session. 	 * @param obj a transient instance containing updated state 	 */
specifier|protected
name|void
name|update
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|Transaction
name|t
init|=
literal|null
decl_stmt|;
name|Session
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|getSession
argument_list|()
expr_stmt|;
name|t
operator|=
name|beginTransaction
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|update
argument_list|(
name|obj
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|commitTransaction
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HibernateException
name|e
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|t
condition|)
name|t
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|closeSession
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Used by the base DAO classes but here for your modification 	 * Update the persistent state associated with the given identifier. An exception is thrown if there is a persistent 	 * instance with the same identifier in the current session. 	 * @param obj a transient instance containing updated state 	 * @param s the Session 	 */
specifier|protected
name|void
name|update
parameter_list|(
name|Object
name|obj
parameter_list|,
name|Session
name|s
parameter_list|)
block|{
name|s
operator|.
name|update
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Delete all objects returned by the query. Return the number of objects deleted. 	 */
specifier|protected
name|int
name|delete
parameter_list|(
name|String
name|delStmt
parameter_list|)
block|{
name|Transaction
name|t
init|=
literal|null
decl_stmt|;
name|Session
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|getSession
argument_list|()
expr_stmt|;
name|t
operator|=
name|beginTransaction
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|int
name|rtn
init|=
name|delete
argument_list|(
name|delStmt
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|commitTransaction
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
name|rtn
return|;
block|}
catch|catch
parameter_list|(
name|HibernateException
name|e
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|t
condition|)
name|t
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|closeSession
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Delete all objects returned by the query. Return the number of objects deleted. 	 */
specifier|protected
name|int
name|delete
parameter_list|(
name|String
name|delStmt
parameter_list|,
name|Session
name|s
parameter_list|)
block|{
return|return
name|delete
argument_list|(
name|delStmt
argument_list|,
literal|null
argument_list|,
name|s
argument_list|)
return|;
block|}
comment|/** 	 * Delete all objects returned by the query. 	 */
specifier|protected
name|int
name|delete
parameter_list|(
name|String
name|delStmt
parameter_list|,
name|Object
name|parameterValue
parameter_list|)
block|{
name|Transaction
name|t
init|=
literal|null
decl_stmt|;
name|Session
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|getSession
argument_list|()
expr_stmt|;
name|t
operator|=
name|beginTransaction
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|int
name|rtn
init|=
name|delete
argument_list|(
name|delStmt
argument_list|,
literal|null
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|commitTransaction
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
name|rtn
return|;
block|}
catch|catch
parameter_list|(
name|HibernateException
name|e
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|t
condition|)
name|t
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|closeSession
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Delete all objects returned by the query. 	 */
specifier|protected
name|int
name|delete
parameter_list|(
name|String
name|delStmt
parameter_list|,
name|Object
name|value
parameter_list|,
name|Session
name|s
parameter_list|)
block|{
name|Query
name|query
init|=
name|s
operator|.
name|createQuery
argument_list|(
name|delStmt
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|value
condition|)
name|query
operator|.
name|setParameter
argument_list|(
literal|0
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|delete
argument_list|(
name|query
argument_list|,
name|s
argument_list|)
return|;
block|}
comment|/** 	 * Delete all objects returned by the query 	 */
specifier|protected
name|int
name|delete
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
name|Transaction
name|t
init|=
literal|null
decl_stmt|;
name|Session
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|getSession
argument_list|()
expr_stmt|;
name|t
operator|=
name|beginTransaction
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|int
name|rtn
init|=
name|delete
argument_list|(
name|query
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|commitTransaction
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
name|rtn
return|;
block|}
catch|catch
parameter_list|(
name|HibernateException
name|e
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|t
condition|)
name|t
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|closeSession
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Delete all objects returned by the query 	 */
specifier|protected
name|int
name|delete
parameter_list|(
name|Query
name|query
parameter_list|,
name|Session
name|s
parameter_list|)
block|{
name|List
name|list
init|=
name|query
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|delete
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|list
operator|.
name|size
argument_list|()
return|;
block|}
comment|/** 	 * Used by the base DAO classes but here for your modification 	 * Remove a persistent instance from the datastore. The argument may be an instance associated with the receiving 	 * Session or a transient instance with an identifier associated with existing persistent state.  	 */
specifier|protected
name|void
name|delete
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|Transaction
name|t
init|=
literal|null
decl_stmt|;
name|Session
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|getSession
argument_list|()
expr_stmt|;
name|t
operator|=
name|beginTransaction
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|delete
argument_list|(
name|obj
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|commitTransaction
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HibernateException
name|e
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|t
condition|)
name|t
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|closeSession
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Used by the base DAO classes but here for your modification 	 * Remove a persistent instance from the datastore. The argument may be an instance associated with the receiving 	 * Session or a transient instance with an identifier associated with existing persistent state.  	 */
specifier|protected
name|void
name|delete
parameter_list|(
name|Object
name|obj
parameter_list|,
name|Session
name|s
parameter_list|)
block|{
name|s
operator|.
name|delete
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Used by the base DAO classes but here for your modification 	 * Re-read the state of the given instance from the underlying database. It is inadvisable to use this to implement 	 * long-running sessions that span many business tasks. This method is, however, useful in certain special circumstances. 	 */
specifier|protected
name|void
name|refresh
parameter_list|(
name|Object
name|obj
parameter_list|,
name|Session
name|s
parameter_list|)
block|{
name|s
operator|.
name|refresh
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

