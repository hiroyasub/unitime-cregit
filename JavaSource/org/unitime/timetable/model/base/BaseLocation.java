begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamLocationPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomDept
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|BaseLocation
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Long
name|iUniqueId
decl_stmt|;
specifier|private
name|Long
name|iPermanentId
decl_stmt|;
specifier|private
name|Integer
name|iCapacity
decl_stmt|;
specifier|private
name|Double
name|iCoordinateX
decl_stmt|;
specifier|private
name|Double
name|iCoordinateY
decl_stmt|;
specifier|private
name|Boolean
name|iIgnoreTooFar
decl_stmt|;
specifier|private
name|Boolean
name|iIgnoreRoomCheck
decl_stmt|;
specifier|private
name|String
name|iManagerIds
decl_stmt|;
specifier|private
name|String
name|iPattern
decl_stmt|;
specifier|private
name|Integer
name|iExamType
decl_stmt|;
specifier|private
name|Integer
name|iExamCapacity
decl_stmt|;
specifier|private
name|String
name|iDisplayName
decl_stmt|;
specifier|private
name|Session
name|iSession
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|RoomFeature
argument_list|>
name|iFeatures
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|ExamLocationPref
argument_list|>
name|iExamPreferences
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Assignment
argument_list|>
name|iAssignments
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|RoomGroup
argument_list|>
name|iRoomGroups
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|RoomDept
argument_list|>
name|iRoomDepts
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_UNIQUEID
init|=
literal|"uniqueId"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_PERMANENT_ID
init|=
literal|"permanentId"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_CAPACITY
init|=
literal|"capacity"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_COORDINATE_X
init|=
literal|"coordinateX"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_COORDINATE_Y
init|=
literal|"coordinateY"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_IGNORE_TOO_FAR
init|=
literal|"ignoreTooFar"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_IGNORE_ROOM_CHECK
init|=
literal|"ignoreRoomCheck"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_MANAGER_IDS
init|=
literal|"managerIds"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_PATTERN
init|=
literal|"pattern"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_EXAM_TYPE
init|=
literal|"examType"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_EXAM_CAPACITY
init|=
literal|"examCapacity"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_DISPLAY_NAME
init|=
literal|"displayName"
decl_stmt|;
specifier|public
name|BaseLocation
parameter_list|()
block|{
name|initialize
argument_list|()
expr_stmt|;
block|}
specifier|public
name|BaseLocation
parameter_list|(
name|Long
name|uniqueId
parameter_list|)
block|{
name|setUniqueId
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
name|initialize
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|initialize
parameter_list|()
block|{
block|}
specifier|public
name|Long
name|getUniqueId
parameter_list|()
block|{
return|return
name|iUniqueId
return|;
block|}
specifier|public
name|void
name|setUniqueId
parameter_list|(
name|Long
name|uniqueId
parameter_list|)
block|{
name|iUniqueId
operator|=
name|uniqueId
expr_stmt|;
block|}
specifier|public
name|Long
name|getPermanentId
parameter_list|()
block|{
return|return
name|iPermanentId
return|;
block|}
specifier|public
name|void
name|setPermanentId
parameter_list|(
name|Long
name|permanentId
parameter_list|)
block|{
name|iPermanentId
operator|=
name|permanentId
expr_stmt|;
block|}
specifier|public
name|Integer
name|getCapacity
parameter_list|()
block|{
return|return
name|iCapacity
return|;
block|}
specifier|public
name|void
name|setCapacity
parameter_list|(
name|Integer
name|capacity
parameter_list|)
block|{
name|iCapacity
operator|=
name|capacity
expr_stmt|;
block|}
specifier|public
name|Double
name|getCoordinateX
parameter_list|()
block|{
return|return
name|iCoordinateX
return|;
block|}
specifier|public
name|void
name|setCoordinateX
parameter_list|(
name|Double
name|coordinateX
parameter_list|)
block|{
name|iCoordinateX
operator|=
name|coordinateX
expr_stmt|;
block|}
specifier|public
name|Double
name|getCoordinateY
parameter_list|()
block|{
return|return
name|iCoordinateY
return|;
block|}
specifier|public
name|void
name|setCoordinateY
parameter_list|(
name|Double
name|coordinateY
parameter_list|)
block|{
name|iCoordinateY
operator|=
name|coordinateY
expr_stmt|;
block|}
specifier|public
name|Boolean
name|isIgnoreTooFar
parameter_list|()
block|{
return|return
name|iIgnoreTooFar
return|;
block|}
specifier|public
name|Boolean
name|getIgnoreTooFar
parameter_list|()
block|{
return|return
name|iIgnoreTooFar
return|;
block|}
specifier|public
name|void
name|setIgnoreTooFar
parameter_list|(
name|Boolean
name|ignoreTooFar
parameter_list|)
block|{
name|iIgnoreTooFar
operator|=
name|ignoreTooFar
expr_stmt|;
block|}
specifier|public
name|Boolean
name|isIgnoreRoomCheck
parameter_list|()
block|{
return|return
name|iIgnoreRoomCheck
return|;
block|}
specifier|public
name|Boolean
name|getIgnoreRoomCheck
parameter_list|()
block|{
return|return
name|iIgnoreRoomCheck
return|;
block|}
specifier|public
name|void
name|setIgnoreRoomCheck
parameter_list|(
name|Boolean
name|ignoreRoomCheck
parameter_list|)
block|{
name|iIgnoreRoomCheck
operator|=
name|ignoreRoomCheck
expr_stmt|;
block|}
specifier|public
name|String
name|getManagerIds
parameter_list|()
block|{
return|return
name|iManagerIds
return|;
block|}
specifier|public
name|void
name|setManagerIds
parameter_list|(
name|String
name|managerIds
parameter_list|)
block|{
name|iManagerIds
operator|=
name|managerIds
expr_stmt|;
block|}
specifier|public
name|String
name|getPattern
parameter_list|()
block|{
return|return
name|iPattern
return|;
block|}
specifier|public
name|void
name|setPattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|iPattern
operator|=
name|pattern
expr_stmt|;
block|}
specifier|public
name|Integer
name|getExamType
parameter_list|()
block|{
return|return
name|iExamType
return|;
block|}
specifier|public
name|void
name|setExamType
parameter_list|(
name|Integer
name|examType
parameter_list|)
block|{
name|iExamType
operator|=
name|examType
expr_stmt|;
block|}
specifier|public
name|Integer
name|getExamCapacity
parameter_list|()
block|{
return|return
name|iExamCapacity
return|;
block|}
specifier|public
name|void
name|setExamCapacity
parameter_list|(
name|Integer
name|examCapacity
parameter_list|)
block|{
name|iExamCapacity
operator|=
name|examCapacity
expr_stmt|;
block|}
specifier|public
name|String
name|getDisplayName
parameter_list|()
block|{
return|return
name|iDisplayName
return|;
block|}
specifier|public
name|void
name|setDisplayName
parameter_list|(
name|String
name|displayName
parameter_list|)
block|{
name|iDisplayName
operator|=
name|displayName
expr_stmt|;
block|}
specifier|public
name|Session
name|getSession
parameter_list|()
block|{
return|return
name|iSession
return|;
block|}
specifier|public
name|void
name|setSession
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|iSession
operator|=
name|session
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|RoomFeature
argument_list|>
name|getFeatures
parameter_list|()
block|{
return|return
name|iFeatures
return|;
block|}
specifier|public
name|void
name|setFeatures
parameter_list|(
name|Set
argument_list|<
name|RoomFeature
argument_list|>
name|features
parameter_list|)
block|{
name|iFeatures
operator|=
name|features
expr_stmt|;
block|}
specifier|public
name|void
name|addTofeatures
parameter_list|(
name|RoomFeature
name|roomFeature
parameter_list|)
block|{
if|if
condition|(
name|iFeatures
operator|==
literal|null
condition|)
name|iFeatures
operator|=
operator|new
name|HashSet
argument_list|<
name|RoomFeature
argument_list|>
argument_list|()
expr_stmt|;
name|iFeatures
operator|.
name|add
argument_list|(
name|roomFeature
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|ExamLocationPref
argument_list|>
name|getExamPreferences
parameter_list|()
block|{
return|return
name|iExamPreferences
return|;
block|}
specifier|public
name|void
name|setExamPreferences
parameter_list|(
name|Set
argument_list|<
name|ExamLocationPref
argument_list|>
name|examPreferences
parameter_list|)
block|{
name|iExamPreferences
operator|=
name|examPreferences
expr_stmt|;
block|}
specifier|public
name|void
name|addToexamPreferences
parameter_list|(
name|ExamLocationPref
name|examLocationPref
parameter_list|)
block|{
if|if
condition|(
name|iExamPreferences
operator|==
literal|null
condition|)
name|iExamPreferences
operator|=
operator|new
name|HashSet
argument_list|<
name|ExamLocationPref
argument_list|>
argument_list|()
expr_stmt|;
name|iExamPreferences
operator|.
name|add
argument_list|(
name|examLocationPref
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|Assignment
argument_list|>
name|getAssignments
parameter_list|()
block|{
return|return
name|iAssignments
return|;
block|}
specifier|public
name|void
name|setAssignments
parameter_list|(
name|Set
argument_list|<
name|Assignment
argument_list|>
name|assignments
parameter_list|)
block|{
name|iAssignments
operator|=
name|assignments
expr_stmt|;
block|}
specifier|public
name|void
name|addToassignments
parameter_list|(
name|Assignment
name|assignment
parameter_list|)
block|{
if|if
condition|(
name|iAssignments
operator|==
literal|null
condition|)
name|iAssignments
operator|=
operator|new
name|HashSet
argument_list|<
name|Assignment
argument_list|>
argument_list|()
expr_stmt|;
name|iAssignments
operator|.
name|add
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|RoomGroup
argument_list|>
name|getRoomGroups
parameter_list|()
block|{
return|return
name|iRoomGroups
return|;
block|}
specifier|public
name|void
name|setRoomGroups
parameter_list|(
name|Set
argument_list|<
name|RoomGroup
argument_list|>
name|roomGroups
parameter_list|)
block|{
name|iRoomGroups
operator|=
name|roomGroups
expr_stmt|;
block|}
specifier|public
name|void
name|addToroomGroups
parameter_list|(
name|RoomGroup
name|roomGroup
parameter_list|)
block|{
if|if
condition|(
name|iRoomGroups
operator|==
literal|null
condition|)
name|iRoomGroups
operator|=
operator|new
name|HashSet
argument_list|<
name|RoomGroup
argument_list|>
argument_list|()
expr_stmt|;
name|iRoomGroups
operator|.
name|add
argument_list|(
name|roomGroup
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|RoomDept
argument_list|>
name|getRoomDepts
parameter_list|()
block|{
return|return
name|iRoomDepts
return|;
block|}
specifier|public
name|void
name|setRoomDepts
parameter_list|(
name|Set
argument_list|<
name|RoomDept
argument_list|>
name|roomDepts
parameter_list|)
block|{
name|iRoomDepts
operator|=
name|roomDepts
expr_stmt|;
block|}
specifier|public
name|void
name|addToroomDepts
parameter_list|(
name|RoomDept
name|roomDept
parameter_list|)
block|{
if|if
condition|(
name|iRoomDepts
operator|==
literal|null
condition|)
name|iRoomDepts
operator|=
operator|new
name|HashSet
argument_list|<
name|RoomDept
argument_list|>
argument_list|()
expr_stmt|;
name|iRoomDepts
operator|.
name|add
argument_list|(
name|roomDept
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|Location
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getUniqueId
argument_list|()
operator|==
literal|null
operator|||
operator|(
operator|(
name|Location
operator|)
name|o
operator|)
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Location
operator|)
name|o
operator|)
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
return|return
name|getUniqueId
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Location["
operator|+
name|getUniqueId
argument_list|()
operator|+
literal|"]"
return|;
block|}
specifier|public
name|String
name|toDebugString
parameter_list|()
block|{
return|return
literal|"Location["
operator|+
literal|"\n	Capacity: "
operator|+
name|getCapacity
argument_list|()
operator|+
literal|"\n	CoordinateX: "
operator|+
name|getCoordinateX
argument_list|()
operator|+
literal|"\n	CoordinateY: "
operator|+
name|getCoordinateY
argument_list|()
operator|+
literal|"\n	DisplayName: "
operator|+
name|getDisplayName
argument_list|()
operator|+
literal|"\n	ExamCapacity: "
operator|+
name|getExamCapacity
argument_list|()
operator|+
literal|"\n	ExamType: "
operator|+
name|getExamType
argument_list|()
operator|+
literal|"\n	IgnoreRoomCheck: "
operator|+
name|getIgnoreRoomCheck
argument_list|()
operator|+
literal|"\n	IgnoreTooFar: "
operator|+
name|getIgnoreTooFar
argument_list|()
operator|+
literal|"\n	ManagerIds: "
operator|+
name|getManagerIds
argument_list|()
operator|+
literal|"\n	Pattern: "
operator|+
name|getPattern
argument_list|()
operator|+
literal|"\n	PermanentId: "
operator|+
name|getPermanentId
argument_list|()
operator|+
literal|"\n	Session: "
operator|+
name|getSession
argument_list|()
operator|+
literal|"\n	UniqueId: "
operator|+
name|getUniqueId
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

