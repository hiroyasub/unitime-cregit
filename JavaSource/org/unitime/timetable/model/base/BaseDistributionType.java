begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RefTableEntry
import|;
end_import

begin_comment
comment|/**  * Do not change this class. It has been automatically generated using ant create-model.  * @see org.unitime.commons.ant.CreateBaseModelFromXml  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|BaseDistributionType
extends|extends
name|RefTableEntry
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Boolean
name|iSequencingRequired
decl_stmt|;
specifier|private
name|Integer
name|iRequirementId
decl_stmt|;
specifier|private
name|String
name|iAllowedPref
decl_stmt|;
specifier|private
name|String
name|iDescr
decl_stmt|;
specifier|private
name|String
name|iAbbreviation
decl_stmt|;
specifier|private
name|Boolean
name|iInstructorPref
decl_stmt|;
specifier|private
name|Boolean
name|iExamPref
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Department
argument_list|>
name|iDepartments
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_SEQUENCING_REQUIRED
init|=
literal|"sequencingRequired"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_REQ_ID
init|=
literal|"requirementId"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_ALLOWED_PREF
init|=
literal|"allowedPref"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_DESCRIPTION
init|=
literal|"descr"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_ABBREVIATION
init|=
literal|"abbreviation"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_INSTRUCTOR_PREF
init|=
literal|"instructorPref"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_EXAM_PREF
init|=
literal|"examPref"
decl_stmt|;
specifier|public
name|BaseDistributionType
parameter_list|()
block|{
name|initialize
argument_list|()
expr_stmt|;
block|}
specifier|public
name|BaseDistributionType
parameter_list|(
name|Long
name|uniqueId
parameter_list|)
block|{
name|setUniqueId
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
name|initialize
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|initialize
parameter_list|()
block|{
block|}
specifier|public
name|Boolean
name|isSequencingRequired
parameter_list|()
block|{
return|return
name|iSequencingRequired
return|;
block|}
specifier|public
name|Boolean
name|getSequencingRequired
parameter_list|()
block|{
return|return
name|iSequencingRequired
return|;
block|}
specifier|public
name|void
name|setSequencingRequired
parameter_list|(
name|Boolean
name|sequencingRequired
parameter_list|)
block|{
name|iSequencingRequired
operator|=
name|sequencingRequired
expr_stmt|;
block|}
specifier|public
name|Integer
name|getRequirementId
parameter_list|()
block|{
return|return
name|iRequirementId
return|;
block|}
specifier|public
name|void
name|setRequirementId
parameter_list|(
name|Integer
name|requirementId
parameter_list|)
block|{
name|iRequirementId
operator|=
name|requirementId
expr_stmt|;
block|}
specifier|public
name|String
name|getAllowedPref
parameter_list|()
block|{
return|return
name|iAllowedPref
return|;
block|}
specifier|public
name|void
name|setAllowedPref
parameter_list|(
name|String
name|allowedPref
parameter_list|)
block|{
name|iAllowedPref
operator|=
name|allowedPref
expr_stmt|;
block|}
specifier|public
name|String
name|getDescr
parameter_list|()
block|{
return|return
name|iDescr
return|;
block|}
specifier|public
name|void
name|setDescr
parameter_list|(
name|String
name|descr
parameter_list|)
block|{
name|iDescr
operator|=
name|descr
expr_stmt|;
block|}
specifier|public
name|String
name|getAbbreviation
parameter_list|()
block|{
return|return
name|iAbbreviation
return|;
block|}
specifier|public
name|void
name|setAbbreviation
parameter_list|(
name|String
name|abbreviation
parameter_list|)
block|{
name|iAbbreviation
operator|=
name|abbreviation
expr_stmt|;
block|}
specifier|public
name|Boolean
name|isInstructorPref
parameter_list|()
block|{
return|return
name|iInstructorPref
return|;
block|}
specifier|public
name|Boolean
name|getInstructorPref
parameter_list|()
block|{
return|return
name|iInstructorPref
return|;
block|}
specifier|public
name|void
name|setInstructorPref
parameter_list|(
name|Boolean
name|instructorPref
parameter_list|)
block|{
name|iInstructorPref
operator|=
name|instructorPref
expr_stmt|;
block|}
specifier|public
name|Boolean
name|isExamPref
parameter_list|()
block|{
return|return
name|iExamPref
return|;
block|}
specifier|public
name|Boolean
name|getExamPref
parameter_list|()
block|{
return|return
name|iExamPref
return|;
block|}
specifier|public
name|void
name|setExamPref
parameter_list|(
name|Boolean
name|examPref
parameter_list|)
block|{
name|iExamPref
operator|=
name|examPref
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|Department
argument_list|>
name|getDepartments
parameter_list|()
block|{
return|return
name|iDepartments
return|;
block|}
specifier|public
name|void
name|setDepartments
parameter_list|(
name|Set
argument_list|<
name|Department
argument_list|>
name|departments
parameter_list|)
block|{
name|iDepartments
operator|=
name|departments
expr_stmt|;
block|}
specifier|public
name|void
name|addTodepartments
parameter_list|(
name|Department
name|department
parameter_list|)
block|{
if|if
condition|(
name|iDepartments
operator|==
literal|null
condition|)
name|iDepartments
operator|=
operator|new
name|HashSet
argument_list|<
name|Department
argument_list|>
argument_list|()
expr_stmt|;
name|iDepartments
operator|.
name|add
argument_list|(
name|department
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|DistributionType
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getUniqueId
argument_list|()
operator|==
literal|null
operator|||
operator|(
operator|(
name|DistributionType
operator|)
name|o
operator|)
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|DistributionType
operator|)
name|o
operator|)
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
return|return
name|getUniqueId
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DistributionType["
operator|+
name|getUniqueId
argument_list|()
operator|+
literal|" "
operator|+
name|getLabel
argument_list|()
operator|+
literal|"]"
return|;
block|}
specifier|public
name|String
name|toDebugString
parameter_list|()
block|{
return|return
literal|"DistributionType["
operator|+
literal|"\n	Abbreviation: "
operator|+
name|getAbbreviation
argument_list|()
operator|+
literal|"\n	AllowedPref: "
operator|+
name|getAllowedPref
argument_list|()
operator|+
literal|"\n	Descr: "
operator|+
name|getDescr
argument_list|()
operator|+
literal|"\n	ExamPref: "
operator|+
name|getExamPref
argument_list|()
operator|+
literal|"\n	InstructorPref: "
operator|+
name|getInstructorPref
argument_list|()
operator|+
literal|"\n	Label: "
operator|+
name|getLabel
argument_list|()
operator|+
literal|"\n	Reference: "
operator|+
name|getReference
argument_list|()
operator|+
literal|"\n	RequirementId: "
operator|+
name|getRequirementId
argument_list|()
operator|+
literal|"\n	SequencingRequired: "
operator|+
name|getSequencingRequired
argument_list|()
operator|+
literal|"\n	UniqueId: "
operator|+
name|getUniqueId
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

