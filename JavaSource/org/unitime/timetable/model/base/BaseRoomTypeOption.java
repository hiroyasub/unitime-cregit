begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomTypeOption
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|BaseRoomTypeOption
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|RoomType
name|iRoomType
decl_stmt|;
specifier|private
name|Department
name|iDepartment
decl_stmt|;
specifier|private
name|Integer
name|iStatus
decl_stmt|;
specifier|private
name|String
name|iMessage
decl_stmt|;
specifier|private
name|Integer
name|iBreakTime
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_STATUS
init|=
literal|"status"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_MESSAGE
init|=
literal|"message"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_BREAK_TIME
init|=
literal|"breakTime"
decl_stmt|;
specifier|public
name|BaseRoomTypeOption
parameter_list|()
block|{
name|initialize
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|initialize
parameter_list|()
block|{
block|}
specifier|public
name|RoomType
name|getRoomType
parameter_list|()
block|{
return|return
name|iRoomType
return|;
block|}
specifier|public
name|void
name|setRoomType
parameter_list|(
name|RoomType
name|roomType
parameter_list|)
block|{
name|iRoomType
operator|=
name|roomType
expr_stmt|;
block|}
specifier|public
name|Department
name|getDepartment
parameter_list|()
block|{
return|return
name|iDepartment
return|;
block|}
specifier|public
name|void
name|setDepartment
parameter_list|(
name|Department
name|department
parameter_list|)
block|{
name|iDepartment
operator|=
name|department
expr_stmt|;
block|}
specifier|public
name|Integer
name|getStatus
parameter_list|()
block|{
return|return
name|iStatus
return|;
block|}
specifier|public
name|void
name|setStatus
parameter_list|(
name|Integer
name|status
parameter_list|)
block|{
name|iStatus
operator|=
name|status
expr_stmt|;
block|}
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|iMessage
return|;
block|}
specifier|public
name|void
name|setMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|iMessage
operator|=
name|message
expr_stmt|;
block|}
specifier|public
name|Integer
name|getBreakTime
parameter_list|()
block|{
return|return
name|iBreakTime
return|;
block|}
specifier|public
name|void
name|setBreakTime
parameter_list|(
name|Integer
name|breakTime
parameter_list|)
block|{
name|iBreakTime
operator|=
name|breakTime
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|RoomTypeOption
operator|)
condition|)
return|return
literal|false
return|;
name|RoomTypeOption
name|roomTypeOption
init|=
operator|(
name|RoomTypeOption
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|getRoomType
argument_list|()
operator|==
literal|null
operator|||
name|roomTypeOption
operator|.
name|getRoomType
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|getRoomType
argument_list|()
operator|.
name|equals
argument_list|(
name|roomTypeOption
operator|.
name|getRoomType
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getDepartment
argument_list|()
operator|==
literal|null
operator|||
name|roomTypeOption
operator|.
name|getDepartment
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|getDepartment
argument_list|()
operator|.
name|equals
argument_list|(
name|roomTypeOption
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
name|getRoomType
argument_list|()
operator|==
literal|null
operator|||
name|getDepartment
argument_list|()
operator|==
literal|null
condition|)
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
return|return
name|getRoomType
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|^
name|getDepartment
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"RoomTypeOption["
operator|+
name|getRoomType
argument_list|()
operator|+
literal|", "
operator|+
name|getDepartment
argument_list|()
operator|+
literal|"]"
return|;
block|}
specifier|public
name|String
name|toDebugString
parameter_list|()
block|{
return|return
literal|"RoomTypeOption["
operator|+
literal|"\n	BreakTime: "
operator|+
name|getBreakTime
argument_list|()
operator|+
literal|"\n	Department: "
operator|+
name|getDepartment
argument_list|()
operator|+
literal|"\n	Message: "
operator|+
name|getMessage
argument_list|()
operator|+
literal|"\n	RoomType: "
operator|+
name|getRoomType
argument_list|()
operator|+
literal|"\n	Status: "
operator|+
name|getStatus
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

