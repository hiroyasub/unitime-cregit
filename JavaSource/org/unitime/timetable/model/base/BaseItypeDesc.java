begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2010 - 2014, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ItypeDesc
import|;
end_import

begin_comment
comment|/**  * Do not change this class. It has been automatically generated using ant create-model.  * @see org.unitime.commons.ant.CreateBaseModelFromXml  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|BaseItypeDesc
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Integer
name|iItype
decl_stmt|;
specifier|private
name|String
name|iAbbv
decl_stmt|;
specifier|private
name|String
name|iDesc
decl_stmt|;
specifier|private
name|String
name|iSis_ref
decl_stmt|;
specifier|private
name|Integer
name|iBasic
decl_stmt|;
specifier|private
name|Boolean
name|iOrganized
decl_stmt|;
specifier|private
name|ItypeDesc
name|iParent
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_ITYPE
init|=
literal|"itype"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_ABBV
init|=
literal|"abbv"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_DESCRIPTION
init|=
literal|"desc"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_SIS_REF
init|=
literal|"sis_ref"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_BASIC
init|=
literal|"basic"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_ORGANIZED
init|=
literal|"organized"
decl_stmt|;
specifier|public
name|BaseItypeDesc
parameter_list|()
block|{
name|initialize
argument_list|()
expr_stmt|;
block|}
specifier|public
name|BaseItypeDesc
parameter_list|(
name|Integer
name|itype
parameter_list|)
block|{
name|setItype
argument_list|(
name|itype
argument_list|)
expr_stmt|;
name|initialize
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|initialize
parameter_list|()
block|{
block|}
specifier|public
name|Integer
name|getItype
parameter_list|()
block|{
return|return
name|iItype
return|;
block|}
specifier|public
name|void
name|setItype
parameter_list|(
name|Integer
name|itype
parameter_list|)
block|{
name|iItype
operator|=
name|itype
expr_stmt|;
block|}
specifier|public
name|String
name|getAbbv
parameter_list|()
block|{
return|return
name|iAbbv
return|;
block|}
specifier|public
name|void
name|setAbbv
parameter_list|(
name|String
name|abbv
parameter_list|)
block|{
name|iAbbv
operator|=
name|abbv
expr_stmt|;
block|}
specifier|public
name|String
name|getDesc
parameter_list|()
block|{
return|return
name|iDesc
return|;
block|}
specifier|public
name|void
name|setDesc
parameter_list|(
name|String
name|desc
parameter_list|)
block|{
name|iDesc
operator|=
name|desc
expr_stmt|;
block|}
specifier|public
name|String
name|getSis_ref
parameter_list|()
block|{
return|return
name|iSis_ref
return|;
block|}
specifier|public
name|void
name|setSis_ref
parameter_list|(
name|String
name|sis_ref
parameter_list|)
block|{
name|iSis_ref
operator|=
name|sis_ref
expr_stmt|;
block|}
specifier|public
name|Integer
name|getBasic
parameter_list|()
block|{
return|return
name|iBasic
return|;
block|}
specifier|public
name|void
name|setBasic
parameter_list|(
name|Integer
name|basic
parameter_list|)
block|{
name|iBasic
operator|=
name|basic
expr_stmt|;
block|}
specifier|public
name|Boolean
name|isOrganized
parameter_list|()
block|{
return|return
name|iOrganized
return|;
block|}
specifier|public
name|Boolean
name|getOrganized
parameter_list|()
block|{
return|return
name|iOrganized
return|;
block|}
specifier|public
name|void
name|setOrganized
parameter_list|(
name|Boolean
name|organized
parameter_list|)
block|{
name|iOrganized
operator|=
name|organized
expr_stmt|;
block|}
specifier|public
name|ItypeDesc
name|getParent
parameter_list|()
block|{
return|return
name|iParent
return|;
block|}
specifier|public
name|void
name|setParent
parameter_list|(
name|ItypeDesc
name|parent
parameter_list|)
block|{
name|iParent
operator|=
name|parent
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|ItypeDesc
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getItype
argument_list|()
operator|==
literal|null
operator|||
operator|(
operator|(
name|ItypeDesc
operator|)
name|o
operator|)
operator|.
name|getItype
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|getItype
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ItypeDesc
operator|)
name|o
operator|)
operator|.
name|getItype
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
name|getItype
argument_list|()
operator|==
literal|null
condition|)
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
return|return
name|getItype
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ItypeDesc["
operator|+
name|getItype
argument_list|()
operator|+
literal|"]"
return|;
block|}
specifier|public
name|String
name|toDebugString
parameter_list|()
block|{
return|return
literal|"ItypeDesc["
operator|+
literal|"\n	Abbv: "
operator|+
name|getAbbv
argument_list|()
operator|+
literal|"\n	Basic: "
operator|+
name|getBasic
argument_list|()
operator|+
literal|"\n	Desc: "
operator|+
name|getDesc
argument_list|()
operator|+
literal|"\n	Itype: "
operator|+
name|getItype
argument_list|()
operator|+
literal|"\n	Organized: "
operator|+
name|getOrganized
argument_list|()
operator|+
literal|"\n	Parent: "
operator|+
name|getParent
argument_list|()
operator|+
literal|"\n	Sis_ref: "
operator|+
name|getSis_ref
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

