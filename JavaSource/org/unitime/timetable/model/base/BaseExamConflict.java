begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_comment
comment|/**  * Do not change this class. It has been automatically generated using ant create-model.  * @see org.unitime.commons.ant.CreateBaseModelFromXml  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|BaseExamConflict
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Long
name|iUniqueId
decl_stmt|;
specifier|private
name|Integer
name|iConflictType
decl_stmt|;
specifier|private
name|Double
name|iDistance
decl_stmt|;
specifier|private
name|Integer
name|iNrStudents
decl_stmt|;
specifier|private
name|Integer
name|iNrInstructors
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Exam
argument_list|>
name|iExams
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Student
argument_list|>
name|iStudents
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|iInstructors
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_UNIQUEID
init|=
literal|"uniqueId"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_CONFLICT_TYPE
init|=
literal|"conflictType"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_DISTANCE
init|=
literal|"distance"
decl_stmt|;
specifier|public
name|BaseExamConflict
parameter_list|()
block|{
name|initialize
argument_list|()
expr_stmt|;
block|}
specifier|public
name|BaseExamConflict
parameter_list|(
name|Long
name|uniqueId
parameter_list|)
block|{
name|setUniqueId
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
name|initialize
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|initialize
parameter_list|()
block|{
block|}
specifier|public
name|Long
name|getUniqueId
parameter_list|()
block|{
return|return
name|iUniqueId
return|;
block|}
specifier|public
name|void
name|setUniqueId
parameter_list|(
name|Long
name|uniqueId
parameter_list|)
block|{
name|iUniqueId
operator|=
name|uniqueId
expr_stmt|;
block|}
specifier|public
name|Integer
name|getConflictType
parameter_list|()
block|{
return|return
name|iConflictType
return|;
block|}
specifier|public
name|void
name|setConflictType
parameter_list|(
name|Integer
name|conflictType
parameter_list|)
block|{
name|iConflictType
operator|=
name|conflictType
expr_stmt|;
block|}
specifier|public
name|Double
name|getDistance
parameter_list|()
block|{
return|return
name|iDistance
return|;
block|}
specifier|public
name|void
name|setDistance
parameter_list|(
name|Double
name|distance
parameter_list|)
block|{
name|iDistance
operator|=
name|distance
expr_stmt|;
block|}
specifier|public
name|Integer
name|getNrStudents
parameter_list|()
block|{
return|return
name|iNrStudents
return|;
block|}
specifier|public
name|void
name|setNrStudents
parameter_list|(
name|Integer
name|nrStudents
parameter_list|)
block|{
name|iNrStudents
operator|=
name|nrStudents
expr_stmt|;
block|}
specifier|public
name|Integer
name|getNrInstructors
parameter_list|()
block|{
return|return
name|iNrInstructors
return|;
block|}
specifier|public
name|void
name|setNrInstructors
parameter_list|(
name|Integer
name|nrInstructors
parameter_list|)
block|{
name|iNrInstructors
operator|=
name|nrInstructors
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|Exam
argument_list|>
name|getExams
parameter_list|()
block|{
return|return
name|iExams
return|;
block|}
specifier|public
name|void
name|setExams
parameter_list|(
name|Set
argument_list|<
name|Exam
argument_list|>
name|exams
parameter_list|)
block|{
name|iExams
operator|=
name|exams
expr_stmt|;
block|}
specifier|public
name|void
name|addToexams
parameter_list|(
name|Exam
name|exam
parameter_list|)
block|{
if|if
condition|(
name|iExams
operator|==
literal|null
condition|)
name|iExams
operator|=
operator|new
name|HashSet
argument_list|<
name|Exam
argument_list|>
argument_list|()
expr_stmt|;
name|iExams
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|Student
argument_list|>
name|getStudents
parameter_list|()
block|{
return|return
name|iStudents
return|;
block|}
specifier|public
name|void
name|setStudents
parameter_list|(
name|Set
argument_list|<
name|Student
argument_list|>
name|students
parameter_list|)
block|{
name|iStudents
operator|=
name|students
expr_stmt|;
block|}
specifier|public
name|void
name|addTostudents
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
if|if
condition|(
name|iStudents
operator|==
literal|null
condition|)
name|iStudents
operator|=
operator|new
name|HashSet
argument_list|<
name|Student
argument_list|>
argument_list|()
expr_stmt|;
name|iStudents
operator|.
name|add
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|getInstructors
parameter_list|()
block|{
return|return
name|iInstructors
return|;
block|}
specifier|public
name|void
name|setInstructors
parameter_list|(
name|Set
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|instructors
parameter_list|)
block|{
name|iInstructors
operator|=
name|instructors
expr_stmt|;
block|}
specifier|public
name|void
name|addToinstructors
parameter_list|(
name|DepartmentalInstructor
name|departmentalInstructor
parameter_list|)
block|{
if|if
condition|(
name|iInstructors
operator|==
literal|null
condition|)
name|iInstructors
operator|=
operator|new
name|HashSet
argument_list|<
name|DepartmentalInstructor
argument_list|>
argument_list|()
expr_stmt|;
name|iInstructors
operator|.
name|add
argument_list|(
name|departmentalInstructor
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|ExamConflict
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getUniqueId
argument_list|()
operator|==
literal|null
operator|||
operator|(
operator|(
name|ExamConflict
operator|)
name|o
operator|)
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ExamConflict
operator|)
name|o
operator|)
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
return|return
name|getUniqueId
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ExamConflict["
operator|+
name|getUniqueId
argument_list|()
operator|+
literal|"]"
return|;
block|}
specifier|public
name|String
name|toDebugString
parameter_list|()
block|{
return|return
literal|"ExamConflict["
operator|+
literal|"\n	ConflictType: "
operator|+
name|getConflictType
argument_list|()
operator|+
literal|"\n	Distance: "
operator|+
name|getDistance
argument_list|()
operator|+
literal|"\n	UniqueId: "
operator|+
name|getUniqueId
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

