begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Roles
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|BaseRoles
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Long
name|iRoleId
decl_stmt|;
specifier|private
name|String
name|iReference
decl_stmt|;
specifier|private
name|String
name|iAbbv
decl_stmt|;
specifier|private
name|Boolean
name|iManager
decl_stmt|;
specifier|private
name|Boolean
name|iEnabled
decl_stmt|;
specifier|private
name|Boolean
name|iInstructor
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|iRights
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_ROLE_ID
init|=
literal|"roleId"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_REFERENCE
init|=
literal|"reference"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_ABBV
init|=
literal|"abbv"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_MANAGER
init|=
literal|"manager"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_ENABLED
init|=
literal|"enabled"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_INSTRUCTOR
init|=
literal|"instructor"
decl_stmt|;
specifier|public
name|BaseRoles
parameter_list|()
block|{
name|initialize
argument_list|()
expr_stmt|;
block|}
specifier|public
name|BaseRoles
parameter_list|(
name|Long
name|roleId
parameter_list|)
block|{
name|setRoleId
argument_list|(
name|roleId
argument_list|)
expr_stmt|;
name|initialize
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|initialize
parameter_list|()
block|{
block|}
specifier|public
name|Long
name|getRoleId
parameter_list|()
block|{
return|return
name|iRoleId
return|;
block|}
specifier|public
name|void
name|setRoleId
parameter_list|(
name|Long
name|roleId
parameter_list|)
block|{
name|iRoleId
operator|=
name|roleId
expr_stmt|;
block|}
specifier|public
name|String
name|getReference
parameter_list|()
block|{
return|return
name|iReference
return|;
block|}
specifier|public
name|void
name|setReference
parameter_list|(
name|String
name|reference
parameter_list|)
block|{
name|iReference
operator|=
name|reference
expr_stmt|;
block|}
specifier|public
name|String
name|getAbbv
parameter_list|()
block|{
return|return
name|iAbbv
return|;
block|}
specifier|public
name|void
name|setAbbv
parameter_list|(
name|String
name|abbv
parameter_list|)
block|{
name|iAbbv
operator|=
name|abbv
expr_stmt|;
block|}
specifier|public
name|Boolean
name|isManager
parameter_list|()
block|{
return|return
name|iManager
return|;
block|}
specifier|public
name|Boolean
name|getManager
parameter_list|()
block|{
return|return
name|iManager
return|;
block|}
specifier|public
name|void
name|setManager
parameter_list|(
name|Boolean
name|manager
parameter_list|)
block|{
name|iManager
operator|=
name|manager
expr_stmt|;
block|}
specifier|public
name|Boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|iEnabled
return|;
block|}
specifier|public
name|Boolean
name|getEnabled
parameter_list|()
block|{
return|return
name|iEnabled
return|;
block|}
specifier|public
name|void
name|setEnabled
parameter_list|(
name|Boolean
name|enabled
parameter_list|)
block|{
name|iEnabled
operator|=
name|enabled
expr_stmt|;
block|}
specifier|public
name|Boolean
name|isInstructor
parameter_list|()
block|{
return|return
name|iInstructor
return|;
block|}
specifier|public
name|Boolean
name|getInstructor
parameter_list|()
block|{
return|return
name|iInstructor
return|;
block|}
specifier|public
name|void
name|setInstructor
parameter_list|(
name|Boolean
name|instructor
parameter_list|)
block|{
name|iInstructor
operator|=
name|instructor
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getRights
parameter_list|()
block|{
return|return
name|iRights
return|;
block|}
specifier|public
name|void
name|setRights
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|rights
parameter_list|)
block|{
name|iRights
operator|=
name|rights
expr_stmt|;
block|}
specifier|public
name|void
name|addTorights
parameter_list|(
name|String
name|string
parameter_list|)
block|{
if|if
condition|(
name|iRights
operator|==
literal|null
condition|)
name|iRights
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|iRights
operator|.
name|add
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|Roles
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getRoleId
argument_list|()
operator|==
literal|null
operator|||
operator|(
operator|(
name|Roles
operator|)
name|o
operator|)
operator|.
name|getRoleId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|getRoleId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Roles
operator|)
name|o
operator|)
operator|.
name|getRoleId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
name|getRoleId
argument_list|()
operator|==
literal|null
condition|)
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
return|return
name|getRoleId
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Roles["
operator|+
name|getRoleId
argument_list|()
operator|+
literal|"]"
return|;
block|}
specifier|public
name|String
name|toDebugString
parameter_list|()
block|{
return|return
literal|"Roles["
operator|+
literal|"\n	Abbv: "
operator|+
name|getAbbv
argument_list|()
operator|+
literal|"\n	Enabled: "
operator|+
name|getEnabled
argument_list|()
operator|+
literal|"\n	Instructor: "
operator|+
name|getInstructor
argument_list|()
operator|+
literal|"\n	Manager: "
operator|+
name|getManager
argument_list|()
operator|+
literal|"\n	Reference: "
operator|+
name|getReference
argument_list|()
operator|+
literal|"\n	RoleId: "
operator|+
name|getRoleId
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

