begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ItypeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_comment
comment|/**  * Do not change this class. It has been automatically generated using ant create-model.  * @see org.unitime.commons.ant.CreateBaseModelFromXml  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|BaseSchedulingSubpart
extends|extends
name|PreferenceGroup
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Integer
name|iMinutesPerWk
decl_stmt|;
specifier|private
name|Boolean
name|iAutoSpreadInTime
decl_stmt|;
specifier|private
name|Boolean
name|iStudentAllowOverlap
decl_stmt|;
specifier|private
name|String
name|iSchedulingSubpartSuffixCache
decl_stmt|;
specifier|private
name|String
name|iCourseName
decl_stmt|;
specifier|private
name|Integer
name|iLimit
decl_stmt|;
specifier|private
name|Long
name|iUniqueIdRolledForwardFrom
decl_stmt|;
specifier|private
name|Session
name|iSession
decl_stmt|;
specifier|private
name|ItypeDesc
name|iItype
decl_stmt|;
specifier|private
name|SchedulingSubpart
name|iParentSubpart
decl_stmt|;
specifier|private
name|InstrOfferingConfig
name|iInstrOfferingConfig
decl_stmt|;
specifier|private
name|DatePattern
name|iDatePattern
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|SchedulingSubpart
argument_list|>
name|iChildSubparts
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Class_
argument_list|>
name|iClasses
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|CourseCreditUnitConfig
argument_list|>
name|iCreditConfigs
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_MIN_PER_WK
init|=
literal|"minutesPerWk"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_AUTO_TIME_SPREAD
init|=
literal|"autoSpreadInTime"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_STUDENT_ALLOW_OVERLAP
init|=
literal|"studentAllowOverlap"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_SUBPART_SUFFIX
init|=
literal|"schedulingSubpartSuffixCache"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PROP_UID_ROLLED_FWD_FROM
init|=
literal|"uniqueIdRolledForwardFrom"
decl_stmt|;
specifier|public
name|BaseSchedulingSubpart
parameter_list|()
block|{
name|initialize
argument_list|()
expr_stmt|;
block|}
specifier|public
name|BaseSchedulingSubpart
parameter_list|(
name|Long
name|uniqueId
parameter_list|)
block|{
name|setUniqueId
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
name|initialize
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|initialize
parameter_list|()
block|{
block|}
specifier|public
name|Integer
name|getMinutesPerWk
parameter_list|()
block|{
return|return
name|iMinutesPerWk
return|;
block|}
specifier|public
name|void
name|setMinutesPerWk
parameter_list|(
name|Integer
name|minutesPerWk
parameter_list|)
block|{
name|iMinutesPerWk
operator|=
name|minutesPerWk
expr_stmt|;
block|}
specifier|public
name|Boolean
name|isAutoSpreadInTime
parameter_list|()
block|{
return|return
name|iAutoSpreadInTime
return|;
block|}
specifier|public
name|Boolean
name|getAutoSpreadInTime
parameter_list|()
block|{
return|return
name|iAutoSpreadInTime
return|;
block|}
specifier|public
name|void
name|setAutoSpreadInTime
parameter_list|(
name|Boolean
name|autoSpreadInTime
parameter_list|)
block|{
name|iAutoSpreadInTime
operator|=
name|autoSpreadInTime
expr_stmt|;
block|}
specifier|public
name|Boolean
name|isStudentAllowOverlap
parameter_list|()
block|{
return|return
name|iStudentAllowOverlap
return|;
block|}
specifier|public
name|Boolean
name|getStudentAllowOverlap
parameter_list|()
block|{
return|return
name|iStudentAllowOverlap
return|;
block|}
specifier|public
name|void
name|setStudentAllowOverlap
parameter_list|(
name|Boolean
name|studentAllowOverlap
parameter_list|)
block|{
name|iStudentAllowOverlap
operator|=
name|studentAllowOverlap
expr_stmt|;
block|}
specifier|public
name|String
name|getSchedulingSubpartSuffixCache
parameter_list|()
block|{
return|return
name|iSchedulingSubpartSuffixCache
return|;
block|}
specifier|public
name|void
name|setSchedulingSubpartSuffixCache
parameter_list|(
name|String
name|schedulingSubpartSuffixCache
parameter_list|)
block|{
name|iSchedulingSubpartSuffixCache
operator|=
name|schedulingSubpartSuffixCache
expr_stmt|;
block|}
specifier|public
name|String
name|getCourseName
parameter_list|()
block|{
return|return
name|iCourseName
return|;
block|}
specifier|public
name|void
name|setCourseName
parameter_list|(
name|String
name|courseName
parameter_list|)
block|{
name|iCourseName
operator|=
name|courseName
expr_stmt|;
block|}
specifier|public
name|Integer
name|getLimit
parameter_list|()
block|{
return|return
name|iLimit
return|;
block|}
specifier|public
name|void
name|setLimit
parameter_list|(
name|Integer
name|limit
parameter_list|)
block|{
name|iLimit
operator|=
name|limit
expr_stmt|;
block|}
specifier|public
name|Long
name|getUniqueIdRolledForwardFrom
parameter_list|()
block|{
return|return
name|iUniqueIdRolledForwardFrom
return|;
block|}
specifier|public
name|void
name|setUniqueIdRolledForwardFrom
parameter_list|(
name|Long
name|uniqueIdRolledForwardFrom
parameter_list|)
block|{
name|iUniqueIdRolledForwardFrom
operator|=
name|uniqueIdRolledForwardFrom
expr_stmt|;
block|}
specifier|public
name|Session
name|getSession
parameter_list|()
block|{
return|return
name|iSession
return|;
block|}
specifier|public
name|void
name|setSession
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|iSession
operator|=
name|session
expr_stmt|;
block|}
specifier|public
name|ItypeDesc
name|getItype
parameter_list|()
block|{
return|return
name|iItype
return|;
block|}
specifier|public
name|void
name|setItype
parameter_list|(
name|ItypeDesc
name|itype
parameter_list|)
block|{
name|iItype
operator|=
name|itype
expr_stmt|;
block|}
specifier|public
name|SchedulingSubpart
name|getParentSubpart
parameter_list|()
block|{
return|return
name|iParentSubpart
return|;
block|}
specifier|public
name|void
name|setParentSubpart
parameter_list|(
name|SchedulingSubpart
name|parentSubpart
parameter_list|)
block|{
name|iParentSubpart
operator|=
name|parentSubpart
expr_stmt|;
block|}
specifier|public
name|InstrOfferingConfig
name|getInstrOfferingConfig
parameter_list|()
block|{
return|return
name|iInstrOfferingConfig
return|;
block|}
specifier|public
name|void
name|setInstrOfferingConfig
parameter_list|(
name|InstrOfferingConfig
name|instrOfferingConfig
parameter_list|)
block|{
name|iInstrOfferingConfig
operator|=
name|instrOfferingConfig
expr_stmt|;
block|}
specifier|public
name|DatePattern
name|getDatePattern
parameter_list|()
block|{
return|return
name|iDatePattern
return|;
block|}
specifier|public
name|void
name|setDatePattern
parameter_list|(
name|DatePattern
name|datePattern
parameter_list|)
block|{
name|iDatePattern
operator|=
name|datePattern
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|SchedulingSubpart
argument_list|>
name|getChildSubparts
parameter_list|()
block|{
return|return
name|iChildSubparts
return|;
block|}
specifier|public
name|void
name|setChildSubparts
parameter_list|(
name|Set
argument_list|<
name|SchedulingSubpart
argument_list|>
name|childSubparts
parameter_list|)
block|{
name|iChildSubparts
operator|=
name|childSubparts
expr_stmt|;
block|}
specifier|public
name|void
name|addTochildSubparts
parameter_list|(
name|SchedulingSubpart
name|schedulingSubpart
parameter_list|)
block|{
if|if
condition|(
name|iChildSubparts
operator|==
literal|null
condition|)
name|iChildSubparts
operator|=
operator|new
name|HashSet
argument_list|<
name|SchedulingSubpart
argument_list|>
argument_list|()
expr_stmt|;
name|iChildSubparts
operator|.
name|add
argument_list|(
name|schedulingSubpart
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|Class_
argument_list|>
name|getClasses
parameter_list|()
block|{
return|return
name|iClasses
return|;
block|}
specifier|public
name|void
name|setClasses
parameter_list|(
name|Set
argument_list|<
name|Class_
argument_list|>
name|classes
parameter_list|)
block|{
name|iClasses
operator|=
name|classes
expr_stmt|;
block|}
specifier|public
name|void
name|addToclasses
parameter_list|(
name|Class_
name|class_
parameter_list|)
block|{
if|if
condition|(
name|iClasses
operator|==
literal|null
condition|)
name|iClasses
operator|=
operator|new
name|HashSet
argument_list|<
name|Class_
argument_list|>
argument_list|()
expr_stmt|;
name|iClasses
operator|.
name|add
argument_list|(
name|class_
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|CourseCreditUnitConfig
argument_list|>
name|getCreditConfigs
parameter_list|()
block|{
return|return
name|iCreditConfigs
return|;
block|}
specifier|public
name|void
name|setCreditConfigs
parameter_list|(
name|Set
argument_list|<
name|CourseCreditUnitConfig
argument_list|>
name|creditConfigs
parameter_list|)
block|{
name|iCreditConfigs
operator|=
name|creditConfigs
expr_stmt|;
block|}
specifier|public
name|void
name|addTocreditConfigs
parameter_list|(
name|CourseCreditUnitConfig
name|courseCreditUnitConfig
parameter_list|)
block|{
if|if
condition|(
name|iCreditConfigs
operator|==
literal|null
condition|)
name|iCreditConfigs
operator|=
operator|new
name|HashSet
argument_list|<
name|CourseCreditUnitConfig
argument_list|>
argument_list|()
expr_stmt|;
name|iCreditConfigs
operator|.
name|add
argument_list|(
name|courseCreditUnitConfig
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|SchedulingSubpart
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getUniqueId
argument_list|()
operator|==
literal|null
operator|||
operator|(
operator|(
name|SchedulingSubpart
operator|)
name|o
operator|)
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|SchedulingSubpart
operator|)
name|o
operator|)
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
return|return
name|getUniqueId
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SchedulingSubpart["
operator|+
name|getUniqueId
argument_list|()
operator|+
literal|"]"
return|;
block|}
specifier|public
name|String
name|toDebugString
parameter_list|()
block|{
return|return
literal|"SchedulingSubpart["
operator|+
literal|"\n	AutoSpreadInTime: "
operator|+
name|getAutoSpreadInTime
argument_list|()
operator|+
literal|"\n	DatePattern: "
operator|+
name|getDatePattern
argument_list|()
operator|+
literal|"\n	InstrOfferingConfig: "
operator|+
name|getInstrOfferingConfig
argument_list|()
operator|+
literal|"\n	Itype: "
operator|+
name|getItype
argument_list|()
operator|+
literal|"\n	MinutesPerWk: "
operator|+
name|getMinutesPerWk
argument_list|()
operator|+
literal|"\n	ParentSubpart: "
operator|+
name|getParentSubpart
argument_list|()
operator|+
literal|"\n	SchedulingSubpartSuffixCache: "
operator|+
name|getSchedulingSubpartSuffixCache
argument_list|()
operator|+
literal|"\n	StudentAllowOverlap: "
operator|+
name|getStudentAllowOverlap
argument_list|()
operator|+
literal|"\n	UniqueId: "
operator|+
name|getUniqueId
argument_list|()
operator|+
literal|"\n	UniqueIdRolledForwardFrom: "
operator|+
name|getUniqueIdRolledForwardFrom
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

