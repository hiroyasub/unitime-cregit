begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseCourseEvent
import|;
end_import

begin_class
specifier|public
class|class
name|CourseEvent
extends|extends
name|BaseCourseEvent
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|CourseEvent
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|CourseEvent
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
specifier|public
name|Set
argument_list|<
name|Student
argument_list|>
name|getStudents
parameter_list|()
block|{
name|HashSet
argument_list|<
name|Student
argument_list|>
name|students
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|isReqAttendance
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|isReqAttendance
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
return|return
name|students
return|;
for|for
control|(
name|Iterator
name|i
init|=
name|getRelatedCourses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|students
operator|.
name|addAll
argument_list|(
operator|(
operator|(
name|RelatedCourseInfo
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getStudents
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|students
return|;
block|}
specifier|public
name|Set
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|getInstructors
parameter_list|()
block|{
name|HashSet
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|instructors
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|isReqAttendance
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|isReqAttendance
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
return|return
name|instructors
return|;
for|for
control|(
name|Iterator
name|i
init|=
name|getRelatedCourses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|instructors
operator|.
name|addAll
argument_list|(
operator|(
operator|(
name|RelatedCourseInfo
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getInstructors
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|instructors
return|;
block|}
specifier|public
name|int
name|getEventType
parameter_list|()
block|{
return|return
name|sEventTypeCourse
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|Long
argument_list|>
name|getStudentIds
parameter_list|()
block|{
name|HashSet
argument_list|<
name|Long
argument_list|>
name|studentIds
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getRelatedCourses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|studentIds
operator|.
name|addAll
argument_list|(
operator|(
operator|(
name|RelatedCourseInfo
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getStudentIds
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|studentIds
return|;
block|}
block|}
end_class

end_unit

