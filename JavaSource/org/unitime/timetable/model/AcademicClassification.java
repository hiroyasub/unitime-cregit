begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|HibernateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseAcademicClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|AcademicClassificationDAO
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller, Stephanie Schluttenhofer  */
end_comment

begin_class
specifier|public
class|class
name|AcademicClassification
extends|extends
name|BaseAcademicClassification
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
name|HashMap
name|academicClassifications
init|=
operator|new
name|HashMap
argument_list|(
literal|40
argument_list|)
decl_stmt|;
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|AcademicClassification
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|AcademicClassification
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
comment|/** Request Attribute name for Academic Classification **/
specifier|public
specifier|static
specifier|final
name|String
name|ACAD_CLASS_REQUEST_ATTR
init|=
literal|"academicClassifications"
decl_stmt|;
comment|/** 	 * Retrieves all academic classifications in the database for the academic session 	 * ordered by name 	 * @param sessionId academic session 	 * @return Vector of AcademicClassification objects 	 */
specifier|public
specifier|static
name|List
name|getAcademicClassificationList
parameter_list|(
name|Long
name|sessionId
parameter_list|)
throws|throws
name|HibernateException
block|{
name|AcademicClassificationDAO
name|adao
init|=
operator|new
name|AcademicClassificationDAO
argument_list|()
decl_stmt|;
name|Session
name|hibSession
init|=
name|adao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|List
name|l
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from AcademicClassification as c where c.session.uniqueId=:sessionId "
operator|+
literal|"order by c.name"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
return|return
name|l
return|;
block|}
comment|/**      * Creates label of the format Name - Code      * @return      */
specifier|public
name|String
name|getLabelNameCode
parameter_list|()
block|{
return|return
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|" - "
operator|+
name|this
operator|.
name|getCode
argument_list|()
return|;
block|}
comment|/**      * Creates label of the format Code - Name      * @return      */
specifier|public
name|String
name|getLabelCodeName
parameter_list|()
block|{
return|return
name|this
operator|.
name|getCode
argument_list|()
operator|+
literal|" - "
operator|+
name|this
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/** 	 * Load Academic Classifications 	 */
specifier|public
specifier|static
name|void
name|loadAcademicClassifications
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|List
name|acadClasses
init|=
name|getAcademicClassificationList
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|acadClasses
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|AcademicClassification
name|acadClass
init|=
operator|(
name|AcademicClassification
operator|)
name|acadClasses
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|code
init|=
name|acadClass
operator|.
name|getCode
argument_list|()
decl_stmt|;
name|academicClassifications
operator|.
name|put
argument_list|(
name|code
argument_list|,
name|acadClass
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Get the Academic Classification 	 * @param academicClass 	 */
specifier|public
specifier|static
name|AcademicClassification
name|getAcademicClassification
parameter_list|(
name|String
name|academicClass
parameter_list|)
block|{
return|return
operator|(
name|AcademicClassification
operator|)
name|academicClassifications
operator|.
name|get
argument_list|(
name|academicClass
argument_list|)
return|;
block|}
specifier|public
name|Long
name|getSessionId
parameter_list|()
block|{
if|if
condition|(
name|getSession
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
block|}
specifier|public
specifier|static
name|AcademicClassification
name|findByCode
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|String
name|code
parameter_list|)
block|{
return|return
operator|(
name|findByCode
argument_list|(
operator|new
name|AcademicClassificationDAO
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|,
name|sessionId
argument_list|,
name|code
argument_list|)
operator|)
return|;
block|}
specifier|public
specifier|static
name|AcademicClassification
name|findByCode
parameter_list|(
name|Session
name|hibSession
parameter_list|,
name|Long
name|sessionId
parameter_list|,
name|String
name|code
parameter_list|)
block|{
return|return
operator|(
name|AcademicClassification
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select a from AcademicClassification a where "
operator|+
literal|"a.session.uniqueId=:sessionId and "
operator|+
literal|"a.code=:code"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"code"
argument_list|,
name|code
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|AcademicClassification
name|findByExternalId
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|String
name|externalId
parameter_list|)
block|{
return|return
operator|(
name|findByExternalId
argument_list|(
operator|new
name|AcademicClassificationDAO
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|,
name|sessionId
argument_list|,
name|externalId
argument_list|)
operator|)
return|;
block|}
specifier|public
specifier|static
name|AcademicClassification
name|findByExternalId
parameter_list|(
name|Session
name|hibSession
parameter_list|,
name|Long
name|sessionId
parameter_list|,
name|String
name|externalId
parameter_list|)
block|{
return|return
operator|(
name|AcademicClassification
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select a from AcademicClassification a where "
operator|+
literal|"a.session.uniqueId=:sessionId and "
operator|+
literal|"a.externalUniqueId=:externalUniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalUniqueId"
argument_list|,
name|externalId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|AcademicClassification
name|c
init|=
operator|new
name|AcademicClassification
argument_list|()
decl_stmt|;
name|c
operator|.
name|setExternalUniqueId
argument_list|(
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setCode
argument_list|(
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setName
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
block|}
end_class

end_unit

