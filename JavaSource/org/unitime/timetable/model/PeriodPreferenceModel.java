begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|RequiredTimeTableModel
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller, Stephanie Schluttenhofer  */
end_comment

begin_class
specifier|public
class|class
name|PeriodPreferenceModel
implements|implements
name|RequiredTimeTableModel
block|{
specifier|protected
specifier|static
name|GwtConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|TreeSet
name|iDates
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
specifier|private
name|TreeSet
name|iStarts
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
name|iPreferences
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|private
name|TreeSet
name|iPeriods
init|=
literal|null
decl_stmt|;
specifier|private
name|Date
name|iFirstDate
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iAllowHard
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|iAllowRequired
init|=
literal|true
decl_stmt|;
specifier|private
name|ExamPeriod
name|iPeriod
init|=
literal|null
decl_stmt|;
specifier|private
name|Long
name|iExamType
init|=
literal|null
decl_stmt|;
specifier|private
name|SimpleDateFormat
index|[]
name|iDF
init|=
literal|null
decl_stmt|;
specifier|public
name|PeriodPreferenceModel
parameter_list|(
name|Session
name|session
parameter_list|,
name|Long
name|examType
parameter_list|)
block|{
name|this
argument_list|(
name|session
argument_list|,
operator|(
name|ExamPeriod
operator|)
literal|null
argument_list|,
name|examType
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PeriodPreferenceModel
parameter_list|(
name|Session
name|session
parameter_list|,
name|ExamAssignment
name|assignment
parameter_list|,
name|Long
name|examType
parameter_list|)
block|{
name|this
argument_list|(
name|session
argument_list|,
name|assignment
operator|==
literal|null
condition|?
literal|null
else|:
name|assignment
operator|.
name|getPeriod
argument_list|()
argument_list|,
name|examType
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PeriodPreferenceModel
parameter_list|(
name|Session
name|session
parameter_list|,
name|ExamPeriod
name|assignedPeriod
parameter_list|,
name|Long
name|examType
parameter_list|)
block|{
name|iDF
operator|=
operator|new
name|SimpleDateFormat
index|[]
block|{
operator|new
name|SimpleDateFormat
argument_list|(
name|CONSTANTS
operator|.
name|examPeriodPreferenceDateFormat
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|Localization
operator|.
name|getJavaLocale
argument_list|()
argument_list|)
block|,
operator|new
name|SimpleDateFormat
argument_list|(
name|CONSTANTS
operator|.
name|examPeriodPreferenceDateFormat
argument_list|()
index|[
literal|1
index|]
argument_list|,
name|Localization
operator|.
name|getJavaLocale
argument_list|()
argument_list|)
block|}
expr_stmt|;
name|iPeriod
operator|=
name|assignedPeriod
expr_stmt|;
name|iFirstDate
operator|=
name|session
operator|.
name|getExamBeginDate
argument_list|()
expr_stmt|;
name|iPeriods
operator|=
name|ExamPeriod
operator|.
name|findAll
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|examType
argument_list|)
expr_stmt|;
name|iExamType
operator|=
name|examType
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iPeriods
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|iPreferences
operator|.
name|put
argument_list|(
name|period
argument_list|,
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
expr_stmt|;
name|iStarts
operator|.
name|add
argument_list|(
name|period
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|iDates
operator|.
name|add
argument_list|(
name|period
operator|.
name|getDateOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|load
parameter_list|(
name|PreferenceGroup
name|pg
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|pg
operator|.
name|getPreferences
argument_list|(
name|ExamPeriodPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriodPref
name|pref
init|=
operator|(
name|ExamPeriodPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|iPreferences
operator|.
name|put
argument_list|(
name|pref
operator|.
name|getExamPeriod
argument_list|()
argument_list|,
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|save
parameter_list|(
name|Set
name|preferences
parameter_list|,
name|PreferenceGroup
name|pg
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|iPreferences
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|pref
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
block|{
name|ExamPeriodPref
name|p
init|=
operator|new
name|ExamPeriodPref
argument_list|()
decl_stmt|;
name|p
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|p
operator|.
name|setExamPeriod
argument_list|(
name|period
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|pref
argument_list|)
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|load
parameter_list|(
name|Location
name|location
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|location
operator|.
name|getExamPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamLocationPref
name|pref
init|=
operator|(
name|ExamLocationPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|iExamType
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getExamPeriod
argument_list|()
operator|.
name|getExamType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|iPreferences
operator|.
name|put
argument_list|(
name|pref
operator|.
name|getExamPeriod
argument_list|()
argument_list|,
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|save
parameter_list|(
name|Location
name|location
parameter_list|)
block|{
name|location
operator|.
name|clearExamPreferences
argument_list|(
name|iExamType
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iPreferences
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|pref
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
block|{
name|location
operator|.
name|addExamPreference
argument_list|(
name|period
argument_list|,
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|pref
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|setAllowHard
parameter_list|(
name|boolean
name|allowHard
parameter_list|)
block|{
name|iAllowHard
operator|=
name|allowHard
expr_stmt|;
block|}
specifier|public
name|void
name|setAllowRequired
parameter_list|(
name|boolean
name|allowReq
parameter_list|)
block|{
name|iAllowRequired
operator|=
name|allowReq
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|int
name|getNrDays
parameter_list|()
block|{
return|return
name|iDates
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|int
name|getNrTimes
parameter_list|()
block|{
return|return
name|iStarts
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|String
name|getStartTime
parameter_list|(
name|int
name|time
parameter_list|)
block|{
name|Integer
name|slot
init|=
operator|(
name|Integer
operator|)
name|iStarts
operator|.
name|toArray
argument_list|()
index|[
name|time
index|]
decl_stmt|;
name|int
name|start
init|=
name|slot
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
decl_stmt|;
return|return
name|Constants
operator|.
name|toTime
argument_list|(
name|start
argument_list|)
return|;
block|}
specifier|public
name|String
name|getEndTime
parameter_list|(
name|int
name|time
parameter_list|)
block|{
name|Integer
name|slot
init|=
operator|(
name|Integer
operator|)
name|iStarts
operator|.
name|toArray
argument_list|()
index|[
name|time
index|]
decl_stmt|;
name|ExamPeriod
name|period
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|TreeSet
argument_list|(
name|iPreferences
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|p
init|=
operator|(
name|ExamPeriod
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getStartSlot
argument_list|()
operator|.
name|equals
argument_list|(
name|slot
argument_list|)
condition|)
block|{
name|period
operator|=
name|p
expr_stmt|;
break|break;
block|}
block|}
name|int
name|end
init|=
operator|(
name|slot
operator|+
name|period
operator|.
name|getLength
argument_list|()
operator|)
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
decl_stmt|;
return|return
name|Constants
operator|.
name|toTime
argument_list|(
name|end
argument_list|)
return|;
block|}
specifier|public
name|String
name|getDayHeader
parameter_list|(
name|int
name|day
parameter_list|)
block|{
name|Integer
name|dateOffset
init|=
operator|(
name|Integer
operator|)
name|iDates
operator|.
name|toArray
argument_list|()
index|[
name|day
index|]
decl_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|iFirstDate
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|dateOffset
argument_list|)
expr_stmt|;
name|Date
name|date
init|=
operator|new
name|Date
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|iDF
index|[
literal|0
index|]
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"<br>"
operator|+
name|iDF
index|[
literal|1
index|]
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
specifier|public
name|String
name|getFileName
parameter_list|()
block|{
return|return
literal|"PPx"
operator|+
name|getPreferences
argument_list|()
operator|+
operator|(
name|iPeriod
operator|==
literal|null
condition|?
literal|""
else|:
literal|"_"
operator|+
name|iPeriod
operator|.
name|getUniqueId
argument_list|()
operator|)
return|;
block|}
specifier|public
name|void
name|setPreference
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|time
parameter_list|,
name|String
name|pref
parameter_list|)
block|{
name|Integer
name|dateOffset
init|=
operator|(
name|Integer
operator|)
name|iDates
operator|.
name|toArray
argument_list|()
index|[
name|day
index|]
decl_stmt|;
name|Integer
name|slot
init|=
operator|(
name|Integer
operator|)
name|iStarts
operator|.
name|toArray
argument_list|()
index|[
name|time
index|]
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|iPreferences
operator|.
name|keys
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|p
init|=
operator|(
name|ExamPeriod
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getStartSlot
argument_list|()
operator|.
name|equals
argument_list|(
name|slot
argument_list|)
operator|&&
name|p
operator|.
name|getDateOffset
argument_list|()
operator|.
name|equals
argument_list|(
name|dateOffset
argument_list|)
condition|)
block|{
name|iPreferences
operator|.
name|put
argument_list|(
name|p
argument_list|,
name|pref
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
specifier|public
name|String
name|getPreference
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|time
parameter_list|)
block|{
name|Integer
name|dateOffset
init|=
operator|(
name|Integer
operator|)
name|iDates
operator|.
name|toArray
argument_list|()
index|[
name|day
index|]
decl_stmt|;
name|Integer
name|slot
init|=
operator|(
name|Integer
operator|)
name|iStarts
operator|.
name|toArray
argument_list|()
index|[
name|time
index|]
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|iPreferences
operator|.
name|keys
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|p
init|=
operator|(
name|ExamPeriod
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getStartSlot
argument_list|()
operator|.
name|equals
argument_list|(
name|slot
argument_list|)
operator|&&
name|p
operator|.
name|getDateOffset
argument_list|()
operator|.
name|equals
argument_list|(
name|dateOffset
argument_list|)
condition|)
block|{
return|return
operator|(
name|String
operator|)
name|iPreferences
operator|.
name|get
argument_list|(
name|p
argument_list|)
return|;
block|}
block|}
return|return
literal|"@"
return|;
block|}
specifier|public
name|String
name|getFieldText
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|time
parameter_list|)
block|{
name|Integer
name|dateOffset
init|=
operator|(
name|Integer
operator|)
name|iDates
operator|.
name|toArray
argument_list|()
index|[
name|day
index|]
decl_stmt|;
name|Integer
name|slot
init|=
operator|(
name|Integer
operator|)
name|iStarts
operator|.
name|toArray
argument_list|()
index|[
name|time
index|]
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|iPreferences
operator|.
name|keys
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|p
init|=
operator|(
name|ExamPeriod
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getStartSlot
argument_list|()
operator|.
name|equals
argument_list|(
name|slot
argument_list|)
operator|&&
name|p
operator|.
name|getDateOffset
argument_list|()
operator|.
name|equals
argument_list|(
name|dateOffset
argument_list|)
condition|)
return|return
name|p
operator|.
name|getAbbreviation
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|isEditable
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|time
parameter_list|)
block|{
name|Integer
name|dateOffset
init|=
operator|(
name|Integer
operator|)
name|iDates
operator|.
name|toArray
argument_list|()
index|[
name|day
index|]
decl_stmt|;
name|Integer
name|slot
init|=
operator|(
name|Integer
operator|)
name|iStarts
operator|.
name|toArray
argument_list|()
index|[
name|time
index|]
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|iPreferences
operator|.
name|keys
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|p
init|=
operator|(
name|ExamPeriod
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getStartSlot
argument_list|()
operator|.
name|equals
argument_list|(
name|slot
argument_list|)
operator|&&
name|p
operator|.
name|getDateOffset
argument_list|()
operator|.
name|equals
argument_list|(
name|dateOffset
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|String
name|getPreferences
parameter_list|()
block|{
name|String
name|prefs
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|TreeSet
argument_list|(
name|iPreferences
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|pref
init|=
operator|(
name|String
operator|)
name|iPreferences
operator|.
name|get
argument_list|(
name|period
argument_list|)
decl_stmt|;
name|prefs
operator|+=
name|PreferenceLevel
operator|.
name|prolog2char
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
return|return
name|prefs
return|;
block|}
specifier|public
name|void
name|setPreferences
parameter_list|(
name|String
name|pref
parameter_list|)
block|{
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|TreeSet
argument_list|(
name|iPreferences
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|char
name|p
init|=
name|pref
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|iPreferences
operator|.
name|put
argument_list|(
name|period
argument_list|,
name|PreferenceLevel
operator|.
name|char2prolog
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isExactTime
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|getExactDays
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getExactStartSlot
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|setExactDays
parameter_list|(
name|int
name|days
parameter_list|)
block|{
block|}
specifier|public
name|void
name|setExactStartSlot
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
block|}
specifier|public
name|String
name|getDefaultPreference
parameter_list|()
block|{
return|return
name|PreferenceLevel
operator|.
name|sNeutral
return|;
block|}
specifier|public
name|Color
name|getBorder
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|time
parameter_list|)
block|{
if|if
condition|(
name|iPeriod
operator|!=
literal|null
condition|)
block|{
name|Integer
name|slot
init|=
operator|(
name|Integer
operator|)
name|iStarts
operator|.
name|toArray
argument_list|()
index|[
name|time
index|]
decl_stmt|;
name|Integer
name|dateOffset
init|=
operator|(
name|Integer
operator|)
name|iDates
operator|.
name|toArray
argument_list|()
index|[
name|day
index|]
decl_stmt|;
if|if
condition|(
name|iPeriod
operator|.
name|getStartSlot
argument_list|()
operator|.
name|equals
argument_list|(
name|slot
argument_list|)
operator|&&
name|iPeriod
operator|.
name|getDateOffset
argument_list|()
operator|.
name|equals
argument_list|(
name|dateOffset
argument_list|)
condition|)
return|return
operator|new
name|Color
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|242
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|hasPreference
parameter_list|(
name|String
name|pref
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|iPreferences
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
if|if
condition|(
name|pref
operator|.
name|equals
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|hasNotAvailable
parameter_list|()
block|{
return|return
name|iPreferences
operator|.
name|size
argument_list|()
operator|<
name|iDates
operator|.
name|size
argument_list|()
operator|*
name|iStarts
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|String
index|[]
name|getPreferenceNames
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PreferenceLevel
name|pref
range|:
name|PreferenceLevel
operator|.
name|getPreferenceLevelList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|iAllowRequired
operator|&&
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|iAllowHard
operator|&&
name|pref
operator|.
name|isHard
argument_list|()
operator|&&
operator|!
name|hasPreference
argument_list|(
name|pref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
continue|continue;
name|ret
operator|.
name|add
argument_list|(
name|pref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasNotAvailable
argument_list|()
condition|)
name|ret
operator|.
name|add
argument_list|(
literal|"@"
argument_list|)
expr_stmt|;
return|return
name|ret
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|ret
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|Color
name|getPreferenceColor
parameter_list|(
name|String
name|pref
parameter_list|)
block|{
if|if
condition|(
literal|"@"
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
return|return
operator|new
name|Color
argument_list|(
literal|150
argument_list|,
literal|150
argument_list|,
literal|150
argument_list|)
return|;
return|return
name|PreferenceLevel
operator|.
name|prolog2awtColor
argument_list|(
name|pref
argument_list|)
return|;
block|}
specifier|public
name|String
name|getPreferenceText
parameter_list|(
name|String
name|pref
parameter_list|)
block|{
if|if
condition|(
literal|"@"
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
return|return
literal|"Period Not Available"
return|;
return|return
name|PreferenceLevel
operator|.
name|prolog2string
argument_list|(
name|pref
argument_list|)
return|;
block|}
specifier|public
name|int
name|getNrSelections
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|String
name|getSelectionName
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|int
index|[]
name|getSelectionLimits
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
return|return
operator|new
name|int
index|[]
block|{
literal|0
block|,
name|getNrTimes
argument_list|()
operator|-
literal|1
block|,
literal|0
block|,
name|getNrDays
argument_list|()
operator|-
literal|1
block|}
return|;
block|}
specifier|public
name|int
name|getDefaultSelection
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|void
name|setDefaultSelection
parameter_list|(
name|int
name|selection
parameter_list|)
block|{
block|}
specifier|public
name|void
name|setDefaultSelection
parameter_list|(
name|String
name|selectionName
parameter_list|)
block|{
block|}
specifier|public
name|String
name|getPreferenceCheck
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|isPreferenceEnabled
parameter_list|(
name|String
name|pref
parameter_list|)
block|{
if|if
condition|(
literal|"@"
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
operator|(
name|iAllowHard
operator|||
operator|!
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|pref
argument_list|)
operator|.
name|isHard
argument_list|()
operator|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|ld
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|getNrDays
argument_list|()
condition|;
name|d
operator|++
control|)
block|{
name|String
name|pref
init|=
literal|null
decl_stmt|;
name|int
name|a
init|=
literal|0
decl_stmt|,
name|b
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|getNrTimes
argument_list|()
condition|;
name|t
operator|++
control|)
block|{
name|String
name|p
init|=
name|getPreference
argument_list|(
name|d
argument_list|,
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|==
literal|null
operator|||
operator|!
name|pref
operator|.
name|equals
argument_list|(
name|p
argument_list|)
condition|)
block|{
if|if
condition|(
name|pref
operator|!=
literal|null
operator|&&
operator|!
literal|"@"
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
if|if
condition|(
name|ld
operator|!=
name|d
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|getDayHeader
argument_list|(
name|d
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|ld
operator|=
name|d
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|pref
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getStartTime
argument_list|(
name|a
argument_list|)
operator|+
literal|" - "
operator|+
name|getEndTime
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|ld
operator|=
name|d
expr_stmt|;
block|}
name|pref
operator|=
name|p
expr_stmt|;
name|a
operator|=
name|b
operator|=
name|t
expr_stmt|;
block|}
else|else
block|{
name|b
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pref
operator|!=
literal|null
operator|&&
operator|!
literal|"@"
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
if|if
condition|(
name|ld
operator|!=
name|d
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|getDayHeader
argument_list|(
name|d
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|ld
operator|=
name|d
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|pref
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getStartTime
argument_list|(
name|a
argument_list|)
operator|+
literal|" - "
operator|+
name|getEndTime
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

