begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CourseRequest
extends|extends
name|BaseCourseRequest
implements|implements
name|Comparable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|CourseRequestOverrideStatus
block|{
name|PENDING
block|,
name|APPROVED
block|,
name|REJECTED
block|,
name|CANCELLED
block|, 	}
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|CourseRequest
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|CourseRequest
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|CourseRequest
operator|)
condition|)
return|return
operator|-
literal|1
return|;
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|o
decl_stmt|;
name|int
name|cmp
init|=
name|getOrder
argument_list|()
operator|.
name|compareTo
argument_list|(
name|cr
operator|.
name|getOrder
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
else|:
name|getUniqueId
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|cr
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|cr
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|getClassEnrollments
parameter_list|()
block|{
name|List
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|StudentClassEnrollment
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentClassEnrollment
name|e
range|:
name|getCourseDemand
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getClassEnrollments
argument_list|()
control|)
block|{
if|if
condition|(
name|getCourseOffering
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|CourseRequestOption
name|getCourseRequestOption
parameter_list|(
name|OnlineSectioningLog
operator|.
name|CourseRequestOption
operator|.
name|OptionType
name|type
parameter_list|)
block|{
if|if
condition|(
name|getCourseRequestOptions
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
for|for
control|(
name|CourseRequestOption
name|option
range|:
name|getCourseRequestOptions
argument_list|()
control|)
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
return|return
name|option
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setCourseRequestOption
parameter_list|(
name|OnlineSectioningLog
operator|.
name|CourseRequestOption
name|option
parameter_list|)
block|{
if|if
condition|(
name|getCourseRequestOptions
argument_list|()
operator|==
literal|null
condition|)
block|{
name|setCourseRequestOptions
argument_list|(
operator|new
name|HashSet
argument_list|<
name|CourseRequestOption
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CourseRequestOption
name|o
init|=
name|getCourseRequestOption
argument_list|(
name|option
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|o
operator|=
operator|new
name|CourseRequestOption
argument_list|()
expr_stmt|;
name|o
operator|.
name|setCourseRequest
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|o
operator|.
name|setOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|getCourseRequestOptions
argument_list|()
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|o
operator|.
name|setOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|updateCourseRequestOption
parameter_list|(
name|OnlineSectioningLog
operator|.
name|CourseRequestOption
operator|.
name|OptionType
name|type
parameter_list|,
name|OnlineSectioningLog
operator|.
name|CourseRequestOption
operator|.
name|Builder
name|option
parameter_list|)
block|{
if|if
condition|(
name|getCourseRequestOptions
argument_list|()
operator|==
literal|null
condition|)
name|setCourseRequestOptions
argument_list|(
operator|new
name|HashSet
argument_list|<
name|CourseRequestOption
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|CourseRequestOption
argument_list|>
name|i
init|=
name|getCourseRequestOptions
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseRequestOption
name|o
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
if|if
condition|(
name|option
operator|==
literal|null
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|o
operator|.
name|setOption
argument_list|(
name|option
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
name|CourseRequestOption
name|o
init|=
operator|new
name|CourseRequestOption
argument_list|()
decl_stmt|;
name|o
operator|.
name|setCourseRequest
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|o
operator|.
name|setOption
argument_list|(
name|option
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|getCourseRequestOptions
argument_list|()
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|CourseRequestOverrideStatus
name|getCourseRequestOverrideStatus
parameter_list|()
block|{
if|if
condition|(
name|getOverrideStatus
argument_list|()
operator|==
literal|null
condition|)
return|return
name|CourseRequestOverrideStatus
operator|.
name|APPROVED
return|;
return|return
name|CourseRequestOverrideStatus
operator|.
name|values
argument_list|()
index|[
name|getOverrideStatus
argument_list|()
index|]
return|;
block|}
specifier|public
name|void
name|setCourseRequestOverrideStatus
parameter_list|(
name|CourseRequestOverrideStatus
name|status
parameter_list|)
block|{
name|setOverrideStatus
argument_list|(
name|status
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|Integer
argument_list|(
name|status
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isRequestApproved
parameter_list|()
block|{
return|return
name|getOverrideStatus
argument_list|()
operator|==
literal|null
operator|||
name|getOverrideStatus
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|CourseRequestOverrideStatus
operator|.
name|APPROVED
operator|.
name|ordinal
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isRequestPending
parameter_list|()
block|{
return|return
name|getOverrideStatus
argument_list|()
operator|!=
literal|null
operator|&&
name|getOverrideStatus
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|CourseRequestOverrideStatus
operator|.
name|PENDING
operator|.
name|ordinal
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isRequestCancelled
parameter_list|()
block|{
return|return
name|getOverrideStatus
argument_list|()
operator|!=
literal|null
operator|&&
name|getOverrideStatus
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
operator|.
name|ordinal
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isRequestRejected
parameter_list|()
block|{
return|return
name|getOverrideStatus
argument_list|()
operator|!=
literal|null
operator|&&
name|getOverrideStatus
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|CourseRequestOverrideStatus
operator|.
name|REJECTED
operator|.
name|ordinal
argument_list|()
return|;
block|}
block|}
end_class

end_unit

