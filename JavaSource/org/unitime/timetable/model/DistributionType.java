begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|HibernateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseDistributionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DistributionTypeDAO
import|;
end_import

begin_class
specifier|public
class|class
name|DistributionType
extends|extends
name|BaseDistributionType
implements|implements
name|Comparable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|DistributionType
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|DistributionType
parameter_list|(
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
specifier|public
specifier|static
name|Set
name|findAll
parameter_list|()
throws|throws
name|HibernateException
block|{
return|return
name|findAll
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Set
name|findAll
parameter_list|(
name|boolean
name|instructorPrefOnly
parameter_list|,
name|boolean
name|examPref
parameter_list|)
throws|throws
name|HibernateException
block|{
return|return
operator|new
name|TreeSet
argument_list|(
operator|(
operator|new
name|DistributionTypeDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select t from DistributionType t where t.examPref="
operator|+
name|examPref
operator|+
operator|(
name|instructorPrefOnly
condition|?
literal|" and t.instructorPref=true"
else|:
literal|""
operator|)
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Deprecated
specifier|public
specifier|static
name|Set
name|findApplicable
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|boolean
name|instructorPrefOnly
parameter_list|,
name|boolean
name|examPref
parameter_list|)
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|TimetableManager
name|mgr
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|.
name|isAdmin
argument_list|()
condition|)
return|return
name|findAll
argument_list|(
name|instructorPrefOnly
argument_list|,
name|examPref
argument_list|)
return|;
name|TreeSet
name|ret
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|findAll
argument_list|(
name|instructorPrefOnly
argument_list|,
name|examPref
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionType
name|dt
init|=
operator|(
name|DistributionType
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Set
name|depts
init|=
name|dt
operator|.
name|getDepartments
argument_list|(
name|session
operator|==
literal|null
condition|?
literal|null
else|:
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|depts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|dt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|contains
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|mgr
operator|.
name|getDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
operator|!
name|contains
operator|&&
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|depts
operator|.
name|contains
argument_list|(
name|d
argument_list|)
condition|)
name|contains
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|contains
condition|)
name|ret
operator|.
name|add
argument_list|(
name|dt
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|Set
name|findApplicable
parameter_list|(
name|Department
name|dept
parameter_list|,
name|boolean
name|instructorPrefOnly
parameter_list|,
name|boolean
name|examPref
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|dept
operator|==
literal|null
condition|)
return|return
name|findAll
argument_list|(
name|instructorPrefOnly
argument_list|,
name|examPref
argument_list|)
return|;
name|TreeSet
name|ret
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|findAll
argument_list|(
name|instructorPrefOnly
argument_list|,
name|examPref
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionType
name|dt
init|=
operator|(
name|DistributionType
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Set
name|depts
init|=
name|dt
operator|.
name|getDepartments
argument_list|(
name|dept
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|depts
operator|.
name|isEmpty
argument_list|()
operator|||
name|depts
operator|.
name|contains
argument_list|(
name|dept
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|dt
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|boolean
name|isApplicable
parameter_list|(
name|Department
name|dept
parameter_list|)
block|{
if|if
condition|(
name|getDepartments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
name|Set
name|depts
init|=
name|getDepartments
argument_list|(
name|dept
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|depts
operator|.
name|isEmpty
argument_list|()
operator|||
name|depts
operator|.
name|contains
argument_list|(
name|dept
argument_list|)
return|;
block|}
comment|/** Request attribute name for available distribution types **/
specifier|public
specifier|static
name|String
name|DIST_TYPE_ATTR_NAME
init|=
literal|"distributionTypeList"
decl_stmt|;
specifier|public
name|boolean
name|isAllowed
parameter_list|(
name|PreferenceLevel
name|pref
parameter_list|)
block|{
return|return
operator|(
name|getAllowedPref
argument_list|()
operator|==
literal|null
operator|||
name|getAllowedPref
argument_list|()
operator|.
name|indexOf
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2char
argument_list|(
name|pref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
argument_list|)
operator|>=
literal|0
operator|)
return|;
block|}
specifier|public
name|Set
name|getDepartments
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|TreeSet
name|ret
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
operator|||
name|d
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|sessionId
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|DistributionType
operator|)
condition|)
return|return
operator|-
literal|1
return|;
name|DistributionType
name|dt
init|=
operator|(
name|DistributionType
operator|)
name|o
decl_stmt|;
name|int
name|cmp
init|=
name|getLabel
argument_list|()
operator|.
name|compareTo
argument_list|(
name|dt
operator|.
name|getLabel
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|getRequirementId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|dt
operator|.
name|getRequirementId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getLabel
argument_list|()
return|;
block|}
block|}
end_class

end_unit

