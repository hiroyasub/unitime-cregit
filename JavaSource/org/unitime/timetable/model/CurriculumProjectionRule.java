begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseCurriculumProjectionRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CurriculumProjectionRuleDAO
import|;
end_import

begin_class
specifier|public
class|class
name|CurriculumProjectionRule
extends|extends
name|BaseCurriculumProjectionRule
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|CurriculumProjectionRule
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|CurriculumProjectionRule
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
specifier|public
specifier|static
name|List
argument_list|<
name|CurriculumProjectionRule
argument_list|>
name|findAll
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
return|return
name|CurriculumProjectionRuleDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select r from CurriculumProjectionRule r where r.academicArea.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|CurriculumProjectionRule
argument_list|>
name|findByAcademicArea
parameter_list|(
name|Long
name|acadAreaId
parameter_list|)
block|{
return|return
name|CurriculumProjectionRuleDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select r from CurriculumProjectionRule r where r.academicArea.uniqueId=:acadAreaId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"acadAreaId"
argument_list|,
name|acadAreaId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|getProjections
parameter_list|(
name|Long
name|acadAreaId
parameter_list|,
name|Long
name|acadClasfId
parameter_list|)
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|ret
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CurriculumProjectionRule
name|r
range|:
operator|(
name|List
argument_list|<
name|CurriculumProjectionRule
argument_list|>
operator|)
name|CurriculumProjectionRuleDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select r from CurriculumProjectionRule r where r.academicArea.uniqueId=:acadAreaId and r.academicClassification.uniqueId=:acadClasfId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"acadAreaId"
argument_list|,
name|acadAreaId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"acadClasfId"
argument_list|,
name|acadClasfId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|ret
operator|.
name|put
argument_list|(
name|r
operator|.
name|getMajor
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|r
operator|.
name|getMajor
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|,
name|r
operator|.
name|getProjection
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

