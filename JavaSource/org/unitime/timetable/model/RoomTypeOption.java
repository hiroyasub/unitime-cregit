begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseRoomTypeOption
import|;
end_import

begin_class
specifier|public
class|class
name|RoomTypeOption
extends|extends
name|BaseRoomTypeOption
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|RoomTypeOption
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|RoomTypeOption
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomType
name|roomType
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
name|session
parameter_list|)
block|{
name|super
argument_list|(
name|roomType
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Constructor for required fields 	 */
specifier|public
name|RoomTypeOption
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomType
name|roomType
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
name|session
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Integer
name|status
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|roomType
argument_list|,
name|session
argument_list|,
name|status
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
specifier|public
specifier|static
specifier|final
name|int
name|sStatusNoOptions
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sStatusScheduleEvents
init|=
literal|1
decl_stmt|;
specifier|public
name|boolean
name|can
parameter_list|(
name|int
name|operation
parameter_list|)
block|{
return|return
operator|(
name|getStatus
argument_list|()
operator|.
name|intValue
argument_list|()
operator|&
name|operation
operator|)
operator|==
name|operation
return|;
block|}
specifier|public
name|void
name|set
parameter_list|(
name|int
name|operation
parameter_list|)
block|{
if|if
condition|(
operator|!
name|can
argument_list|(
name|operation
argument_list|)
condition|)
name|setStatus
argument_list|(
name|getStatus
argument_list|()
operator|+
name|operation
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|(
name|int
name|operation
parameter_list|)
block|{
if|if
condition|(
name|can
argument_list|(
name|operation
argument_list|)
condition|)
name|setStatus
argument_list|(
name|getStatus
argument_list|()
operator|-
name|operation
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|canScheduleEvents
parameter_list|()
block|{
return|return
name|can
argument_list|(
name|sStatusScheduleEvents
argument_list|)
return|;
block|}
specifier|public
name|void
name|setScheduleEvents
parameter_list|(
name|boolean
name|enable
parameter_list|)
block|{
if|if
condition|(
name|enable
condition|)
name|set
argument_list|(
name|sStatusScheduleEvents
argument_list|)
expr_stmt|;
else|else
name|reset
argument_list|(
name|sStatusScheduleEvents
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

