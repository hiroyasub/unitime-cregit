begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|criterion
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseCourseCreditUnitType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseCreditUnitTypeDAO
import|;
end_import

begin_class
specifier|public
class|class
name|CourseCreditUnitType
extends|extends
name|BaseCourseCreditUnitType
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|CourseCreditUnitType
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|CourseCreditUnitType
parameter_list|(
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
specifier|public
specifier|static
name|String
name|COURSE_CREDIT_UNIT_TYPE_ATTR_NAME
init|=
literal|"courseCreditUnitTypeList"
decl_stmt|;
specifier|public
specifier|static
name|Vector
name|courseCreditUnitTypeList
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
specifier|synchronized
name|Vector
name|getCourseCreditUnitTypeList
parameter_list|(
name|boolean
name|refresh
parameter_list|)
block|{
if|if
condition|(
name|courseCreditUnitTypeList
operator|!=
literal|null
operator|&&
operator|!
name|refresh
condition|)
block|{
return|return
operator|(
name|courseCreditUnitTypeList
operator|)
return|;
block|}
name|CourseCreditUnitTypeDAO
name|cctDao
init|=
operator|new
name|CourseCreditUnitTypeDAO
argument_list|()
decl_stmt|;
name|List
name|l
init|=
name|cctDao
operator|.
name|findAll
argument_list|(
name|Order
operator|.
name|asc
argument_list|(
literal|"label"
argument_list|)
argument_list|)
decl_stmt|;
name|courseCreditUnitTypeList
operator|=
operator|new
name|Vector
argument_list|(
name|l
argument_list|)
expr_stmt|;
return|return
operator|(
name|courseCreditUnitTypeList
operator|)
return|;
block|}
specifier|public
specifier|static
name|CourseCreditUnitType
name|getCourseCreditUnitTypeForReference
parameter_list|(
name|String
name|referenceString
parameter_list|)
block|{
if|if
condition|(
name|referenceString
operator|==
literal|null
operator|||
name|referenceString
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
name|CourseCreditUnitType
name|ccut
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|getCourseCreditUnitTypeList
argument_list|(
literal|false
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ccut
operator|=
operator|(
name|CourseCreditUnitType
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|referenceString
operator|.
name|equals
argument_list|(
name|ccut
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|ccut
operator|)
return|;
block|}
block|}
return|return
operator|(
literal|null
operator|)
return|;
block|}
specifier|public
specifier|static
name|CourseCreditUnitType
name|getCourseCreditUnitTypeForUniqueId
parameter_list|(
name|Long
name|uniqueId
parameter_list|)
block|{
if|if
condition|(
name|uniqueId
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
name|CourseCreditUnitType
name|ccut
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|getCourseCreditUnitTypeList
argument_list|(
literal|false
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ccut
operator|=
operator|(
name|CourseCreditUnitType
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|uniqueId
operator|.
name|equals
argument_list|(
name|ccut
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|ccut
operator|)
return|;
block|}
block|}
return|return
operator|(
literal|null
operator|)
return|;
block|}
specifier|public
name|String
name|getAbbv
parameter_list|()
block|{
if|if
condition|(
name|getAbbreviation
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|""
return|;
return|return
name|getAbbreviation
argument_list|()
return|;
block|}
block|}
end_class

end_unit

