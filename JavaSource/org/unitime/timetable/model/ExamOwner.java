begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseExamOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|InstrOfferingConfigComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamOwnerDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstrOfferingConfigDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_class
specifier|public
class|class
name|ExamOwner
extends|extends
name|BaseExamOwner
implements|implements
name|Comparable
argument_list|<
name|ExamOwner
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|ExamOwner
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|ExamOwner
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Constructor for required fields 	 */
specifier|public
name|ExamOwner
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
name|exam
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Long
name|ownerId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Integer
name|ownerType
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
name|course
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|,
name|exam
argument_list|,
name|ownerId
argument_list|,
name|ownerType
argument_list|,
name|course
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
specifier|public
specifier|static
specifier|final
name|int
name|sOwnerTypeClass
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sOwnerTypeConfig
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sOwnerTypeCourse
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sOwnerTypeOffering
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|String
index|[]
name|sOwnerTypes
init|=
operator|new
name|String
index|[]
block|{
literal|"Offering"
block|,
literal|"Course"
block|,
literal|"Config"
block|,
literal|"Class"
block|}
decl_stmt|;
specifier|public
specifier|static
name|ExamOwner
name|findByOwnerIdType
parameter_list|(
name|Long
name|ownerId
parameter_list|,
name|Integer
name|ownerType
parameter_list|)
block|{
return|return
operator|(
name|ExamOwner
operator|)
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select o from ExamOwner o where o.ownerId=:ownerId and o.ownerType=:ownerType"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"ownerId"
argument_list|,
name|ownerId
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"ownerType"
argument_list|,
name|ownerType
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|private
name|Object
name|iOwnerObject
init|=
literal|null
decl_stmt|;
specifier|public
name|Object
name|getOwnerObject
parameter_list|()
block|{
if|if
condition|(
name|iOwnerObject
operator|!=
literal|null
condition|)
return|return
name|iOwnerObject
return|;
switch|switch
condition|(
name|getOwnerType
argument_list|()
condition|)
block|{
case|case
name|sOwnerTypeClass
case|:
name|iOwnerObject
operator|=
operator|new
name|Class_DAO
argument_list|()
operator|.
name|get
argument_list|(
name|getOwnerId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|iOwnerObject
return|;
case|case
name|sOwnerTypeConfig
case|:
name|iOwnerObject
operator|=
operator|new
name|InstrOfferingConfigDAO
argument_list|()
operator|.
name|get
argument_list|(
name|getOwnerId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|iOwnerObject
return|;
case|case
name|sOwnerTypeCourse
case|:
name|iOwnerObject
operator|=
operator|new
name|CourseOfferingDAO
argument_list|()
operator|.
name|get
argument_list|(
name|getOwnerId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|iOwnerObject
return|;
case|case
name|sOwnerTypeOffering
case|:
name|iOwnerObject
operator|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
operator|.
name|get
argument_list|(
name|getOwnerId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|iOwnerObject
return|;
default|default :
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown owner type "
operator|+
name|getOwnerType
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setOwner
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
name|setOwnerId
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|setOwnerType
argument_list|(
name|sOwnerTypeClass
argument_list|)
expr_stmt|;
name|setCourse
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setOwner
parameter_list|(
name|InstrOfferingConfig
name|config
parameter_list|)
block|{
name|setOwnerId
argument_list|(
name|config
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|setOwnerType
argument_list|(
name|sOwnerTypeConfig
argument_list|)
expr_stmt|;
name|setCourse
argument_list|(
name|config
operator|.
name|getControllingCourseOffering
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setOwner
parameter_list|(
name|CourseOffering
name|course
parameter_list|)
block|{
name|setOwnerId
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|setOwnerType
argument_list|(
name|sOwnerTypeCourse
argument_list|)
expr_stmt|;
name|setCourse
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setOwner
parameter_list|(
name|InstructionalOffering
name|offering
parameter_list|)
block|{
name|setOwnerId
argument_list|(
name|offering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|setOwnerType
argument_list|(
name|sOwnerTypeOffering
argument_list|)
expr_stmt|;
name|setCourse
argument_list|(
name|offering
operator|.
name|getControllingCourseOffering
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CourseOffering
name|computeCourse
parameter_list|()
block|{
name|Object
name|owner
init|=
name|getOwnerObject
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|getOwnerType
argument_list|()
condition|)
block|{
case|case
name|sOwnerTypeClass
case|:
return|return
operator|(
operator|(
name|Class_
operator|)
name|owner
operator|)
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
return|;
case|case
name|sOwnerTypeConfig
case|:
return|return
operator|(
operator|(
name|InstrOfferingConfig
operator|)
name|owner
operator|)
operator|.
name|getControllingCourseOffering
argument_list|()
return|;
case|case
name|sOwnerTypeCourse
case|:
return|return
operator|(
name|CourseOffering
operator|)
name|owner
return|;
case|case
name|sOwnerTypeOffering
case|:
return|return
operator|(
operator|(
name|InstructionalOffering
operator|)
name|owner
operator|)
operator|.
name|getControllingCourseOffering
argument_list|()
return|;
default|default :
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown owner type "
operator|+
name|getOwnerType
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|ExamOwner
name|owner
parameter_list|)
block|{
name|CourseOffering
name|c1
init|=
name|getCourse
argument_list|()
decl_stmt|;
name|CourseOffering
name|c2
init|=
name|owner
operator|.
name|getCourse
argument_list|()
decl_stmt|;
name|int
name|cmp
init|=
literal|0
decl_stmt|;
name|cmp
operator|=
name|c1
operator|.
name|getSubjectAreaAbbv
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|c1
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|getOwnerType
argument_list|()
operator|.
name|compareTo
argument_list|(
name|owner
operator|.
name|getOwnerType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
switch|switch
condition|(
name|getOwnerType
argument_list|()
condition|)
block|{
case|case
name|sOwnerTypeClass
case|:
return|return
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
operator|.
name|compare
argument_list|(
name|getOwnerObject
argument_list|()
argument_list|,
name|owner
operator|.
name|getOwnerObject
argument_list|()
argument_list|)
return|;
case|case
name|sOwnerTypeConfig
case|:
return|return
operator|new
name|InstrOfferingConfigComparator
argument_list|(
literal|null
argument_list|)
operator|.
name|compare
argument_list|(
name|getOwnerObject
argument_list|()
argument_list|,
name|owner
operator|.
name|getOwnerObject
argument_list|()
argument_list|)
return|;
block|}
return|return
name|getOwnerId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|owner
operator|.
name|getOwnerId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|List
name|getStudents
parameter_list|()
block|{
switch|switch
condition|(
name|getOwnerType
argument_list|()
condition|)
block|{
case|case
name|sOwnerTypeClass
case|:
return|return
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct e.student from "
operator|+
literal|"StudentClassEnrollment e inner join e.clazz c  "
operator|+
literal|"where c.uniqueId = :examOwnerId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
case|case
name|sOwnerTypeConfig
case|:
return|return
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct e.student from "
operator|+
literal|"StudentClassEnrollment e inner join e.clazz c  "
operator|+
literal|"where c.schedulingSubpart.instrOfferingConfig.uniqueId = :examOwnerId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
case|case
name|sOwnerTypeCourse
case|:
return|return
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct e.student from "
operator|+
literal|"StudentClassEnrollment e inner join e.courseOffering co  "
operator|+
literal|"where co.uniqueId = :examOwnerId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
case|case
name|sOwnerTypeOffering
case|:
return|return
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct e.student from "
operator|+
literal|"StudentClassEnrollment e inner join e.courseOffering co  "
operator|+
literal|"where co.instructionalOffering.uniqueId = :examOwnerId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
default|default :
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown owner type "
operator|+
name|getOwnerType
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|List
name|getStudentIds
parameter_list|()
block|{
switch|switch
condition|(
name|getOwnerType
argument_list|()
condition|)
block|{
case|case
name|sOwnerTypeClass
case|:
return|return
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct e.student.uniqueId from "
operator|+
literal|"StudentClassEnrollment e inner join e.clazz c  "
operator|+
literal|"where c.uniqueId = :examOwnerId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
case|case
name|sOwnerTypeConfig
case|:
return|return
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct e.student.uniqueId from "
operator|+
literal|"StudentClassEnrollment e inner join e.clazz c  "
operator|+
literal|"where c.schedulingSubpart.instrOfferingConfig.uniqueId = :examOwnerId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
case|case
name|sOwnerTypeCourse
case|:
return|return
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct e.student.uniqueId from "
operator|+
literal|"StudentClassEnrollment e inner join e.courseOffering co  "
operator|+
literal|"where co.uniqueId = :examOwnerId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
case|case
name|sOwnerTypeOffering
case|:
return|return
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct e.student.uniqueId from "
operator|+
literal|"StudentClassEnrollment e inner join e.courseOffering co  "
operator|+
literal|"where co.instructionalOffering.uniqueId = :examOwnerId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
default|default :
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown owner type "
operator|+
name|getOwnerType
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|computeStudentExams
parameter_list|(
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Exam
argument_list|>
argument_list|>
name|studentExams
parameter_list|)
block|{
switch|switch
condition|(
name|getOwnerType
argument_list|()
condition|)
block|{
case|case
name|sOwnerTypeClass
case|:
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e.student.uniqueId, o.exam from ExamOwner o, StudentClassEnrollment f, StudentClassEnrollment e inner join e.clazz c "
operator|+
literal|"where c.uniqueId = :examOwnerId and e.student=f.student and "
operator|+
literal|"o.ownerType=:ownerType and o.ownerId=f.clazz.uniqueId and o.exam.examType=:examType"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"ownerType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|getExam
argument_list|()
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Exam
argument_list|>
name|exams
init|=
name|studentExams
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|exams
operator|==
literal|null
condition|)
block|{
name|exams
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|studentExams
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|exams
argument_list|)
expr_stmt|;
block|}
name|exams
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e.student.uniqueId, o.exam from ExamOwner o, StudentClassEnrollment f, StudentClassEnrollment e inner join e.clazz c "
operator|+
literal|"where c.uniqueId = :examOwnerId and e.student=f.student and "
operator|+
literal|"o.ownerType=:ownerType and o.ownerId=f.clazz.schedulingSubpart.instrOfferingConfig.uniqueId and o.exam.examType=:examType"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"ownerType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|getExam
argument_list|()
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Exam
argument_list|>
name|exams
init|=
name|studentExams
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|exams
operator|==
literal|null
condition|)
block|{
name|exams
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|studentExams
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|exams
argument_list|)
expr_stmt|;
block|}
name|exams
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e.student.uniqueId, o.exam from ExamOwner o, StudentClassEnrollment f, StudentClassEnrollment e inner join e.clazz c "
operator|+
literal|"where c.uniqueId = :examOwnerId and e.student=f.student and "
operator|+
literal|"o.ownerType=:ownerType and o.ownerId=f.courseOffering.uniqueId and o.exam.examType=:examType"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"ownerType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|getExam
argument_list|()
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Exam
argument_list|>
name|exams
init|=
name|studentExams
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|exams
operator|==
literal|null
condition|)
block|{
name|exams
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|studentExams
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|exams
argument_list|)
expr_stmt|;
block|}
name|exams
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e.student.uniqueId, o.exam from ExamOwner o, StudentClassEnrollment f, StudentClassEnrollment e inner join e.clazz c "
operator|+
literal|"where c.uniqueId = :examOwnerId and e.student=f.student and "
operator|+
literal|"o.ownerType=:ownerType and o.ownerId=f.courseOffering.instructionalOffering.uniqueId and o.exam.examType=:examType"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"ownerType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|getExam
argument_list|()
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Exam
argument_list|>
name|exams
init|=
name|studentExams
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|exams
operator|==
literal|null
condition|)
block|{
name|exams
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|studentExams
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|exams
argument_list|)
expr_stmt|;
block|}
name|exams
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|sOwnerTypeConfig
case|:
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e.student.uniqueId, o.exam from ExamOwner o, StudentClassEnrollment f, StudentClassEnrollment e inner join e.clazz c "
operator|+
literal|"where c.schedulingSubpart.instrOfferingConfig.uniqueId = :examOwnerId and e.student=f.student and "
operator|+
literal|"o.ownerType=:ownerType and o.ownerId=f.clazz.uniqueId and o.exam.examType=:examType"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"ownerType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|getExam
argument_list|()
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Exam
argument_list|>
name|exams
init|=
name|studentExams
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|exams
operator|==
literal|null
condition|)
block|{
name|exams
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|studentExams
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|exams
argument_list|)
expr_stmt|;
block|}
name|exams
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e.student.uniqueId, o.exam from ExamOwner o, StudentClassEnrollment f, StudentClassEnrollment e inner join e.clazz c "
operator|+
literal|"where c.schedulingSubpart.instrOfferingConfig.uniqueId = :examOwnerId and e.student=f.student and "
operator|+
literal|"o.ownerType=:ownerType and o.ownerId=f.clazz.schedulingSubpart.instrOfferingConfig.uniqueId and o.exam.examType=:examType"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"ownerType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|getExam
argument_list|()
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Exam
argument_list|>
name|exams
init|=
name|studentExams
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|exams
operator|==
literal|null
condition|)
block|{
name|exams
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|studentExams
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|exams
argument_list|)
expr_stmt|;
block|}
name|exams
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e.student.uniqueId, o.exam from ExamOwner o, StudentClassEnrollment f, StudentClassEnrollment e inner join e.clazz c "
operator|+
literal|"where c.schedulingSubpart.instrOfferingConfig.uniqueId = :examOwnerId and e.student=f.student and "
operator|+
literal|"o.ownerType=:ownerType and o.ownerId=f.courseOffering.uniqueId and o.exam.examType=:examType"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"ownerType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|getExam
argument_list|()
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Exam
argument_list|>
name|exams
init|=
name|studentExams
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|exams
operator|==
literal|null
condition|)
block|{
name|exams
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|studentExams
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|exams
argument_list|)
expr_stmt|;
block|}
name|exams
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e.student.uniqueId, o.exam from ExamOwner o, StudentClassEnrollment f, StudentClassEnrollment e inner join e.clazz c "
operator|+
literal|"where c.schedulingSubpart.instrOfferingConfig.uniqueId = :examOwnerId and e.student=f.student and "
operator|+
literal|"o.ownerType=:ownerType and o.ownerId=f.courseOffering.instructionalOffering.uniqueId and o.exam.examType=:examType"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"ownerType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|getExam
argument_list|()
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Exam
argument_list|>
name|exams
init|=
name|studentExams
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|exams
operator|==
literal|null
condition|)
block|{
name|exams
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|studentExams
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|exams
argument_list|)
expr_stmt|;
block|}
name|exams
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|sOwnerTypeCourse
case|:
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e.student.uniqueId, o.exam from ExamOwner o, StudentClassEnrollment f, StudentClassEnrollment e inner join e.courseOffering co "
operator|+
literal|"where co.uniqueId = :examOwnerId and e.student=f.student and "
operator|+
literal|"o.ownerType=:ownerType and o.ownerId=f.clazz.uniqueId and o.exam.examType=:examType"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"ownerType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|getExam
argument_list|()
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Exam
argument_list|>
name|exams
init|=
name|studentExams
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|exams
operator|==
literal|null
condition|)
block|{
name|exams
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|studentExams
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|exams
argument_list|)
expr_stmt|;
block|}
name|exams
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e.student.uniqueId, o.exam from ExamOwner o, StudentClassEnrollment f, StudentClassEnrollment e inner join e.courseOffering co "
operator|+
literal|"where co.uniqueId = :examOwnerId and e.student=f.student and "
operator|+
literal|"o.ownerType=:ownerType and o.ownerId=f.clazz.schedulingSubpart.instrOfferingConfig.uniqueId and o.exam.examType=:examType"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"ownerType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|getExam
argument_list|()
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Exam
argument_list|>
name|exams
init|=
name|studentExams
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|exams
operator|==
literal|null
condition|)
block|{
name|exams
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|studentExams
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|exams
argument_list|)
expr_stmt|;
block|}
name|exams
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e.student.uniqueId, o.exam from ExamOwner o, StudentClassEnrollment f, StudentClassEnrollment e inner join e.courseOffering co "
operator|+
literal|"where co.uniqueId = :examOwnerId and e.student=f.student and  "
operator|+
literal|"o.ownerType=:ownerType and o.ownerId=f.courseOffering.uniqueId and o.exam.examType=:examType"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"ownerType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|getExam
argument_list|()
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Exam
argument_list|>
name|exams
init|=
name|studentExams
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|exams
operator|==
literal|null
condition|)
block|{
name|exams
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|studentExams
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|exams
argument_list|)
expr_stmt|;
block|}
name|exams
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e.student.uniqueId, o.exam from ExamOwner o, StudentClassEnrollment f, StudentClassEnrollment e inner join e.courseOffering co "
operator|+
literal|"where co.uniqueId = :examOwnerId and e.student=f.student and "
operator|+
literal|"o.ownerType=:ownerType and o.ownerId=f.courseOffering.instructionalOffering.uniqueId and o.exam.examType=:examType"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"ownerType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|getExam
argument_list|()
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Exam
argument_list|>
name|exams
init|=
name|studentExams
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|exams
operator|==
literal|null
condition|)
block|{
name|exams
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|studentExams
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|exams
argument_list|)
expr_stmt|;
block|}
name|exams
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|sOwnerTypeOffering
case|:
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e.student.uniqueId, o.exam from ExamOwner o, StudentClassEnrollment f, StudentClassEnrollment e inner join e.courseOffering co "
operator|+
literal|"where co.instructionalOffering.uniqueId = :examOwnerId and e.student=f.student and "
operator|+
literal|"o.ownerType=:ownerType and o.ownerId=f.clazz.uniqueId and o.exam.examType=:examType"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"ownerType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|getExam
argument_list|()
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Exam
argument_list|>
name|exams
init|=
name|studentExams
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|exams
operator|==
literal|null
condition|)
block|{
name|exams
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|studentExams
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|exams
argument_list|)
expr_stmt|;
block|}
name|exams
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e.student.uniqueId, o.exam from ExamOwner o, StudentClassEnrollment f, StudentClassEnrollment e inner join e.courseOffering co "
operator|+
literal|"where co.instructionalOffering.uniqueId = :examOwnerId and e.student=f.student and "
operator|+
literal|"o.ownerType=:ownerType and o.ownerId=f.clazz.schedulingSubpart.instrOfferingConfig.uniqueId and o.exam.examType=:examType"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"ownerType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|getExam
argument_list|()
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Exam
argument_list|>
name|exams
init|=
name|studentExams
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|exams
operator|==
literal|null
condition|)
block|{
name|exams
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|studentExams
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|exams
argument_list|)
expr_stmt|;
block|}
name|exams
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e.student.uniqueId, o.exam from ExamOwner o, StudentClassEnrollment f, StudentClassEnrollment e inner join e.courseOffering co "
operator|+
literal|"where co.instructionalOffering.uniqueId = :examOwnerId and e.student=f.student and "
operator|+
literal|"o.ownerType=:ownerType and o.ownerId=f.courseOffering.uniqueId and o.exam.examType=:examType"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"ownerType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|getExam
argument_list|()
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Exam
argument_list|>
name|exams
init|=
name|studentExams
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|exams
operator|==
literal|null
condition|)
block|{
name|exams
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|studentExams
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|exams
argument_list|)
expr_stmt|;
block|}
name|exams
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e.student.uniqueId, o.exam from ExamOwner o, StudentClassEnrollment f, StudentClassEnrollment e inner join e.courseOffering co "
operator|+
literal|"where co.instructionalOffering.uniqueId = :examOwnerId and e.student=f.student and "
operator|+
literal|"o.ownerType=:ownerType and o.ownerId=f.courseOffering.instructionalOffering.uniqueId and o.exam.examType=:examType"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"ownerType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|getExam
argument_list|()
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Exam
argument_list|>
name|exams
init|=
name|studentExams
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|exams
operator|==
literal|null
condition|)
block|{
name|exams
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|studentExams
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|exams
argument_list|)
expr_stmt|;
block|}
name|exams
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|protected
name|void
name|computeStudentAssignments
parameter_list|(
name|Hashtable
argument_list|<
name|Assignment
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|studentAssignments
parameter_list|)
block|{
switch|switch
condition|(
name|getOwnerType
argument_list|()
condition|)
block|{
case|case
name|sOwnerTypeClass
case|:
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e.student.uniqueId, a from Assignment a, StudentClassEnrollment f, StudentClassEnrollment e inner join e.clazz c "
operator|+
literal|"where c.uniqueId = :examOwnerId and "
operator|+
literal|"e.student=f.student and f.clazz = a.clazz and a.solution.commited = true"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Assignment
name|assignment
init|=
operator|(
name|Assignment
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|students
init|=
name|studentAssignments
operator|.
name|get
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
if|if
condition|(
name|students
operator|==
literal|null
condition|)
block|{
name|students
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|studentAssignments
operator|.
name|put
argument_list|(
name|assignment
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
name|students
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|sOwnerTypeConfig
case|:
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e.student.uniqueId, a from Assignment a, StudentClassEnrollment f, StudentClassEnrollment e inner join e.clazz c "
operator|+
literal|"where c.schedulingSubpart.instrOfferingConfig.uniqueId = :examOwnerId and "
operator|+
literal|"e.student=f.student and f.clazz = a.clazz and a.solution.commited = true"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Assignment
name|assignment
init|=
operator|(
name|Assignment
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|students
init|=
name|studentAssignments
operator|.
name|get
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
if|if
condition|(
name|students
operator|==
literal|null
condition|)
block|{
name|students
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|studentAssignments
operator|.
name|put
argument_list|(
name|assignment
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
name|students
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|sOwnerTypeCourse
case|:
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e.student.uniqueId, a from Assignment a, StudentClassEnrollment f, StudentClassEnrollment e inner join e.courseOffering co "
operator|+
literal|"where co.uniqueId = :examOwnerId and "
operator|+
literal|"e.student=f.student and f.clazz = a.clazz and a.solution.commited = true"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Assignment
name|assignment
init|=
operator|(
name|Assignment
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|students
init|=
name|studentAssignments
operator|.
name|get
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
if|if
condition|(
name|students
operator|==
literal|null
condition|)
block|{
name|students
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|studentAssignments
operator|.
name|put
argument_list|(
name|assignment
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
name|students
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|sOwnerTypeOffering
case|:
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e.student.uniqueId, a from Assignment a, StudentClassEnrollment f, StudentClassEnrollment e inner join e.courseOffering co "
operator|+
literal|"where co.instructionalOffering.uniqueId = :examOwnerId and "
operator|+
literal|"e.student=f.student and f.clazz = a.clazz and a.solution.commited = true"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Assignment
name|assignment
init|=
operator|(
name|Assignment
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|students
init|=
name|studentAssignments
operator|.
name|get
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
if|if
condition|(
name|students
operator|==
literal|null
condition|)
block|{
name|students
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|studentAssignments
operator|.
name|put
argument_list|(
name|assignment
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
name|students
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|protected
name|void
name|computeOverlappingStudentMeetings
parameter_list|(
name|Hashtable
argument_list|<
name|Meeting
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|studentMeetings
parameter_list|,
name|Long
name|periodId
parameter_list|)
block|{
switch|switch
condition|(
name|getOwnerType
argument_list|()
condition|)
block|{
case|case
name|sOwnerTypeClass
case|:
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e.student.uniqueId, m from ClassEvent ce inner join ce.meetings m inner join ce.clazz.studentEnrollments f, StudentClassEnrollment e inner join e.clazz c, ExamPeriod p "
operator|+
literal|"where c.uniqueId = :examOwnerId and e.student=f.student and "
operator|+
literal|"p.uniqueId=:periodId and p.startSlot - :travelTime< m.stopPeriod and m.startPeriod< p.startSlot + p.length + :travelTime and "
operator|+
name|HibernateUtil
operator|.
name|addDate
argument_list|(
literal|"p.session.examBeginDate"
argument_list|,
literal|"p.dateOffset"
argument_list|)
operator|+
literal|" = m.meetingDate"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"travelTime"
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.eventConflicts.travelTime.classEvent"
argument_list|,
literal|"6"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"periodId"
argument_list|,
name|periodId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|students
init|=
name|studentMeetings
operator|.
name|get
argument_list|(
name|meeting
argument_list|)
decl_stmt|;
if|if
condition|(
name|students
operator|==
literal|null
condition|)
block|{
name|students
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|studentMeetings
operator|.
name|put
argument_list|(
name|meeting
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
name|students
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|sOwnerTypeConfig
case|:
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e.student.uniqueId, m from ClassEvent ce inner join ce.meetings m inner join ce.clazz.studentEnrollments f, StudentClassEnrollment e inner join e.clazz c, ExamPeriod p "
operator|+
literal|"where c.schedulingSubpart.instrOfferingConfig.uniqueId = :examOwnerId and e.student=f.student and "
operator|+
literal|"p.uniqueId=:periodId and p.startSlot - :travelTime< m.stopPeriod and m.startPeriod< p.startSlot + p.length + :travelTime and "
operator|+
name|HibernateUtil
operator|.
name|addDate
argument_list|(
literal|"p.session.examBeginDate"
argument_list|,
literal|"p.dateOffset"
argument_list|)
operator|+
literal|" = m.meetingDate"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"travelTime"
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.eventConflicts.travelTime.classEvent"
argument_list|,
literal|"6"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"periodId"
argument_list|,
name|periodId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|students
init|=
name|studentMeetings
operator|.
name|get
argument_list|(
name|meeting
argument_list|)
decl_stmt|;
if|if
condition|(
name|students
operator|==
literal|null
condition|)
block|{
name|students
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|studentMeetings
operator|.
name|put
argument_list|(
name|meeting
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
name|students
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|sOwnerTypeCourse
case|:
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e.student.uniqueId, m from ClassEvent ce inner join ce.meetings m inner join ce.clazz.studentEnrollments f, StudentClassEnrollment e inner join e.courseOffering co, ExamPeriod p "
operator|+
literal|"where co.uniqueId = :examOwnerId and e.student=f.student and "
operator|+
literal|"p.uniqueId=:periodId and p.startSlot - :travelTime< m.stopPeriod and m.startPeriod< p.startSlot + p.length + :travelTime and "
operator|+
name|HibernateUtil
operator|.
name|addDate
argument_list|(
literal|"p.session.examBeginDate"
argument_list|,
literal|"p.dateOffset"
argument_list|)
operator|+
literal|" = m.meetingDate"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"travelTime"
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.eventConflicts.travelTime.classEvent"
argument_list|,
literal|"6"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"periodId"
argument_list|,
name|periodId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|students
init|=
name|studentMeetings
operator|.
name|get
argument_list|(
name|meeting
argument_list|)
decl_stmt|;
if|if
condition|(
name|students
operator|==
literal|null
condition|)
block|{
name|students
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|studentMeetings
operator|.
name|put
argument_list|(
name|meeting
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
name|students
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|sOwnerTypeOffering
case|:
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e.student.uniqueId, m from ClassEvent ce inner join ce.meetings m inner join ce.clazz.studentEnrollments f, StudentClassEnrollment e inner join e.courseOffering co, ExamPeriod p "
operator|+
literal|"where co.instructionalOffering.uniqueId = :examOwnerId and e.student=f.student and "
operator|+
literal|"p.uniqueId=:periodId and p.startSlot - :travelTime< m.stopPeriod and m.startPeriod< p.startSlot + p.length + :travelTime and "
operator|+
name|HibernateUtil
operator|.
name|addDate
argument_list|(
literal|"p.session.examBeginDate"
argument_list|,
literal|"p.dateOffset"
argument_list|)
operator|+
literal|" = m.meetingDate"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"travelTime"
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.eventConflicts.travelTime.classEvent"
argument_list|,
literal|"6"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"periodId"
argument_list|,
name|periodId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|students
init|=
name|studentMeetings
operator|.
name|get
argument_list|(
name|meeting
argument_list|)
decl_stmt|;
if|if
condition|(
name|students
operator|==
literal|null
condition|)
block|{
name|students
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|studentMeetings
operator|.
name|put
argument_list|(
name|meeting
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
name|students
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|int
name|countStudents
parameter_list|()
block|{
switch|switch
condition|(
name|getOwnerType
argument_list|()
condition|)
block|{
case|case
name|sOwnerTypeClass
case|:
return|return
operator|(
operator|(
name|Number
operator|)
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(distinct e.student) from "
operator|+
literal|"StudentClassEnrollment e inner join e.clazz c  "
operator|+
literal|"where c.uniqueId = :examOwnerId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
return|;
case|case
name|sOwnerTypeConfig
case|:
return|return
operator|(
operator|(
name|Number
operator|)
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(distinct e.student) from "
operator|+
literal|"StudentClassEnrollment e inner join e.clazz c  "
operator|+
literal|"where c.schedulingSubpart.instrOfferingConfig.uniqueId = :examOwnerId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
return|;
case|case
name|sOwnerTypeCourse
case|:
return|return
operator|(
operator|(
name|Number
operator|)
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(distinct e.student) from "
operator|+
literal|"StudentClassEnrollment e inner join e.courseOffering co  "
operator|+
literal|"where co.uniqueId = :examOwnerId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
return|;
case|case
name|sOwnerTypeOffering
case|:
return|return
operator|(
operator|(
name|Number
operator|)
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(distinct e.student) from "
operator|+
literal|"StudentClassEnrollment e inner join e.courseOffering co  "
operator|+
literal|"where co.instructionalOffering.uniqueId = :examOwnerId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examOwnerId"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
return|;
default|default :
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown owner type "
operator|+
name|getOwnerType
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|int
name|getLimit
parameter_list|()
block|{
name|Object
name|owner
init|=
name|getOwnerObject
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|getOwnerType
argument_list|()
condition|)
block|{
case|case
name|sOwnerTypeClass
case|:
return|return
operator|(
operator|(
name|Class_
operator|)
name|owner
operator|)
operator|.
name|getClassLimit
argument_list|()
return|;
case|case
name|sOwnerTypeConfig
case|:
return|return
operator|(
operator|(
name|InstrOfferingConfig
operator|)
name|owner
operator|)
operator|.
name|getLimit
argument_list|()
return|;
case|case
name|sOwnerTypeCourse
case|:
name|CourseOffering
name|course
init|=
operator|(
operator|(
name|CourseOffering
operator|)
name|owner
operator|)
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|Iterator
name|k
init|=
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseReservations
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOfferingReservation
name|reservation
init|=
operator|(
name|CourseOfferingReservation
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|reservation
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|equals
argument_list|(
name|course
argument_list|)
condition|)
return|return
name|reservation
operator|.
name|getReserved
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
else|else
return|return
operator|(
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|)
return|;
case|case
name|sOwnerTypeOffering
case|:
return|return
operator|(
operator|(
operator|(
name|InstructionalOffering
operator|)
name|owner
operator|)
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
operator|(
operator|(
name|InstructionalOffering
operator|)
name|owner
operator|)
operator|.
name|getLimit
argument_list|()
operator|)
return|;
default|default :
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown owner type "
operator|+
name|getOwnerType
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|int
name|getSize
parameter_list|()
block|{
name|boolean
name|considerLimit
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.useLimit."
operator|+
name|Exam
operator|.
name|sExamTypes
index|[
name|getExam
argument_list|()
operator|.
name|getExamType
argument_list|()
index|]
argument_list|,
operator|(
name|getExam
argument_list|()
operator|.
name|getExamType
argument_list|()
operator|==
name|Exam
operator|.
name|sExamTypeFinal
condition|?
literal|"false"
else|:
literal|"true"
operator|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|considerLimit
condition|?
name|Math
operator|.
name|max
argument_list|(
name|countStudents
argument_list|()
argument_list|,
name|getLimit
argument_list|()
argument_list|)
else|:
name|countStudents
argument_list|()
operator|)
return|;
block|}
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
name|genName
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.name."
operator|+
name|ExamOwner
operator|.
name|sOwnerTypes
index|[
name|getOwnerType
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getSubject
parameter_list|()
block|{
name|Object
name|owner
init|=
name|getOwnerObject
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|getOwnerType
argument_list|()
condition|)
block|{
case|case
name|sOwnerTypeClass
case|:
return|return
operator|(
operator|(
name|Class_
operator|)
name|owner
operator|)
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
return|;
case|case
name|sOwnerTypeConfig
case|:
return|return
operator|(
operator|(
name|InstrOfferingConfig
operator|)
name|owner
operator|)
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
return|;
case|case
name|sOwnerTypeCourse
case|:
return|return
operator|(
operator|(
name|CourseOffering
operator|)
name|owner
operator|)
operator|.
name|getSubjectAreaAbbv
argument_list|()
return|;
case|case
name|sOwnerTypeOffering
case|:
return|return
operator|(
operator|(
name|InstructionalOffering
operator|)
name|owner
operator|)
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
return|;
default|default :
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown owner type "
operator|+
name|getOwnerType
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getCourseNbr
parameter_list|()
block|{
name|Object
name|owner
init|=
name|getOwnerObject
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|getOwnerType
argument_list|()
condition|)
block|{
case|case
name|sOwnerTypeClass
case|:
return|return
operator|(
operator|(
name|Class_
operator|)
name|owner
operator|)
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
return|;
case|case
name|sOwnerTypeConfig
case|:
return|return
operator|(
operator|(
name|InstrOfferingConfig
operator|)
name|owner
operator|)
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
return|;
case|case
name|sOwnerTypeCourse
case|:
return|return
operator|(
operator|(
name|CourseOffering
operator|)
name|owner
operator|)
operator|.
name|getCourseNbr
argument_list|()
return|;
case|case
name|sOwnerTypeOffering
case|:
return|return
operator|(
operator|(
name|InstructionalOffering
operator|)
name|owner
operator|)
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
return|;
default|default :
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown owner type "
operator|+
name|getOwnerType
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getItype
parameter_list|()
block|{
switch|switch
condition|(
name|getOwnerType
argument_list|()
condition|)
block|{
case|case
name|sOwnerTypeClass
case|:
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.report.external"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|ext
init|=
operator|(
operator|(
name|Class_
operator|)
name|getOwnerObject
argument_list|()
operator|)
operator|.
name|getExternalUniqueId
argument_list|()
decl_stmt|;
return|return
operator|(
name|ext
operator|==
literal|null
condition|?
literal|""
else|:
name|ext
operator|)
return|;
block|}
else|else
return|return
operator|(
operator|(
name|Class_
operator|)
name|getOwnerObject
argument_list|()
operator|)
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
return|;
case|case
name|sOwnerTypeConfig
case|:
return|return
literal|"["
operator|+
operator|(
operator|(
name|InstrOfferingConfig
operator|)
name|getOwnerObject
argument_list|()
operator|)
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
return|;
case|case
name|sOwnerTypeCourse
case|:
case|case
name|sOwnerTypeOffering
case|:
return|return
literal|""
return|;
default|default :
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown owner type "
operator|+
name|getOwnerType
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getSection
parameter_list|()
block|{
switch|switch
condition|(
name|getOwnerType
argument_list|()
condition|)
block|{
case|case
name|sOwnerTypeClass
case|:
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|getOwnerObject
argument_list|()
decl_stmt|;
return|return
operator|(
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.report.suffix"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
operator|&&
name|clazz
operator|.
name|getClassSuffix
argument_list|()
operator|!=
literal|null
condition|?
name|clazz
operator|.
name|getClassSuffix
argument_list|()
else|:
name|clazz
operator|.
name|getSectionNumberString
argument_list|()
operator|)
return|;
case|case
name|sOwnerTypeConfig
case|:
if|if
condition|(
literal|"false"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.report.itype"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
condition|)
return|return
literal|"["
operator|+
operator|(
operator|(
name|InstrOfferingConfig
operator|)
name|getOwnerObject
argument_list|()
operator|)
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
return|;
case|case
name|sOwnerTypeCourse
case|:
case|case
name|sOwnerTypeOffering
case|:
return|return
literal|""
return|;
default|default :
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown owner type "
operator|+
name|getOwnerType
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|genName
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|String
name|name
init|=
name|pattern
decl_stmt|;
name|int
name|idx
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|name
operator|.
name|indexOf
argument_list|(
literal|'%'
argument_list|,
name|idx
operator|+
literal|1
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|idx
operator|=
name|name
operator|.
name|indexOf
argument_list|(
literal|'%'
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|char
name|code
init|=
name|name
operator|.
name|charAt
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
name|name4code
init|=
name|genName
argument_list|(
name|code
argument_list|)
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
operator|+
operator|(
name|name4code
operator|==
literal|null
condition|?
literal|""
else|:
name|name4code
operator|)
operator|+
name|name
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
comment|/**      * Basic codes      * s ... subject area      * c ... course number      * i ... itype abbv      * n ... section number      * x ... configuration name      * Additional codes      * d ... department abbv      * a ... class suffix (div-sec number)      * y ... itype suffix (a, b etc.)      * e ... class external id      * f ... course external id      * o ... offering external id      * t ... exam type suffix (tmtbl.exam.name.type.Final and tmtbl.exam.name.type.Midterm)      * I ... itype code      * p ... itype parent abbv      * P ... itype parent code      * _ ... space      */
specifier|protected
name|String
name|genName
parameter_list|(
name|char
name|code
parameter_list|)
block|{
switch|switch
condition|(
name|code
condition|)
block|{
case|case
literal|'_'
case|:
return|return
literal|" "
return|;
case|case
literal|'s'
case|:
return|return
name|getCourse
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
return|;
case|case
literal|'c'
case|:
return|return
name|getCourse
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
return|;
case|case
literal|'i'
case|:
switch|switch
condition|(
name|getOwnerType
argument_list|()
condition|)
block|{
case|case
name|sOwnerTypeClass
case|:
return|return
operator|(
operator|(
name|Class_
operator|)
name|getOwnerObject
argument_list|()
operator|)
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
return|;
default|default :
return|return
literal|""
return|;
block|}
case|case
literal|'n'
case|:
switch|switch
condition|(
name|getOwnerType
argument_list|()
condition|)
block|{
case|case
name|sOwnerTypeClass
case|:
return|return
operator|(
operator|(
name|Class_
operator|)
name|getOwnerObject
argument_list|()
operator|)
operator|.
name|getSectionNumberString
argument_list|()
return|;
default|default :
return|return
literal|""
return|;
block|}
case|case
literal|'x'
case|:
switch|switch
condition|(
name|getOwnerType
argument_list|()
condition|)
block|{
case|case
name|sOwnerTypeClass
case|:
return|return
operator|(
operator|(
name|Class_
operator|)
name|getOwnerObject
argument_list|()
operator|)
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getName
argument_list|()
return|;
case|case
name|sOwnerTypeConfig
case|:
return|return
operator|(
operator|(
name|InstrOfferingConfig
operator|)
name|getOwnerObject
argument_list|()
operator|)
operator|.
name|getName
argument_list|()
return|;
default|default :
return|return
literal|""
return|;
block|}
case|case
literal|'D'
case|:
return|return
name|getCourse
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
return|;
case|case
literal|'d'
case|:
name|Department
name|d
init|=
name|getCourse
argument_list|()
operator|.
name|getDepartment
argument_list|()
decl_stmt|;
return|return
operator|(
name|d
operator|.
name|getAbbreviation
argument_list|()
operator|==
literal|null
operator|||
name|d
operator|.
name|getAbbreviation
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
name|d
operator|.
name|getDeptCode
argument_list|()
else|:
name|d
operator|.
name|getAbbreviation
argument_list|()
operator|)
return|;
case|case
literal|'a'
case|:
switch|switch
condition|(
name|getOwnerType
argument_list|()
condition|)
block|{
case|case
name|sOwnerTypeClass
case|:
return|return
operator|(
operator|(
name|Class_
operator|)
name|getOwnerObject
argument_list|()
operator|)
operator|.
name|getClassSuffix
argument_list|()
return|;
default|default :
return|return
literal|""
return|;
block|}
case|case
literal|'y'
case|:
switch|switch
condition|(
name|getOwnerType
argument_list|()
condition|)
block|{
case|case
name|sOwnerTypeClass
case|:
return|return
operator|(
operator|(
name|Class_
operator|)
name|getOwnerObject
argument_list|()
operator|)
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
return|;
default|default :
return|return
literal|""
return|;
block|}
case|case
literal|'e'
case|:
switch|switch
condition|(
name|getOwnerType
argument_list|()
condition|)
block|{
case|case
name|sOwnerTypeClass
case|:
return|return
operator|(
operator|(
name|Class_
operator|)
name|getOwnerObject
argument_list|()
operator|)
operator|.
name|getExternalUniqueId
argument_list|()
return|;
default|default :
return|return
literal|""
return|;
block|}
case|case
literal|'f'
case|:
return|return
name|getCourse
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
return|;
case|case
literal|'o'
case|:
return|return
name|getCourse
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
return|;
case|case
literal|'t'
case|:
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.name.type."
operator|+
name|Exam
operator|.
name|sExamTypes
index|[
name|getExam
argument_list|()
operator|.
name|getExamType
argument_list|()
index|]
argument_list|)
return|;
case|case
literal|'I'
case|:
switch|switch
condition|(
name|getOwnerType
argument_list|()
condition|)
block|{
case|case
name|sOwnerTypeClass
case|:
return|return
operator|(
operator|(
name|Class_
operator|)
name|getOwnerObject
argument_list|()
operator|)
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|toString
argument_list|()
return|;
default|default :
return|return
literal|""
return|;
block|}
case|case
literal|'p'
case|:
switch|switch
condition|(
name|getOwnerType
argument_list|()
condition|)
block|{
case|case
name|sOwnerTypeClass
case|:
name|ItypeDesc
name|itype
init|=
operator|(
operator|(
name|Class_
operator|)
name|getOwnerObject
argument_list|()
operator|)
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
decl_stmt|;
while|while
condition|(
name|itype
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
name|itype
operator|=
name|itype
operator|.
name|getParent
argument_list|()
expr_stmt|;
return|return
name|itype
operator|.
name|getAbbv
argument_list|()
return|;
default|default :
return|return
literal|""
return|;
block|}
case|case
literal|'P'
case|:
switch|switch
condition|(
name|getOwnerType
argument_list|()
condition|)
block|{
case|case
name|sOwnerTypeClass
case|:
name|ItypeDesc
name|itype
init|=
operator|(
operator|(
name|Class_
operator|)
name|getOwnerObject
argument_list|()
operator|)
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
decl_stmt|;
while|while
condition|(
name|itype
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
name|itype
operator|=
name|itype
operator|.
name|getParent
argument_list|()
expr_stmt|;
return|return
name|itype
operator|.
name|getItype
argument_list|()
operator|.
name|toString
argument_list|()
return|;
default|default :
return|return
literal|""
return|;
block|}
block|}
return|return
literal|""
return|;
block|}
block|}
end_class

end_unit

