begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|LazyInitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseCourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|AcadAreaReservationComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SubjectAreaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|ComboBoxLookup
import|;
end_import

begin_class
specifier|public
class|class
name|CourseOffering
extends|extends
name|BaseCourseOffering
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|String
name|courseName
decl_stmt|;
comment|/** Request attribute name for list of course offerings */
specifier|public
specifier|static
specifier|final
name|String
name|CRS_OFFERING_LIST_ATTR_NAME
init|=
literal|"crsOfferingList"
decl_stmt|;
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|CourseOffering
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|CourseOffering
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Constructor for required fields 	 */
specifier|public
name|CourseOffering
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
name|subjectArea
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
name|instructionalOffering
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Boolean
name|isControl
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Integer
name|nbrExpectedStudents
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|courseNbr
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|,
name|subjectArea
argument_list|,
name|instructionalOffering
argument_list|,
name|isControl
argument_list|,
name|nbrExpectedStudents
argument_list|,
name|courseNbr
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
specifier|public
name|String
name|getCourseName
parameter_list|()
block|{
return|return
name|getSubjectAreaAbbv
argument_list|()
operator|+
literal|" "
operator|+
name|getCourseNbr
argument_list|()
return|;
block|}
specifier|public
name|String
name|getCourseNameWithTitle
parameter_list|()
block|{
return|return
name|getSubjectAreaAbbv
argument_list|()
operator|+
literal|" "
operator|+
name|getCourseNbr
argument_list|()
operator|+
operator|(
name|getTitle
argument_list|()
operator|!=
literal|null
condition|?
literal|" - "
operator|+
name|getTitle
argument_list|()
else|:
literal|""
operator|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|getSubjectAreaAbbv
argument_list|()
operator|+
literal|" "
operator|+
name|this
operator|.
name|getCourseNbr
argument_list|()
operator|+
operator|(
operator|(
name|this
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
operator|)
condition|?
literal|" - "
operator|+
name|this
operator|.
name|getTitle
argument_list|()
else|:
literal|""
operator|)
operator|)
return|;
block|}
comment|/** 	 * Same as isIsContol. Added so that beans in JSPs can access getter method 	 * @return true/false 	 */
specifier|public
name|Boolean
name|getIsControl
parameter_list|()
block|{
return|return
name|this
operator|.
name|isIsControl
argument_list|()
return|;
block|}
comment|/** 	 * Search for a particular course offering 	 * @param acadSessionId Academic Session 	 * @param subjAreaId Subject Area Unique Id 	 * @param courseNbr Course Number 	 * @return List object with matching course offering 	 */
specifier|public
specifier|static
name|List
name|search
parameter_list|(
name|Long
name|acadSessionId
parameter_list|,
name|String
name|subjAreaId
parameter_list|,
name|String
name|courseNbr
parameter_list|)
block|{
name|InstructionalOfferingDAO
name|iDao
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|iDao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|String
name|sql
init|=
literal|" from CourseOffering co "
operator|+
literal|" where co.uniqueCourseNbr.subjectArea.uniqueId=:subjArea"
operator|+
literal|" and co.uniqueCourseNbr.courseNbr = :crsNbr"
operator|+
literal|" and co.instructionalOffering.session.uniqueId = :acadSessionId"
decl_stmt|;
name|Query
name|query
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|query
operator|.
name|setString
argument_list|(
literal|"crsNbr"
argument_list|,
name|courseNbr
argument_list|)
expr_stmt|;
name|query
operator|.
name|setString
argument_list|(
literal|"subjArea"
argument_list|,
name|subjAreaId
argument_list|)
expr_stmt|;
name|query
operator|.
name|setLong
argument_list|(
literal|"acadSessionId"
argument_list|,
name|acadSessionId
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|List
name|l
init|=
name|query
operator|.
name|list
argument_list|()
decl_stmt|;
return|return
name|l
return|;
block|}
specifier|public
specifier|static
name|CourseOffering
name|findBySessionSubjAreaAbbvCourseNbr
parameter_list|(
name|Long
name|acadSessionId
parameter_list|,
name|String
name|subjAreaAbbv
parameter_list|,
name|String
name|courseNbr
parameter_list|)
block|{
name|InstructionalOfferingDAO
name|iDao
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|iDao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|String
name|sql
init|=
literal|" from CourseOffering co "
operator|+
literal|" where co.uniqueCourseNbr.subjectArea.subjectAreaAbbreviation=:subjArea"
operator|+
literal|" and co.uniqueCourseNbr.courseNbr = :crsNbr"
operator|+
literal|" and co.instructionalOffering.session.uniqueId = :acadSessionId"
decl_stmt|;
name|Query
name|query
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|query
operator|.
name|setString
argument_list|(
literal|"crsNbr"
argument_list|,
name|courseNbr
argument_list|)
expr_stmt|;
name|query
operator|.
name|setString
argument_list|(
literal|"subjArea"
argument_list|,
name|subjAreaAbbv
argument_list|)
expr_stmt|;
name|query
operator|.
name|setLong
argument_list|(
literal|"acadSessionId"
argument_list|,
name|acadSessionId
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|CourseOffering
operator|)
name|query
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
comment|/** 	 * Add a new course offering (instructional offering) to the database 	 * @param subjAreaId Subject Area Unique Id 	 * @param courseNbr Course Number 	 * @return CourseOffering object representing thenew course offering  	 * @throws Exception 	 */
specifier|public
specifier|static
specifier|synchronized
name|CourseOffering
name|addNew
parameter_list|(
name|String
name|subjAreaId
parameter_list|,
name|String
name|courseNbr
parameter_list|)
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
literal|null
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
name|CourseOffering
name|co
init|=
literal|null
decl_stmt|;
name|InstructionalOfferingDAO
name|idao
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
decl_stmt|;
name|Session
name|hibSession
init|=
name|idao
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
comment|/* 		    // Get Instr Offering Perm Id 		    String permId = ""; 		    String sql = "select timetable.instr_offr_permid_seq.nextval from dual"; 		    stmt = Database.execute(sql); 		    rs = stmt.getResultSet();   		    if(rs.next()) { 		        permId = rs.getString(1); 		    } 		    else { 		        throw new Exception("Could not retrieve instr offering perm id"); 		    }             */
comment|// Add new Course Offering
name|SubjectArea
name|subjArea
init|=
operator|new
name|SubjectAreaDAO
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|subjAreaId
argument_list|)
argument_list|)
decl_stmt|;
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
name|acadSession
init|=
name|subjArea
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|CourseOfferingDAO
name|cdao
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
decl_stmt|;
name|co
operator|=
operator|new
name|CourseOffering
argument_list|()
expr_stmt|;
name|co
operator|.
name|setSubjectArea
argument_list|(
name|subjArea
argument_list|)
expr_stmt|;
name|co
operator|.
name|setCourseNbr
argument_list|(
name|courseNbr
argument_list|)
expr_stmt|;
name|co
operator|.
name|setProjectedDemand
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|co
operator|.
name|setDemand
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|co
operator|.
name|setNbrExpectedStudents
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|co
operator|.
name|setIsControl
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|co
operator|.
name|setPermId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|HashSet
name|s
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|s
operator|.
name|add
argument_list|(
name|co
argument_list|)
expr_stmt|;
comment|// Add new Instructional Offering
name|InstructionalOffering
name|io
init|=
operator|new
name|InstructionalOffering
argument_list|()
decl_stmt|;
name|io
operator|.
name|setNotOffered
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|io
operator|.
name|setDesignatorRequired
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|io
operator|.
name|setSession
argument_list|(
name|acadSession
argument_list|)
expr_stmt|;
name|io
operator|.
name|generateInstrOfferingPermId
argument_list|()
expr_stmt|;
name|io
operator|.
name|setLimit
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|idao
operator|.
name|saveOrUpdate
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|idao
operator|.
name|getSession
argument_list|()
operator|.
name|refresh
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|co
operator|.
name|setInstructionalOffering
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|io
operator|.
name|addTocourseOfferings
argument_list|(
name|co
argument_list|)
expr_stmt|;
name|cdao
operator|.
name|saveOrUpdate
argument_list|(
name|co
argument_list|)
expr_stmt|;
name|cdao
operator|.
name|getSession
argument_list|()
operator|.
name|refresh
argument_list|(
name|co
argument_list|)
expr_stmt|;
name|cdao
operator|.
name|getSession
argument_list|()
operator|.
name|refresh
argument_list|(
name|subjArea
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//Database.closeConnObjs(stmt, rs);
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Could not create new course offering: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
comment|//if (hibSession!=null&& hibSession.isOpen()) hibSession.close();
block|}
return|return
name|co
return|;
block|}
comment|/** 	 * Get a list of all controlling courses for the academic session 	 * @param sessionId Academic Session Unique Id 	 * @return Vector containing ComboBoxLookup objects 	 * @see ComboBoxLookup 	 */
specifier|public
specifier|static
name|Vector
name|getControllingCourses
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|Vector
name|l
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select co.uniqueId, co.subjectAreaAbbv, co.courseNbr from CourseOffering co where co.isControl=true and co.subjectArea.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|l
operator|.
name|addElement
argument_list|(
operator|new
name|ComboBoxLookup
argument_list|(
name|o
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|o
index|[
literal|1
index|]
operator|+
literal|" "
operator|+
name|o
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|l
return|;
block|}
specifier|public
name|Department
name|getDepartment
parameter_list|()
block|{
name|Department
name|dept
init|=
literal|null
decl_stmt|;
try|try
block|{
name|dept
operator|=
name|this
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getDepartment
argument_list|()
expr_stmt|;
if|if
condition|(
name|dept
operator|.
name|toString
argument_list|()
operator|==
literal|null
condition|)
block|{
block|}
block|}
catch|catch
parameter_list|(
name|LazyInitializationException
name|lie
parameter_list|)
block|{
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|refresh
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|dept
operator|=
name|this
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getDepartment
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|dept
operator|)
return|;
block|}
comment|/** The course as well as all its classes are editable by the user */
specifier|public
name|boolean
name|isFullyEditableBy
parameter_list|(
name|User
name|user
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|user
operator|.
name|isAdmin
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|getDepartment
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|TimetableManager
name|tm
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|tm
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|tm
operator|.
name|getDepartments
argument_list|()
operator|.
name|contains
argument_list|(
name|getDepartment
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|getDepartment
argument_list|()
operator|.
name|effectiveStatusType
argument_list|()
operator|.
name|canOwnerEdit
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getInstructionalOffering
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i1
init|=
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|ioc
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ss
operator|.
name|canUserEdit
argument_list|(
name|user
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|isEditableBy
parameter_list|(
name|User
name|user
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|user
operator|.
name|isAdmin
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|getDepartment
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|TimetableManager
name|tm
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|tm
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|tm
operator|.
name|getDepartments
argument_list|()
operator|.
name|contains
argument_list|(
name|getDepartment
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|getDepartment
argument_list|()
operator|.
name|effectiveStatusType
argument_list|()
operator|.
name|canOwnerEdit
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|isViewableBy
parameter_list|(
name|User
name|user
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|user
operator|.
name|isAdmin
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|getDepartment
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|isEditableBy
argument_list|(
name|user
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|getInstructionalOffering
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i1
init|=
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|ioc
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|canUserView
argument_list|(
name|user
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|List
name|getCourseOfferingDemands
parameter_list|()
block|{
if|if
condition|(
name|getPermId
argument_list|()
operator|!=
literal|null
condition|)
return|return
operator|(
operator|new
name|CourseOfferingDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select d from LastLikeCourseDemand d where d.coursePermId=:permId and d.subjectArea.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"permId"
argument_list|,
name|getPermId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getSubjectArea
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
else|else
return|return
operator|(
operator|new
name|CourseOfferingDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select d from LastLikeCourseDemand d where d.subjectArea.uniqueId=:subjectAreaId and d.courseNbr=:courseNbr"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"subjectAreaId"
argument_list|,
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"courseNbr"
argument_list|,
name|getCourseNbr
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
comment|//TODO: to distinguish between last like semester student demands and all student demands in the future
specifier|public
name|List
name|getLastLikeSemesterCourseOfferingDemands
parameter_list|()
block|{
return|return
name|getCourseOfferingDemands
argument_list|()
return|;
block|}
comment|//TODO Reservations functionality to be removed later
comment|/**      * Returns a list containing academic area reservations for a Course Offering      * @param acadArea include academic area reservations      * @return collection of reservations (collection is empty is none found)      */
specifier|public
name|Collection
name|getReservations
parameter_list|(
name|boolean
name|acadArea
parameter_list|)
block|{
name|Collection
name|resv
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
if|if
condition|(
name|acadArea
operator|&&
name|this
operator|.
name|getAcadAreaReservations
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
name|c
init|=
operator|new
name|Vector
argument_list|(
name|this
operator|.
name|getAcadAreaReservations
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|c
argument_list|,
operator|new
name|AcadAreaReservationComparator
argument_list|()
argument_list|)
expr_stmt|;
name|resv
operator|.
name|addAll
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|resv
return|;
block|}
comment|/**      * Returns effective reservations for the config      * @param acadArea include academic area reservations      * @return collection of reservations (collection is empty is none found)      */
specifier|public
name|Collection
name|effectiveReservations
parameter_list|(
name|boolean
name|acadArea
parameter_list|)
block|{
comment|//TODO hfernan - effective reservations - if applicable
return|return
name|getReservations
argument_list|(
name|acadArea
argument_list|)
return|;
block|}
comment|/**      * Clones the course Offering      * Note: It does not set the Instructional Offering      */
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|CourseOffering
name|co
init|=
operator|new
name|CourseOffering
argument_list|()
decl_stmt|;
name|co
operator|.
name|setCourseNbr
argument_list|(
name|this
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|co
operator|.
name|setDemand
argument_list|(
name|this
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|co
operator|.
name|setPermId
argument_list|(
name|this
operator|.
name|getPermId
argument_list|()
argument_list|)
expr_stmt|;
name|co
operator|.
name|setNbrExpectedStudents
argument_list|(
name|this
operator|.
name|getNbrExpectedStudents
argument_list|()
argument_list|)
expr_stmt|;
name|co
operator|.
name|setProjectedDemand
argument_list|(
name|this
operator|.
name|getProjectedDemand
argument_list|()
argument_list|)
expr_stmt|;
name|co
operator|.
name|setSubjectArea
argument_list|(
name|this
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
name|co
operator|.
name|setSubjectAreaAbbv
argument_list|(
name|this
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|co
operator|.
name|setTitle
argument_list|(
name|this
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|co
operator|.
name|setDemandOffering
argument_list|(
name|this
operator|.
name|getDemandOffering
argument_list|()
argument_list|)
expr_stmt|;
name|co
operator|.
name|setDemandOfferingType
argument_list|(
name|this
operator|.
name|getDemandOfferingType
argument_list|()
argument_list|)
expr_stmt|;
name|co
operator|.
name|setExternalUniqueId
argument_list|(
name|this
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|co
operator|.
name|setScheduleBookNote
argument_list|(
name|this
operator|.
name|getScheduleBookNote
argument_list|()
argument_list|)
expr_stmt|;
name|co
operator|.
name|setIsControl
argument_list|(
name|this
operator|.
name|getIsControl
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|co
return|;
block|}
comment|//End
specifier|public
specifier|static
name|List
name|findAll
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
return|return
operator|new
name|CourseOfferingDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c from CourseOffering c where c.subjectArea.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|CourseOffering
name|findBySubjectAreaCourseNbr
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|String
name|subjectAreaAbbv
parameter_list|,
name|String
name|courseNbr
parameter_list|)
block|{
return|return
operator|(
name|CourseOffering
operator|)
operator|new
name|CourseOfferingDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c from CourseOffering c where "
operator|+
literal|"c.subjectArea.session.uniqueId=:sessionId and "
operator|+
literal|"c.subjectArea.subjectAreaAbbreviation=:subjectAreaAbbv and "
operator|+
literal|"c.courseNbr=:courseNbr"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"subjectAreaAbbv"
argument_list|,
name|subjectAreaAbbv
argument_list|)
operator|.
name|setString
argument_list|(
literal|"courseNbr"
argument_list|,
name|courseNbr
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
block|}
end_class

end_unit

