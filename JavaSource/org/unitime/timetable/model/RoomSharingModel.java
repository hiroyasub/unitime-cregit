begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|RequiredTimeTableModel
import|;
end_import

begin_class
specifier|public
class|class
name|RoomSharingModel
extends|extends
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomSharingModel
implements|implements
name|RequiredTimeTableModel
block|{
specifier|private
name|boolean
index|[]
index|[]
name|iEditable
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iDefaultSelection
init|=
literal|0
decl_stmt|;
specifier|private
name|Set
name|iEditingDepartments
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iAllowFreeForAll
init|=
literal|true
decl_stmt|;
specifier|private
name|String
index|[]
name|iDepartmentNames
init|=
literal|null
decl_stmt|;
specifier|private
name|String
index|[]
name|iDepartmentAbbvs
init|=
literal|null
decl_stmt|;
specifier|private
name|Color
index|[]
name|iDepartmentColors
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
name|Color
index|[]
name|sDepartmentColors
init|=
operator|new
name|Color
index|[]
block|{
operator|new
name|Color
argument_list|(
literal|240
argument_list|,
literal|50
argument_list|,
literal|240
argument_list|)
block|,
operator|new
name|Color
argument_list|(
literal|50
argument_list|,
literal|240
argument_list|,
literal|240
argument_list|)
block|,
operator|new
name|Color
argument_list|(
literal|240
argument_list|,
literal|240
argument_list|,
literal|50
argument_list|)
block|,
operator|new
name|Color
argument_list|(
literal|240
argument_list|,
literal|50
argument_list|,
literal|50
argument_list|)
block|,
operator|new
name|Color
argument_list|(
literal|50
argument_list|,
literal|240
argument_list|,
literal|50
argument_list|)
block|,
operator|new
name|Color
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|,
literal|240
argument_list|)
block|,
operator|new
name|Color
argument_list|(
literal|150
argument_list|,
literal|100
argument_list|,
literal|50
argument_list|)
block|,
operator|new
name|Color
argument_list|(
literal|50
argument_list|,
literal|100
argument_list|,
literal|150
argument_list|)
block|,
operator|new
name|Color
argument_list|(
literal|150
argument_list|,
literal|50
argument_list|,
literal|100
argument_list|)
block|,
operator|new
name|Color
argument_list|(
literal|100
argument_list|,
literal|150
argument_list|,
literal|50
argument_list|)
block|}
decl_stmt|;
specifier|public
specifier|static
name|Color
name|sNotAvailableColor
init|=
operator|new
name|Color
argument_list|(
literal|150
argument_list|,
literal|150
argument_list|,
literal|150
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|Color
name|sFreeForAllColor
init|=
operator|new
name|Color
argument_list|(
literal|240
argument_list|,
literal|240
argument_list|,
literal|240
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|String
name|sNotAvailableName
init|=
literal|"Not Available"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sFreeForAllName
init|=
literal|"Free For All"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sNotAvailableNameAbbv
init|=
literal|"N/A"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sFreeForAllNameAbbv
init|=
literal|"Free"
decl_stmt|;
specifier|public
name|RoomSharingModel
parameter_list|(
name|Location
name|location
parameter_list|,
name|Set
name|editingDepartmentIds
parameter_list|)
block|{
name|this
argument_list|(
name|location
argument_list|,
name|editingDepartmentIds
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RoomSharingModel
parameter_list|(
name|Location
name|location
parameter_list|,
name|Set
name|editingDepartmentIds
parameter_list|,
name|Collection
name|departments
parameter_list|)
block|{
name|Collection
name|givenDepartments
init|=
name|departments
decl_stmt|;
name|iPreference
operator|=
operator|new
name|Long
index|[
name|getNrDays
argument_list|()
index|]
index|[
name|getNrTimes
argument_list|()
index|]
expr_stmt|;
name|iEditable
operator|=
operator|new
name|boolean
index|[
name|getNrDays
argument_list|()
index|]
index|[
name|getNrTimes
argument_list|()
index|]
expr_stmt|;
name|Hashtable
name|oldDeptPrefs
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|char
name|pref
init|=
literal|'0'
decl_stmt|;
if|if
condition|(
name|location
operator|.
name|getManagerIds
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|StringTokenizer
name|stk
init|=
operator|new
name|StringTokenizer
argument_list|(
name|location
operator|.
name|getManagerIds
argument_list|()
argument_list|,
literal|","
argument_list|)
init|;
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|Long
name|id
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|stk
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
name|oldDeptPrefs
operator|.
name|put
argument_list|(
operator|new
name|Character
argument_list|(
name|pref
operator|++
argument_list|)
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|departments
operator|==
literal|null
condition|)
block|{
name|departments
operator|=
operator|new
name|Vector
argument_list|(
name|location
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TreeSet
name|managers
init|=
operator|new
name|TreeSet
argument_list|(
name|location
operator|.
name|getRoomDepts
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|managers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|mgr
init|=
operator|(
name|RoomDept
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|departments
operator|.
name|add
argument_list|(
name|mgr
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|iDepartmentIds
operator|=
operator|new
name|Long
index|[
name|departments
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|iDepartmentAbbvs
operator|=
operator|new
name|String
index|[
name|departments
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|iDepartmentNames
operator|=
operator|new
name|String
index|[
name|departments
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|iDepartmentColors
operator|=
operator|new
name|Color
index|[
name|departments
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|iEditingDepartments
operator|=
name|editingDepartmentIds
expr_stmt|;
name|iDepartmentIdx
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|departments
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|Object
name|o
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Department
name|mgr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|RoomDept
condition|)
name|mgr
operator|=
operator|(
operator|(
name|RoomDept
operator|)
name|o
operator|)
operator|.
name|getDepartment
argument_list|()
expr_stmt|;
if|else if
condition|(
name|o
operator|instanceof
name|Department
condition|)
name|mgr
operator|=
operator|(
name|Department
operator|)
name|o
expr_stmt|;
if|else if
condition|(
name|o
operator|instanceof
name|Long
condition|)
name|mgr
operator|=
operator|(
operator|new
name|DepartmentDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
operator|(
name|Long
operator|)
name|o
argument_list|)
expr_stmt|;
if|if
condition|(
name|mgr
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Department "
operator|+
name|o
operator|+
literal|" not found."
argument_list|)
throw|;
name|iDepartmentAbbvs
index|[
name|idx
index|]
operator|=
name|mgr
operator|.
name|getShortLabel
argument_list|()
expr_stmt|;
name|iDepartmentNames
index|[
name|idx
index|]
operator|=
name|mgr
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|"-"
operator|+
name|mgr
operator|.
name|getName
argument_list|()
expr_stmt|;
name|iDepartmentIds
index|[
name|idx
index|]
operator|=
name|mgr
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
if|if
condition|(
name|givenDepartments
operator|==
literal|null
operator|&&
name|mgr
operator|.
name|getRoomSharingColor
argument_list|()
operator|!=
literal|null
condition|)
name|iDepartmentColors
index|[
name|idx
index|]
operator|=
name|Department
operator|.
name|hex2color
argument_list|(
name|mgr
operator|.
name|getRoomSharingColor
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|iDepartmentColors
index|[
name|idx
index|]
operator|=
name|Department
operator|.
name|hex2color
argument_list|(
name|mgr
operator|.
name|getRoomSharingColor
argument_list|(
name|departments
argument_list|)
argument_list|)
expr_stmt|;
name|iDepartmentIdx
operator|.
name|put
argument_list|(
name|mgr
operator|.
name|getUniqueId
argument_list|()
argument_list|,
operator|new
name|Integer
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iEditingDepartments
operator|!=
literal|null
condition|)
block|{
name|boolean
name|all
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iDepartmentIds
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|!
name|iEditingDepartments
operator|.
name|contains
argument_list|(
name|iDepartmentIds
index|[
name|i
index|]
argument_list|)
condition|)
name|all
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|all
condition|)
name|iEditingDepartments
operator|=
literal|null
expr_stmt|;
block|}
name|boolean
name|allEditable
init|=
operator|(
name|iEditingDepartments
operator|==
literal|null
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|allEditable
condition|)
block|{
name|boolean
name|all
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|location
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|mgr
init|=
operator|(
name|RoomDept
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|iEditingDepartments
operator|.
name|contains
argument_list|(
name|mgr
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
name|all
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|all
condition|)
name|allEditable
operator|=
literal|true
expr_stmt|;
block|}
name|String
name|pattern
init|=
name|location
operator|.
name|getPattern
argument_list|()
decl_stmt|;
name|idx
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|getNrDays
argument_list|()
condition|;
name|d
operator|++
control|)
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|getNrTimes
argument_list|()
condition|;
name|t
operator|++
control|)
block|{
name|pref
operator|=
operator|(
name|pattern
operator|!=
literal|null
operator|&&
name|idx
operator|<
name|pattern
operator|.
name|length
argument_list|()
condition|?
name|pattern
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
else|:
name|sDefaultPrefChar
operator|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
if|if
condition|(
name|pref
operator|==
name|sNotAvailablePrefChar
condition|)
block|{
name|iPreference
index|[
name|d
index|]
index|[
name|t
index|]
operator|=
name|sNotAvailablePref
expr_stmt|;
name|iEditable
index|[
name|d
index|]
index|[
name|t
index|]
operator|=
name|allEditable
expr_stmt|;
block|}
if|else if
condition|(
name|pref
operator|==
name|sFreeForAllPrefChar
condition|)
block|{
name|iPreference
index|[
name|d
index|]
index|[
name|t
index|]
operator|=
name|sFreeForAllPref
expr_stmt|;
name|iEditable
index|[
name|d
index|]
index|[
name|t
index|]
operator|=
name|allEditable
expr_stmt|;
block|}
else|else
block|{
name|Long
name|id
init|=
operator|(
name|Long
operator|)
name|oldDeptPrefs
operator|.
name|get
argument_list|(
operator|new
name|Character
argument_list|(
name|pref
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|boolean
name|containsId
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iDepartmentIds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|iDepartmentIds
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|containsId
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|containsId
condition|)
name|id
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|iPreference
index|[
name|d
index|]
index|[
name|t
index|]
operator|=
name|sDefaultPref
expr_stmt|;
name|iEditable
index|[
name|d
index|]
index|[
name|t
index|]
operator|=
name|allEditable
expr_stmt|;
block|}
else|else
block|{
name|iPreference
index|[
name|d
index|]
index|[
name|t
index|]
operator|=
name|id
expr_stmt|;
name|iEditable
index|[
name|d
index|]
index|[
name|t
index|]
operator|=
operator|(
name|allEditable
condition|?
literal|true
else|:
name|iEditingDepartments
operator|.
name|contains
argument_list|(
name|id
argument_list|)
operator|)
expr_stmt|;
empty_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|String
name|getManagerIds
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getNrDepartments
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|iDepartmentIds
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getStartTime
parameter_list|(
name|int
name|time
parameter_list|)
block|{
name|int
name|min
init|=
literal|6
operator|*
name|time
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|/
literal|10
decl_stmt|;
name|int
name|startHour
init|=
name|min
operator|/
literal|60
decl_stmt|;
name|int
name|startMinute
init|=
name|min
operator|%
literal|60
decl_stmt|;
return|return
operator|(
name|startHour
operator|>
literal|12
condition|?
name|startHour
operator|-
literal|12
else|:
name|startHour
operator|)
operator|+
literal|":"
operator|+
operator|(
name|startMinute
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|startMinute
operator|+
operator|(
name|startHour
operator|>=
literal|12
condition|?
literal|"p"
else|:
literal|"a"
operator|)
return|;
block|}
specifier|public
name|String
name|getEndTime
parameter_list|(
name|int
name|time
parameter_list|)
block|{
name|int
name|min
init|=
literal|6
operator|*
operator|(
name|time
operator|+
literal|1
operator|)
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|/
literal|10
decl_stmt|;
name|int
name|endHour
init|=
name|min
operator|/
literal|60
decl_stmt|;
name|int
name|endMinute
init|=
name|min
operator|%
literal|60
decl_stmt|;
return|return
operator|(
name|endHour
operator|>
literal|12
condition|?
name|endHour
operator|-
literal|12
else|:
name|endHour
operator|)
operator|+
literal|":"
operator|+
operator|(
name|endMinute
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|endMinute
operator|+
operator|(
name|endHour
operator|>=
literal|12
condition|?
literal|"p"
else|:
literal|"a"
operator|)
return|;
block|}
specifier|public
name|String
name|getDayHeader
parameter_list|(
name|int
name|day
parameter_list|)
block|{
return|return
name|Constants
operator|.
name|DAY_NAME
index|[
name|day
index|]
return|;
block|}
specifier|private
specifier|static
name|String
name|xChars
init|=
literal|"0123456789abcdefghijklmnopqrstuvwxyz -"
decl_stmt|;
specifier|public
name|String
name|getPreferencesHex
parameter_list|()
block|{
name|int
index|[]
name|limit
init|=
name|getSelectionLimits
argument_list|(
name|getDefaultSelection
argument_list|()
argument_list|)
decl_stmt|;
name|BigInteger
name|idn
init|=
operator|new
name|BigInteger
argument_list|(
literal|"0"
argument_list|)
decl_stmt|;
name|BigInteger
name|mxColor
init|=
operator|new
name|BigInteger
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
literal|0x1000000
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iDepartmentColors
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Color
name|c
init|=
name|iDepartmentColors
index|[
name|i
index|]
decl_stmt|;
name|idn
operator|=
name|idn
operator|.
name|multiply
argument_list|(
name|mxColor
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BigInteger
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|c
operator|.
name|getRGB
argument_list|()
operator|&
literal|0xFFFFFF
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|BigInteger
name|mxLen
init|=
operator|new
name|BigInteger
argument_list|(
literal|"16"
argument_list|)
decl_stmt|;
name|BigInteger
name|mxPref
init|=
operator|new
name|BigInteger
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
literal|2
operator|+
name|getPreferenceNames
argument_list|()
operator|.
name|length
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|nr
init|=
literal|0
decl_stmt|;
name|Long
name|px
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
name|limit
index|[
literal|2
index|]
init|;
name|d
operator|<=
name|limit
index|[
literal|3
index|]
condition|;
name|d
operator|++
control|)
for|for
control|(
name|int
name|t
init|=
name|limit
index|[
literal|0
index|]
init|;
name|t
operator|<=
name|limit
index|[
literal|1
index|]
condition|;
name|t
operator|++
control|)
block|{
name|Long
name|preference
init|=
name|iPreference
index|[
name|d
index|]
index|[
name|t
index|]
decl_stmt|;
if|if
condition|(
name|px
operator|==
literal|null
condition|)
block|{
name|px
operator|=
name|preference
expr_stmt|;
name|nr
operator|=
literal|1
expr_stmt|;
block|}
if|else if
condition|(
name|px
operator|.
name|equals
argument_list|(
name|preference
argument_list|)
operator|&&
name|nr
operator|<
literal|16
condition|)
block|{
name|nr
operator|++
expr_stmt|;
block|}
else|else
block|{
name|int
name|x
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|px
operator|.
name|equals
argument_list|(
name|sNotAvailablePref
argument_list|)
condition|)
name|x
operator|=
name|getNrDepartments
argument_list|()
expr_stmt|;
if|else if
condition|(
name|px
operator|.
name|equals
argument_list|(
name|sFreeForAllPref
argument_list|)
condition|)
name|x
operator|=
name|getNrDepartments
argument_list|()
operator|+
literal|1
expr_stmt|;
else|else
name|x
operator|=
name|getIndex
argument_list|(
name|px
argument_list|)
expr_stmt|;
name|idn
operator|=
name|idn
operator|.
name|multiply
argument_list|(
name|mxLen
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BigInteger
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|nr
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|multiply
argument_list|(
name|mxPref
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BigInteger
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|x
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|px
operator|=
name|preference
expr_stmt|;
name|nr
operator|=
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|px
operator|!=
literal|null
condition|)
block|{
name|int
name|x
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|px
operator|.
name|equals
argument_list|(
name|sNotAvailablePref
argument_list|)
condition|)
name|x
operator|=
name|getNrDepartments
argument_list|()
expr_stmt|;
if|else if
condition|(
name|px
operator|.
name|equals
argument_list|(
name|sFreeForAllPref
argument_list|)
condition|)
name|x
operator|=
name|getNrDepartments
argument_list|()
operator|+
literal|1
expr_stmt|;
else|else
name|x
operator|=
name|getIndex
argument_list|(
name|px
argument_list|)
expr_stmt|;
name|idn
operator|=
name|idn
operator|.
name|multiply
argument_list|(
name|mxLen
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BigInteger
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|nr
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|multiply
argument_list|(
name|mxPref
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BigInteger
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|x
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|StringBuffer
name|s
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"R"
operator|+
name|iDepartmentColors
operator|.
name|length
operator|+
literal|"_"
operator|+
operator|(
name|limit
index|[
literal|1
index|]
operator|-
name|limit
index|[
literal|0
index|]
operator|)
operator|+
literal|"x"
operator|+
operator|(
name|limit
index|[
literal|3
index|]
operator|-
name|limit
index|[
literal|2
index|]
operator|)
operator|+
literal|"_"
argument_list|)
decl_stmt|;
name|BigInteger
name|radix
init|=
operator|new
name|BigInteger
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|xChars
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|idn
operator|.
name|bitLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|x
init|=
name|idn
operator|.
name|mod
argument_list|(
name|radix
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|idn
operator|=
name|idn
operator|.
name|divide
argument_list|(
name|radix
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|xChars
operator|.
name|charAt
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|s
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getFileName
parameter_list|()
block|{
return|return
name|getPreferencesHex
argument_list|()
return|;
block|}
specifier|public
name|void
name|setPreference
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|time
parameter_list|,
name|String
name|pref
parameter_list|)
block|{
name|Long
name|p
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|pref
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
name|sFreeForAllPref
argument_list|)
operator|||
name|p
operator|.
name|equals
argument_list|(
name|sNotAvailablePref
argument_list|)
operator|||
name|getIndex
argument_list|(
name|p
argument_list|)
operator|>=
literal|0
condition|)
name|iPreference
index|[
name|day
index|]
index|[
name|time
index|]
operator|=
name|p
expr_stmt|;
else|else
name|iPreference
index|[
name|day
index|]
index|[
name|time
index|]
operator|=
name|sDefaultPref
expr_stmt|;
block|}
specifier|public
name|String
name|getPreference
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|time
parameter_list|)
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|iPreference
index|[
name|day
index|]
index|[
name|time
index|]
argument_list|)
return|;
block|}
specifier|public
name|String
name|getFieldText
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|time
parameter_list|)
block|{
return|return
name|getPreference
argument_list|(
name|day
argument_list|,
name|time
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isEditable
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|time
parameter_list|)
block|{
return|return
name|iEditable
index|[
name|day
index|]
index|[
name|time
index|]
return|;
block|}
specifier|public
name|void
name|setPreferences
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
try|try
block|{
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|getNrDays
argument_list|()
condition|;
name|d
operator|++
control|)
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|getNrTimes
argument_list|()
condition|;
name|t
operator|++
control|)
block|{
name|char
name|pref
init|=
operator|(
name|pattern
operator|!=
literal|null
operator|&&
name|idx
operator|<
name|pattern
operator|.
name|length
argument_list|()
condition|?
name|pattern
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
else|:
name|sDefaultPrefChar
operator|)
decl_stmt|;
name|idx
operator|++
expr_stmt|;
if|if
condition|(
name|pref
operator|==
name|sNotAvailablePrefChar
condition|)
block|{
name|iPreference
index|[
name|d
index|]
index|[
name|t
index|]
operator|=
name|sNotAvailablePref
expr_stmt|;
name|iEditable
index|[
name|d
index|]
index|[
name|t
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|pref
operator|==
name|sFreeForAllPrefChar
condition|)
block|{
name|iPreference
index|[
name|d
index|]
index|[
name|t
index|]
operator|=
name|sFreeForAllPref
expr_stmt|;
name|iEditable
index|[
name|d
index|]
index|[
name|t
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|iPreference
index|[
name|d
index|]
index|[
name|t
index|]
operator|=
name|iDepartmentIds
index|[
operator|(
name|int
operator|)
operator|(
name|pref
operator|-
literal|'0'
operator|)
index|]
expr_stmt|;
name|iEditable
index|[
name|d
index|]
index|[
name|t
index|]
operator|=
operator|(
name|iEditingDepartments
operator|==
literal|null
condition|?
literal|true
else|:
name|iEditingDepartments
operator|.
name|contains
argument_list|(
name|iPreference
index|[
name|d
index|]
index|[
name|t
index|]
argument_list|)
operator|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|e
parameter_list|)
block|{
block|}
block|}
specifier|public
name|boolean
name|isExactTime
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|getExactDays
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|int
name|getExactStartSlot
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|void
name|setExactDays
parameter_list|(
name|int
name|days
parameter_list|)
block|{
block|}
empty_stmt|;
specifier|public
name|void
name|setExactStartSlot
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
block|}
empty_stmt|;
specifier|public
name|String
name|getDefaultPreference
parameter_list|()
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|sDefaultPref
argument_list|)
return|;
block|}
specifier|public
name|Color
name|getBorder
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|time
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|String
index|[]
name|getPreferenceNames
parameter_list|()
block|{
name|String
index|[]
name|ret
init|=
operator|new
name|String
index|[
name|getNrDepartments
argument_list|()
operator|+
operator|(
name|iAllowFreeForAll
condition|?
literal|2
else|:
literal|1
operator|)
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getNrDepartments
argument_list|()
condition|;
name|i
operator|++
control|)
name|ret
index|[
name|idx
operator|++
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|iDepartmentIds
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|ret
index|[
name|idx
operator|++
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|sNotAvailablePref
argument_list|)
expr_stmt|;
if|if
condition|(
name|iAllowFreeForAll
condition|)
name|ret
index|[
name|idx
operator|++
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|sFreeForAllPref
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|Color
name|getPreferenceColor
parameter_list|(
name|String
name|pref
parameter_list|)
block|{
name|Long
name|p
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|pref
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
name|sFreeForAllPref
argument_list|)
condition|)
return|return
name|sFreeForAllColor
return|;
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
name|sNotAvailablePref
argument_list|)
condition|)
return|return
name|sNotAvailableColor
return|;
name|int
name|idx
init|=
name|getIndex
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
return|return
name|Color
operator|.
name|BLACK
return|;
return|return
name|iDepartmentColors
index|[
name|idx
index|]
return|;
block|}
specifier|public
name|String
name|getPreferenceText
parameter_list|(
name|String
name|pref
parameter_list|)
block|{
name|Long
name|p
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|pref
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
name|sFreeForAllPref
argument_list|)
condition|)
return|return
name|sFreeForAllName
return|;
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
name|sNotAvailablePref
argument_list|)
condition|)
return|return
name|sNotAvailableName
return|;
return|return
operator|(
name|iDepartmentNames
operator|==
literal|null
condition|?
literal|"Department "
operator|+
operator|(
literal|1
operator|+
name|getIndex
argument_list|(
name|p
argument_list|)
operator|)
else|:
name|iDepartmentNames
index|[
name|getIndex
argument_list|(
name|p
argument_list|)
index|]
operator|)
return|;
block|}
specifier|public
name|String
name|getPreferenceAbbv
parameter_list|(
name|Long
name|deptId
parameter_list|)
block|{
if|if
condition|(
name|deptId
operator|.
name|equals
argument_list|(
name|sFreeForAllPref
argument_list|)
condition|)
return|return
name|sFreeForAllNameAbbv
return|;
if|if
condition|(
name|deptId
operator|.
name|equals
argument_list|(
name|sNotAvailablePref
argument_list|)
condition|)
return|return
name|sNotAvailableNameAbbv
return|;
return|return
operator|(
name|iDepartmentAbbvs
operator|==
literal|null
condition|?
literal|"D"
operator|+
operator|(
literal|1
operator|+
name|getIndex
argument_list|(
name|deptId
argument_list|)
operator|)
else|:
name|iDepartmentAbbvs
index|[
name|getIndex
argument_list|(
name|deptId
argument_list|)
index|]
operator|)
return|;
block|}
specifier|public
name|int
name|getNrSelections
parameter_list|()
block|{
return|return
literal|5
return|;
block|}
specifier|public
name|String
name|getSelectionName
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
switch|switch
condition|(
name|idx
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|"Workdays&times; Daytime"
return|;
case|case
literal|1
case|:
return|return
literal|"All Week&times; Daytime"
return|;
case|case
literal|2
case|:
return|return
literal|"Workdays&times; Evening"
return|;
case|case
literal|3
case|:
return|return
literal|"All Week&times; Evening"
return|;
case|case
literal|4
case|:
return|return
literal|"All Week&times; All Times"
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|int
index|[]
name|getSelectionLimits
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
switch|switch
condition|(
name|idx
condition|)
block|{
case|case
literal|0
case|:
return|return
operator|new
name|int
index|[]
block|{
literal|15
block|,
literal|36
block|,
literal|0
block|,
literal|4
block|}
return|;
case|case
literal|1
case|:
return|return
operator|new
name|int
index|[]
block|{
literal|15
block|,
literal|36
block|,
literal|0
block|,
literal|6
block|}
return|;
case|case
literal|2
case|:
return|return
operator|new
name|int
index|[]
block|{
literal|37
block|,
literal|47
block|,
literal|0
block|,
literal|4
block|}
return|;
case|case
literal|3
case|:
return|return
operator|new
name|int
index|[]
block|{
literal|37
block|,
literal|47
block|,
literal|0
block|,
literal|6
block|}
return|;
case|case
literal|4
case|:
return|return
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|47
block|,
literal|0
block|,
literal|6
block|}
return|;
block|}
return|return
operator|new
name|int
index|[]
block|{
literal|0
block|,
name|getNrTimes
argument_list|()
operator|-
literal|1
block|,
literal|0
block|,
name|getNrDays
argument_list|()
operator|-
literal|1
block|}
return|;
block|}
specifier|public
name|void
name|setDefaultSelection
parameter_list|(
name|int
name|selection
parameter_list|)
block|{
name|iDefaultSelection
operator|=
name|selection
expr_stmt|;
block|}
specifier|public
name|void
name|setDefaultSelection
parameter_list|(
name|String
name|selection
parameter_list|)
block|{
name|iDefaultSelection
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|selection
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getNrSelections
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|selection
operator|.
name|equalsIgnoreCase
argument_list|(
name|getSelectionName
argument_list|(
name|i
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"&times;"
argument_list|,
literal|"x"
argument_list|)
argument_list|)
condition|)
block|{
name|iDefaultSelection
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
block|}
specifier|public
name|int
name|getDefaultSelection
parameter_list|()
block|{
return|return
name|iDefaultSelection
return|;
block|}
specifier|public
name|String
name|getPreferenceCheck
parameter_list|()
block|{
if|if
condition|(
name|iEditingDepartments
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"if (pref!='"
operator|+
name|sNotAvailablePref
operator|+
literal|"'&& pref!='"
operator|+
name|sFreeForAllPref
operator|+
literal|"'"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iEditingDepartments
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Long
name|editingDeptId
init|=
operator|(
name|Long
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"&& pref!='"
operator|+
name|editingDeptId
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|") alert('WARNING: When saved, ownership of the selected time slots will be transferred to this department.');"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"if (pref=='"
operator|+
name|sNotAvailablePref
operator|+
literal|"' || pref=='"
operator|+
name|sFreeForAllPref
operator|+
literal|"') "
operator|+
literal|"alert('WARNING: When saved, ownership of the selected time slots will be transferred to room administrator.');"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
name|boolean
name|allAvailable
parameter_list|(
name|Long
name|departmentId
parameter_list|)
block|{
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|getNrDays
argument_list|()
condition|;
name|d
operator|++
control|)
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|getNrTimes
argument_list|()
condition|;
name|t
operator|++
control|)
block|{
name|Long
name|pref
init|=
name|iPreference
index|[
name|d
index|]
index|[
name|t
index|]
decl_stmt|;
if|if
condition|(
name|pref
operator|.
name|equals
argument_list|(
name|sFreeForAllPref
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|departmentId
operator|!=
literal|null
operator|&&
name|departmentId
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
continue|continue;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|isPreferenceEnabled
parameter_list|(
name|String
name|pref
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|boolean
name|out
index|[]
index|[]
init|=
operator|new
name|boolean
index|[
name|getNrDays
argument_list|()
index|]
index|[
name|getNrTimes
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getNrDays
argument_list|()
condition|;
name|i
operator|++
control|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|getNrTimes
argument_list|()
condition|;
name|j
operator|++
control|)
name|out
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getNrDays
argument_list|()
condition|;
name|i
operator|++
control|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|getNrTimes
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|out
index|[
name|i
index|]
index|[
name|j
index|]
condition|)
continue|continue;
name|out
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|sFreeForAllPref
operator|.
name|equals
argument_list|(
name|iPreference
index|[
name|i
index|]
index|[
name|j
index|]
argument_list|)
condition|)
continue|continue;
name|int
name|endDay
init|=
name|i
decl_stmt|,
name|endTime
init|=
name|j
decl_stmt|;
while|while
condition|(
name|endTime
operator|+
literal|1
operator|<
name|getNrTimes
argument_list|()
operator|&&
operator|!
name|out
index|[
name|i
index|]
index|[
name|endTime
operator|+
literal|1
index|]
operator|&&
name|iPreference
index|[
name|i
index|]
index|[
name|endTime
operator|+
literal|1
index|]
operator|.
name|equals
argument_list|(
name|iPreference
index|[
name|i
index|]
index|[
name|j
index|]
argument_list|)
condition|)
name|endTime
operator|++
expr_stmt|;
while|while
condition|(
name|endDay
operator|+
literal|1
operator|<
name|getNrDays
argument_list|()
condition|)
block|{
name|boolean
name|same
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
name|j
init|;
name|x
operator|<=
name|endTime
condition|;
name|x
operator|++
control|)
if|if
condition|(
operator|!
name|out
index|[
name|endDay
operator|+
literal|1
index|]
index|[
name|x
index|]
operator|&&
operator|!
name|iPreference
index|[
name|i
index|]
index|[
name|x
index|]
operator|.
name|equals
argument_list|(
name|iPreference
index|[
name|endDay
operator|+
literal|1
index|]
index|[
name|x
index|]
argument_list|)
condition|)
block|{
name|same
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|same
condition|)
break|break;
name|endDay
operator|++
expr_stmt|;
block|}
for|for
control|(
name|int
name|a
init|=
name|i
init|;
name|a
operator|<=
name|endDay
condition|;
name|a
operator|++
control|)
for|for
control|(
name|int
name|b
init|=
name|j
init|;
name|b
operator|<=
name|endTime
condition|;
name|b
operator|++
control|)
name|out
index|[
name|a
index|]
index|[
name|b
index|]
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getPreferenceAbbv
argument_list|(
name|iPreference
index|[
name|i
index|]
index|[
name|j
index|]
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|int
name|nrDays
init|=
name|endDay
operator|-
name|i
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
operator|&&
name|endDay
operator|+
literal|1
operator|==
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
condition|)
block|{
comment|//all week
block|}
else|else
block|{
for|for
control|(
name|int
name|a
init|=
name|i
init|;
name|a
operator|<=
name|endDay
condition|;
name|a
operator|++
control|)
name|sb
operator|.
name|append
argument_list|(
name|nrDays
operator|==
literal|1
condition|?
name|Constants
operator|.
name|DAY_NAME
index|[
name|a
index|]
else|:
name|Constants
operator|.
name|DAY_NAMES_SHORT
index|[
name|a
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|j
operator|==
literal|0
operator|&&
name|endTime
operator|+
literal|1
operator|==
name|getNrTimes
argument_list|()
condition|)
block|{
comment|//all day
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|int
name|startMins
init|=
literal|6
operator|*
name|j
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|/
literal|10
decl_stmt|;
name|int
name|startHour
init|=
name|startMins
operator|/
literal|60
decl_stmt|;
name|int
name|startMinute
init|=
name|startMins
operator|%
literal|60
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
operator|(
name|startHour
operator|>
literal|12
condition|?
name|startHour
operator|-
literal|12
else|:
name|startHour
operator|)
operator|+
literal|":"
operator|+
operator|(
name|startMinute
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|startMinute
operator|+
operator|(
name|startHour
operator|>=
literal|12
condition|?
literal|"p"
else|:
literal|"a"
operator|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" - "
argument_list|)
expr_stmt|;
name|int
name|endMins
init|=
literal|6
operator|*
operator|(
name|endTime
operator|+
literal|1
operator|)
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|/
literal|10
decl_stmt|;
name|int
name|endHour
init|=
name|endMins
operator|/
literal|60
decl_stmt|;
name|int
name|endMinute
init|=
name|endMins
operator|%
literal|60
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
operator|(
name|endHour
operator|>
literal|12
condition|?
name|endHour
operator|-
literal|12
else|:
name|endHour
operator|)
operator|+
literal|":"
operator|+
operator|(
name|endMinute
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|endMinute
operator|+
operator|(
name|endHour
operator|>=
literal|12
condition|?
literal|"p"
else|:
literal|"a"
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

