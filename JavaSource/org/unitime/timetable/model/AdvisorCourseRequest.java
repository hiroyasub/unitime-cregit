begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseDemand
operator|.
name|Critical
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseAdvisorCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalMethodDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CriticalCoursesProvider
operator|.
name|CriticalCourses
import|;
end_import

begin_class
specifier|public
class|class
name|AdvisorCourseRequest
extends|extends
name|BaseAdvisorCourseRequest
implements|implements
name|Comparable
argument_list|<
name|AdvisorCourseRequest
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|AdvisorCourseRequest
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|updatePreferences
parameter_list|(
name|RequestedCourse
name|rc
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|List
argument_list|<
name|AdvisorSectioningPref
argument_list|>
name|remain
init|=
literal|null
decl_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|getPreferences
argument_list|()
operator|==
literal|null
condition|)
name|setPreferences
argument_list|(
operator|new
name|HashSet
argument_list|<
name|AdvisorSectioningPref
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|remain
operator|=
operator|new
name|ArrayList
argument_list|<
name|AdvisorSectioningPref
argument_list|>
argument_list|(
name|getPreferences
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rc
operator|!=
literal|null
operator|&&
name|rc
operator|.
name|hasSelectedClasses
argument_list|()
condition|)
block|{
name|p
label|:
for|for
control|(
name|Preference
name|p
range|:
name|rc
operator|.
name|getSelectedClasses
argument_list|()
control|)
block|{
name|Class_
name|clazz
init|=
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|p
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|remain
operator|!=
literal|null
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|AdvisorSectioningPref
argument_list|>
name|i
init|=
name|remain
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AdvisorSectioningPref
name|r
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|AdvisorClassPref
operator|&&
operator|(
operator|(
name|AdvisorClassPref
operator|)
name|r
operator|)
operator|.
name|getClazz
argument_list|()
operator|.
name|equals
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|getRequired
argument_list|()
operator|!=
name|p
operator|.
name|isRequired
argument_list|()
condition|)
block|{
name|r
operator|.
name|setRequired
argument_list|(
name|p
operator|.
name|isRequired
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
continue|continue
name|p
continue|;
block|}
block|}
name|AdvisorClassPref
name|scp
init|=
operator|new
name|AdvisorClassPref
argument_list|()
decl_stmt|;
name|scp
operator|.
name|setCourseRequest
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|scp
operator|.
name|setRequired
argument_list|(
name|p
operator|.
name|isRequired
argument_list|()
argument_list|)
expr_stmt|;
name|scp
operator|.
name|setClazz
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|scp
operator|.
name|setLabel
argument_list|(
name|clazz
operator|.
name|getClassPrefLabel
argument_list|(
name|getCourseOffering
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|scp
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rc
operator|!=
literal|null
operator|&&
name|rc
operator|.
name|hasSelectedIntructionalMethods
argument_list|()
condition|)
block|{
name|p
label|:
for|for
control|(
name|Preference
name|p
range|:
name|rc
operator|.
name|getSelectedIntructionalMethods
argument_list|()
control|)
block|{
name|InstructionalMethod
name|im
init|=
name|InstructionalMethodDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|p
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|im
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|remain
operator|!=
literal|null
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|AdvisorSectioningPref
argument_list|>
name|i
init|=
name|remain
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AdvisorSectioningPref
name|r
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|AdvisorInstrMthPref
operator|&&
operator|(
operator|(
name|AdvisorInstrMthPref
operator|)
name|r
operator|)
operator|.
name|getInstructionalMethod
argument_list|()
operator|.
name|equals
argument_list|(
name|im
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|getRequired
argument_list|()
operator|!=
name|p
operator|.
name|isRequired
argument_list|()
condition|)
block|{
name|r
operator|.
name|setRequired
argument_list|(
name|p
operator|.
name|isRequired
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
continue|continue
name|p
continue|;
block|}
block|}
name|AdvisorInstrMthPref
name|imp
init|=
operator|new
name|AdvisorInstrMthPref
argument_list|()
decl_stmt|;
name|imp
operator|.
name|setCourseRequest
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|imp
operator|.
name|setRequired
argument_list|(
name|p
operator|.
name|isRequired
argument_list|()
argument_list|)
expr_stmt|;
name|imp
operator|.
name|setInstructionalMethod
argument_list|(
name|im
argument_list|)
expr_stmt|;
name|imp
operator|.
name|setLabel
argument_list|(
name|im
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|imp
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|remain
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AdvisorSectioningPref
name|p
range|:
name|remain
control|)
block|{
name|hibSession
operator|.
name|delete
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|getPreferences
argument_list|()
operator|.
name|remove
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|changed
return|;
block|}
specifier|public
name|int
name|isCritical
parameter_list|(
name|CriticalCourses
name|cc
parameter_list|)
block|{
if|if
condition|(
name|cc
operator|==
literal|null
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|getCourseOffering
argument_list|()
operator|==
literal|null
operator|||
name|isSubstitute
argument_list|()
condition|)
return|return
literal|0
return|;
return|return
name|cc
operator|.
name|isCritical
argument_list|(
name|getCourseOffering
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|float
name|getCreditMin
parameter_list|()
block|{
if|if
condition|(
name|getCredit
argument_list|()
operator|==
literal|null
operator|||
name|getCredit
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0f
return|;
try|try
block|{
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|getCredit
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\s"
argument_list|,
literal|""
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|getCredit
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
try|try
block|{
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|getCredit
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|getCredit
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\s"
argument_list|,
literal|""
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
block|}
return|return
literal|0f
return|;
block|}
specifier|public
name|float
name|getCreditMax
parameter_list|()
block|{
if|if
condition|(
name|getCredit
argument_list|()
operator|==
literal|null
operator|||
name|getCredit
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0f
return|;
try|try
block|{
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|getCredit
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\s"
argument_list|,
literal|""
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|getCredit
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
try|try
block|{
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|getCredit
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
operator|+
name|getCredit
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\s"
argument_list|,
literal|""
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
block|}
return|return
literal|0f
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|AdvisorCourseRequest
name|r
parameter_list|)
block|{
name|int
name|cmp
init|=
name|getPriority
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|getPriority
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|getAlternative
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|getAlternative
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Critical
name|getEffectiveCritical
parameter_list|()
block|{
if|if
condition|(
name|getCritical
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|Critical
operator|.
name|values
argument_list|()
index|[
name|getCritical
argument_list|()
index|]
return|;
return|return
name|Critical
operator|.
name|NORMAL
return|;
block|}
specifier|public
name|boolean
name|isCriticalOrImportant
parameter_list|()
block|{
switch|switch
condition|(
name|getEffectiveCritical
argument_list|()
condition|)
block|{
case|case
name|CRITICAL
case|:
return|return
literal|true
return|;
case|case
name|IMPORTANT
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

