begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|spring
operator|.
name|UserContext
import|;
end_import

begin_class
specifier|public
class|class
name|Reservation
extends|extends
name|BaseReservation
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|Reservation
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|Reservation
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
specifier|public
name|boolean
name|isExpired
parameter_list|()
block|{
if|if
condition|(
name|getExpirationDate
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|getExpirationDate
argument_list|()
operator|.
name|before
argument_list|(
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isEditableBy
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
name|user
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getInstructionalOffering
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|isOfferingLockNeeded
argument_list|(
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|user
operator|.
name|isAdmin
argument_list|()
condition|)
return|return
literal|true
return|;
name|Department
name|d
init|=
name|getInstructionalOffering
argument_list|()
operator|.
name|getDepartment
argument_list|()
decl_stmt|;
return|return
name|d
operator|!=
literal|null
operator|&&
name|d
operator|.
name|isLimitedEditableBy
argument_list|(
name|user
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isEditableBy
parameter_list|(
name|UserContext
name|user
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getInstructionalOffering
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|isOfferingLockNeeded
argument_list|(
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|Roles
operator|.
name|ADMIN_ROLE
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getCurrentRole
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
name|Department
name|d
init|=
name|getInstructionalOffering
argument_list|()
operator|.
name|getDepartment
argument_list|()
decl_stmt|;
return|return
name|d
operator|!=
literal|null
operator|&&
name|d
operator|.
name|isLimitedEditableBy
argument_list|(
name|user
argument_list|)
return|;
block|}
block|}
end_class

end_unit

