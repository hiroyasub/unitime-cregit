begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseWaitList
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|WaitList
extends|extends
name|BaseWaitList
implements|implements
name|Comparable
argument_list|<
name|WaitList
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|WaitListType
block|{
name|SCHEDULING_ASSISTANT
block|,
name|COURSE_REQUESTS
block|,
name|XML_IMPORT
block|,
name|BATCH_SOLVER
block|,
name|WAIT_LIST_PORCESSING
block|,
name|MASS_CANCEL
block|,
name|EXTERNAL_UPDATE
block|,
name|RELOAD
block|,
name|OTHER
block|,
name|RE_BATCH_ON_RELOAD
block|,
name|RE_BATCH_ON_CHECK
block|, 		; 		 	}
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|WaitList
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|WaitList
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
specifier|public
name|WaitListType
name|getWaitListType
parameter_list|()
block|{
if|if
condition|(
name|getType
argument_list|()
operator|==
literal|null
condition|)
return|return
name|WaitListType
operator|.
name|OTHER
return|;
return|return
name|WaitListType
operator|.
name|values
argument_list|()
index|[
name|getType
argument_list|()
index|]
return|;
block|}
specifier|public
name|void
name|setWaitListType
parameter_list|(
name|WaitListType
name|status
parameter_list|)
block|{
if|if
condition|(
name|status
operator|==
literal|null
condition|)
name|setType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
else|else
name|setType
argument_list|(
name|status
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|WaitList
name|wl
parameter_list|)
block|{
name|int
name|cmp
init|=
name|getTimestamp
argument_list|()
operator|.
name|compareTo
argument_list|(
name|wl
operator|.
name|getTimestamp
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|wl
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasMatchingCourse
parameter_list|(
name|CourseDemand
name|cd
parameter_list|)
block|{
if|if
condition|(
name|cd
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
if|if
condition|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|equals
argument_list|(
name|getCourseOffering
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|String
name|computeEnrollment
parameter_list|(
name|Student
name|student
parameter_list|,
name|CourseOffering
name|enrolledCourse
parameter_list|)
block|{
if|if
condition|(
name|student
operator|==
literal|null
operator|||
name|enrolledCourse
operator|==
literal|null
condition|)
return|return
literal|""
return|;
name|String
name|enrl
init|=
literal|null
decl_stmt|;
for|for
control|(
name|StudentClassEnrollment
name|e
range|:
name|student
operator|.
name|getClassEnrollments
argument_list|()
control|)
if|if
condition|(
name|enrolledCourse
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
condition|)
name|enrl
operator|=
operator|(
name|enrl
operator|==
literal|null
condition|?
literal|""
else|:
name|enrl
operator|+
literal|"\n"
operator|)
operator|+
name|e
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassLabel
argument_list|(
name|enrolledCourse
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|enrl
operator|!=
literal|null
operator|&&
name|enrl
operator|.
name|length
argument_list|()
operator|>
literal|255
condition|)
name|enrl
operator|=
name|enrl
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|252
argument_list|)
operator|+
literal|"..."
expr_stmt|;
return|return
name|enrl
return|;
block|}
specifier|public
specifier|static
name|String
name|computeRequest
parameter_list|(
name|CourseDemand
name|cd
parameter_list|)
block|{
if|if
condition|(
name|cd
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|req
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CourseRequest
name|cr
range|:
operator|new
name|TreeSet
argument_list|<
name|CourseRequest
argument_list|>
argument_list|(
name|cd
operator|.
name|getCourseRequests
argument_list|()
argument_list|)
control|)
block|{
name|String
name|rp
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cr
operator|.
name|getPreferences
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|StudentSectioningPref
name|p
range|:
name|cr
operator|.
name|getPreferences
argument_list|()
control|)
if|if
condition|(
name|p
operator|.
name|isRequired
argument_list|()
condition|)
block|{
if|if
condition|(
name|p
operator|instanceof
name|StudentClassPref
condition|)
name|rp
operator|=
operator|(
name|rp
operator|==
literal|null
condition|?
literal|""
else|:
name|rp
operator|+
literal|", "
operator|)
operator|+
operator|(
operator|(
name|StudentClassPref
operator|)
name|p
operator|)
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassPrefLabel
argument_list|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|p
operator|instanceof
name|StudentInstrMthPref
condition|)
name|rp
operator|=
operator|(
name|rp
operator|==
literal|null
condition|?
literal|""
else|:
name|rp
operator|+
literal|", "
operator|)
operator|+
operator|(
operator|(
name|StudentInstrMthPref
operator|)
name|p
operator|)
operator|.
name|getInstructionalMethod
argument_list|()
operator|.
name|getLabel
argument_list|()
expr_stmt|;
block|}
name|req
operator|=
operator|(
name|req
operator|==
literal|null
condition|?
literal|""
else|:
name|req
operator|+
literal|"\n"
operator|)
operator|+
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
operator|(
name|rp
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ["
operator|+
name|rp
operator|+
literal|"]"
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|req
operator|!=
literal|null
operator|&&
name|req
operator|.
name|length
argument_list|()
operator|>
literal|255
condition|)
name|req
operator|=
name|req
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|252
argument_list|)
operator|+
literal|"..."
expr_stmt|;
return|return
name|req
return|;
block|}
specifier|public
name|void
name|fillInNotes
parameter_list|()
block|{
name|setEnrollment
argument_list|(
name|computeEnrollment
argument_list|(
name|getStudent
argument_list|()
argument_list|,
name|getEnrolledCourse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setRequest
argument_list|(
name|computeRequest
argument_list|(
name|getCourseDemand
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

