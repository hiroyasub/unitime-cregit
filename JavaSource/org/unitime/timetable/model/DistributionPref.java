begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Hibernate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|ObjectNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|CourseMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseDistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DistributionPrefDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|PreferenceGroupDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller, Stephanie Schluttenhofer  */
end_comment

begin_class
specifier|public
class|class
name|DistributionPref
extends|extends
name|BaseDistributionPref
block|{
specifier|protected
specifier|static
name|CourseMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|CourseMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/** Request Attribute name for Dist Prefs **/
specifier|public
specifier|static
specifier|final
name|String
name|DIST_PREF_REQUEST_ATTR
init|=
literal|"distPrefs"
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|Structure
block|{
name|AllClasses
block|,
name|Progressive
block|,
name|GroupsOfTwo
block|,
name|GroupsOfThree
block|,
name|GroupsOfFour
block|,
name|GroupsOfFive
block|,
name|Pairwise
block|,
name|OneOfEach
block|, 		;
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|AllClasses
case|:
return|return
name|MSG
operator|.
name|distributionStructureDescriptionAllClasses
argument_list|()
return|;
case|case
name|Progressive
case|:
return|return
name|MSG
operator|.
name|distributionStructureDescriptionProgressive
argument_list|()
return|;
case|case
name|GroupsOfTwo
case|:
return|return
name|MSG
operator|.
name|distributionStructureDescriptionGroupsOfTwo
argument_list|()
return|;
case|case
name|GroupsOfThree
case|:
return|return
name|MSG
operator|.
name|distributionStructureDescriptionGroupsOfThree
argument_list|()
return|;
case|case
name|GroupsOfFour
case|:
return|return
name|MSG
operator|.
name|distributionStructureDescriptionGroupsOfFour
argument_list|()
return|;
case|case
name|GroupsOfFive
case|:
return|return
name|MSG
operator|.
name|distributionStructureDescriptionGroupsOfFive
argument_list|()
return|;
case|case
name|Pairwise
case|:
return|return
name|MSG
operator|.
name|distributionStructureDescriptionPairwise
argument_list|()
return|;
case|case
name|OneOfEach
case|:
return|return
name|MSG
operator|.
name|distributionStructureDescriptionOneOfEach
argument_list|()
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|AllClasses
case|:
return|return
name|MSG
operator|.
name|distributionStructureNameAllClasses
argument_list|()
return|;
case|case
name|Progressive
case|:
return|return
name|MSG
operator|.
name|distributionStructureNameProgressive
argument_list|()
return|;
case|case
name|GroupsOfTwo
case|:
return|return
name|MSG
operator|.
name|distributionStructureNameGroupsOfTwo
argument_list|()
return|;
case|case
name|GroupsOfThree
case|:
return|return
name|MSG
operator|.
name|distributionStructureNameGroupsOfThree
argument_list|()
return|;
case|case
name|GroupsOfFour
case|:
return|return
name|MSG
operator|.
name|distributionStructureNameGroupsOfFour
argument_list|()
return|;
case|case
name|GroupsOfFive
case|:
return|return
name|MSG
operator|.
name|distributionStructureNameGroupsOfFive
argument_list|()
return|;
case|case
name|Pairwise
case|:
return|return
name|MSG
operator|.
name|distributionStructureNamePairwise
argument_list|()
return|;
case|case
name|OneOfEach
case|:
return|return
name|MSG
operator|.
name|distributionStructureNameOneOfEach
argument_list|()
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|String
name|getLabel
parameter_list|(
name|String
name|content
parameter_list|)
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|AllClasses
case|:
return|return
name|MSG
operator|.
name|distributionStructureLabelAllClasses
argument_list|(
name|content
argument_list|)
return|;
case|case
name|Progressive
case|:
return|return
name|MSG
operator|.
name|distributionStructureLabelProgressive
argument_list|(
name|content
argument_list|)
return|;
case|case
name|GroupsOfTwo
case|:
return|return
name|MSG
operator|.
name|distributionStructureLabelGroupsOfTwo
argument_list|(
name|content
argument_list|)
return|;
case|case
name|GroupsOfThree
case|:
return|return
name|MSG
operator|.
name|distributionStructureLabelGroupsOfThree
argument_list|(
name|content
argument_list|)
return|;
case|case
name|GroupsOfFour
case|:
return|return
name|MSG
operator|.
name|distributionStructureLabelGroupsOfFour
argument_list|(
name|content
argument_list|)
return|;
case|case
name|GroupsOfFive
case|:
return|return
name|MSG
operator|.
name|distributionStructureLabelGroupsOfFive
argument_list|(
name|content
argument_list|)
return|;
case|case
name|Pairwise
case|:
return|return
name|MSG
operator|.
name|distributionStructureLabelPairwise
argument_list|(
name|content
argument_list|)
return|;
case|case
name|OneOfEach
case|:
return|return
name|MSG
operator|.
name|distributionStructureLabelOneOfEach
argument_list|(
name|content
argument_list|)
return|;
default|default:
return|return
name|content
operator|+
literal|null
return|;
block|}
block|}
specifier|public
name|String
name|getAbbreviation
parameter_list|(
name|String
name|content
parameter_list|)
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|AllClasses
case|:
return|return
name|MSG
operator|.
name|distributionStructureAbbreviationAllClasses
argument_list|(
name|content
argument_list|)
return|;
case|case
name|Progressive
case|:
return|return
name|MSG
operator|.
name|distributionStructureAbbreviationProgressive
argument_list|(
name|content
argument_list|)
return|;
case|case
name|GroupsOfTwo
case|:
return|return
name|MSG
operator|.
name|distributionStructureAbbreviationGroupsOfTwo
argument_list|(
name|content
argument_list|)
return|;
case|case
name|GroupsOfThree
case|:
return|return
name|MSG
operator|.
name|distributionStructureAbbreviationGroupsOfThree
argument_list|(
name|content
argument_list|)
return|;
case|case
name|GroupsOfFour
case|:
return|return
name|MSG
operator|.
name|distributionStructureAbbreviationGroupsOfFour
argument_list|(
name|content
argument_list|)
return|;
case|case
name|GroupsOfFive
case|:
return|return
name|MSG
operator|.
name|distributionStructureAbbreviationGroupsOfFive
argument_list|(
name|content
argument_list|)
return|;
case|case
name|Pairwise
case|:
return|return
name|MSG
operator|.
name|distributionStructureAbbreviationPairwise
argument_list|(
name|content
argument_list|)
return|;
case|case
name|OneOfEach
case|:
return|return
name|MSG
operator|.
name|distributionStructureAbbreviationOneOfEach
argument_list|(
name|content
argument_list|)
return|;
default|default:
return|return
name|content
operator|+
literal|null
return|;
block|}
block|}
block|}
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|DistributionPref
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|DistributionPref
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
specifier|public
name|String
name|preferenceText
parameter_list|()
block|{
return|return
name|preferenceText
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|"<BR>"
argument_list|,
literal|"<BR>"
argument_list|,
literal|""
argument_list|)
return|;
block|}
specifier|public
name|String
name|preferenceText
parameter_list|(
name|boolean
name|includeDistrObjects
parameter_list|,
name|boolean
name|abbv
parameter_list|,
name|String
name|objQuotationLeft
parameter_list|,
name|String
name|objSeparator
parameter_list|,
name|String
name|objQuotationRight
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
operator|(
name|abbv
condition|?
name|getAbbreviation
argument_list|()
else|:
name|getLabel
argument_list|()
operator|)
operator|.
name|replaceAll
argument_list|(
literal|"<"
argument_list|,
literal|"&lt;"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|">"
argument_list|,
literal|"&gt;"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeDistrObjects
condition|)
block|{
if|if
condition|(
name|getDistributionObjects
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getDistributionObjects
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|objQuotationLeft
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|getOrderedSetOfDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|distObj
init|=
operator|(
name|DistributionObject
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
empty_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|distObj
operator|.
name|preferenceText
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
name|objSeparator
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|objQuotationRight
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|getOwner
argument_list|()
operator|instanceof
name|DepartmentalInstructor
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" ("
operator|+
operator|(
operator|(
name|DepartmentalInstructor
operator|)
name|getOwner
argument_list|()
operator|)
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatShort
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|abbv
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|objQuotationLeft
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
operator|(
operator|(
name|DepartmentalInstructor
operator|)
name|getOwner
argument_list|()
operator|)
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
name|objSeparator
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|objQuotationRight
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|preferenceHtml
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
name|color
init|=
name|getPrefLevel
argument_list|()
operator|.
name|prefcolor
argument_list|()
decl_stmt|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
name|color
operator|=
literal|"gray"
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<span style='color:"
operator|+
name|color
operator|+
literal|";font-weight:bold;' onmouseover=\"showGwtHint(this, '"
operator|+
name|getPrefLevel
argument_list|()
operator|.
name|getPrefName
argument_list|()
operator|+
literal|" "
operator|+
name|preferenceText
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|"<ul><li>"
argument_list|,
literal|"<li>"
argument_list|,
literal|"</ul>"
argument_list|)
operator|+
literal|"');\" onmouseout=\"hideGwtHint();\">"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|preferenceText
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</span>"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** 	 * @param schedulingSubpart_ 	 * @return 	 */
specifier|public
name|boolean
name|appliesTo
parameter_list|(
name|SchedulingSubpart
name|schedulingSubpart
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|getDistributionObjects
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|Iterator
name|it
init|=
name|this
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|dObj
init|=
operator|(
name|DistributionObject
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//SchedulingSubpart check
comment|//no checking whether dObj.getPrefGroup() is SchedulingSubpart not needed since all PreferenceGroups have unique ids
if|if
condition|(
name|dObj
operator|.
name|getPrefGroup
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|schedulingSubpart
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/** 	 * @param aClass 	 * @return 	 */
specifier|public
name|boolean
name|appliesTo
parameter_list|(
name|Class_
name|aClass
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|getDistributionObjects
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|Iterator
name|it
init|=
literal|null
decl_stmt|;
try|try
block|{
name|it
operator|=
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ObjectNotFoundException
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
literal|"Exception "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" seen for "
operator|+
name|this
argument_list|)
expr_stmt|;
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|refresh
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|it
operator|=
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DistributionObject
name|dObj
init|=
operator|(
name|DistributionObject
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//Class_ check
comment|//no checking whether dObj.getPrefGroup() is Class_ not needed since all PreferenceGroups have unique ids
if|if
condition|(
name|dObj
operator|.
name|getPrefGroup
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|aClass
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
comment|//SchedulingSubpart check
name|SchedulingSubpart
name|ss
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|Hibernate
operator|.
name|isInitialized
argument_list|(
name|dObj
operator|.
name|getPrefGroup
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|dObj
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
name|ss
operator|=
operator|(
name|SchedulingSubpart
operator|)
name|dObj
operator|.
name|getPrefGroup
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//dObj.getPrefGroup() is a proxy -> try to load it
name|PreferenceGroup
name|pg
init|=
operator|(
operator|new
name|PreferenceGroupDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|dObj
operator|.
name|getPrefGroup
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pg
operator|!=
literal|null
operator|&&
name|pg
operator|instanceof
name|SchedulingSubpart
condition|)
name|ss
operator|=
operator|(
name|SchedulingSubpart
operator|)
name|pg
expr_stmt|;
block|}
if|if
condition|(
name|ss
operator|!=
literal|null
operator|&&
name|ss
operator|.
name|getClasses
argument_list|()
operator|!=
literal|null
operator|&&
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Iterator
name|it2
init|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
if|if
condition|(
operator|(
operator|(
name|Class_
operator|)
name|it2
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|aClass
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|// overide default
specifier|public
name|boolean
name|appliesTo
parameter_list|(
name|PreferenceGroup
name|group
parameter_list|)
block|{
if|if
condition|(
name|group
operator|instanceof
name|Class_
condition|)
return|return
name|appliesTo
argument_list|(
operator|(
name|Class_
operator|)
name|group
argument_list|)
return|;
if|if
condition|(
name|group
operator|instanceof
name|SchedulingSubpart
condition|)
return|return
name|appliesTo
argument_list|(
operator|(
name|SchedulingSubpart
operator|)
name|group
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|DistributionPref
name|p
init|=
operator|(
name|DistributionPref
operator|)
name|o
decl_stmt|;
name|int
name|cmp
init|=
name|getDistributionType
argument_list|()
operator|.
name|getReference
argument_list|()
operator|.
name|compareTo
argument_list|(
name|p
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
else|:
name|getUniqueId
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|p
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|p
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|DistributionPref
name|pref
init|=
operator|new
name|DistributionPref
argument_list|()
decl_stmt|;
name|pref
operator|.
name|setPrefLevel
argument_list|(
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|pref
operator|.
name|setDistributionObjects
argument_list|(
operator|new
name|HashSet
argument_list|<
name|DistributionObject
argument_list|>
argument_list|(
name|getDistributionObjects
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|pref
operator|.
name|setDistributionType
argument_list|(
name|getDistributionType
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|pref
return|;
block|}
specifier|public
name|boolean
name|isSame
parameter_list|(
name|Preference
name|other
parameter_list|)
block|{
return|return
name|equals
argument_list|(
name|other
argument_list|)
return|;
block|}
comment|/** Ordered set of distribution objects */
specifier|public
name|Set
argument_list|<
name|DistributionObject
argument_list|>
name|getOrderedSetOfDistributionObjects
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|TreeSet
argument_list|<
name|DistributionObject
argument_list|>
argument_list|(
name|getDistributionObjects
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ObjectNotFoundException
name|ex
parameter_list|)
block|{
operator|(
operator|new
name|DistributionPrefDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|refresh
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
operator|new
name|TreeSet
argument_list|<
name|DistributionObject
argument_list|>
argument_list|(
name|getDistributionObjects
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
name|String
name|getStructureName
parameter_list|()
block|{
return|return
operator|(
name|getStructure
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|getStructure
argument_list|()
operator|.
name|getName
argument_list|()
operator|)
return|;
block|}
specifier|public
name|String
name|getStructureDescription
parameter_list|()
block|{
return|return
operator|(
name|getStructure
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|getStructure
argument_list|()
operator|.
name|getDescription
argument_list|()
operator|)
return|;
block|}
specifier|public
specifier|static
name|Collection
name|getPreferences
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Long
name|ownerId
parameter_list|,
name|boolean
name|useControllingCourseOfferingManager
parameter_list|,
name|Long
name|uniqueId
parameter_list|)
block|{
return|return
name|getPreferences
argument_list|(
name|sessionId
argument_list|,
name|ownerId
argument_list|,
name|useControllingCourseOfferingManager
argument_list|,
name|uniqueId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Collection
name|getPreferences
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Long
name|ownerId
parameter_list|,
name|boolean
name|useControllingCourseOfferingManager
parameter_list|,
name|Long
name|uniqueId
parameter_list|,
name|Long
name|subjectAreaId
parameter_list|,
name|String
name|courseNbr
parameter_list|)
block|{
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"select distinct dp "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" from "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" DistributionPref as dp "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" inner join dp.distributionObjects as do, "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" Class_ as c "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" inner join c.schedulingSubpart as ss inner join ss.instrOfferingConfig.instructionalOffering as io "
argument_list|)
expr_stmt|;
if|if
condition|(
name|subjectAreaId
operator|!=
literal|null
operator|||
name|ownerId
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" inner join io.courseOfferings as co "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"where "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" (c.uniqueId = do.prefGroup.uniqueId or ss.uniqueId = do.prefGroup.uniqueId) and "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" io.session.uniqueId = :sessionId "
argument_list|)
expr_stmt|;
if|if
condition|(
name|ownerId
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" and ("
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"((c.managingDept is not null and c.managingDept.uniqueId = :ownerId )"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" or (c.managingDept is null "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" and co.isControl = true "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"and co.subjectArea.department.uniqueId = :ownerId))"
argument_list|)
expr_stmt|;
if|if
condition|(
name|useControllingCourseOfferingManager
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" or (co.isControl = true"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" and co.subjectArea.department.uniqueId = :ownerId)"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|uniqueId
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" and (c.uniqueId = :uniqueId or ss.uniqueId = :uniqueId or io.uniqueId = :uniqueId))"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|subjectAreaId
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" and co.subjectArea.uniqueId=:subjectAreaId "
argument_list|)
expr_stmt|;
if|if
condition|(
name|courseNbr
operator|!=
literal|null
operator|&&
name|courseNbr
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" and co.courseNbr "
argument_list|)
expr_stmt|;
if|if
condition|(
name|courseNbr
operator|.
name|indexOf
argument_list|(
literal|'*'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" like "
argument_list|)
expr_stmt|;
name|courseNbr
operator|=
name|courseNbr
operator|.
name|replace
argument_list|(
literal|'*'
argument_list|,
literal|'%'
argument_list|)
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" = "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|":courseNbr"
argument_list|)
expr_stmt|;
block|}
block|}
name|Query
name|q
init|=
operator|(
operator|new
name|DistributionPrefDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ownerId
operator|!=
literal|null
condition|)
name|q
operator|.
name|setLong
argument_list|(
literal|"ownerId"
argument_list|,
name|ownerId
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|uniqueId
operator|!=
literal|null
condition|)
name|q
operator|.
name|setLong
argument_list|(
literal|"uniqueId"
argument_list|,
name|uniqueId
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|subjectAreaId
operator|!=
literal|null
condition|)
block|{
name|q
operator|.
name|setLong
argument_list|(
literal|"subjectAreaId"
argument_list|,
name|subjectAreaId
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|courseNbr
operator|!=
literal|null
operator|&&
name|courseNbr
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|q
operator|.
name|setString
argument_list|(
literal|"courseNbr"
argument_list|,
name|courseNbr
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|q
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Collection
name|getInstructorPreferences
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Long
name|ownerId
parameter_list|,
name|Long
name|subjectAreaId
parameter_list|,
name|String
name|courseNbr
parameter_list|)
block|{
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"select distinct dp "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" from "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" DistributionPref as dp, "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" DepartmentalInstructor as di "
argument_list|)
expr_stmt|;
if|if
condition|(
name|subjectAreaId
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" inner join di.classes as ci inner join ci.classInstructing.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings as co "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"where "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" dp.owner = di "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" and di.department.session.uniqueId = :sessionId "
argument_list|)
expr_stmt|;
if|if
condition|(
name|subjectAreaId
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" and ci.lead = true "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" and co.isControl = true "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" and co.subjectArea.uniqueId = :subjectAreaId "
argument_list|)
expr_stmt|;
if|if
condition|(
name|courseNbr
operator|!=
literal|null
operator|&&
name|courseNbr
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" and co.courseNbr "
argument_list|)
expr_stmt|;
if|if
condition|(
name|courseNbr
operator|.
name|indexOf
argument_list|(
literal|'*'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" like "
argument_list|)
expr_stmt|;
name|courseNbr
operator|=
name|courseNbr
operator|.
name|replace
argument_list|(
literal|'*'
argument_list|,
literal|'%'
argument_list|)
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" = "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|":courseNbr"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|ownerId
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" and di.department.uniqueId = :ownerId "
argument_list|)
expr_stmt|;
block|}
name|Query
name|q
init|=
operator|(
operator|new
name|DistributionPrefDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|subjectAreaId
operator|!=
literal|null
condition|)
block|{
name|q
operator|.
name|setLong
argument_list|(
literal|"subjectAreaId"
argument_list|,
name|subjectAreaId
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|courseNbr
operator|!=
literal|null
operator|&&
name|courseNbr
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|q
operator|.
name|setString
argument_list|(
literal|"courseNbr"
argument_list|,
name|courseNbr
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ownerId
operator|!=
literal|null
condition|)
block|{
name|q
operator|.
name|setLong
argument_list|(
literal|"ownerId"
argument_list|,
name|ownerId
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|q
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|weakenHardPreferences
parameter_list|()
block|{
if|if
condition|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|getDistributionType
argument_list|()
operator|.
name|getAllowedPref
argument_list|()
operator|.
name|indexOf
argument_list|(
name|PreferenceLevel
operator|.
name|sCharLevelStronglyPreferred
argument_list|)
operator|>=
literal|0
condition|)
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
argument_list|)
expr_stmt|;
else|else
return|return
literal|false
return|;
block|}
if|if
condition|(
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|getDistributionType
argument_list|()
operator|.
name|getAllowedPref
argument_list|()
operator|.
name|indexOf
argument_list|(
name|PreferenceLevel
operator|.
name|sCharLevelStronglyDiscouraged
argument_list|)
operator|>=
literal|0
condition|)
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|)
expr_stmt|;
else|else
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|DistributionPref
name|findByIdRolledForwardFrom
parameter_list|(
name|Long
name|uidRolledForwardFrom
parameter_list|,
name|Long
name|sessionId
parameter_list|)
block|{
return|return
operator|(
name|DistributionPref
operator|)
operator|new
name|DistributionPrefDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select dp from DistributionPref dp, Department d where "
operator|+
literal|"dp.uniqueIdRolledForwardFrom=:uidRolledFrom and dp.owner=d and d.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"uidRolledFrom"
argument_list|,
name|uidRolledForwardFrom
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|(
name|preferenceText
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|" "
argument_list|,
literal|", "
argument_list|,
literal|""
argument_list|)
operator|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Enumeration
argument_list|<
name|List
argument_list|<
name|E
argument_list|>
argument_list|>
name|permutations
parameter_list|(
specifier|final
name|List
argument_list|<
name|E
argument_list|>
name|items
parameter_list|,
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|counts
parameter_list|)
block|{
return|return
operator|new
name|Enumeration
argument_list|<
name|List
argument_list|<
name|E
argument_list|>
argument_list|>
argument_list|()
block|{
name|int
index|[]
name|p
init|=
literal|null
decl_stmt|;
name|int
index|[]
name|b
init|=
literal|null
decl_stmt|;
name|int
name|m
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasMoreElements
parameter_list|()
block|{
if|if
condition|(
name|p
operator|==
literal|null
condition|)
return|return
literal|true
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|p
index|[
name|i
index|]
operator|<
name|b
index|[
name|i
index|]
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|E
argument_list|>
name|nextElement
parameter_list|()
block|{
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|m
operator|=
name|counts
operator|.
name|size
argument_list|()
expr_stmt|;
name|p
operator|=
operator|new
name|int
index|[
name|m
index|]
expr_stmt|;
name|b
operator|=
operator|new
name|int
index|[
name|m
index|]
expr_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m
condition|;
name|i
operator|++
control|)
block|{
name|p
index|[
name|i
index|]
operator|=
name|c
expr_stmt|;
name|c
operator|+=
name|counts
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|b
index|[
name|i
index|]
operator|=
name|c
operator|-
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
name|m
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|p
index|[
name|i
index|]
operator|=
name|p
index|[
name|i
index|]
operator|+
literal|1
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|m
condition|;
name|j
operator|++
control|)
name|p
index|[
name|j
index|]
operator|=
name|b
index|[
name|j
operator|-
literal|1
index|]
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
operator|||
name|p
index|[
name|i
index|]
operator|<=
name|b
index|[
name|i
index|]
condition|)
break|break;
block|}
block|}
name|List
argument_list|<
name|E
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|E
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m
condition|;
name|i
operator|++
control|)
name|ret
operator|.
name|add
argument_list|(
name|items
operator|.
name|get
argument_list|(
name|p
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
return|;
block|}
specifier|public
name|Structure
name|getStructure
parameter_list|()
block|{
if|if
condition|(
name|getGrouping
argument_list|()
operator|==
literal|null
operator|||
name|getGrouping
argument_list|()
operator|<
literal|0
condition|)
return|return
literal|null
return|;
return|return
name|Structure
operator|.
name|values
argument_list|()
index|[
name|getGrouping
argument_list|()
index|]
return|;
block|}
specifier|public
name|void
name|setStructure
parameter_list|(
name|Structure
name|structure
parameter_list|)
block|{
name|setGrouping
argument_list|(
name|structure
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
name|String
name|label
init|=
name|getDistributionType
argument_list|()
operator|.
name|getLabel
argument_list|()
decl_stmt|;
return|return
name|getStructure
argument_list|()
operator|==
literal|null
condition|?
name|label
else|:
name|getStructure
argument_list|()
operator|.
name|getLabel
argument_list|(
name|label
argument_list|)
return|;
block|}
specifier|public
name|String
name|getAbbreviation
parameter_list|()
block|{
name|String
name|abbv
init|=
name|getDistributionType
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
decl_stmt|;
return|return
name|getStructure
argument_list|()
operator|==
literal|null
condition|?
name|abbv
else|:
name|getStructure
argument_list|()
operator|.
name|getAbbreviation
argument_list|(
name|abbv
argument_list|)
return|;
block|}
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|DISTRIBUTION
return|;
block|}
block|}
end_class

end_unit

