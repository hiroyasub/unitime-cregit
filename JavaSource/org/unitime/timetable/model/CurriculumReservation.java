begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseCurriculumReservation
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CurriculumReservation
extends|extends
name|BaseCurriculumReservation
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|261396109078027984L
decl_stmt|;
specifier|public
name|CurriculumReservation
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|(
name|Student
name|student
parameter_list|,
name|CourseRequest
name|request
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getMajors
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|getMinors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
for|for
control|(
name|StudentAreaClassificationMajor
name|acm
range|:
name|student
operator|.
name|getAreaClasfMajors
argument_list|()
control|)
block|{
if|if
condition|(
name|getAreas
argument_list|()
operator|.
name|contains
argument_list|(
name|acm
operator|.
name|getAcademicArea
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|getClassifications
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|getClassifications
argument_list|()
operator|.
name|contains
argument_list|(
name|acm
operator|.
name|getAcademicClassification
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|getMajors
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|getMajors
argument_list|()
operator|.
name|contains
argument_list|(
name|acm
operator|.
name|getMajor
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|getMinors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
for|for
control|(
name|StudentAreaClassificationMinor
name|acm
range|:
name|student
operator|.
name|getAreaClasfMinors
argument_list|()
control|)
block|{
if|if
condition|(
name|getAreas
argument_list|()
operator|.
name|contains
argument_list|(
name|acm
operator|.
name|getAcademicArea
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|getClassifications
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|getClassifications
argument_list|()
operator|.
name|contains
argument_list|(
name|acm
operator|.
name|getAcademicClassification
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|getMinors
argument_list|()
operator|.
name|contains
argument_list|(
name|acm
operator|.
name|getMinor
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
name|ApplicationProperty
operator|.
name|ReservationPriorityCurriculum
operator|.
name|intValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCanAssignOverLimit
parameter_list|()
block|{
return|return
name|ApplicationProperty
operator|.
name|ReservationCanOverLimitCurriculum
operator|.
name|isTrue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMustBeUsed
parameter_list|()
block|{
return|return
name|ApplicationProperty
operator|.
name|ReservationMustBeUsedCurriculum
operator|.
name|isTrue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAllowOverlap
parameter_list|()
block|{
return|return
name|ApplicationProperty
operator|.
name|ReservationAllowOverlapCurriculum
operator|.
name|isTrue
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|hasArea
parameter_list|(
name|String
name|areaAbbv
parameter_list|)
block|{
if|if
condition|(
name|getAreas
argument_list|()
operator|==
literal|null
operator|||
name|getAreas
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
for|for
control|(
name|AcademicArea
name|area
range|:
name|getAreas
argument_list|()
control|)
if|if
condition|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|.
name|equals
argument_list|(
name|areaAbbv
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|hasClassification
parameter_list|(
name|String
name|classificationCode
parameter_list|)
block|{
if|if
condition|(
name|getClassifications
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
for|for
control|(
name|AcademicClassification
name|c
range|:
name|getClassifications
argument_list|()
control|)
if|if
condition|(
name|c
operator|.
name|getCode
argument_list|()
operator|.
name|equals
argument_list|(
name|classificationCode
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|hasMajor
parameter_list|(
name|String
name|majorCode
parameter_list|)
block|{
if|if
condition|(
name|getMajors
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|getMinors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
for|for
control|(
name|PosMajor
name|c
range|:
name|getMajors
argument_list|()
control|)
if|if
condition|(
name|c
operator|.
name|getCode
argument_list|()
operator|.
name|equals
argument_list|(
name|majorCode
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|hasConcentration
parameter_list|(
name|String
name|majorCode
parameter_list|,
name|String
name|concCode
parameter_list|)
block|{
if|if
condition|(
name|concCode
operator|==
literal|null
condition|)
return|return
literal|true
return|;
name|boolean
name|hasMajor
init|=
literal|false
decl_stmt|;
for|for
control|(
name|PosMajorConcentration
name|c
range|:
name|getConcentrations
argument_list|()
control|)
if|if
condition|(
name|c
operator|.
name|getMajor
argument_list|()
operator|.
name|getCode
argument_list|()
operator|.
name|equals
argument_list|(
name|majorCode
argument_list|)
condition|)
block|{
name|hasMajor
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getCode
argument_list|()
operator|.
name|equals
argument_list|(
name|concCode
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
operator|!
name|hasMajor
return|;
block|}
specifier|public
name|boolean
name|hasMinor
parameter_list|(
name|String
name|minorCode
parameter_list|)
block|{
for|for
control|(
name|PosMinor
name|c
range|:
name|getMinors
argument_list|()
control|)
if|if
condition|(
name|c
operator|.
name|getCode
argument_list|()
operator|.
name|equals
argument_list|(
name|minorCode
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

