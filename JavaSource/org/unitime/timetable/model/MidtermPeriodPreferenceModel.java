begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_class
specifier|public
class|class
name|MidtermPeriodPreferenceModel
block|{
specifier|private
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|iDates
init|=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|iStarts
init|=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Integer
argument_list|,
name|Hashtable
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
name|iPreferences
init|=
operator|new
name|Hashtable
argument_list|<
name|Integer
argument_list|,
name|Hashtable
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|iLength
init|=
operator|new
name|Hashtable
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|TreeSet
name|iPeriods
init|=
literal|null
decl_stmt|;
specifier|private
name|Date
name|iFirstDate
init|=
literal|null
decl_stmt|,
name|iLastDate
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iLocation
init|=
literal|false
decl_stmt|;
specifier|private
name|ExamPeriod
name|iPeriod
init|=
literal|null
decl_stmt|;
specifier|private
name|Date
name|iExamBeginDate
init|=
literal|null
decl_stmt|;
specifier|private
name|Session
name|iSession
init|=
literal|null
decl_stmt|;
specifier|private
name|ExamType
name|iExamType
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iName
init|=
literal|"mp"
decl_stmt|;
specifier|public
specifier|static
name|SimpleDateFormat
name|sDF
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE MM/dd"
argument_list|)
decl_stmt|;
specifier|public
name|MidtermPeriodPreferenceModel
parameter_list|(
name|Session
name|session
parameter_list|,
name|ExamType
name|type
parameter_list|)
block|{
name|this
argument_list|(
name|session
argument_list|,
name|type
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MidtermPeriodPreferenceModel
parameter_list|(
name|Session
name|session
parameter_list|,
name|ExamType
name|type
parameter_list|,
name|ExamAssignment
name|assignment
parameter_list|)
block|{
name|iPeriod
operator|=
operator|(
name|assignment
operator|==
literal|null
condition|?
literal|null
else|:
name|assignment
operator|.
name|getPeriod
argument_list|()
operator|)
expr_stmt|;
name|iSession
operator|=
name|session
expr_stmt|;
name|iExamType
operator|=
name|type
expr_stmt|;
name|iExamBeginDate
operator|=
name|session
operator|.
name|getExamBeginDate
argument_list|()
expr_stmt|;
name|iPeriods
operator|=
name|ExamPeriod
operator|.
name|findAll
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iPeriods
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|iStarts
operator|.
name|add
argument_list|(
name|period
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|iLength
operator|.
name|put
argument_list|(
name|period
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|period
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|iDates
operator|.
name|add
argument_list|(
name|period
operator|.
name|getDateOffset
argument_list|()
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|pref
init|=
name|iPreferences
operator|.
name|get
argument_list|(
name|period
operator|.
name|getDateOffset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|==
literal|null
condition|)
block|{
name|pref
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|iPreferences
operator|.
name|put
argument_list|(
name|period
operator|.
name|getDateOffset
argument_list|()
argument_list|,
name|pref
argument_list|)
expr_stmt|;
block|}
name|pref
operator|.
name|put
argument_list|(
name|period
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
if|if
condition|(
name|iFirstDate
operator|==
literal|null
condition|)
block|{
name|iFirstDate
operator|=
name|period
operator|.
name|getStartDate
argument_list|()
expr_stmt|;
name|iLastDate
operator|=
name|period
operator|.
name|getStartDate
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|period
operator|.
name|getStartDate
argument_list|()
operator|.
name|compareTo
argument_list|(
name|iFirstDate
argument_list|)
operator|<
literal|0
condition|)
name|iFirstDate
operator|=
name|period
operator|.
name|getStartDate
argument_list|()
expr_stmt|;
if|if
condition|(
name|period
operator|.
name|getStartDate
argument_list|()
operator|.
name|compareTo
argument_list|(
name|iLastDate
argument_list|)
operator|>
literal|0
condition|)
name|iLastDate
operator|=
name|period
operator|.
name|getStartDate
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|void
name|load
parameter_list|(
name|PreferenceGroup
name|pg
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|pg
operator|.
name|getPreferences
argument_list|(
name|ExamPeriodPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriodPref
name|pref
init|=
operator|(
name|ExamPeriodPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|iExamType
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getExamPeriod
argument_list|()
operator|.
name|getExamType
argument_list|()
argument_list|)
condition|)
continue|continue;
name|iPreferences
operator|.
name|get
argument_list|(
name|pref
operator|.
name|getExamPeriod
argument_list|()
operator|.
name|getDateOffset
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|pref
operator|.
name|getExamPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|invertIfNeeded
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|invertIfNeeded
parameter_list|()
block|{
name|boolean
name|hasReq
init|=
literal|false
decl_stmt|;
name|dates
label|:
for|for
control|(
name|Integer
name|date
range|:
name|iDates
control|)
block|{
name|Hashtable
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|pref
init|=
name|iPreferences
operator|.
name|get
argument_list|(
name|date
argument_list|)
decl_stmt|;
for|for
control|(
name|Integer
name|time
range|:
name|iStarts
control|)
block|{
if|if
condition|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|get
argument_list|(
name|time
argument_list|)
argument_list|)
condition|)
block|{
name|hasReq
operator|=
literal|true
expr_stmt|;
break|break
name|dates
break|;
block|}
block|}
block|}
if|if
condition|(
name|hasReq
condition|)
block|{
for|for
control|(
name|Integer
name|date
range|:
name|iDates
control|)
block|{
name|Hashtable
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|pref
init|=
name|iPreferences
operator|.
name|get
argument_list|(
name|date
argument_list|)
decl_stmt|;
for|for
control|(
name|Integer
name|time
range|:
name|iStarts
control|)
block|{
if|if
condition|(
name|pref
operator|.
name|get
argument_list|(
name|time
argument_list|)
operator|==
literal|null
condition|)
continue|continue;
name|pref
operator|.
name|put
argument_list|(
name|time
argument_list|,
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|get
argument_list|(
name|time
argument_list|)
argument_list|)
condition|?
name|PreferenceLevel
operator|.
name|sNeutral
else|:
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|save
parameter_list|(
name|Set
name|preferences
parameter_list|,
name|PreferenceGroup
name|pg
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|iPeriods
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|pref
init|=
name|iPreferences
operator|.
name|get
argument_list|(
name|period
operator|.
name|getDateOffset
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|period
operator|.
name|getStartSlot
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|!=
literal|null
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
block|{
name|ExamPeriodPref
name|p
init|=
operator|new
name|ExamPeriodPref
argument_list|()
decl_stmt|;
name|p
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|p
operator|.
name|setExamPeriod
argument_list|(
name|period
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|pref
argument_list|)
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|load
parameter_list|(
name|Location
name|location
parameter_list|)
block|{
name|iLocation
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iPeriods
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|iPreferences
operator|.
name|get
argument_list|(
name|period
operator|.
name|getDateOffset
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|period
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|location
operator|.
name|getExamPreference
argument_list|(
name|period
argument_list|)
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|invertIfNeeded
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|save
parameter_list|(
name|Location
name|location
parameter_list|)
block|{
name|location
operator|.
name|clearExamPreferences
argument_list|(
name|iExamType
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iPeriods
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|pref
init|=
name|iPreferences
operator|.
name|get
argument_list|(
name|period
operator|.
name|getDateOffset
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|period
operator|.
name|getStartSlot
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|!=
literal|null
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
block|{
name|location
operator|.
name|addExamPreference
argument_list|(
name|period
argument_list|,
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|pref
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|int
name|getExamOffset
parameter_list|()
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|iExamBeginDate
argument_list|)
expr_stmt|;
return|return
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|)
return|;
block|}
specifier|public
name|Integer
name|getDateOffset
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|month
parameter_list|)
block|{
return|return
operator|(
literal|1
operator|+
name|DateUtils
operator|.
name|getDayOfYear
argument_list|(
name|day
argument_list|,
name|month
argument_list|,
name|getYear
argument_list|()
argument_list|)
operator|-
name|getExamOffset
argument_list|()
operator|)
return|;
block|}
specifier|public
name|Date
name|getDate
parameter_list|(
name|Integer
name|dateOffset
parameter_list|)
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|iExamBeginDate
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|dateOffset
argument_list|)
expr_stmt|;
return|return
name|cal
operator|.
name|getTime
argument_list|()
return|;
block|}
specifier|public
name|int
name|getStartMonth
parameter_list|()
block|{
name|Calendar
name|begin
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|begin
operator|.
name|setTime
argument_list|(
name|iExamBeginDate
argument_list|)
expr_stmt|;
name|Calendar
name|first
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|first
operator|.
name|setTime
argument_list|(
name|iFirstDate
argument_list|)
expr_stmt|;
name|int
name|month
init|=
name|first
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|!=
name|begin
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
condition|)
name|month
operator|-=
operator|(
literal|12
operator|*
operator|(
name|begin
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|-
name|first
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|)
operator|)
expr_stmt|;
return|return
name|month
return|;
block|}
specifier|public
name|int
name|getEndMonth
parameter_list|()
block|{
name|Calendar
name|begin
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|begin
operator|.
name|setTime
argument_list|(
name|iExamBeginDate
argument_list|)
expr_stmt|;
name|Calendar
name|last
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|last
operator|.
name|setTime
argument_list|(
name|iLastDate
argument_list|)
expr_stmt|;
name|int
name|month
init|=
name|last
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|last
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|!=
name|begin
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
condition|)
name|month
operator|+=
operator|(
literal|12
operator|*
operator|(
name|last
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|-
name|begin
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|)
operator|)
expr_stmt|;
return|return
name|month
return|;
block|}
specifier|public
name|int
name|getYear
parameter_list|()
block|{
name|Calendar
name|begin
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|begin
operator|.
name|setTime
argument_list|(
name|iExamBeginDate
argument_list|)
expr_stmt|;
return|return
name|begin
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
return|;
block|}
specifier|public
name|String
name|getBorder
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|month
parameter_list|,
name|int
name|start
parameter_list|)
block|{
if|if
condition|(
name|iPeriod
operator|!=
literal|null
operator|&&
name|iPeriod
operator|.
name|getDateOffset
argument_list|()
operator|.
name|equals
argument_list|(
name|getDateOffset
argument_list|(
name|day
argument_list|,
name|month
argument_list|)
argument_list|)
operator|&&
name|iPeriod
operator|.
name|getStartSlot
argument_list|()
operator|.
name|equals
argument_list|(
name|start
argument_list|)
condition|)
return|return
literal|"'purple 2px solid'"
return|;
name|int
name|m
init|=
name|month
decl_stmt|;
name|int
name|sessStartYr
init|=
name|iSession
operator|.
name|getSessionStartYear
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessStartYr
operator|<
name|getYear
argument_list|()
condition|)
block|{
name|m
operator|+=
operator|(
literal|12
operator|*
operator|(
name|getYear
argument_list|()
operator|-
name|sessStartYr
operator|)
operator|)
expr_stmt|;
block|}
if|else if
condition|(
name|sessStartYr
operator|>
name|getYear
argument_list|()
condition|)
block|{
name|m
operator|-=
operator|(
literal|12
operator|*
operator|(
name|sessStartYr
operator|-
name|getYear
argument_list|()
operator|)
operator|)
expr_stmt|;
block|}
return|return
name|iSession
operator|.
name|getBorder
argument_list|(
name|day
argument_list|,
name|m
argument_list|)
return|;
block|}
specifier|public
name|String
name|getColor
parameter_list|(
name|Integer
name|pref
parameter_list|)
block|{
if|if
condition|(
name|pref
operator|==
literal|null
condition|)
return|return
name|PreferenceLevel
operator|.
name|prolog2bgColor
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
return|;
if|if
condition|(
name|iLocation
condition|)
block|{
switch|switch
condition|(
name|pref
operator|.
name|intValue
argument_list|()
condition|)
block|{
case|case
literal|1
case|:
return|return
name|PreferenceLevel
operator|.
name|prolog2bgColor
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|PreferenceLevel
operator|.
name|prolog2bgColor
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|PreferenceLevel
operator|.
name|prolog2bgColor
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
return|;
default|default :
return|return
name|PreferenceLevel
operator|.
name|prolog2bgColor
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
return|;
block|}
block|}
switch|switch
condition|(
name|pref
operator|.
name|intValue
argument_list|()
condition|)
block|{
case|case
literal|1
case|:
return|return
name|PreferenceLevel
operator|.
name|prolog2bgColor
argument_list|(
name|PreferenceLevel
operator|.
name|sPreferred
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|PreferenceLevel
operator|.
name|prolog2bgColor
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|PreferenceLevel
operator|.
name|prolog2bgColor
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
return|;
default|default :
return|return
name|PreferenceLevel
operator|.
name|prolog2bgColor
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
return|;
block|}
block|}
specifier|public
name|String
name|print
parameter_list|(
name|boolean
name|editable
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|print
argument_list|(
name|editable
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|private
name|String
name|getBorderArray
parameter_list|(
name|Integer
name|start
parameter_list|)
block|{
name|StringBuffer
name|border
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
name|getStartMonth
argument_list|()
init|;
name|m
operator|<=
name|getEndMonth
argument_list|()
condition|;
name|m
operator|++
control|)
block|{
if|if
condition|(
name|m
operator|!=
name|getStartMonth
argument_list|()
condition|)
name|border
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|border
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|int
name|daysOfMonth
init|=
name|DateUtils
operator|.
name|getNrDaysOfMonth
argument_list|(
name|m
argument_list|,
name|getYear
argument_list|()
argument_list|)
decl_stmt|;
empty_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<=
name|daysOfMonth
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
name|d
operator|>
literal|1
condition|)
name|border
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|border
operator|.
name|append
argument_list|(
name|getBorder
argument_list|(
name|d
argument_list|,
name|m
argument_list|,
name|start
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|border
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|border
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|border
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|getPattern
parameter_list|(
name|Integer
name|start
parameter_list|)
block|{
name|StringBuffer
name|pattern
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
name|getStartMonth
argument_list|()
init|;
name|m
operator|<=
name|getEndMonth
argument_list|()
condition|;
name|m
operator|++
control|)
block|{
if|if
condition|(
name|m
operator|!=
name|getStartMonth
argument_list|()
condition|)
name|pattern
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|int
name|daysOfMonth
init|=
name|DateUtils
operator|.
name|getNrDaysOfMonth
argument_list|(
name|m
argument_list|,
name|getYear
argument_list|()
argument_list|)
decl_stmt|;
empty_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<=
name|daysOfMonth
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
name|d
operator|>
literal|1
condition|)
name|pattern
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|Integer
name|date
init|=
name|getDateOffset
argument_list|(
name|d
argument_list|,
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|iDates
operator|.
name|contains
argument_list|(
name|date
argument_list|)
condition|)
block|{
name|String
name|pref
init|=
name|iPreferences
operator|.
name|get
argument_list|(
name|date
argument_list|)
operator|.
name|get
argument_list|(
name|start
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|==
literal|null
condition|)
name|pattern
operator|.
name|append
argument_list|(
literal|"'@'"
argument_list|)
expr_stmt|;
else|else
name|pattern
operator|.
name|append
argument_list|(
literal|"'"
operator|+
name|pref
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
else|else
name|pattern
operator|.
name|append
argument_list|(
literal|"'@'"
argument_list|)
expr_stmt|;
block|}
name|pattern
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|pattern
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|pattern
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|isAllProhibited
parameter_list|(
name|Integer
name|start
parameter_list|)
block|{
for|for
control|(
name|Integer
name|date
range|:
name|iDates
control|)
block|{
name|String
name|pref
init|=
name|iPreferences
operator|.
name|get
argument_list|(
name|date
argument_list|)
operator|.
name|get
argument_list|(
name|start
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|!=
literal|null
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|String
name|print
parameter_list|(
name|boolean
name|editable
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|Exception
block|{
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|starts
init|=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|start
range|:
name|iStarts
control|)
block|{
if|if
condition|(
operator|(
name|length
operator|<=
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|iLength
operator|.
name|get
argument_list|(
name|start
argument_list|)
operator|)
operator|&&
operator|(
name|editable
operator|||
name|iLocation
operator|||
operator|!
name|isAllProhibited
argument_list|(
name|start
argument_list|)
operator|)
condition|)
name|starts
operator|.
name|add
argument_list|(
name|start
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|starts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|boolean
name|tooLong
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Integer
name|start
range|:
name|iStarts
control|)
block|{
if|if
condition|(
name|length
operator|<=
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|iLength
operator|.
name|get
argument_list|(
name|start
argument_list|)
condition|)
block|{
name|tooLong
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|tooLong
condition|)
return|return
literal|"<font color='red'>Examination is too long, no period is availabile.</font>"
return|;
else|else
return|return
literal|"<font color='red'>No period is availabile.</font>"
return|;
block|}
name|StringBuffer
name|legendCode
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
name|StringBuffer
name|legendText
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
name|StringBuffer
name|legendColor
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
for|for
control|(
name|PreferenceLevel
name|p
range|:
name|PreferenceLevel
operator|.
name|getPreferenceLevelList
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
continue|continue;
name|legendCode
operator|.
name|append
argument_list|(
literal|"'"
operator|+
name|p
operator|.
name|getPrefProlog
argument_list|()
operator|+
literal|"',"
argument_list|)
expr_stmt|;
name|legendText
operator|.
name|append
argument_list|(
literal|"'"
operator|+
name|p
operator|.
name|getPrefName
argument_list|()
operator|+
literal|"',"
argument_list|)
expr_stmt|;
name|legendColor
operator|.
name|append
argument_list|(
literal|"'"
operator|+
name|PreferenceLevel
operator|.
name|prolog2bgColor
argument_list|(
name|p
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|"',"
argument_list|)
expr_stmt|;
block|}
name|legendCode
operator|.
name|append
argument_list|(
literal|"'@']"
argument_list|)
expr_stmt|;
name|legendText
operator|.
name|append
argument_list|(
literal|"'No Period']"
argument_list|)
expr_stmt|;
name|legendColor
operator|.
name|append
argument_list|(
literal|"'rgb(150,150,150)']"
argument_list|)
expr_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<script language='JavaScript' type='text/javascript' src='scripts/datepatt.js'></script>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<script language='JavaScript'>"
argument_list|)
expr_stmt|;
name|int
name|legendIdx
init|=
operator|(
name|starts
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
literal|0
else|:
name|starts
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|?
literal|1
else|:
name|starts
operator|.
name|size
argument_list|()
operator|/
literal|2
operator|)
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|start
range|:
name|starts
control|)
block|{
name|String
name|startTime
init|=
name|Constants
operator|.
name|toTime
argument_list|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|start
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
argument_list|)
decl_stmt|;
name|String
name|endTime
init|=
name|Constants
operator|.
name|toTime
argument_list|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
operator|(
name|start
operator|+
name|iLength
operator|.
name|get
argument_list|(
name|start
argument_list|)
operator|)
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"calGenerate("
operator|+
name|getYear
argument_list|()
operator|+
literal|","
operator|+
name|getStartMonth
argument_list|()
operator|+
literal|","
operator|+
name|getEndMonth
argument_list|()
operator|+
literal|","
operator|+
name|getPattern
argument_list|(
name|start
argument_list|)
operator|+
literal|","
operator|+
name|legendCode
operator|+
literal|","
operator|+
name|legendText
operator|+
literal|","
operator|+
name|legendColor
operator|+
literal|",'0',"
operator|+
name|getBorderArray
argument_list|(
name|start
argument_list|)
operator|+
literal|","
operator|+
name|editable
operator|+
literal|","
operator|+
operator|(
name|editable
operator|&&
name|legendIdx
operator|==
name|idx
operator|)
operator|+
literal|","
operator|+
literal|"'"
operator|+
name|iName
operator|+
name|start
operator|+
literal|"','("
operator|+
name|startTime
operator|+
literal|" - "
operator|+
name|endTime
operator|+
literal|")',6,"
operator|+
operator|(
name|start
operator|==
name|starts
operator|.
name|first
argument_list|()
operator|)
operator|+
literal|","
operator|+
operator|(
name|start
operator|==
name|starts
operator|.
name|last
argument_list|()
operator|)
operator|+
literal|");"
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</script>"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|load
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|int
name|year
init|=
name|getYear
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
name|getStartMonth
argument_list|()
init|;
name|m
operator|<=
name|getEndMonth
argument_list|()
condition|;
name|m
operator|++
control|)
block|{
name|int
name|daysOfMonth
init|=
name|DateUtils
operator|.
name|getNrDaysOfMonth
argument_list|(
name|m
argument_list|,
name|year
argument_list|)
decl_stmt|;
empty_stmt|;
name|int
name|yr
init|=
name|DateUtils
operator|.
name|calculateActualYear
argument_list|(
name|m
argument_list|,
name|year
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<=
name|daysOfMonth
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|iDates
operator|.
name|contains
argument_list|(
name|getDateOffset
argument_list|(
name|d
argument_list|,
name|m
argument_list|)
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|int
name|start
range|:
name|iStarts
control|)
block|{
name|String
name|pref
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|iName
operator|+
name|start
operator|+
literal|"_val_"
operator|+
name|yr
operator|+
literal|"_"
operator|+
operator|(
operator|(
literal|12
operator|+
name|m
operator|)
operator|%
literal|12
operator|)
operator|+
literal|"_"
operator|+
name|d
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|!=
literal|null
operator|&&
operator|!
literal|"@"
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
name|iPreferences
operator|.
name|get
argument_list|(
name|getDateOffset
argument_list|(
name|d
argument_list|,
name|m
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|start
argument_list|,
name|pref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toString
argument_list|(
literal|false
argument_list|)
return|;
block|}
specifier|private
name|String
name|getLabel
parameter_list|(
name|int
name|fDate
parameter_list|,
name|int
name|lDate
parameter_list|,
name|Hashtable
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|prefs
parameter_list|,
name|boolean
name|html
parameter_list|)
block|{
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd"
argument_list|)
decl_stmt|;
name|String
name|dates
init|=
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|fDate
argument_list|)
argument_list|)
operator|+
operator|(
name|fDate
operator|==
name|lDate
condition|?
literal|""
else|:
literal|" - "
operator|+
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|lDate
argument_list|)
argument_list|)
operator|)
decl_stmt|;
name|String
name|lastPref
init|=
literal|null
decl_stmt|;
name|int
name|fStart
init|=
operator|-
literal|1
decl_stmt|,
name|lStart
init|=
operator|-
literal|1
decl_stmt|;
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|start
range|:
name|iStarts
control|)
block|{
name|String
name|pref
init|=
name|prefs
operator|.
name|get
argument_list|(
name|start
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|lastPref
operator|==
literal|null
condition|)
block|{
name|lastPref
operator|=
name|pref
expr_stmt|;
name|fStart
operator|=
name|start
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|pref
operator|.
name|equals
argument_list|(
name|lastPref
argument_list|)
condition|)
block|{
if|if
condition|(
name|iLocation
operator|&&
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|lastPref
argument_list|)
condition|)
block|{
comment|//
block|}
if|else if
condition|(
operator|!
name|iLocation
operator|&&
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|lastPref
argument_list|)
condition|)
block|{
comment|//
block|}
else|else
block|{
name|String
name|startTime
init|=
name|Constants
operator|.
name|toTime
argument_list|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|fStart
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
argument_list|)
decl_stmt|;
name|String
name|endTime
init|=
name|Constants
operator|.
name|toTime
argument_list|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
operator|(
name|lStart
operator|+
name|iLength
operator|.
name|get
argument_list|(
name|lStart
argument_list|)
operator|)
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|ret
operator|+=
literal|", "
expr_stmt|;
if|if
condition|(
name|html
condition|)
block|{
name|ret
operator|+=
literal|"<span style='color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|lastPref
argument_list|)
operator|+
literal|";' "
operator|+
literal|"title='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2string
argument_list|(
name|lastPref
argument_list|)
operator|+
literal|" "
operator|+
name|dates
operator|+
literal|" "
operator|+
name|startTime
operator|+
literal|" - "
operator|+
name|endTime
operator|+
literal|"'>"
operator|+
name|dates
operator|+
literal|" "
operator|+
operator|(
name|iStarts
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|?
name|fStart
operator|==
name|iStarts
operator|.
name|first
argument_list|()
condition|?
literal|"Early"
else|:
literal|"Late"
else|:
name|startTime
operator|)
operator|+
operator|(
name|fStart
operator|==
name|lStart
condition|?
literal|""
else|:
literal|" - "
operator|+
name|endTime
operator|)
operator|+
literal|"</span>"
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|+=
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|lastPref
argument_list|)
operator|+
literal|" "
operator|+
name|dates
operator|+
literal|" "
operator|+
operator|(
name|iStarts
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|?
name|fStart
operator|==
name|iStarts
operator|.
name|first
argument_list|()
condition|?
literal|"Early"
else|:
literal|"Late"
else|:
name|startTime
operator|)
operator|+
operator|(
name|fStart
operator|==
name|lStart
condition|?
literal|""
else|:
literal|" - "
operator|+
name|endTime
operator|)
expr_stmt|;
block|}
block|}
name|lastPref
operator|=
name|pref
expr_stmt|;
name|fStart
operator|=
name|start
expr_stmt|;
block|}
name|lStart
operator|=
name|start
expr_stmt|;
block|}
if|if
condition|(
name|lastPref
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|iLocation
operator|&&
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|lastPref
argument_list|)
condition|)
block|{
comment|//
block|}
if|else if
condition|(
operator|!
name|iLocation
operator|&&
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|lastPref
argument_list|)
condition|)
block|{
comment|//
block|}
else|else
block|{
name|String
name|startTime
init|=
name|Constants
operator|.
name|toTime
argument_list|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|fStart
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
argument_list|)
decl_stmt|;
name|String
name|endTime
init|=
name|Constants
operator|.
name|toTime
argument_list|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
operator|(
name|lStart
operator|+
name|iLength
operator|.
name|get
argument_list|(
name|lStart
argument_list|)
operator|)
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
argument_list|)
decl_stmt|;
if|if
condition|(
name|fStart
operator|==
name|iStarts
operator|.
name|first
argument_list|()
condition|)
block|{
if|if
condition|(
name|html
condition|)
block|{
name|ret
operator|+=
literal|"<span style='color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|lastPref
argument_list|)
operator|+
literal|";' "
operator|+
literal|"title='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2string
argument_list|(
name|lastPref
argument_list|)
operator|+
literal|" "
operator|+
name|dates
operator|+
literal|" "
operator|+
name|startTime
operator|+
literal|" - "
operator|+
name|endTime
operator|+
literal|"'>"
operator|+
name|dates
operator|+
literal|"</span>"
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|+=
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|lastPref
argument_list|)
operator|+
literal|" "
operator|+
name|dates
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|ret
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|ret
operator|+=
literal|", "
expr_stmt|;
if|if
condition|(
name|html
condition|)
block|{
name|ret
operator|+=
literal|"<span style='color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|lastPref
argument_list|)
operator|+
literal|";' "
operator|+
literal|"title='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2string
argument_list|(
name|lastPref
argument_list|)
operator|+
literal|" "
operator|+
name|dates
operator|+
literal|" "
operator|+
name|startTime
operator|+
literal|" - "
operator|+
name|endTime
operator|+
literal|"'>"
operator|+
name|dates
operator|+
literal|" "
operator|+
operator|(
name|iStarts
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|?
name|fStart
operator|==
name|iStarts
operator|.
name|first
argument_list|()
condition|?
literal|"Early"
else|:
literal|"Late"
else|:
name|startTime
operator|)
operator|+
operator|(
name|fStart
operator|==
name|lStart
condition|?
literal|""
else|:
literal|" - "
operator|+
name|endTime
operator|)
operator|+
literal|"</span>"
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|+=
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|lastPref
argument_list|)
operator|+
literal|" "
operator|+
name|dates
operator|+
literal|" "
operator|+
operator|(
name|iStarts
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|?
name|fStart
operator|==
name|iStarts
operator|.
name|first
argument_list|()
condition|?
literal|"Early"
else|:
literal|"Late"
else|:
name|startTime
operator|)
operator|+
operator|(
name|fStart
operator|==
name|lStart
condition|?
literal|""
else|:
literal|" - "
operator|+
name|endTime
operator|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|(
name|boolean
name|html
parameter_list|)
block|{
if|if
condition|(
name|iStarts
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|""
return|;
name|String
name|ret
init|=
literal|""
decl_stmt|;
name|Hashtable
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|fPref
init|=
literal|null
decl_stmt|;
name|int
name|fDate
init|=
operator|-
literal|1
decl_stmt|,
name|lDate
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|Integer
name|date
range|:
name|iDates
control|)
block|{
name|Hashtable
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|pref
init|=
name|iPreferences
operator|.
name|get
argument_list|(
name|date
argument_list|)
decl_stmt|;
if|if
condition|(
name|fPref
operator|==
literal|null
condition|)
block|{
name|fPref
operator|=
name|pref
expr_stmt|;
name|fDate
operator|=
name|date
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|fPref
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
block|{
name|String
name|label
init|=
name|getLabel
argument_list|(
name|fDate
argument_list|,
name|lDate
argument_list|,
name|fPref
argument_list|,
name|html
argument_list|)
decl_stmt|;
if|if
condition|(
name|label
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|ret
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|ret
operator|+=
literal|", "
expr_stmt|;
name|ret
operator|+=
name|label
expr_stmt|;
block|}
name|fPref
operator|=
name|pref
expr_stmt|;
name|fDate
operator|=
name|date
expr_stmt|;
block|}
name|lDate
operator|=
name|date
expr_stmt|;
block|}
if|if
condition|(
name|fPref
operator|!=
literal|null
condition|)
block|{
name|String
name|label
init|=
name|getLabel
argument_list|(
name|fDate
argument_list|,
name|lDate
argument_list|,
name|fPref
argument_list|,
name|html
argument_list|)
decl_stmt|;
if|if
condition|(
name|label
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|ret
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|ret
operator|+=
literal|", "
expr_stmt|;
name|ret
operator|+=
name|label
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

