begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_class
specifier|public
class|class
name|MidtermPeriodPreferenceModel
block|{
specifier|private
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|iDates
init|=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Vector
argument_list|<
name|Integer
argument_list|>
name|iStarts
init|=
operator|new
name|Vector
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Integer
argument_list|,
name|String
index|[]
argument_list|>
name|iPreferences
init|=
operator|new
name|Hashtable
argument_list|<
name|Integer
argument_list|,
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|iLength
init|=
operator|new
name|Hashtable
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|TreeSet
name|iPeriods
init|=
literal|null
decl_stmt|;
specifier|private
name|Date
name|iFirstDate
init|=
literal|null
decl_stmt|,
name|iLastDate
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iLocation
init|=
literal|false
decl_stmt|;
specifier|private
name|ExamPeriod
name|iPeriod
init|=
literal|null
decl_stmt|;
specifier|private
name|Date
name|iExamBeginDate
init|=
literal|null
decl_stmt|;
specifier|private
name|Session
name|iSession
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
name|SimpleDateFormat
name|sDF
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE MM/dd"
argument_list|)
decl_stmt|;
specifier|public
name|MidtermPeriodPreferenceModel
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|this
argument_list|(
name|session
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MidtermPeriodPreferenceModel
parameter_list|(
name|Session
name|session
parameter_list|,
name|ExamAssignment
name|assignment
parameter_list|)
block|{
name|iPeriod
operator|=
operator|(
name|assignment
operator|==
literal|null
condition|?
literal|null
else|:
name|assignment
operator|.
name|getPeriod
argument_list|()
operator|)
expr_stmt|;
name|iSession
operator|=
name|session
expr_stmt|;
name|iExamBeginDate
operator|=
name|session
operator|.
name|getExamBeginDate
argument_list|()
expr_stmt|;
name|iPeriods
operator|=
name|ExamPeriod
operator|.
name|findAll
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|Exam
operator|.
name|sExamTypeMidterm
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iPeriods
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|iStarts
operator|.
name|contains
argument_list|(
name|period
operator|.
name|getStartSlot
argument_list|()
argument_list|)
condition|)
block|{
name|iStarts
operator|.
name|add
argument_list|(
name|period
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|iLength
operator|.
name|put
argument_list|(
name|period
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|period
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iDates
operator|.
name|add
argument_list|(
name|period
operator|.
name|getDateOffset
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iFirstDate
operator|==
literal|null
condition|)
block|{
name|iFirstDate
operator|=
name|period
operator|.
name|getStartDate
argument_list|()
expr_stmt|;
name|iLastDate
operator|=
name|period
operator|.
name|getStartDate
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|period
operator|.
name|getStartDate
argument_list|()
operator|.
name|compareTo
argument_list|(
name|iFirstDate
argument_list|)
operator|<
literal|0
condition|)
name|iFirstDate
operator|=
name|period
operator|.
name|getStartDate
argument_list|()
expr_stmt|;
if|if
condition|(
name|period
operator|.
name|getStartDate
argument_list|()
operator|.
name|compareTo
argument_list|(
name|iLastDate
argument_list|)
operator|>
literal|0
condition|)
name|iLastDate
operator|=
name|period
operator|.
name|getStartDate
argument_list|()
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|iStarts
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iPeriods
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
index|[]
name|pref
init|=
name|iPreferences
operator|.
name|get
argument_list|(
name|period
operator|.
name|getDateOffset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|==
literal|null
condition|)
block|{
name|pref
operator|=
operator|new
name|String
index|[]
block|{
literal|"@"
block|,
literal|"@"
block|}
expr_stmt|;
name|iPreferences
operator|.
name|put
argument_list|(
name|period
operator|.
name|getDateOffset
argument_list|()
argument_list|,
name|pref
argument_list|)
expr_stmt|;
block|}
name|boolean
name|early
init|=
operator|(
name|iStarts
operator|.
name|indexOf
argument_list|(
name|period
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|==
literal|0
operator|)
decl_stmt|;
name|pref
index|[
name|early
condition|?
literal|0
else|:
literal|1
index|]
operator|=
name|PreferenceLevel
operator|.
name|sNeutral
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|canDo
parameter_list|()
block|{
if|if
condition|(
name|iStarts
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|iStarts
operator|.
name|size
argument_list|()
operator|*
name|iDates
operator|.
name|size
argument_list|()
operator|!=
name|iPeriods
operator|.
name|size
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|load
parameter_list|(
name|PreferenceGroup
name|pg
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|pg
operator|.
name|getPreferences
argument_list|(
name|ExamPeriodPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriodPref
name|pref
init|=
operator|(
name|ExamPeriodPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
index|[]
name|currentPref
init|=
name|iPreferences
operator|.
name|get
argument_list|(
name|pref
operator|.
name|getExamPeriod
argument_list|()
operator|.
name|getDateOffset
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|early
init|=
operator|(
name|iStarts
operator|.
name|indexOf
argument_list|(
name|pref
operator|.
name|getExamPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|==
literal|0
operator|)
decl_stmt|;
name|currentPref
index|[
name|early
condition|?
literal|0
else|:
literal|1
index|]
operator|=
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
expr_stmt|;
block|}
name|boolean
name|hasReq
init|=
literal|false
decl_stmt|,
name|noPref
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Integer
name|date
range|:
name|iDates
control|)
block|{
name|String
index|[]
name|prefs
init|=
name|iPreferences
operator|.
name|get
argument_list|(
name|date
argument_list|)
decl_stmt|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|prefs
index|[
literal|0
index|]
argument_list|)
operator|||
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|prefs
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
name|hasReq
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|hasReq
condition|)
block|{
for|for
control|(
name|Integer
name|date
range|:
name|iDates
control|)
block|{
name|String
index|[]
name|prefs
init|=
name|iPreferences
operator|.
name|get
argument_list|(
name|date
argument_list|)
decl_stmt|;
name|prefs
index|[
literal|0
index|]
operator|=
operator|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|prefs
index|[
literal|0
index|]
argument_list|)
condition|?
name|PreferenceLevel
operator|.
name|sNeutral
else|:
name|PreferenceLevel
operator|.
name|sProhibited
operator|)
expr_stmt|;
name|prefs
index|[
literal|1
index|]
operator|=
operator|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|prefs
index|[
literal|1
index|]
argument_list|)
condition|?
name|PreferenceLevel
operator|.
name|sNeutral
else|:
name|PreferenceLevel
operator|.
name|sProhibited
operator|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|invertRequired
parameter_list|()
block|{
for|for
control|(
name|Integer
name|date
range|:
name|iDates
control|)
block|{
name|String
index|[]
name|prefs
init|=
name|iPreferences
operator|.
name|get
argument_list|(
name|date
argument_list|)
decl_stmt|;
name|prefs
index|[
literal|0
index|]
operator|=
operator|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|prefs
index|[
literal|0
index|]
argument_list|)
condition|?
name|PreferenceLevel
operator|.
name|sNeutral
else|:
name|PreferenceLevel
operator|.
name|sProhibited
operator|)
expr_stmt|;
name|prefs
index|[
literal|1
index|]
operator|=
operator|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|prefs
index|[
literal|1
index|]
argument_list|)
condition|?
name|PreferenceLevel
operator|.
name|sNeutral
else|:
name|PreferenceLevel
operator|.
name|sProhibited
operator|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|save
parameter_list|(
name|Set
name|preferences
parameter_list|,
name|PreferenceGroup
name|pg
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|iPeriods
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|early
init|=
operator|(
name|iStarts
operator|.
name|indexOf
argument_list|(
name|period
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|==
literal|0
operator|)
decl_stmt|;
name|String
index|[]
name|pref
init|=
name|iPreferences
operator|.
name|get
argument_list|(
name|period
operator|.
name|getDateOffset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|pref
index|[
name|early
condition|?
literal|0
else|:
literal|1
index|]
argument_list|)
condition|)
block|{
name|ExamPeriodPref
name|p
init|=
operator|new
name|ExamPeriodPref
argument_list|()
decl_stmt|;
name|p
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|p
operator|.
name|setExamPeriod
argument_list|(
name|period
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|pref
index|[
name|early
condition|?
literal|0
else|:
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|load
parameter_list|(
name|Location
name|location
parameter_list|)
block|{
name|iLocation
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iPeriods
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
index|[]
name|currentPref
init|=
name|iPreferences
operator|.
name|get
argument_list|(
name|period
operator|.
name|getDateOffset
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|early
init|=
operator|(
name|iStarts
operator|.
name|indexOf
argument_list|(
name|period
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|==
literal|0
operator|)
decl_stmt|;
name|currentPref
index|[
name|early
condition|?
literal|0
else|:
literal|1
index|]
operator|=
name|location
operator|.
name|getExamPreference
argument_list|(
name|period
argument_list|)
operator|.
name|getPrefProlog
argument_list|()
expr_stmt|;
block|}
name|boolean
name|hasReq
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Integer
name|date
range|:
name|iDates
control|)
block|{
name|String
index|[]
name|prefs
init|=
name|iPreferences
operator|.
name|get
argument_list|(
name|date
argument_list|)
decl_stmt|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|prefs
index|[
literal|0
index|]
argument_list|)
operator|||
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|prefs
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
name|hasReq
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|hasReq
condition|)
block|{
for|for
control|(
name|Integer
name|date
range|:
name|iDates
control|)
block|{
name|String
index|[]
name|prefs
init|=
name|iPreferences
operator|.
name|get
argument_list|(
name|date
argument_list|)
decl_stmt|;
name|prefs
index|[
literal|0
index|]
operator|=
operator|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|prefs
index|[
literal|0
index|]
argument_list|)
condition|?
name|PreferenceLevel
operator|.
name|sNeutral
else|:
name|PreferenceLevel
operator|.
name|sProhibited
operator|)
expr_stmt|;
name|prefs
index|[
literal|1
index|]
operator|=
operator|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|prefs
index|[
literal|1
index|]
argument_list|)
condition|?
name|PreferenceLevel
operator|.
name|sNeutral
else|:
name|PreferenceLevel
operator|.
name|sProhibited
operator|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|save
parameter_list|(
name|Location
name|location
parameter_list|)
block|{
name|location
operator|.
name|clearExamPreferences
argument_list|(
name|Exam
operator|.
name|sExamTypeMidterm
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iPeriods
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|early
init|=
operator|(
name|iStarts
operator|.
name|indexOf
argument_list|(
name|period
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|==
literal|0
operator|)
decl_stmt|;
name|String
index|[]
name|pref
init|=
name|iPreferences
operator|.
name|get
argument_list|(
name|period
operator|.
name|getDateOffset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|pref
index|[
name|early
condition|?
literal|0
else|:
literal|1
index|]
argument_list|)
condition|)
block|{
name|location
operator|.
name|addExamPreference
argument_list|(
name|period
argument_list|,
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|pref
index|[
name|early
condition|?
literal|0
else|:
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|int
name|getExamOffset
parameter_list|()
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|iExamBeginDate
argument_list|)
expr_stmt|;
return|return
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|)
return|;
block|}
specifier|public
name|Integer
name|getDateOffset
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|month
parameter_list|)
block|{
return|return
operator|(
literal|1
operator|+
name|DateUtils
operator|.
name|getDayOfYear
argument_list|(
name|day
argument_list|,
name|month
argument_list|,
name|getYear
argument_list|()
argument_list|)
operator|-
name|getExamOffset
argument_list|()
operator|)
return|;
block|}
specifier|public
name|Date
name|getDate
parameter_list|(
name|Integer
name|dateOffset
parameter_list|)
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|iExamBeginDate
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|dateOffset
argument_list|)
expr_stmt|;
return|return
name|cal
operator|.
name|getTime
argument_list|()
return|;
block|}
specifier|public
name|int
name|getStartMonth
parameter_list|()
block|{
name|Calendar
name|begin
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|begin
operator|.
name|setTime
argument_list|(
name|iExamBeginDate
argument_list|)
expr_stmt|;
name|Calendar
name|first
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|first
operator|.
name|setTime
argument_list|(
name|iFirstDate
argument_list|)
expr_stmt|;
name|int
name|month
init|=
name|first
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|!=
name|begin
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
condition|)
name|month
operator|-=
literal|12
expr_stmt|;
return|return
name|month
return|;
block|}
specifier|public
name|int
name|getEndMonth
parameter_list|()
block|{
name|Calendar
name|begin
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|begin
operator|.
name|setTime
argument_list|(
name|iExamBeginDate
argument_list|)
expr_stmt|;
name|Calendar
name|last
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|last
operator|.
name|setTime
argument_list|(
name|iLastDate
argument_list|)
expr_stmt|;
name|int
name|month
init|=
name|last
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|last
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|!=
name|begin
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
condition|)
name|month
operator|+=
literal|12
expr_stmt|;
return|return
name|month
return|;
block|}
specifier|public
name|int
name|getYear
parameter_list|()
block|{
name|Calendar
name|begin
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|begin
operator|.
name|setTime
argument_list|(
name|iExamBeginDate
argument_list|)
expr_stmt|;
return|return
name|begin
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
return|;
block|}
specifier|public
name|String
name|getBorder
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|month
parameter_list|)
block|{
if|if
condition|(
name|iPeriod
operator|!=
literal|null
operator|&&
name|iPeriod
operator|.
name|getDateOffset
argument_list|()
operator|.
name|equals
argument_list|(
name|getDateOffset
argument_list|(
name|day
argument_list|,
name|month
argument_list|)
argument_list|)
condition|)
return|return
literal|"'purple 2px solid'"
return|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|iSession
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|day
operator|==
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
operator|&&
name|month
operator|==
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
condition|)
return|return
literal|"'blue 2px solid'"
return|;
name|cal
operator|.
name|setTime
argument_list|(
name|iSession
operator|.
name|getSessionEndDateTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|day
operator|==
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
operator|&&
name|month
operator|==
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
condition|)
return|return
literal|"'blue 2px solid'"
return|;
name|cal
operator|.
name|setTime
argument_list|(
name|iSession
operator|.
name|getExamBeginDate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|day
operator|==
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
operator|&&
name|month
operator|==
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
condition|)
return|return
literal|"'green 2px solid'"
return|;
name|int
name|holiday
init|=
name|iSession
operator|.
name|getHoliday
argument_list|(
name|day
argument_list|,
name|month
argument_list|)
decl_stmt|;
if|if
condition|(
name|holiday
operator|!=
name|Session
operator|.
name|sHolidayTypeNone
condition|)
return|return
literal|"'"
operator|+
name|Session
operator|.
name|sHolidayTypeColors
index|[
name|holiday
index|]
operator|+
literal|" 2px solid'"
return|;
return|return
literal|"null"
return|;
block|}
specifier|public
name|String
name|getColor
parameter_list|(
name|Integer
name|pref
parameter_list|)
block|{
if|if
condition|(
name|pref
operator|==
literal|null
condition|)
return|return
name|PreferenceLevel
operator|.
name|prolog2bgColor
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
return|;
if|if
condition|(
name|iLocation
condition|)
block|{
switch|switch
condition|(
name|pref
operator|.
name|intValue
argument_list|()
condition|)
block|{
case|case
literal|1
case|:
return|return
name|PreferenceLevel
operator|.
name|prolog2bgColor
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|PreferenceLevel
operator|.
name|prolog2bgColor
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|PreferenceLevel
operator|.
name|prolog2bgColor
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
return|;
default|default :
return|return
name|PreferenceLevel
operator|.
name|prolog2bgColor
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
return|;
block|}
block|}
switch|switch
condition|(
name|pref
operator|.
name|intValue
argument_list|()
condition|)
block|{
case|case
literal|1
case|:
return|return
name|PreferenceLevel
operator|.
name|prolog2bgColor
argument_list|(
name|PreferenceLevel
operator|.
name|sPreferred
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|PreferenceLevel
operator|.
name|prolog2bgColor
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|PreferenceLevel
operator|.
name|prolog2bgColor
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
return|;
default|default :
return|return
name|PreferenceLevel
operator|.
name|prolog2bgColor
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
return|;
block|}
block|}
specifier|public
name|String
name|print
parameter_list|(
name|boolean
name|editable
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|print
argument_list|(
name|editable
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|public
name|String
name|print
parameter_list|(
name|boolean
name|editable
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|Exception
block|{
name|StringBuffer
name|border
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
name|StringBuffer
name|patternEarly
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
name|StringBuffer
name|patternLate
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
name|boolean
name|earlyProh
init|=
literal|true
decl_stmt|,
name|lateProh
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
name|getStartMonth
argument_list|()
init|;
name|m
operator|<=
name|getEndMonth
argument_list|()
condition|;
name|m
operator|++
control|)
block|{
if|if
condition|(
name|m
operator|!=
name|getStartMonth
argument_list|()
condition|)
block|{
name|border
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|patternEarly
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|patternLate
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|border
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|patternEarly
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|patternLate
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|int
name|daysOfMonth
init|=
name|DateUtils
operator|.
name|getNrDaysOfMonth
argument_list|(
name|m
argument_list|,
name|getYear
argument_list|()
argument_list|)
decl_stmt|;
empty_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<=
name|daysOfMonth
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
name|d
operator|>
literal|1
condition|)
block|{
name|border
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|patternEarly
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|patternLate
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|Integer
name|date
init|=
name|getDateOffset
argument_list|(
name|d
argument_list|,
name|m
argument_list|)
decl_stmt|;
name|String
index|[]
name|pref
init|=
name|iPreferences
operator|.
name|get
argument_list|(
name|date
argument_list|)
decl_stmt|;
name|boolean
name|hasPeriod
init|=
name|iDates
operator|.
name|contains
argument_list|(
name|date
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasPeriod
operator|&&
operator|!
literal|"@"
operator|.
name|equals
argument_list|(
name|pref
index|[
literal|0
index|]
argument_list|)
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|pref
index|[
literal|0
index|]
argument_list|)
condition|)
name|earlyProh
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|hasPeriod
operator|&&
operator|!
literal|"@"
operator|.
name|equals
argument_list|(
name|pref
index|[
literal|1
index|]
argument_list|)
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|pref
index|[
literal|1
index|]
argument_list|)
condition|)
name|lateProh
operator|=
literal|false
expr_stmt|;
name|border
operator|.
name|append
argument_list|(
name|getBorder
argument_list|(
name|d
argument_list|,
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|patternEarly
operator|.
name|append
argument_list|(
name|hasPeriod
condition|?
literal|"'"
operator|+
name|pref
index|[
literal|0
index|]
operator|+
literal|"'"
else|:
literal|"'@'"
argument_list|)
expr_stmt|;
name|patternLate
operator|.
name|append
argument_list|(
name|hasPeriod
condition|?
literal|"'"
operator|+
name|pref
index|[
literal|1
index|]
operator|+
literal|"'"
else|:
literal|"'@'"
argument_list|)
expr_stmt|;
block|}
name|border
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|patternEarly
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|patternLate
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|border
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|patternEarly
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|patternLate
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|int
name|firstStartHour
init|=
operator|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|iStarts
operator|.
name|firstElement
argument_list|()
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
literal|60
decl_stmt|;
name|int
name|firstStartMin
init|=
operator|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|iStarts
operator|.
name|firstElement
argument_list|()
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|%
literal|60
decl_stmt|;
name|String
name|firstStart
init|=
operator|(
name|firstStartHour
operator|>
literal|12
condition|?
name|firstStartHour
operator|-
literal|12
else|:
name|firstStartHour
operator|)
operator|+
literal|":"
operator|+
operator|(
name|firstStartMin
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|firstStartMin
operator|+
operator|(
name|firstStartHour
operator|>=
literal|12
condition|?
literal|"p"
else|:
literal|"a"
operator|)
decl_stmt|;
name|int
name|firstEndHour
init|=
operator|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
operator|(
name|iStarts
operator|.
name|firstElement
argument_list|()
operator|+
name|iLength
operator|.
name|get
argument_list|(
name|iStarts
operator|.
name|firstElement
argument_list|()
argument_list|)
operator|)
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
literal|60
decl_stmt|;
name|int
name|firstEndMin
init|=
operator|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
operator|(
name|iStarts
operator|.
name|firstElement
argument_list|()
operator|+
name|iLength
operator|.
name|get
argument_list|(
name|iStarts
operator|.
name|firstElement
argument_list|()
argument_list|)
operator|)
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|%
literal|60
decl_stmt|;
name|String
name|firstEnd
init|=
operator|(
name|firstEndHour
operator|>
literal|12
condition|?
name|firstEndHour
operator|-
literal|12
else|:
name|firstEndHour
operator|)
operator|+
literal|":"
operator|+
operator|(
name|firstEndMin
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|firstEndMin
operator|+
operator|(
name|firstEndHour
operator|>=
literal|12
condition|?
literal|"p"
else|:
literal|"a"
operator|)
decl_stmt|;
name|int
name|lastStartHour
init|=
operator|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|iStarts
operator|.
name|lastElement
argument_list|()
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
literal|60
decl_stmt|;
name|int
name|lastStartMin
init|=
operator|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|iStarts
operator|.
name|lastElement
argument_list|()
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|%
literal|60
decl_stmt|;
name|String
name|lastStart
init|=
operator|(
name|lastStartHour
operator|>
literal|12
condition|?
name|lastStartHour
operator|-
literal|12
else|:
name|lastStartHour
operator|)
operator|+
literal|":"
operator|+
operator|(
name|lastStartMin
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|lastStartMin
operator|+
operator|(
name|lastStartHour
operator|>=
literal|12
condition|?
literal|"p"
else|:
literal|"a"
operator|)
decl_stmt|;
name|int
name|lastEndHour
init|=
operator|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
operator|(
name|iStarts
operator|.
name|lastElement
argument_list|()
operator|+
name|iLength
operator|.
name|get
argument_list|(
name|iStarts
operator|.
name|lastElement
argument_list|()
argument_list|)
operator|)
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
literal|60
decl_stmt|;
name|int
name|lastEndMin
init|=
operator|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
operator|(
name|iStarts
operator|.
name|lastElement
argument_list|()
operator|+
name|iLength
operator|.
name|get
argument_list|(
name|iStarts
operator|.
name|lastElement
argument_list|()
argument_list|)
operator|)
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|%
literal|60
decl_stmt|;
name|String
name|lastEnd
init|=
operator|(
name|lastEndHour
operator|>
literal|12
condition|?
name|lastEndHour
operator|-
literal|12
else|:
name|lastEndHour
operator|)
operator|+
literal|":"
operator|+
operator|(
name|lastEndMin
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|lastEndMin
operator|+
operator|(
name|lastEndHour
operator|>=
literal|12
condition|?
literal|"p"
else|:
literal|"a"
operator|)
decl_stmt|;
name|StringBuffer
name|legendCode
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
name|StringBuffer
name|legendText
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
name|StringBuffer
name|legendColor
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
name|Vector
name|prefs
init|=
operator|new
name|Vector
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevelList
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|prefs
operator|.
name|remove
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|prefs
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|PreferenceLevel
name|p
init|=
operator|(
name|PreferenceLevel
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|legendCode
operator|.
name|append
argument_list|(
literal|"'"
operator|+
name|p
operator|.
name|getPrefProlog
argument_list|()
operator|+
literal|"',"
argument_list|)
expr_stmt|;
name|legendText
operator|.
name|append
argument_list|(
literal|"'"
operator|+
name|p
operator|.
name|getPrefName
argument_list|()
operator|+
literal|"',"
argument_list|)
expr_stmt|;
comment|/*             if (!iLocation&& PreferenceLevel.sNeutral.equals(p.getPrefProlog())) {                 legendColor.append("'"+PreferenceLevel.prolog2bgColor(PreferenceLevel.sDiscouraged)+"',");             } else if (!iLocation&& PreferenceLevel.sDiscouraged.equals(p.getPrefProlog())) {                 legendColor.append("'"+PreferenceLevel.prolog2bgColor(PreferenceLevel.sStronglyDiscouraged)+"',");             } else if (!iLocation&& PreferenceLevel.sStronglyDiscouraged.equals(p.getPrefProlog())) {                 legendColor.append("'"+PreferenceLevel.prolog2bgColor(PreferenceLevel.sProhibited)+"',");             } else if (!iLocation&& PreferenceLevel.sProhibited.equals(p.getPrefProlog())) {                 legendColor.append("'"+PreferenceLevel.prolog2bgColor(PreferenceLevel.sNeutral)+"',");             } else */
name|legendColor
operator|.
name|append
argument_list|(
literal|"'"
operator|+
name|PreferenceLevel
operator|.
name|prolog2bgColor
argument_list|(
name|p
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|"',"
argument_list|)
expr_stmt|;
block|}
name|legendCode
operator|.
name|append
argument_list|(
literal|"'@']"
argument_list|)
expr_stmt|;
name|legendText
operator|.
name|append
argument_list|(
literal|"'No Period']"
argument_list|)
expr_stmt|;
name|legendColor
operator|.
name|append
argument_list|(
literal|"'rgb(150,150,150)']"
argument_list|)
expr_stmt|;
name|boolean
name|early
init|=
operator|(
name|length
operator|<=
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|iLength
operator|.
name|get
argument_list|(
name|iStarts
operator|.
name|firstElement
argument_list|()
argument_list|)
operator|)
operator|&&
operator|(
name|editable
operator|||
name|iLocation
operator|||
operator|!
name|earlyProh
operator|)
decl_stmt|;
name|boolean
name|late
init|=
operator|(
name|length
operator|<=
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|iLength
operator|.
name|get
argument_list|(
name|iStarts
operator|.
name|lastElement
argument_list|()
argument_list|)
operator|)
operator|&&
operator|(
name|editable
operator|||
name|iLocation
operator|||
operator|!
name|lateProh
operator|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<script language='JavaScript' type='text/javascript' src='scripts/datepatt.js'></script>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<script language='JavaScript'>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|early
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"calGenerate("
operator|+
name|getYear
argument_list|()
operator|+
literal|","
operator|+
name|getStartMonth
argument_list|()
operator|+
literal|","
operator|+
name|getEndMonth
argument_list|()
operator|+
literal|","
operator|+
name|patternEarly
operator|+
literal|","
operator|+
name|legendCode
operator|+
literal|","
operator|+
name|legendText
operator|+
literal|","
operator|+
name|legendColor
operator|+
literal|",'0',"
operator|+
name|border
operator|+
literal|","
operator|+
name|editable
operator|+
literal|","
operator|+
name|editable
operator|+
literal|","
operator|+
literal|"'early','("
operator|+
name|firstStart
operator|+
literal|" - "
operator|+
name|firstEnd
operator|+
literal|")',6,true,"
operator|+
operator|!
name|late
operator|+
literal|");"
argument_list|)
expr_stmt|;
if|if
condition|(
name|late
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"calGenerate("
operator|+
name|getYear
argument_list|()
operator|+
literal|","
operator|+
name|getStartMonth
argument_list|()
operator|+
literal|","
operator|+
name|getEndMonth
argument_list|()
operator|+
literal|","
operator|+
name|patternLate
operator|+
literal|","
operator|+
name|legendCode
operator|+
literal|","
operator|+
name|legendText
operator|+
literal|","
operator|+
name|legendColor
operator|+
literal|",'0',"
operator|+
name|border
operator|+
literal|","
operator|+
name|editable
operator|+
literal|","
operator|+
operator|!
name|early
operator|+
literal|","
operator|+
literal|"'late','("
operator|+
name|lastStart
operator|+
literal|" - "
operator|+
name|lastEnd
operator|+
literal|")',6,"
operator|+
operator|!
name|early
operator|+
literal|",true);"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</script>"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|early
operator|&&
operator|!
name|late
condition|)
block|{
if|if
condition|(
name|length
operator|>
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|iLength
operator|.
name|get
argument_list|(
name|iStarts
operator|.
name|firstElement
argument_list|()
argument_list|)
operator|&&
name|length
operator|>
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|iLength
operator|.
name|get
argument_list|(
name|iStarts
operator|.
name|lastElement
argument_list|()
argument_list|)
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"<font color='red'>Examination is too long, no period is availabile.</font>"
argument_list|)
expr_stmt|;
else|else
name|sb
operator|.
name|append
argument_list|(
literal|"<font color='red'>No period is availabile.</font>"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|load
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|iPreferences
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|m
init|=
name|getStartMonth
argument_list|()
init|;
name|m
operator|<=
name|getEndMonth
argument_list|()
condition|;
name|m
operator|++
control|)
block|{
name|int
name|daysOfMonth
init|=
name|DateUtils
operator|.
name|getNrDaysOfMonth
argument_list|(
name|m
argument_list|,
name|getYear
argument_list|()
argument_list|)
decl_stmt|;
empty_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<=
name|daysOfMonth
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|iDates
operator|.
name|contains
argument_list|(
name|getDateOffset
argument_list|(
name|d
argument_list|,
name|m
argument_list|)
argument_list|)
condition|)
continue|continue;
name|iPreferences
operator|.
name|put
argument_list|(
name|getDateOffset
argument_list|(
name|d
argument_list|,
name|m
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
name|request
operator|.
name|getParameter
argument_list|(
literal|"early_val_"
operator|+
operator|(
operator|(
literal|12
operator|+
name|m
operator|)
operator|%
literal|12
operator|)
operator|+
literal|"_"
operator|+
name|d
argument_list|)
block|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"late_val_"
operator|+
operator|(
operator|(
literal|12
operator|+
name|m
operator|)
operator|%
literal|12
operator|)
operator|+
literal|"_"
operator|+
name|d
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toString
argument_list|(
literal|false
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|(
name|boolean
name|html
parameter_list|)
block|{
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd"
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
index|[]
name|fPref
init|=
literal|null
decl_stmt|;
name|int
name|fDate
init|=
operator|-
literal|1
decl_stmt|,
name|lDate
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|Integer
name|date
range|:
name|iDates
control|)
block|{
name|String
index|[]
name|pref
init|=
name|iPreferences
operator|.
name|get
argument_list|(
name|date
argument_list|)
decl_stmt|;
if|if
condition|(
name|fPref
operator|==
literal|null
condition|)
block|{
name|fPref
operator|=
name|pref
expr_stmt|;
name|fDate
operator|=
name|date
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|fPref
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|pref
index|[
literal|0
index|]
argument_list|)
operator|||
operator|!
name|fPref
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|pref
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|fPref
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|fPref
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|iLocation
operator|&&
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|fPref
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
comment|//
block|}
if|else if
condition|(
operator|!
name|iLocation
operator|&&
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|fPref
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
comment|//
block|}
else|else
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
if|if
condition|(
name|html
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<span style='color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|fPref
index|[
literal|0
index|]
argument_list|)
operator|+
literal|";' title='"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2string
argument_list|(
name|fPref
index|[
literal|0
index|]
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|fDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fDate
operator|!=
name|lDate
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|" - "
operator|+
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|lDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|fDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fDate
operator|!=
name|lDate
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|" - "
operator|+
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|lDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</span>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|fPref
index|[
literal|0
index|]
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|fDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fDate
operator|!=
name|lDate
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|" - "
operator|+
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|lDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
literal|"@"
operator|.
name|equals
argument_list|(
name|fPref
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
comment|//
block|}
if|else if
condition|(
name|iLocation
operator|&&
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|fPref
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
comment|//
block|}
if|else if
condition|(
operator|!
name|iLocation
operator|&&
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|fPref
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
comment|//
block|}
else|else
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
if|if
condition|(
name|html
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<span style='color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|fPref
index|[
literal|0
index|]
argument_list|)
operator|+
literal|";' title='"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2string
argument_list|(
name|fPref
index|[
literal|0
index|]
argument_list|)
operator|+
literal|" Early "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|fDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fDate
operator|!=
name|lDate
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|" - "
operator|+
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|lDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Early "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|fDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fDate
operator|!=
name|lDate
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|" - "
operator|+
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|lDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</span>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|fPref
index|[
literal|0
index|]
argument_list|)
operator|+
literal|" Early "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|fDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fDate
operator|!=
name|lDate
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|" - "
operator|+
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|lDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"@"
operator|.
name|equals
argument_list|(
name|fPref
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
comment|//
block|}
if|else if
condition|(
name|iLocation
operator|&&
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|fPref
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
comment|//
block|}
if|else if
condition|(
operator|!
name|iLocation
operator|&&
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|fPref
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
comment|//
block|}
else|else
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
if|if
condition|(
name|html
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<span style='color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|fPref
index|[
literal|1
index|]
argument_list|)
operator|+
literal|";' title='"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2string
argument_list|(
name|fPref
index|[
literal|1
index|]
argument_list|)
operator|+
literal|" Late "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|fDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fDate
operator|!=
name|lDate
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|" - "
operator|+
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|lDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Late "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|fDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fDate
operator|!=
name|lDate
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|" - "
operator|+
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|lDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</span>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|fPref
index|[
literal|1
index|]
argument_list|)
operator|+
literal|" Late "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|fDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fDate
operator|!=
name|lDate
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|" - "
operator|+
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|lDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|fPref
operator|=
name|pref
expr_stmt|;
name|fDate
operator|=
name|date
expr_stmt|;
block|}
name|lDate
operator|=
name|date
expr_stmt|;
block|}
if|if
condition|(
name|fPref
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fPref
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|fPref
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|iLocation
operator|&&
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|fPref
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
comment|//
block|}
if|else if
condition|(
operator|!
name|iLocation
operator|&&
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|fPref
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
comment|//
block|}
else|else
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
if|if
condition|(
name|html
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<span style='color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|fPref
index|[
literal|0
index|]
argument_list|)
operator|+
literal|";' title='"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2string
argument_list|(
name|fPref
index|[
literal|0
index|]
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|fDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fDate
operator|!=
name|lDate
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|" - "
operator|+
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|lDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|fDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fDate
operator|!=
name|lDate
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|" - "
operator|+
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|lDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</span>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|fPref
index|[
literal|0
index|]
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|fDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fDate
operator|!=
name|lDate
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|" - "
operator|+
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|lDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
literal|"@"
operator|.
name|equals
argument_list|(
name|fPref
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
comment|//
block|}
if|else if
condition|(
name|iLocation
operator|&&
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|fPref
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
comment|//
block|}
if|else if
condition|(
operator|!
name|iLocation
operator|&&
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|fPref
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
comment|//
block|}
else|else
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
if|if
condition|(
name|html
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<span style='color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|fPref
index|[
literal|0
index|]
argument_list|)
operator|+
literal|";' title='"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2string
argument_list|(
name|fPref
index|[
literal|0
index|]
argument_list|)
operator|+
literal|" Early "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|fDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fDate
operator|!=
name|lDate
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|" - "
operator|+
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|lDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Early "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|fDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fDate
operator|!=
name|lDate
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|" - "
operator|+
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|lDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</span>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|fPref
index|[
literal|0
index|]
argument_list|)
operator|+
literal|" Early "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|fDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fDate
operator|!=
name|lDate
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|" - "
operator|+
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|lDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"@"
operator|.
name|equals
argument_list|(
name|fPref
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
comment|//
block|}
if|else if
condition|(
name|iLocation
operator|&&
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|fPref
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
comment|//
block|}
if|else if
condition|(
operator|!
name|iLocation
operator|&&
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|fPref
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
comment|//
block|}
else|else
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
if|if
condition|(
name|html
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<span style='color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|fPref
index|[
literal|1
index|]
argument_list|)
operator|+
literal|";' title='"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2string
argument_list|(
name|fPref
index|[
literal|1
index|]
argument_list|)
operator|+
literal|" Late "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|fDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fDate
operator|!=
name|lDate
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|" - "
operator|+
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|lDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Late "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|fDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fDate
operator|!=
name|lDate
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|" - "
operator|+
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|lDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</span>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|fPref
index|[
literal|1
index|]
argument_list|)
operator|+
literal|" Late "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|fDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fDate
operator|!=
name|lDate
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|" - "
operator|+
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|lDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/*         if (iLocation&& fPref!=null&& fDate==iDates.first()&& lDate==iDates.last()) {             if (fPref[0].equals(fPref[1])) {                 if (PreferenceLevel.sNeutral.equals(fPref[0])) {                     return "";                 } else if (PreferenceLevel.sProhibited.equals(fPref[0])) {                     return "Not Available";                 } else {                     return PreferenceLevel.getPreferenceLevel(fPref[0]).getPrefName();                 }             } else {                 String ret = "";                 if ("@".equals(fPref[0])) {                 } else if (PreferenceLevel.sNeutral.equals(fPref[0])) {                 } else if (PreferenceLevel.sProhibited.equals(fPref[0])) {                     ret += "Not Available Early";                 } else {                     ret += PreferenceLevel.getPreferenceLevel(fPref[0]).getPrefName()+" Early";                 }                 if ("@".equals(fPref[1])) {                 } else if (PreferenceLevel.sNeutral.equals(fPref[1])) {                 } else if (PreferenceLevel.sProhibited.equals(fPref[1])) {                     if (ret.length()>0) ret+=", ";                     ret += "Not Available Late";                 } else {                     ret += PreferenceLevel.getPreferenceLevel(fPref[0]).getPrefName()+" Late";                 }             }         }         */
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
comment|//(iLocation?sb.toString().replaceAll(PreferenceLevel.prolog2abbv(PreferenceLevel.sProhibited),"N/A"):sb.toString());
block|}
block|}
end_class

end_unit

