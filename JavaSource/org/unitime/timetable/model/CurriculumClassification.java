begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|SAXReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|XMLWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseCurriculumClassification
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CurriculumClassification
extends|extends
name|BaseCurriculumClassification
implements|implements
name|Comparable
argument_list|<
name|CurriculumClassification
argument_list|>
block|{
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CurriculumClassification
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|CurriculumClassification
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|CurriculumClassification
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
specifier|public
name|int
name|compareTo
parameter_list|(
name|CurriculumClassification
name|cc
parameter_list|)
block|{
if|if
condition|(
name|getAcademicClassification
argument_list|()
operator|!=
literal|null
operator|&&
name|cc
operator|.
name|getAcademicClassification
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|cmp
init|=
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
operator|.
name|compareTo
argument_list|(
name|cc
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
if|if
condition|(
name|getOrd
argument_list|()
operator|!=
literal|null
operator|&&
name|cc
operator|.
name|getOrd
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getOrd
argument_list|()
operator|.
name|equals
argument_list|(
name|cc
operator|.
name|getOrd
argument_list|()
argument_list|)
condition|)
return|return
name|getOrd
argument_list|()
operator|.
name|compareTo
argument_list|(
name|cc
operator|.
name|getOrd
argument_list|()
argument_list|)
return|;
name|int
name|cmp
init|=
name|getName
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|cc
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
else|:
name|getUniqueId
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|cc
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|cc
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Document
name|getStudentsDocument
parameter_list|()
block|{
if|if
condition|(
name|getStudents
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
try|try
block|{
return|return
operator|new
name|SAXReader
argument_list|()
operator|.
name|read
argument_list|(
operator|new
name|StringReader
argument_list|(
name|getStudents
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Failed to load cached students for "
operator|+
name|getCurriculum
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" "
operator|+
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|void
name|setStudentsDocument
parameter_list|(
name|Document
name|document
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|document
operator|==
literal|null
condition|)
block|{
name|setStudents
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StringWriter
name|string
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|XMLWriter
name|writer
init|=
operator|new
name|XMLWriter
argument_list|(
name|string
argument_list|,
name|OutputFormat
operator|.
name|createCompactFormat
argument_list|()
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|setStudents
argument_list|(
name|string
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Failed to store cached students for "
operator|+
name|getCurriculum
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" "
operator|+
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

