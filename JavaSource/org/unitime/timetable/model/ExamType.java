begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|SessionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|ExaminationMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseExamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserAuthority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|permissions
operator|.
name|SimpleExaminationPermission
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ExamType
extends|extends
name|BaseExamType
implements|implements
name|Comparable
argument_list|<
name|ExamType
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|protected
specifier|static
name|ExaminationMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|ExaminationMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sExamTypeFinal
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sExamTypeMidterm
init|=
literal|1
decl_stmt|;
specifier|public
name|ExamType
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|ExamType
name|o
parameter_list|)
block|{
return|return
operator|(
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|o
operator|.
name|getType
argument_list|()
argument_list|)
condition|?
name|getLabel
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|o
operator|.
name|getLabel
argument_list|()
argument_list|)
else|:
name|getType
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|getType
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|public
specifier|static
name|ExamType
name|findByReference
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
return|return
operator|(
name|ExamType
operator|)
name|ExamTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from ExamType where reference = :ref"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"ref"
argument_list|,
name|ref
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|ExamType
argument_list|>
name|findAllOfType
parameter_list|(
name|int
name|type
parameter_list|)
block|{
return|return
operator|(
name|List
argument_list|<
name|ExamType
argument_list|>
operator|)
name|ExamTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from ExamType where type = :type order by type, label"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|TreeSet
argument_list|<
name|ExamType
argument_list|>
name|findAllUsed
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
return|return
operator|new
name|TreeSet
argument_list|<
name|ExamType
argument_list|>
argument_list|(
name|ExamTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct p.examType from ExamPeriod p where p.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|ExamType
argument_list|>
name|findAllApplicable
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|DepartmentStatusType
operator|.
name|Status
modifier|...
name|status
parameter_list|)
block|{
name|List
argument_list|<
name|ExamType
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<
name|ExamType
argument_list|>
argument_list|()
decl_stmt|;
name|UserAuthority
name|authority
init|=
operator|(
name|user
operator|==
literal|null
condition|?
literal|null
else|:
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|authority
operator|==
literal|null
condition|)
return|return
name|types
return|;
name|SimpleExaminationPermission
name|p
init|=
operator|new
name|SimpleExaminationPermission
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamType
name|type
range|:
name|findAll
argument_list|()
control|)
block|{
name|ExamStatus
name|examStatus
init|=
name|ExamStatus
operator|.
name|findStatus
argument_list|(
name|user
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|,
name|type
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|examStatus
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|checkManager
argument_list|(
name|authority
argument_list|,
name|examStatus
argument_list|,
name|status
argument_list|)
operator|&&
name|p
operator|.
name|checkStatus
argument_list|(
name|authority
argument_list|,
name|examStatus
operator|.
name|effectiveStatus
argument_list|()
argument_list|,
name|status
argument_list|)
condition|)
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|types
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|ExamType
argument_list|>
name|findAllUsedApplicable
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|DepartmentStatusType
operator|.
name|Status
modifier|...
name|status
parameter_list|)
block|{
name|List
argument_list|<
name|ExamType
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<
name|ExamType
argument_list|>
argument_list|()
decl_stmt|;
name|UserAuthority
name|authority
init|=
operator|(
name|user
operator|==
literal|null
condition|?
literal|null
else|:
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|authority
operator|==
literal|null
condition|)
return|return
name|types
return|;
name|SimpleExaminationPermission
name|p
init|=
operator|new
name|SimpleExaminationPermission
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamType
name|type
range|:
name|findAllUsed
argument_list|(
name|user
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
control|)
block|{
name|ExamStatus
name|examStatus
init|=
name|ExamStatus
operator|.
name|findStatus
argument_list|(
name|user
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|,
name|type
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|examStatus
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|checkManager
argument_list|(
name|authority
argument_list|,
name|examStatus
argument_list|,
name|status
argument_list|)
operator|&&
name|p
operator|.
name|checkStatus
argument_list|(
name|authority
argument_list|,
name|examStatus
operator|.
name|effectiveStatus
argument_list|()
argument_list|,
name|status
argument_list|)
condition|)
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|types
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|ExamType
argument_list|>
name|findAll
parameter_list|()
block|{
return|return
name|findAll
argument_list|(
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|ExamType
argument_list|>
name|findAll
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
return|return
operator|(
name|List
argument_list|<
name|ExamType
argument_list|>
operator|)
operator|(
name|hibSession
operator|!=
literal|null
condition|?
name|hibSession
else|:
name|ExamTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|)
operator|.
name|createQuery
argument_list|(
literal|"from ExamType order by type, label"
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isUsed
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|ExamTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(p) from ExamPeriod p where p.examType.uniqueId = :typeId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"typeId"
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
operator|>
literal|0
return|;
block|}
else|else
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|ExamTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(p) from ExamPeriod p where p.examType.uniqueId = :typeId and p.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"typeId"
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
operator|>
literal|0
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|refreshSolution
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Long
name|examTypeId
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|ExamTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|SessionFactory
name|hibSessionFactory
init|=
name|hibSession
operator|.
name|getSessionFactory
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|examId
range|:
operator|(
name|List
argument_list|<
name|Long
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select x.uniqueId from Exam x where x.session.uniqueId = :sessionId and x.examType.uniqueId = :examTypeId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|examTypeId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|hibSessionFactory
operator|.
name|getCache
argument_list|()
operator|.
name|evictEntity
argument_list|(
name|Exam
operator|.
name|class
argument_list|,
name|examId
argument_list|)
expr_stmt|;
name|hibSessionFactory
operator|.
name|getCache
argument_list|()
operator|.
name|evictCollection
argument_list|(
name|Exam
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".assignedRooms"
argument_list|,
name|examId
argument_list|)
expr_stmt|;
name|hibSessionFactory
operator|.
name|getCache
argument_list|()
operator|.
name|evictCollection
argument_list|(
name|Exam
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".conflicts"
argument_list|,
name|examId
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Long
name|eventId
range|:
operator|(
name|List
argument_list|<
name|Long
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select e.uniqueId from ExamEvent e inner join e.exam x where x.session.uniqueId = :sessionId and x.examType.uniqueId = :examTypeId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|examTypeId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|hibSessionFactory
operator|.
name|getCache
argument_list|()
operator|.
name|evictEntity
argument_list|(
name|Event
operator|.
name|class
argument_list|,
name|eventId
argument_list|)
expr_stmt|;
name|hibSessionFactory
operator|.
name|getCache
argument_list|()
operator|.
name|evictCollection
argument_list|(
name|Event
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".meetings"
argument_list|,
name|eventId
argument_list|)
expr_stmt|;
block|}
name|hibSessionFactory
operator|.
name|getCache
argument_list|()
operator|.
name|evictDefaultQueryRegion
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

