begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BasePosMinor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|PosMinorDAO
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|PosMinor
extends|extends
name|BasePosMinor
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|PosMinor
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|PosMinor
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
specifier|public
specifier|static
name|PosMinor
name|findByCode
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|String
name|code
parameter_list|)
block|{
return|return
operator|(
name|PosMinor
operator|)
operator|new
name|PosMinorDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select a from PosMinor a where "
operator|+
literal|"a.session.uniqueId=:sessionId and "
operator|+
literal|"a.code=:code"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"code"
argument_list|,
name|code
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|PosMinor
name|findByCodeAcadAreaId
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|String
name|code
parameter_list|,
name|Long
name|areaId
parameter_list|)
block|{
if|if
condition|(
name|areaId
operator|==
literal|null
condition|)
return|return
name|findByCode
argument_list|(
name|sessionId
argument_list|,
name|code
argument_list|)
return|;
return|return
operator|(
name|PosMinor
operator|)
operator|new
name|PosMinorDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select p from PosMinor p inner join p.academicAreas a where "
operator|+
literal|"p.session.uniqueId=:sessionId and "
operator|+
literal|"a.uniqueId=:areaId and p.code=:code"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"areaId"
argument_list|,
name|areaId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"code"
argument_list|,
name|code
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|PosMinor
name|findByCodeAcadAreaAbbv
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|String
name|code
parameter_list|,
name|String
name|areaAbbv
parameter_list|)
block|{
if|if
condition|(
name|areaAbbv
operator|==
literal|null
operator|||
name|areaAbbv
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
name|findByCode
argument_list|(
name|sessionId
argument_list|,
name|code
argument_list|)
return|;
return|return
operator|(
name|PosMinor
operator|)
operator|new
name|PosMinorDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select p from PosMinor p inner join p.academicAreas a where "
operator|+
literal|"p.session.uniqueId=:sessionId and "
operator|+
literal|"a.academicAreaAbbreviation=:areaAbbv and p.code=:code"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"areaAbbv"
argument_list|,
name|areaAbbv
argument_list|)
operator|.
name|setString
argument_list|(
literal|"code"
argument_list|,
name|code
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|PosMinor
name|m
init|=
operator|new
name|PosMinor
argument_list|()
decl_stmt|;
name|m
operator|.
name|setExternalUniqueId
argument_list|(
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setCode
argument_list|(
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setName
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
block|}
end_class

end_unit

