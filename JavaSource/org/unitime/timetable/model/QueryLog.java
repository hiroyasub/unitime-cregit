begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|Days
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|Hours
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|Minutes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|Months
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|ReadablePeriod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseQueryLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|QueryLogDAO
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|QueryLog
extends|extends
name|BaseQueryLog
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|7073111443207707716L
decl_stmt|;
specifier|protected
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|QueryLog
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|QueryLog
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
enum|enum
name|Type
block|{
name|STRUCTS
block|,
name|GWT
block|,
name|OTHER
block|,
name|RPC
block|}
specifier|public
specifier|static
name|int
name|getNrSessions
parameter_list|(
name|int
name|days
parameter_list|)
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
operator|-
name|days
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|Number
operator|)
name|QueryLogDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(distinct q.sessionId) from QueryLog q where q.timeStamp> :date"
argument_list|)
operator|.
name|setTimestamp
argument_list|(
literal|"date"
argument_list|,
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|int
name|getNrActiveUsers
parameter_list|(
name|int
name|days
parameter_list|)
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
operator|-
name|days
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|Number
operator|)
name|QueryLogDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(distinct q.uid) from QueryLog q where q.timeStamp> :date"
argument_list|)
operator|.
name|setTimestamp
argument_list|(
literal|"date"
argument_list|,
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|WebTable
name|getTopQueries
parameter_list|(
name|int
name|days
parameter_list|)
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
operator|-
name|days
argument_list|)
expr_stmt|;
name|WebTable
name|table
init|=
operator|new
name|WebTable
argument_list|(
literal|8
argument_list|,
literal|"Page Statistics (last "
operator|+
name|days
operator|+
literal|" days)"
argument_list|,
literal|"stats.do?ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"URI"
block|,
literal|"Calls"
block|,
literal|"Calls [>10ms]"
block|,
literal|"Calls [>100ms]"
block|,
literal|"Calls [>1min]"
block|,
literal|"AvgTime [ms]"
block|,
literal|"MaxTime [s]"
block|,
literal|"Errors"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|}
argument_list|)
decl_stmt|;
name|DecimalFormat
name|df
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"#,##0.00"
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|errors
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|QueryLogDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select q.uri, count(q) from "
operator|+
literal|"QueryLog q where q.timeStamp> :date and q.exception is not null group by q.uri"
argument_list|)
operator|.
name|setTimestamp
argument_list|(
literal|"date"
argument_list|,
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|errors
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|overMinutes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|QueryLogDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select q.uri, count(q) from "
operator|+
literal|"QueryLog q where q.timeStamp> :date and q.timeSpent> 1000 group by q.uri"
argument_list|)
operator|.
name|setTimestamp
argument_list|(
literal|"date"
argument_list|,
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|overMinutes
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|over100mss
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|QueryLogDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select q.uri, count(q) from "
operator|+
literal|"QueryLog q where q.timeStamp> :date and q.timeSpent> 100 group by q.uri"
argument_list|)
operator|.
name|setTimestamp
argument_list|(
literal|"date"
argument_list|,
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|over100mss
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|over10mss
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|QueryLogDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select q.uri, count(q) from "
operator|+
literal|"QueryLog q where q.timeStamp> :date and q.timeSpent> 10 group by q.uri"
argument_list|)
operator|.
name|setTimestamp
argument_list|(
literal|"date"
argument_list|,
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|over10mss
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|QueryLogDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select q.uri, count(q), avg(q.timeSpent), max(q.timeSpent) from "
operator|+
literal|"QueryLog q where q.timeStamp> :date group by q.uri"
argument_list|)
operator|.
name|setTimestamp
argument_list|(
literal|"date"
argument_list|,
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Integer
name|nrErrors
init|=
name|errors
operator|.
name|get
argument_list|(
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|nrErrors
operator|==
literal|null
condition|)
name|nrErrors
operator|=
literal|0
expr_stmt|;
name|Integer
name|overMinute
init|=
name|overMinutes
operator|.
name|get
argument_list|(
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|overMinute
operator|==
literal|null
condition|)
name|overMinute
operator|=
literal|0
expr_stmt|;
name|Integer
name|over100ms
init|=
name|over100mss
operator|.
name|get
argument_list|(
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|over100ms
operator|==
literal|null
condition|)
name|over100ms
operator|=
literal|0
expr_stmt|;
name|Integer
name|over10ms
init|=
name|over10mss
operator|.
name|get
argument_list|(
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|over10ms
operator|==
literal|null
condition|)
name|over10ms
operator|=
literal|0
expr_stmt|;
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
block|,
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|toString
argument_list|()
block|,
name|over10ms
operator|.
name|toString
argument_list|()
block|,
name|over100ms
operator|.
name|toString
argument_list|()
block|,
name|overMinute
operator|.
name|toString
argument_list|()
block|,
name|df
operator|.
name|format
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|2
index|]
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
block|,
name|df
operator|.
name|format
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|3
index|]
operator|)
operator|.
name|doubleValue
argument_list|()
operator|/
literal|1000.0
argument_list|)
block|,
name|nrErrors
operator|.
name|toString
argument_list|()
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
block|,
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
block|,
name|over10ms
block|,
name|over100ms
block|,
name|overMinute
block|,
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|2
index|]
operator|)
operator|.
name|doubleValue
argument_list|()
block|,
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|3
index|]
operator|)
operator|.
name|doubleValue
argument_list|()
block|,
name|nrErrors
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|table
return|;
block|}
specifier|public
specifier|static
enum|enum
name|ChartWindow
block|{
name|LAST_HOUR
argument_list|(
literal|"Last 3 Hours"
argument_list|,
literal|"kkmm"
argument_list|,
name|Hours
operator|.
name|THREE
argument_list|,
literal|10
argument_list|,
name|Minutes
operator|.
name|ONE
argument_list|,
literal|"k:mm"
argument_list|,
name|DateTimeFieldType
operator|.
name|minuteOfHour
argument_list|()
argument_list|,
literal|20
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|"Minute"
argument_list|,
literal|"to_char(timeStamp, 'HH24MI')"
argument_list|,
literal|"timeStamp> current_date() - 1"
argument_list|,
literal|"date_format(timeStamp, '%H%i')"
argument_list|,
literal|"timeStamp> adddate(current_date(), -1)"
argument_list|)
block|,
comment|/*		LAST_DAY("Last 24 Hours (1-hour average)", "kk", Days.ONE, 1, Hours.ONE, 				"k", 2, 60, "Hour", 				"to_char(timeStamp, 'HH24')", "timeStamp> current_date() - 1", 				"date_format(timeStamp, '%H')", "timeStamp> adddate(current_date(), -1)"),*/
name|LAST_WEEK
argument_list|(
literal|"Last 7 Days"
argument_list|,
literal|"ddkk"
argument_list|,
name|Days
operator|.
name|SEVEN
argument_list|,
literal|1
argument_list|,
name|Hours
operator|.
name|ONE
argument_list|,
literal|"MM/d"
argument_list|,
name|DateTimeFieldType
operator|.
name|hourOfDay
argument_list|()
argument_list|,
literal|24
argument_list|,
literal|0
argument_list|,
literal|60
argument_list|,
literal|"Hour"
argument_list|,
literal|"to_char(timeStamp, 'DDHH24')"
argument_list|,
literal|"timeStamp> current_date() - 7"
argument_list|,
literal|"date_format(timeStamp, '%d%H')"
argument_list|,
literal|"timeStamp> adddate(current_date(), -7)"
argument_list|)
block|,
name|LAST_MONTH
argument_list|(
literal|"Last 3 Months"
argument_list|,
literal|"MMdd"
argument_list|,
name|Months
operator|.
name|THREE
argument_list|,
literal|1
argument_list|,
name|Days
operator|.
name|ONE
argument_list|,
literal|"MMM/d"
argument_list|,
name|DateTimeFieldType
operator|.
name|dayOfMonth
argument_list|()
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
literal|24
operator|*
literal|60
argument_list|,
literal|"Day"
argument_list|,
literal|"to_char(timeStamp, 'MMDD')"
argument_list|,
literal|"timeStamp> current_date() - 92"
argument_list|,
literal|"date_format(timeStamp, '%m%d')"
argument_list|,
literal|"timeStamp> adddate(current_date(), -92)"
argument_list|)
block|, 		;
specifier|private
name|String
name|iName
decl_stmt|;
specifier|private
name|DateFormat
name|iFormat
decl_stmt|;
specifier|private
name|ReadablePeriod
name|iStart
decl_stmt|,
name|iIncrement
decl_stmt|;
specifier|private
name|int
name|iWindow
decl_stmt|;
specifier|private
name|String
name|iOracleFormat
decl_stmt|,
name|iOracleCondition
decl_stmt|;
specifier|private
name|String
name|iMySqlFormat
decl_stmt|,
name|iMySqlCondition
decl_stmt|;
specifier|private
name|String
name|iAxeFormat
decl_stmt|,
name|iBase
decl_stmt|;
specifier|private
name|int
name|iMinutes
decl_stmt|;
specifier|private
name|DateTimeFieldType
name|iAxeType
decl_stmt|;
name|int
name|iAxeMod
decl_stmt|,
name|iAxeValue
decl_stmt|;
name|ChartWindow
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|format
parameter_list|,
name|ReadablePeriod
name|start
parameter_list|,
name|int
name|window
parameter_list|,
name|ReadablePeriod
name|increment
parameter_list|,
name|String
name|axeFormat
parameter_list|,
name|DateTimeFieldType
name|axeType
parameter_list|,
name|int
name|axeMod
parameter_list|,
name|int
name|axeValue
parameter_list|,
name|int
name|minutes
parameter_list|,
name|String
name|base
parameter_list|,
name|String
name|oracleFormat
parameter_list|,
name|String
name|oracleCondition
parameter_list|,
name|String
name|mySqlFormat
parameter_list|,
name|String
name|mySqlCondition
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
name|iFormat
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
name|format
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
name|iStart
operator|=
name|start
expr_stmt|;
name|iWindow
operator|=
name|window
expr_stmt|;
name|iIncrement
operator|=
name|increment
expr_stmt|;
name|iAxeFormat
operator|=
name|axeFormat
expr_stmt|;
name|iAxeType
operator|=
name|axeType
expr_stmt|;
name|iAxeMod
operator|=
name|axeMod
expr_stmt|;
name|iAxeValue
operator|=
name|axeValue
expr_stmt|;
name|iMinutes
operator|=
name|minutes
expr_stmt|;
name|iBase
operator|=
name|base
expr_stmt|;
name|iOracleFormat
operator|=
name|oracleFormat
expr_stmt|;
name|iOracleCondition
operator|=
name|oracleCondition
expr_stmt|;
name|iMySqlFormat
operator|=
name|mySqlFormat
expr_stmt|;
name|iMySqlCondition
operator|=
name|mySqlCondition
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|String
name|getBase
parameter_list|()
block|{
return|return
name|iBase
return|;
block|}
specifier|public
name|String
name|format
parameter_list|(
name|DateTime
name|date
parameter_list|)
block|{
return|return
name|iFormat
operator|.
name|format
argument_list|(
name|date
operator|.
name|getMillis
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|DateTime
name|getFirst
parameter_list|(
name|DateTime
name|now
parameter_list|)
block|{
return|return
name|now
operator|.
name|minus
argument_list|(
name|iStart
argument_list|)
return|;
block|}
specifier|public
name|DateTime
name|next
parameter_list|(
name|DateTime
name|date
parameter_list|,
name|DateTime
name|now
parameter_list|)
block|{
name|DateTime
name|ret
init|=
name|date
operator|.
name|plus
argument_list|(
name|iIncrement
argument_list|)
decl_stmt|;
return|return
operator|(
name|ret
operator|.
name|isAfter
argument_list|(
name|now
argument_list|)
condition|?
literal|null
else|:
name|ret
operator|)
return|;
block|}
specifier|public
name|int
name|getMinutes
parameter_list|()
block|{
return|return
name|iMinutes
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|int
index|[]
argument_list|>
name|getUsersAndSessions
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|String
name|query
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|HibernateUtil
operator|.
name|isMySQL
argument_list|()
condition|)
block|{
name|query
operator|=
literal|"select "
operator|+
name|iMySqlFormat
operator|+
literal|", count(distinct uid), count(distinct sessionId) from "
operator|+
literal|"QueryLog where "
operator|+
name|iMySqlCondition
operator|+
literal|" group by "
operator|+
name|iMySqlFormat
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
literal|"select "
operator|+
name|iOracleFormat
operator|+
literal|", count(distinct uid), count(distinct sessionId) from "
operator|+
literal|"QueryLog where "
operator|+
name|iOracleCondition
operator|+
literal|" group by "
operator|+
name|iOracleFormat
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|int
index|[]
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|int
index|[]
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
name|query
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|String
name|dt
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|int
name|users
init|=
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|sessions
init|=
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|2
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|dt
argument_list|,
operator|new
name|int
index|[]
block|{
name|users
block|,
name|sessions
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|int
index|[]
argument_list|>
name|getQueriesPerType
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|String
name|query
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|HibernateUtil
operator|.
name|isMySQL
argument_list|()
condition|)
block|{
name|query
operator|=
literal|"select "
operator|+
name|iMySqlFormat
operator|+
literal|", type, count(uniqueId) from "
operator|+
literal|"QueryLog where "
operator|+
name|iMySqlCondition
operator|+
literal|" group by type, "
operator|+
name|iMySqlFormat
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
literal|"select "
operator|+
name|iOracleFormat
operator|+
literal|", type, count(uniqueId) from "
operator|+
literal|"QueryLog where "
operator|+
name|iOracleCondition
operator|+
literal|" group by type, "
operator|+
name|iOracleFormat
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|int
index|[]
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|int
index|[]
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
name|query
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|String
name|dt
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|int
name|type
init|=
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|queries
init|=
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|2
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
index|[]
name|counts
init|=
name|ret
operator|.
name|get
argument_list|(
name|dt
argument_list|)
decl_stmt|;
if|if
condition|(
name|counts
operator|==
literal|null
condition|)
block|{
name|counts
operator|=
operator|new
name|int
index|[
name|Type
operator|.
name|values
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|counts
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|counts
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|dt
argument_list|,
name|counts
argument_list|)
expr_stmt|;
block|}
name|counts
index|[
name|type
index|]
operator|=
name|queries
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|double
index|[]
argument_list|>
name|getTimes
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|String
name|query
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|HibernateUtil
operator|.
name|isMySQL
argument_list|()
condition|)
block|{
name|query
operator|=
literal|"select "
operator|+
name|iMySqlFormat
operator|+
literal|", type, count(uniqueId), sum(timeSpent), max(timeSpent) from "
operator|+
literal|"QueryLog where "
operator|+
name|iMySqlCondition
operator|+
literal|" group by type, "
operator|+
name|iMySqlFormat
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
literal|"select "
operator|+
name|iOracleFormat
operator|+
literal|", type, count(uniqueId), sum(timeSpent), max(timeSpent) from "
operator|+
literal|"QueryLog where "
operator|+
name|iOracleCondition
operator|+
literal|" group by type, "
operator|+
name|iOracleFormat
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|double
index|[]
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|double
index|[]
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
name|query
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|String
name|dt
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|int
name|type
init|=
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|2
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|double
name|sum
init|=
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|3
index|]
operator|)
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
name|double
name|max
init|=
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|4
index|]
operator|)
operator|.
name|doubleValue
argument_list|()
operator|/
literal|1000.0
decl_stmt|;
name|double
index|[]
name|counts
init|=
name|ret
operator|.
name|get
argument_list|(
name|dt
argument_list|)
decl_stmt|;
if|if
condition|(
name|counts
operator|==
literal|null
condition|)
block|{
name|counts
operator|=
operator|new
name|double
index|[
literal|3
operator|*
name|Type
operator|.
name|values
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|counts
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|counts
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|dt
argument_list|,
name|counts
argument_list|)
expr_stmt|;
block|}
name|counts
index|[
literal|3
operator|*
name|type
index|]
operator|=
name|sum
expr_stmt|;
name|counts
index|[
literal|3
operator|*
name|type
operator|+
literal|1
index|]
operator|=
name|cnt
expr_stmt|;
name|counts
index|[
literal|3
operator|*
name|type
operator|+
literal|2
index|]
operator|=
name|max
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|double
index|[]
name|countUsers
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|int
index|[]
argument_list|>
name|table
parameter_list|,
name|DateTime
name|date
parameter_list|)
block|{
name|DateTime
name|d
init|=
name|date
decl_stmt|;
name|int
index|[]
name|ret
init|=
operator|new
name|int
index|[
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ret
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|ret
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iWindow
condition|;
name|i
operator|++
control|)
block|{
name|int
index|[]
name|count
init|=
name|table
operator|.
name|get
argument_list|(
name|format
argument_list|(
name|d
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|count
operator|.
name|length
condition|;
name|j
operator|++
control|)
name|ret
index|[
name|j
index|]
operator|+=
name|count
index|[
name|j
index|]
expr_stmt|;
name|d
operator|=
name|d
operator|.
name|plus
argument_list|(
name|iIncrement
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|double
index|[]
block|{
operator|(
operator|(
name|double
operator|)
name|ret
index|[
literal|0
index|]
operator|)
operator|/
name|iWindow
block|,
operator|(
operator|(
name|double
operator|)
name|ret
index|[
literal|1
index|]
operator|)
operator|/
name|iWindow
block|}
return|;
block|}
specifier|public
name|int
index|[]
name|countQueries
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|int
index|[]
argument_list|>
name|table
parameter_list|,
name|DateTime
name|date
parameter_list|)
block|{
name|DateTime
name|d
init|=
name|date
decl_stmt|;
name|int
index|[]
name|ret
init|=
operator|new
name|int
index|[
name|Type
operator|.
name|values
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ret
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|ret
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iWindow
condition|;
name|i
operator|++
control|)
block|{
name|int
index|[]
name|count
init|=
name|table
operator|.
name|get
argument_list|(
name|format
argument_list|(
name|d
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|count
operator|.
name|length
condition|;
name|j
operator|++
control|)
name|ret
index|[
name|j
index|]
operator|+=
name|count
index|[
name|j
index|]
expr_stmt|;
name|d
operator|=
name|d
operator|.
name|plus
argument_list|(
name|iIncrement
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|double
index|[]
name|countTimes
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|double
index|[]
argument_list|>
name|table
parameter_list|,
name|DateTime
name|date
parameter_list|)
block|{
name|DateTime
name|d
init|=
name|date
decl_stmt|;
name|double
index|[]
name|ret
init|=
operator|new
name|double
index|[
literal|3
operator|*
name|Type
operator|.
name|values
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ret
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|ret
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iWindow
condition|;
name|i
operator|++
control|)
block|{
name|double
index|[]
name|count
init|=
name|table
operator|.
name|get
argument_list|(
name|format
argument_list|(
name|d
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|count
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|j
operator|%
literal|3
operator|)
operator|==
literal|2
condition|)
name|ret
index|[
name|j
index|]
operator|=
name|Math
operator|.
name|max
argument_list|(
name|ret
index|[
name|j
index|]
argument_list|,
name|count
index|[
name|j
index|]
argument_list|)
expr_stmt|;
else|else
name|ret
index|[
name|j
index|]
operator|+=
name|count
index|[
name|j
index|]
expr_stmt|;
block|}
name|d
operator|=
name|d
operator|.
name|plus
argument_list|(
name|iIncrement
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|String
name|axe
parameter_list|(
name|DateTime
name|now
parameter_list|)
block|{
name|SimpleDateFormat
name|format
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|iAxeFormat
argument_list|,
name|Localization
operator|.
name|getJavaLocale
argument_list|()
argument_list|)
decl_stmt|;
name|DateTime
name|dt
init|=
name|getFirst
argument_list|(
name|now
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|StringBuffer
name|ret
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
name|dt
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|ret
operator|.
name|append
argument_list|(
literal|"|"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|dt
operator|.
name|get
argument_list|(
name|iAxeType
argument_list|)
operator|%
name|iAxeMod
operator|)
operator|==
name|iAxeValue
condition|)
name|ret
operator|.
name|append
argument_list|(
name|format
operator|.
name|format
argument_list|(
name|dt
operator|.
name|getMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|dt
operator|=
name|next
argument_list|(
name|dt
argument_list|,
name|now
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
enum|enum
name|ChartType
block|{
name|USERS
block|,
name|TIME
block|}
specifier|private
specifier|static
name|String
name|sExtendedEncoding
init|=
literal|"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-."
decl_stmt|;
specifier|private
specifier|static
name|int
name|sExtendedEncodingMax
init|=
name|sExtendedEncoding
operator|.
name|length
argument_list|()
operator|*
name|sExtendedEncoding
operator|.
name|length
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|String
name|encode
parameter_list|(
name|List
argument_list|<
name|Double
argument_list|>
name|data
parameter_list|,
name|double
name|max
parameter_list|)
block|{
name|StringBuffer
name|ret
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Double
name|val
range|:
name|data
control|)
block|{
name|int
name|scaled
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|sExtendedEncodingMax
operator|*
name|val
operator|/
name|max
argument_list|)
decl_stmt|;
if|if
condition|(
name|scaled
operator|>=
name|sExtendedEncodingMax
condition|)
block|{
name|ret
operator|.
name|append
argument_list|(
literal|".."
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|scaled
operator|<
literal|0
condition|)
block|{
name|ret
operator|.
name|append
argument_list|(
literal|"__"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|append
argument_list|(
name|sExtendedEncoding
operator|.
name|charAt
argument_list|(
name|scaled
operator|/
name|sExtendedEncoding
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|sExtendedEncoding
operator|.
name|charAt
argument_list|(
name|scaled
operator|%
name|sExtendedEncoding
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|getChart
parameter_list|(
name|ChartWindow
name|w
parameter_list|,
name|ChartType
name|t
parameter_list|)
block|{
name|DateTime
name|now
init|=
name|DateTime
operator|.
name|now
argument_list|()
decl_stmt|;
name|String
name|axe
init|=
name|w
operator|.
name|axe
argument_list|(
name|now
argument_list|)
decl_stmt|;
name|DateTime
name|dt
init|=
name|w
operator|.
name|getFirst
argument_list|(
name|now
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
index|[]
name|data
init|=
operator|new
name|List
index|[]
block|{
operator|new
name|ArrayList
argument_list|<
name|Double
argument_list|>
argument_list|()
block|,
operator|new
name|ArrayList
argument_list|<
name|Double
argument_list|>
argument_list|()
block|,
operator|new
name|ArrayList
argument_list|<
name|Double
argument_list|>
argument_list|()
block|,
operator|new
name|ArrayList
argument_list|<
name|Double
argument_list|>
argument_list|()
block|}
decl_stmt|;
name|double
name|max
index|[]
init|=
operator|new
name|double
index|[]
block|{
literal|0
block|,
literal|0
block|}
decl_stmt|;
if|if
condition|(
name|t
operator|==
name|ChartType
operator|.
name|USERS
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|int
index|[]
argument_list|>
name|queries
init|=
name|w
operator|.
name|getQueriesPerType
argument_list|(
name|QueryLogDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|int
index|[]
argument_list|>
name|usersAndSessions
init|=
name|w
operator|.
name|getUsersAndSessions
argument_list|(
name|QueryLogDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|dt
operator|!=
literal|null
condition|)
block|{
name|double
index|[]
name|us
init|=
name|w
operator|.
name|countUsers
argument_list|(
name|usersAndSessions
argument_list|,
name|dt
argument_list|)
decl_stmt|;
name|int
index|[]
name|q
init|=
name|w
operator|.
name|countQueries
argument_list|(
name|queries
argument_list|,
name|dt
argument_list|)
decl_stmt|;
name|double
name|users
init|=
name|us
index|[
literal|0
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|.
name|add
argument_list|(
name|users
argument_list|)
expr_stmt|;
name|double
name|sessions
init|=
name|us
index|[
literal|1
index|]
decl_stmt|;
name|data
index|[
literal|1
index|]
operator|.
name|add
argument_list|(
name|sessions
argument_list|)
expr_stmt|;
name|max
index|[
literal|0
index|]
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
index|[
literal|0
index|]
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|users
argument_list|,
name|sessions
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|calls
init|=
operator|(
operator|(
name|double
operator|)
operator|(
name|q
index|[
name|Type
operator|.
name|STRUCTS
operator|.
name|ordinal
argument_list|()
index|]
operator|+
name|q
index|[
name|Type
operator|.
name|OTHER
operator|.
name|ordinal
argument_list|()
index|]
operator|)
operator|)
operator|/
name|w
operator|.
name|getMinutes
argument_list|()
decl_stmt|;
name|double
name|gwtCalls
init|=
operator|(
operator|(
name|double
operator|)
operator|(
name|q
index|[
name|Type
operator|.
name|GWT
operator|.
name|ordinal
argument_list|()
index|]
operator|+
name|q
index|[
name|Type
operator|.
name|RPC
operator|.
name|ordinal
argument_list|()
index|]
operator|)
operator|)
operator|/
name|w
operator|.
name|getMinutes
argument_list|()
decl_stmt|;
name|data
index|[
literal|2
index|]
operator|.
name|add
argument_list|(
name|calls
argument_list|)
expr_stmt|;
name|data
index|[
literal|3
index|]
operator|.
name|add
argument_list|(
name|gwtCalls
argument_list|)
expr_stmt|;
name|max
index|[
literal|1
index|]
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
index|[
literal|1
index|]
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|calls
argument_list|,
name|gwtCalls
argument_list|)
argument_list|)
expr_stmt|;
name|dt
operator|=
name|w
operator|.
name|next
argument_list|(
name|dt
argument_list|,
name|now
argument_list|)
expr_stmt|;
block|}
name|sLog
operator|.
name|debug
argument_list|(
literal|"["
operator|+
name|w
operator|.
name|name
argument_list|()
operator|+
literal|"] Users: "
operator|+
name|max
index|[
literal|0
index|]
operator|+
literal|" / "
operator|+
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"["
operator|+
name|w
operator|.
name|name
argument_list|()
operator|+
literal|"] Sessions: "
operator|+
name|max
index|[
literal|0
index|]
operator|+
literal|" / "
operator|+
name|data
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"["
operator|+
name|w
operator|.
name|name
argument_list|()
operator|+
literal|"] Calls: "
operator|+
name|max
index|[
literal|1
index|]
operator|+
literal|" / "
operator|+
name|data
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"["
operator|+
name|w
operator|.
name|name
argument_list|()
operator|+
literal|"] GWT: "
operator|+
name|max
index|[
literal|1
index|]
operator|+
literal|" / "
operator|+
name|data
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|double
index|[]
argument_list|>
name|times
init|=
name|w
operator|.
name|getTimes
argument_list|(
name|QueryLogDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|dt
operator|!=
literal|null
condition|)
block|{
name|double
index|[]
name|tm
init|=
name|w
operator|.
name|countTimes
argument_list|(
name|times
argument_list|,
name|dt
argument_list|)
decl_stmt|;
name|double
name|sumTime
init|=
operator|(
name|tm
index|[
literal|3
operator|*
name|Type
operator|.
name|STRUCTS
operator|.
name|ordinal
argument_list|()
index|]
operator|+
name|tm
index|[
literal|3
operator|*
name|Type
operator|.
name|OTHER
operator|.
name|ordinal
argument_list|()
index|]
operator|)
decl_stmt|;
name|double
name|cntTime
init|=
operator|(
name|tm
index|[
literal|3
operator|*
name|Type
operator|.
name|STRUCTS
operator|.
name|ordinal
argument_list|()
operator|+
literal|1
index|]
operator|+
name|tm
index|[
literal|3
operator|*
name|Type
operator|.
name|OTHER
operator|.
name|ordinal
argument_list|()
operator|+
literal|1
index|]
operator|)
decl_stmt|;
name|double
name|avgTime
init|=
operator|(
name|cntTime
operator|>
literal|0.0
condition|?
name|sumTime
operator|/
name|cntTime
else|:
literal|0.0
operator|)
decl_stmt|;
name|double
name|gwtSumTime
init|=
operator|(
name|tm
index|[
literal|3
operator|*
name|Type
operator|.
name|GWT
operator|.
name|ordinal
argument_list|()
index|]
operator|+
name|tm
index|[
literal|3
operator|*
name|Type
operator|.
name|RPC
operator|.
name|ordinal
argument_list|()
index|]
operator|)
decl_stmt|;
name|double
name|gwtCntTime
init|=
operator|(
name|tm
index|[
literal|3
operator|*
name|Type
operator|.
name|GWT
operator|.
name|ordinal
argument_list|()
operator|+
literal|1
index|]
operator|+
name|tm
index|[
literal|3
operator|*
name|Type
operator|.
name|RPC
operator|.
name|ordinal
argument_list|()
operator|+
literal|1
index|]
operator|)
decl_stmt|;
name|double
name|gwtAvgTime
init|=
operator|(
name|gwtCntTime
operator|>
literal|0.0
condition|?
name|gwtSumTime
operator|/
name|gwtCntTime
else|:
literal|0.0
operator|)
decl_stmt|;
name|double
name|maxTime
init|=
name|Math
operator|.
name|max
argument_list|(
name|tm
index|[
literal|3
operator|*
name|Type
operator|.
name|STRUCTS
operator|.
name|ordinal
argument_list|()
operator|+
literal|2
index|]
argument_list|,
name|tm
index|[
literal|3
operator|*
name|Type
operator|.
name|OTHER
operator|.
name|ordinal
argument_list|()
operator|+
literal|2
index|]
argument_list|)
decl_stmt|;
name|double
name|gwtMaxTime
init|=
name|Math
operator|.
name|max
argument_list|(
name|tm
index|[
literal|3
operator|*
name|Type
operator|.
name|GWT
operator|.
name|ordinal
argument_list|()
operator|+
literal|2
index|]
argument_list|,
name|tm
index|[
literal|3
operator|*
name|Type
operator|.
name|RPC
operator|.
name|ordinal
argument_list|()
operator|+
literal|2
index|]
argument_list|)
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|.
name|add
argument_list|(
name|maxTime
argument_list|)
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|.
name|add
argument_list|(
name|avgTime
argument_list|)
expr_stmt|;
name|data
index|[
literal|2
index|]
operator|.
name|add
argument_list|(
name|gwtMaxTime
argument_list|)
expr_stmt|;
name|data
index|[
literal|3
index|]
operator|.
name|add
argument_list|(
name|gwtAvgTime
argument_list|)
expr_stmt|;
name|max
index|[
literal|0
index|]
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
index|[
literal|0
index|]
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|maxTime
argument_list|,
name|gwtMaxTime
argument_list|)
argument_list|)
expr_stmt|;
name|max
index|[
literal|1
index|]
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
index|[
literal|1
index|]
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|avgTime
argument_list|,
name|gwtAvgTime
argument_list|)
argument_list|)
expr_stmt|;
name|dt
operator|=
name|w
operator|.
name|next
argument_list|(
name|dt
argument_list|,
name|now
argument_list|)
expr_stmt|;
block|}
name|sLog
operator|.
name|debug
argument_list|(
literal|"["
operator|+
name|w
operator|.
name|name
argument_list|()
operator|+
literal|"] Max Time: "
operator|+
name|max
index|[
literal|0
index|]
operator|+
literal|" / "
operator|+
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"["
operator|+
name|w
operator|.
name|name
argument_list|()
operator|+
literal|"] Avg Time: "
operator|+
name|max
index|[
literal|1
index|]
operator|+
literal|" / "
operator|+
name|data
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"["
operator|+
name|w
operator|.
name|name
argument_list|()
operator|+
literal|"] Gwt Max Time: "
operator|+
name|max
index|[
literal|0
index|]
operator|+
literal|" / "
operator|+
name|data
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"["
operator|+
name|w
operator|.
name|name
argument_list|()
operator|+
literal|"] Gwt Avg Time: "
operator|+
name|max
index|[
literal|1
index|]
operator|+
literal|" / "
operator|+
name|data
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
name|DecimalFormat
name|df
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.0"
argument_list|)
decl_stmt|;
name|double
name|range
index|[]
init|=
operator|new
name|double
index|[]
block|{
literal|0.1
block|,
literal|0.2
block|,
literal|0.5
block|,
literal|1
block|,
literal|2
block|,
literal|5
block|,
literal|10
block|,
literal|20
block|,
literal|25
block|,
literal|50
block|,
literal|100
block|,
literal|200
block|,
literal|250
block|,
literal|500
block|,
literal|1000
block|,
literal|2000
block|,
literal|2500
block|,
literal|5000
block|,
literal|10000
block|,
literal|20000
block|,
literal|50000
block|,
literal|100000
block|,
literal|1000000
block|,
literal|10000000
block|}
decl_stmt|;
name|double
name|step
index|[]
init|=
operator|new
name|double
index|[]
block|{
literal|1
block|,
literal|1
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|max
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|max
index|[
name|i
index|]
operator|<=
literal|1.0
condition|)
block|{
name|max
index|[
name|i
index|]
operator|=
literal|1.0
expr_stmt|;
name|step
index|[
name|i
index|]
operator|=
literal|0.1
expr_stmt|;
continue|continue;
block|}
name|int
name|x
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|max
index|[
name|i
index|]
operator|/
name|range
index|[
name|x
index|]
operator|>
literal|16
condition|)
name|x
operator|++
expr_stmt|;
name|step
index|[
name|i
index|]
operator|=
name|range
index|[
name|x
index|]
expr_stmt|;
block|}
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|USERS
case|:
return|return
literal|"http://chart.apis.google.com/chart?"
operator|+
literal|"cht=lc&chd=e:"
operator|+
name|encode
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|,
name|max
index|[
literal|0
index|]
argument_list|)
operator|+
literal|","
operator|+
name|encode
argument_list|(
name|data
index|[
literal|1
index|]
argument_list|,
name|max
index|[
literal|0
index|]
argument_list|)
operator|+
literal|","
operator|+
name|encode
argument_list|(
name|data
index|[
literal|2
index|]
argument_list|,
name|max
index|[
literal|1
index|]
argument_list|)
operator|+
literal|","
operator|+
name|encode
argument_list|(
name|data
index|[
literal|3
index|]
argument_list|,
name|max
index|[
literal|1
index|]
argument_list|)
operator|+
literal|"&chs=400x300&chl="
operator|+
name|axe
operator|+
literal|"&chxt=x,y,y,r,r&chxr=1,0,"
operator|+
name|df
operator|.
name|format
argument_list|(
name|max
index|[
literal|0
index|]
argument_list|)
operator|+
literal|","
operator|+
name|df
operator|.
name|format
argument_list|(
name|step
index|[
literal|0
index|]
argument_list|)
operator|+
literal|"|3,0,"
operator|+
name|df
operator|.
name|format
argument_list|(
name|max
index|[
literal|1
index|]
argument_list|)
operator|+
literal|","
operator|+
name|df
operator|.
name|format
argument_list|(
name|step
index|[
literal|1
index|]
argument_list|)
operator|+
literal|"&chdl=Users+per+"
operator|+
name|w
operator|.
name|getBase
argument_list|()
operator|+
literal|"|HTTP+Sessions+per+"
operator|+
name|w
operator|.
name|getBase
argument_list|()
operator|+
literal|"|Pages+per+Minute|GWT+Calls+per+Minute&chco=0000FF,00FF00,FF0000,FFA500"
operator|+
literal|"&chdlp=t&chds=0,"
operator|+
name|df
operator|.
name|format
argument_list|(
name|max
index|[
literal|0
index|]
argument_list|)
operator|+
literal|",0,"
operator|+
name|df
operator|.
name|format
argument_list|(
name|max
index|[
literal|0
index|]
argument_list|)
operator|+
literal|",0,"
operator|+
name|df
operator|.
name|format
argument_list|(
name|max
index|[
literal|1
index|]
argument_list|)
operator|+
literal|",0,"
operator|+
name|df
operator|.
name|format
argument_list|(
name|max
index|[
literal|1
index|]
argument_list|)
operator|+
literal|"&chxl=4:||e|t|u|n|i|M|+|r|e|p|+|s|l|l|a|C||2:|s|n|o|i|s|s|e|s|+|s|r|e|s|u|+|f|o|+|r|b|N"
operator|+
literal|"&chxs=1,0000FF|2,00FF00|3,FF0000|4,FFA500"
return|;
case|case
name|TIME
case|:
return|return
literal|"http://chart.apis.google.com/chart?"
operator|+
literal|"cht=lc&chd=e:"
operator|+
name|encode
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|,
name|max
index|[
literal|0
index|]
argument_list|)
operator|+
literal|","
operator|+
name|encode
argument_list|(
name|data
index|[
literal|2
index|]
argument_list|,
name|max
index|[
literal|0
index|]
argument_list|)
operator|+
literal|","
operator|+
name|encode
argument_list|(
name|data
index|[
literal|1
index|]
argument_list|,
name|max
index|[
literal|1
index|]
argument_list|)
operator|+
literal|","
operator|+
name|encode
argument_list|(
name|data
index|[
literal|3
index|]
argument_list|,
name|max
index|[
literal|1
index|]
argument_list|)
operator|+
literal|"&chs=400x300&chl="
operator|+
name|axe
operator|+
literal|"&chxt=x,y,y,r,r&chxr=1,0,"
operator|+
name|df
operator|.
name|format
argument_list|(
name|max
index|[
literal|0
index|]
argument_list|)
operator|+
literal|","
operator|+
name|df
operator|.
name|format
argument_list|(
name|step
index|[
literal|0
index|]
argument_list|)
operator|+
literal|"|3,0,"
operator|+
name|df
operator|.
name|format
argument_list|(
name|max
index|[
literal|1
index|]
argument_list|)
operator|+
literal|","
operator|+
name|df
operator|.
name|format
argument_list|(
name|step
index|[
literal|1
index|]
argument_list|)
operator|+
literal|"&chdlp=t&chds=0,"
operator|+
name|df
operator|.
name|format
argument_list|(
name|max
index|[
literal|0
index|]
argument_list|)
operator|+
literal|",0,"
operator|+
name|df
operator|.
name|format
argument_list|(
name|max
index|[
literal|0
index|]
argument_list|)
operator|+
literal|",0,"
operator|+
name|df
operator|.
name|format
argument_list|(
name|max
index|[
literal|1
index|]
argument_list|)
operator|+
literal|",0,"
operator|+
name|df
operator|.
name|format
argument_list|(
name|max
index|[
literal|1
index|]
argument_list|)
operator|+
literal|"&chdl=Max+Time+[s]|GWT+Max+Time+[s]|Average+Time+[ms]|GWT+Average+Time+[ms]&chco=0000FF,00FF00,FF0000,FFA500"
operator|+
literal|"&chxl=4:||e|m|i|T|+|e|g|a|r|e|v|A||2:||e|m|i|T|+|x|a|M|"
operator|+
literal|"&chxs=1,0000FF|2,00FF00|3,FF0000|4,FFA500"
return|;
default|default:
return|return
literal|""
return|;
block|}
block|}
block|}
end_class

end_unit

