begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseQueryLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|QueryLogDAO
import|;
end_import

begin_class
specifier|public
class|class
name|QueryLog
extends|extends
name|BaseQueryLog
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|7073111443207707716L
decl_stmt|;
specifier|public
name|QueryLog
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
enum|enum
name|Type
block|{
name|STRUCTS
block|,
name|GWT
block|,
name|OTHER
block|,
name|RPC
block|}
specifier|public
specifier|static
name|int
name|getNrSessions
parameter_list|(
name|int
name|days
parameter_list|)
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
operator|-
name|days
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|Number
operator|)
name|QueryLogDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(distinct q.sessionId) from QueryLog q where q.timeStamp> :date"
argument_list|)
operator|.
name|setTimestamp
argument_list|(
literal|"date"
argument_list|,
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|int
name|getNrActiveUsers
parameter_list|(
name|int
name|days
parameter_list|)
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
operator|-
name|days
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|Number
operator|)
name|QueryLogDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(distinct q.uid) from QueryLog q where q.timeStamp> :date"
argument_list|)
operator|.
name|setTimestamp
argument_list|(
literal|"date"
argument_list|,
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|WebTable
name|getTopQueries
parameter_list|(
name|int
name|days
parameter_list|)
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
operator|-
name|days
argument_list|)
expr_stmt|;
name|WebTable
name|table
init|=
operator|new
name|WebTable
argument_list|(
literal|8
argument_list|,
literal|"Page Statistics (last "
operator|+
name|days
operator|+
literal|" days)"
argument_list|,
literal|"stats.do?ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"URI"
block|,
literal|"Calls"
block|,
literal|"Calls [>10ms]"
block|,
literal|"Calls [>100ms]"
block|,
literal|"Calls [>1min]"
block|,
literal|"AvgTime [ms]"
block|,
literal|"MaxTime [s]"
block|,
literal|"Errors"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|}
argument_list|)
decl_stmt|;
name|DecimalFormat
name|df
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"#,##0.00"
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|errors
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|QueryLogDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select q.uri, count(q) from "
operator|+
literal|"QueryLog q where q.timeStamp> :date and q.exception is not null group by q.uri"
argument_list|)
operator|.
name|setTimestamp
argument_list|(
literal|"date"
argument_list|,
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|errors
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|overMinutes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|QueryLogDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select q.uri, count(q) from "
operator|+
literal|"QueryLog q where q.timeStamp> :date and q.timeSpent> 1000 group by q.uri"
argument_list|)
operator|.
name|setTimestamp
argument_list|(
literal|"date"
argument_list|,
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|overMinutes
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|over100mss
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|QueryLogDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select q.uri, count(q) from "
operator|+
literal|"QueryLog q where q.timeStamp> :date and q.timeSpent> 100 group by q.uri"
argument_list|)
operator|.
name|setTimestamp
argument_list|(
literal|"date"
argument_list|,
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|over100mss
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|over10mss
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|QueryLogDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select q.uri, count(q) from "
operator|+
literal|"QueryLog q where q.timeStamp> :date and q.timeSpent> 10 group by q.uri"
argument_list|)
operator|.
name|setTimestamp
argument_list|(
literal|"date"
argument_list|,
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|over10mss
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|QueryLogDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select q.uri, count(q), avg(q.timeSpent), max(q.timeSpent) from "
operator|+
literal|"QueryLog q where q.timeStamp> :date group by q.uri"
argument_list|)
operator|.
name|setTimestamp
argument_list|(
literal|"date"
argument_list|,
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Integer
name|nrErrors
init|=
name|errors
operator|.
name|get
argument_list|(
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|nrErrors
operator|==
literal|null
condition|)
name|nrErrors
operator|=
literal|0
expr_stmt|;
name|Integer
name|overMinute
init|=
name|overMinutes
operator|.
name|get
argument_list|(
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|overMinute
operator|==
literal|null
condition|)
name|overMinute
operator|=
literal|0
expr_stmt|;
name|Integer
name|over100ms
init|=
name|over100mss
operator|.
name|get
argument_list|(
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|over100ms
operator|==
literal|null
condition|)
name|over100ms
operator|=
literal|0
expr_stmt|;
name|Integer
name|over10ms
init|=
name|over10mss
operator|.
name|get
argument_list|(
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|over10ms
operator|==
literal|null
condition|)
name|over10ms
operator|=
literal|0
expr_stmt|;
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
block|,
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|toString
argument_list|()
block|,
name|over10ms
operator|.
name|toString
argument_list|()
block|,
name|over100ms
operator|.
name|toString
argument_list|()
block|,
name|overMinute
operator|.
name|toString
argument_list|()
block|,
name|df
operator|.
name|format
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|2
index|]
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
block|,
name|df
operator|.
name|format
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|3
index|]
operator|)
operator|.
name|doubleValue
argument_list|()
operator|/
literal|1000.0
argument_list|)
block|,
name|nrErrors
operator|.
name|toString
argument_list|()
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
block|,
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
block|,
name|over10ms
block|,
name|over100ms
block|,
name|overMinute
block|,
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|2
index|]
operator|)
operator|.
name|doubleValue
argument_list|()
block|,
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|3
index|]
operator|)
operator|.
name|doubleValue
argument_list|()
block|,
name|nrErrors
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|table
return|;
block|}
specifier|public
specifier|static
enum|enum
name|ChartWindow
block|{
name|FIFTEEN_MINUTES
argument_list|(
literal|"Last 24 Hours (15-minute average)"
argument_list|)
block|,
name|THREE_HOUR
argument_list|(
literal|"Last 7 Days (3-hour average)"
argument_list|)
block|,
name|SEVEN_DAYS
argument_list|(
literal|"Last 3 Months (7-day average)"
argument_list|)
block|;
specifier|private
name|String
name|iName
decl_stmt|;
name|ChartWindow
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
block|}
specifier|public
specifier|static
enum|enum
name|ChartType
block|{
name|USERS
block|,
name|TIME
block|}
specifier|private
specifier|static
name|String
name|sExtendedEncoding
init|=
literal|"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-."
decl_stmt|;
specifier|private
specifier|static
name|int
name|sExtendedEncodingMax
init|=
name|sExtendedEncoding
operator|.
name|length
argument_list|()
operator|*
name|sExtendedEncoding
operator|.
name|length
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|String
name|encode
parameter_list|(
name|List
argument_list|<
name|Double
argument_list|>
name|data
parameter_list|,
name|double
name|max
parameter_list|)
block|{
name|StringBuffer
name|ret
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Double
name|val
range|:
name|data
control|)
block|{
name|int
name|scaled
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|sExtendedEncodingMax
operator|*
name|val
operator|/
name|max
argument_list|)
decl_stmt|;
if|if
condition|(
name|scaled
operator|>=
name|sExtendedEncodingMax
condition|)
block|{
name|ret
operator|.
name|append
argument_list|(
literal|".."
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|scaled
operator|<
literal|0
condition|)
block|{
name|ret
operator|.
name|append
argument_list|(
literal|"__"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|append
argument_list|(
name|sExtendedEncoding
operator|.
name|charAt
argument_list|(
name|scaled
operator|/
name|sExtendedEncoding
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|sExtendedEncoding
operator|.
name|charAt
argument_list|(
name|scaled
operator|%
name|sExtendedEncoding
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|getChart
parameter_list|(
name|ChartWindow
name|w
parameter_list|,
name|ChartType
name|t
parameter_list|)
block|{
name|Date
name|ts
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|Calendar
name|from
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|from
operator|.
name|setTime
argument_list|(
name|ts
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|w
condition|)
block|{
case|case
name|SEVEN_DAYS
case|:
name|from
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|,
operator|-
literal|3
argument_list|)
expr_stmt|;
break|break;
case|case
name|THREE_HOUR
case|:
name|from
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
operator|-
literal|7
argument_list|)
expr_stmt|;
break|break;
case|case
name|FIFTEEN_MINUTES
case|:
name|from
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
name|Calendar
name|to
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|to
operator|.
name|setTime
argument_list|(
name|from
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|w
condition|)
block|{
case|case
name|SEVEN_DAYS
case|:
name|to
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
operator|+
literal|7
argument_list|)
expr_stmt|;
break|break;
case|case
name|THREE_HOUR
case|:
name|to
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
operator|+
literal|3
argument_list|)
expr_stmt|;
break|break;
case|case
name|FIFTEEN_MINUTES
case|:
name|to
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
operator|+
literal|15
argument_list|)
expr_stmt|;
break|break;
block|}
name|String
name|axe
init|=
literal|""
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
index|[]
name|data
init|=
operator|new
name|List
index|[]
block|{
operator|new
name|ArrayList
argument_list|<
name|Double
argument_list|>
argument_list|()
block|,
operator|new
name|ArrayList
argument_list|<
name|Double
argument_list|>
argument_list|()
block|,
operator|new
name|ArrayList
argument_list|<
name|Double
argument_list|>
argument_list|()
block|,
operator|new
name|ArrayList
argument_list|<
name|Double
argument_list|>
argument_list|()
block|}
decl_stmt|;
name|double
name|max
index|[]
init|=
operator|new
name|double
index|[]
block|{
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|to
operator|.
name|getTime
argument_list|()
operator|.
name|compareTo
argument_list|(
name|ts
argument_list|)
operator|<=
literal|0
condition|)
block|{
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|axe
operator|+=
literal|"|"
expr_stmt|;
block|}
switch|switch
condition|(
name|w
condition|)
block|{
case|case
name|SEVEN_DAYS
case|:
if|if
condition|(
name|from
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
operator|==
literal|1
condition|)
name|axe
operator|+=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MMM/dd"
argument_list|)
operator|.
name|format
argument_list|(
name|from
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|THREE_HOUR
case|:
if|if
condition|(
name|from
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
operator|<
literal|3
condition|)
name|axe
operator|+=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd"
argument_list|)
operator|.
name|format
argument_list|(
name|from
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
break|break;
case|case
name|FIFTEEN_MINUTES
case|:
if|if
condition|(
name|from
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
operator|<
literal|15
condition|)
name|axe
operator|+=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"H"
argument_list|)
operator|.
name|format
argument_list|(
name|from
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
break|break;
block|}
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|USERS
case|:
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|QueryLogDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(distinct uid), count(distinct sessionId), count(distinct uniqueId) from QueryLog where timeStamp> :from and timeStamp<= :to and not type = :type"
argument_list|)
operator|.
name|setTimestamp
argument_list|(
literal|"from"
argument_list|,
name|from
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|setTimestamp
argument_list|(
literal|"to"
argument_list|,
name|to
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"type"
argument_list|,
name|Type
operator|.
name|GWT
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
name|double
name|gwtCallsPerMinute
init|=
operator|(
operator|(
name|Number
operator|)
name|QueryLogDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(distinct uniqueId) from QueryLog where timeStamp> :from and timeStamp<= :to and type = :type"
argument_list|)
operator|.
name|setTimestamp
argument_list|(
literal|"from"
argument_list|,
name|from
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|setTimestamp
argument_list|(
literal|"to"
argument_list|,
name|to
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"type"
argument_list|,
name|Type
operator|.
name|GWT
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
name|double
name|distinctUsers
init|=
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|0
index|]
operator|)
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|.
name|add
argument_list|(
name|distinctUsers
argument_list|)
expr_stmt|;
name|double
name|distinctSessions
init|=
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
name|data
index|[
literal|1
index|]
operator|.
name|add
argument_list|(
name|distinctSessions
argument_list|)
expr_stmt|;
name|max
index|[
literal|0
index|]
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
index|[
literal|0
index|]
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|distinctUsers
argument_list|,
name|distinctSessions
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|callsPerMinute
init|=
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|2
index|]
operator|)
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|w
condition|)
block|{
case|case
name|SEVEN_DAYS
case|:
name|callsPerMinute
operator|/=
literal|7
operator|*
literal|24
operator|*
literal|60
expr_stmt|;
name|gwtCallsPerMinute
operator|/=
literal|7
operator|*
literal|24
operator|*
literal|60
expr_stmt|;
break|break;
case|case
name|THREE_HOUR
case|:
name|callsPerMinute
operator|/=
literal|3
operator|*
literal|60
expr_stmt|;
name|gwtCallsPerMinute
operator|/=
literal|3
operator|*
literal|60
expr_stmt|;
break|break;
case|case
name|FIFTEEN_MINUTES
case|:
name|callsPerMinute
operator|/=
literal|15
expr_stmt|;
name|gwtCallsPerMinute
operator|/=
literal|15
expr_stmt|;
break|break;
block|}
name|data
index|[
literal|2
index|]
operator|.
name|add
argument_list|(
name|callsPerMinute
argument_list|)
expr_stmt|;
name|data
index|[
literal|3
index|]
operator|.
name|add
argument_list|(
name|gwtCallsPerMinute
argument_list|)
expr_stmt|;
name|max
index|[
literal|1
index|]
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
index|[
literal|1
index|]
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|callsPerMinute
argument_list|,
name|gwtCallsPerMinute
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIME
case|:
name|o
operator|=
operator|(
name|Object
index|[]
operator|)
name|QueryLogDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select avg(q.timeSpent), max(q.timeSpent) from QueryLog q where q.timeStamp> :from and q.timeStamp<= :to and not type = :type"
argument_list|)
operator|.
name|setTimestamp
argument_list|(
literal|"from"
argument_list|,
name|from
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|setTimestamp
argument_list|(
literal|"to"
argument_list|,
name|to
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"type"
argument_list|,
name|Type
operator|.
name|GWT
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
expr_stmt|;
name|Object
index|[]
name|p
init|=
operator|(
name|Object
index|[]
operator|)
name|QueryLogDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select avg(q.timeSpent), max(q.timeSpent) from QueryLog q where q.timeStamp> :from and q.timeStamp<= :to and type = :type"
argument_list|)
operator|.
name|setTimestamp
argument_list|(
literal|"from"
argument_list|,
name|from
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|setTimestamp
argument_list|(
literal|"to"
argument_list|,
name|to
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"type"
argument_list|,
name|Type
operator|.
name|GWT
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
name|double
name|avgTime
init|=
operator|(
name|o
index|[
literal|0
index|]
operator|==
literal|null
condition|?
literal|0
else|:
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|0
index|]
operator|)
operator|.
name|doubleValue
argument_list|()
operator|)
decl_stmt|;
name|double
name|maxTime
init|=
operator|(
name|o
index|[
literal|1
index|]
operator|==
literal|null
condition|?
literal|0
else|:
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|doubleValue
argument_list|()
operator|)
operator|/
literal|1000.0
decl_stmt|;
name|double
name|gwtAvgTime
init|=
operator|(
name|p
index|[
literal|0
index|]
operator|==
literal|null
condition|?
literal|0
else|:
operator|(
operator|(
name|Number
operator|)
name|p
index|[
literal|0
index|]
operator|)
operator|.
name|doubleValue
argument_list|()
operator|)
decl_stmt|;
name|double
name|gwtMaxTime
init|=
operator|(
name|p
index|[
literal|1
index|]
operator|==
literal|null
condition|?
literal|0
else|:
operator|(
operator|(
name|Number
operator|)
name|p
index|[
literal|1
index|]
operator|)
operator|.
name|doubleValue
argument_list|()
operator|)
operator|/
literal|1000.0
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|.
name|add
argument_list|(
name|avgTime
argument_list|)
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|.
name|add
argument_list|(
name|maxTime
argument_list|)
expr_stmt|;
name|data
index|[
literal|2
index|]
operator|.
name|add
argument_list|(
name|gwtAvgTime
argument_list|)
expr_stmt|;
name|data
index|[
literal|3
index|]
operator|.
name|add
argument_list|(
name|gwtMaxTime
argument_list|)
expr_stmt|;
name|max
index|[
literal|0
index|]
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
index|[
literal|0
index|]
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|avgTime
argument_list|,
name|gwtAvgTime
argument_list|)
argument_list|)
expr_stmt|;
name|max
index|[
literal|1
index|]
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
index|[
literal|1
index|]
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|maxTime
argument_list|,
name|gwtMaxTime
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
switch|switch
condition|(
name|w
condition|)
block|{
case|case
name|SEVEN_DAYS
case|:
name|from
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
operator|+
literal|1
argument_list|)
expr_stmt|;
name|to
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
operator|+
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|THREE_HOUR
case|:
name|from
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
operator|+
literal|3
argument_list|)
expr_stmt|;
name|to
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
operator|+
literal|3
argument_list|)
expr_stmt|;
case|case
name|FIFTEEN_MINUTES
case|:
name|from
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
operator|+
literal|15
argument_list|)
expr_stmt|;
name|to
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
operator|+
literal|15
argument_list|)
expr_stmt|;
block|}
name|index
operator|++
expr_stmt|;
block|}
name|DecimalFormat
name|df
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.0"
argument_list|)
decl_stmt|;
name|double
name|range
index|[]
init|=
operator|new
name|double
index|[]
block|{
literal|0.1
block|,
literal|0.2
block|,
literal|0.5
block|,
literal|1
block|,
literal|2
block|,
literal|5
block|,
literal|10
block|,
literal|20
block|,
literal|25
block|,
literal|50
block|,
literal|100
block|,
literal|200
block|,
literal|250
block|,
literal|500
block|,
literal|1000
block|,
literal|2000
block|,
literal|2500
block|,
literal|5000
block|,
literal|10000
block|,
literal|20000
block|,
literal|50000
block|,
literal|100000
block|,
literal|1000000
block|,
literal|10000000
block|}
decl_stmt|;
name|double
name|step
index|[]
init|=
operator|new
name|double
index|[]
block|{
literal|1
block|,
literal|1
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|max
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|max
index|[
name|i
index|]
operator|<=
literal|1.0
condition|)
block|{
name|max
index|[
name|i
index|]
operator|=
literal|1.0
expr_stmt|;
name|step
index|[
name|i
index|]
operator|=
literal|0.1
expr_stmt|;
continue|continue;
block|}
name|int
name|x
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|max
index|[
name|i
index|]
operator|/
name|range
index|[
name|x
index|]
operator|>
literal|16
condition|)
name|x
operator|++
expr_stmt|;
name|step
index|[
name|i
index|]
operator|=
name|range
index|[
name|x
index|]
expr_stmt|;
block|}
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|USERS
case|:
return|return
literal|"http://chart.apis.google.com/chart?"
operator|+
literal|"cht=lc&chd=e:"
operator|+
name|encode
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|,
name|max
index|[
literal|0
index|]
argument_list|)
operator|+
literal|","
operator|+
name|encode
argument_list|(
name|data
index|[
literal|1
index|]
argument_list|,
name|max
index|[
literal|0
index|]
argument_list|)
operator|+
literal|","
operator|+
name|encode
argument_list|(
name|data
index|[
literal|2
index|]
argument_list|,
name|max
index|[
literal|1
index|]
argument_list|)
operator|+
literal|","
operator|+
name|encode
argument_list|(
name|data
index|[
literal|3
index|]
argument_list|,
name|max
index|[
literal|1
index|]
argument_list|)
operator|+
literal|"&chs=400x300&chl="
operator|+
name|axe
operator|+
literal|"&chxt=x,y,y,r,r&chxr=1,0,"
operator|+
name|df
operator|.
name|format
argument_list|(
name|max
index|[
literal|0
index|]
argument_list|)
operator|+
literal|","
operator|+
name|df
operator|.
name|format
argument_list|(
name|step
index|[
literal|0
index|]
argument_list|)
operator|+
literal|"|3,0,"
operator|+
name|df
operator|.
name|format
argument_list|(
name|max
index|[
literal|1
index|]
argument_list|)
operator|+
literal|","
operator|+
name|df
operator|.
name|format
argument_list|(
name|step
index|[
literal|1
index|]
argument_list|)
operator|+
literal|"&chdl=Distinct+Users|Distinct+HTTP+Sessions|Pages+per+Minute|GWT+Calls+per+Minute&chco=0000FF,00FF00,FF0000,FFA500"
operator|+
literal|"&chdlp=t&chds=0,"
operator|+
name|df
operator|.
name|format
argument_list|(
name|max
index|[
literal|0
index|]
argument_list|)
operator|+
literal|",0,"
operator|+
name|df
operator|.
name|format
argument_list|(
name|max
index|[
literal|0
index|]
argument_list|)
operator|+
literal|",0,"
operator|+
name|df
operator|.
name|format
argument_list|(
name|max
index|[
literal|1
index|]
argument_list|)
operator|+
literal|",0,"
operator|+
name|df
operator|.
name|format
argument_list|(
name|max
index|[
literal|1
index|]
argument_list|)
operator|+
literal|"&chxl=4:||e|t|u|n|i|M|+|r|e|p|+|s|l|l|a|C||2:|s|n|o|i|s|s|e|s|+|s|r|e|s|u|+|f|o|+|r|b|N"
operator|+
literal|"&chxs=1,0000FF|2,00FF00|3,FF0000|4,FFA500"
return|;
case|case
name|TIME
case|:
return|return
literal|"http://chart.apis.google.com/chart?"
operator|+
literal|"cht=lc&chd=e:"
operator|+
name|encode
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|,
name|max
index|[
literal|0
index|]
argument_list|)
operator|+
literal|","
operator|+
name|encode
argument_list|(
name|data
index|[
literal|1
index|]
argument_list|,
name|max
index|[
literal|1
index|]
argument_list|)
operator|+
literal|","
operator|+
name|encode
argument_list|(
name|data
index|[
literal|2
index|]
argument_list|,
name|max
index|[
literal|0
index|]
argument_list|)
operator|+
literal|","
operator|+
name|encode
argument_list|(
name|data
index|[
literal|3
index|]
argument_list|,
name|max
index|[
literal|1
index|]
argument_list|)
operator|+
literal|"&chs=400x300&chl="
operator|+
name|axe
operator|+
literal|"&chxt=x,y,y,r,r&chxr=1,0,"
operator|+
name|df
operator|.
name|format
argument_list|(
name|max
index|[
literal|0
index|]
argument_list|)
operator|+
literal|","
operator|+
name|df
operator|.
name|format
argument_list|(
name|step
index|[
literal|0
index|]
argument_list|)
operator|+
literal|"|3,0,"
operator|+
name|df
operator|.
name|format
argument_list|(
name|max
index|[
literal|1
index|]
argument_list|)
operator|+
literal|","
operator|+
name|df
operator|.
name|format
argument_list|(
name|step
index|[
literal|1
index|]
argument_list|)
operator|+
literal|"&chdlp=t&chds=0,"
operator|+
name|df
operator|.
name|format
argument_list|(
name|max
index|[
literal|0
index|]
argument_list|)
operator|+
literal|",0,"
operator|+
name|df
operator|.
name|format
argument_list|(
name|max
index|[
literal|1
index|]
argument_list|)
operator|+
literal|",0,"
operator|+
name|df
operator|.
name|format
argument_list|(
name|max
index|[
literal|0
index|]
argument_list|)
operator|+
literal|",0,"
operator|+
name|df
operator|.
name|format
argument_list|(
name|max
index|[
literal|1
index|]
argument_list|)
operator|+
literal|"&chdl=Average+Time+[ms]|Max+Time+[s]|GWT+Average+Time+[ms]|GWT+Max+Time+[s]&chco=0000FF,FF0000,00FF00,FFA500"
operator|+
literal|"&chxl=2:||e|m|i|T|+|e|g|a|r|e|v|A||4:||e|m|i|T|+|x|a|M|"
operator|+
literal|"&chxs=1,0000FF|2,00FF00|3,FF0000|4,FFA500"
return|;
default|default:
return|return
literal|""
return|;
block|}
block|}
block|}
end_class

end_unit

