begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseDistributionObject
import|;
end_import

begin_class
specifier|public
class|class
name|DistributionObject
extends|extends
name|BaseDistributionObject
implements|implements
name|Comparable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|DistributionObject
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|DistributionObject
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Constructor for required fields 	 */
specifier|public
name|DistributionObject
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
name|distributionPref
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceGroup
name|prefGroup
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|,
name|distributionPref
argument_list|,
name|prefGroup
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
specifier|public
name|String
name|preferenceText
parameter_list|()
block|{
name|PreferenceGroup
name|prefGroup
init|=
name|this
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefGroup
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|prefGroup
decl_stmt|;
return|return
name|ss
operator|.
name|getSchedulingSubpartLabel
argument_list|()
return|;
block|}
if|else if
condition|(
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|prefGroup
decl_stmt|;
return|return
name|c
operator|.
name|getClassLabel
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|" unknown "
operator|+
name|prefGroup
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
comment|/** Ordering based on sequence numbers or preference groups */
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|DistributionObject
operator|)
condition|)
return|return
operator|-
literal|1
return|;
name|DistributionObject
name|d
init|=
operator|(
name|DistributionObject
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|getSequenceNumber
argument_list|()
operator|!=
literal|null
operator|&&
name|d
operator|.
name|getSequenceNumber
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|getSequenceNumber
argument_list|()
operator|.
name|compareTo
argument_list|(
name|d
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
return|;
if|if
condition|(
name|getPrefGroup
argument_list|()
operator|instanceof
name|Comparable
operator|&&
name|d
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|Comparable
condition|)
return|return
operator|(
operator|(
name|Comparable
operator|)
name|getPrefGroup
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|d
operator|.
name|getPrefGroup
argument_list|()
argument_list|)
return|;
return|return
name|getPrefGroup
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|d
operator|.
name|getPrefGroup
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

