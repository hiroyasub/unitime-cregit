begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|HibernateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseInstructorAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructorAttributeDAO
import|;
end_import

begin_class
specifier|public
class|class
name|InstructorAttribute
extends|extends
name|BaseInstructorAttribute
implements|implements
name|Comparable
argument_list|<
name|InstructorAttribute
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|331064011983395675L
decl_stmt|;
specifier|public
specifier|static
name|String
name|ATTRIBUTES_LIST_ATTR_NAME
init|=
literal|"attributesList"
decl_stmt|;
specifier|public
name|InstructorAttribute
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|InstructorAttribute
name|s
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|(
name|getType
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|getType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|s
operator|.
name|getType
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|s
operator|.
name|getType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
else|:
name|getUniqueId
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|InstructorAttribute
argument_list|>
name|getAllGlobalAttributes
parameter_list|(
name|Long
name|sessionId
parameter_list|)
throws|throws
name|HibernateException
block|{
return|return
operator|(
name|List
argument_list|<
name|InstructorAttribute
argument_list|>
operator|)
name|InstructorAttributeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from InstructorAttribute ia where ia.session.uniqueId = :sessionId and ia.department is null order by name"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|InstructorAttribute
argument_list|>
name|getAllDepartmentalAttributes
parameter_list|(
name|Long
name|departmentId
parameter_list|)
throws|throws
name|HibernateException
block|{
return|return
operator|(
name|List
argument_list|<
name|InstructorAttribute
argument_list|>
operator|)
name|InstructorAttributeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from InstructorAttribute ia where ia.department.uniqueId = :departmentId order by name"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"departmentId"
argument_list|,
name|departmentId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isParentOf
parameter_list|(
name|InstructorAttribute
name|attribute
parameter_list|)
block|{
while|while
condition|(
name|attribute
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|equals
argument_list|(
name|attribute
operator|.
name|getParentAttribute
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
name|attribute
operator|=
name|attribute
operator|.
name|getParentAttribute
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|String
name|getNameWithType
parameter_list|()
block|{
return|return
name|getName
argument_list|()
operator|+
operator|(
name|getType
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|getType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|")"
operator|)
return|;
block|}
block|}
end_class

end_unit

