begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|HibernateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|ObjectNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|impl
operator|.
name|SessionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseInstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|AcadAreaReservationComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|CourseOfferingComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|CourseReservationComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|IndividualReservationComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|InstructionalOfferingComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|NavigationComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|PosReservationComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|StudentGroupReservationComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|InstrOfferingPermIdGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|Navigation
import|;
end_import

begin_class
specifier|public
class|class
name|InstructionalOffering
extends|extends
name|BaseInstructionalOffering
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|CourseOffering
name|controllingCourseOffering
init|=
literal|null
decl_stmt|;
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|InstructionalOffering
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|InstructionalOffering
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Constructor for required fields 	 */
specifier|public
name|InstructionalOffering
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
name|session
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Integer
name|instrOfferingPermId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Boolean
name|notOffered
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Boolean
name|designatorRequired
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|,
name|session
argument_list|,
name|instrOfferingPermId
argument_list|,
name|notOffered
argument_list|,
name|designatorRequired
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
specifier|public
name|String
name|getCourseName
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|)
return|;
block|}
specifier|public
name|String
name|getCourseNameWithTitle
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseNameWithTitle
argument_list|()
operator|)
return|;
block|}
comment|/** 	 * Remove a course offering from the instructional offering 	 * @param co Course offering object to be removed 	 * @return true if course offering was found and removed, false otherwise 	 */
specifier|public
name|boolean
name|removeCourseOffering
parameter_list|(
name|CourseOffering
name|co
parameter_list|)
block|{
name|Set
name|s
init|=
name|getCourseOfferings
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
name|s
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|CourseOffering
name|tempCo
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|tempCo
operator|=
operator|(
name|CourseOffering
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|tempCo
operator|.
name|getUniqueId
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|co
operator|.
name|getUniqueId
argument_list|()
operator|.
name|intValue
argument_list|()
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"Removing course from instructional offering"
argument_list|)
expr_stmt|;
name|s
operator|.
name|remove
argument_list|(
name|tempCo
argument_list|)
expr_stmt|;
name|tempCo
operator|.
name|setInstructionalOffering
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setCourseOfferings
argument_list|(
name|s
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|CourseOffering
name|findSortCourseOfferingForSubjectArea
parameter_list|(
name|Long
name|subjectAreaUniqueId
parameter_list|)
block|{
name|CourseOffering
name|controlingCourseOffering
init|=
name|getControllingCourseOffering
argument_list|()
decl_stmt|;
if|if
condition|(
name|controlingCourseOffering
operator|!=
literal|null
operator|&&
operator|(
name|subjectAreaUniqueId
operator|==
literal|null
operator|||
name|subjectAreaUniqueId
operator|.
name|equals
argument_list|(
name|controlingCourseOffering
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
condition|)
return|return
name|controlingCourseOffering
return|;
name|CourseOffering
name|minCo
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|co
init|=
operator|(
name|CourseOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|subjectAreaUniqueId
operator|!=
literal|null
operator|&&
operator|!
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|subjectAreaUniqueId
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|minCo
operator|==
literal|null
operator|||
name|minCo
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|compareTo
argument_list|(
name|co
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
name|minCo
operator|=
name|co
expr_stmt|;
block|}
return|return
name|minCo
return|;
block|}
specifier|public
name|CourseOffering
name|findSortCourseOfferingForSubjectArea
parameter_list|(
name|SubjectArea
name|subjectArea
parameter_list|)
block|{
return|return
operator|(
name|this
operator|.
name|findSortCourseOfferingForSubjectArea
argument_list|(
name|subjectArea
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|public
name|TreeSet
name|courseOfferingsMinusSortCourseOfferingForSubjectArea
parameter_list|(
name|Long
name|subjectAreaUID
parameter_list|)
block|{
name|CourseOffering
name|co
init|=
name|this
operator|.
name|findSortCourseOfferingForSubjectArea
argument_list|(
name|subjectAreaUID
argument_list|)
decl_stmt|;
name|TreeSet
name|crsOffrs
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|CourseOfferingComparator
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
name|it
init|=
name|this
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|CourseOffering
name|tmpCo
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|tmpCo
operator|=
operator|(
name|CourseOffering
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|tmpCo
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|crsOffrs
operator|.
name|add
argument_list|(
name|tmpCo
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|crsOffrs
operator|)
return|;
block|}
specifier|public
name|TreeSet
name|courseOfferingsMinusSortCourseOfferingForSubjectArea
parameter_list|(
name|SubjectArea
name|subjectArea
parameter_list|)
block|{
return|return
operator|(
name|courseOfferingsMinusSortCourseOfferingForSubjectArea
argument_list|(
name|subjectArea
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|public
name|Boolean
name|getNotOffered
parameter_list|()
block|{
return|return
operator|(
name|isNotOffered
argument_list|()
operator|)
return|;
block|}
comment|/** 	 * Return the value associated with the column: instrOfferingConfigs 	 */
specifier|public
name|java
operator|.
name|util
operator|.
name|Set
name|getInstrOfferingConfigs
parameter_list|()
block|{
return|return
name|super
operator|.
name|getInstrOfferingConfigs
argument_list|()
return|;
block|}
specifier|public
name|Department
name|getDepartment
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|)
return|;
block|}
specifier|public
name|boolean
name|isEditableBy
parameter_list|(
name|User
name|user
parameter_list|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"Checking edit permission on: "
operator|+
name|this
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|" - Cannot Edit: User Info not found "
argument_list|)
expr_stmt|;
return|return
operator|(
literal|false
operator|)
return|;
block|}
if|if
condition|(
name|user
operator|.
name|isAdmin
argument_list|()
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|" - Can Edit: User is admin"
argument_list|)
expr_stmt|;
return|return
operator|(
literal|true
operator|)
return|;
block|}
if|if
condition|(
name|this
operator|.
name|getDepartment
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|false
operator|)
return|;
block|}
else|else
block|{
comment|// Check if controlling course belongs to the user
if|if
condition|(
operator|!
name|this
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|isEditableBy
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|" - Cannot Edit: Controlling course owned by another user "
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|//    		// Check if cross-listed with a course in a different department
comment|//    		for (Iterator i=this.getCourseOfferings().iterator();i.hasNext();) {
comment|//    		    CourseOffering co = (CourseOffering) i.next();
comment|//    		    if(!co.isEditableBy(user)) {
comment|//                	Debug.debug(" - Cannot Edit: Cross listed with a course in a different department. ");
comment|//    		        return false;
comment|//    		    }
comment|//    		}
name|Debug
operator|.
name|debug
argument_list|(
literal|" - Can Edit."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
specifier|public
name|boolean
name|isViewableBy
parameter_list|(
name|User
name|user
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|false
operator|)
return|;
block|}
if|if
condition|(
name|user
operator|.
name|isAdmin
argument_list|()
condition|)
block|{
return|return
operator|(
literal|true
operator|)
return|;
block|}
if|if
condition|(
name|isEditableBy
argument_list|(
name|user
argument_list|)
condition|)
block|{
return|return
operator|(
literal|true
operator|)
return|;
block|}
if|if
condition|(
name|user
operator|.
name|getCurrentRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|VIEW_ALL_ROLE
argument_list|)
operator|||
name|user
operator|.
name|getCurrentRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|EXAM_MGR_ROLE
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|this
operator|.
name|getCourseOfferings
argument_list|()
operator|!=
literal|null
operator|&&
name|this
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Iterator
name|it
init|=
name|this
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|CourseOffering
name|co
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|co
operator|=
operator|(
name|CourseOffering
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|co
operator|.
name|isViewableBy
argument_list|(
name|user
argument_list|)
condition|)
block|{
return|return
operator|(
literal|true
operator|)
return|;
block|}
block|}
block|}
return|return
operator|(
literal|false
operator|)
return|;
block|}
comment|/** 	 * @return Returns the controllingCourseOffering. 	 */
specifier|public
name|CourseOffering
name|getControllingCourseOffering
parameter_list|()
block|{
if|if
condition|(
name|controllingCourseOffering
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|getCourseOfferings
argument_list|()
operator|!=
literal|null
operator|&&
name|this
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Iterator
name|it
init|=
name|this
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|CourseOffering
name|co
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|controllingCourseOffering
operator|==
literal|null
operator|&&
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|co
operator|=
operator|(
name|CourseOffering
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|co
operator|.
name|isIsControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|controllingCourseOffering
operator|=
name|co
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|controllingCourseOffering
return|;
block|}
comment|/** 	 * @return Course name of the controlling course 	 */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
return|;
block|}
comment|/** 	 * Search for instructional offerings 	 * @param acadSessionId Academic Session 	 * @param subjectAreaId Subject Area 	 * @param courseNbr Course Number 	 * @return TreeSet of results 	 */
specifier|public
specifier|static
name|TreeSet
name|search
parameter_list|(
name|Long
name|acadSessionId
parameter_list|,
name|String
name|subjectAreaId
parameter_list|,
name|String
name|courseNbr
parameter_list|,
name|boolean
name|fetchStructure
parameter_list|,
name|boolean
name|fetchCredits
parameter_list|,
name|boolean
name|fetchInstructors
parameter_list|,
name|boolean
name|fetchPreferences
parameter_list|,
name|boolean
name|fetchAssignments
parameter_list|,
name|boolean
name|fetchReservations
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|(
operator|new
name|InstructionalOfferingDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
name|StringBuffer
name|query
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"select distinct io "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" from InstructionalOffering as io inner join io.courseOfferings as co "
argument_list|)
expr_stmt|;
if|if
condition|(
name|fetchStructure
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch io.courseOfferings as cox "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch io.instrOfferingConfigs as ioc "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch ioc.schedulingSubparts as ss "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch ss.classes as c "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch ss.childSubparts as css "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch c.childClasses as cc "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fetchCredits
condition|)
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch ss.creditConfigs as ssc "
argument_list|)
expr_stmt|;
if|if
condition|(
name|fetchPreferences
operator|||
name|fetchInstructors
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch c.classInstructors as ci "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch ci.instructor as di "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fetchAssignments
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch c.assignments as ca "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch ca.rooms as car "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fetchPreferences
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch c.preferences as cp "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch ss.preferences as ssp "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch di.preferences as dip "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fetchReservations
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch ioc.individualReservations as ir "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch ioc.studentGroupReservations as sgr "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch ioc.acadAreaReservations as aar "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch ioc.posReservations as pr "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch ioc.courseReservations as cr "
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|append
argument_list|(
literal|" where io.session.uniqueId=:sessionId "
argument_list|)
expr_stmt|;
if|if
condition|(
name|courseNbr
operator|!=
literal|null
operator|&&
name|courseNbr
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|" and co.courseNbr "
argument_list|)
expr_stmt|;
if|if
condition|(
name|courseNbr
operator|.
name|indexOf
argument_list|(
literal|'*'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|" like '"
argument_list|)
expr_stmt|;
name|courseNbr
operator|=
name|courseNbr
operator|.
name|replace
argument_list|(
literal|'*'
argument_list|,
literal|'%'
argument_list|)
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|append
argument_list|(
literal|" = '"
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|append
argument_list|(
name|courseNbr
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"'  "
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|append
argument_list|(
literal|" and co.subjectArea.uniqueId = :subjectAreaId "
argument_list|)
expr_stmt|;
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|q
operator|.
name|setFetchSize
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|q
operator|.
name|setInteger
argument_list|(
literal|"subjectAreaId"
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|subjectAreaId
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|acadSessionId
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TreeSet
name|ts
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|InstructionalOfferingComparator
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|subjectAreaId
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|sTime
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|ts
operator|.
name|addAll
argument_list|(
name|q
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|eTime
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"fetch time = "
operator|+
operator|(
name|eTime
operator|-
name|sTime
operator|)
argument_list|)
expr_stmt|;
return|return
name|ts
return|;
block|}
comment|/**      * Deletes all classes for this offering      */
specifier|public
name|void
name|deleteAllClasses
parameter_list|(
name|Session
name|hibSession
parameter_list|)
block|{
comment|// Loop through configs - currently only one config is supported
name|Set
name|sIoc
init|=
name|this
operator|.
name|getInstrOfferingConfigs
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iterIoc
init|=
name|sIoc
operator|.
name|iterator
argument_list|()
init|;
name|iterIoc
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|tIoc
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|iterIoc
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Loop through subparts
name|Set
name|sSp
init|=
name|tIoc
operator|.
name|getSchedulingSubparts
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iterSp
init|=
name|sSp
operator|.
name|iterator
argument_list|()
init|;
name|iterSp
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|tSp
init|=
operator|(
name|SchedulingSubpart
operator|)
name|iterSp
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Loop through classes
name|Set
name|sCl
init|=
name|tSp
operator|.
name|getClasses
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iterCl
init|=
name|sCl
operator|.
name|iterator
argument_list|()
init|;
name|iterCl
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|iterCl
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Delete Class Instructors
name|Set
name|classInstrs
init|=
name|c
operator|.
name|getClassInstructors
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iterCi
init|=
name|classInstrs
operator|.
name|iterator
argument_list|()
init|;
name|iterCi
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|iterCi
operator|.
name|next
argument_list|()
decl_stmt|;
name|DepartmentalInstructor
name|instr
init|=
name|ci
operator|.
name|getInstructor
argument_list|()
decl_stmt|;
name|instr
operator|.
name|removeClassInstructor
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
name|Event
operator|.
name|deleteFromEvents
argument_list|(
name|hibSession
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|Exam
operator|.
name|deleteFromExams
argument_list|(
name|hibSession
argument_list|,
name|c
argument_list|)
expr_stmt|;
comment|// Delete class
name|hibSession
operator|.
name|delete
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
comment|// Delete set of classes
name|tSp
operator|.
name|getClasses
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|Event
operator|.
name|deleteFromEvents
argument_list|(
name|hibSession
argument_list|,
name|tIoc
argument_list|)
expr_stmt|;
name|Exam
operator|.
name|deleteFromExams
argument_list|(
name|hibSession
argument_list|,
name|tIoc
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Deletes all classes for this offering      */
specifier|public
name|void
name|deleteAllDistributionPreferences
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i1
init|=
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|cfg
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|cfg
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|ss
operator|.
name|deleteAllDistributionPreferences
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|InstructionalOffering
name|getNextInstructionalOffering
parameter_list|(
name|HttpSession
name|session
parameter_list|,
name|User
name|user
parameter_list|,
name|boolean
name|canEdit
parameter_list|,
name|boolean
name|canView
parameter_list|)
block|{
return|return
name|getNextInstructionalOffering
argument_list|(
name|session
argument_list|,
operator|new
name|NavigationComparator
argument_list|()
argument_list|,
name|user
argument_list|,
name|canEdit
argument_list|,
name|canView
argument_list|)
return|;
block|}
specifier|public
name|InstructionalOffering
name|getPreviousInstructionalOffering
parameter_list|(
name|HttpSession
name|session
parameter_list|,
name|User
name|user
parameter_list|,
name|boolean
name|canEdit
parameter_list|,
name|boolean
name|canView
parameter_list|)
block|{
return|return
name|getPreviousInstructionalOffering
argument_list|(
name|session
argument_list|,
operator|new
name|NavigationComparator
argument_list|()
argument_list|,
name|user
argument_list|,
name|canEdit
argument_list|,
name|canView
argument_list|)
return|;
block|}
specifier|public
name|InstructionalOffering
name|getNextInstructionalOffering
parameter_list|(
name|HttpSession
name|session
parameter_list|,
name|Comparator
name|cmp
parameter_list|,
name|User
name|user
parameter_list|,
name|boolean
name|canEdit
parameter_list|,
name|boolean
name|canView
parameter_list|)
block|{
name|Long
name|nextId
init|=
name|Navigation
operator|.
name|getNext
argument_list|(
name|session
argument_list|,
name|Navigation
operator|.
name|sInstructionalOfferingLevel
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|nextId
operator|.
name|longValue
argument_list|()
operator|<
literal|0
condition|)
return|return
literal|null
return|;
return|return
operator|(
operator|new
name|InstructionalOfferingDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|nextId
argument_list|)
return|;
block|}
name|InstructionalOffering
name|next
init|=
literal|null
decl_stmt|;
name|SubjectArea
name|area
init|=
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
decl_stmt|;
name|Iterator
name|i
init|=
literal|null
decl_stmt|;
try|try
block|{
name|i
operator|=
name|area
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ObjectNotFoundException
name|e
parameter_list|)
block|{
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|refresh
argument_list|(
name|area
argument_list|)
expr_stmt|;
name|i
operator|=
name|area
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
for|for
control|(
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|c
init|=
operator|(
name|CourseOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|isIsControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
continue|continue;
name|InstructionalOffering
name|o
init|=
operator|(
name|InstructionalOffering
operator|)
name|c
operator|.
name|getInstructionalOffering
argument_list|()
decl_stmt|;
comment|//if (canEdit&& !o.isEditableBy(user)) continue;
comment|//if (canView&& !o.isViewableBy(user)) continue;
if|if
condition|(
operator|!
name|o
operator|.
name|isNotOffered
argument_list|()
operator|.
name|equals
argument_list|(
name|isNotOffered
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|cmp
operator|.
name|compare
argument_list|(
name|this
argument_list|,
name|o
argument_list|)
operator|>=
literal|0
condition|)
continue|continue;
if|if
condition|(
name|next
operator|==
literal|null
operator|||
name|cmp
operator|.
name|compare
argument_list|(
name|next
argument_list|,
name|o
argument_list|)
operator|>
literal|0
condition|)
name|next
operator|=
name|o
expr_stmt|;
block|}
return|return
name|next
return|;
block|}
specifier|public
name|InstructionalOffering
name|getPreviousInstructionalOffering
parameter_list|(
name|HttpSession
name|session
parameter_list|,
name|Comparator
name|cmp
parameter_list|,
name|User
name|user
parameter_list|,
name|boolean
name|canEdit
parameter_list|,
name|boolean
name|canView
parameter_list|)
block|{
name|Long
name|previousId
init|=
name|Navigation
operator|.
name|getPrevious
argument_list|(
name|session
argument_list|,
name|Navigation
operator|.
name|sInstructionalOfferingLevel
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|previousId
operator|.
name|longValue
argument_list|()
operator|<
literal|0
condition|)
return|return
literal|null
return|;
return|return
operator|(
operator|new
name|InstructionalOfferingDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|previousId
argument_list|)
return|;
block|}
name|InstructionalOffering
name|previous
init|=
literal|null
decl_stmt|;
name|SubjectArea
name|area
init|=
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
decl_stmt|;
name|Iterator
name|i
init|=
literal|null
decl_stmt|;
try|try
block|{
name|i
operator|=
name|area
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ObjectNotFoundException
name|e
parameter_list|)
block|{
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|refresh
argument_list|(
name|area
argument_list|)
expr_stmt|;
name|i
operator|=
name|area
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
for|for
control|(
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|c
init|=
operator|(
name|CourseOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|isIsControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
continue|continue;
name|InstructionalOffering
name|o
init|=
operator|(
name|InstructionalOffering
operator|)
name|c
operator|.
name|getInstructionalOffering
argument_list|()
decl_stmt|;
comment|//if (canEdit&& !o.isEditableBy(user)) continue;
comment|//if (canView&& !o.isViewableBy(user)) continue;
if|if
condition|(
operator|!
name|o
operator|.
name|isNotOffered
argument_list|()
operator|.
name|equals
argument_list|(
name|isNotOffered
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|cmp
operator|.
name|compare
argument_list|(
name|this
argument_list|,
name|o
argument_list|)
operator|<=
literal|0
condition|)
continue|continue;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|cmp
operator|.
name|compare
argument_list|(
name|previous
argument_list|,
name|o
argument_list|)
operator|<
literal|0
condition|)
name|previous
operator|=
name|o
expr_stmt|;
block|}
return|return
name|previous
return|;
block|}
comment|/**      * Remove config from offering      * @param ioc Config      */
specifier|public
name|void
name|removeConfiguration
parameter_list|(
name|InstrOfferingConfig
name|ioc
parameter_list|)
block|{
name|Set
name|configs
init|=
name|this
operator|.
name|getInstrOfferingConfigs
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|configs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|config
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|equals
argument_list|(
name|ioc
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|/**      * Checks if the config name already exists in the Instructional Offering      * @param name Config Name      * @param configId Config ID that is to be excluded from the search      * @return true if exists/ false otherwise      */
specifier|public
name|boolean
name|existsConfig
parameter_list|(
name|String
name|name
parameter_list|,
name|Long
name|configId
parameter_list|)
block|{
name|Set
name|configs
init|=
name|this
operator|.
name|getInstrOfferingConfigs
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|configs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|config
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|getName
argument_list|()
operator|!=
literal|null
operator|&&
name|config
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
operator|.
name|trim
argument_list|()
argument_list|)
operator|&&
operator|!
name|config
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|configId
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|List
name|findAll
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
return|return
operator|(
operator|new
name|InstructionalOfferingDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct io from InstructionalOffering io where "
operator|+
literal|"io.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
comment|/**      * Returns a list containing all the types of reservations for an Instructional      * Offering in the order: Individual, Group, Acad Area, POS, Course Offering      * @param individual include individual reservations      * @param studentGroup include student group reservations      * @param acadArea include academic area reservations      * @param pos include pos reservations      * @param course include course reservations      * @return collection of reservations (collection is empty is none found)      */
specifier|public
name|Collection
name|getReservations
parameter_list|(
name|boolean
name|individual
parameter_list|,
name|boolean
name|studentGroup
parameter_list|,
name|boolean
name|acadArea
parameter_list|,
name|boolean
name|pos
parameter_list|,
name|boolean
name|course
parameter_list|)
block|{
name|Collection
name|resv
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
if|if
condition|(
name|individual
operator|&&
name|this
operator|.
name|getIndividualReservations
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
name|c
init|=
operator|new
name|Vector
argument_list|(
name|this
operator|.
name|getIndividualReservations
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|c
argument_list|,
operator|new
name|IndividualReservationComparator
argument_list|()
argument_list|)
expr_stmt|;
name|resv
operator|.
name|addAll
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|studentGroup
operator|&&
name|this
operator|.
name|getStudentGroupReservations
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
name|c
init|=
operator|new
name|Vector
argument_list|(
name|this
operator|.
name|getStudentGroupReservations
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|c
argument_list|,
operator|new
name|StudentGroupReservationComparator
argument_list|()
argument_list|)
expr_stmt|;
name|resv
operator|.
name|addAll
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|acadArea
operator|&&
name|this
operator|.
name|getAcadAreaReservations
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
name|c
init|=
operator|new
name|Vector
argument_list|(
name|this
operator|.
name|getAcadAreaReservations
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|c
argument_list|,
operator|new
name|AcadAreaReservationComparator
argument_list|()
argument_list|)
expr_stmt|;
name|resv
operator|.
name|addAll
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pos
operator|&&
name|this
operator|.
name|getPosReservations
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
name|c
init|=
operator|new
name|Vector
argument_list|(
name|this
operator|.
name|getPosReservations
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|c
argument_list|,
operator|new
name|PosReservationComparator
argument_list|()
argument_list|)
expr_stmt|;
name|resv
operator|.
name|addAll
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|course
operator|&&
name|this
operator|.
name|getCourseReservations
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
name|c
init|=
operator|new
name|Vector
argument_list|(
name|this
operator|.
name|getCourseReservations
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|c
argument_list|,
operator|new
name|CourseReservationComparator
argument_list|()
argument_list|)
expr_stmt|;
name|resv
operator|.
name|addAll
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|resv
return|;
block|}
comment|/**      * Returns effective reservations for the class      * @param individual include individual reservations      * @param studentGroup include student group reservations      * @param acadArea include academic area reservations      * @param pos include pos reservations      * @param course include course reservations      * @return collection of reservations (collection is empty is none found)      */
specifier|public
name|Collection
name|effectiveReservations
parameter_list|(
name|boolean
name|individual
parameter_list|,
name|boolean
name|studentGroup
parameter_list|,
name|boolean
name|acadArea
parameter_list|,
name|boolean
name|pos
parameter_list|,
name|boolean
name|course
parameter_list|)
block|{
comment|//TODO hfernan - effective reservations - if applicable
return|return
name|getReservations
argument_list|(
name|individual
argument_list|,
name|studentGroup
argument_list|,
name|acadArea
argument_list|,
name|pos
argument_list|,
name|course
argument_list|)
return|;
block|}
specifier|public
name|void
name|computeLabels
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i1
init|=
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|cfg
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|cfg
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|ss
operator|.
name|setSchedulingSubpartSuffixCache
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ss
operator|.
name|getSchedulingSubpartSuffix
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|ss
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i3
init|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i3
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|i3
operator|.
name|next
argument_list|()
decl_stmt|;
name|c
operator|.
name|setSectionNumberCache
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|c
operator|.
name|getSectionNumber
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|CourseCreditUnitConfig
name|getCredit
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|getCreditConfigs
argument_list|()
operator|==
literal|null
operator|||
name|this
operator|.
name|getCreditConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
operator|(
name|CourseCreditUnitConfig
operator|)
name|this
operator|.
name|getCreditConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|)
return|;
block|}
block|}
specifier|public
name|void
name|setCredit
parameter_list|(
name|CourseCreditUnitConfig
name|courseCreditUnitConfig
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|getCreditConfigs
argument_list|()
operator|==
literal|null
operator|||
name|this
operator|.
name|getCreditConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|addTocreditConfigs
argument_list|(
name|courseCreditUnitConfig
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|this
operator|.
name|getCreditConfigs
argument_list|()
operator|.
name|contains
argument_list|(
name|courseCreditUnitConfig
argument_list|)
condition|)
block|{
name|this
operator|.
name|getCreditConfigs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|getCreditConfigs
argument_list|()
operator|.
name|add
argument_list|(
name|courseCreditUnitConfig
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//course already contains this config so we do not need to add it again.
block|}
block|}
comment|/** Return number of classes of all of the given ITYPE */
specifier|public
name|int
name|getNrClasses
parameter_list|(
name|ItypeDesc
name|itype
parameter_list|)
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|cfg
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|cfg
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|subpart
operator|.
name|getItype
argument_list|()
operator|.
name|equals
argument_list|(
name|itype
argument_list|)
condition|)
name|ret
operator|+=
name|subpart
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|Long
name|getSessionId
parameter_list|()
block|{
if|if
condition|(
name|getSession
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|getSession
argument_list|()
operator|.
name|getSessionId
argument_list|()
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
block|}
specifier|public
name|boolean
name|hasGroupedClasses
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|!=
literal|null
operator|&&
name|this
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|InstrOfferingConfig
name|ioc
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|this
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ioc
operator|=
operator|(
name|InstrOfferingConfig
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|ioc
operator|.
name|hasGroupedClasses
argument_list|()
condition|)
block|{
return|return
operator|(
literal|true
operator|)
return|;
block|}
block|}
block|}
return|return
operator|(
literal|false
operator|)
return|;
block|}
comment|/** 	 * Checks if IO has more than 1 config 	 * @return true / false 	 */
specifier|public
name|boolean
name|hasMultipleConfigurations
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|)
return|;
block|}
specifier|public
name|void
name|generateInstrOfferingPermId
parameter_list|()
throws|throws
name|HibernateException
block|{
name|setInstrOfferingPermId
argument_list|(
operator|(
name|Integer
operator|)
name|InstrOfferingPermIdGenerator
operator|.
name|getGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|(
name|SessionImpl
operator|)
operator|new
name|InstructionalOfferingDAO
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Checks if offering has unlimted enrollment 	 * @return 	 */
specifier|public
name|Boolean
name|hasUnlimitedEnrollment
parameter_list|()
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|InstrOfferingConfig
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
specifier|public
name|boolean
name|hasClasses
parameter_list|()
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|ioc
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ioc
operator|.
name|hasClasses
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Delete all resrvations      * @param hibSession      * @throws Exception      */
specifier|public
name|void
name|deleteAllReservations
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Remove all academic area reservations
for|for
control|(
name|Iterator
name|i
init|=
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|co
init|=
operator|(
name|CourseOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Set
name|acadResvs
init|=
name|co
operator|.
name|getAcadAreaReservations
argument_list|()
decl_stmt|;
if|if
condition|(
name|acadResvs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|resvIter
init|=
name|acadResvs
operator|.
name|iterator
argument_list|()
init|;
name|resvIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AcadAreaReservation
name|ar
init|=
operator|(
name|AcadAreaReservation
operator|)
name|resvIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|resvIter
operator|.
name|remove
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|ar
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Remove all course reservations
name|Set
name|ioResv
init|=
name|getCourseReservations
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iterR
init|=
name|ioResv
operator|.
name|iterator
argument_list|()
init|;
name|iterR
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOfferingReservation
name|resv
init|=
operator|(
name|CourseOfferingReservation
operator|)
name|iterR
operator|.
name|next
argument_list|()
decl_stmt|;
name|iterR
operator|.
name|remove
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|resv
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Delete all course offerings in the instructional offering 	 * @param hibSession 	 */
specifier|public
name|void
name|deleteAllCourses
parameter_list|(
name|Session
name|hibSession
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|co
init|=
operator|(
name|CourseOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Event
operator|.
name|deleteFromEvents
argument_list|(
name|hibSession
argument_list|,
name|co
argument_list|)
expr_stmt|;
name|Exam
operator|.
name|deleteFromExams
argument_list|(
name|hibSession
argument_list|,
name|co
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|co
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|cloneOfferingConfigurationFrom
parameter_list|(
name|InstructionalOffering
name|instrOffrToCloneFrom
parameter_list|)
block|{
if|if
condition|(
name|instrOffrToCloneFrom
operator|==
literal|null
operator|||
name|instrOffrToCloneFrom
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|getInstrOfferingConfigs
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|setNotOffered
argument_list|(
name|instrOffrToCloneFrom
operator|.
name|getNotOffered
argument_list|()
argument_list|)
expr_stmt|;
name|InstrOfferingConfig
name|origIoc
init|=
literal|null
decl_stmt|;
name|InstrOfferingConfig
name|newIoc
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|iocIt
init|=
name|instrOffrToCloneFrom
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iocIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|origIoc
operator|=
operator|(
name|InstrOfferingConfig
operator|)
name|iocIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|newIoc
operator|=
operator|(
name|InstrOfferingConfig
operator|)
name|origIoc
operator|.
name|cloneWithSubparts
argument_list|()
expr_stmt|;
name|newIoc
operator|.
name|setInstructionalOffering
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|instrOffrToCloneFrom
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|Department
name|controlDept
init|=
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getDepartment
argument_list|()
decl_stmt|;
name|SchedulingSubpart
name|ss
init|=
literal|null
decl_stmt|;
name|Class_
name|c
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|newIoc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|ssIt
init|=
name|newIoc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|ssIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ss
operator|=
operator|(
name|SchedulingSubpart
operator|)
name|ssIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|ss
operator|.
name|getClasses
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|cIt
init|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|cIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|c
operator|=
operator|(
name|Class_
operator|)
name|cIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getManagingDept
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|c
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|controlDept
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|&&
operator|!
name|c
operator|.
name|getManagingDept
argument_list|()
operator|.
name|isExternalManager
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|c
operator|.
name|setManagingDept
argument_list|(
name|controlDept
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getClassInstructors
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|c
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|DepartmentalInstructor
name|di
init|=
literal|null
decl_stmt|;
name|ClassInstructor
name|ci
init|=
literal|null
decl_stmt|;
name|List
name|al
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|al
operator|.
name|addAll
argument_list|(
name|c
operator|.
name|getClassInstructors
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|ciIt
init|=
name|al
operator|.
name|iterator
argument_list|()
init|;
name|ciIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ci
operator|=
operator|(
name|ClassInstructor
operator|)
name|ciIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|di
operator|=
name|DepartmentalInstructor
operator|.
name|findByPuidDepartmentId
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|controlDept
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|di
operator|!=
literal|null
condition|)
block|{
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getClasses
argument_list|()
operator|.
name|remove
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setInstructor
argument_list|(
name|di
argument_list|)
expr_stmt|;
name|di
operator|.
name|addToclasses
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|c
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|remove
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setClassInstructing
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
name|this
operator|.
name|addToinstrOfferingConfigs
argument_list|(
name|newIoc
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addTocourseOfferingsReservations
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOfferingReservation
name|courseOfferingReservation
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|getCourseReservations
argument_list|()
condition|)
name|setCourseReservations
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|getCourseReservations
argument_list|()
operator|.
name|add
argument_list|(
name|courseOfferingReservation
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|InstructionalOffering
name|findByIdRolledForwardFrom
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Long
name|uniqueIdRolledForwardFrom
parameter_list|)
block|{
return|return
operator|(
name|InstructionalOffering
operator|)
operator|new
name|InstructionalOfferingDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select io from InstructionalOffering io where io.session.uniqueId=:sessionId and io.uniqueIdRolledForwardFrom=:uniqueIdRolledForwardFrom"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"uniqueIdRolledForwardFrom"
argument_list|,
name|uniqueIdRolledForwardFrom
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
block|}
end_class

end_unit

