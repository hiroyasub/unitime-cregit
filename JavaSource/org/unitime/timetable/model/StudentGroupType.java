begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseStudentGroupType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentGroupTypeDAO
import|;
end_import

begin_class
specifier|public
class|class
name|StudentGroupType
extends|extends
name|BaseStudentGroupType
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|StudentGroupType
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|StudentGroupType
name|findByReference
parameter_list|(
name|String
name|reference
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
return|return
operator|(
name|StudentGroupType
operator|)
operator|(
name|hibSession
operator|==
literal|null
condition|?
name|StudentGroupTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
else|:
name|hibSession
operator|)
operator|.
name|createQuery
argument_list|(
literal|"from StudentGroupType where reference = :reference"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"reference"
argument_list|,
name|reference
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|public
specifier|static
enum|enum
name|AllowDisabledSection
block|{
name|NotAllowed
block|,
name|WithGroupReservation
block|,
name|AlwaysAllowed
block|, 	}
specifier|public
name|AllowDisabledSection
name|getAllowDisabledSection
parameter_list|()
block|{
if|if
condition|(
name|getAllowDisabled
argument_list|()
operator|==
literal|null
condition|)
return|return
name|AllowDisabledSection
operator|.
name|NotAllowed
return|;
return|return
name|AllowDisabledSection
operator|.
name|values
argument_list|()
index|[
name|getAllowDisabled
argument_list|()
index|]
return|;
block|}
specifier|public
name|void
name|setAllowDisabledSection
parameter_list|(
name|AllowDisabledSection
name|allow
parameter_list|)
block|{
if|if
condition|(
name|allow
operator|==
literal|null
condition|)
name|setAllowDisabled
argument_list|(
operator|(
name|short
operator|)
name|AllowDisabledSection
operator|.
name|NotAllowed
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|setAllowDisabled
argument_list|(
operator|(
name|short
operator|)
name|allow
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

