begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseSavedHQL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SavedHQLDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserAuthority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserQualifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller, Stephanie Schluttenhofer  */
end_comment

begin_class
specifier|public
class|class
name|SavedHQL
extends|extends
name|BaseSavedHQL
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|2532519378106863655L
decl_stmt|;
specifier|public
name|SavedHQL
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
enum|enum
name|Flag
block|{
name|APPEARANCE_COURSES
argument_list|(
literal|"Appearance: Courses"
argument_list|,
name|Right
operator|.
name|HQLReportsCourses
argument_list|,
literal|"courses"
argument_list|)
block|,
name|APPEARANCE_EXAMS
argument_list|(
literal|"Appearance: Examinations"
argument_list|,
name|Right
operator|.
name|HQLReportsExaminations
argument_list|,
literal|"exams"
argument_list|)
block|,
name|APPEARANCE_SECTIONING
argument_list|(
literal|"Appearance: Student Sectioning"
argument_list|,
name|Right
operator|.
name|HQLReportsStudents
argument_list|,
literal|"sectioning"
argument_list|)
block|,
name|APPEARANCE_EVENTS
argument_list|(
literal|"Appearance: Events"
argument_list|,
name|Right
operator|.
name|HQLReportsEvents
argument_list|,
literal|"events"
argument_list|)
block|,
name|APPEARANCE_ADMINISTRATION
argument_list|(
literal|"Appearance: Administration"
argument_list|,
name|Right
operator|.
name|HQLReportsAdministration
argument_list|,
literal|"administration"
argument_list|)
block|,
name|ADMIN_ONLY
argument_list|(
literal|"Restrictions: Administrator Only"
argument_list|,
name|Right
operator|.
name|HQLReportsAdminOnly
argument_list|)
block|;
specifier|private
name|String
name|iDescription
decl_stmt|;
specifier|private
name|String
name|iAppearance
decl_stmt|;
specifier|private
name|Right
name|iRight
decl_stmt|;
name|Flag
parameter_list|(
name|String
name|desc
parameter_list|,
name|Right
name|right
parameter_list|,
name|String
name|appearance
parameter_list|)
block|{
name|iDescription
operator|=
name|desc
expr_stmt|;
name|iRight
operator|=
name|right
expr_stmt|;
name|iAppearance
operator|=
name|appearance
expr_stmt|;
block|}
name|Flag
parameter_list|(
name|String
name|desc
parameter_list|,
name|Right
name|right
parameter_list|)
block|{
name|this
argument_list|(
name|desc
argument_list|,
name|right
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|flag
parameter_list|()
block|{
return|return
literal|1
operator|<<
name|ordinal
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isSet
parameter_list|(
name|int
name|type
parameter_list|)
block|{
return|return
operator|(
name|type
operator|&
name|flag
argument_list|()
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
name|iDescription
return|;
block|}
specifier|public
name|String
name|getAppearance
parameter_list|()
block|{
return|return
name|iAppearance
return|;
block|}
specifier|public
name|Right
name|getPermission
parameter_list|()
block|{
return|return
name|iRight
return|;
block|}
block|}
specifier|private
specifier|static
interface|interface
name|OptionImplementation
block|{
specifier|public
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|getValues
parameter_list|(
name|UserContext
name|user
parameter_list|)
function_decl|;
specifier|public
name|Long
name|lookupValue
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|String
name|value
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|static
class|class
name|RefTableOptions
implements|implements
name|OptionImplementation
block|{
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|RefTableEntry
argument_list|>
name|iReference
decl_stmt|;
name|RefTableOptions
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|RefTableEntry
argument_list|>
name|reference
parameter_list|)
block|{
name|iReference
operator|=
name|reference
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|getValues
parameter_list|(
name|UserContext
name|user
parameter_list|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|ret
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RefTableEntry
name|ref
range|:
operator|(
name|List
argument_list|<
name|RefTableEntry
argument_list|>
operator|)
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createCriteria
argument_list|(
name|iReference
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
name|ret
operator|.
name|put
argument_list|(
name|ref
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|ref
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|lookupValue
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|String
name|value
parameter_list|)
block|{
for|for
control|(
name|RefTableEntry
name|ref
range|:
operator|(
name|List
argument_list|<
name|RefTableEntry
argument_list|>
operator|)
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createCriteria
argument_list|(
name|iReference
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
if|if
condition|(
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
name|ref
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
return|return
name|ref
operator|.
name|getUniqueId
argument_list|()
return|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
enum|enum
name|Option
block|{
name|SESSION
argument_list|(
literal|"Academic Session"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
operator|new
name|OptionImplementation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|getValues
parameter_list|(
name|UserContext
name|user
parameter_list|)
block|{
name|Long
name|sessionId
init|=
name|user
operator|.
name|getCurrentAcademicSessionId
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
operator|(
name|sessionId
operator|==
literal|null
condition|?
literal|null
else|:
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|ret
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|session
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|lookupValue
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
operator|(
name|Long
operator|)
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select s.uniqueId from Session s where "
operator|+
literal|"s.academicTerm || s.academicYear = :term or "
operator|+
literal|"s.academicTerm || s.academicYear || s.academicInitiative = :term"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"term"
argument_list|,
name|value
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
block|}
argument_list|)
block|,
name|DEPARTMENT
argument_list|(
literal|"Department"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
operator|new
name|OptionImplementation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|getValues
parameter_list|(
name|UserContext
name|user
parameter_list|)
block|{
name|Long
name|sessionId
init|=
name|user
operator|.
name|getCurrentAcademicSessionId
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
operator|(
name|sessionId
operator|==
literal|null
condition|?
literal|null
else|:
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|TimetableManager
name|manager
init|=
name|TimetableManager
operator|.
name|findByExternalId
argument_list|(
name|user
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|manager
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|ret
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Department
name|d
range|:
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|user
argument_list|)
control|)
name|ret
operator|.
name|put
argument_list|(
name|d
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|d
operator|.
name|htmlLabel
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|lookupValue
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|String
name|value
parameter_list|)
block|{
for|for
control|(
name|Department
name|d
range|:
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|user
argument_list|)
control|)
if|if
condition|(
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
name|d
operator|.
name|getDeptCode
argument_list|()
argument_list|)
condition|)
return|return
name|d
operator|.
name|getUniqueId
argument_list|()
return|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
block|,
name|DEPARTMENTS
argument_list|(
literal|"Departments"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|DEPARTMENT
operator|.
name|iImplementation
argument_list|)
block|,
name|SUBJECT
argument_list|(
literal|"Subject Area"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
operator|new
name|OptionImplementation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|getValues
parameter_list|(
name|UserContext
name|user
parameter_list|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|ret
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|SubjectArea
name|s
range|:
name|SubjectArea
operator|.
name|getUserSubjectAreas
argument_list|(
name|user
argument_list|)
control|)
block|{
name|ret
operator|.
name|put
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|s
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|lookupValue
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|String
name|value
parameter_list|)
block|{
for|for
control|(
name|SubjectArea
name|s
range|:
name|SubjectArea
operator|.
name|getUserSubjectAreas
argument_list|(
name|user
argument_list|)
control|)
if|if
condition|(
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
name|s
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
condition|)
return|return
name|s
operator|.
name|getUniqueId
argument_list|()
return|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
block|,
name|SUBJECTS
argument_list|(
literal|"Subject Areas"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|SUBJECT
operator|.
name|iImplementation
argument_list|)
block|,
name|BUILDING
argument_list|(
literal|"Building"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
operator|new
name|OptionImplementation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|getValues
parameter_list|(
name|UserContext
name|user
parameter_list|)
block|{
name|Long
name|sessionId
init|=
name|user
operator|.
name|getCurrentAcademicSessionId
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
operator|(
name|sessionId
operator|==
literal|null
condition|?
literal|null
else|:
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
operator|)
decl_stmt|;
name|TimetableManager
name|manager
init|=
name|TimetableManager
operator|.
name|findByExternalId
argument_list|(
name|user
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|manager
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|ret
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Building
name|b
range|:
operator|(
name|List
argument_list|<
name|Building
argument_list|>
operator|)
name|Building
operator|.
name|findAll
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
control|)
name|ret
operator|.
name|put
argument_list|(
name|b
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|b
operator|.
name|getAbbrName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|lookupValue
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|values
init|=
name|getValues
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|e
range|:
name|values
operator|.
name|entrySet
argument_list|()
control|)
if|if
condition|(
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
return|return
name|e
operator|.
name|getKey
argument_list|()
return|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
block|,
name|BUILDINGS
argument_list|(
literal|"Buildings"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|BUILDING
operator|.
name|iImplementation
argument_list|)
block|,
name|ROOM
argument_list|(
literal|"Room"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
operator|new
name|OptionImplementation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|getValues
parameter_list|(
name|UserContext
name|user
parameter_list|)
block|{
name|Long
name|sessionId
init|=
name|user
operator|.
name|getCurrentAcademicSessionId
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
operator|(
name|sessionId
operator|==
literal|null
condition|?
literal|null
else|:
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
operator|)
decl_stmt|;
name|TimetableManager
name|manager
init|=
name|TimetableManager
operator|.
name|findByExternalId
argument_list|(
name|user
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|manager
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|ret
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Room
name|r
range|:
operator|(
name|List
argument_list|<
name|Room
argument_list|>
operator|)
name|Room
operator|.
name|findAllRooms
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
control|)
block|{
name|ret
operator|.
name|put
argument_list|(
name|r
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|r
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|lookupValue
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|values
init|=
name|getValues
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|e
range|:
name|values
operator|.
name|entrySet
argument_list|()
control|)
if|if
condition|(
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
return|return
name|e
operator|.
name|getKey
argument_list|()
return|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
block|,
name|ROOMS
argument_list|(
literal|"Rooms"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|ROOM
operator|.
name|iImplementation
argument_list|)
block|,
name|LOCATION
argument_list|(
literal|"Location"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
operator|new
name|OptionImplementation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|getValues
parameter_list|(
name|UserContext
name|user
parameter_list|)
block|{
name|Long
name|sessionId
init|=
name|user
operator|.
name|getCurrentAcademicSessionId
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
operator|(
name|sessionId
operator|==
literal|null
condition|?
literal|null
else|:
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
operator|)
decl_stmt|;
name|TimetableManager
name|manager
init|=
name|TimetableManager
operator|.
name|findByExternalId
argument_list|(
name|user
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|manager
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|ret
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Location
name|r
range|:
operator|(
name|List
argument_list|<
name|Location
argument_list|>
operator|)
name|Location
operator|.
name|findAllLocations
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
control|)
block|{
name|ret
operator|.
name|put
argument_list|(
name|r
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|r
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|lookupValue
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|values
init|=
name|getValues
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|e
range|:
name|values
operator|.
name|entrySet
argument_list|()
control|)
if|if
condition|(
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
return|return
name|e
operator|.
name|getKey
argument_list|()
return|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
block|,
name|LOCATIONS
argument_list|(
literal|"Locations"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|LOCATION
operator|.
name|iImplementation
argument_list|)
block|,
name|PITD
argument_list|(
literal|"Point In Time Data"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
operator|new
name|OptionImplementation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|getValues
parameter_list|(
name|UserContext
name|user
parameter_list|)
block|{
name|Long
name|sessionId
init|=
name|user
operator|.
name|getCurrentAcademicSessionId
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
operator|(
name|sessionId
operator|==
literal|null
condition|?
literal|null
else|:
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|PointInTimeData
argument_list|>
name|pitdList
init|=
name|PointInTimeData
operator|.
name|findAllSavedSuccessfullyForSession
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|ret
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PointInTimeData
name|pitd
range|:
name|pitdList
control|)
block|{
name|ret
operator|.
name|put
argument_list|(
name|pitd
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|pitd
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|ret
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|lookupValue
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|values
init|=
name|getValues
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|e
range|:
name|values
operator|.
name|entrySet
argument_list|()
control|)
if|if
condition|(
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
return|return
name|e
operator|.
name|getKey
argument_list|()
return|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
block|,
name|SESSIONS
argument_list|(
literal|"Academic Sessions"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
operator|new
name|OptionImplementation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|getValues
parameter_list|(
name|UserContext
name|user
parameter_list|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|ret
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|UserAuthority
name|a
range|:
name|user
operator|.
name|getAuthorities
argument_list|(
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|getRole
argument_list|()
argument_list|)
control|)
block|{
name|UserQualifier
name|session
init|=
name|a
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
name|ret
operator|.
name|put
argument_list|(
operator|(
name|Long
operator|)
name|session
operator|.
name|getQualifierId
argument_list|()
argument_list|,
name|session
operator|.
name|getQualifierLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|lookupValue
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
operator|(
name|Long
operator|)
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select s.uniqueId from Session s where "
operator|+
literal|"s.academicTerm || s.academicYear = :term or "
operator|+
literal|"s.academicTerm || s.academicYear || s.academicInitiative = :term"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"term"
argument_list|,
name|value
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
block|}
argument_list|)
block|,
name|DistributionType
argument_list|(
name|DistributionType
operator|.
name|class
argument_list|,
literal|false
argument_list|)
block|,
name|DistributionTypes
argument_list|(
name|DistributionType
operator|.
name|class
argument_list|,
literal|true
argument_list|)
block|,
name|DemandOfferingType
argument_list|(
name|DemandOfferingType
operator|.
name|class
argument_list|,
literal|false
argument_list|)
block|,
name|DemandOfferingTypes
argument_list|(
name|DemandOfferingType
operator|.
name|class
argument_list|,
literal|true
argument_list|)
block|,
name|OfferingConsentType
argument_list|(
name|OfferingConsentType
operator|.
name|class
argument_list|,
literal|false
argument_list|)
block|,
name|OfferingConsentTypes
argument_list|(
name|OfferingConsentType
operator|.
name|class
argument_list|,
literal|true
argument_list|)
block|,
name|CourseCreditFormat
argument_list|(
name|CourseCreditFormat
operator|.
name|class
argument_list|,
literal|false
argument_list|)
block|,
name|CourseCreditFormats
argument_list|(
name|CourseCreditFormat
operator|.
name|class
argument_list|,
literal|true
argument_list|)
block|,
name|CourseCreditType
argument_list|(
name|CourseCreditType
operator|.
name|class
argument_list|,
literal|false
argument_list|)
block|,
name|CourseCreditTypes
argument_list|(
name|CourseCreditType
operator|.
name|class
argument_list|,
literal|true
argument_list|)
block|,
name|CourseCreditUnitType
argument_list|(
name|CourseCreditUnitType
operator|.
name|class
argument_list|,
literal|false
argument_list|)
block|,
name|CourseCreditUnitTypes
argument_list|(
name|CourseCreditUnitType
operator|.
name|class
argument_list|,
literal|true
argument_list|)
block|,
name|PositionType
argument_list|(
name|PositionType
operator|.
name|class
argument_list|,
literal|false
argument_list|)
block|,
name|PositionTypes
argument_list|(
name|PositionType
operator|.
name|class
argument_list|,
literal|true
argument_list|)
block|,
name|DepartmentStatusType
argument_list|(
name|DepartmentStatusType
operator|.
name|class
argument_list|,
literal|false
argument_list|)
block|,
name|DepartmentStatusTypes
argument_list|(
name|DepartmentStatusType
operator|.
name|class
argument_list|,
literal|true
argument_list|)
block|,
name|RoomType
argument_list|(
name|RoomType
operator|.
name|class
argument_list|,
literal|false
argument_list|)
block|,
name|RoomTypes
argument_list|(
name|RoomType
operator|.
name|class
argument_list|,
literal|true
argument_list|)
block|,
name|StudentSectioningStatus
argument_list|(
name|StudentSectioningStatus
operator|.
name|class
argument_list|,
literal|false
argument_list|)
block|,
name|StudentSectioningStatuses
argument_list|(
name|StudentSectioningStatus
operator|.
name|class
argument_list|,
literal|true
argument_list|)
block|,
name|ExamType
argument_list|(
name|ExamType
operator|.
name|class
argument_list|,
literal|false
argument_list|)
block|,
name|ExamTypes
argument_list|(
name|ExamType
operator|.
name|class
argument_list|,
literal|true
argument_list|)
block|,
name|RoomFeatureType
argument_list|(
name|RoomFeatureType
operator|.
name|class
argument_list|,
literal|false
argument_list|)
block|,
name|RoomFeatureTypes
argument_list|(
name|RoomFeatureType
operator|.
name|class
argument_list|,
literal|true
argument_list|)
block|,
name|CourseType
argument_list|(
name|CourseType
operator|.
name|class
argument_list|,
literal|false
argument_list|)
block|,
name|CourseTypes
argument_list|(
name|CourseType
operator|.
name|class
argument_list|,
literal|true
argument_list|)
block|, 		;
name|String
name|iName
decl_stmt|;
name|OptionImplementation
name|iImplementation
decl_stmt|;
name|boolean
name|iAllowSelection
decl_stmt|,
name|iMultiSelect
decl_stmt|;
name|Option
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|allowSelection
parameter_list|,
name|boolean
name|multiSelect
parameter_list|,
name|OptionImplementation
name|impl
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
name|iAllowSelection
operator|=
name|allowSelection
expr_stmt|;
name|iMultiSelect
operator|=
name|multiSelect
expr_stmt|;
name|iImplementation
operator|=
name|impl
expr_stmt|;
block|}
name|Option
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|RefTableEntry
argument_list|>
name|reference
parameter_list|,
name|boolean
name|multiSelect
parameter_list|)
block|{
name|iName
operator|=
name|name
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"(?<=[^A-Z])([A-Z])"
argument_list|,
literal|" $1"
argument_list|)
expr_stmt|;
name|iAllowSelection
operator|=
literal|true
expr_stmt|;
name|iMultiSelect
operator|=
name|multiSelect
expr_stmt|;
name|iImplementation
operator|=
operator|new
name|RefTableOptions
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|text
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|boolean
name|allowSingleSelection
parameter_list|()
block|{
return|return
name|iAllowSelection
return|;
block|}
specifier|public
name|boolean
name|allowMultiSelection
parameter_list|()
block|{
return|return
name|iAllowSelection
operator|&&
name|iMultiSelect
return|;
block|}
specifier|public
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|values
parameter_list|(
name|UserContext
name|user
parameter_list|)
block|{
return|return
name|iImplementation
operator|.
name|getValues
argument_list|(
name|user
argument_list|)
return|;
block|}
specifier|public
name|Long
name|lookupValue
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|iImplementation
operator|.
name|lookupValue
argument_list|(
name|user
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
for|for
control|(
name|Flag
name|f
range|:
name|Flag
operator|.
name|values
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|f
operator|.
name|name
argument_list|()
operator|+
literal|": "
operator|+
name|f
operator|.
name|flag
argument_list|()
operator|+
literal|" ("
operator|+
name|f
operator|.
name|isSet
argument_list|(
literal|0xFF
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isSet
parameter_list|(
name|Flag
name|f
parameter_list|)
block|{
return|return
name|getType
argument_list|()
operator|!=
literal|null
operator|&&
name|f
operator|.
name|isSet
argument_list|(
name|getType
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|set
parameter_list|(
name|Flag
name|f
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|(
name|f
argument_list|)
condition|)
name|setType
argument_list|(
operator|(
name|getType
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|getType
argument_list|()
operator|)
operator|+
name|f
operator|.
name|flag
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clear
parameter_list|(
name|Flag
name|f
parameter_list|)
block|{
if|if
condition|(
name|isSet
argument_list|(
name|f
argument_list|)
condition|)
name|setType
argument_list|(
name|getType
argument_list|()
operator|-
name|f
operator|.
name|flag
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|SavedHQL
argument_list|>
name|listAll
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Flag
name|appearance
parameter_list|,
name|boolean
name|admin
parameter_list|)
block|{
if|if
condition|(
name|admin
condition|)
block|{
return|return
operator|(
name|List
argument_list|<
name|SavedHQL
argument_list|>
operator|)
operator|(
name|hibSession
operator|==
literal|null
condition|?
name|SavedHQLDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
else|:
name|hibSession
operator|)
operator|.
name|createQuery
argument_list|(
literal|"from SavedHQL q where bit_and(q.type, :flag)> 0 order by q.name"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"flag"
argument_list|,
name|appearance
operator|.
name|flag
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|(
name|List
argument_list|<
name|SavedHQL
argument_list|>
operator|)
operator|(
name|hibSession
operator|==
literal|null
condition|?
name|SavedHQLDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
else|:
name|hibSession
operator|)
operator|.
name|createQuery
argument_list|(
literal|"from SavedHQL q where bit_and(q.type, :flag)> 0 and bit_and(q.type, :admin) = 0 order by q.name"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"flag"
argument_list|,
name|appearance
operator|.
name|flag
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"admin"
argument_list|,
name|Flag
operator|.
name|ADMIN_ONLY
operator|.
name|flag
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|hasQueries
parameter_list|(
name|Flag
name|appearance
parameter_list|,
name|boolean
name|admin
parameter_list|)
block|{
if|if
condition|(
name|admin
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|SavedHQLDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(q) from SavedHQL q where bit_and(q.type, :flag)> 0"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"flag"
argument_list|,
name|appearance
operator|.
name|flag
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
operator|>
literal|0
return|;
block|}
else|else
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|SavedHQLDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(q) from SavedHQL q where bit_and(q.type, :flag)> 0 and bit_and(q.type, :admin) = 0"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"flag"
argument_list|,
name|appearance
operator|.
name|flag
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"admin"
argument_list|,
name|Flag
operator|.
name|ADMIN_ONLY
operator|.
name|flag
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
operator|>
literal|0
return|;
block|}
block|}
block|}
end_class

end_unit

