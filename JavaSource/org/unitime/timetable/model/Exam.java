begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|ObjectNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseExam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamRoomInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_class
specifier|public
class|class
name|Exam
extends|extends
name|BaseExam
implements|implements
name|Comparable
argument_list|<
name|Exam
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|Exam
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|Exam
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
specifier|public
specifier|static
specifier|final
name|int
name|sSeatingTypeNormal
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sSeatingTypeExam
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|sSeatingTypes
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"Normal"
block|,
literal|"Exam"
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sExamTypeFinal
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sExamTypeEvening
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|sExamTypes
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"Final"
block|,
literal|"Evening"
block|}
decl_stmt|;
specifier|protected
name|boolean
name|canUserEdit
parameter_list|(
name|User
name|user
parameter_list|)
block|{
comment|//admin
if|if
condition|(
name|Roles
operator|.
name|ADMIN_ROLE
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getCurrentRole
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
comment|//timetable manager
if|if
condition|(
name|Roles
operator|.
name|DEPT_SCHED_MGR_ROLE
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getCurrentRole
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|getSession
argument_list|()
operator|.
name|getStatusType
argument_list|()
operator|.
name|canExamEdit
argument_list|()
condition|)
return|return
literal|false
return|;
for|for
control|(
name|Iterator
name|i
init|=
name|getOwners
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamOwner
name|owner
init|=
operator|(
name|ExamOwner
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|canUserEdit
argument_list|(
name|user
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|//exam manager
if|if
condition|(
name|Roles
operator|.
name|EXAM_MGR_ROLE
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getCurrentRole
argument_list|()
argument_list|)
condition|)
return|return
name|getSession
argument_list|()
operator|.
name|getStatusType
argument_list|()
operator|.
name|canExamTimetable
argument_list|()
return|;
return|return
literal|false
return|;
block|}
specifier|protected
name|boolean
name|canUserView
parameter_list|(
name|User
name|user
parameter_list|)
block|{
comment|//can edit -> can view
if|if
condition|(
name|canUserEdit
argument_list|(
name|user
argument_list|)
condition|)
return|return
literal|true
return|;
comment|//admin or exam manager
if|if
condition|(
name|Roles
operator|.
name|ADMIN_ROLE
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getCurrentRole
argument_list|()
argument_list|)
operator|||
name|Roles
operator|.
name|EXAM_MGR_ROLE
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getCurrentRole
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
comment|//timetable manager or view all
if|if
condition|(
name|Roles
operator|.
name|DEPT_SCHED_MGR_ROLE
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getCurrentRole
argument_list|()
argument_list|)
operator|||
name|Roles
operator|.
name|VIEW_ALL_ROLE
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getCurrentRole
argument_list|()
argument_list|)
condition|)
return|return
name|getSession
argument_list|()
operator|.
name|getStatusType
argument_list|()
operator|.
name|canExamView
argument_list|()
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|String
name|generateName
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|ExamOwner
name|prev
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|TreeSet
argument_list|(
name|getOwners
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamOwner
name|owner
init|=
operator|(
name|ExamOwner
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|ownerObject
init|=
name|owner
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
operator|&&
name|prev
operator|.
name|getCourse
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|equals
argument_list|(
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
condition|)
block|{
comment|//same subject area
if|if
condition|(
name|prev
operator|.
name|getCourse
argument_list|()
operator|.
name|equals
argument_list|(
name|owner
operator|.
name|getCourse
argument_list|()
argument_list|)
operator|&&
name|prev
operator|.
name|getOwnerType
argument_list|()
operator|.
name|equals
argument_list|(
name|owner
operator|.
name|getOwnerType
argument_list|()
argument_list|)
condition|)
block|{
comment|//same course number
switch|switch
condition|(
name|owner
operator|.
name|getOwnerType
argument_list|()
condition|)
block|{
case|case
name|ExamOwner
operator|.
name|sOwnerTypeClass
case|:
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|ownerObject
decl_stmt|;
if|if
condition|(
name|prev
operator|.
name|getOwnerType
argument_list|()
operator|==
name|ExamOwner
operator|.
name|sOwnerTypeClass
operator|&&
operator|(
operator|(
name|Class_
operator|)
name|prev
operator|.
name|getOwnerObject
argument_list|()
operator|)
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
condition|)
name|sb
operator|.
name|append
argument_list|(
name|owner
operator|.
name|genName
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.name.sameSubpart."
operator|+
name|ExamOwner
operator|.
name|sOwnerTypes
index|[
name|owner
operator|.
name|getOwnerType
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|sb
operator|.
name|append
argument_list|(
name|owner
operator|.
name|genName
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.name.sameCourse."
operator|+
name|ExamOwner
operator|.
name|sOwnerTypes
index|[
name|owner
operator|.
name|getOwnerType
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|ExamOwner
operator|.
name|sOwnerTypeConfig
case|:
name|sb
operator|.
name|append
argument_list|(
name|owner
operator|.
name|genName
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.name.sameCourse."
operator|+
name|ExamOwner
operator|.
name|sOwnerTypes
index|[
name|owner
operator|.
name|getOwnerType
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
comment|//different course number
name|sb
operator|.
name|append
argument_list|(
name|owner
operator|.
name|genName
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.name.sameSubject."
operator|+
name|ExamOwner
operator|.
name|sOwnerTypes
index|[
name|owner
operator|.
name|getOwnerType
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//different subject area
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
name|sb
operator|.
name|append
argument_list|(
name|prev
operator|.
name|genName
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.name.diffSubject.separator"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|owner
operator|.
name|genName
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.name."
operator|+
name|ExamOwner
operator|.
name|sOwnerTypes
index|[
name|owner
operator|.
name|getOwnerType
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|prev
operator|=
name|owner
expr_stmt|;
block|}
name|String
name|suffix
init|=
operator|(
name|prev
operator|==
literal|null
condition|?
literal|""
else|:
name|prev
operator|.
name|genName
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.name.suffix"
argument_list|)
argument_list|)
operator|)
decl_stmt|;
name|int
name|limit
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.name.maxLength"
argument_list|,
literal|"100"
argument_list|)
argument_list|)
operator|-
name|suffix
operator|.
name|length
argument_list|()
decl_stmt|;
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|<=
name|limit
condition|?
name|sb
operator|.
name|toString
argument_list|()
else|:
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|limit
operator|-
literal|3
argument_list|)
operator|+
literal|"..."
operator|)
operator|+
name|suffix
return|;
block|}
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
name|String
name|name
init|=
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
return|return
name|name
return|;
return|return
name|generateName
argument_list|()
return|;
block|}
specifier|public
name|String
name|htmlLabel
parameter_list|()
block|{
return|return
name|getLabel
argument_list|()
return|;
block|}
specifier|public
name|Vector
name|getOwnerObjects
parameter_list|()
block|{
name|Vector
name|ret
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|TreeSet
argument_list|(
name|getOwners
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamOwner
name|owner
init|=
operator|(
name|ExamOwner
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|owner
operator|.
name|getOwnerObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|ExamOwner
name|firstOwner
parameter_list|()
block|{
name|ExamOwner
name|ret
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getOwners
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamOwner
name|owner
init|=
operator|(
name|ExamOwner
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
operator|||
name|ret
operator|.
name|compareTo
argument_list|(
name|owner
argument_list|)
operator|>
literal|0
condition|)
name|ret
operator|=
name|owner
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|List
name|findAll
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Integer
name|examType
parameter_list|)
block|{
return|return
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select x from Exam x where x.session.uniqueId=:sessionId and x.examType=:examType"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|examType
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|List
name|findExamsOfSubjectArea
parameter_list|(
name|Long
name|subjectAreaId
parameter_list|,
name|Integer
name|examType
parameter_list|)
block|{
return|return
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct x from Exam x inner join x.owners o where "
operator|+
literal|"o.course.subjectArea.uniqueId=:subjectAreaId and x.examType=:examType"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"subjectAreaId"
argument_list|,
name|subjectAreaId
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|examType
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|List
name|findExamsOfCourseOffering
parameter_list|(
name|Long
name|courseOfferingId
parameter_list|,
name|Integer
name|examType
parameter_list|)
block|{
return|return
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct x from Exam x inner join x.owners o where "
operator|+
literal|"o.course.uniqueId=:courseOfferingId and x.examType=:examType"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"courseOfferingId"
argument_list|,
name|courseOfferingId
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|examType
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|List
name|findExamsOfCourse
parameter_list|(
name|Long
name|subjectAreaId
parameter_list|,
name|String
name|courseNbr
parameter_list|,
name|Integer
name|examType
parameter_list|)
block|{
if|if
condition|(
name|courseNbr
operator|==
literal|null
operator|||
name|courseNbr
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
name|findExamsOfSubjectArea
argument_list|(
name|subjectAreaId
argument_list|,
name|examType
argument_list|)
return|;
return|return
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct x from Exam x inner join x.owners o where "
operator|+
literal|"o.course.subjectArea.uniqueId=:subjectAreaId and x.examType=:examType and "
operator|+
operator|(
name|courseNbr
operator|.
name|indexOf
argument_list|(
literal|'*'
argument_list|)
operator|>=
literal|0
condition|?
literal|"o.course.courseNbr like :courseNbr"
else|:
literal|"o.course.courseNbr=:courseNbr"
operator|)
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"subjectAreaId"
argument_list|,
name|subjectAreaId
argument_list|)
operator|.
name|setString
argument_list|(
literal|"courseNbr"
argument_list|,
name|courseNbr
operator|.
name|trim
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\*"
argument_list|,
literal|"%"
argument_list|)
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|examType
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
name|Set
name|getStudents
parameter_list|()
block|{
name|HashSet
name|students
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getOwners
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|students
operator|.
name|addAll
argument_list|(
operator|(
operator|(
name|ExamOwner
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getStudents
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|students
return|;
comment|/*         return new ExamDAO().getSession().createQuery(                 "select distinct e.student from " +                 "StudentClassEnrollment e inner join e.clazz c " +                 "inner join c.schedulingSubpart.instrOfferingConfig ioc " +                 "inner join e.courseOffering co "+                 "inner join co.instructionalOffering io, " +                 "Exam x inner join x.owners o "+                 "where x.uniqueId=:examId and ("+                 "(o.ownerType="+ExamOwner.sOwnerTypeCourse+" and o.ownerId=co.uniqueId) or "+                 "(o.ownerType="+ExamOwner.sOwnerTypeOffering+" and o.ownerId=io.uniqueId) or "+                 "(o.ownerType="+ExamOwner.sOwnerTypeConfig+" and o.ownerId=ioc.uniqueId) or "+                 "(o.ownerType="+ExamOwner.sOwnerTypeClass+" and o.ownerId=c.uniqueId) "+                 ")")                 .setLong("examId", getUniqueId())                 .setCacheable(true)                 .list();                 */
block|}
specifier|public
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Exam
argument_list|>
argument_list|>
name|getStudentExams
parameter_list|()
block|{
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Exam
argument_list|>
argument_list|>
name|studentExams
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Exam
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getOwners
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamOwner
name|owner
init|=
operator|(
name|ExamOwner
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|owner
operator|.
name|computeStudentExams
argument_list|(
name|studentExams
argument_list|)
expr_stmt|;
block|}
return|return
name|studentExams
return|;
block|}
specifier|public
name|Hashtable
argument_list|<
name|Assignment
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|getStudentAssignments
parameter_list|()
block|{
name|Hashtable
argument_list|<
name|Assignment
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|studentAssignments
init|=
operator|new
name|Hashtable
argument_list|<
name|Assignment
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getOwners
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamOwner
name|owner
init|=
operator|(
name|ExamOwner
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|owner
operator|.
name|computeStudentAssignments
argument_list|(
name|studentAssignments
argument_list|)
expr_stmt|;
block|}
return|return
name|studentAssignments
return|;
block|}
specifier|public
name|Hashtable
argument_list|<
name|Meeting
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|getOverlappingStudentMeetings
parameter_list|(
name|Long
name|periodId
parameter_list|)
block|{
name|Hashtable
argument_list|<
name|Meeting
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|studentMeetings
init|=
operator|new
name|Hashtable
argument_list|<
name|Meeting
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getOwners
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamOwner
name|owner
init|=
operator|(
name|ExamOwner
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|owner
operator|.
name|computeOverlappingStudentMeetings
argument_list|(
name|studentMeetings
argument_list|,
name|periodId
argument_list|)
expr_stmt|;
block|}
return|return
name|studentMeetings
return|;
block|}
specifier|public
name|int
name|countStudents
parameter_list|()
block|{
name|int
name|nrStudents
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getOwners
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|nrStudents
operator|+=
operator|(
operator|(
name|ExamOwner
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|countStudents
argument_list|()
expr_stmt|;
return|return
name|nrStudents
return|;
block|}
specifier|public
name|int
name|getLimit
parameter_list|()
block|{
name|int
name|limit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getOwners
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|limit
operator|+=
operator|(
operator|(
name|ExamOwner
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getLimit
argument_list|()
expr_stmt|;
return|return
name|limit
return|;
block|}
specifier|public
name|int
name|getSize
parameter_list|()
block|{
name|int
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getOwners
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|size
operator|+=
operator|(
operator|(
name|ExamOwner
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getSize
argument_list|()
expr_stmt|;
return|return
name|size
return|;
block|}
specifier|public
name|Set
name|effectivePreferences
parameter_list|(
name|Class
name|type
parameter_list|)
block|{
if|if
condition|(
name|DistributionPref
operator|.
name|class
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|TreeSet
name|prefs
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|getDistributionObjects
argument_list|()
operator|==
literal|null
condition|)
return|return
name|prefs
return|;
for|for
control|(
name|Iterator
name|j
init|=
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionPref
name|p
init|=
operator|(
operator|(
name|DistributionObject
operator|)
name|j
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getDistributionPref
argument_list|()
decl_stmt|;
name|prefs
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ObjectNotFoundException
name|e
parameter_list|)
block|{
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|refresh
argument_list|(
name|this
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionPref
name|p
init|=
operator|(
operator|(
name|DistributionObject
operator|)
name|j
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getDistributionPref
argument_list|()
decl_stmt|;
name|prefs
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|prefs
return|;
block|}
else|else
return|return
name|super
operator|.
name|effectivePreferences
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|public
name|Set
name|getAvailableRooms
parameter_list|()
block|{
return|return
name|Location
operator|.
name|findAllExamLocations
argument_list|(
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|getExamType
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|SubjectArea
name|firstSubjectArea
parameter_list|()
block|{
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|TreeSet
argument_list|(
name|getOwners
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamOwner
name|owner
init|=
operator|(
name|ExamOwner
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|CourseOffering
name|firstCourseOffering
parameter_list|()
block|{
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|TreeSet
argument_list|(
name|getOwners
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamOwner
name|owner
init|=
operator|(
name|ExamOwner
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
name|owner
operator|.
name|getCourse
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Department
name|firstDepartment
parameter_list|()
block|{
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|TreeSet
argument_list|(
name|getOwners
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamOwner
name|owner
init|=
operator|(
name|ExamOwner
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getDepartment
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getLabel
argument_list|()
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Exam
name|exam
parameter_list|)
block|{
name|Iterator
name|i1
init|=
operator|new
name|TreeSet
argument_list|(
name|getOwners
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
name|i2
init|=
operator|new
name|TreeSet
argument_list|(
name|exam
operator|.
name|getOwners
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i1
operator|.
name|hasNext
argument_list|()
operator|&&
name|i2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ExamOwner
name|o1
init|=
operator|(
name|ExamOwner
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExamOwner
name|o2
init|=
operator|(
name|ExamOwner
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|cmp
init|=
name|o1
operator|.
name|compareTo
argument_list|(
name|o2
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
return|return
operator|(
name|i1
operator|.
name|hasNext
argument_list|()
condition|?
literal|1
else|:
name|i2
operator|.
name|hasNext
argument_list|()
condition|?
operator|-
literal|1
else|:
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|exam
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|public
name|void
name|deleteDependentObjects
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|boolean
name|updateExam
parameter_list|)
block|{
name|boolean
name|deleted
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|getDistributionObjects
argument_list|()
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|Iterator
name|i
init|=
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|relatedObject
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|DistributionPref
name|distributionPref
init|=
name|relatedObject
operator|.
name|getDistributionPref
argument_list|()
decl_stmt|;
name|distributionPref
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|remove
argument_list|(
name|relatedObject
argument_list|)
expr_stmt|;
name|Integer
name|seqNo
init|=
name|relatedObject
operator|.
name|getSequenceNumber
argument_list|()
decl_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|relatedObject
argument_list|)
expr_stmt|;
name|deleted
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|distributionPref
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PreferenceGroup
name|owner
init|=
name|distributionPref
operator|.
name|getOwner
argument_list|()
decl_stmt|;
name|owner
operator|.
name|getPreferences
argument_list|()
operator|.
name|remove
argument_list|(
name|distributionPref
argument_list|)
expr_stmt|;
name|getPreferences
argument_list|()
operator|.
name|remove
argument_list|(
name|distributionPref
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|distributionPref
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|seqNo
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|j
init|=
name|distributionPref
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|dObj
init|=
operator|(
name|DistributionObject
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|seqNo
operator|.
name|compareTo
argument_list|(
name|dObj
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
block|{
name|dObj
operator|.
name|setSequenceNumber
argument_list|(
operator|new
name|Integer
argument_list|(
name|dObj
operator|.
name|getSequenceNumber
argument_list|()
operator|.
name|intValue
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|dObj
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|updateExam
condition|)
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|distributionPref
argument_list|)
expr_stmt|;
block|}
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|getEvent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|hibSession
operator|.
name|delete
argument_list|(
name|getEvent
argument_list|()
argument_list|)
expr_stmt|;
name|deleted
operator|=
literal|true
expr_stmt|;
name|setEvent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleted
operator|&&
name|updateExam
condition|)
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|deleteFromExams
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Integer
name|ownerType
parameter_list|,
name|Long
name|ownerId
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select o from Exam x inner join x.owners o where "
operator|+
literal|"o.ownerType=:ownerType and o.ownerId=:ownerId"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"ownerType"
argument_list|,
name|ownerType
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"ownerId"
argument_list|,
name|ownerId
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamOwner
name|owner
init|=
operator|(
name|ExamOwner
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Exam
name|exam
init|=
name|owner
operator|.
name|getExam
argument_list|()
decl_stmt|;
name|exam
operator|.
name|getOwners
argument_list|()
operator|.
name|remove
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|owner
argument_list|)
expr_stmt|;
if|if
condition|(
name|exam
operator|.
name|getOwners
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|exam
operator|.
name|deleteDependentObjects
argument_list|(
name|hibSession
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|deleteFromExams
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Class_
name|clazz
parameter_list|)
block|{
name|deleteFromExams
argument_list|(
name|hibSession
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|,
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|deleteFromExams
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|InstrOfferingConfig
name|config
parameter_list|)
block|{
name|deleteFromExams
argument_list|(
name|hibSession
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|,
name|config
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|deleteFromExams
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|InstructionalOffering
name|offering
parameter_list|)
block|{
name|deleteFromExams
argument_list|(
name|hibSession
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|,
name|offering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|deleteFromExams
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|CourseOffering
name|course
parameter_list|)
block|{
name|deleteFromExams
argument_list|(
name|hibSession
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|,
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|List
name|findAll
parameter_list|(
name|int
name|ownerType
parameter_list|,
name|Long
name|ownerId
parameter_list|)
block|{
return|return
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct x from Exam x inner join x.owners o where "
operator|+
literal|"o.ownerType=:ownerType and o.ownerId=:ownerId"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"ownerType"
argument_list|,
name|ownerType
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"ownerId"
argument_list|,
name|ownerId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|List
name|findAllRelated
parameter_list|(
name|String
name|type
parameter_list|,
name|Long
name|id
parameter_list|)
block|{
if|if
condition|(
literal|"Class_"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct x from Exam x inner join x.owners o inner join o.course co "
operator|+
literal|"inner join co.instructionalOffering io "
operator|+
literal|"inner join io.instrOfferingConfigs ioc "
operator|+
literal|"inner join ioc.schedulingSubparts ss "
operator|+
literal|"inner join ss.classes c where "
operator|+
literal|"c.uniqueId=:classId and ("
operator|+
literal|"(o.ownerType="
operator|+
name|ExamOwner
operator|.
name|sOwnerTypeCourse
operator|+
literal|" and o.ownerId=co.uniqueId) or "
operator|+
literal|"(o.ownerType="
operator|+
name|ExamOwner
operator|.
name|sOwnerTypeOffering
operator|+
literal|" and o.ownerId=io.uniqueId) or "
operator|+
literal|"(o.ownerType="
operator|+
name|ExamOwner
operator|.
name|sOwnerTypeConfig
operator|+
literal|" and o.ownerId=ioc.uniqueId) or "
operator|+
literal|"(o.ownerType="
operator|+
name|ExamOwner
operator|.
name|sOwnerTypeClass
operator|+
literal|" and o.ownerId=c.uniqueId) "
operator|+
literal|")"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"classId"
argument_list|,
name|id
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
if|else if
condition|(
literal|"SchedulingSubpart"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct x from Exam x inner join x.owners o inner join o.course co "
operator|+
literal|"inner join co.instructionalOffering io "
operator|+
literal|"inner join io.instrOfferingConfigs ioc "
operator|+
literal|"inner join ioc.schedulingSubparts ss "
operator|+
literal|"left outer join ss.classes c where "
operator|+
literal|"ss.uniqueId=:subpartId and ("
operator|+
literal|"(o.ownerType="
operator|+
name|ExamOwner
operator|.
name|sOwnerTypeCourse
operator|+
literal|" and o.ownerId=co.uniqueId) or "
operator|+
literal|"(o.ownerType="
operator|+
name|ExamOwner
operator|.
name|sOwnerTypeOffering
operator|+
literal|" and o.ownerId=io.uniqueId) or "
operator|+
literal|"(o.ownerType="
operator|+
name|ExamOwner
operator|.
name|sOwnerTypeConfig
operator|+
literal|" and o.ownerId=ioc.uniqueId) or "
operator|+
literal|"(o.ownerType="
operator|+
name|ExamOwner
operator|.
name|sOwnerTypeClass
operator|+
literal|" and o.ownerId=c.uniqueId) "
operator|+
literal|")"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"subpartId"
argument_list|,
name|id
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
if|else if
condition|(
literal|"CourseOffering"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct x from Exam x inner join x.owners o inner join o.course co "
operator|+
literal|"left outer join co.instructionalOffering io "
operator|+
literal|"left outer join io.instrOfferingConfigs ioc "
operator|+
literal|"left outer join ioc.schedulingSubparts ss "
operator|+
literal|"left outer join ss.classes c where "
operator|+
literal|"co.uniqueId=:courseOfferingId and ("
operator|+
literal|"(o.ownerType="
operator|+
name|ExamOwner
operator|.
name|sOwnerTypeCourse
operator|+
literal|" and o.ownerId=co.uniqueId) or "
operator|+
literal|"(o.ownerType="
operator|+
name|ExamOwner
operator|.
name|sOwnerTypeOffering
operator|+
literal|" and o.ownerId=io.uniqueId) or "
operator|+
literal|"(o.ownerType="
operator|+
name|ExamOwner
operator|.
name|sOwnerTypeConfig
operator|+
literal|" and o.ownerId=ioc.uniqueId) or "
operator|+
literal|"(o.ownerType="
operator|+
name|ExamOwner
operator|.
name|sOwnerTypeClass
operator|+
literal|" and o.ownerId=c.uniqueId) "
operator|+
literal|")"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"courseOfferingId"
argument_list|,
name|id
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
if|else if
condition|(
literal|"InstructionalOffering"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct x from Exam x inner join x.owners o inner join o.course co "
operator|+
literal|"inner join co.instructionalOffering io "
operator|+
literal|"left outer join io.instrOfferingConfigs ioc "
operator|+
literal|"left outer join ioc.schedulingSubparts ss "
operator|+
literal|"left outer join ss.classes c where "
operator|+
literal|"io.uniqueId=:instructionalOfferingId and ("
operator|+
literal|"(o.ownerType="
operator|+
name|ExamOwner
operator|.
name|sOwnerTypeCourse
operator|+
literal|" and o.ownerId=co.uniqueId) or "
operator|+
literal|"(o.ownerType="
operator|+
name|ExamOwner
operator|.
name|sOwnerTypeOffering
operator|+
literal|" and o.ownerId=io.uniqueId) or "
operator|+
literal|"(o.ownerType="
operator|+
name|ExamOwner
operator|.
name|sOwnerTypeConfig
operator|+
literal|" and o.ownerId=ioc.uniqueId) or "
operator|+
literal|"(o.ownerType="
operator|+
name|ExamOwner
operator|.
name|sOwnerTypeClass
operator|+
literal|" and o.ownerId=c.uniqueId) "
operator|+
literal|")"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"instructionalOfferingId"
argument_list|,
name|id
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
if|else if
condition|(
literal|"InstrOfferingConfig"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct x from Exam x inner join x.owners o inner join o.course co "
operator|+
literal|"inner join co.instructionalOffering io "
operator|+
literal|"inner join io.instrOfferingConfigs ioc "
operator|+
literal|"left outer join ioc.schedulingSubparts ss "
operator|+
literal|"left outer join ss.classes c where "
operator|+
literal|"ioc.uniqueId=:instrOfferingConfigId and ("
operator|+
literal|"(o.ownerType="
operator|+
name|ExamOwner
operator|.
name|sOwnerTypeCourse
operator|+
literal|" and o.ownerId=co.uniqueId) or "
operator|+
literal|"(o.ownerType="
operator|+
name|ExamOwner
operator|.
name|sOwnerTypeOffering
operator|+
literal|" and o.ownerId=io.uniqueId) or "
operator|+
literal|"(o.ownerType="
operator|+
name|ExamOwner
operator|.
name|sOwnerTypeConfig
operator|+
literal|" and o.ownerId=ioc.uniqueId) or "
operator|+
literal|"(o.ownerType="
operator|+
name|ExamOwner
operator|.
name|sOwnerTypeClass
operator|+
literal|" and o.ownerId=c.uniqueId) "
operator|+
literal|")"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"instrOfferingConfigId"
argument_list|,
name|id
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
if|else if
condition|(
literal|"DepartmentalInstructor"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct x from Exam x inner join x.instructors xi, DepartmentalInstructor i where "
operator|+
literal|"i.uniqueId=:instructorId and (xi.uniqueId=i.uniqueId or ("
operator|+
literal|"i.externalUniqueId is not null and i.externalUniqueId=xi.externalUniqueId))"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"instructorId"
argument_list|,
name|id
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
else|else
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported type "
operator|+
name|type
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|boolean
name|hasTimetable
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Integer
name|examType
parameter_list|)
block|{
if|if
condition|(
name|examType
operator|==
literal|null
condition|)
return|return
name|hasTimetable
argument_list|(
name|sessionId
argument_list|)
return|;
return|return
operator|(
operator|(
name|Number
operator|)
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(x) from Exam x "
operator|+
literal|"where x.session.uniqueId=:sessionId and "
operator|+
literal|"x.assignedPeriod!=null and x.examType=:examType"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
operator|>
literal|0
return|;
block|}
specifier|public
specifier|static
name|boolean
name|hasTimetable
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(x) from Exam x "
operator|+
literal|"where x.session.uniqueId=:sessionId and "
operator|+
literal|"x.assignedPeriod!=null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
operator|>
literal|0
return|;
block|}
specifier|public
specifier|static
name|boolean
name|hasEveningExams
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(p) from ExamPeriod p "
operator|+
literal|"where p.session.uniqueId=:sessionId and "
operator|+
literal|"p.examType = "
operator|+
name|sExamTypeEvening
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
operator|>
literal|0
return|;
block|}
specifier|public
specifier|static
name|boolean
name|hasFinalExams
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(p) from ExamPeriod p "
operator|+
literal|"where p.session.uniqueId=:sessionId and "
operator|+
literal|"p.examType = "
operator|+
name|sExamTypeFinal
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
operator|>
literal|0
return|;
block|}
specifier|public
specifier|static
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|findAssignedExams
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Integer
name|examType
parameter_list|)
block|{
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|ret
init|=
operator|new
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|()
decl_stmt|;
name|List
name|exams
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select x from Exam x where "
operator|+
literal|"x.session.uniqueId=:sessionId and x.assignedPeriod!=null and x.examType=:examType"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|examType
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|ExamAssignmentInfo
argument_list|(
name|exam
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|Collection
argument_list|<
name|ExamInfo
argument_list|>
name|findUnassignedExams
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Integer
name|examType
parameter_list|)
block|{
name|Vector
argument_list|<
name|ExamInfo
argument_list|>
name|ret
init|=
operator|new
name|Vector
argument_list|<
name|ExamInfo
argument_list|>
argument_list|()
decl_stmt|;
name|List
name|exams
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select x from Exam x where "
operator|+
literal|"x.session.uniqueId=:sessionId and x.assignedPeriod=null and x.examType=:examType"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|examType
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|ExamInfo
argument_list|(
name|exam
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|findAssignedExams
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Long
name|subjectAreaId
parameter_list|,
name|Integer
name|examType
parameter_list|)
block|{
if|if
condition|(
name|subjectAreaId
operator|==
literal|null
operator|||
name|subjectAreaId
operator|<
literal|0
condition|)
return|return
name|findAssignedExams
argument_list|(
name|sessionId
argument_list|,
name|examType
argument_list|)
return|;
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|ret
init|=
operator|new
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|()
decl_stmt|;
name|List
name|exams
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct x from Exam x inner join x.owners o where "
operator|+
literal|"o.course.subjectArea.uniqueId=:subjectAreaId and "
operator|+
literal|"x.examType=:examType and "
operator|+
literal|"x.session.uniqueId=:sessionId and x.assignedPeriod!=null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examType"
argument_list|,
name|examType
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"subjectAreaId"
argument_list|,
name|subjectAreaId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|ExamAssignmentInfo
argument_list|(
name|exam
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|Collection
argument_list|<
name|ExamInfo
argument_list|>
name|findUnassignedExams
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Long
name|subjectAreaId
parameter_list|,
name|Integer
name|examType
parameter_list|)
block|{
if|if
condition|(
name|subjectAreaId
operator|==
literal|null
operator|||
name|subjectAreaId
operator|<
literal|0
condition|)
return|return
name|findUnassignedExams
argument_list|(
name|sessionId
argument_list|,
name|examType
argument_list|)
return|;
name|Vector
argument_list|<
name|ExamInfo
argument_list|>
name|ret
init|=
operator|new
name|Vector
argument_list|<
name|ExamInfo
argument_list|>
argument_list|()
decl_stmt|;
name|List
name|exams
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct x from Exam x inner join x.owners o where "
operator|+
literal|"o.course.subjectArea.uniqueId=:subjectAreaId and "
operator|+
literal|"x.examType=:examType and "
operator|+
literal|"x.session.uniqueId=:sessionId and x.assignedPeriod=null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examType"
argument_list|,
name|examType
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"subjectAreaId"
argument_list|,
name|subjectAreaId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|ExamInfo
argument_list|(
name|exam
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|findAssignedExamsOfLocation
parameter_list|(
name|Long
name|locationId
parameter_list|,
name|Integer
name|examType
parameter_list|)
throws|throws
name|Exception
block|{
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|ret
init|=
operator|new
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|()
decl_stmt|;
name|List
name|exams
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct x from Exam x inner join x.assignedRooms r where "
operator|+
literal|"r.uniqueId=:locationId and x.assignedPeriod!=null and "
operator|+
literal|"x.examType=:examType"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"locationId"
argument_list|,
name|locationId
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|examType
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|ExamAssignmentInfo
argument_list|(
name|exam
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|findAssignedExamsOfInstructor
parameter_list|(
name|Long
name|instructorId
parameter_list|,
name|Integer
name|examType
parameter_list|)
throws|throws
name|Exception
block|{
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|ret
init|=
operator|new
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|()
decl_stmt|;
name|List
name|exams
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct x from Exam x inner join x.instructors i where "
operator|+
literal|"i.uniqueId=:instructorId and x.assignedPeriod!=null and "
operator|+
literal|"x.examType=:examType"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"instructorId"
argument_list|,
name|instructorId
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|examType
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|ExamAssignmentInfo
argument_list|(
name|exam
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|String
name|assign
parameter_list|(
name|ExamAssignmentInfo
name|assignment
parameter_list|,
name|String
name|managerExternalId
parameter_list|,
name|Session
name|hibSession
parameter_list|)
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|ExamAssignment
name|oldAssignment
init|=
operator|new
name|ExamAssignment
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|setAssignedPeriod
argument_list|(
name|assignment
operator|.
name|getPeriod
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|getAssignedRooms
argument_list|()
operator|==
literal|null
condition|)
name|setAssignedRooms
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|getAssignedRooms
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|ExamRoomInfo
name|room
range|:
name|assignment
operator|.
name|getRooms
argument_list|()
control|)
name|getAssignedRooms
argument_list|()
operator|.
name|add
argument_list|(
name|room
operator|.
name|getLocation
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|setAssignedPreference
argument_list|(
name|assignment
operator|.
name|getAssignedPreferenceString
argument_list|()
argument_list|)
expr_stmt|;
name|HashSet
name|otherExams
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|getConflicts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamConflict
name|conf
init|=
operator|(
name|ExamConflict
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|conf
operator|.
name|getExams
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|x
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|x
operator|.
name|equals
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|x
operator|.
name|getConflicts
argument_list|()
operator|.
name|remove
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|otherExams
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|delete
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|assignment
operator|.
name|getDirectConflicts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamAssignmentInfo
operator|.
name|DirectConflict
name|dc
init|=
operator|(
name|ExamAssignmentInfo
operator|.
name|DirectConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|dc
operator|.
name|getOtherExam
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|ExamConflict
name|conf
init|=
operator|new
name|ExamConflict
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setConflictType
argument_list|(
name|ExamConflict
operator|.
name|sConflictTypeDirect
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStudents
argument_list|(
name|getStudents
argument_list|(
name|hibSession
argument_list|,
name|dc
operator|.
name|getStudents
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNrStudents
argument_list|(
name|conf
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|getConflicts
argument_list|()
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Exam
name|other
init|=
name|dc
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getExam
argument_list|(
name|hibSession
argument_list|)
decl_stmt|;
name|other
operator|.
name|getConflicts
argument_list|()
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|otherExams
operator|.
name|add
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|assignment
operator|.
name|getBackToBackConflicts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamAssignmentInfo
operator|.
name|BackToBackConflict
name|btb
init|=
operator|(
name|ExamAssignmentInfo
operator|.
name|BackToBackConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExamConflict
name|conf
init|=
operator|new
name|ExamConflict
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setConflictType
argument_list|(
name|btb
operator|.
name|isDistance
argument_list|()
condition|?
name|ExamConflict
operator|.
name|sConflictTypeBackToBackDist
else|:
name|ExamConflict
operator|.
name|sConflictTypeBackToBack
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setDistance
argument_list|(
name|btb
operator|.
name|getDistance
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStudents
argument_list|(
name|getStudents
argument_list|(
name|hibSession
argument_list|,
name|btb
operator|.
name|getStudents
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNrStudents
argument_list|(
name|conf
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|getConflicts
argument_list|()
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Exam
name|other
init|=
name|btb
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getExam
argument_list|(
name|hibSession
argument_list|)
decl_stmt|;
name|other
operator|.
name|getConflicts
argument_list|()
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|otherExams
operator|.
name|add
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|assignment
operator|.
name|getMoreThanTwoADaysConflicts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamAssignmentInfo
operator|.
name|MoreThanTwoADayConflict
name|m2d
init|=
operator|(
name|ExamAssignmentInfo
operator|.
name|MoreThanTwoADayConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExamConflict
name|conf
init|=
operator|new
name|ExamConflict
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setConflictType
argument_list|(
name|ExamConflict
operator|.
name|sConflictTypeMoreThanTwoADay
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStudents
argument_list|(
name|getStudents
argument_list|(
name|hibSession
argument_list|,
name|m2d
operator|.
name|getStudents
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNrStudents
argument_list|(
name|conf
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|getConflicts
argument_list|()
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|m2d
operator|.
name|getOtherExams
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|otherExam
init|=
operator|(
name|Exam
operator|)
operator|(
operator|(
name|ExamInfo
operator|)
name|j
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getExam
argument_list|(
name|hibSession
argument_list|)
decl_stmt|;
name|otherExam
operator|.
name|getConflicts
argument_list|()
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|otherExams
operator|.
name|add
argument_list|(
name|otherExam
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|assignment
operator|.
name|getInstructorDirectConflicts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamAssignmentInfo
operator|.
name|DirectConflict
name|dc
init|=
operator|(
name|ExamAssignmentInfo
operator|.
name|DirectConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|dc
operator|.
name|getOtherExam
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|ExamConflict
name|conf
init|=
operator|new
name|ExamConflict
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setConflictType
argument_list|(
name|ExamConflict
operator|.
name|sConflictTypeDirect
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStudents
argument_list|(
name|getInstructors
argument_list|(
name|hibSession
argument_list|,
name|dc
operator|.
name|getStudents
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNrStudents
argument_list|(
name|conf
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|getConflicts
argument_list|()
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Exam
name|other
init|=
name|dc
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getExam
argument_list|(
name|hibSession
argument_list|)
decl_stmt|;
name|other
operator|.
name|getConflicts
argument_list|()
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|otherExams
operator|.
name|add
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|assignment
operator|.
name|getInstructorBackToBackConflicts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamAssignmentInfo
operator|.
name|BackToBackConflict
name|btb
init|=
operator|(
name|ExamAssignmentInfo
operator|.
name|BackToBackConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExamConflict
name|conf
init|=
operator|new
name|ExamConflict
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setConflictType
argument_list|(
name|btb
operator|.
name|isDistance
argument_list|()
condition|?
name|ExamConflict
operator|.
name|sConflictTypeBackToBackDist
else|:
name|ExamConflict
operator|.
name|sConflictTypeBackToBack
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setDistance
argument_list|(
name|btb
operator|.
name|getDistance
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStudents
argument_list|(
name|getInstructors
argument_list|(
name|hibSession
argument_list|,
name|btb
operator|.
name|getStudents
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNrStudents
argument_list|(
name|conf
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|getConflicts
argument_list|()
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Exam
name|other
init|=
name|btb
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getExam
argument_list|(
name|hibSession
argument_list|)
decl_stmt|;
name|other
operator|.
name|getConflicts
argument_list|()
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|otherExams
operator|.
name|add
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|assignment
operator|.
name|getInstructorMoreThanTwoADaysConflicts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamAssignmentInfo
operator|.
name|MoreThanTwoADayConflict
name|m2d
init|=
operator|(
name|ExamAssignmentInfo
operator|.
name|MoreThanTwoADayConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExamConflict
name|conf
init|=
operator|new
name|ExamConflict
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setConflictType
argument_list|(
name|ExamConflict
operator|.
name|sConflictTypeMoreThanTwoADay
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStudents
argument_list|(
name|getInstructors
argument_list|(
name|hibSession
argument_list|,
name|m2d
operator|.
name|getStudents
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNrStudents
argument_list|(
name|conf
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|getConflicts
argument_list|()
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|m2d
operator|.
name|getOtherExams
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|otherExam
init|=
operator|(
name|Exam
operator|)
operator|(
operator|(
name|ExamInfo
operator|)
name|j
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getExam
argument_list|(
name|hibSession
argument_list|)
decl_stmt|;
name|otherExam
operator|.
name|getConflicts
argument_list|()
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|otherExams
operator|.
name|add
argument_list|(
name|otherExam
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|getEvent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|hibSession
operator|.
name|delete
argument_list|(
name|getEvent
argument_list|()
argument_list|)
expr_stmt|;
name|setEvent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|Event
name|event
init|=
name|generateEvent
argument_list|(
name|EventType
operator|.
name|findByReference
argument_list|(
name|getExamType
argument_list|()
operator|==
name|Exam
operator|.
name|sExamTypeFinal
condition|?
name|EventType
operator|.
name|sEventTypeFinalExam
else|:
name|EventType
operator|.
name|sEventTypeEveningExam
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|!=
literal|null
condition|)
block|{
name|event
operator|.
name|setEventName
argument_list|(
name|assignment
operator|.
name|getExamName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setMinCapacity
argument_list|(
name|assignment
operator|.
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setMaxCapacity
argument_list|(
name|assignment
operator|.
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
name|EventContact
name|contact
init|=
name|EventContact
operator|.
name|findByExternalUniqueId
argument_list|(
name|managerExternalId
argument_list|)
decl_stmt|;
if|if
condition|(
name|contact
operator|==
literal|null
condition|)
block|{
name|TimetableManager
name|manager
init|=
name|TimetableManager
operator|.
name|findByExternalId
argument_list|(
name|managerExternalId
argument_list|)
decl_stmt|;
name|contact
operator|=
operator|new
name|EventContact
argument_list|()
expr_stmt|;
name|contact
operator|.
name|setFirstName
argument_list|(
name|manager
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setMiddleName
argument_list|(
name|manager
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setLastName
argument_list|(
name|manager
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setExternalUniqueId
argument_list|(
name|manager
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setEmailAddress
argument_list|(
name|manager
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setPhone
argument_list|(
literal|"unknown"
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|contact
argument_list|)
expr_stmt|;
block|}
name|event
operator|.
name|setMainContact
argument_list|(
name|contact
argument_list|)
expr_stmt|;
name|setEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|update
argument_list|(
name|this
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|otherExams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|hibSession
operator|.
name|update
argument_list|(
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|SubjectArea
name|subject
init|=
literal|null
decl_stmt|;
name|Department
name|dept
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|TreeSet
argument_list|(
name|getOwners
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamOwner
name|owner
init|=
operator|(
name|ExamOwner
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|subject
operator|=
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|dept
operator|=
name|subject
operator|.
name|getDepartment
argument_list|()
expr_stmt|;
break|break;
block|}
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|TimetableManager
operator|.
name|findByExternalId
argument_list|(
name|managerExternalId
argument_list|)
argument_list|,
name|getSession
argument_list|()
argument_list|,
name|this
argument_list|,
name|assignment
operator|.
name|getExamName
argument_list|()
operator|+
literal|" ("
operator|+
operator|(
name|oldAssignment
operator|.
name|getPeriod
argument_list|()
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|oldAssignment
operator|.
name|getPeriodAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|oldAssignment
operator|.
name|getRoomsName
argument_list|(
literal|", "
argument_list|)
operator|)
operator|+
literal|"&rarr; "
operator|+
name|assignment
operator|.
name|getPeriodAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|assignment
operator|.
name|getRoomsName
argument_list|(
literal|", "
argument_list|)
operator|+
literal|")"
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|EXAM_INFO
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|ASSIGN
argument_list|,
name|subject
argument_list|,
name|dept
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|"Assignment of "
operator|+
name|assignment
operator|.
name|getExamName
argument_list|()
operator|+
literal|" to "
operator|+
name|assignment
operator|.
name|getPeriodAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|assignment
operator|.
name|getRoomsName
argument_list|(
literal|", "
argument_list|)
operator|+
literal|" failed, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
return|;
block|}
block|}
specifier|public
name|String
name|unassign
parameter_list|(
name|String
name|managerExternalId
parameter_list|,
name|Session
name|hibSession
parameter_list|)
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|ExamAssignment
name|oldAssignment
init|=
operator|new
name|ExamAssignment
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|setAssignedPeriod
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|getAssignedRooms
argument_list|()
operator|==
literal|null
condition|)
name|setAssignedRooms
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|getAssignedRooms
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|setAssignedPreference
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|HashSet
name|otherExams
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|getConflicts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamConflict
name|conf
init|=
operator|(
name|ExamConflict
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|conf
operator|.
name|getExams
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|x
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|x
operator|.
name|equals
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|x
operator|.
name|getConflicts
argument_list|()
operator|.
name|remove
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|otherExams
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|delete
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|getEvent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|hibSession
operator|.
name|delete
argument_list|(
name|getEvent
argument_list|()
argument_list|)
expr_stmt|;
name|setEvent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|update
argument_list|(
name|this
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|otherExams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|hibSession
operator|.
name|update
argument_list|(
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|SubjectArea
name|subject
init|=
literal|null
decl_stmt|;
name|Department
name|dept
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|TreeSet
argument_list|(
name|getOwners
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamOwner
name|owner
init|=
operator|(
name|ExamOwner
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|subject
operator|=
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|dept
operator|=
name|subject
operator|.
name|getDepartment
argument_list|()
expr_stmt|;
break|break;
block|}
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|TimetableManager
operator|.
name|findByExternalId
argument_list|(
name|managerExternalId
argument_list|)
argument_list|,
name|getSession
argument_list|()
argument_list|,
name|this
argument_list|,
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
operator|(
name|oldAssignment
operator|.
name|getPeriod
argument_list|()
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|oldAssignment
operator|.
name|getPeriodAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|oldAssignment
operator|.
name|getRoomsName
argument_list|(
literal|", "
argument_list|)
operator|)
operator|+
literal|"&rarr; N/A)"
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|EXAM_INFO
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|UNASSIGN
argument_list|,
name|subject
argument_list|,
name|dept
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|"Unassignment of "
operator|+
name|getName
argument_list|()
operator|+
literal|" failed, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
return|;
block|}
block|}
specifier|protected
name|HashSet
name|getStudents
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Collection
name|studentIds
parameter_list|)
block|{
name|HashSet
name|students
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|studentIds
operator|==
literal|null
operator|||
name|studentIds
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|students
return|;
for|for
control|(
name|Iterator
name|i
init|=
name|studentIds
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Student
name|student
init|=
operator|new
name|StudentDAO
argument_list|()
operator|.
name|get
argument_list|(
name|studentId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|!=
literal|null
condition|)
name|students
operator|.
name|add
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
return|return
name|students
return|;
block|}
specifier|protected
name|HashSet
name|getInstructors
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Collection
name|instructorIds
parameter_list|)
block|{
name|HashSet
name|instructors
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|instructorIds
operator|==
literal|null
operator|||
name|instructorIds
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|instructors
return|;
for|for
control|(
name|Iterator
name|i
init|=
name|instructorIds
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Long
name|instructorId
init|=
operator|(
name|Long
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|DepartmentalInstructor
name|instructor
init|=
operator|new
name|DepartmentalInstructorDAO
argument_list|()
operator|.
name|get
argument_list|(
name|instructorId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructor
operator|!=
literal|null
condition|)
name|instructors
operator|.
name|add
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
block|}
return|return
name|instructors
return|;
block|}
specifier|public
name|Event
name|generateEvent
parameter_list|(
name|EventType
name|eventType
parameter_list|,
name|boolean
name|createNoRoomMeetings
parameter_list|)
block|{
name|ExamPeriod
name|period
init|=
name|getAssignedPeriod
argument_list|()
decl_stmt|;
if|if
condition|(
name|period
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Event
name|event
init|=
operator|new
name|Event
argument_list|()
decl_stmt|;
name|event
operator|.
name|setEventType
argument_list|(
name|eventType
argument_list|)
expr_stmt|;
name|event
operator|.
name|setRelatedCourses
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getOwners
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamOwner
name|owner
init|=
operator|(
name|ExamOwner
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|RelatedCourseInfo
name|courseInfo
init|=
operator|new
name|RelatedCourseInfo
argument_list|()
decl_stmt|;
name|courseInfo
operator|.
name|setOwnerId
argument_list|(
name|owner
operator|.
name|getOwnerId
argument_list|()
argument_list|)
expr_stmt|;
name|courseInfo
operator|.
name|setOwnerType
argument_list|(
name|owner
operator|.
name|getOwnerType
argument_list|()
argument_list|)
expr_stmt|;
name|courseInfo
operator|.
name|setCourse
argument_list|(
name|owner
operator|.
name|getCourse
argument_list|()
argument_list|)
expr_stmt|;
name|courseInfo
operator|.
name|setEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|event
operator|.
name|getRelatedCourses
argument_list|()
operator|.
name|add
argument_list|(
name|courseInfo
argument_list|)
expr_stmt|;
block|}
name|event
operator|.
name|setMeetings
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|created
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getAssignedRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|location
operator|.
name|getPermanentId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Meeting
name|m
init|=
operator|new
name|Meeting
argument_list|()
decl_stmt|;
name|m
operator|.
name|setEventType
argument_list|(
name|eventType
argument_list|)
expr_stmt|;
name|m
operator|.
name|setMeetingDate
argument_list|(
name|period
operator|.
name|getStartDate
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setStartPeriod
argument_list|(
name|period
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setStartOffset
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|m
operator|.
name|setStopPeriod
argument_list|(
name|period
operator|.
name|getStartSlot
argument_list|()
operator|+
name|period
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setStopOffset
argument_list|(
name|getLength
argument_list|()
operator|-
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|period
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setClassCanOverride
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m
operator|.
name|setLocationPermanentId
argument_list|(
name|location
operator|.
name|getPermanentId
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setApprovedDate
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|created
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|created
operator|&&
name|createNoRoomMeetings
condition|)
block|{
name|Meeting
name|m
init|=
operator|new
name|Meeting
argument_list|()
decl_stmt|;
name|m
operator|.
name|setEventType
argument_list|(
name|eventType
argument_list|)
expr_stmt|;
name|m
operator|.
name|setMeetingDate
argument_list|(
name|period
operator|.
name|getStartDate
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setStartPeriod
argument_list|(
name|period
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setStartOffset
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|m
operator|.
name|setStopPeriod
argument_list|(
name|period
operator|.
name|getStartSlot
argument_list|()
operator|+
name|period
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setStopOffset
argument_list|(
name|getLength
argument_list|()
operator|-
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|period
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setClassCanOverride
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m
operator|.
name|setLocationPermanentId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|m
operator|.
name|setApprovedDate
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
name|event
return|;
block|}
specifier|public
name|ExamPeriod
name|getAveragePeriod
parameter_list|()
block|{
return|return
name|ExamPeriod
operator|.
name|findByIndex
argument_list|(
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|getExamType
argument_list|()
argument_list|,
name|getAvgPeriod
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Exam
name|findByIdRolledForwardFrom
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Long
name|uniqueIdRolledForwardFrom
parameter_list|)
block|{
return|return
operator|(
name|Exam
operator|)
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e from Exam e where e.session.uniqueId=:sessionId and e.uniqueIdRolledForwardFrom=:uniqueIdRolledForwardFrom"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"uniqueIdRolledForwardFrom"
argument_list|,
name|uniqueIdRolledForwardFrom
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|public
name|void
name|generateDefaultPreferences
parameter_list|(
name|boolean
name|override
parameter_list|)
block|{
name|Set
name|allPeriods
init|=
name|ExamPeriod
operator|.
name|findAll
argument_list|(
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|getExamType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|getPreferences
argument_list|()
operator|==
literal|null
condition|)
name|setPreferences
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
comment|//Prefer overlapping period for evening classes
name|PreferenceLevel
name|eveningPref
init|=
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"exam."
operator|+
operator|(
name|getExamType
argument_list|()
operator|==
name|Exam
operator|.
name|sExamTypeEvening
condition|?
literal|"evening"
else|:
literal|"final"
operator|)
operator|+
literal|".defaultPrefs.eveningClasses.pref"
argument_list|,
operator|(
name|getExamType
argument_list|()
operator|==
name|Exam
operator|.
name|sExamTypeEvening
condition|?
name|PreferenceLevel
operator|.
name|sNeutral
else|:
name|PreferenceLevel
operator|.
name|sRequired
operator|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|eveningPref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|&&
operator|(
name|override
operator|||
name|getPreferences
argument_list|(
name|ExamPeriodPref
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|int
name|firstEveningPeriod
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"exam."
operator|+
operator|(
name|getExamType
argument_list|()
operator|==
name|Exam
operator|.
name|sExamTypeEvening
condition|?
literal|"evening"
else|:
literal|"final"
operator|)
operator|+
literal|".defaultPrefs.eveningClasses.firstEveningPeriod"
argument_list|,
literal|"216"
argument_list|)
argument_list|)
decl_stmt|;
comment|//6pm
name|HashSet
argument_list|<
name|ExamPeriod
argument_list|>
name|periods
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getOwners
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamOwner
name|owner
init|=
operator|(
name|ExamOwner
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ExamOwner
operator|.
name|sOwnerTypeClass
operator|!=
name|owner
operator|.
name|getOwnerType
argument_list|()
condition|)
continue|continue;
name|Event
name|event
init|=
name|Event
operator|.
name|findClassEvent
argument_list|(
name|owner
operator|.
name|getOwnerId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|Iterator
name|j
init|=
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|meeting
operator|.
name|getStartPeriod
argument_list|()
operator|<
name|firstEveningPeriod
condition|)
continue|continue;
for|for
control|(
name|Iterator
name|k
init|=
name|allPeriods
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|period
operator|.
name|weakOverlap
argument_list|(
name|meeting
argument_list|)
condition|)
name|periods
operator|.
name|add
argument_list|(
name|period
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|periods
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|getPreferences
argument_list|(
name|ExamPeriodPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriodPref
name|pref
init|=
operator|(
name|ExamPeriodPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|periods
operator|.
name|contains
argument_list|(
name|pref
operator|.
name|getExamPeriod
argument_list|()
argument_list|)
condition|)
block|{
name|periods
operator|.
name|remove
argument_list|(
name|pref
operator|.
name|getExamPeriod
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|equals
argument_list|(
name|eveningPref
argument_list|)
condition|)
block|{
name|pref
operator|.
name|setPrefLevel
argument_list|(
name|eveningPref
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|getPreferences
argument_list|()
operator|.
name|remove
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ExamPeriod
name|period
range|:
name|periods
control|)
block|{
name|ExamPeriodPref
name|pref
init|=
operator|new
name|ExamPeriodPref
argument_list|()
decl_stmt|;
name|pref
operator|.
name|setPrefLevel
argument_list|(
name|eveningPref
argument_list|)
expr_stmt|;
name|pref
operator|.
name|setOwner
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|pref
operator|.
name|setExamPeriod
argument_list|(
name|period
argument_list|)
expr_stmt|;
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//Prefer original room
name|PreferenceLevel
name|originalPref
init|=
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"exam."
operator|+
operator|(
name|getExamType
argument_list|()
operator|==
name|Exam
operator|.
name|sExamTypeEvening
condition|?
literal|"evening"
else|:
literal|"final"
operator|)
operator|+
literal|".defaultPrefs.originalRoom.pref"
argument_list|,
operator|(
name|getExamType
argument_list|()
operator|==
name|Exam
operator|.
name|sExamTypeEvening
condition|?
name|PreferenceLevel
operator|.
name|sNeutral
else|:
name|PreferenceLevel
operator|.
name|sStronglyPreferred
operator|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|originalPref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|&&
operator|(
name|override
operator|||
name|getPreferences
argument_list|(
name|RoomPref
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|HashSet
argument_list|<
name|Location
argument_list|>
name|locations
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getOwners
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamOwner
name|owner
init|=
operator|(
name|ExamOwner
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ExamOwner
operator|.
name|sOwnerTypeClass
operator|!=
name|owner
operator|.
name|getOwnerType
argument_list|()
condition|)
continue|continue;
name|Event
name|event
init|=
name|Event
operator|.
name|findClassEvent
argument_list|(
name|owner
operator|.
name|getOwnerId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|Iterator
name|j
init|=
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|meeting
operator|.
name|getLocation
argument_list|()
operator|.
name|isExamEnabled
argument_list|(
name|getExamType
argument_list|()
argument_list|)
condition|)
name|locations
operator|.
name|add
argument_list|(
name|meeting
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|locations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|getPreferences
argument_list|(
name|RoomPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomPref
name|pref
init|=
operator|(
name|RoomPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|locations
operator|.
name|contains
argument_list|(
name|pref
operator|.
name|getRoom
argument_list|()
argument_list|)
condition|)
block|{
name|locations
operator|.
name|remove
argument_list|(
name|pref
operator|.
name|getRoom
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|equals
argument_list|(
name|originalPref
argument_list|)
condition|)
block|{
name|pref
operator|.
name|setPrefLevel
argument_list|(
name|originalPref
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|getPreferences
argument_list|()
operator|.
name|remove
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Location
name|location
range|:
name|locations
control|)
block|{
name|RoomPref
name|pref
init|=
operator|new
name|RoomPref
argument_list|()
decl_stmt|;
name|pref
operator|.
name|setPrefLevel
argument_list|(
name|originalPref
argument_list|)
expr_stmt|;
name|pref
operator|.
name|setOwner
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|pref
operator|.
name|setRoom
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

