begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|criterion
operator|.
name|Restrictions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseExternalBuilding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExternalBuildingDAO
import|;
end_import

begin_class
specifier|public
class|class
name|ExternalBuilding
extends|extends
name|BaseExternalBuilding
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|ExternalBuilding
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|ExternalBuilding
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Constructor for required fields 	 */
specifier|public
name|ExternalBuilding
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
name|session
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|abbreviation
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|,
name|session
argument_list|,
name|abbreviation
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
comment|/** 	 * Get External Buildings for a session 	 * @param sessionId 	 * @return Hashtable 	 */
specifier|public
specifier|static
name|Hashtable
name|getBuildings
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|List
name|bldgs
init|=
operator|(
operator|new
name|ExternalBuildingDAO
argument_list|()
operator|)
operator|.
name|getQuery
argument_list|(
literal|"from ExternalBuilding as b "
operator|+
literal|"where b.session.uniqueId = "
operator|+
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|Hashtable
name|buildings
init|=
operator|new
name|Hashtable
argument_list|(
operator|(
name|int
operator|)
operator|(
name|bldgs
operator|.
name|size
argument_list|()
operator|*
literal|1.25
operator|)
argument_list|)
decl_stmt|;
name|Iterator
name|l
init|=
name|bldgs
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|l
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ExternalBuilding
name|bldg
init|=
operator|(
name|ExternalBuilding
operator|)
name|l
operator|.
name|next
argument_list|()
decl_stmt|;
name|buildings
operator|.
name|put
argument_list|(
name|bldg
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|bldg
argument_list|)
expr_stmt|;
block|}
return|return
name|buildings
return|;
block|}
specifier|public
specifier|static
name|ExternalBuilding
name|findExternalBuildingForSession
parameter_list|(
name|String
name|externalUniqueId
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|ExternalBuildingDAO
name|bDao
init|=
operator|new
name|ExternalBuildingDAO
argument_list|()
decl_stmt|;
name|List
name|extBldgs
init|=
name|bDao
operator|.
name|getSession
argument_list|()
operator|.
name|createCriteria
argument_list|(
name|ExternalBuilding
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
name|Restrictions
operator|.
name|eq
argument_list|(
literal|"externalUniqueId"
argument_list|,
name|externalUniqueId
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Restrictions
operator|.
name|eq
argument_list|(
literal|"session.uniqueId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|extBldgs
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
operator|(
operator|(
name|ExternalBuilding
operator|)
name|extBldgs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
return|;
block|}
return|return
operator|(
literal|null
operator|)
return|;
block|}
comment|/** 	 * Retrieve an external building for a given abbreviation and academic session 	 * @param sessionId 	 * @param bldgAbbr 	 * @return null if no match found 	 */
specifier|public
specifier|static
name|ExternalBuilding
name|findByAbbv
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|String
name|bldgAbbr
parameter_list|)
block|{
name|ExternalBuildingDAO
name|bldgDAO
init|=
operator|new
name|ExternalBuildingDAO
argument_list|()
decl_stmt|;
name|List
name|bldgs
init|=
name|bldgDAO
operator|.
name|getSession
argument_list|()
operator|.
name|createCriteria
argument_list|(
name|ExternalBuilding
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
name|Restrictions
operator|.
name|eq
argument_list|(
literal|"session.uniqueId"
argument_list|,
name|sessionId
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Restrictions
operator|.
name|eq
argument_list|(
literal|"abbreviation"
argument_list|,
name|bldgAbbr
argument_list|)
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|bldgs
operator|==
literal|null
operator|||
name|bldgs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
return|return
operator|(
name|ExternalBuilding
operator|)
name|bldgs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/** 	 * Retrieve an external room 	 * @param roomNbr 	 * @return null if no match found 	 */
specifier|public
name|ExternalRoom
name|findRoom
parameter_list|(
name|String
name|roomNbr
parameter_list|)
block|{
name|ExternalRoom
name|room
init|=
literal|null
decl_stmt|;
name|Iterator
name|r
init|=
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|r
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ExternalRoom
name|rm
init|=
operator|(
name|ExternalRoom
operator|)
name|r
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|roomNbr
operator|.
name|trim
argument_list|()
operator|)
operator|.
name|equalsIgnoreCase
argument_list|(
name|rm
operator|.
name|getRoomNumber
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|room
operator|=
name|rm
expr_stmt|;
break|break;
block|}
block|}
return|return
name|room
return|;
block|}
block|}
end_class

end_unit

