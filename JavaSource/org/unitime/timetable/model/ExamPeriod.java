begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|RoomAvailabilityInterface
operator|.
name|TimeBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseExamPeriod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|EventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamPeriodDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_class
specifier|public
class|class
name|ExamPeriod
extends|extends
name|BaseExamPeriod
implements|implements
name|Comparable
argument_list|<
name|ExamPeriod
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|ExamPeriod
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|ExamPeriod
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
specifier|public
specifier|static
name|String
name|PERIOD_ATTR_NAME
init|=
literal|"periodList"
decl_stmt|;
specifier|public
name|Date
name|getStartDate
parameter_list|()
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|getSession
argument_list|()
operator|.
name|getExamBeginDate
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|getDateOffset
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|c
operator|.
name|getTime
argument_list|()
return|;
block|}
specifier|public
name|void
name|setStartDate
parameter_list|(
name|Date
name|startDate
parameter_list|)
block|{
name|long
name|diff
init|=
name|startDate
operator|.
name|getTime
argument_list|()
operator|-
name|getSession
argument_list|()
operator|.
name|getExamBeginDate
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|setDateOffset
argument_list|(
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|diff
operator|/
operator|(
literal|1000.0
operator|*
literal|60
operator|*
literal|60
operator|*
literal|24
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getStartHour
parameter_list|()
block|{
return|return
operator|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|getStartSlot
argument_list|()
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
literal|60
return|;
block|}
specifier|public
name|int
name|getStartMinute
parameter_list|()
block|{
return|return
operator|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|getStartSlot
argument_list|()
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|%
literal|60
return|;
block|}
specifier|public
name|Date
name|getStartTime
parameter_list|()
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|getSession
argument_list|()
operator|.
name|getExamBeginDate
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|getDateOffset
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR
argument_list|,
name|getStartHour
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|getStartMinute
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|c
operator|.
name|getTime
argument_list|()
return|;
block|}
specifier|public
name|int
name|getEndSlot
parameter_list|()
block|{
return|return
name|getStartSlot
argument_list|()
operator|+
name|getLength
argument_list|()
return|;
block|}
specifier|public
name|int
name|getEndHour
parameter_list|()
block|{
return|return
operator|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|getEndSlot
argument_list|()
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
literal|60
return|;
block|}
specifier|public
name|int
name|getEndMinute
parameter_list|()
block|{
return|return
operator|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|getEndSlot
argument_list|()
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|%
literal|60
return|;
block|}
specifier|public
name|Date
name|getEndTime
parameter_list|()
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|getSession
argument_list|()
operator|.
name|getExamBeginDate
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|getDateOffset
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR
argument_list|,
name|getEndHour
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|getEndMinute
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|c
operator|.
name|getTime
argument_list|()
return|;
block|}
specifier|public
name|String
name|getStartDateLabel
parameter_list|()
block|{
return|return
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE MM/dd"
argument_list|)
operator|.
name|format
argument_list|(
name|getStartDate
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getStartTimeLabel
parameter_list|()
block|{
name|int
name|min
init|=
name|getStartSlot
argument_list|()
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
decl_stmt|;
return|return
name|Constants
operator|.
name|toTime
argument_list|(
name|min
argument_list|)
return|;
block|}
specifier|public
name|String
name|getStartTimeLabel
parameter_list|(
name|int
name|printOffset
parameter_list|)
block|{
name|int
name|min
init|=
name|getStartSlot
argument_list|()
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|+
name|printOffset
decl_stmt|;
return|return
name|Constants
operator|.
name|toTime
argument_list|(
name|min
argument_list|)
return|;
block|}
specifier|public
name|String
name|getEndTimeLabel
parameter_list|()
block|{
name|int
name|min
init|=
operator|(
name|getStartSlot
argument_list|()
operator|+
name|getLength
argument_list|()
operator|)
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
decl_stmt|;
return|return
name|Constants
operator|.
name|toTime
argument_list|(
name|min
argument_list|)
return|;
block|}
specifier|public
name|String
name|getEndTimeLabel
parameter_list|(
name|int
name|length
parameter_list|,
name|int
name|printOffset
parameter_list|)
block|{
name|int
name|min
init|=
name|getStartSlot
argument_list|()
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|+
name|length
operator|+
name|printOffset
decl_stmt|;
return|return
name|Constants
operator|.
name|toTime
argument_list|(
name|min
argument_list|)
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|getStartDateLabel
argument_list|()
operator|+
literal|" "
operator|+
name|getStartTimeLabel
argument_list|()
operator|+
literal|" - "
operator|+
name|getEndTimeLabel
argument_list|()
return|;
block|}
specifier|public
name|String
name|getAbbreviation
parameter_list|()
block|{
return|return
name|getStartDateLabel
argument_list|()
operator|+
literal|" "
operator|+
name|getStartTimeLabel
argument_list|()
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|ExamPeriod
name|period
parameter_list|)
block|{
name|int
name|cmp
init|=
name|getExamType
argument_list|()
operator|.
name|compareTo
argument_list|(
name|period
operator|.
name|getExamType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|getDateOffset
argument_list|()
operator|.
name|compareTo
argument_list|(
name|period
operator|.
name|getDateOffset
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|getStartSlot
argument_list|()
operator|.
name|compareTo
argument_list|(
name|period
operator|.
name|getStartSlot
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TreeSet
name|findAll
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|ExamType
name|type
parameter_list|)
block|{
return|return
name|findAll
argument_list|(
name|sessionId
argument_list|,
name|type
operator|==
literal|null
condition|?
literal|null
else|:
name|type
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TreeSet
name|findAll
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Long
name|examTypeId
parameter_list|)
block|{
name|TreeSet
name|ret
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|examTypeId
operator|==
literal|null
condition|)
name|ret
operator|.
name|addAll
argument_list|(
operator|new
name|ExamPeriodDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select ep from ExamPeriod ep where ep.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|ret
operator|.
name|addAll
argument_list|(
operator|new
name|ExamPeriodDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select ep from ExamPeriod ep where ep.session.uniqueId=:sessionId and ep.examType.uniqueId=:typeId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"typeId"
argument_list|,
name|examTypeId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|ExamPeriod
name|findByDateStart
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|int
name|dateOffset
parameter_list|,
name|int
name|startSlot
parameter_list|)
block|{
return|return
operator|(
name|ExamPeriod
operator|)
operator|new
name|ExamPeriodDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select ep from ExamPeriod ep where "
operator|+
literal|"ep.session.uniqueId=:sessionId and ep.dateOffset=:dateOffset and ep.startSlot=:startSlot"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"dateOffset"
argument_list|,
name|dateOffset
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"startSlot"
argument_list|,
name|startSlot
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|ExamPeriod
name|findByIndex
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|ExamType
name|type
parameter_list|,
name|Integer
name|idx
parameter_list|)
block|{
if|if
condition|(
name|idx
operator|==
literal|null
operator|||
name|idx
operator|<
literal|0
condition|)
return|return
literal|null
return|;
name|int
name|x
init|=
literal|0
decl_stmt|;
name|TreeSet
name|periods
init|=
name|findAll
argument_list|(
name|sessionId
argument_list|,
name|type
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|periods
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|==
name|idx
condition|)
return|return
name|period
return|;
block|}
return|return
operator|(
name|periods
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|(
name|ExamPeriod
operator|)
name|periods
operator|.
name|last
argument_list|()
operator|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getAbbreviation
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isBackToBack
parameter_list|(
name|ExamPeriod
name|period
parameter_list|,
name|boolean
name|isDayBreakBackToBack
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isDayBreakBackToBack
operator|&&
operator|!
name|period
operator|.
name|getDateOffset
argument_list|()
operator|.
name|equals
argument_list|(
name|getDateOffset
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
for|for
control|(
name|Iterator
name|i
init|=
name|findAll
argument_list|(
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|getExamType
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|p
init|=
operator|(
name|ExamPeriod
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|compareTo
argument_list|(
name|p
argument_list|)
operator|<
literal|0
operator|&&
name|p
operator|.
name|compareTo
argument_list|(
name|period
argument_list|)
operator|<
literal|0
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|compareTo
argument_list|(
name|p
argument_list|)
operator|>
literal|0
operator|&&
name|p
operator|.
name|compareTo
argument_list|(
name|period
argument_list|)
operator|>
literal|0
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|overlap
parameter_list|(
name|Assignment
name|assignment
parameter_list|)
block|{
return|return
name|overlap
argument_list|(
name|assignment
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.eventConflicts.travelTime.classEvent"
argument_list|,
literal|"6"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|overlap
parameter_list|(
name|Assignment
name|assignment
parameter_list|,
name|int
name|nrTravelSlots
parameter_list|)
block|{
comment|//check date pattern
name|DatePattern
name|dp
init|=
name|assignment
operator|.
name|getDatePattern
argument_list|()
decl_stmt|;
name|int
name|dpIndex
init|=
name|getDateOffset
argument_list|()
operator|-
name|getSession
argument_list|()
operator|.
name|getExamBeginOffset
argument_list|()
operator|-
operator|(
name|dp
operator|.
name|getOffset
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|dp
operator|.
name|getOffset
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|dp
operator|.
name|getPattern
argument_list|()
operator|==
literal|null
operator|||
name|dpIndex
operator|<
literal|0
operator|||
name|dpIndex
operator|>=
name|dp
operator|.
name|getPattern
argument_list|()
operator|.
name|length
argument_list|()
operator|||
name|dp
operator|.
name|getPattern
argument_list|()
operator|.
name|charAt
argument_list|(
name|dpIndex
argument_list|)
operator|!=
literal|'1'
condition|)
return|return
literal|false
return|;
comment|//check day of week
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|getSession
argument_list|()
operator|.
name|getExamBeginDate
argument_list|()
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|getDateOffset
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
if|if
condition|(
operator|(
name|assignment
operator|.
name|getDays
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_MON
index|]
operator|)
operator|==
literal|0
condition|)
return|return
literal|false
return|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
if|if
condition|(
operator|(
name|assignment
operator|.
name|getDays
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_TUE
index|]
operator|)
operator|==
literal|0
condition|)
return|return
literal|false
return|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
if|if
condition|(
operator|(
name|assignment
operator|.
name|getDays
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_WED
index|]
operator|)
operator|==
literal|0
condition|)
return|return
literal|false
return|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
if|if
condition|(
operator|(
name|assignment
operator|.
name|getDays
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_THU
index|]
operator|)
operator|==
literal|0
condition|)
return|return
literal|false
return|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
if|if
condition|(
operator|(
name|assignment
operator|.
name|getDays
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_FRI
index|]
operator|)
operator|==
literal|0
condition|)
return|return
literal|false
return|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
if|if
condition|(
operator|(
name|assignment
operator|.
name|getDays
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SAT
index|]
operator|)
operator|==
literal|0
condition|)
return|return
literal|false
return|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
if|if
condition|(
operator|(
name|assignment
operator|.
name|getDays
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SUN
index|]
operator|)
operator|==
literal|0
condition|)
return|return
literal|false
return|;
break|break;
block|}
comment|//check time
return|return
name|getStartSlot
argument_list|()
operator|-
name|nrTravelSlots
operator|<
name|assignment
operator|.
name|getStartSlot
argument_list|()
operator|+
name|assignment
operator|.
name|getSlotPerMtg
argument_list|()
operator|&&
name|assignment
operator|.
name|getStartSlot
argument_list|()
operator|<
name|getStartSlot
argument_list|()
operator|+
name|getLength
argument_list|()
operator|+
name|nrTravelSlots
return|;
block|}
specifier|public
name|boolean
name|overlap
parameter_list|(
name|Meeting
name|meeting
parameter_list|)
block|{
return|return
name|overlap
argument_list|(
name|meeting
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.eventConflicts.travelTime.classEvent"
argument_list|,
literal|"6"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|overlap
parameter_list|(
name|Meeting
name|meeting
parameter_list|,
name|int
name|nrTravelSlots
parameter_list|)
block|{
if|if
condition|(
operator|!
name|meeting
operator|.
name|getMeetingDate
argument_list|()
operator|.
name|equals
argument_list|(
name|getStartDate
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
name|getStartSlot
argument_list|()
operator|-
name|nrTravelSlots
operator|<
name|meeting
operator|.
name|getStopPeriod
argument_list|()
operator|&&
name|meeting
operator|.
name|getStartPeriod
argument_list|()
operator|<
name|getStartSlot
argument_list|()
operator|+
name|getLength
argument_list|()
operator|+
name|nrTravelSlots
return|;
block|}
specifier|public
name|List
argument_list|<
name|Meeting
argument_list|>
name|findOverlappingClassMeetings
parameter_list|()
block|{
return|return
name|findOverlappingClassMeetings
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.eventConflicts.travelTime.classEvent"
argument_list|,
literal|"6"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|Meeting
argument_list|>
name|findOverlappingClassMeetings
parameter_list|(
name|int
name|nrTravelSlots
parameter_list|)
block|{
return|return
operator|new
name|ExamPeriodDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select m from ClassEvent e inner join e.meetings m where "
operator|+
literal|"m.meetingDate=:startDate and m.startPeriod< :endSlot and m.stopPeriod> :startSlot"
argument_list|)
operator|.
name|setDate
argument_list|(
literal|"startDate"
argument_list|,
name|getStartDate
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"startSlot"
argument_list|,
name|getStartSlot
argument_list|()
operator|-
name|nrTravelSlots
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"endSlot"
argument_list|,
name|getEndSlot
argument_list|()
operator|+
name|nrTravelSlots
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|Meeting
argument_list|>
name|findOverlappingClassMeetings
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
return|return
name|findOverlappingClassMeetings
argument_list|(
name|classId
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.eventConflicts.travelTime.classEvent"
argument_list|,
literal|"6"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|Meeting
argument_list|>
name|findOverlappingClassMeetings
parameter_list|(
name|Long
name|classId
parameter_list|,
name|int
name|nrTravelSlots
parameter_list|)
block|{
return|return
operator|new
name|ExamPeriodDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select m from ClassEvent e inner join e.meetings m where "
operator|+
literal|"m.meetingDate=:startDate and m.startPeriod< :endSlot and m.stopPeriod> :startSlot and "
operator|+
literal|"e.clazz.uniqueId=:classId"
argument_list|)
operator|.
name|setDate
argument_list|(
literal|"startDate"
argument_list|,
name|getStartDate
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"startSlot"
argument_list|,
name|getStartSlot
argument_list|()
operator|-
name|nrTravelSlots
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"endSlot"
argument_list|,
name|getEndSlot
argument_list|()
operator|+
name|nrTravelSlots
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"classId"
argument_list|,
name|classId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
name|Hashtable
argument_list|<
name|Meeting
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|findOverlappingCourseMeetingsWithReqAttendence
parameter_list|(
name|Set
argument_list|<
name|Long
argument_list|>
name|studentIds
parameter_list|)
block|{
return|return
name|findOverlappingCourseMeetingsWithReqAttendence
argument_list|(
name|studentIds
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.eventConflicts.travelTime.courseEvent"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Hashtable
argument_list|<
name|Meeting
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|findOverlappingCourseMeetingsWithReqAttendence
parameter_list|(
name|Set
argument_list|<
name|Long
argument_list|>
name|studentIds
parameter_list|,
name|int
name|nrTravelSlots
parameter_list|)
block|{
name|Hashtable
argument_list|<
name|Meeting
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|ret
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
if|if
condition|(
name|studentIds
operator|==
literal|null
operator|||
name|studentIds
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|ret
return|;
name|String
name|students
init|=
literal|""
decl_stmt|;
name|int
name|nrStudents
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Long
name|studentId
range|:
name|studentIds
control|)
block|{
name|students
operator|+=
operator|(
name|students
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
name|studentId
expr_stmt|;
name|nrStudents
operator|++
expr_stmt|;
if|if
condition|(
name|nrStudents
operator|==
literal|1000
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select m, s.student.uniqueId from "
operator|+
literal|"CourseEvent e inner join e.meetings m inner join e.relatedCourses o, StudentClassEnrollment s where e.reqAttendance=true and m.approvalStatus = 1 and "
operator|+
literal|"m.meetingDate=:meetingDate and m.startPeriod< :endSlot and m.stopPeriod> :startSlot and s.student.uniqueId in ("
operator|+
name|students
operator|+
literal|") and "
operator|+
literal|"o.ownerType=:classType and s.clazz.uniqueId=o.ownerId"
argument_list|)
operator|.
name|setDate
argument_list|(
literal|"meetingDate"
argument_list|,
name|getStartDate
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"startSlot"
argument_list|,
name|getStartSlot
argument_list|()
operator|-
name|nrTravelSlots
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"endSlot"
argument_list|,
name|getEndSlot
argument_list|()
operator|+
name|nrTravelSlots
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"classType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|long
name|xstudentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|conf
init|=
name|ret
operator|.
name|get
argument_list|(
name|meeting
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|meeting
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|add
argument_list|(
name|xstudentId
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select m, s.student.uniqueId from "
operator|+
literal|"CourseEvent e inner join e.meetings m inner join e.relatedCourses o, StudentClassEnrollment s where e.reqAttendance=true and m.approvalStatus = 1 and "
operator|+
literal|"m.meetingDate=:meetingDate and m.startPeriod< :endSlot and m.stopPeriod> :startSlot and s.student.uniqueId in ("
operator|+
name|students
operator|+
literal|") and "
operator|+
literal|"o.ownerType=:configType and s.clazz.schedulingSubpart.instrOfferingConfig.uniqueId=o.ownerId"
argument_list|)
operator|.
name|setDate
argument_list|(
literal|"meetingDate"
argument_list|,
name|getStartDate
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"startSlot"
argument_list|,
name|getStartSlot
argument_list|()
operator|-
name|nrTravelSlots
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"endSlot"
argument_list|,
name|getEndSlot
argument_list|()
operator|+
name|nrTravelSlots
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"configType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|long
name|xstudentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|conf
init|=
name|ret
operator|.
name|get
argument_list|(
name|meeting
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|meeting
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|add
argument_list|(
name|xstudentId
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select m, s.student.uniqueId from "
operator|+
literal|"CourseEvent e inner join e.meetings m inner join e.relatedCourses o, StudentClassEnrollment s where e.reqAttendance=true and m.approvalStatus = 1 and "
operator|+
literal|"m.meetingDate=:meetingDate and m.startPeriod< :endSlot and m.stopPeriod> :startSlot and s.student.uniqueId in ("
operator|+
name|students
operator|+
literal|") and "
operator|+
literal|"o.ownerType=:courseType and s.courseOffering.uniqueId=o.ownerId"
argument_list|)
operator|.
name|setDate
argument_list|(
literal|"meetingDate"
argument_list|,
name|getStartDate
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"startSlot"
argument_list|,
name|getStartSlot
argument_list|()
operator|-
name|nrTravelSlots
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"endSlot"
argument_list|,
name|getEndSlot
argument_list|()
operator|+
name|nrTravelSlots
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"courseType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|long
name|xstudentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|conf
init|=
name|ret
operator|.
name|get
argument_list|(
name|meeting
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|meeting
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|add
argument_list|(
name|xstudentId
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select m, s.student.uniqueId from "
operator|+
literal|"CourseEvent e inner join e.meetings m inner join e.relatedCourses o, StudentClassEnrollment s where e.reqAttendance=true and m.approvalStatus = 1 and "
operator|+
literal|"m.meetingDate=:meetingDate and m.startPeriod< :endSlot and m.stopPeriod> :startSlot and s.student.uniqueId in ("
operator|+
name|students
operator|+
literal|") and "
operator|+
literal|"o.ownerType=:offeringType and s.courseOffering.instructionalOffering.uniqueId=o.ownerId"
argument_list|)
operator|.
name|setDate
argument_list|(
literal|"meetingDate"
argument_list|,
name|getStartDate
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"startSlot"
argument_list|,
name|getStartSlot
argument_list|()
operator|-
name|nrTravelSlots
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"endSlot"
argument_list|,
name|getEndSlot
argument_list|()
operator|+
name|nrTravelSlots
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"offeringType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|long
name|xstudentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|conf
init|=
name|ret
operator|.
name|get
argument_list|(
name|meeting
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|meeting
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|add
argument_list|(
name|xstudentId
argument_list|)
expr_stmt|;
block|}
name|students
operator|=
literal|""
expr_stmt|;
name|nrStudents
operator|=
literal|0
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nrStudents
operator|>
literal|0
operator|&&
name|students
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select m, s.student.uniqueId from "
operator|+
literal|"CourseEvent e inner join e.meetings m inner join e.relatedCourses o, StudentClassEnrollment s where e.reqAttendance=true and m.approvalStatus = 1 and "
operator|+
literal|"m.meetingDate=:meetingDate and m.startPeriod< :endSlot and m.stopPeriod> :startSlot and s.student.uniqueId in ("
operator|+
name|students
operator|+
literal|") and "
operator|+
literal|"o.ownerType=:classType and s.clazz.uniqueId=o.ownerId"
argument_list|)
operator|.
name|setDate
argument_list|(
literal|"meetingDate"
argument_list|,
name|getStartDate
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"startSlot"
argument_list|,
name|getStartSlot
argument_list|()
operator|-
name|nrTravelSlots
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"endSlot"
argument_list|,
name|getEndSlot
argument_list|()
operator|+
name|nrTravelSlots
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"classType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|long
name|xstudentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|conf
init|=
name|ret
operator|.
name|get
argument_list|(
name|meeting
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|meeting
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|add
argument_list|(
name|xstudentId
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select m, s.student.uniqueId from "
operator|+
literal|"CourseEvent e inner join e.meetings m inner join e.relatedCourses o, StudentClassEnrollment s where e.reqAttendance=true and m.approvalStatus = 1 and "
operator|+
literal|"m.meetingDate=:meetingDate and m.startPeriod< :endSlot and m.stopPeriod> :startSlot and s.student.uniqueId in ("
operator|+
name|students
operator|+
literal|") and "
operator|+
literal|"o.ownerType=:configType and s.clazz.schedulingSubpart.instrOfferingConfig.uniqueId=o.ownerId"
argument_list|)
operator|.
name|setDate
argument_list|(
literal|"meetingDate"
argument_list|,
name|getStartDate
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"startSlot"
argument_list|,
name|getStartSlot
argument_list|()
operator|-
name|nrTravelSlots
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"endSlot"
argument_list|,
name|getEndSlot
argument_list|()
operator|+
name|nrTravelSlots
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"configType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|long
name|xstudentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|conf
init|=
name|ret
operator|.
name|get
argument_list|(
name|meeting
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|meeting
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|add
argument_list|(
name|xstudentId
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select m, s.student.uniqueId from "
operator|+
literal|"CourseEvent e inner join e.meetings m inner join e.relatedCourses o, StudentClassEnrollment s where e.reqAttendance=true and m.approvalStatus = 1 and "
operator|+
literal|"m.meetingDate=:meetingDate and m.startPeriod< :endSlot and m.stopPeriod> :startSlot and s.student.uniqueId in ("
operator|+
name|students
operator|+
literal|") and "
operator|+
literal|"o.ownerType=:courseType and s.courseOffering.uniqueId=o.ownerId"
argument_list|)
operator|.
name|setDate
argument_list|(
literal|"meetingDate"
argument_list|,
name|getStartDate
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"startSlot"
argument_list|,
name|getStartSlot
argument_list|()
operator|-
name|nrTravelSlots
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"endSlot"
argument_list|,
name|getEndSlot
argument_list|()
operator|+
name|nrTravelSlots
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"courseType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|long
name|xstudentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|conf
init|=
name|ret
operator|.
name|get
argument_list|(
name|meeting
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|meeting
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|add
argument_list|(
name|xstudentId
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select m, s.student.uniqueId from "
operator|+
literal|"CourseEvent e inner join e.meetings m inner join e.relatedCourses o, StudentClassEnrollment s where e.reqAttendance=true and m.approvalStatus = 1 and "
operator|+
literal|"m.meetingDate=:meetingDate and m.startPeriod< :endSlot and m.stopPeriod> :startSlot and s.student.uniqueId in ("
operator|+
name|students
operator|+
literal|") and "
operator|+
literal|"o.ownerType=:offeringType and s.courseOffering.instructionalOffering.uniqueId=o.ownerId"
argument_list|)
operator|.
name|setDate
argument_list|(
literal|"meetingDate"
argument_list|,
name|getStartDate
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"startSlot"
argument_list|,
name|getStartSlot
argument_list|()
operator|-
name|nrTravelSlots
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"endSlot"
argument_list|,
name|getEndSlot
argument_list|()
operator|+
name|nrTravelSlots
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"offeringType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|long
name|xstudentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|conf
init|=
name|ret
operator|.
name|get
argument_list|(
name|meeting
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|meeting
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|add
argument_list|(
name|xstudentId
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|getIndex
parameter_list|()
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|findAll
argument_list|(
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|getExamType
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|compareTo
argument_list|(
operator|(
name|ExamPeriod
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
name|index
operator|++
expr_stmt|;
block|}
return|return
name|index
return|;
block|}
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|ExamPeriod
name|newExamPeriod
init|=
operator|new
name|ExamPeriod
argument_list|()
decl_stmt|;
name|newExamPeriod
operator|.
name|setExamType
argument_list|(
name|getExamType
argument_list|()
argument_list|)
expr_stmt|;
name|newExamPeriod
operator|.
name|setDateOffset
argument_list|(
name|getDateOffset
argument_list|()
argument_list|)
expr_stmt|;
name|newExamPeriod
operator|.
name|setLength
argument_list|(
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|newExamPeriod
operator|.
name|setPrefLevel
argument_list|(
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|newExamPeriod
operator|.
name|setStartSlot
argument_list|(
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|newExamPeriod
operator|.
name|setSession
argument_list|(
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|newExamPeriod
operator|.
name|setEventStartOffset
argument_list|(
name|getEventStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|newExamPeriod
operator|.
name|setEventStopOffset
argument_list|(
name|getEventStopOffset
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|newExamPeriod
operator|)
return|;
block|}
specifier|public
name|ExamPeriod
name|findSameExamPeriodInSession
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
return|return
operator|(
operator|(
name|ExamPeriod
operator|)
operator|(
operator|new
name|ExamPeriodDAO
argument_list|()
operator|)
operator|.
name|getQuery
argument_list|(
literal|"select distinct ep from ExamPeriod ep where ep.session.uniqueId = :sessionId"
operator|+
literal|" and ep.examType.uniqueId = :examTypeId"
operator|+
literal|" and ep.dateOffset = :dateOffset"
operator|+
literal|" and ep.length = :length"
operator|+
literal|" and ep.prefLevel.uniqueId = :prefLevelId"
operator|+
literal|" and ep.startSlot = :startSlot"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|getExamType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"dateOffset"
argument_list|,
name|getDateOffset
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"length"
argument_list|,
name|getLength
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"prefLevelId"
argument_list|,
name|getPrefLevel
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"startSlot"
argument_list|,
name|getStartSlot
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
return|;
block|}
specifier|public
name|int
name|getDayOfWeek
parameter_list|()
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|getSession
argument_list|()
operator|.
name|getExamBeginDate
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|getDateOffset
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|weakOverlap
parameter_list|(
name|Meeting
name|meeting
parameter_list|)
block|{
return|return
name|getDayOfWeek
argument_list|()
operator|==
name|meeting
operator|.
name|getDayOfWeek
argument_list|()
operator|&&
name|getStartSlot
argument_list|()
operator|<
name|meeting
operator|.
name|getStopPeriod
argument_list|()
operator|&&
name|meeting
operator|.
name|getStartPeriod
argument_list|()
operator|<
name|getStartSlot
argument_list|()
operator|+
name|getLength
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|overlap
parameter_list|(
name|TimeBlock
name|time
parameter_list|)
block|{
comment|//        int breakTimeStart = Integer.parseInt(ApplicationProperties.getProperty("tmtbl.room.availability."+Exam.sExamTypes[getExamType()].toLowerCase()+".breakTime.start", "0"));
comment|//        int breakTimeStop = Integer.parseInt(ApplicationProperties.getProperty("tmtbl.room.availability."+Exam.sExamTypes[getExamType()].toLowerCase()+".breakTime.stop", "0"));
name|int
name|breakTimeStart
init|=
name|getEventStartOffset
argument_list|()
operator|.
name|intValue
argument_list|()
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
name|int
name|breakTimeStop
init|=
name|getEventStopOffset
argument_list|()
operator|.
name|intValue
argument_list|()
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
name|Date
name|start
init|=
name|time
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|breakTimeStart
operator|!=
literal|0
condition|)
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
operator|-
name|breakTimeStart
argument_list|)
expr_stmt|;
name|start
operator|=
name|c
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
name|Date
name|stop
init|=
name|time
operator|.
name|getEndTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|breakTimeStop
operator|!=
literal|0
condition|)
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|stop
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|breakTimeStop
argument_list|)
expr_stmt|;
name|stop
operator|=
name|c
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
return|return
name|getStartTime
argument_list|()
operator|.
name|compareTo
argument_list|(
name|stop
argument_list|)
operator|<
literal|0
operator|&&
name|start
operator|.
name|compareTo
argument_list|(
name|getEndTime
argument_list|()
argument_list|)
operator|<
literal|0
return|;
block|}
specifier|public
specifier|static
name|Date
index|[]
name|getBounds
parameter_list|(
name|Session
name|session
parameter_list|,
name|Long
name|examTypeId
parameter_list|)
block|{
return|return
name|getBounds
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|session
operator|.
name|getExamBeginDate
argument_list|()
argument_list|,
name|examTypeId
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Date
index|[]
name|getBounds
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Date
name|examBeginDate
parameter_list|,
name|Long
name|examTypeId
parameter_list|)
block|{
name|Object
index|[]
name|bounds
init|=
operator|(
name|Object
index|[]
operator|)
operator|new
name|ExamPeriodDAO
argument_list|()
operator|.
name|getQuery
argument_list|(
literal|"select min(ep.dateOffset), min(ep.startSlot - ep.eventStartOffset), max(ep.dateOffset), max(ep.startSlot+ep.length+ep.eventStopOffset) "
operator|+
literal|"from ExamPeriod ep where ep.session.uniqueId = :sessionId and ep.examType.uniqueId = :examTypeId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|examTypeId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|bounds
operator|==
literal|null
operator|||
name|bounds
index|[
literal|0
index|]
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|int
name|minDateOffset
init|=
operator|(
operator|(
name|Number
operator|)
name|bounds
index|[
literal|0
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|minSlot
init|=
operator|(
operator|(
name|Number
operator|)
name|bounds
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|minHour
init|=
operator|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|minSlot
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
literal|60
decl_stmt|;
name|int
name|minMin
init|=
operator|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|minSlot
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|%
literal|60
decl_stmt|;
name|int
name|maxDateOffset
init|=
operator|(
operator|(
name|Number
operator|)
name|bounds
index|[
literal|2
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|maxSlot
init|=
operator|(
operator|(
name|Number
operator|)
name|bounds
index|[
literal|3
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|maxHour
init|=
operator|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|maxSlot
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
literal|60
decl_stmt|;
name|int
name|maxMin
init|=
operator|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|maxSlot
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|%
literal|60
decl_stmt|;
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|examBeginDate
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|minDateOffset
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR
argument_list|,
name|minHour
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|minMin
argument_list|)
expr_stmt|;
name|Date
name|min
init|=
name|c
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|examBeginDate
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|maxDateOffset
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR
argument_list|,
name|maxHour
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|maxMin
argument_list|)
expr_stmt|;
name|Date
name|max
init|=
name|c
operator|.
name|getTime
argument_list|()
decl_stmt|;
return|return
operator|new
name|Date
index|[]
block|{
name|min
block|,
name|max
block|}
return|;
block|}
specifier|public
name|int
name|getExamEventStartSlot
parameter_list|()
block|{
return|return
operator|(
name|getStartSlot
argument_list|()
operator|.
name|intValue
argument_list|()
operator|-
name|getEventStartOffset
argument_list|()
operator|.
name|intValue
argument_list|()
operator|)
return|;
block|}
specifier|public
name|int
name|getExamEventStopSlot
parameter_list|()
block|{
return|return
operator|(
name|getEndSlot
argument_list|()
operator|+
name|getEventStopOffset
argument_list|()
operator|.
name|intValue
argument_list|()
operator|)
return|;
block|}
specifier|public
name|int
name|getExamEventStartOffsetForExam
parameter_list|(
name|Exam
name|exam
parameter_list|)
block|{
name|int
name|startOffset
init|=
name|getEventStartOffset
argument_list|()
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
if|if
condition|(
name|exam
operator|.
name|getPrintOffset
argument_list|()
operator|!=
literal|null
operator|&&
name|exam
operator|.
name|getPrintOffset
argument_list|()
operator|.
name|intValue
argument_list|()
operator|>
literal|0
condition|)
block|{
name|startOffset
operator|+=
name|exam
operator|.
name|getPrintOffset
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|startOffset
operator|)
return|;
block|}
specifier|public
name|boolean
name|isUsed
parameter_list|()
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|ExamPeriodDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(x) from Exam x where x.assignedPeriod.uniqueId = :id"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"id"
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
operator|>
literal|0
return|;
block|}
specifier|public
name|int
name|getExamEventStopOffsetForExam
parameter_list|(
name|Exam
name|exam
parameter_list|)
block|{
return|return
operator|(
name|exam
operator|.
name|getLength
argument_list|()
operator|-
operator|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|getLength
argument_list|()
operator|)
operator|-
operator|(
name|getEventStopOffset
argument_list|()
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|)
operator|+
name|exam
operator|.
name|examOffset
argument_list|()
operator|)
return|;
block|}
block|}
end_class

end_unit

