begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|criterion
operator|.
name|Restrictions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SettingsDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
import|;
end_import

begin_class
specifier|public
class|class
name|Settings
extends|extends
name|BaseSettings
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|Settings
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|Settings
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
comment|/** Request attribute name **/
specifier|public
specifier|static
name|String
name|SETTINGS_ATTR_NAME
init|=
literal|"settings"
decl_stmt|;
comment|/**      * Returns all the settings for a user      * @param request request object       * @param user User object      * @return Set containing settings, null otherwise      */
specifier|public
specifier|static
name|Set
name|getSettings
parameter_list|(
name|User
name|user
parameter_list|)
block|{
name|TimetableManager
name|tm
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|user
argument_list|)
decl_stmt|;
return|return
operator|(
name|tm
operator|==
literal|null
condition|?
literal|null
else|:
name|tm
operator|.
name|getSettings
argument_list|()
operator|)
return|;
block|}
specifier|public
specifier|static
name|Set
name|getSettings
parameter_list|(
name|UserContext
name|user
parameter_list|)
block|{
name|TimetableManager
name|tm
init|=
name|TimetableManager
operator|.
name|findByExternalId
argument_list|(
name|user
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|tm
operator|==
literal|null
condition|?
literal|null
else|:
name|tm
operator|.
name|getSettings
argument_list|()
operator|)
return|;
block|}
comment|/**      * Retrieves the user setting id /value if exists      * @param currRole Current Role      * @param uSettings User Settings Object      * @param keyId Setting UniqueId      * @param defaultValue Default Value      * @return Array of Setting id /value if found, otherwise returns -1 / default value      */
specifier|public
specifier|static
name|String
index|[]
name|getSettingValue
parameter_list|(
name|String
name|currRole
parameter_list|,
name|Set
name|uSettings
parameter_list|,
name|Long
name|keyId
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
index|[]
name|data
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
literal|"-1"
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
name|defaultValue
expr_stmt|;
if|if
condition|(
name|uSettings
operator|==
literal|null
condition|)
return|return
name|data
return|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
literal|null
decl_stmt|;
try|try
block|{
name|_RootDAO
name|rootDao
init|=
operator|new
name|_RootDAO
argument_list|()
decl_stmt|;
name|hibSession
operator|=
name|rootDao
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|Iterator
name|i
init|=
name|uSettings
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ManagerSettings
name|mgrSettings
init|=
operator|(
name|ManagerSettings
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|mgrSettings
argument_list|)
expr_stmt|;
if|if
condition|(
name|mgrSettings
operator|.
name|getKey
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|keyId
operator|.
name|intValue
argument_list|()
condition|)
block|{
name|data
index|[
literal|0
index|]
operator|=
name|mgrSettings
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
name|mgrSettings
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|//if (hibSession!=null&& hibSession.isOpen()) hibSession.close();
block|}
return|return
name|data
return|;
block|}
comment|/** 	 * Get the default value for a given key 	 * @param key Setting key 	 * @return Default value if found, null otherwise 	 */
specifier|public
specifier|static
name|Settings
name|getSetting
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|Settings
name|settings
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SettingsDAO
name|sDao
init|=
operator|new
name|SettingsDAO
argument_list|()
decl_stmt|;
name|hibSession
operator|=
name|sDao
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|List
name|settingsList
init|=
name|hibSession
operator|.
name|createCriteria
argument_list|(
name|Settings
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
name|Restrictions
operator|.
name|eq
argument_list|(
literal|"key"
argument_list|,
name|key
argument_list|)
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|settingsList
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
name|settings
operator|=
operator|(
name|Settings
operator|)
name|settingsList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|settings
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
comment|//if (hibSession!=null&& hibSession.isOpen()) hibSession.close();
block|}
return|return
name|settings
return|;
block|}
comment|/** 	 * Get the user setting value for the given key 	 * @param user User object 	 * @param key Key  	 * @return user setting or default value if none exists 	 */
specifier|public
specifier|static
name|String
name|getSettingValue
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|Settings
name|setting
init|=
name|Settings
operator|.
name|getSetting
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|setting
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|defaultValue
init|=
name|setting
operator|.
name|getDefaultValue
argument_list|()
decl_stmt|;
name|Set
name|managerSettings
init|=
name|Settings
operator|.
name|getSettings
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|String
name|valueArr
index|[]
init|=
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
operator|.
name|getCurrentRole
argument_list|()
argument_list|,
name|managerSettings
argument_list|,
name|setting
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|defaultValue
argument_list|)
decl_stmt|;
return|return
name|valueArr
index|[
literal|1
index|]
return|;
block|}
specifier|public
specifier|static
name|String
name|getSettingValue
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|Settings
name|setting
init|=
name|Settings
operator|.
name|getSetting
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|setting
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|defaultValue
init|=
name|setting
operator|.
name|getDefaultValue
argument_list|()
decl_stmt|;
name|Set
name|managerSettings
init|=
name|Settings
operator|.
name|getSettings
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|String
name|valueArr
index|[]
init|=
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
operator|.
name|getCurrentRole
argument_list|()
argument_list|,
name|managerSettings
argument_list|,
name|setting
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|defaultValue
argument_list|)
decl_stmt|;
return|return
name|valueArr
index|[
literal|1
index|]
return|;
block|}
block|}
end_class

end_unit

