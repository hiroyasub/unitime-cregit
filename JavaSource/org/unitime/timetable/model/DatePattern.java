begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2008 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseDatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DatePatternDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller, Stephanie Schluttenhofer  */
end_comment

begin_class
specifier|public
class|class
name|DatePattern
extends|extends
name|BaseDatePattern
implements|implements
name|Comparable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sTypeStandard
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sTypeAlternate
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sTypeNonStandard
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sTypeExtended
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sTypePatternSet
init|=
literal|4
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|sTypes
init|=
operator|new
name|String
index|[]
block|{
literal|"Standard"
block|,
literal|"Alternate Weeks"
block|,
literal|"Non-standard"
block|,
literal|"Extended"
block|,
literal|"Alternative Pattern Set"
block|}
decl_stmt|;
specifier|public
specifier|static
name|String
name|DATE_PATTERN_LIST_ATTR
init|=
literal|"datePatternList"
decl_stmt|;
specifier|public
specifier|static
name|String
name|DATE_PATTERN_PARENT_LIST_ATTR
init|=
literal|"datePatternParentsList"
decl_stmt|;
specifier|public
specifier|static
name|String
name|DATE_PATTERN_CHILDREN_LIST_ATTR
init|=
literal|"datePatternChildrenList"
decl_stmt|;
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|DatePattern
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|DatePattern
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
specifier|public
name|int
name|getPatternOffset
parameter_list|()
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|getSession
argument_list|()
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|beginDate
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|)
decl_stmt|;
return|return
name|beginDate
operator|-
operator|(
name|getOffset
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|getOffset
argument_list|()
operator|.
name|intValue
argument_list|()
operator|)
operator|-
literal|1
return|;
block|}
specifier|private
specifier|transient
name|BitSet
name|iCachedPatternBitSet
init|=
literal|null
decl_stmt|;
specifier|public
name|void
name|setPattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|super
operator|.
name|setPattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|iCachedPatternBitSet
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|setOffset
parameter_list|(
name|Integer
name|offset
parameter_list|)
block|{
name|super
operator|.
name|setOffset
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|iCachedPatternBitSet
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|setPatternOffset
parameter_list|(
name|Date
name|firstDate
parameter_list|)
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|getSession
argument_list|()
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|cal
operator|.
name|getTime
argument_list|()
operator|.
name|compareTo
argument_list|(
name|firstDate
argument_list|)
operator|<
literal|0
condition|)
block|{
name|offset
operator|--
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|cal
operator|.
name|getTime
argument_list|()
operator|.
name|compareTo
argument_list|(
name|firstDate
argument_list|)
operator|>
literal|0
condition|)
block|{
name|offset
operator|++
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|setOffset
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BitSet
name|getPatternBitSet
parameter_list|()
block|{
if|if
condition|(
name|iCachedPatternBitSet
operator|!=
literal|null
condition|)
return|return
name|iCachedPatternBitSet
return|;
if|if
condition|(
name|getPattern
argument_list|()
operator|==
literal|null
operator|||
name|getOffset
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|int
name|startMonth
init|=
name|getSession
argument_list|()
operator|.
name|getPatternStartMonth
argument_list|()
decl_stmt|;
name|int
name|endMonth
init|=
name|getSession
argument_list|()
operator|.
name|getPatternEndMonth
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|getSession
argument_list|()
operator|.
name|getDayOfYear
argument_list|(
literal|0
argument_list|,
name|endMonth
operator|+
literal|1
argument_list|)
operator|-
name|getSession
argument_list|()
operator|.
name|getDayOfYear
argument_list|(
literal|1
argument_list|,
name|startMonth
argument_list|)
decl_stmt|;
name|iCachedPatternBitSet
operator|=
operator|new
name|BitSet
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|int
name|offset
init|=
name|getPatternOffset
argument_list|()
operator|-
name|getSession
argument_list|()
operator|.
name|getDayOfYear
argument_list|(
literal|1
argument_list|,
name|startMonth
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getPattern
argument_list|()
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|getPattern
argument_list|()
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'1'
condition|)
name|iCachedPatternBitSet
operator|.
name|set
argument_list|(
name|i
operator|+
name|offset
argument_list|)
expr_stmt|;
block|}
return|return
name|iCachedPatternBitSet
return|;
block|}
specifier|public
name|void
name|setPatternBitSet
parameter_list|(
name|BitSet
name|pattern
parameter_list|)
block|{
name|String
name|p
init|=
literal|null
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pattern
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|pattern
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
if|if
condition|(
name|p
operator|==
literal|null
condition|)
name|p
operator|=
literal|""
expr_stmt|;
name|p
operator|+=
literal|"1"
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|p
operator|==
literal|null
condition|)
name|offset
operator|++
expr_stmt|;
else|else
name|p
operator|+=
literal|"0"
expr_stmt|;
block|}
block|}
name|setOffset
argument_list|(
name|DateUtils
operator|.
name|getDayOfYear
argument_list|(
name|getSession
argument_list|()
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
operator|-
name|getSession
argument_list|()
operator|.
name|getDayOfYear
argument_list|(
literal|1
argument_list|,
name|getSession
argument_list|()
operator|.
name|getPatternStartMonth
argument_list|()
argument_list|)
operator|-
name|offset
operator|-
literal|1
argument_list|)
expr_stmt|;
name|setPattern
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isOffered
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|month
parameter_list|)
block|{
if|if
condition|(
name|getPattern
argument_list|()
operator|==
literal|null
operator|||
name|getOffset
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|int
name|idx
init|=
name|getSession
argument_list|()
operator|.
name|getDayOfYear
argument_list|(
name|day
argument_list|,
name|month
argument_list|)
operator|-
name|getPatternOffset
argument_list|()
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
operator|||
name|idx
operator|>=
name|getPattern
argument_list|()
operator|.
name|length
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
operator|(
name|getPattern
argument_list|()
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
operator|==
literal|'1'
operator|)
return|;
block|}
specifier|public
name|boolean
name|isUsed
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|month
parameter_list|,
name|Set
name|usage
parameter_list|)
block|{
if|if
condition|(
name|usage
operator|==
literal|null
operator|||
name|getPattern
argument_list|()
operator|==
literal|null
operator|||
name|getOffset
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|usage
operator|.
name|contains
argument_list|(
operator|new
name|Integer
argument_list|(
name|getSession
argument_list|()
operator|.
name|getDayOfYear
argument_list|(
name|day
argument_list|,
name|month
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getPatternArray
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
name|int
name|startMonth
init|=
name|getSession
argument_list|()
operator|.
name|getPatternStartMonth
argument_list|()
decl_stmt|;
name|int
name|endMonth
init|=
name|getSession
argument_list|()
operator|.
name|getPatternEndMonth
argument_list|()
decl_stmt|;
name|int
name|year
init|=
name|getSession
argument_list|()
operator|.
name|getSessionStartYear
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
name|startMonth
init|;
name|m
operator|<=
name|endMonth
condition|;
name|m
operator|++
control|)
block|{
if|if
condition|(
name|m
operator|!=
name|startMonth
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|int
name|daysOfMonth
init|=
name|DateUtils
operator|.
name|getNrDaysOfMonth
argument_list|(
name|m
argument_list|,
name|year
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<=
name|daysOfMonth
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
name|d
operator|>
literal|1
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|isOffered
argument_list|(
name|d
argument_list|,
name|m
argument_list|)
condition|?
literal|"'1'"
else|:
literal|"'0'"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getPatternString
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|HashMap
name|dates
init|=
name|getPatternDateStringHashMaps
argument_list|()
decl_stmt|;
name|TreeSet
name|ts
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|ts
operator|.
name|addAll
argument_list|(
name|dates
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|ts
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Date
name|startDate
init|=
operator|(
name|Date
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Date
name|endDate
init|=
operator|(
name|Date
operator|)
name|dates
operator|.
name|get
argument_list|(
name|startDate
argument_list|)
decl_stmt|;
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|df
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_SHORT
argument_list|)
decl_stmt|;
name|String
name|startDateStr
init|=
name|df
operator|.
name|format
argument_list|(
name|startDate
argument_list|)
decl_stmt|;
name|String
name|endDateStr
init|=
name|df
operator|.
name|format
argument_list|(
name|endDate
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|startDateStr
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|startDateStr
operator|.
name|equals
argument_list|(
name|endDateStr
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"-"
operator|+
name|endDateStr
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|HashMap
name|getPatternDateStringHashMaps
parameter_list|()
block|{
name|Calendar
name|startDate
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|startDate
operator|.
name|setTime
argument_list|(
name|getStartDate
argument_list|()
argument_list|)
expr_stmt|;
name|Calendar
name|endDate
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|endDate
operator|.
name|setTime
argument_list|(
name|getEndDate
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|startMonth
init|=
name|startDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
decl_stmt|;
name|int
name|endMonth
init|=
name|endDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
decl_stmt|;
name|int
name|startYear
init|=
name|startDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
decl_stmt|;
name|int
name|endYear
init|=
name|endDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
decl_stmt|;
if|if
condition|(
name|endYear
operator|>
name|startYear
condition|)
block|{
name|endMonth
operator|+=
operator|(
literal|12
operator|*
operator|(
name|endYear
operator|-
name|startYear
operator|)
operator|)
expr_stmt|;
block|}
name|HashMap
name|mapStartToEndDate
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|Date
name|first
init|=
literal|null
decl_stmt|,
name|previous
init|=
literal|null
decl_stmt|;
name|char
index|[]
name|ptrn
init|=
name|getPattern
argument_list|()
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
literal|0
decl_stmt|;
name|int
name|dayOfWeek
init|=
name|startDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
name|startMonth
init|;
name|m
operator|<=
name|endMonth
condition|;
name|m
operator|++
control|)
block|{
name|int
name|daysOfMonth
init|=
name|DateUtils
operator|.
name|getNrDaysOfMonth
argument_list|(
name|m
argument_list|,
name|startYear
argument_list|)
decl_stmt|;
name|int
name|d
decl_stmt|;
if|if
condition|(
name|m
operator|==
name|startMonth
condition|)
block|{
name|d
operator|=
name|startDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|=
literal|1
expr_stmt|;
block|}
for|for
control|(
init|;
name|d
operator|<=
name|daysOfMonth
operator|&&
name|charPosition
operator|<
name|ptrn
operator|.
name|length
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
name|ptrn
index|[
name|charPosition
index|]
operator|==
literal|'1'
operator|||
operator|(
name|first
operator|!=
literal|null
operator|&&
name|dayOfWeek
operator|==
name|Calendar
operator|.
name|SUNDAY
operator|&&
name|charPosition
operator|+
literal|1
operator|<
name|ptrn
operator|.
name|length
operator|&&
name|ptrn
index|[
literal|1
operator|+
name|charPosition
index|]
operator|==
literal|'1'
operator|)
condition|)
block|{
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
comment|//first = ((m<0?12+m:m%12)+1)+"/"+d+"/"+((m>=12)?startYear+1:startYear);
name|cal
operator|.
name|setTime
argument_list|(
name|getStartDate
argument_list|()
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|charPosition
argument_list|)
expr_stmt|;
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|first
operator|!=
literal|null
condition|)
block|{
name|mapStartToEndDate
operator|.
name|put
argument_list|(
name|first
argument_list|,
name|previous
argument_list|)
expr_stmt|;
name|first
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|//previous = ((m<0?12+m:m%12)+1)+"/"+d+"/"+((m>=12)?startYear+1:startYear);
name|cal
operator|.
name|setTime
argument_list|(
name|getStartDate
argument_list|()
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|charPosition
argument_list|)
expr_stmt|;
name|previous
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|charPosition
operator|++
expr_stmt|;
name|dayOfWeek
operator|++
expr_stmt|;
if|if
condition|(
name|dayOfWeek
operator|>
name|Calendar
operator|.
name|SATURDAY
condition|)
block|{
name|dayOfWeek
operator|=
name|Calendar
operator|.
name|SUNDAY
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|first
operator|!=
literal|null
condition|)
block|{
name|mapStartToEndDate
operator|.
name|put
argument_list|(
name|first
argument_list|,
name|previous
argument_list|)
expr_stmt|;
name|first
operator|=
literal|null
expr_stmt|;
block|}
return|return
operator|(
name|mapStartToEndDate
operator|)
return|;
block|}
specifier|public
name|TreeSet
name|getUsage
parameter_list|(
name|Collection
name|classes
parameter_list|)
block|{
name|TreeSet
name|days
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|int
name|dowOffset
init|=
name|Constants
operator|.
name|getDayOfWeek
argument_list|(
name|DateUtils
operator|.
name|getDate
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
name|getSession
argument_list|()
operator|.
name|getSessionStartYear
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
name|getPatternOffset
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|k
init|=
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|TimePref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|tp
init|=
operator|(
name|TimePref
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|tp
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getType
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|TimePattern
operator|.
name|sTypeExactTime
condition|)
block|{
comment|//System.out.println("    -- exact time "+tp.getTimePatternModel().getExactDays());
name|int
name|dayCode
init|=
name|tp
operator|.
name|getTimePatternModel
argument_list|()
operator|.
name|getExactDays
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|getPattern
argument_list|()
operator|.
name|length
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|getPattern
argument_list|()
operator|.
name|charAt
argument_list|(
name|x
argument_list|)
operator|!=
literal|'1'
condition|)
continue|continue;
name|int
name|dayOfWeek
init|=
operator|(
name|x
operator|+
name|offset
operator|+
name|dowOffset
operator|)
operator|%
literal|7
decl_stmt|;
if|if
condition|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|dayOfWeek
operator|<
literal|0
condition|?
name|dayOfWeek
operator|+
literal|7
else|:
name|dayOfWeek
index|]
operator|)
operator|!=
literal|0
condition|)
name|days
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
name|x
operator|+
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//System.out.println("    -- time pattern "+tp.getTimePattern().getName());
name|TimePatternModel
name|m
init|=
name|tp
operator|.
name|getTimePatternModel
argument_list|()
decl_stmt|;
name|boolean
name|req
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|m
operator|.
name|getNrDays
argument_list|()
condition|;
name|d
operator|++
control|)
block|{
name|boolean
name|used
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|m
operator|.
name|getNrTimes
argument_list|()
condition|;
name|t
operator|++
control|)
block|{
if|if
condition|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getPreference
argument_list|(
name|d
argument_list|,
name|t
argument_list|)
argument_list|)
condition|)
block|{
name|used
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|used
condition|)
continue|continue;
name|req
operator|=
literal|true
expr_stmt|;
name|int
name|dayCode
init|=
name|m
operator|.
name|getDayCode
argument_list|(
name|d
argument_list|)
decl_stmt|;
comment|//System.out.println("      -- required "+dayCode);
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|getPattern
argument_list|()
operator|.
name|length
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|getPattern
argument_list|()
operator|.
name|charAt
argument_list|(
name|x
argument_list|)
operator|!=
literal|'1'
condition|)
continue|continue;
name|int
name|dayOfWeek
init|=
operator|(
name|x
operator|+
name|offset
operator|+
name|dowOffset
operator|)
operator|%
literal|7
decl_stmt|;
if|if
condition|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|dayOfWeek
operator|<
literal|0
condition|?
name|dayOfWeek
operator|+
literal|7
else|:
name|dayOfWeek
index|]
operator|)
operator|!=
literal|0
condition|)
name|days
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
name|x
operator|+
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|req
condition|)
block|{
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|m
operator|.
name|getNrDays
argument_list|()
condition|;
name|d
operator|++
control|)
block|{
name|boolean
name|used
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|m
operator|.
name|getNrTimes
argument_list|()
condition|;
name|t
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getPreference
argument_list|(
name|d
argument_list|,
name|t
argument_list|)
argument_list|)
condition|)
block|{
name|used
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|used
condition|)
continue|continue;
name|req
operator|=
literal|true
expr_stmt|;
name|int
name|dayCode
init|=
name|m
operator|.
name|getDayCode
argument_list|(
name|d
argument_list|)
decl_stmt|;
comment|//System.out.println("      -- not prohibited "+dayCode);
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|getPattern
argument_list|()
operator|.
name|length
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|getPattern
argument_list|()
operator|.
name|charAt
argument_list|(
name|x
argument_list|)
operator|!=
literal|'1'
condition|)
continue|continue;
name|int
name|dayOfWeek
init|=
operator|(
name|x
operator|+
name|offset
operator|+
name|dowOffset
operator|)
operator|%
literal|7
decl_stmt|;
if|if
condition|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|dayOfWeek
operator|<
literal|0
condition|?
name|dayOfWeek
operator|+
literal|7
else|:
name|dayOfWeek
index|]
operator|)
operator|!=
literal|0
condition|)
name|days
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
name|x
operator|+
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
return|return
name|days
return|;
block|}
specifier|public
name|TreeSet
name|getUsage
parameter_list|(
name|Long
name|uniqueId
parameter_list|)
block|{
if|if
condition|(
name|uniqueId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|HashSet
name|classes
init|=
operator|new
name|HashSet
argument_list|(
operator|new
name|DatePatternDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct c from Class_ as c inner join c.datePattern as dp where dp.uniqueId=:uniqueId"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"uniqueId"
argument_list|,
name|uniqueId
operator|.
name|intValue
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|DatePatternDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct s from SchedulingSubpart as s inner join s.datePattern as dp where dp.uniqueId=:uniqueId"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"uniqueId"
argument_list|,
name|uniqueId
operator|.
name|intValue
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|s
init|=
operator|(
name|SchedulingSubpart
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|k
init|=
name|s
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getDatePattern
argument_list|()
operator|==
literal|null
condition|)
name|classes
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|getUsage
argument_list|(
name|classes
argument_list|)
return|;
block|}
specifier|public
name|String
name|getBorderArray
parameter_list|(
name|Long
name|uniqueId
parameter_list|)
block|{
name|int
name|startMonth
init|=
name|getSession
argument_list|()
operator|.
name|getPatternStartMonth
argument_list|()
decl_stmt|;
name|int
name|endMonth
init|=
name|getSession
argument_list|()
operator|.
name|getPatternEndMonth
argument_list|()
decl_stmt|;
name|int
name|year
init|=
name|getSession
argument_list|()
operator|.
name|getSessionStartYear
argument_list|()
decl_stmt|;
name|Set
name|usage
init|=
operator|(
name|uniqueId
operator|!=
literal|null
condition|?
name|getUsage
argument_list|(
name|uniqueId
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
name|startMonth
init|;
name|m
operator|<=
name|endMonth
condition|;
name|m
operator|++
control|)
block|{
if|if
condition|(
name|m
operator|!=
name|startMonth
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|int
name|daysOfMonth
init|=
name|DateUtils
operator|.
name|getNrDaysOfMonth
argument_list|(
name|m
argument_list|,
name|year
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<=
name|daysOfMonth
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
name|d
operator|>
literal|1
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|String
name|border
init|=
name|getSession
argument_list|()
operator|.
name|getBorder
argument_list|(
name|d
argument_list|,
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|isUsed
argument_list|(
name|d
argument_list|,
name|m
argument_list|,
name|usage
argument_list|)
condition|)
name|border
operator|=
literal|"'green 2px solid'"
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|border
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getPatternHtml
parameter_list|()
block|{
return|return
name|getPatternHtml
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|String
name|getPatternHtml
parameter_list|(
name|boolean
name|editable
parameter_list|)
block|{
return|return
name|getPatternHtml
argument_list|(
name|editable
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|String
name|getPatternHtml
parameter_list|(
name|boolean
name|editable
parameter_list|,
name|Long
name|uniqueId
parameter_list|)
block|{
return|return
name|getPatternHtml
argument_list|(
name|editable
argument_list|,
name|uniqueId
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|String
name|getPatternHtml
parameter_list|(
name|boolean
name|editable
parameter_list|,
name|Long
name|uniqueId
parameter_list|,
name|boolean
name|includeScript
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeScript
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"<script language='JavaScript' type='text/javascript' src='scripts/datepatt.js'></script>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<script language='JavaScript'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"calGenerate2("
operator|+
name|getSession
argument_list|()
operator|.
name|getSessionStartYear
argument_list|()
operator|+
literal|","
operator|+
operator|(
name|getSession
argument_list|()
operator|.
name|getPatternStartMonth
argument_list|()
operator|)
operator|+
literal|","
operator|+
operator|(
name|getSession
argument_list|()
operator|.
name|getPatternEndMonth
argument_list|()
operator|)
operator|+
literal|","
operator|+
name|getPatternArray
argument_list|()
operator|+
literal|","
operator|+
literal|"['1','0'],"
operator|+
literal|"['Classes offered','Classes not offered'],"
operator|+
literal|"['rgb(240,240,50)','rgb(240,240,240)'],"
operator|+
literal|"'1',"
operator|+
name|getBorderArray
argument_list|(
name|uniqueId
argument_list|)
operator|+
literal|","
operator|+
name|getSession
argument_list|()
operator|.
name|getColorArray
argument_list|()
operator|+
literal|","
operator|+
name|editable
operator|+
literal|","
operator|+
name|editable
operator|+
literal|");"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</script>"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|setPatternAndOffset
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|int
name|startMonth
init|=
name|getSession
argument_list|()
operator|.
name|getPatternStartMonth
argument_list|()
decl_stmt|;
name|int
name|endMonth
init|=
name|getSession
argument_list|()
operator|.
name|getPatternEndMonth
argument_list|()
decl_stmt|;
name|int
name|firstOne
init|=
literal|0
decl_stmt|,
name|lastOne
init|=
literal|0
decl_stmt|;
name|int
name|year
init|=
name|getSession
argument_list|()
operator|.
name|getSessionStartYear
argument_list|()
decl_stmt|;
name|StringBuffer
name|sb
init|=
literal|null
decl_stmt|;
name|int
name|idx
init|=
name|getSession
argument_list|()
operator|.
name|getDayOfYear
argument_list|(
literal|1
argument_list|,
name|startMonth
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
name|startMonth
init|;
name|m
operator|<=
name|endMonth
condition|;
name|m
operator|++
control|)
block|{
name|int
name|daysOfMonth
init|=
name|DateUtils
operator|.
name|getNrDaysOfMonth
argument_list|(
name|m
argument_list|,
name|year
argument_list|)
decl_stmt|;
name|int
name|yr
init|=
name|DateUtils
operator|.
name|calculateActualYear
argument_list|(
name|m
argument_list|,
name|year
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<=
name|daysOfMonth
condition|;
name|d
operator|++
control|)
block|{
name|String
name|offered
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"cal_val_"
operator|+
name|yr
operator|+
literal|"_"
operator|+
operator|(
operator|(
literal|12
operator|+
name|m
operator|)
operator|%
literal|12
operator|)
operator|+
literal|"_"
operator|+
name|d
argument_list|)
decl_stmt|;
if|if
condition|(
name|offered
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sb
operator|!=
literal|null
operator|||
operator|!
name|offered
operator|.
name|equals
argument_list|(
literal|"0"
argument_list|)
condition|)
block|{
if|if
condition|(
name|sb
operator|==
literal|null
condition|)
block|{
name|firstOne
operator|=
name|idx
expr_stmt|;
name|sb
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|offered
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|offered
operator|.
name|equals
argument_list|(
literal|"0"
argument_list|)
condition|)
name|lastOne
operator|=
name|idx
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
block|}
block|}
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|getSession
argument_list|()
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sb
operator|!=
literal|null
condition|)
block|{
name|setPattern
argument_list|(
name|sb
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastOne
operator|-
name|firstOne
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|setOffset
argument_list|(
operator|new
name|Integer
argument_list|(
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|)
operator|-
name|firstOne
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setPattern
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|setOffset
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|DatePattern
name|findByName
parameter_list|(
name|Session
name|session
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|findByName
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|name
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|DatePattern
name|findByName
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|List
name|list
init|=
operator|(
operator|new
name|DatePatternDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct p from DatePattern as p where p.session.uniqueId=:sessionId and p.name=:name"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setText
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
operator|||
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
operator|(
name|DatePattern
operator|)
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|DatePattern
argument_list|>
name|findAll
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|Department
name|department
parameter_list|,
name|DatePattern
name|includeGiven
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|includeExtended
init|=
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|ExtendedDatePatterns
argument_list|)
decl_stmt|;
return|return
name|findAll
argument_list|(
name|user
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|,
name|includeExtended
argument_list|,
name|department
argument_list|,
name|includeGiven
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|DatePattern
argument_list|>
name|findAll
parameter_list|(
name|Session
name|session
parameter_list|,
name|boolean
name|includeExtended
parameter_list|,
name|Department
name|department
parameter_list|,
name|DatePattern
name|includeGiven
parameter_list|)
block|{
return|return
name|findAll
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|includeExtended
argument_list|,
name|department
argument_list|,
name|includeGiven
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|DatePattern
argument_list|>
name|findAll
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|boolean
name|includeExtended
parameter_list|,
name|Department
name|department
parameter_list|,
name|DatePattern
name|includeGiven
parameter_list|)
block|{
name|List
argument_list|<
name|DatePattern
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|DatePattern
argument_list|>
operator|)
name|DatePatternDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct p from DatePattern as p where p.session.uniqueId=:sessionId"
operator|+
operator|(
operator|!
name|includeExtended
condition|?
literal|" and p.type!="
operator|+
name|sTypeExtended
else|:
literal|""
operator|)
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|includeExtended
operator|&&
name|department
operator|!=
literal|null
condition|)
for|for
control|(
name|DatePattern
name|dp
range|:
name|department
operator|.
name|getDatePatterns
argument_list|()
control|)
block|{
if|if
condition|(
name|dp
operator|.
name|getType
argument_list|()
operator|==
name|sTypeExtended
condition|)
name|list
operator|.
name|add
argument_list|(
name|dp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeGiven
operator|!=
literal|null
operator|&&
operator|!
name|list
operator|.
name|contains
argument_list|(
name|includeGiven
argument_list|)
condition|)
name|list
operator|.
name|add
argument_list|(
name|includeGiven
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
specifier|public
specifier|static
name|Set
name|findAllUsed
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|TreeSet
name|ret
init|=
operator|new
name|TreeSet
argument_list|(
operator|(
operator|new
name|DatePatternDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct dp from Class_ as c inner join c.datePattern as dp where dp.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
decl_stmt|;
name|ret
operator|.
name|addAll
argument_list|(
operator|(
operator|new
name|DatePatternDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct dp from SchedulingSubpart as s inner join s.datePattern as dp where dp.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|addAll
argument_list|(
operator|(
operator|new
name|DatePatternDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct dp from Assignment a inner join a.datePattern dp where dp.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
operator|new
name|SessionDAO
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|.
name|getDefaultDatePattern
argument_list|()
operator|!=
literal|null
condition|)
name|ret
operator|.
name|add
argument_list|(
name|session
operator|.
name|getDefaultDatePattern
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|List
argument_list|<
name|DatePattern
argument_list|>
name|findChildren
parameter_list|()
block|{
if|if
condition|(
name|getType
argument_list|()
operator|!=
literal|null
operator|&&
name|getType
argument_list|()
operator|!=
name|sTypePatternSet
condition|)
return|return
operator|new
name|ArrayList
argument_list|<
name|DatePattern
argument_list|>
argument_list|()
return|;
return|return
operator|(
name|List
argument_list|<
name|DatePattern
argument_list|>
operator|)
name|DatePatternDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select dp from DatePattern dp, IN (dp.parents) parent where parent.uniqueId = :parentId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"parentId"
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|DatePattern
argument_list|>
name|findAllParents
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
return|return
operator|(
name|List
argument_list|<
name|DatePattern
argument_list|>
operator|)
name|DatePatternDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from DatePattern where type = :parentType and session.uniqueId=:sessionId order by name"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"parentType"
argument_list|,
name|sTypePatternSet
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isUsed
parameter_list|()
block|{
return|return
name|findAllUsed
argument_list|(
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isDefault
parameter_list|()
block|{
return|return
name|this
operator|.
name|equals
argument_list|(
name|getSession
argument_list|()
operator|.
name|getDefaultDatePattern
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
if|if
condition|(
name|getPattern
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|0
return|;
name|int
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getPattern
argument_list|()
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
literal|'1'
operator|==
name|getPattern
argument_list|()
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
condition|)
name|size
operator|++
expr_stmt|;
return|return
name|size
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|DatePattern
operator|)
condition|)
return|return
operator|-
literal|1
return|;
name|DatePattern
name|dp
init|=
operator|(
name|DatePattern
operator|)
name|o
decl_stmt|;
name|int
name|cmp
init|=
name|getType
argument_list|()
operator|.
name|compareTo
argument_list|(
name|dp
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
if|if
condition|(
name|dp
operator|.
name|getType
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|sTypePatternSet
condition|)
block|{
comment|// compare just by name
block|}
if|else if
condition|(
name|dp
operator|.
name|getType
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|sTypeStandard
condition|)
block|{
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|dp
operator|.
name|size
argument_list|()
operator|-
name|size
argument_list|()
argument_list|)
operator|>
literal|5
condition|)
block|{
name|cmp
operator|=
name|Double
operator|.
name|compare
argument_list|(
name|dp
operator|.
name|size
argument_list|()
argument_list|,
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
name|cmp
operator|=
name|getStartDate
argument_list|()
operator|.
name|compareTo
argument_list|(
name|dp
operator|.
name|getStartDate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
else|else
block|{
name|cmp
operator|=
name|getStartDate
argument_list|()
operator|.
name|compareTo
argument_list|(
name|dp
operator|.
name|getStartDate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|dp
operator|.
name|size
argument_list|()
operator|-
name|size
argument_list|()
argument_list|)
operator|>
literal|5
condition|)
block|{
name|cmp
operator|=
operator|-
name|Double
operator|.
name|compare
argument_list|(
name|dp
operator|.
name|size
argument_list|()
argument_list|,
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
block|}
name|cmp
operator|=
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|dp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
else|:
name|getUniqueId
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|dp
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|dp
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|DatePattern
name|dp
init|=
operator|new
name|DatePattern
argument_list|()
decl_stmt|;
name|dp
operator|.
name|setSession
argument_list|(
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setOffset
argument_list|(
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setPattern
argument_list|(
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setName
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setType
argument_list|(
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setVisible
argument_list|(
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|dp
return|;
block|}
specifier|public
name|Date
name|getStartDate
parameter_list|()
block|{
if|if
condition|(
name|getPattern
argument_list|()
operator|==
literal|null
operator|||
name|getOffset
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|int
name|idx
init|=
name|getPattern
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|'1'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
return|return
name|getSession
argument_list|()
operator|.
name|getSessionBeginDateTime
argument_list|()
return|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|getSession
argument_list|()
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
operator|-
name|getOffset
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|cal
operator|.
name|getTime
argument_list|()
return|;
block|}
specifier|public
name|Date
name|getEndDate
parameter_list|()
block|{
if|if
condition|(
name|getPattern
argument_list|()
operator|==
literal|null
operator|||
name|getOffset
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|int
name|idx
init|=
name|getPattern
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'1'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
return|return
name|getSession
argument_list|()
operator|.
name|getSessionEndDateTime
argument_list|()
return|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|getSession
argument_list|()
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
operator|-
name|getOffset
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|cal
operator|.
name|getTime
argument_list|()
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
specifier|public
name|DatePattern
name|findCloseMatchDatePatternInSession
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|List
argument_list|<
name|DatePattern
argument_list|>
name|allDatePatterns
init|=
name|DatePattern
operator|.
name|findAll
argument_list|(
name|session
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|TreeSet
name|days
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|days
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|offset
init|=
name|getPatternOffset
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|getPattern
argument_list|()
operator|.
name|length
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|getPattern
argument_list|()
operator|.
name|charAt
argument_list|(
name|x
argument_list|)
operator|!=
literal|'1'
condition|)
continue|continue;
name|days
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
name|x
operator|+
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|DatePattern
name|likeDp
init|=
literal|null
decl_stmt|;
name|int
name|likeDiff
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|allDatePatterns
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DatePattern
name|xdp
init|=
operator|(
name|DatePattern
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|xdp
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"generated"
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|getOffset
argument_list|()
operator|.
name|equals
argument_list|(
name|xdp
operator|.
name|getOffset
argument_list|()
argument_list|)
operator|&&
name|getPattern
argument_list|()
operator|.
name|equals
argument_list|(
name|xdp
operator|.
name|getPattern
argument_list|()
argument_list|)
condition|)
block|{
name|likeDp
operator|=
name|xdp
expr_stmt|;
name|likeDiff
operator|=
literal|0
expr_stmt|;
break|break;
block|}
name|TreeSet
name|xdays
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|xdays
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|offset
init|=
name|xdp
operator|.
name|getPatternOffset
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|xdp
operator|.
name|getPattern
argument_list|()
operator|.
name|length
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|xdp
operator|.
name|getPattern
argument_list|()
operator|.
name|charAt
argument_list|(
name|x
argument_list|)
operator|!=
literal|'1'
condition|)
continue|continue;
name|xdays
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
name|x
operator|+
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|diff
init|=
name|diff
argument_list|(
name|days
argument_list|,
name|xdays
argument_list|)
decl_stmt|;
if|if
condition|(
name|likeDp
operator|==
literal|null
operator|||
name|likeDiff
operator|>
name|diff
operator|||
operator|(
name|likeDiff
operator|==
name|diff
operator|&&
name|xdp
operator|.
name|isDefault
argument_list|()
operator|)
condition|)
block|{
name|likeDp
operator|=
name|xdp
expr_stmt|;
name|likeDiff
operator|=
name|diff
expr_stmt|;
block|}
block|}
if|if
condition|(
name|likeDp
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|likeDiff
operator|<=
literal|5
condition|)
block|{
return|return
operator|(
name|likeDp
operator|)
return|;
block|}
block|}
return|return
operator|(
literal|null
operator|)
return|;
block|}
specifier|private
name|int
name|diff
parameter_list|(
name|Set
name|x
parameter_list|,
name|Set
name|y
parameter_list|)
block|{
name|int
name|diff
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|x
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|o
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|y
operator|.
name|contains
argument_list|(
name|o
argument_list|)
condition|)
name|diff
operator|++
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|y
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|o
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|x
operator|.
name|contains
argument_list|(
name|o
argument_list|)
condition|)
name|diff
operator|++
expr_stmt|;
block|}
return|return
name|diff
return|;
block|}
specifier|public
specifier|static
name|Date
index|[]
name|getBounds
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|Date
name|startDate
init|=
literal|null
decl_stmt|,
name|endDate
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|DatePattern
operator|.
name|findAllUsed
argument_list|(
name|sessionId
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DatePattern
name|dp
init|=
operator|(
name|DatePattern
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|startDate
operator|==
literal|null
operator|||
name|startDate
operator|.
name|compareTo
argument_list|(
name|dp
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
name|startDate
operator|=
name|dp
operator|.
name|getStartDate
argument_list|()
expr_stmt|;
if|if
condition|(
name|endDate
operator|==
literal|null
operator|||
name|endDate
operator|.
name|compareTo
argument_list|(
name|dp
operator|.
name|getEndDate
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
name|endDate
operator|=
name|dp
operator|.
name|getEndDate
argument_list|()
expr_stmt|;
block|}
name|Calendar
name|startDateCal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|startDateCal
operator|.
name|setTime
argument_list|(
name|startDate
argument_list|)
expr_stmt|;
name|startDateCal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|startDateCal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|startDateCal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Calendar
name|endDateCal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|endDateCal
operator|.
name|setTime
argument_list|(
name|endDate
argument_list|)
expr_stmt|;
name|endDateCal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|23
argument_list|)
expr_stmt|;
name|endDateCal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|59
argument_list|)
expr_stmt|;
name|endDateCal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|59
argument_list|)
expr_stmt|;
return|return
operator|new
name|Date
index|[]
block|{
name|startDateCal
operator|.
name|getTime
argument_list|()
block|,
name|endDateCal
operator|.
name|getTime
argument_list|()
block|}
return|;
block|}
block|}
end_class

end_unit

