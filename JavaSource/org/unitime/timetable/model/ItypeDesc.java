begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseItypeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ItypeDescDAO
import|;
end_import

begin_class
specifier|public
class|class
name|ItypeDesc
extends|extends
name|BaseItypeDesc
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|ItypeDesc
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|ItypeDesc
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Integer
name|itype
parameter_list|)
block|{
name|super
argument_list|(
name|itype
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
comment|// Static list of Itypes
specifier|private
specifier|static
name|HashMap
name|itypes
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|Vector
name|itypesList
init|=
literal|null
decl_stmt|;
comment|/** Request attribute name for available itypes **/
specifier|public
specifier|static
name|String
name|ITYPE_ATTR_NAME
init|=
literal|"itypesList"
decl_stmt|;
comment|/**      * Loads Itypes from SIQ      */
specifier|public
specifier|static
specifier|synchronized
name|void
name|load
parameter_list|(
name|boolean
name|reload
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|itypes
operator|!=
literal|null
operator|&&
operator|!
name|reload
condition|)
return|return;
name|itypesList
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
name|itypes
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|ItypeDescDAO
name|itypeDao
init|=
operator|new
name|ItypeDescDAO
argument_list|()
decl_stmt|;
name|ItypeDesc
name|itype
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Iterator
name|it
init|=
name|itypeDao
operator|.
name|getQuery
argument_list|(
literal|"FROM ItypeDesc where basic=1"
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|itype
operator|=
operator|(
name|ItypeDesc
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|Integer
name|code
init|=
name|itype
operator|.
name|getItype
argument_list|()
decl_stmt|;
name|itypes
operator|.
name|put
argument_list|(
name|code
argument_list|,
name|itype
argument_list|)
expr_stmt|;
name|itypesList
operator|.
name|addElement
argument_list|(
name|itype
argument_list|)
expr_stmt|;
block|}
name|Debug
operator|.
name|debug
argument_list|(
literal|"Loaded "
operator|+
name|itypes
operator|.
name|size
argument_list|()
operator|+
literal|" itypes ..."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|e
operator|)
throw|;
block|}
block|}
comment|/**      * @return Returns the itypes.      */
specifier|public
specifier|static
name|HashMap
name|getItypes
parameter_list|()
throws|throws
name|Exception
block|{
name|load
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|itypes
return|;
block|}
comment|/**      * Retrieves list of itypes 	 * @param refresh true - refreshes the list from database      * @return Collection of Itype Objects      * @throws Exception      */
specifier|public
specifier|static
name|Vector
name|getItypesList
parameter_list|(
name|boolean
name|refresh
parameter_list|)
throws|throws
name|Exception
block|{
name|load
argument_list|(
name|refresh
argument_list|)
expr_stmt|;
return|return
name|itypesList
return|;
block|}
block|}
end_class

end_unit

