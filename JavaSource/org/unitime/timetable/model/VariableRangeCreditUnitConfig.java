begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseVariableRangeCreditUnitConfig
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller, Stephanie Schluttenhofer  */
end_comment

begin_class
specifier|public
class|class
name|VariableRangeCreditUnitConfig
extends|extends
name|BaseVariableRangeCreditUnitConfig
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
specifier|static
name|String
name|CREDIT_FORMAT
init|=
literal|"variableRange"
decl_stmt|;
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|VariableRangeCreditUnitConfig
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|VariableRangeCreditUnitConfig
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
specifier|public
name|String
name|creditText
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|sCreditFormat
operator|.
name|format
argument_list|(
name|this
operator|.
name|getMinUnits
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" to "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|sCreditFormat
operator|.
name|format
argument_list|(
name|this
operator|.
name|getMaxUnits
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|getCreditUnitType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" of "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|getCreditType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isFractionalIncrementsAllowed
argument_list|()
operator|==
literal|null
operator|||
name|this
operator|.
name|isFractionalIncrementsAllowed
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" in fractional increments"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" in whole number increments"
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|public
name|String
name|creditAbbv
parameter_list|()
block|{
return|return
operator|(
name|getCreditFormatAbbv
argument_list|()
operator|+
literal|" "
operator|+
name|sCreditFormat
operator|.
name|format
argument_list|(
name|getMinUnits
argument_list|()
argument_list|)
operator|+
literal|"-"
operator|+
name|sCreditFormat
operator|.
name|format
argument_list|(
name|getMaxUnits
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|getCreditUnitType
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" "
operator|+
name|getCreditType
argument_list|()
operator|.
name|getAbbv
argument_list|()
comment|//+(isFractionalIncrementsAllowed().booleanValue()?" FI":"")
operator|)
operator|.
name|trim
argument_list|()
return|;
block|}
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|VariableRangeCreditUnitConfig
name|newCreditConfig
init|=
operator|new
name|VariableRangeCreditUnitConfig
argument_list|()
decl_stmt|;
name|baseClone
argument_list|(
name|newCreditConfig
argument_list|)
expr_stmt|;
name|newCreditConfig
operator|.
name|setMaxUnits
argument_list|(
name|getMaxUnits
argument_list|()
argument_list|)
expr_stmt|;
name|newCreditConfig
operator|.
name|setMinUnits
argument_list|(
name|getMinUnits
argument_list|()
argument_list|)
expr_stmt|;
name|newCreditConfig
operator|.
name|setFractionalIncrementsAllowed
argument_list|(
name|isFractionalIncrementsAllowed
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|newCreditConfig
operator|)
return|;
block|}
block|}
end_class

end_unit

