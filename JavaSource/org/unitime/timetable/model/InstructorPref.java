begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseInstructorPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|NameFormat
import|;
end_import

begin_class
specifier|public
class|class
name|InstructorPref
extends|extends
name|BaseInstructorPref
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|6242763326071980017L
decl_stmt|;
specifier|public
name|InstructorPref
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|preferenceText
parameter_list|()
block|{
return|return
name|NameFormat
operator|.
name|LAST_FIRST_MIDDLE_TITLE
operator|.
name|format
argument_list|(
name|getInstructor
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|preferenceText
parameter_list|(
name|String
name|nameFormat
parameter_list|)
block|{
if|if
condition|(
name|nameFormat
operator|==
literal|null
condition|)
return|return
name|NameFormat
operator|.
name|LAST_FIRST_MIDDLE_TITLE
operator|.
name|format
argument_list|(
name|getInstructor
argument_list|()
argument_list|)
return|;
else|else
return|return
name|getInstructor
argument_list|()
operator|.
name|getName
argument_list|(
name|nameFormat
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|preferenceAbbv
parameter_list|()
block|{
return|return
name|NameFormat
operator|.
name|LAST_INITIAL
operator|.
name|format
argument_list|(
name|getInstructor
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|preferenceAbbv
parameter_list|(
name|String
name|nameFormat
parameter_list|)
block|{
if|if
condition|(
name|nameFormat
operator|==
literal|null
condition|)
return|return
name|NameFormat
operator|.
name|LAST_INITIAL
operator|.
name|format
argument_list|(
name|getInstructor
argument_list|()
argument_list|)
return|;
else|else
return|return
name|getInstructor
argument_list|()
operator|.
name|getName
argument_list|(
name|nameFormat
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|InstructorPref
name|pref
init|=
operator|new
name|InstructorPref
argument_list|()
decl_stmt|;
name|pref
operator|.
name|setPrefLevel
argument_list|(
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|pref
operator|.
name|setInstructor
argument_list|(
name|getInstructor
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|pref
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSame
parameter_list|(
name|Preference
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
operator|||
operator|!
operator|(
name|other
operator|instanceof
name|InstructorPref
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|ToolBox
operator|.
name|equals
argument_list|(
name|getInstructor
argument_list|()
argument_list|,
operator|(
operator|(
name|InstructorPref
operator|)
name|other
operator|)
operator|.
name|getInstructor
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|preferenceTitle
parameter_list|()
block|{
return|return
name|getPrefLevel
argument_list|()
operator|.
name|getPrefName
argument_list|()
operator|+
literal|" "
operator|+
name|preferenceText
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|preferenceTitle
parameter_list|(
name|String
name|nameFormat
parameter_list|)
block|{
return|return
name|getPrefLevel
argument_list|()
operator|.
name|getPrefName
argument_list|()
operator|+
literal|" "
operator|+
name|preferenceText
argument_list|(
name|nameFormat
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|InstructorPref
operator|)
condition|)
return|return
name|super
operator|.
name|compareTo
argument_list|(
name|o
argument_list|)
return|;
name|InstructorPref
name|p
init|=
operator|(
name|InstructorPref
operator|)
name|o
decl_stmt|;
name|int
name|cmp
init|=
name|getInstructor
argument_list|()
operator|.
name|compareTo
argument_list|(
name|p
operator|.
name|getInstructor
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|super
operator|.
name|compareTo
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|weakenHardPreferences
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|INSTRUCTOR
return|;
block|}
block|}
end_class

end_unit

