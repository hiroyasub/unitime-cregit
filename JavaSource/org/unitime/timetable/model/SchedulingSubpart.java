begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseSchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|NavigationComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|SchedulingSubpartComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SchedulingSubpartDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|Navigation
import|;
end_import

begin_class
specifier|public
class|class
name|SchedulingSubpart
extends|extends
name|BaseSchedulingSubpart
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/** Request Parameter name for Scheduling Subpart List **/
specifier|public
specifier|static
specifier|final
name|String
name|SCHED_SUBPART_ATTR_NAME
init|=
literal|"schedSubpartList"
decl_stmt|;
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|SchedulingSubpart
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|SchedulingSubpart
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
comment|/* 	public String getCourseName(){ 		return(this.getInstrOfferingConfig().getCourseName()); 	} 	*/
specifier|public
name|String
name|getCourseNameWithTitle
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getCourseNameWithTitle
argument_list|()
operator|)
return|;
block|}
specifier|public
name|CourseOffering
name|getControllingCourseOffering
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|)
return|;
block|}
specifier|public
name|String
name|getItypeDesc
parameter_list|()
block|{
try|try
block|{
name|ItypeDesc
name|itype
init|=
name|getItype
argument_list|()
decl_stmt|;
return|return
operator|(
name|itype
operator|==
literal|null
condition|?
literal|null
else|:
name|itype
operator|.
name|getAbbv
argument_list|()
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|Department
name|getManagingDept
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|getClasses
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|boolean
name|allSame
init|=
literal|true
decl_stmt|;
name|Department
name|d
init|=
literal|null
decl_stmt|;
name|Department
name|d1
init|=
literal|null
decl_stmt|;
name|Iterator
name|it
init|=
name|this
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Class_
name|c
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
operator|&&
name|allSame
condition|)
block|{
name|c
operator|=
operator|(
name|Class_
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|d
operator|=
name|c
operator|.
name|getManagingDept
argument_list|()
expr_stmt|;
if|if
condition|(
name|d1
operator|==
literal|null
condition|)
block|{
name|d1
operator|=
name|d
expr_stmt|;
block|}
if|if
condition|(
name|d1
operator|!=
literal|null
operator|&&
operator|(
name|d
operator|==
literal|null
operator|||
name|d
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|d
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|d1
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|allSame
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|d
operator|!=
literal|null
operator|&&
name|allSame
condition|)
block|{
return|return
operator|(
name|d
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|this
operator|.
name|getControllingDept
argument_list|()
operator|)
return|;
block|}
block|}
return|return
operator|(
name|this
operator|.
name|getControllingDept
argument_list|()
operator|)
return|;
block|}
specifier|public
name|Department
name|getControllingDept
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|)
return|;
block|}
comment|/* 	public Session getSession() { 		return (this.getInstrOfferingConfig().getSession()); 	} 	 	public Long getSessionId() { 		return (this.getInstrOfferingConfig().getSessionId()); 	} 	*/
specifier|public
name|Long
name|getSessionId
parameter_list|()
block|{
return|return
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
return|;
block|}
specifier|public
name|String
name|htmlLabel
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|getItype
argument_list|()
operator|.
name|getDesc
argument_list|()
operator|)
return|;
block|}
specifier|private
name|String
name|htmlForTimePatterns
parameter_list|(
name|Set
name|patterns
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|patterns
operator|!=
literal|null
condition|)
block|{
name|Iterator
name|it
init|=
name|patterns
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|TimePattern
name|t
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|t
operator|=
operator|(
name|TimePattern
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<BR>"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|public
name|String
name|effectiveTimePatternHtml
parameter_list|()
block|{
return|return
operator|(
name|htmlForTimePatterns
argument_list|(
name|this
operator|.
name|effectiveTimePatterns
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|public
name|String
name|timePatternHtml
parameter_list|()
block|{
return|return
operator|(
name|htmlForTimePatterns
argument_list|(
name|this
operator|.
name|getTimePatterns
argument_list|()
argument_list|)
operator|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.unitime.timetable.model.PreferenceGroup#canUserEdit(org.unitime.commons.User) 	 * canUserEdit() - the user can edit this subpart if the user canEdit all of the 	 *      classes owned by this subpart or the user is the schedule deputy for the 	 *      subjectArea of the subpart and can edit at least one class owned by the 	 *      subpart 	 */
specifier|protected
name|boolean
name|canUserEdit
parameter_list|(
name|User
name|user
parameter_list|)
block|{
name|TimetableManager
name|tm
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|tm
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|Roles
operator|.
name|DEPT_SCHED_MGR_ROLE
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getRole
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|tm
operator|.
name|getDepartments
argument_list|()
operator|.
name|contains
argument_list|(
name|getManagingDept
argument_list|()
argument_list|)
condition|)
block|{
comment|//I am manager, return true if manager can edit the class
if|if
condition|(
name|getManagingDept
argument_list|()
operator|.
name|effectiveStatusType
argument_list|()
operator|.
name|canManagerEdit
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
name|tm
operator|.
name|getDepartments
argument_list|()
operator|.
name|contains
argument_list|(
name|getControllingDept
argument_list|()
argument_list|)
condition|)
block|{
comment|//I am owner, return true if owner can edit the class
if|if
condition|(
name|getManagingDept
argument_list|()
operator|.
name|effectiveStatusType
argument_list|()
operator|.
name|canOwnerEdit
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|boolean
name|canUserView
parameter_list|(
name|User
name|user
parameter_list|)
block|{
name|TimetableManager
name|tm
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|tm
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClasses
argument_list|()
operator|==
literal|null
operator|||
name|getClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|tm
operator|.
name|getDepartments
argument_list|()
operator|.
name|contains
argument_list|(
name|getControllingDept
argument_list|()
argument_list|)
condition|)
block|{
comment|//I am owner, return true if owner can edit the class
if|if
condition|(
name|getManagingDept
argument_list|()
operator|.
name|effectiveStatusType
argument_list|()
operator|.
name|canOwnerView
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
name|tm
operator|.
name|isExternalManager
argument_list|()
operator|&&
name|getManagingDept
argument_list|()
operator|.
name|effectiveStatusType
argument_list|()
operator|.
name|canManagerView
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
else|else
block|{
comment|//can view at least one class
for|for
control|(
name|Iterator
name|i
init|=
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|canUserView
argument_list|(
name|user
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEditableBy
parameter_list|(
name|User
name|user
parameter_list|)
block|{
if|if
condition|(
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|isOfferingLockNeeded
argument_list|(
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|super
operator|.
name|isEditableBy
argument_list|(
name|user
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isLimitedEditable
parameter_list|(
name|User
name|user
parameter_list|)
block|{
if|if
condition|(
name|isEditableBy
argument_list|(
name|user
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|user
operator|.
name|isAdmin
argument_list|()
condition|)
return|return
literal|true
return|;
name|TimetableManager
name|tm
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|tm
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|Roles
operator|.
name|DEPT_SCHED_MGR_ROLE
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getRole
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClasses
argument_list|()
operator|==
literal|null
operator|||
name|getClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|tm
operator|.
name|getDepartments
argument_list|()
operator|.
name|contains
argument_list|(
name|getControllingDept
argument_list|()
argument_list|)
condition|)
block|{
comment|//I am owner, return true if owner can edit the class
if|if
condition|(
name|getManagingDept
argument_list|()
operator|.
name|effectiveStatusType
argument_list|()
operator|.
name|canOwnerLimitedEdit
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
comment|//can view at least one class
for|for
control|(
name|Iterator
name|i
init|=
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isLimitedEditable
argument_list|(
name|user
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/** 	 * Gets the minimum class limit for the sub class 	 * @return Class Limit (-1 if classes not defined, 0 if no classes set) 	 */
specifier|public
name|int
name|getMinClassLimit
parameter_list|()
block|{
name|Set
name|classes
init|=
name|this
operator|.
name|getClasses
argument_list|()
decl_stmt|;
if|if
condition|(
name|classes
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|classes
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|0
return|;
name|int
name|limit
init|=
literal|0
decl_stmt|;
name|Iterator
name|iter
init|=
name|classes
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|ct
init|=
name|c
operator|.
name|getExpectedCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|ct
operator|>
name|limit
condition|)
name|limit
operator|=
name|ct
expr_stmt|;
block|}
return|return
name|limit
return|;
block|}
comment|/** 	 * Gets the maximum class limit for the sub class 	 * @return Class Limit (-1 if classes not defined, 0 if no classes set) 	 */
specifier|public
name|int
name|getMaxClassLimit
parameter_list|()
block|{
name|Set
name|classes
init|=
name|this
operator|.
name|getClasses
argument_list|()
decl_stmt|;
if|if
condition|(
name|classes
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|classes
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|0
return|;
name|int
name|limit
init|=
literal|0
decl_stmt|;
name|Iterator
name|iter
init|=
name|classes
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|ct
init|=
name|c
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|ct
operator|>
name|limit
condition|)
name|limit
operator|=
name|ct
expr_stmt|;
block|}
return|return
name|limit
return|;
block|}
comment|/** 	 * Gets the number of classes for a subpart 	 * @return Number of classes (-1 if classes not defined) 	 */
specifier|public
name|int
name|getNumClasses
parameter_list|()
block|{
name|Set
name|classes
init|=
name|this
operator|.
name|getClasses
argument_list|()
decl_stmt|;
if|if
condition|(
name|classes
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|classes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|String
name|getSchedulingSubpartLabel
parameter_list|()
block|{
name|String
name|sufix
init|=
name|getSchedulingSubpartSuffix
argument_list|()
decl_stmt|;
name|String
name|cfgName
init|=
operator|(
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|hasMultipleConfigurations
argument_list|()
condition|?
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
return|return
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|this
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
operator|(
name|sufix
operator|==
literal|null
operator|||
name|sufix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
literal|" ("
operator|+
name|sufix
operator|+
literal|")"
operator|)
operator|+
operator|(
name|cfgName
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ["
operator|+
name|cfgName
operator|+
literal|"]"
operator|)
return|;
block|}
comment|/** 	 * Returns String representation of the form {Subj Area} {Crs Nbr} {Itype Desc}  	 */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getSchedulingSubpartLabel
argument_list|()
return|;
block|}
comment|/** 	 * @return Class type to distinguish the sub class in PrefGroup 	 */
specifier|public
name|Class
name|getInstanceOf
parameter_list|()
block|{
return|return
name|SchedulingSubpart
operator|.
name|class
return|;
block|}
comment|/**      * Gets the max room ratio among all the classes      * belonging to the subpart      * @return max room ratio      */
specifier|public
name|float
name|getMaxRoomRatio
parameter_list|()
block|{
name|Set
name|classes
init|=
name|this
operator|.
name|getClasses
argument_list|()
decl_stmt|;
if|if
condition|(
name|classes
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|classes
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|1.0f
return|;
name|float
name|rc
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Float
name|rc1
init|=
name|c
operator|.
name|getRoomRatio
argument_list|()
decl_stmt|;
if|if
condition|(
name|rc1
operator|!=
literal|null
operator|&&
name|rc1
operator|.
name|floatValue
argument_list|()
operator|>
name|rc
condition|)
name|rc
operator|=
name|rc1
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
comment|/**      * Gets the max number of rooms among all the classes      * belonging to the subpart      * @return max number of rooms      */
specifier|public
name|int
name|getMaxRooms
parameter_list|()
block|{
name|Set
name|classes
init|=
name|this
operator|.
name|getClasses
argument_list|()
decl_stmt|;
if|if
condition|(
name|classes
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|classes
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|numRooms
init|=
literal|0
decl_stmt|;
name|Iterator
name|iter
init|=
name|classes
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|ct
init|=
name|c
operator|.
name|getNbrRooms
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|ct
operator|>
name|numRooms
condition|)
name|numRooms
operator|=
name|ct
expr_stmt|;
block|}
return|return
name|numRooms
return|;
block|}
specifier|public
name|Set
name|getDistributionPreferences
parameter_list|()
block|{
name|TreeSet
name|prefs
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|getDistributionObjects
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|distObj
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|prefs
operator|.
name|add
argument_list|(
name|distObj
operator|.
name|getDistributionPref
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|prefs
return|;
block|}
specifier|public
name|Set
name|effectiveDistributionPreferences
parameter_list|(
name|Department
name|owningDept
parameter_list|)
block|{
if|if
condition|(
name|getDistributionObjects
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|TreeSet
name|prefs
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|distObj
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|DistributionPref
name|pref
init|=
name|distObj
operator|.
name|getDistributionPref
argument_list|()
decl_stmt|;
if|if
condition|(
name|owningDept
operator|==
literal|null
operator|||
name|owningDept
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getOwner
argument_list|()
argument_list|)
condition|)
name|prefs
operator|.
name|add
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
return|return
name|prefs
return|;
block|}
specifier|public
name|Set
name|effectivePreferences
parameter_list|(
name|Class
name|type
parameter_list|)
block|{
if|if
condition|(
name|DistributionPref
operator|.
name|class
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|effectiveDistributionPreferences
argument_list|(
name|getManagingDept
argument_list|()
argument_list|)
return|;
comment|/*     		Department mgr = getManagingDept();     		if (mgr!=null)     			return mgr.getPreferences(type, this);     		else     			return null;     			*/
block|}
return|return
name|super
operator|.
name|effectivePreferences
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|public
name|DatePattern
name|effectiveDatePattern
parameter_list|()
block|{
if|if
condition|(
name|getDatePattern
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|getDatePattern
argument_list|()
return|;
return|return
name|getSession
argument_list|()
operator|.
name|getDefaultDatePatternNotNull
argument_list|()
return|;
block|}
annotation|@
name|Deprecated
specifier|public
name|boolean
name|canUseHardTimePreferences
parameter_list|(
name|User
name|user
parameter_list|)
block|{
if|if
condition|(
name|user
operator|.
name|isAdmin
argument_list|()
condition|)
return|return
literal|true
return|;
name|TimetableManager
name|tm
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|tm
operator|.
name|getDepartments
argument_list|()
operator|.
name|contains
argument_list|(
name|getManagingDept
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|getControllingDept
argument_list|()
operator|.
name|isAllowReqTime
argument_list|()
operator|!=
literal|null
operator|&&
name|getControllingDept
argument_list|()
operator|.
name|isAllowReqTime
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|getManagingDept
argument_list|()
operator|.
name|isAllowReqTime
argument_list|()
operator|!=
literal|null
operator|&&
name|getManagingDept
argument_list|()
operator|.
name|isAllowReqTime
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
operator|(
literal|false
operator|)
return|;
block|}
annotation|@
name|Deprecated
specifier|public
name|boolean
name|canUseHardRoomPreferences
parameter_list|(
name|User
name|user
parameter_list|)
block|{
if|if
condition|(
name|user
operator|.
name|isAdmin
argument_list|()
condition|)
return|return
literal|true
return|;
name|TimetableManager
name|tm
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|tm
operator|.
name|getDepartments
argument_list|()
operator|.
name|contains
argument_list|(
name|getManagingDept
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|getControllingDept
argument_list|()
operator|.
name|isAllowReqRoom
argument_list|()
operator|!=
literal|null
operator|&&
name|getControllingDept
argument_list|()
operator|.
name|isAllowReqRoom
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|getManagingDept
argument_list|()
operator|.
name|isAllowReqRoom
argument_list|()
operator|!=
literal|null
operator|&&
name|getManagingDept
argument_list|()
operator|.
name|isAllowReqRoom
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
operator|(
literal|false
operator|)
return|;
block|}
specifier|public
name|Set
name|getAvailableRooms
parameter_list|()
block|{
name|Set
name|rooms
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getManagingDept
argument_list|()
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|roomDept
init|=
operator|(
name|RoomDept
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|rooms
operator|.
name|add
argument_list|(
name|roomDept
operator|.
name|getRoom
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|rooms
return|;
block|}
specifier|public
name|Set
name|getAvailableRoomFeatures
parameter_list|()
block|{
name|Set
name|features
init|=
name|super
operator|.
name|getAvailableRoomFeatures
argument_list|()
decl_stmt|;
name|Department
name|dept
init|=
name|getManagingDept
argument_list|()
decl_stmt|;
if|if
condition|(
name|dept
operator|!=
literal|null
condition|)
name|features
operator|.
name|addAll
argument_list|(
name|DepartmentRoomFeature
operator|.
name|getAllDepartmentRoomFeatures
argument_list|(
name|dept
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|features
return|;
block|}
specifier|public
name|Set
name|getAvailableRoomGroups
parameter_list|()
block|{
name|Set
name|groups
init|=
name|super
operator|.
name|getAvailableRoomGroups
argument_list|()
decl_stmt|;
name|Department
name|dept
init|=
name|getManagingDept
argument_list|()
decl_stmt|;
if|if
condition|(
name|dept
operator|!=
literal|null
condition|)
name|groups
operator|.
name|addAll
argument_list|(
name|RoomGroup
operator|.
name|getAllDepartmentRoomGroups
argument_list|(
name|dept
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|groups
return|;
block|}
specifier|public
name|SchedulingSubpart
name|getNextSchedulingSubpart
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|Right
name|right
parameter_list|)
block|{
return|return
name|getNextSchedulingSubpart
argument_list|(
name|context
argument_list|,
operator|new
name|NavigationComparator
argument_list|()
argument_list|,
name|right
argument_list|)
return|;
block|}
specifier|public
name|SchedulingSubpart
name|getPreviousSchedulingSubpart
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|Right
name|right
parameter_list|)
block|{
return|return
name|getPreviousSchedulingSubpart
argument_list|(
name|context
argument_list|,
operator|new
name|NavigationComparator
argument_list|()
argument_list|,
name|right
argument_list|)
return|;
block|}
specifier|public
name|SchedulingSubpart
name|getNextSchedulingSubpart
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|Comparator
name|cmp
parameter_list|,
name|Right
name|right
parameter_list|)
block|{
name|Long
name|nextId
init|=
name|Navigation
operator|.
name|getNext
argument_list|(
name|context
argument_list|,
name|Navigation
operator|.
name|sSchedulingSubpartLevel
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|nextId
operator|.
name|longValue
argument_list|()
operator|<
literal|0
condition|)
return|return
literal|null
return|;
name|SchedulingSubpart
name|next
init|=
operator|(
operator|new
name|SchedulingSubpartDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|nextId
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|right
operator|!=
literal|null
operator|&&
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|next
argument_list|,
name|right
argument_list|)
condition|)
return|return
name|next
operator|.
name|getNextSchedulingSubpart
argument_list|(
name|context
argument_list|,
name|cmp
argument_list|,
name|right
argument_list|)
return|;
return|return
name|next
return|;
block|}
name|SchedulingSubpart
name|next
init|=
literal|null
decl_stmt|;
name|InstructionalOffering
name|offering
init|=
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
decl_stmt|;
while|while
condition|(
name|next
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
break|break;
for|for
control|(
name|Iterator
name|i
init|=
name|offering
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|c
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|c
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|s
init|=
operator|(
name|SchedulingSubpart
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|right
operator|!=
literal|null
operator|&&
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|s
argument_list|,
name|right
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|offering
operator|.
name|equals
argument_list|(
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|)
operator|&&
name|cmp
operator|.
name|compare
argument_list|(
name|this
argument_list|,
name|s
argument_list|)
operator|>=
literal|0
condition|)
continue|continue;
if|if
condition|(
name|next
operator|==
literal|null
operator|||
name|cmp
operator|.
name|compare
argument_list|(
name|next
argument_list|,
name|s
argument_list|)
operator|>
literal|0
condition|)
name|next
operator|=
name|s
expr_stmt|;
block|}
block|}
name|offering
operator|=
name|offering
operator|.
name|getNextInstructionalOffering
argument_list|(
name|context
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
block|}
return|return
name|next
return|;
block|}
specifier|public
name|SchedulingSubpart
name|getPreviousSchedulingSubpart
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|Comparator
name|cmp
parameter_list|,
name|Right
name|right
parameter_list|)
block|{
name|Long
name|previousId
init|=
name|Navigation
operator|.
name|getPrevious
argument_list|(
name|context
argument_list|,
name|Navigation
operator|.
name|sSchedulingSubpartLevel
argument_list|,
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|previousId
operator|.
name|longValue
argument_list|()
operator|<
literal|0
condition|)
return|return
literal|null
return|;
name|SchedulingSubpart
name|previous
init|=
operator|(
operator|new
name|SchedulingSubpartDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|previousId
argument_list|)
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|right
operator|!=
literal|null
operator|&&
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|previous
argument_list|,
name|right
argument_list|)
condition|)
return|return
name|previous
operator|.
name|getPreviousSchedulingSubpart
argument_list|(
name|context
argument_list|,
name|cmp
argument_list|,
name|right
argument_list|)
return|;
return|return
name|previous
return|;
block|}
name|SchedulingSubpart
name|previous
init|=
literal|null
decl_stmt|;
name|InstructionalOffering
name|offering
init|=
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
decl_stmt|;
while|while
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
break|break;
for|for
control|(
name|Iterator
name|i
init|=
name|offering
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|c
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|c
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|s
init|=
operator|(
name|SchedulingSubpart
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|right
operator|!=
literal|null
operator|&&
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|s
argument_list|,
name|right
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|offering
operator|.
name|equals
argument_list|(
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|)
operator|&&
name|cmp
operator|.
name|compare
argument_list|(
name|this
argument_list|,
name|s
argument_list|)
operator|<=
literal|0
condition|)
continue|continue;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|cmp
operator|.
name|compare
argument_list|(
name|previous
argument_list|,
name|s
argument_list|)
operator|<
literal|0
condition|)
name|previous
operator|=
name|s
expr_stmt|;
block|}
block|}
name|offering
operator|=
name|offering
operator|.
name|getPreviousInstructionalOffering
argument_list|(
name|context
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
block|}
return|return
name|previous
return|;
block|}
specifier|public
name|String
name|getSchedulingSubpartSuffix
parameter_list|()
block|{
return|return
name|getSchedulingSubpartSuffix
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|String
name|getSchedulingSubpartSuffix
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
return|return
name|getSchedulingSubpartSuffix
argument_list|(
name|hibSession
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|String
name|getSchedulingSubpartSuffix
parameter_list|(
name|boolean
name|save
parameter_list|)
block|{
return|return
name|getSchedulingSubpartSuffix
argument_list|(
literal|null
argument_list|,
name|save
argument_list|)
return|;
block|}
specifier|public
name|String
name|getSchedulingSubpartSuffix
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|boolean
name|save
parameter_list|)
block|{
name|String
name|suffix
init|=
name|getSchedulingSubpartSuffixCache
argument_list|()
decl_stmt|;
if|if
condition|(
name|suffix
operator|!=
literal|null
condition|)
return|return
operator|(
literal|"-"
operator|.
name|equals
argument_list|(
name|suffix
argument_list|)
condition|?
literal|""
else|:
name|suffix
operator|)
return|;
name|int
name|nrItypes
init|=
literal|0
decl_stmt|;
name|int
name|nrItypesBefore
init|=
literal|0
decl_stmt|;
name|SchedulingSubpartComparator
name|cmp
init|=
operator|new
name|SchedulingSubpartComparator
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getItype
argument_list|()
operator|.
name|equals
argument_list|(
name|getItype
argument_list|()
argument_list|)
condition|)
block|{
name|nrItypes
operator|++
expr_stmt|;
if|if
condition|(
name|cmp
operator|.
name|compare
argument_list|(
name|ss
argument_list|,
name|this
argument_list|)
operator|<
literal|0
condition|)
name|nrItypesBefore
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nrItypes
operator|<=
literal|1
operator|||
name|nrItypesBefore
operator|<
literal|1
condition|)
name|suffix
operator|=
literal|""
expr_stmt|;
else|else
name|suffix
operator|=
name|String
operator|.
name|valueOf
argument_list|(
operator|(
name|char
operator|)
operator|(
literal|'a'
operator|+
operator|(
name|nrItypesBefore
operator|-
literal|1
operator|)
operator|)
argument_list|)
expr_stmt|;
name|setSchedulingSubpartSuffixCache
argument_list|(
name|suffix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|"-"
else|:
name|suffix
argument_list|)
expr_stmt|;
if|if
condition|(
name|save
condition|)
block|{
if|if
condition|(
name|hibSession
operator|==
literal|null
condition|)
block|{
operator|(
operator|new
name|SchedulingSubpartDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|this
argument_list|)
expr_stmt|;
operator|(
operator|new
name|SchedulingSubpartDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|suffix
return|;
block|}
specifier|public
name|void
name|deleteAllDistributionPreferences
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i3
init|=
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i3
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|i3
operator|.
name|next
argument_list|()
decl_stmt|;
name|c
operator|.
name|deleteAllDistributionPreferences
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
block|}
name|boolean
name|deleted
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|relatedObject
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|DistributionPref
name|distributionPref
init|=
name|relatedObject
operator|.
name|getDistributionPref
argument_list|()
decl_stmt|;
name|distributionPref
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|remove
argument_list|(
name|relatedObject
argument_list|)
expr_stmt|;
name|Integer
name|seqNo
init|=
name|relatedObject
operator|.
name|getSequenceNumber
argument_list|()
decl_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|relatedObject
argument_list|)
expr_stmt|;
name|deleted
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|distributionPref
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PreferenceGroup
name|owner
init|=
name|distributionPref
operator|.
name|getOwner
argument_list|()
decl_stmt|;
name|owner
operator|.
name|getPreferences
argument_list|()
operator|.
name|remove
argument_list|(
name|distributionPref
argument_list|)
expr_stmt|;
name|getPreferences
argument_list|()
operator|.
name|remove
argument_list|(
name|distributionPref
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|distributionPref
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|seqNo
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|j
init|=
name|distributionPref
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|dObj
init|=
operator|(
name|DistributionObject
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|seqNo
operator|.
name|compareTo
argument_list|(
name|dObj
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
block|{
name|dObj
operator|.
name|setSequenceNumber
argument_list|(
operator|new
name|Integer
argument_list|(
name|dObj
operator|.
name|getSequenceNumber
argument_list|()
operator|.
name|intValue
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|dObj
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|distributionPref
argument_list|)
expr_stmt|;
block|}
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|deleted
condition|)
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getMaxExpectedCapacity
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|!=
literal|null
condition|)
name|ret
operator|+=
name|c
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
if|else if
condition|(
name|c
operator|.
name|getExpectedCapacity
argument_list|()
operator|!=
literal|null
condition|)
name|ret
operator|+=
name|c
operator|.
name|getExpectedCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|List
name|findAll
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
return|return
operator|(
operator|new
name|SchedulingSubpartDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct s from SchedulingSubpart s where "
operator|+
literal|"s.instrOfferingConfig.instructionalOffering.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
comment|/**      * Check if subpart has atleast two classes managed by different departments      * @return      */
specifier|public
name|boolean
name|hasMixedManagedClasses
parameter_list|()
block|{
name|Department
name|d
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Class_
name|c
range|:
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|d
operator|==
literal|null
condition|)
name|d
operator|=
name|c
operator|.
name|getManagingDept
argument_list|()
expr_stmt|;
if|else if
condition|(
operator|!
name|d
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getManagingDept
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Check if subpart has atleast one externally managed class      * @param user      * @return      */
specifier|public
name|boolean
name|hasExternallyManagedClasses
parameter_list|(
name|User
name|user
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|isEditableBy
argument_list|(
name|user
argument_list|)
operator|&&
name|c
operator|.
name|getManagingDept
argument_list|()
operator|.
name|isExternalManager
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|CourseCreditUnitConfig
name|getCredit
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|getCreditConfigs
argument_list|()
operator|==
literal|null
operator|||
name|this
operator|.
name|getCreditConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
operator|(
name|CourseCreditUnitConfig
operator|)
name|this
operator|.
name|getCreditConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|)
return|;
block|}
block|}
specifier|public
name|void
name|setCredit
parameter_list|(
name|CourseCreditUnitConfig
name|courseCreditUnitConfig
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|getCreditConfigs
argument_list|()
operator|==
literal|null
operator|||
name|this
operator|.
name|getCreditConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|addTocreditConfigs
argument_list|(
name|courseCreditUnitConfig
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|this
operator|.
name|getCreditConfigs
argument_list|()
operator|.
name|contains
argument_list|(
name|courseCreditUnitConfig
argument_list|)
condition|)
block|{
name|this
operator|.
name|getCreditConfigs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|getCreditConfigs
argument_list|()
operator|.
name|add
argument_list|(
name|courseCreditUnitConfig
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//course already contains this config so we do not need to add it again.
block|}
block|}
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|SchedulingSubpart
name|newSchedulingSubpart
init|=
operator|new
name|SchedulingSubpart
argument_list|()
decl_stmt|;
name|newSchedulingSubpart
operator|.
name|setAutoSpreadInTime
argument_list|(
name|isAutoSpreadInTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getCreditConfigs
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|CourseCreditUnitConfig
name|ccuc
init|=
literal|null
decl_stmt|;
name|CourseCreditUnitConfig
name|newCcuc
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|credIt
init|=
name|getCreditConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|credIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ccuc
operator|=
operator|(
name|CourseCreditUnitConfig
operator|)
name|credIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|newCcuc
operator|=
operator|(
name|CourseCreditUnitConfig
operator|)
name|ccuc
operator|.
name|clone
argument_list|()
expr_stmt|;
name|newCcuc
operator|.
name|setOwner
argument_list|(
name|newSchedulingSubpart
argument_list|)
expr_stmt|;
name|newSchedulingSubpart
operator|.
name|addTocreditConfigs
argument_list|(
name|newCcuc
argument_list|)
expr_stmt|;
block|}
block|}
name|newSchedulingSubpart
operator|.
name|setDatePattern
argument_list|(
name|getDatePattern
argument_list|()
argument_list|)
expr_stmt|;
name|newSchedulingSubpart
operator|.
name|setItype
argument_list|(
name|getItype
argument_list|()
argument_list|)
expr_stmt|;
name|newSchedulingSubpart
operator|.
name|setMinutesPerWk
argument_list|(
name|getMinutesPerWk
argument_list|()
argument_list|)
expr_stmt|;
name|newSchedulingSubpart
operator|.
name|setStudentAllowOverlap
argument_list|(
name|isStudentAllowOverlap
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|newSchedulingSubpart
operator|)
return|;
block|}
specifier|public
name|Object
name|cloneWithPreferences
parameter_list|()
block|{
name|SchedulingSubpart
name|newSchedulingSubpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|clone
argument_list|()
decl_stmt|;
if|if
condition|(
name|getPreferences
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Preference
name|p
init|=
literal|null
decl_stmt|;
name|Preference
name|newPref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|prefIt
init|=
name|getPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|prefIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|p
operator|=
operator|(
name|Preference
operator|)
name|prefIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|p
operator|instanceof
name|DistributionPref
operator|)
condition|)
block|{
name|newPref
operator|=
operator|(
name|Preference
operator|)
name|p
operator|.
name|clone
argument_list|()
expr_stmt|;
name|newPref
operator|.
name|setOwner
argument_list|(
name|newSchedulingSubpart
argument_list|)
expr_stmt|;
name|newSchedulingSubpart
operator|.
name|addTopreferences
argument_list|(
name|newPref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|(
name|newSchedulingSubpart
operator|)
return|;
block|}
specifier|public
name|Object
name|cloneDeep
parameter_list|()
block|{
name|SchedulingSubpart
name|newSchedulingSubpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|cloneWithPreferences
argument_list|()
decl_stmt|;
name|HashMap
name|childClassToParentClass
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|getClasses
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Class_
name|origClass
init|=
literal|null
decl_stmt|;
name|Class_
name|newClass
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|cIt
init|=
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|cIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|origClass
operator|=
operator|(
name|Class_
operator|)
name|cIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|newClass
operator|=
operator|(
name|Class_
operator|)
name|origClass
operator|.
name|cloneWithPreferences
argument_list|()
expr_stmt|;
name|newClass
operator|.
name|setSchedulingSubpart
argument_list|(
name|newSchedulingSubpart
argument_list|)
expr_stmt|;
name|newSchedulingSubpart
operator|.
name|addToclasses
argument_list|(
name|newClass
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setSectionNumberCache
argument_list|(
name|origClass
operator|.
name|getSectionNumberCache
argument_list|()
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setUniqueIdRolledForwardFrom
argument_list|(
name|origClass
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|origClass
operator|.
name|getChildClasses
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Class_
name|childClass
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|ccIt
init|=
name|origClass
operator|.
name|getChildClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|ccIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|childClass
operator|=
operator|(
name|Class_
operator|)
name|ccIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|childClassToParentClass
operator|.
name|put
argument_list|(
name|childClass
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|newClass
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|getChildSubparts
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SchedulingSubpart
name|origChildSubpart
init|=
literal|null
decl_stmt|;
name|SchedulingSubpart
name|newChildSubpart
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|ssIt
init|=
name|getChildSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|ssIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|origChildSubpart
operator|=
operator|(
name|SchedulingSubpart
operator|)
name|ssIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|newChildSubpart
operator|=
operator|(
name|SchedulingSubpart
operator|)
name|origChildSubpart
operator|.
name|cloneDeep
argument_list|()
expr_stmt|;
name|newChildSubpart
operator|.
name|setParentSubpart
argument_list|(
name|newSchedulingSubpart
argument_list|)
expr_stmt|;
name|newSchedulingSubpart
operator|.
name|addTochildSubparts
argument_list|(
name|newChildSubpart
argument_list|)
expr_stmt|;
if|if
condition|(
name|newChildSubpart
operator|.
name|getClasses
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Class_
name|newChildClass
init|=
literal|null
decl_stmt|;
name|Class_
name|newParentClass
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|nccIt
init|=
name|newChildSubpart
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|nccIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|newChildClass
operator|=
operator|(
name|Class_
operator|)
name|nccIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|newParentClass
operator|=
operator|(
name|Class_
operator|)
name|childClassToParentClass
operator|.
name|get
argument_list|(
name|newChildClass
operator|.
name|getUniqueIdRolledForwardFrom
argument_list|()
argument_list|)
expr_stmt|;
name|newChildClass
operator|.
name|setParentClass
argument_list|(
name|newParentClass
argument_list|)
expr_stmt|;
name|newParentClass
operator|.
name|addTochildClasses
argument_list|(
name|newChildClass
argument_list|)
expr_stmt|;
name|newChildClass
operator|.
name|setUniqueIdRolledForwardFrom
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|newSchedulingSubpart
operator|.
name|getClasses
argument_list|()
operator|!=
literal|null
operator|&&
name|getParentSubpart
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Class_
name|newClass
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|cIt
init|=
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|cIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|newClass
operator|=
operator|(
name|Class_
operator|)
name|cIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|newClass
operator|.
name|setUniqueIdRolledForwardFrom
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|newSchedulingSubpart
operator|)
return|;
block|}
specifier|public
specifier|static
name|SchedulingSubpart
name|findByIdRolledForwardFrom
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Long
name|uniqueIdRolledForwardFrom
parameter_list|)
block|{
return|return
operator|(
name|SchedulingSubpart
operator|)
operator|new
name|SchedulingSubpartDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select ss from SchedulingSubpart ss where ss.instrOfferingConfig.instructionalOffering.session.uniqueId=:sessionId and ss.uniqueIdRolledForwardFrom=:uniqueIdRolledForwardFrom"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"uniqueIdRolledForwardFrom"
argument_list|,
name|uniqueIdRolledForwardFrom
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Department
name|getDepartment
parameter_list|()
block|{
return|return
name|getManagingDept
argument_list|()
return|;
block|}
block|}
end_class

end_unit

