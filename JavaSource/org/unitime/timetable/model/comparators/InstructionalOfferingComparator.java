begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_comment
comment|/**  *  @author Heston Fernandes  */
end_comment

begin_class
specifier|public
class|class
name|InstructionalOfferingComparator
implements|implements
name|Comparator
block|{
specifier|private
name|Long
name|subjectUID
decl_stmt|;
specifier|public
name|InstructionalOfferingComparator
parameter_list|(
name|Long
name|subjectUID
parameter_list|)
block|{
name|this
operator|.
name|subjectUID
operator|=
name|subjectUID
expr_stmt|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|InstructionalOffering
name|i1
init|=
operator|(
name|InstructionalOffering
operator|)
name|o1
decl_stmt|;
name|InstructionalOffering
name|i2
init|=
operator|(
name|InstructionalOffering
operator|)
name|o2
decl_stmt|;
if|if
condition|(
name|i1
operator|.
name|getCourseOfferings
argument_list|()
operator|==
literal|null
operator|||
name|i1
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"i1 - Instructional Offering must have at least on Course Offering"
argument_list|)
throw|;
if|if
condition|(
name|i2
operator|.
name|getCourseOfferings
argument_list|()
operator|==
literal|null
operator|||
name|i2
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"i2 - Instructional Offering must have at least on Course Offering"
argument_list|)
throw|;
if|if
condition|(
name|i1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|i2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
return|return
literal|0
return|;
name|CourseOffering
name|co1
init|=
name|i1
operator|.
name|findSortCourseOfferingForSubjectArea
argument_list|(
name|getSubjectUID
argument_list|()
argument_list|)
decl_stmt|;
name|CourseOffering
name|co2
init|=
name|i2
operator|.
name|findSortCourseOfferingForSubjectArea
argument_list|(
name|getSubjectUID
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|cmp
init|=
name|co1
operator|.
name|getSubjectAreaAbbv
argument_list|()
operator|.
name|compareTo
argument_list|(
name|co2
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
operator|(
name|co1
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|compareTo
argument_list|(
name|co2
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|co1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|co2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @return Returns the subjectUID.      */
specifier|public
name|Long
name|getSubjectUID
parameter_list|()
block|{
return|return
name|subjectUID
return|;
block|}
comment|/**      * @param subjectUID      *            The subjectUID to set.      */
specifier|public
name|void
name|setSubjectUID
parameter_list|(
name|Long
name|subjectUID
parameter_list|)
block|{
name|this
operator|.
name|subjectUID
operator|=
name|subjectUID
expr_stmt|;
block|}
block|}
end_class

end_unit

