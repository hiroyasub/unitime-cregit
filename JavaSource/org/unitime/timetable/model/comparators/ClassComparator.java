begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2008 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_comment
comment|/**  * Compare Classes based on specified parameter  * Choices are - ID (default), Label and Itype  *   * @author Heston Fernandes, Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ClassComparator
implements|implements
name|Comparator
argument_list|<
name|Class_
argument_list|>
block|{
specifier|private
name|Long
name|subjectUID
init|=
literal|null
decl_stmt|;
comment|/** Compare 2 classes on UniqueId - Default **/
specifier|public
specifier|static
specifier|final
name|short
name|COMPARE_BY_ID
init|=
literal|1
decl_stmt|;
comment|/** Compare 2 classes on Class Label **/
specifier|public
specifier|static
specifier|final
name|short
name|COMPARE_BY_LABEL
init|=
literal|2
decl_stmt|;
comment|/** Compare 2 classes on Subpart / Itype **/
specifier|public
specifier|static
specifier|final
name|short
name|COMPARE_BY_ITYPE
init|=
literal|3
decl_stmt|;
comment|/** Compare 2 classes on SubjArea, CourseNumber, Itype, Section **/
specifier|public
specifier|static
specifier|final
name|short
name|COMPARE_BY_SUBJ_NBR_ITYP_SEC
init|=
literal|4
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|short
name|COMPARE_BY_HIERARCHY
init|=
literal|5
decl_stmt|;
comment|// Decides method to compare
specifier|private
name|short
name|compareBy
decl_stmt|;
specifier|public
name|ClassComparator
parameter_list|(
name|Long
name|subjectUID
parameter_list|,
name|short
name|compareBy
parameter_list|)
block|{
name|this
operator|.
name|subjectUID
operator|=
name|subjectUID
expr_stmt|;
name|this
operator|.
name|compareBy
operator|=
name|compareBy
expr_stmt|;
block|}
specifier|public
name|ClassComparator
parameter_list|(
name|short
name|compareBy
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|compareBy
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|int
name|compare
parameter_list|(
name|Comparable
name|c1
parameter_list|,
name|Comparable
name|c2
parameter_list|)
block|{
return|return
operator|(
name|c1
operator|==
literal|null
condition|?
operator|(
name|c2
operator|==
literal|null
condition|?
literal|0
else|:
operator|-
literal|1
operator|)
else|:
operator|(
name|c2
operator|==
literal|null
condition|?
literal|1
else|:
name|c1
operator|.
name|compareTo
argument_list|(
name|c2
argument_list|)
operator|)
operator|)
return|;
block|}
specifier|public
specifier|static
name|int
name|compareInstructors
parameter_list|(
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|i1
parameter_list|,
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|i2
parameter_list|)
block|{
if|if
condition|(
name|i1
operator|.
name|isEmpty
argument_list|()
operator|||
name|i2
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|Double
operator|.
name|compare
argument_list|(
name|i1
operator|.
name|size
argument_list|()
argument_list|,
name|i2
operator|.
name|size
argument_list|()
argument_list|)
return|;
if|if
condition|(
name|i1
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
name|Collections
operator|.
name|sort
argument_list|(
name|i1
argument_list|)
expr_stmt|;
if|if
condition|(
name|i2
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
name|Collections
operator|.
name|sort
argument_list|(
name|i2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Math
operator|.
name|min
argument_list|(
name|i1
operator|.
name|size
argument_list|()
argument_list|,
name|i2
operator|.
name|size
argument_list|()
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|int
name|cmp
init|=
name|compare
argument_list|(
name|i1
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|i2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
return|return
name|Double
operator|.
name|compare
argument_list|(
name|i1
operator|.
name|size
argument_list|()
argument_list|,
name|i2
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isParentSameIType
parameter_list|(
name|SchedulingSubpart
name|s1
parameter_list|,
name|SchedulingSubpart
name|s2
parameter_list|)
block|{
name|SchedulingSubpart
name|p1
init|=
name|s1
operator|.
name|getParentSubpart
argument_list|()
decl_stmt|;
if|if
condition|(
name|p1
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|p1
operator|.
name|equals
argument_list|(
name|s2
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
name|p1
operator|.
name|getItype
argument_list|()
operator|.
name|equals
argument_list|(
name|s2
operator|.
name|getItype
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
name|isParentSameIType
argument_list|(
name|p1
argument_list|,
name|s2
argument_list|)
return|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|Class_
name|c1
parameter_list|,
name|Class_
name|c2
parameter_list|)
block|{
name|int
name|cmp
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|compareBy
condition|)
block|{
case|case
name|COMPARE_BY_LABEL
case|:
name|cmp
operator|=
name|c1
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getSchedulingSubpartLabel
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c1
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getSchedulingSubpartLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|c1
operator|.
name|getClassLabel
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
case|case
name|COMPARE_BY_ITYPE
case|:
name|cmp
operator|=
name|c1
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
case|case
name|COMPARE_BY_HIERARCHY
case|:
if|if
condition|(
operator|!
name|c1
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|equals
argument_list|(
name|c2
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
condition|)
block|{
name|Comparator
name|comparator
init|=
operator|new
name|SchedulingSubpartComparator
argument_list|(
name|subjectUID
argument_list|)
decl_stmt|;
return|return
name|comparator
operator|.
name|compare
argument_list|(
name|c1
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|,
name|c2
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
return|;
block|}
name|cmp
operator|=
name|c1
operator|.
name|getSectionNumber
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getSectionNumber
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
case|case
name|COMPARE_BY_SUBJ_NBR_ITYP_SEC
case|:
name|cmp
operator|=
name|c1
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|c1
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|c1
operator|.
name|getSectionNumber
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getSectionNumber
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|c1
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
case|case
name|COMPARE_BY_ID
case|:
default|default :
return|return
name|c1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
name|Long
name|getSubjectUID
parameter_list|()
block|{
return|return
name|subjectUID
return|;
block|}
specifier|public
name|void
name|setSubjectUID
parameter_list|(
name|Long
name|subjectUID
parameter_list|)
block|{
name|this
operator|.
name|subjectUID
operator|=
name|subjectUID
expr_stmt|;
block|}
block|}
end_class

end_unit

