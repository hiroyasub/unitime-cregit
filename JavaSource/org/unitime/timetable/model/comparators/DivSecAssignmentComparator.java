begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DatePatternDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TimePatternDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ClassAssignmentProxy
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_comment
comment|/**  *   * @author Tomas Muller  *  */
end_comment

begin_class
specifier|public
class|class
name|DivSecAssignmentComparator
implements|implements
name|Comparator
block|{
specifier|private
name|boolean
name|iConsiderParentChildRelation
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iMixConfigs
init|=
literal|false
decl_stmt|;
specifier|private
name|ClassAssignmentProxy
name|iProxy
init|=
literal|null
decl_stmt|;
specifier|public
name|DivSecAssignmentComparator
parameter_list|(
name|ClassAssignmentProxy
name|proxy
parameter_list|,
name|boolean
name|considerParentChildRelation
parameter_list|,
name|boolean
name|mixConfigs
parameter_list|)
block|{
name|iProxy
operator|=
name|proxy
expr_stmt|;
name|iConsiderParentChildRelation
operator|=
name|considerParentChildRelation
expr_stmt|;
name|iMixConfigs
operator|=
name|mixConfigs
expr_stmt|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|Class_
name|c1
init|=
operator|(
name|o1
operator|instanceof
name|Assignment
condition|?
operator|(
operator|(
name|Assignment
operator|)
name|o1
operator|)
operator|.
name|getClazz
argument_list|()
else|:
operator|(
name|Class_
operator|)
name|o1
operator|)
decl_stmt|;
name|Class_
name|c2
init|=
operator|(
name|o2
operator|instanceof
name|Assignment
condition|?
operator|(
operator|(
name|Assignment
operator|)
name|o2
operator|)
operator|.
name|getClazz
argument_list|()
else|:
operator|(
name|Class_
operator|)
name|o2
operator|)
decl_stmt|;
name|int
name|cmp
init|=
name|compareClasses
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|Assignment
name|a1
init|=
operator|(
name|o1
operator|instanceof
name|Assignment
condition|?
operator|(
name|Assignment
operator|)
name|o1
else|:
literal|null
operator|)
decl_stmt|;
name|Assignment
name|a2
init|=
operator|(
name|o2
operator|instanceof
name|Assignment
condition|?
operator|(
name|Assignment
operator|)
name|o2
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|a1
operator|==
literal|null
condition|)
return|return
operator|(
name|a2
operator|==
literal|null
condition|?
name|c1
operator|.
name|getSectionNumber
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getSectionNumber
argument_list|()
argument_list|)
else|:
literal|1
operator|)
return|;
if|if
condition|(
name|a2
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|compareAssignments
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareAssignments
parameter_list|(
name|Assignment
name|a1
parameter_list|,
name|Assignment
name|a2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|comparePlacements
argument_list|(
name|a1
operator|.
name|getClazz
argument_list|()
argument_list|,
name|a2
operator|.
name|getClazz
argument_list|()
argument_list|,
name|a1
operator|.
name|getPlacement
argument_list|()
argument_list|,
name|a2
operator|.
name|getPlacement
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|a1
operator|.
name|getClazz
argument_list|()
operator|.
name|getSectionNumber
argument_list|()
operator|.
name|compareTo
argument_list|(
name|a2
operator|.
name|getClazz
argument_list|()
operator|.
name|getSectionNumber
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|a1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|a2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|comparePlacements
parameter_list|(
name|Class_
name|c1
parameter_list|,
name|Class_
name|c2
parameter_list|,
name|Placement
name|p1
parameter_list|,
name|Placement
name|p2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|compareTimeLocations
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|,
name|p1
operator|.
name|getTimeLocation
argument_list|()
argument_list|,
name|p2
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
if|if
condition|(
name|iMixConfigs
condition|)
block|{
name|cmp
operator|=
name|compareInstrOfferingConfigs
argument_list|(
name|c1
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
argument_list|,
name|c2
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|cmp
return|;
block|}
comment|/* 		if (p1.isMultiRoom()) { 			if (p2.isMultiRoom()) { 				cmp = compareRoomLocations(p1.getRoomLocations(), p2.getRoomLocations()); 			} else { 				Vector rv2 = new Vector(1); rv2.addElement(p2.getRoomLocation()); 				cmp = compareRoomLocations(p1.getRoomLocations(), rv2); 			} 		} else { 			if (p2.isMultiRoom()) { 				Vector rv1 = new Vector(1); rv1.addElement(p1.getRoomLocation()); 				cmp = compareRoomLocations(rv1, p2.getRoomLocations()); 			} else { 				cmp = compareRoomLocations(p1.getRoomLocation(), p2.getRoomLocation()); 			} 		} 		if (cmp!=0) return cmp; 		*/
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareRoomLocations
parameter_list|(
name|Vector
name|rv1
parameter_list|,
name|Vector
name|rv2
parameter_list|)
block|{
if|if
condition|(
name|rv1
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|(
name|rv2
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
operator|-
literal|1
operator|)
return|;
if|if
condition|(
name|rv2
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|rv1
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
name|Collections
operator|.
name|sort
argument_list|(
name|rv1
argument_list|)
expr_stmt|;
if|if
condition|(
name|rv2
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
name|Collections
operator|.
name|sort
argument_list|(
name|rv2
argument_list|)
expr_stmt|;
name|int
name|min
init|=
name|Math
operator|.
name|min
argument_list|(
name|rv1
operator|.
name|size
argument_list|()
argument_list|,
name|rv2
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|min
condition|;
name|i
operator|++
control|)
block|{
name|int
name|cmp
init|=
name|compareRoomLocations
argument_list|(
operator|(
name|RoomLocation
operator|)
name|rv1
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
argument_list|,
operator|(
name|RoomLocation
operator|)
name|rv2
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
return|return
name|Double
operator|.
name|compare
argument_list|(
name|rv1
operator|.
name|size
argument_list|()
argument_list|,
name|rv2
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareRoomLocations
parameter_list|(
name|RoomLocation
name|r1
parameter_list|,
name|RoomLocation
name|r2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|r1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|r1
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareTimeLocations
parameter_list|(
name|Class_
name|c1
parameter_list|,
name|Class_
name|c2
parameter_list|,
name|TimeLocation
name|t1
parameter_list|,
name|TimeLocation
name|t2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|Double
operator|.
name|compare
argument_list|(
name|t1
operator|.
name|getStartSlots
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|,
name|t2
operator|.
name|getStartSlots
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|Double
operator|.
name|compare
argument_list|(
name|t1
operator|.
name|getDayCode
argument_list|()
argument_list|,
name|t2
operator|.
name|getDayCode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|Double
operator|.
name|compare
argument_list|(
name|t1
operator|.
name|getLength
argument_list|()
argument_list|,
name|t2
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
operator|(
operator|new
name|TimePatternDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|t1
operator|.
name|getTimePatternId
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
operator|(
operator|new
name|TimePatternDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|t2
operator|.
name|getTimePatternId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
operator|(
operator|new
name|DatePatternDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|t1
operator|.
name|getDatePatternId
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
operator|(
operator|new
name|DatePatternDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|t2
operator|.
name|getDatePatternId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|t1
operator|.
name|getLongName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|t2
operator|.
name|getLongName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
if|if
condition|(
name|c1
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|equals
argument_list|(
name|c2
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
operator|&&
name|c1
operator|.
name|getChildClasses
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|c2
operator|.
name|getChildClasses
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Class_
name|cc1
init|=
operator|(
name|Class_
operator|)
name|c1
operator|.
name|getChildClasses
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Class_
name|cc2
init|=
operator|(
name|Class_
operator|)
name|c2
operator|.
name|getChildClasses
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|iConsiderParentChildRelation
operator|||
name|cc1
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|equals
argument_list|(
name|c1
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
condition|)
block|{
name|Assignment
name|a1
init|=
literal|null
decl_stmt|;
try|try
block|{
name|a1
operator|=
name|iProxy
operator|.
name|getAssignment
argument_list|(
name|cc1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|Assignment
name|a2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|a2
operator|=
name|iProxy
operator|.
name|getAssignment
argument_list|(
name|cc2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|a1
operator|==
literal|null
operator|||
name|a2
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|cc1
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|equals
argument_list|(
name|c1
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
condition|)
return|return
name|c1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|compareTimeLocations
argument_list|(
name|cc1
argument_list|,
name|cc2
argument_list|,
name|a1
operator|.
name|getTimeLocation
argument_list|()
argument_list|,
name|a2
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareClasses
parameter_list|(
name|Class_
name|c1
parameter_list|,
name|Class_
name|c2
parameter_list|)
block|{
if|if
condition|(
name|iConsiderParentChildRelation
operator|&&
name|c1
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|equals
argument_list|(
name|c2
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
condition|)
block|{
comment|// if (c1.getSchedulingSubpart().getInstrOfferingConfig().getInstructionalOffering().getNrClasses(c1.getSchedulingSubpart().getItype())<100) {
name|int
name|cmp
init|=
name|compareParentClasses
argument_list|(
name|c1
operator|.
name|getParentClass
argument_list|()
argument_list|,
name|c2
operator|.
name|getParentClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
comment|//}
block|}
return|return
name|compareSchedulingSubparts
argument_list|(
name|c1
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|,
name|c2
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareParentClasses
parameter_list|(
name|Class_
name|c1
parameter_list|,
name|Class_
name|c2
parameter_list|)
block|{
if|if
condition|(
name|c1
operator|==
literal|null
operator|||
name|c2
operator|==
literal|null
condition|)
return|return
literal|0
return|;
name|int
name|cmp
init|=
name|compareParentClasses
argument_list|(
name|c1
operator|.
name|getParentClass
argument_list|()
argument_list|,
name|c2
operator|.
name|getParentClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
if|if
condition|(
name|c1
operator|.
name|getDivSecNumber
argument_list|()
operator|!=
literal|null
operator|&&
name|c2
operator|.
name|getDivSecNumber
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cmp
operator|=
name|c1
operator|.
name|getDivSecNumber
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getDivSecNumber
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
name|Assignment
name|a1
init|=
literal|null
decl_stmt|;
try|try
block|{
name|a1
operator|=
name|iProxy
operator|.
name|getAssignment
argument_list|(
name|c1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|Assignment
name|a2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|a2
operator|=
name|iProxy
operator|.
name|getAssignment
argument_list|(
name|c2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|a1
operator|!=
literal|null
operator|&&
name|a2
operator|!=
literal|null
condition|)
block|{
name|cmp
operator|=
name|comparePlacements
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|,
name|a1
operator|.
name|getPlacement
argument_list|()
argument_list|,
name|a2
operator|.
name|getPlacement
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
return|return
name|c1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isParent
parameter_list|(
name|SchedulingSubpart
name|s1
parameter_list|,
name|SchedulingSubpart
name|s2
parameter_list|)
block|{
name|SchedulingSubpart
name|p2
init|=
name|s2
operator|.
name|getParentSubpart
argument_list|()
decl_stmt|;
if|if
condition|(
name|p2
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|p2
operator|.
name|equals
argument_list|(
name|s1
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
name|isParent
argument_list|(
name|s1
argument_list|,
name|p2
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareSchedulingSubparts
parameter_list|(
name|SchedulingSubpart
name|s1
parameter_list|,
name|SchedulingSubpart
name|s2
parameter_list|)
block|{
if|if
condition|(
name|s1
operator|.
name|equals
argument_list|(
name|s2
argument_list|)
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|iMixConfigs
condition|)
block|{
name|int
name|cmp
init|=
name|compareInstructionalOfferings
argument_list|(
name|s1
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|,
name|s2
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
if|if
condition|(
name|isParent
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|isParent
argument_list|(
name|s2
argument_list|,
name|s1
argument_list|)
condition|)
return|return
literal|1
return|;
name|cmp
operator|=
name|s1
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
literal|0
return|;
block|}
name|int
name|cmp
init|=
name|compareInstrOfferingConfigs
argument_list|(
name|s1
operator|.
name|getInstrOfferingConfig
argument_list|()
argument_list|,
name|s2
operator|.
name|getInstrOfferingConfig
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
if|if
condition|(
name|isParent
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|isParent
argument_list|(
name|s2
argument_list|,
name|s1
argument_list|)
condition|)
return|return
literal|1
return|;
name|cmp
operator|=
name|s1
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|s1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareInstrOfferingConfigs
parameter_list|(
name|InstrOfferingConfig
name|c1
parameter_list|,
name|InstrOfferingConfig
name|c2
parameter_list|)
block|{
if|if
condition|(
name|c1
operator|.
name|equals
argument_list|(
name|c2
argument_list|)
condition|)
return|return
literal|0
return|;
name|int
name|cmp
init|=
name|compareInstructionalOfferings
argument_list|(
name|c1
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|,
name|c2
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|c1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareInstructionalOfferings
parameter_list|(
name|InstructionalOffering
name|o1
parameter_list|,
name|InstructionalOffering
name|o2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|o1
operator|.
name|getCourseName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|o1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

