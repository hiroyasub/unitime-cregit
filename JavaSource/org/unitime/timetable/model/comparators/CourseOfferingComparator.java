begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_comment
comment|/**  * Compares course offerings based on Subject Area and Course Number  *   * @author Heston Fernandes  */
end_comment

begin_class
specifier|public
class|class
name|CourseOfferingComparator
implements|implements
name|Comparator
block|{
comment|/** Compare 2 offerings on Subject Area and Course Number - Default **/
specifier|public
specifier|static
specifier|final
name|short
name|COMPARE_BY_SUBJ_CRS
init|=
literal|1
decl_stmt|;
comment|/** Compare 2 offerings on Controlling Course Flag **/
specifier|public
specifier|static
specifier|final
name|short
name|COMPARE_BY_CTRL_CRS
init|=
literal|2
decl_stmt|;
comment|// Decides method to compare
specifier|private
name|short
name|compareBy
decl_stmt|;
specifier|public
name|CourseOfferingComparator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|compareBy
operator|=
name|COMPARE_BY_SUBJ_CRS
expr_stmt|;
block|}
specifier|public
name|CourseOfferingComparator
parameter_list|(
name|short
name|compareBy
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|compareBy
operator|=
name|compareBy
expr_stmt|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
comment|// Check if objects are of class Instructional Offering
if|if
condition|(
operator|!
operator|(
name|o1
operator|instanceof
name|CourseOffering
operator|)
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"o1 Class must be of type CourseOffering"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|o2
operator|instanceof
name|CourseOffering
operator|)
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"o2 Class must be of type CourseOffering"
argument_list|)
throw|;
block|}
name|CourseOffering
name|co1
init|=
operator|(
name|CourseOffering
operator|)
name|o1
decl_stmt|;
name|CourseOffering
name|co2
init|=
operator|(
name|CourseOffering
operator|)
name|o2
decl_stmt|;
comment|// Same Course Offering
if|if
condition|(
name|co1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|co2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
comment|// One of the offerings is a Controlling Course
if|if
condition|(
name|compareBy
operator|==
name|COMPARE_BY_CTRL_CRS
condition|)
block|{
if|if
condition|(
name|co1
operator|.
name|isIsControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|co2
operator|.
name|isIsControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
return|return
literal|1
return|;
block|}
comment|// Compare by course name (also used if neither is controlling)
if|if
condition|(
name|co1
operator|.
name|getSubjectAreaAbbv
argument_list|()
operator|.
name|equals
argument_list|(
name|co2
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|co1
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|compareTo
argument_list|(
name|co2
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|co1
operator|.
name|getSubjectAreaAbbv
argument_list|()
operator|.
name|compareTo
argument_list|(
name|co2
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
operator|)
return|;
block|}
block|}
block|}
end_class

end_unit

