begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2008 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_class
specifier|public
class|class
name|ClassInstructorComparator
implements|implements
name|Comparator
block|{
specifier|private
name|ClassComparator
name|iCC
init|=
literal|null
decl_stmt|;
specifier|public
name|ClassInstructorComparator
parameter_list|(
name|ClassComparator
name|cc
parameter_list|)
block|{
name|iCC
operator|=
name|cc
expr_stmt|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|ClassInstructor
name|ci1
init|=
operator|(
name|ClassInstructor
operator|)
name|o1
decl_stmt|;
name|ClassInstructor
name|ci2
init|=
operator|(
name|ClassInstructor
operator|)
name|o2
decl_stmt|;
return|return
name|iCC
operator|.
name|compare
argument_list|(
name|ci1
operator|.
name|getClassInstructing
argument_list|()
argument_list|,
name|ci2
operator|.
name|getClassInstructing
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

