begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_comment
comment|/**  *  @author Heston Fernandes  */
end_comment

begin_class
specifier|public
class|class
name|DepartmentComparator
implements|implements
name|Comparator
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
comment|// Check if objects are of Department
if|if
condition|(
operator|!
operator|(
name|o1
operator|instanceof
name|Department
operator|)
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"o1 Class must be of type Department"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|o2
operator|instanceof
name|Department
operator|)
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"o2 Class must be of type Department"
argument_list|)
throw|;
block|}
name|Department
name|d1
init|=
operator|(
name|Department
operator|)
name|o1
decl_stmt|;
name|Department
name|d2
init|=
operator|(
name|Department
operator|)
name|o2
decl_stmt|;
if|if
condition|(
name|d1
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|d2
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|d1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|d2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
if|if
condition|(
name|d1
operator|.
name|getDeptCode
argument_list|()
operator|.
name|equals
argument_list|(
name|d2
operator|.
name|getDeptCode
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|d1
operator|.
name|getSessionId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|d2
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|d1
operator|.
name|getDeptCode
argument_list|()
operator|.
name|compareTo
argument_list|(
name|d2
operator|.
name|getDeptCode
argument_list|()
argument_list|)
operator|)
return|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|d1
operator|.
name|getDeptCode
argument_list|()
operator|!=
literal|null
operator|&&
name|d2
operator|.
name|getDeptCode
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|d1
operator|.
name|getDeptCode
argument_list|()
operator|.
name|equals
argument_list|(
name|d2
operator|.
name|getDeptCode
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|d1
operator|.
name|getSessionId
argument_list|()
operator|!=
literal|null
operator|&&
name|d2
operator|.
name|getSessionId
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|d1
operator|.
name|getSessionId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|d2
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
operator|-
literal|1
operator|)
return|;
block|}
block|}
else|else
block|{
return|return
operator|(
name|d1
operator|.
name|getDeptCode
argument_list|()
operator|.
name|compareTo
argument_list|(
name|d2
operator|.
name|getDeptCode
argument_list|()
argument_list|)
operator|)
return|;
block|}
block|}
else|else
block|{
return|return
operator|(
operator|-
literal|1
operator|)
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

