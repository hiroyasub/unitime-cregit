begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2008 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_comment
comment|/**  * Compares rooms based on scheduled room type.   * If types are the same it compares based on capacity  *   * @author Heston Fernandes, Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|RoomTypeComparator
implements|implements
name|Comparator
block|{
comment|/** 	 * Compares rooms based on scheduled room type, capacity 	 */
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o1
operator|instanceof
name|Room
operator|)
condition|)
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"o1 must be of type Room"
argument_list|)
throw|;
if|if
condition|(
operator|!
operator|(
name|o2
operator|instanceof
name|Room
operator|)
condition|)
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"o2 must be of type Room"
argument_list|)
throw|;
name|Room
name|r1
init|=
operator|(
name|Room
operator|)
name|o1
decl_stmt|;
name|Room
name|r2
init|=
operator|(
name|Room
operator|)
name|o2
decl_stmt|;
name|String
name|c1
init|=
name|r1
operator|.
name|getRoomTypeLabel
argument_list|()
decl_stmt|;
name|String
name|c2
init|=
name|r2
operator|.
name|getRoomTypeLabel
argument_list|()
decl_stmt|;
if|if
condition|(
name|c1
operator|.
name|equals
argument_list|(
name|c2
argument_list|)
condition|)
block|{
name|Integer
name|s1
init|=
name|r1
operator|.
name|getCapacity
argument_list|()
decl_stmt|;
name|Integer
name|s2
init|=
name|r2
operator|.
name|getCapacity
argument_list|()
decl_stmt|;
if|if
condition|(
name|s1
operator|!=
literal|null
operator|&&
name|s2
operator|!=
literal|null
condition|)
return|return
operator|(
name|s1
operator|.
name|compareTo
argument_list|(
name|s2
argument_list|)
operator|*
operator|-
literal|1
operator|)
return|;
else|else
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|c1
operator|.
name|compareTo
argument_list|(
name|c2
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

