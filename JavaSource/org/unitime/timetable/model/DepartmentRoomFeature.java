begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseDepartmentRoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentRoomFeatureDAO
import|;
end_import

begin_class
specifier|public
class|class
name|DepartmentRoomFeature
extends|extends
name|BaseDepartmentRoomFeature
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|DepartmentRoomFeature
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|DepartmentRoomFeature
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
specifier|public
specifier|static
name|String
name|featureTypeDisplayString
parameter_list|()
block|{
return|return
literal|"Department"
return|;
block|}
specifier|public
name|String
name|getDeptCode
parameter_list|()
block|{
return|return
operator|(
name|getDepartment
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
operator|)
return|;
block|}
specifier|public
name|String
name|htmlLabel
parameter_list|()
block|{
return|return
literal|"<span "
operator|+
literal|"style='color:#"
operator|+
name|getDepartment
argument_list|()
operator|.
name|getRoomSharingColor
argument_list|(
literal|null
argument_list|)
operator|+
literal|";font-weight:bold;' "
operator|+
literal|"title='"
operator|+
name|getLabel
argument_list|()
operator|+
literal|" ("
operator|+
operator|(
name|getDepartment
argument_list|()
operator|.
name|isExternalManager
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
name|getDepartment
argument_list|()
operator|.
name|getExternalMgrLabel
argument_list|()
else|:
name|getDepartment
argument_list|()
operator|.
name|getName
argument_list|()
operator|)
operator|+
operator|(
name|getFeatureType
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|getFeatureType
argument_list|()
operator|.
name|getReference
argument_list|()
operator|)
operator|+
literal|")'>"
operator|+
name|getLabel
argument_list|()
operator|+
operator|(
name|getFeatureType
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|getFeatureType
argument_list|()
operator|.
name|getReference
argument_list|()
operator|+
literal|")"
operator|)
operator|+
literal|"</span>"
return|;
block|}
comment|/** 	 * @return Room feature label with the word (Department) appended to it 	 */
specifier|public
name|String
name|getLabelWithType
parameter_list|()
block|{
return|return
name|getLabel
argument_list|()
operator|+
operator|(
name|getFeatureType
argument_list|()
operator|==
literal|null
condition|?
literal|" (Department)"
else|:
literal|" (Department "
operator|+
name|getFeatureType
argument_list|()
operator|.
name|getReference
argument_list|()
operator|+
literal|")"
operator|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getLabel
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Collection
name|getAllRoomFeaturesForSession
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
return|return
operator|(
operator|(
operator|new
name|DepartmentRoomFeatureDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct d from DepartmentRoomFeature d where d.department.session.uniqueId=:sessionId order by label"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|)
return|;
block|}
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|DepartmentRoomFeature
name|newFeature
init|=
operator|new
name|DepartmentRoomFeature
argument_list|()
decl_stmt|;
name|newFeature
operator|.
name|setLabel
argument_list|(
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|newFeature
operator|.
name|setAbbv
argument_list|(
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|newFeature
operator|.
name|setDepartment
argument_list|(
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|newFeature
operator|.
name|setFeatureType
argument_list|(
name|getFeatureType
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|newFeature
operator|)
return|;
block|}
block|}
end_class

end_unit

