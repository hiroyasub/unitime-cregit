begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*   * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *   */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|FlushMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseEventContact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|EventContactDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|NameFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|NameInterface
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller, Stephanie Schluttenhofer, Zuzana Mullerova  */
end_comment

begin_class
specifier|public
class|class
name|EventContact
extends|extends
name|BaseEventContact
implements|implements
name|NameInterface
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|EventContact
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|EventContact
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
specifier|public
specifier|static
name|EventContact
name|findByExternalUniqueId
parameter_list|(
name|String
name|externalUniqueId
parameter_list|)
block|{
return|return
operator|(
name|EventContact
operator|)
operator|new
name|EventContactDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c from EventContact c where c.externalUniqueId=:externalUniqueId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalUniqueId"
argument_list|,
name|externalUniqueId
argument_list|)
operator|.
name|setFlushMode
argument_list|(
name|FlushMode
operator|.
name|MANUAL
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|EventContact
name|findByEmail
parameter_list|(
name|String
name|email
parameter_list|)
block|{
name|List
argument_list|<
name|EventContact
argument_list|>
name|ec
init|=
operator|(
name|List
argument_list|<
name|EventContact
argument_list|>
operator|)
operator|new
name|EventContactDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c from EventContact c where c.emailAddress=:emailAddress"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"emailAddress"
argument_list|,
name|email
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|ec
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
else|else
return|return
name|ec
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
name|String
name|getShortName
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|getFirstName
argument_list|()
operator|!=
literal|null
operator|&&
name|getFirstName
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|getFirstName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|". "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getLastName
argument_list|()
operator|!=
literal|null
operator|&&
name|getLastName
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|getLastName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getLastName
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|Math
operator|.
name|min
argument_list|(
literal|10
argument_list|,
name|getLastName
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
operator|(
operator|(
name|getLastName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|getLastName
argument_list|()
operator|.
name|trim
argument_list|()
operator|)
operator|+
literal|", "
operator|+
operator|(
name|getFirstName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|getFirstName
argument_list|()
operator|.
name|trim
argument_list|()
operator|)
operator|+
literal|" "
operator|+
operator|(
name|getMiddleName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|getMiddleName
argument_list|()
operator|.
name|trim
argument_list|()
operator|)
operator|)
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|(
name|String
name|nameFormat
parameter_list|)
block|{
return|return
name|NameFormat
operator|.
name|fromReference
argument_list|(
name|nameFormat
argument_list|)
operator|.
name|format
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
end_class

end_unit

