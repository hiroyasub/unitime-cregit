begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|criterion
operator|.
name|Restrictions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|BaseDepartmentStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentStatusTypeDAO
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|DepartmentStatusType
extends|extends
name|BaseDepartmentStatusType
implements|implements
name|Comparable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|Status
block|{
name|ManagerView
block|,
name|ManagerEdit
block|,
name|ManagerLimitedEdit
block|,
name|OwnerView
block|,
name|OwnerEdit
block|,
name|OwnerLimitedEdit
block|,
name|Audit
block|,
name|Timetable
block|,
name|Commit
block|,
name|ExamView
block|,
name|ExamEdit
block|,
name|ExamTimetable
block|,
name|ReportExamsFinal
block|,
name|ReportExamsMidterm
block|,
name|ReportClasses
block|,
name|StudentsAssistant
block|,
name|StudentsPreRegister
block|,
name|StudentsOnline
block|,
name|TestSession
block|,
name|AllowNoRole
block|,
name|AllowRollForward
block|, 		;
specifier|public
name|int
name|toInt
parameter_list|()
block|{
return|return
literal|1
operator|<<
name|ordinal
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|has
parameter_list|(
name|int
name|rights
parameter_list|)
block|{
return|return
operator|(
name|rights
operator|&
name|toInt
argument_list|()
operator|)
operator|==
name|toInt
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
enum|enum
name|Apply
block|{
name|Session
block|,
name|Department
block|;
specifier|public
name|int
name|toInt
parameter_list|()
block|{
return|return
literal|1
operator|<<
name|ordinal
argument_list|()
return|;
block|}
block|}
comment|/*[CONSTRUCTOR MARKER BEGIN]*/
specifier|public
name|DepartmentStatusType
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor for primary key 	 */
specifier|public
name|DepartmentStatusType
parameter_list|(
name|Long
name|uniqueId
parameter_list|)
block|{
name|super
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
comment|/*[CONSTRUCTOR MARKER END]*/
comment|/** 	 *  	 */
specifier|public
specifier|static
name|DepartmentStatusType
name|findById
parameter_list|(
name|Integer
name|uid
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|uid
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|(
name|DepartmentStatusType
operator|)
operator|(
operator|new
name|DepartmentStatusTypeDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createCriteria
argument_list|(
name|DepartmentStatusType
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
name|Restrictions
operator|.
name|eq
argument_list|(
literal|"uniqueId"
argument_list|,
name|uid
argument_list|)
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|TreeSet
name|findAll
parameter_list|()
block|{
return|return
operator|new
name|TreeSet
argument_list|(
operator|(
operator|new
name|DepartmentStatusTypeDAO
argument_list|()
operator|.
name|findAll
argument_list|()
operator|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TreeSet
argument_list|<
name|DepartmentStatusType
argument_list|>
name|findAll
parameter_list|(
name|int
name|apply
parameter_list|)
block|{
name|TreeSet
argument_list|<
name|DepartmentStatusType
argument_list|>
name|ret
init|=
name|findAll
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|DepartmentStatusType
argument_list|>
name|i
init|=
name|ret
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentStatusType
name|t
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|t
operator|.
name|apply
argument_list|(
name|apply
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|TreeSet
argument_list|<
name|DepartmentStatusType
argument_list|>
name|findAllForSession
parameter_list|(
name|boolean
name|includeTestSessions
parameter_list|)
block|{
name|TreeSet
argument_list|<
name|DepartmentStatusType
argument_list|>
name|ret
init|=
name|findAll
argument_list|(
name|Apply
operator|.
name|Session
operator|.
name|toInt
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|includeTestSessions
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|DepartmentStatusType
argument_list|>
name|i
init|=
name|ret
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
if|if
condition|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|isTestSession
argument_list|()
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|TreeSet
argument_list|<
name|DepartmentStatusType
argument_list|>
name|findAllForDepartment
parameter_list|()
block|{
return|return
name|findAll
argument_list|(
name|Apply
operator|.
name|Department
operator|.
name|toInt
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|DepartmentStatusType
name|findByRef
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|(
name|DepartmentStatusType
operator|)
operator|(
operator|new
name|DepartmentStatusTypeDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createCriteria
argument_list|(
name|DepartmentStatusType
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
name|Restrictions
operator|.
name|eq
argument_list|(
literal|"reference"
argument_list|,
name|ref
argument_list|)
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|DepartmentStatusType
operator|)
condition|)
return|return
operator|-
literal|1
return|;
name|DepartmentStatusType
name|t
init|=
operator|(
name|DepartmentStatusType
operator|)
name|o
decl_stmt|;
name|int
name|cmp
init|=
name|getOrd
argument_list|()
operator|.
name|compareTo
argument_list|(
name|t
operator|.
name|getOrd
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
else|:
name|getUniqueId
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|t
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|t
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|can
parameter_list|(
name|int
name|operation
parameter_list|)
block|{
return|return
operator|(
name|getStatus
argument_list|()
operator|.
name|intValue
argument_list|()
operator|&
name|operation
operator|)
operator|==
name|operation
return|;
block|}
specifier|public
name|boolean
name|can
parameter_list|(
name|Status
name|status
parameter_list|)
block|{
return|return
name|can
argument_list|(
name|status
operator|.
name|toInt
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|canManagerEdit
parameter_list|()
block|{
return|return
name|can
argument_list|(
name|Status
operator|.
name|ManagerEdit
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|canManagerLimitedEdit
parameter_list|()
block|{
return|return
name|can
argument_list|(
name|Status
operator|.
name|ManagerLimitedEdit
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|canManagerView
parameter_list|()
block|{
return|return
name|can
argument_list|(
name|Status
operator|.
name|ManagerView
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|canOwnerEdit
parameter_list|()
block|{
return|return
name|can
argument_list|(
name|Status
operator|.
name|OwnerEdit
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|canOwnerLimitedEdit
parameter_list|()
block|{
return|return
name|can
argument_list|(
name|Status
operator|.
name|OwnerLimitedEdit
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|canOwnerView
parameter_list|()
block|{
return|return
name|can
argument_list|(
name|Status
operator|.
name|OwnerView
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|canAudit
parameter_list|()
block|{
return|return
name|can
argument_list|(
name|Status
operator|.
name|Audit
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|canTimetable
parameter_list|()
block|{
return|return
name|can
argument_list|(
name|Status
operator|.
name|Timetable
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|canCommit
parameter_list|()
block|{
return|return
name|can
argument_list|(
name|Status
operator|.
name|Commit
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|canExamView
parameter_list|()
block|{
return|return
name|can
argument_list|(
name|Status
operator|.
name|ExamView
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|canExamEdit
parameter_list|()
block|{
return|return
name|can
argument_list|(
name|Status
operator|.
name|ExamEdit
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|canExamTimetable
parameter_list|()
block|{
return|return
name|can
argument_list|(
name|Status
operator|.
name|ExamTimetable
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|canNoRoleReportExamFinal
parameter_list|()
block|{
return|return
name|can
argument_list|(
name|Status
operator|.
name|ReportExamsFinal
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|canNoRoleReportExamMidterm
parameter_list|()
block|{
return|return
name|can
argument_list|(
name|Status
operator|.
name|ReportExamsMidterm
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|canNoRoleReportClass
parameter_list|()
block|{
return|return
name|can
argument_list|(
name|Status
operator|.
name|ReportClasses
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|canSectionAssistStudents
parameter_list|()
block|{
return|return
name|can
argument_list|(
name|Status
operator|.
name|StudentsAssistant
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|canPreRegisterStudents
parameter_list|()
block|{
return|return
name|can
argument_list|(
name|Status
operator|.
name|StudentsPreRegister
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|canOnlineSectionStudents
parameter_list|()
block|{
return|return
name|can
argument_list|(
name|Status
operator|.
name|StudentsOnline
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isTestSession
parameter_list|()
block|{
return|return
name|can
argument_list|(
name|Status
operator|.
name|TestSession
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|canNoRoleReportExam
parameter_list|()
block|{
return|return
name|canNoRoleReportExamFinal
argument_list|()
operator|||
name|canNoRoleReportExamMidterm
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|canNoRoleReport
parameter_list|()
block|{
return|return
name|canNoRoleReportClass
argument_list|()
operator|||
name|canNoRoleReportExam
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|apply
parameter_list|(
name|int
name|apply
parameter_list|)
block|{
return|return
operator|(
name|getApply
argument_list|()
operator|.
name|intValue
argument_list|()
operator|&
name|apply
operator|)
operator|==
name|apply
return|;
block|}
specifier|public
name|boolean
name|applySession
parameter_list|()
block|{
return|return
name|apply
argument_list|(
name|Apply
operator|.
name|Session
operator|.
name|toInt
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|applyDepartment
parameter_list|()
block|{
return|return
name|apply
argument_list|(
name|Apply
operator|.
name|Department
operator|.
name|toInt
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isAllowNoRole
parameter_list|()
block|{
return|return
name|can
argument_list|(
name|Status
operator|.
name|AllowNoRole
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isAllowRollForward
parameter_list|()
block|{
return|return
name|can
argument_list|(
name|Status
operator|.
name|AllowRollForward
argument_list|)
return|;
block|}
comment|/** Status is active when someone can edit, timetable or commit*/
specifier|public
name|boolean
name|isActive
parameter_list|()
block|{
return|return
name|canTimetable
argument_list|()
operator|||
name|canCommit
argument_list|()
operator|||
name|canManagerEdit
argument_list|()
operator|||
name|canOwnerEdit
argument_list|()
operator|||
name|canManagerLimitedEdit
argument_list|()
operator|||
name|canOwnerLimitedEdit
argument_list|()
operator|||
name|canExamEdit
argument_list|()
operator|||
name|canExamTimetable
argument_list|()
operator|||
name|canNoRoleReport
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|canLockOfferings
parameter_list|()
block|{
return|return
operator|!
name|isTestSession
argument_list|()
operator|&&
operator|(
name|canOnlineSectionStudents
argument_list|()
operator|||
name|canSectionAssistStudents
argument_list|()
operator|)
return|;
block|}
block|}
end_class

end_unit

