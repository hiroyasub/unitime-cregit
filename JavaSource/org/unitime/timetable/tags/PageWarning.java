begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|tags
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|jsp
operator|.
name|tagext
operator|.
name|TagSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_class
specifier|public
class|class
name|PageWarning
extends|extends
name|TagSupport
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|String
name|iPrefix
decl_stmt|;
specifier|private
name|String
name|iStyle
decl_stmt|;
specifier|public
name|String
name|getPrefix
parameter_list|()
block|{
return|return
name|iPrefix
return|;
block|}
specifier|public
name|void
name|setPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|iPrefix
operator|=
name|prefix
expr_stmt|;
block|}
specifier|public
name|String
name|getStyle
parameter_list|()
block|{
return|return
name|iStyle
return|;
block|}
specifier|public
name|void
name|setStyle
parameter_list|(
name|String
name|styleName
parameter_list|)
block|{
name|iStyle
operator|=
name|styleName
expr_stmt|;
block|}
specifier|public
name|String
name|getPageWarning
parameter_list|(
name|ServletRequest
name|request
parameter_list|)
block|{
name|String
name|page
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"page"
argument_list|)
decl_stmt|;
if|if
condition|(
name|page
operator|!=
literal|null
condition|)
block|{
name|String
name|warning
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
name|getPrefix
argument_list|()
operator|+
name|page
argument_list|)
decl_stmt|;
if|if
condition|(
name|warning
operator|!=
literal|null
operator|&&
operator|!
name|warning
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|warning
return|;
block|}
name|String
name|action
init|=
operator|(
name|String
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
name|Globals
operator|.
name|ORIGINAL_URI_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
operator|&&
name|action
operator|.
name|endsWith
argument_list|(
literal|".do"
argument_list|)
condition|)
block|{
name|String
name|warning
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
name|getPrefix
argument_list|()
operator|+
name|action
operator|.
name|substring
argument_list|(
name|action
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
operator|+
literal|1
argument_list|,
name|action
operator|.
name|length
argument_list|()
operator|-
literal|3
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|warning
operator|!=
literal|null
operator|&&
operator|!
name|warning
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|warning
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|int
name|doStartTag
parameter_list|()
block|{
try|try
block|{
name|String
name|warning
init|=
name|getPageWarning
argument_list|(
name|pageContext
operator|.
name|getRequest
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|warning
operator|!=
literal|null
condition|)
block|{
name|pageContext
operator|.
name|getOut
argument_list|()
operator|.
name|println
argument_list|(
literal|"<table width='100%' border='0' cellpadding='3' cellspacing='0'><tr>"
argument_list|)
expr_stmt|;
name|pageContext
operator|.
name|getOut
argument_list|()
operator|.
name|println
argument_list|(
literal|"<td class=\""
operator|+
name|getStyle
argument_list|()
operator|+
literal|"\" style='padding-left:10px;'>"
argument_list|)
expr_stmt|;
name|pageContext
operator|.
name|getOut
argument_list|()
operator|.
name|println
argument_list|(
name|warning
argument_list|)
expr_stmt|;
name|pageContext
operator|.
name|getOut
argument_list|()
operator|.
name|println
argument_list|(
literal|"</td></tr></table>"
argument_list|)
expr_stmt|;
block|}
return|return
name|SKIP_BODY
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|SKIP_BODY
return|;
block|}
block|}
specifier|public
name|int
name|doEndTag
parameter_list|()
block|{
return|return
name|EVAL_PAGE
return|;
block|}
block|}
end_class

end_unit

