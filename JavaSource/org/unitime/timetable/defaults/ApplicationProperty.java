begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 - 3.5 (University Timetabling Application)  * Copyright (C) 2012 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Documented
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|ElementType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Retention
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|RetentionPolicy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Target
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|dialect
operator|.
name|Dialect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|id
operator|.
name|IdentifierGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Email
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|DatabaseUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalClassEditAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalClassNameHelperInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalCourseCrosslistAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalCourseOfferingEditAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalCourseOfferingRemoveAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalCourseOfferingReservationEditAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalInstrOfferingConfigAssignInstructorsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalInstrOffrConfigChangeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalInstructionalOfferingAddAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalInstructionalOfferingDeleteAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalInstructionalOfferingInCrosslistAddAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalInstructionalOfferingNotOfferedAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalInstructionalOfferingOfferedAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalLinkLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalSchedulingSubpartEditAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalSolutionCommitAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalUidLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalUidTranslation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|RoomAvailabilityInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CourseDetailsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CourseUrlProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|SectionUrlProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|SectionLimitProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|StudentEnrollmentProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|spring
operator|.
name|ldap
operator|.
name|SpringLdapExternalUidLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|spring
operator|.
name|ldap
operator|.
name|SpringLdapExternalUidTranslation
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_enum
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
enum|enum
name|ApplicationProperty
block|{
annotation|@
name|Type
argument_list|(
name|Class
operator|.
name|class
argument_list|)
annotation|@
name|Implements
argument_list|(
name|Dialect
operator|.
name|class
argument_list|)
annotation|@
name|Description
argument_list|(
literal|"Database: dialect (e.g., org.hibernate.dialect.Oracle10gDialect)"
argument_list|)
annotation|@
name|ReadOnly
name|DatabaseDialect
argument_list|(
literal|"dialect"
argument_list|)
decl_stmt|, 	 	@
name|Description
argument_list|(
literal|"Database: connection url"
argument_list|)
decl|@
name|ReadOnly
name|ConnectionUrl
argument_list|(
literal|"connection.url"
argument_list|)
decl_stmt|, 	 	@
name|Description
argument_list|(
literal|"Database: connection user"
argument_list|)
decl|@
name|ReadOnly
name|ConnectionUser
argument_list|(
literal|"connection.username"
argument_list|)
decl_stmt|, 	 	@
name|Secret
decl|@
name|Description
argument_list|(
literal|"Database: connection password"
argument_list|)
decl|@
name|ReadOnly
name|ConnectionPassword
argument_list|(
literal|"connection.password"
argument_list|)
decl_stmt|, 	 	@
name|Type
argument_list|(
name|Class
operator|.
name|class
argument_list|)
decl|@
name|Implements
argument_list|(
name|Driver
operator|.
name|class
argument_list|)
decl|@
name|Description
argument_list|(
literal|"Database: connection driver class"
argument_list|)
decl|@
name|ReadOnly
name|ConnectionDriver
argument_list|(
literal|"connection.driver_class"
argument_list|)
decl_stmt|, 	 	@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
decl|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
decl|@
name|Description
argument_list|(
literal|"Database: connection logging"
argument_list|)
name|ConnectionLogging
argument_list|(
literal|"connection.logging"
argument_list|)
decl_stmt|,  	@
name|DefaultValue
argument_list|(
literal|"timetable"
argument_list|)
decl|@
name|Description
argument_list|(
literal|"Database: schema (e.g., timetable)"
argument_list|)
decl|@
name|ReadOnly
name|DatabaseSchema
argument_list|(
literal|"default_schema"
argument_list|)
decl_stmt|,  	@
name|Type
argument_list|(
name|Class
operator|.
name|class
argument_list|)
decl|@
name|Implements
argument_list|(
name|IdentifierGenerator
operator|.
name|class
argument_list|)
decl|@
name|Description
argument_list|(
literal|"Database: unique id generator (e.g., org.hibernate.id.SequenceGenerator)"
argument_list|)
decl|@
name|ReadOnly
name|DatabaseUniqueIdGenerator
argument_list|(
literal|"tmtbl.uniqueid.generator"
argument_list|)
decl_stmt|,  	@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
decl|@
name|Description
argument_list|(
literal|"Database: schema version (DO NOT EDIT!)"
argument_list|)
decl|@
name|ReadOnly
name|DatabaseVersion
argument_list|(
literal|"tmtbl.db.version"
argument_list|)
decl_stmt|,  	@
name|DefaultValue
argument_list|(
literal|"dbupdate.xml"
argument_list|)
decl|@
name|Description
argument_list|(
literal|"Database: update file"
argument_list|)
decl|@
name|ReadOnly
name|DatabaseUpdateFile
argument_list|(
literal|"tmtbl.db.update"
argument_list|)
decl_stmt|,  	@
name|DefaultValue
argument_list|(
literal|"en"
argument_list|)
decl|@
name|Description
argument_list|(
literal|"All Pages: default locale (e.g., en for english)"
argument_list|)
name|Locale
argument_list|(
literal|"unitime.locale"
argument_list|)
decl_stmt|,  	@
name|Description
argument_list|(
literal|"Configuration: data folder (defaults to Tomcat/data/unitime)"
argument_list|)
name|DataDir
argument_list|(
literal|"unitime.data.dir"
argument_list|)
decl_stmt|,  	@
name|DefaultValue
argument_list|(
literal|"custom.properties"
argument_list|)
decl|@
name|Description
argument_list|(
literal|"Configuration: custom application properties file"
argument_list|)
decl|@
name|ReadOnly
name|CustomProperties
argument_list|(
literal|"tmtbl.custom.properties"
argument_list|)
decl_stmt|,
comment|/** 	 * Use the following property to set the login page when user types '/UniTime' 	 */
decl_stmt|@
name|DefaultValue
argument_list|(
literal|"login.jsp"
argument_list|)
decl|@
name|Description
argument_list|(
literal|"Login: page url"
argument_list|)
name|LoginPage
argument_list|(
literal|"tmtbl.login_url"
argument_list|)
decl_stmt|,
comment|/** 	 * Custom login page header, see http://help34.unitime.org/Customizations for more details.  	 */
decl_stmt|@
name|Description
argument_list|(
literal|"Login: custom page header"
argument_list|)
name|LoginPageHeader
argument_list|(
literal|"tmtbl.header.external"
argument_list|)
decl_stmt|,
comment|/** 	 * Custom login page footer, see http://help34.unitime.org/Customizations for more details.  	 */
decl_stmt|@
name|Description
argument_list|(
literal|"Login: custom page footer"
argument_list|)
name|LoginPageFooter
argument_list|(
literal|"tmtbl.footer.external"
argument_list|)
decl_stmt|,
comment|/** 	 * A welcome message can be printed on the first page (when the user logs in). 	 */
decl_stmt|@
name|Description
argument_list|(
literal|"Main Page: welcome message (e.g., Welcome to Woebegon College test suite.)"
argument_list|)
name|SystemMessage
argument_list|(
literal|"tmtbl.system_message"
argument_list|)
decl_stmt|,  	@
name|Description
argument_list|(
literal|"All Pages: a (warning) message can be included at the top of each page"
argument_list|)
name|GlobalWarningMessage
argument_list|(
literal|"tmtbl.global.warn"
argument_list|)
decl_stmt|,  	@
name|Description
argument_list|(
literal|"All Pages: a disclaimer message can be added at the bottom of each page"
argument_list|)
name|DisclaimerMessage
argument_list|(
literal|"tmtbl.page.disclaimer"
argument_list|)
decl_stmt|,  	@
name|Description
argument_list|(
literal|"All Pages: a custom style sheet can be provided too, the changes are applied on top of the existing styles"
argument_list|)
name|CustomStyleSheet
argument_list|(
literal|"tmtbl.custom.css"
argument_list|)
decl_stmt|,
comment|/** 	 * Default application menu style. Values:<ul> 	 *<li>Static On Top ... Horizontal menu bar on the top of the page (takes 100% width of the page, does not move with the page) 	 *<li>Dynamic On Top ... Horizontal menu bar on the top of the page (takes 100% width of the client window, moves with the page as it is scrolled) 	 *<li>Tree On Side ... Tree on the left side of the page content (moves with the page, resembles the UniTime 3.1 menu the most) 	 *<li>Stack On Side ... Tree on the left side of the page content, but the first level of the tree is a StackPanel (only one top level item can be opened at a time) 	 *</ul> 	 * If manager setting for this property is created, each user (timetable manager) can change his/her menu style. 	 * See http://help34.unitime.org/Customizations for more details. 	 */
decl_stmt|@
name|DefaultValue
argument_list|(
literal|"Dynamic On Top"
argument_list|)
decl|@
name|Values
argument_list|(
block|{
literal|"Dynamic On Top"
operator|,
literal|"Static On Top"
operator|,
literal|"Tree On Side"
operator|,
literal|"Static Tree On Side"
operator|,
literal|"Dynamic Tree On Side"
operator|,
literal|"Stack On Side"
operator|,
literal|"Static Stack On Side"
operator|,
literal|"Dynamic Stack On Side"
block|}
block|)
annotation|@
name|Description
argument_list|(
literal|"All Pages: menu style"
argument_list|)
name|MenuStyle
argument_list|(
literal|"unitime.menu.style"
argument_list|)
decl_stmt|,
comment|/** 	 * Use the following property to configure the number of minutes a user will be locked 	 * out of the system if they exceed the maximum number of failed login attempts. 	 */
decl_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
decl|@
name|DefaultValue
argument_list|(
literal|"15"
argument_list|)
decl|@
name|Description
argument_list|(
literal|"Login: failed login lock out time in minutes"
argument_list|)
name|LoginFailedLockout
argument_list|(
literal|"tmtbl.login.failed.lockout.minutes"
argument_list|)
decl_stmt|,
comment|/** 	 * Use the following property to configure maximum number of failed login attempts 	 * before the user is locked out of the system for a period of time. 	 */
decl_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
decl|@
name|DefaultValue
argument_list|(
literal|"7"
argument_list|)
decl|@
name|Description
argument_list|(
literal|"Login: maximal number of failed login attempts"
argument_list|)
name|LoginMaxFailedAttempts
argument_list|(
literal|"tmtbl.login.max.failed.attempts"
argument_list|)
decl_stmt|,
comment|/** 	 * Use the following property to configure the number of milliseconds to delay responding 	 * to a user with an unable to log in error if they have exceeded their maximum number 	 * of failed login attempts by more than 3. 	 */
decl_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
decl|@
name|DefaultValue
argument_list|(
literal|"15000"
argument_list|)
decl|@
name|Description
argument_list|(
literal|"Login: login page response delay (in milliseconds), after the maximal number of failed logins is reached"
argument_list|)
name|LoginFailedAttemptDelay
argument_list|(
literal|"tmtbl.login.failed.delay.milliseconds"
argument_list|)
decl_stmt|,
comment|/** 	 * Access Level: all | {dept code}(:{dept code})* 	 */
decl_stmt|@
name|Description
argument_list|(
literal|"Login: application access level (deprecated)"
argument_list|)
decl|@
name|Deprecated
name|AccessLevel
argument_list|(
literal|"tmtbl.access_level"
argument_list|)
decl_stmt|,  	@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
decl|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
decl|@
name|Description
argument_list|(
literal|"Application Properties: reload application properties on the fly if modified when deployed to the app server"
argument_list|)
name|ApplicationPropertiesDynamicReload
argument_list|(
literal|"tmtbl.properties.dynamic_reload"
argument_list|)
decl_stmt|,  	@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
decl|@
name|DefaultValue
argument_list|(
literal|"15000"
argument_list|)
decl|@
name|Description
argument_list|(
literal|"Application Properties: reload interval (in milliseconds) for checking if property files have changed"
argument_list|)
name|ApplicationPropertiesDynamicReloadInterval
argument_list|(
literal|"tmtbl.properties.dynamic_reload_interval"
argument_list|)
decl_stmt|,  	@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
decl|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
decl|@
name|Description
argument_list|(
literal|"Login: allow for password reset (when authentication fails)"
argument_list|)
name|PasswordReset
argument_list|(
literal|"unitime.password.reset"
argument_list|)
decl_stmt|,  	@
name|DefaultValue
argument_list|(
literal|"high"
argument_list|)
decl|@
name|Values
argument_list|(
block|{
literal|"high"
operator|,
literal|"medium"
operator|,
literal|"low"
block|}
end_enum

begin_decl_stmt
unit|)
annotation|@
name|Description
argument_list|(
literal|"Main Page: obtrusiveness of the registration popup"
argument_list|)
name|RegistrationPopupObtrusiveness
argument_list|(
literal|"unitime.registration.obtrusiveness"
argument_list|)
decl_stmt|,  	@
name|DefaultValue
argument_list|(
literal|"ThisIs8Secret"
argument_list|)
decl|@
name|Description
argument_list|(
literal|"Configuration: encoder secret, please change the value in the custom properties!"
argument_list|)
decl|@
name|Secret
name|UrlEncoderSecret
argument_list|(
literal|"unitime.encode.secret"
argument_list|)
decl_stmt|,  	@
name|Description
argument_list|(
literal|"JAAS authentication modules (deprecated)"
argument_list|)
decl|@
name|Deprecated
name|AuthenticationModules
argument_list|(
literal|"tmtbl.authenticate.modules"
argument_list|)
decl_stmt|,
comment|/** 	 * LDAP Authentication. See http://help34.unitime.org/LDAP for more details. 	 */
decl_stmt|@
name|Description
argument_list|(
literal|"LDAP Authentication: ldap url"
argument_list|)
name|AuthenticationLdapUrl
argument_list|(
literal|"unitime.authentication.ldap.url"
argument_list|)
decl_stmt|,  	@
name|DefaultValue
argument_list|(
literal|"uid={0},ou=authenticate"
argument_list|)
decl|@
name|Description
argument_list|(
literal|"LDAP Authentication: authentication query"
argument_list|)
name|AuthenticationLdapAuthenticate
argument_list|(
literal|"unitime.authentication.ldap.user-dn-pattern"
argument_list|)
decl_stmt|,  	@
name|DefaultValue
argument_list|(
literal|"ou=authorize"
argument_list|)
decl|@
name|Description
argument_list|(
literal|"LDAP Authentication: authorize query (use to retrieve external user id)"
argument_list|)
name|AuthenticationLdapAuthorize
argument_list|(
literal|"unitime.authentication.ldap.group-search-base"
argument_list|)
decl_stmt|,  	@
name|DefaultValue
argument_list|(
literal|"uid\\={1}"
argument_list|)
decl|@
name|Description
argument_list|(
literal|"LDAP Authentication: authorization query search filter"
argument_list|)
name|AuthenitcationLdapFilter
argument_list|(
literal|"unitime.authentication.ldap.group-search-filter"
argument_list|)
decl_stmt|,  	@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
decl|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
decl|@
name|Description
argument_list|(
literal|"LDAP Authentication: convert user external id to upper case"
argument_list|)
name|AuthorizationLdapUpCase
argument_list|(
literal|"unitime.authentication.ldap.group-convert-to-uppercase"
argument_list|)
decl_stmt|,
comment|/** 	 * Translation between LDAP uid and UniTime's external user id. 	 */
decl_stmt|@
name|DefaultValue
argument_list|(
literal|"uid={0},ou=identify"
argument_list|)
decl|@
name|Description
argument_list|(
literal|"LDAP Authentication: user identification query"
argument_list|)
name|AuthenticationLdapIdentify
argument_list|(
literal|"unitime.authentication.ldap.identify"
argument_list|)
decl_stmt|,  	@
name|DefaultValue
argument_list|(
literal|"uid"
argument_list|)
decl|@
name|Description
argument_list|(
literal|"LDAP Authentication: user external id attribute name"
argument_list|)
name|AuthenticationLdapIdAttribute
argument_list|(
literal|"unitime.authentication.ldap.group-role-attribute"
argument_list|)
decl_stmt|,  	@
name|DefaultValue
argument_list|(
literal|"uid={0},ou=identify"
argument_list|)
decl|@
name|Description
argument_list|(
literal|"LDAP Authentication: translation of user login to user external id"
argument_list|)
decl|@
name|Replaces
argument_list|(
block|{
literal|"unitime.authentication.ldap.identify"
block|}
end_decl_stmt

begin_expr_stmt
unit|)
name|AuthenticationLdapLogin2UserId
argument_list|(
literal|"unitime.authentication.ldap.uid2ext"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"%={0},ou=identify"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"LDAP Authentication: translation of user external id to user login (% is replaced with id attribute)"
argument_list|)
name|AuthenticationLdapUserId2Login
argument_list|(
literal|"unitime.authentication.ldap.ext2uid"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"menu.xml"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"All Pages: menu configuration file"
argument_list|)
name|MenuFile
argument_list|(
literal|"unitime.menu"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"menu-custom.xml"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"All Pages: custom menu configuration file"
argument_list|)
name|CustomMenuFile
argument_list|(
literal|"unitime.menu.custom"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"All Pages: enable page help"
argument_list|)
name|PageHelpEnabled
argument_list|(
literal|"tmtbl.wiki.help"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"https://sites.google.com/a/unitime.org/help34/"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"All Pages: page help url"
argument_list|)
name|PageHelpUrl
argument_list|(
literal|"tmtbl.wiki.url"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Page %: warning message (yellow stripe on the top of the page)"
argument_list|)
expr|@
name|Parameter
argument_list|(
literal|"page name"
argument_list|)
name|PageWarning
argument_list|(
literal|"tmtbl.page.warn.%"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Page %: info message (blue stripe on the top of the page)"
argument_list|)
expr|@
name|Parameter
argument_list|(
literal|"page name"
argument_list|)
name|PageInfo
argument_list|(
literal|"tmtbl.page.info.%"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Configuration: UniTime URL (e.g., used in email notifications where URL cannot be deducted from the http request)"
argument_list|)
name|UniTimeUrl
argument_list|(
literal|"unitime.url"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Configuration: maximum upload file size in bytes"
argument_list|)
name|MaxUploadSize
argument_list|(
literal|"unitime.upload.max_size_in_bytes"
argument_list|)
operator|,
comment|/** 	 * If the following property is defined and set to true, last used academic session is 	 * automatically selected for an authenticated user (if it is still available for the user). 	 */
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Login: on login, automatically select the last used academic session"
argument_list|)
name|KeepLastUsedAcademicSession
argument_list|(
literal|"tmtbl.keeplastused.session"
argument_list|)
operator|,
comment|/** 	 * The following property sets the ellipsoid that is used to compute distances. 	 * Values:<ul> 	 *<li>LEGACY ... Euclidean metric (1 unit equals to 10 meters) 	 *<li>WGS84 ... WGS-84 (GPS, a = 6378137 m, b = 6356752.3142 m) 	 *<li>GRS80 ... GRS-80 (a = 6378137 m, b = 6356752.3141 m) 	 *<li>Airy1830 ... Airy (1830) (a = 6377563.396 m, b = 6356256.909 m) 	 *<li>Intl1924 ... Int'l 1924 (a = 6378388 m, b = 6356911.946 m) 	 *<li>Clarke1880 ... Clarke (1880) (a = 6378249.145 m, b = 6356514.86955 m) 	 *<li>GRS67 ... GRS-67 (a = 6378160 m, b = 6356774.719 m) 	 *</ul> 	 */
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"WGS84"
argument_list|)
expr|@
name|Values
argument_list|(
block|{
literal|"LEGACY"
block|,
literal|"WGS84"
block|,
literal|"GRS80"
block|,
literal|"Airy1830"
block|,
literal|"Intl1924"
block|,
literal|"Clarke1880"
block|,
literal|"GRS67"
block|}
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Configuration: distance matrix ellipsoid"
argument_list|)
name|DistanceEllipsoid
argument_list|(
literal|"unitime.distance.ellipsoid"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Double
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"67.0"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Room Filter: travel speed (meters in minute) that is used for nearby locations"
argument_list|)
name|EventDistanceSpeed
argument_list|(
literal|"tmtbl.events.distanceSpeed"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Double
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"670.0"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Room Filter: distance limit (in meters) for nearby locations"
argument_list|)
name|EventNearByDistance
argument_list|(
literal|"tmtbl.events.nearByDistance"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"0"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Rooms: default break time for a room of type % (% is the room type reference)"
argument_list|)
expr|@
name|Parameter
argument_list|(
literal|"room type"
argument_list|)
name|RoomDefaultBreakTime
argument_list|(
literal|"unitime.events.breakTime.%"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Solver: enable 'local' option in the solver host selection"
argument_list|)
name|SolverLocalEnabled
argument_list|(
literal|"tmtbl.solver.local.enabled"
argument_list|)
operator|,
comment|/** 	 * Minimum amount of available memory (in megabytes) needed to be able to start additional solver instance. 	 * If there is not enough memory on any of the registered solver servers, the following exception is thrown: 	 * 		"Not enough resources to create a solver instance, please try again later." 	 */
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"200"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Solver: minimal amount of free memory (in MB) for the solver to load"
argument_list|)
name|SolverMemoryLimit
argument_list|(
literal|"tmtbl.solver.mem_limit"
argument_list|)
operator|,
expr_stmt|@
name|Values
argument_list|(
block|{
literal|"fatal"
block|,
literal|"error"
block|,
literal|"warn"
block|,
literal|"info"
block|,
literal|"debug"
block|,
literal|"trace"
block|}
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Solver: log level for %"
argument_list|)
expr|@
name|Parameter
argument_list|(
literal|"operation"
argument_list|)
name|SolverLogLevel
argument_list|(
literal|"unitime.solver.log.level.%"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"#,##0.00"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Rooms: room area decimal format"
argument_list|)
name|RoomAreaUnitsFormat
argument_list|(
literal|"unitime.room.area.units.format"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Class Assignment: when re-assigned change past meetings as well"
argument_list|)
name|ClassAssignmentChangePastMeetings
argument_list|(
literal|"tmtbl.classAssign.changePastMeetings"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Class Assignment: ignore past meetings in conflict checking"
argument_list|)
name|ClassAssignmentIgnorePastMeetings
argument_list|(
literal|"tmtbl.classAssign.ignorePastMeetings"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Class Assignment: show student conflicts"
argument_list|)
name|ClassAssignmentShowStudentConflicts
argument_list|(
literal|"tmtbl.classAssign.showStudentConflicts"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Class Assignment: allow unassignments of conflicting classes"
argument_list|)
name|ClassAssignmentAllowUnassignments
argument_list|(
literal|"tmtbl.classAssign.allowUnassignment"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Class Setup: display external ids"
argument_list|)
name|ClassSetupShowExternalIds
argument_list|(
literal|"tmtbl.class_setup.show_display_external_ids"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Class Setup: display instructor flags"
argument_list|)
name|ClassSetupDisplayInstructorFlags
argument_list|(
literal|"tmtbl.class_setup.show_display_instructor_flags"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Class Setup: show enabled for student scheduling toggle"
argument_list|)
name|ClassSetupEnabledForStudentScheduling
argument_list|(
literal|"tmtbl.class_setup.show_enabled_for_student_scheduling"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Course Offerings: course number must be unique (within a subject area)"
argument_list|)
name|CourseOfferingNumberMustBeUnique
argument_list|(
literal|"tmtbl.courseNumber.unique"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Course Offerings: automatically upper case course offering numbers"
argument_list|)
name|CourseOfferingNumberUpperCase
argument_list|(
literal|"tmtbl.courseNumber.upperCase"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"^[0-9][0-9][0-9]([A-Za-z]){0,1}$"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Course Offerings: required matching pattern (e.g., 3 numbers followed by an optional letter)"
argument_list|)
name|CourseOfferingNumberPattern
argument_list|(
literal|"tmtbl.courseNumber.pattern"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"Course Number must have 3 numbers followed by an optional letter (e.g. 214, 342X)"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Course Offerings: warning message when course number does not match"
argument_list|)
name|CourseOfferingNumberPatternInfo
argument_list|(
literal|"tmtbl.courseNumber.patternInfo"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Non Univeristy Locations: required matching pattern for the location name"
argument_list|)
name|NonUniversityLocationPattern
argument_list|(
literal|"tmtbl.nonUniversityLocation.pattern"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Non Univeristy Locations: warning message when the location name does not match"
argument_list|)
name|NonUniversityLocationPatternInfo
argument_list|(
literal|"tmtbl.nonUniversityLocation.patternInfo"
argument_list|)
operator|,
comment|/** 	 * Trim leading zeros from student and staff external ids when loading from XML. 	 * This is useful if the data loads have ids with leading zeros and external lookup systems ignore the leading zeros. 	 * In this case the trim leading zeros should be set to true, by default it is false. 	 */
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Data Exchange: trim leading zeros from extednal user id"
argument_list|)
name|DataExchangeTrimLeadingZerosFromExternalIds
argument_list|(
literal|"tmtbl.data.exchange.trim.externalId"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Data Exchange: export default date pattern in course offering export"
argument_list|)
name|DataExchangeIncludeDefaultDatePattern
argument_list|(
literal|"tmtbl.export.defaultDatePattern"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Data Exchange: default import timetabling manager (e.g., if executed from command line)"
argument_list|)
name|DataExchangeXmlManager
argument_list|(
literal|"unitime.xml.manager"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Student Enrollment Import: update examination student conflicts for final exams"
argument_list|)
name|DataExchangeUpdateStudentConflictsFinal
argument_list|(
literal|"tmtbl.data.import.studentEnrl.finalExam.updateConflicts"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Student Enrollment Import: update examination student conflicts for midterm exams"
argument_list|)
name|DataExchangeUpdateStudentConflictsMidterm
argument_list|(
literal|"tmtbl.data.import.studentEnrl.midtermExam.updateConflicts"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Time Patterns: set to true if used time patterns are to be editable during the initial data load (a session status that allows for roll forward)"
argument_list|)
name|TimePatternEditableDuringInitialDataLoad
argument_list|(
literal|"tmtbl.time_pattern.initial_data_load.editable"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Buildings Update Data: also update existing rooms"
argument_list|)
name|BuildingsExternalUpdateExistingRooms
argument_list|(
literal|"unitime.external.room.update.existing"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Buildings Update Data: when updating existing rooms, also reset global room features"
argument_list|)
name|BuildingsExternalUpdateExistingRoomFeatures
argument_list|(
literal|"unitime.external.room.update.existing.features"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Buildings Update Data: when updating existing rooms, also reset room departments"
argument_list|)
name|BuildingsExternalUpdateExistingRoomDepartments
argument_list|(
literal|"unitime.external.room.update.existing.departments"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Buildings Update Data: if set, only consider rooms of the given classifications (comma separated list)"
argument_list|)
name|BuildingsExternalUpdateClassification
argument_list|(
literal|"unitime.external.room.update.classifications"
argument_list|)
operator|,
expr_stmt|@
name|Parameter
argument_list|(
literal|"index"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Room Sharing Mode: defines %-th room sharing grid (starting with 1, format is name|first slot|last slot|first day|last day|increment, e.g., Workdays \u00D7 Daytime|0|4|90|222|6 means Monday - Friday, starting at 7:30 am, ending at 6:30 pm, in half-hour increments)"
argument_list|)
name|RoomSharingMode
argument_list|(
literal|"unitime.room.sharingMode%"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Online Student Scheduling: check enrollment deadlines"
argument_list|)
name|OnlineSchedulingCheckDeadlines
argument_list|(
literal|"unitime.enrollment.deadline"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"last-first-middle"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Online Student Scheduling: student name format"
argument_list|)
name|OnlineSchedulingStudentNameFormat
argument_list|(
literal|"unitime.enrollment.student.name"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"initial-last"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Online Student Scheduling: instructor name format"
argument_list|)
name|OnlineSchedulingInstructorNameFormat
argument_list|(
literal|"unitime.enrollment.instructor.name"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Online Student Scheduling: save course requests during the scheduling assistent mode"
argument_list|)
name|OnlineSchedulingSaveRequests
argument_list|(
literal|"unitime.enrollment.requests.save"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Online Student Scheduling: enable student email confirmations"
argument_list|)
name|OnlineSchedulingEmailConfirmation
argument_list|(
literal|"unitime.enrollment.email"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Online Student Scheduling: allow student to select over-expected sections (even if there is a choise avoiding them)"
argument_list|)
name|OnlineSchedulingAllowOverExpected
argument_list|(
literal|"unitime.sectioning.allowOverExpected"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Online Student Scheduling Log: enable logging (online sectioning log)"
argument_list|)
name|OnlineSchedulingLoggingEnabled
argument_list|(
literal|"unitime.sectioning.log"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"5000"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Online Student Scheduling Log: limit on the number of records held in memory (before persisted)"
argument_list|)
name|OnlineSchedulingLogLimit
argument_list|(
literal|"unitime.sectioning.log.limit"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Online Student Scheduling Log: besides of the database, also log the actions in the given file (if set)"
argument_list|)
name|OnlineSchedulingLogFile
argument_list|(
literal|"unitime.sectioning.log.file"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Online Student Scheduling: override for the solver parameter %"
argument_list|)
expr|@
name|Parameter
argument_list|(
literal|"solver parameter"
argument_list|)
name|OnlineSchedulingParameter
argument_list|(
literal|"unitime.sectioning.config.%"
argument_list|)
operator|,
comment|/** 	 * Room availability. By default, use the included event management system. 	 * See http://help34.unitime.org/Custom_Room_Availability for more details. 	 */
expr_stmt|@
name|Type
argument_list|(
name|Class
operator|.
name|class
argument_list|)
expr|@
name|Implements
argument_list|(
name|RoomAvailabilityInterface
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"org.unitime.timetable.util.DefaultRoomAvailabilityService"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Room Availability: implementation class (implementing RoomAvailabilityInterface)"
argument_list|)
name|RoomAvailabilityImplementation
argument_list|(
literal|"tmtbl.room.availability.class"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"0"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Room Availability: extra time in minutes required to be empty before a class starts"
argument_list|)
name|RoomAvailabilityClassBreakTimeStart
argument_list|(
literal|"tmtbl.room.availability.class.breakTime.start"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"0"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Room Availability: extra time in minutes required to be empty before a class stops"
argument_list|)
name|RoomAvailabilityClassBreakTimeStop
argument_list|(
literal|"tmtbl.room.availability.class.breakTime.stop"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"Midterm Examination Event"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Room Availability: midterm examination type"
argument_list|)
name|RoomAvailabilityMidtermExamType
argument_list|(
literal|"tmtbl.room.availability.eventType.midtermExam"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"Final Examination Event"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Room Availability: final examination type"
argument_list|)
name|RoomAvailabilityFinalExamType
argument_list|(
literal|"tmtbl.room.availability.eventType.finalExam"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"Class Event"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Room Availability: class type"
argument_list|)
name|RoomAvailabilityClassType
argument_list|(
literal|"tmtbl.room.availability.eventType.class"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"{ call room_avail_interface.request(?) }"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Blob Room Availability Service: request sql"
argument_list|)
name|BlobRoomAvailabilityRequestSQL
argument_list|(
literal|"tmtbl.room.availability.request"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"{? = call room_avail_interface.response()}"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Blob Room Availability Service: response sql"
argument_list|)
name|BlobRoomAvailabilityResponseSQL
argument_list|(
literal|"tmtbl.room.availability.response"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Room Availability: enable instructor unavailabilty; instructor unavailabilty includes special and course-related events that are approved and where the instructor is the main contact or he/she is present in the additional contacts of the event"
argument_list|)
name|RoomAvailabilityIncludeInstructors
argument_list|(
literal|"unitime.events.instructorUnavailability"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Solver: wait for the room availabity to synchronize"
argument_list|)
name|RoomAvailabilitySolverWaitForSync
argument_list|(
literal|"tmtbl.room.availability.solver.waitForSync"
argument_list|)
operator|,
comment|/** 	 * If you are using UniTime in conjunction with an external system that identifies classes differently than UniTime 	 * you can create a java class that implements the ExternalClassNameHelperInterface interface to create custom 	 * naming for the class that is displayed in places such as the personal exam schedule and personal class 	 * schedule for students. 	 */
expr_stmt|@
name|Type
argument_list|(
name|Class
operator|.
name|class
argument_list|)
expr|@
name|Implements
argument_list|(
name|ExternalClassNameHelperInterface
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"org.unitime.timetable.util.DefaultExternalClassNameHelper"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Classes: class naming helper class (implementing ExternalClassNameHelperInterface)"
argument_list|)
name|ClassNamingHelper
argument_list|(
literal|"tmtbl.class.naming.helper"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Classes: text of a blue message on the top of the page"
argument_list|)
expr|@
name|Deprecated
name|ClassesMessage
argument_list|(
literal|"tmtbl.classes.message"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Examinations: text of a blue message on the top of the page"
argument_list|)
expr|@
name|Deprecated
name|ExamsMessage
argument_list|(
literal|"tmtbl.exams.message"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Instructional Offering Detail: make not offered stays on the detail page"
argument_list|)
name|MakeNotOfferedStaysOnDetail
argument_list|(
literal|"unitime.offering.makeNotOfferedStaysOnDetail"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Instructional Offering Config: check limits"
argument_list|)
name|ConfigEditCheckLimits
argument_list|(
literal|"unitime.instrOfferingConfig.checkConfigLimit"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Scheduling Subpart Credit: editation allowed"
argument_list|)
name|SubpartCreditEditable
argument_list|(
literal|"tmtbl.subpart.credit.editable"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Instructors: enable external id lookup (lookup provider must be defined)"
argument_list|)
name|InstructorExternalIdLookup
argument_list|(
literal|"tmtbl.instructor.external_id.lookup.enabled"
argument_list|)
operator|,
comment|/** 	 * Use {@link SpringLdapExternalUidLookup} when LDAP authentication is enabled. 	 * See http://help34.unitime.org/LDAP for more details. 	 */
expr_stmt|@
name|Type
argument_list|(
name|Class
operator|.
name|class
argument_list|)
expr|@
name|Implements
argument_list|(
name|ExternalUidLookup
operator|.
name|class
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Instructors: external id lookup provider (class ExternalUidLookup)"
argument_list|)
name|InstructorExternalIdLookupClass
argument_list|(
literal|"tmtbl.instructor.external_id.lookup.class"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Timetabling Managers: enable external id lookup (lookup provider must be defined)"
argument_list|)
name|ManagerExternalIdLookup
argument_list|(
literal|"tmtbl.manager.external_id.lookup.enabled"
argument_list|)
operator|,
comment|/** 	 * Use {@link SpringLdapExternalUidLookup} when LDAP authentication is enabled. 	 * See http://help34.unitime.org/LDAP for more details. 	 */
expr_stmt|@
name|Type
argument_list|(
name|Class
operator|.
name|class
argument_list|)
expr|@
name|Implements
argument_list|(
name|ExternalUidLookup
operator|.
name|class
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Timetabling Managers: external id lookup provider (class ExternalUidLookup)"
argument_list|)
name|ManagerExternalIdLookupClass
argument_list|(
literal|"tmtbl.manager.external_id.lookup.class"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Class
operator|.
name|class
argument_list|)
expr|@
name|Implements
argument_list|(
name|ExternalClassEditAction
operator|.
name|class
argument_list|)
expr|@
name|Description
argument_list|(
literal|"ExternalClassEditAction interface called when a class was edited"
argument_list|)
name|ExternalActionClassEdit
argument_list|(
literal|"tmtbl.external.class.edit_action.class"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Class
operator|.
name|class
argument_list|)
expr|@
name|Implements
argument_list|(
name|ExternalInstrOfferingConfigAssignInstructorsAction
operator|.
name|class
argument_list|)
expr|@
name|Description
argument_list|(
literal|"ExternalInstrOfferingConfigAssignInstructorsAction interface called when instructor assignments are changed"
argument_list|)
name|ExternalActionInstrOfferingConfigAssignInstructors
argument_list|(
literal|"tmtbl.external.instr_offr_config.assign_instructors_action.class"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Class
operator|.
name|class
argument_list|)
expr|@
name|Implements
argument_list|(
name|ExternalCourseOfferingEditAction
operator|.
name|class
argument_list|)
expr|@
name|Description
argument_list|(
literal|"ExternalCourseOfferingEditAction interface called when course offering was edited"
argument_list|)
name|ExternalActionCourseOfferingEdit
argument_list|(
literal|"tmtbl.external.course_offering.edit_action.class"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Class
operator|.
name|class
argument_list|)
expr|@
name|Implements
argument_list|(
name|ExternalInstructionalOfferingAddAction
operator|.
name|class
argument_list|)
expr|@
name|Description
argument_list|(
literal|"ExternalInstructionalOfferingAddAction interface called when an instructional offering was created"
argument_list|)
name|ExternalActionInstructionalOfferingAdd
argument_list|(
literal|"tmtbl.external.instr_offr.add_action.class"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Class
operator|.
name|class
argument_list|)
expr|@
name|Implements
argument_list|(
name|ExternalCourseOfferingRemoveAction
operator|.
name|class
argument_list|)
expr|@
name|Description
argument_list|(
literal|"ExternalCourseOfferingRemoveAction interface called when a course offering is about to be removed"
argument_list|)
name|ExternalActionCourseOfferingRemove
argument_list|(
literal|"tmtbl.external.course_offering.remove_action.class"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Class
operator|.
name|class
argument_list|)
expr|@
name|Implements
argument_list|(
name|ExternalInstructionalOfferingInCrosslistAddAction
operator|.
name|class
argument_list|)
expr|@
name|Description
argument_list|(
literal|"ExternalInstructionalOfferingInCrosslistAddAction interface called when a course offering was removed from a cross-list"
argument_list|)
name|ExternalActionInstructionalOfferingInCrosslistAdd
argument_list|(
literal|"tmtbl.external.instr_offr_in_crosslist.add_action.class"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Class
operator|.
name|class
argument_list|)
expr|@
name|Implements
argument_list|(
name|ExternalCourseCrosslistAction
operator|.
name|class
argument_list|)
expr|@
name|Description
argument_list|(
literal|"ExternalCourseCrosslistAction interface called when a cross-list was edited"
argument_list|)
name|ExternalActionCourseCrosslist
argument_list|(
literal|"tmtbl.external.instr_offr.crosslist_action.class"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Class
operator|.
name|class
argument_list|)
expr|@
name|Implements
argument_list|(
name|ExternalInstrOffrConfigChangeAction
operator|.
name|class
argument_list|)
expr|@
name|Description
argument_list|(
literal|"ExternalInstrOffrConfigChangeAction interface called when an instructional offering configuration was edited"
argument_list|)
name|ExternalActionInstrOffrConfigChange
argument_list|(
literal|"tmtbl.external.instr_offr_config.change_action.class"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Class
operator|.
name|class
argument_list|)
expr|@
name|Implements
argument_list|(
name|ExternalInstructionalOfferingDeleteAction
operator|.
name|class
argument_list|)
expr|@
name|Description
argument_list|(
literal|"ExternalInstructionalOfferingDeleteAction interface called when an instructional offering is about to be deleted."
argument_list|)
name|ExternalActionInstructionalOfferingDelete
argument_list|(
literal|"tmtbl.external.instr_offr.delete_action.class"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Class
operator|.
name|class
argument_list|)
expr|@
name|Implements
argument_list|(
name|ExternalInstructionalOfferingNotOfferedAction
operator|.
name|class
argument_list|)
expr|@
name|Description
argument_list|(
literal|"ExternalInstructionalOfferingNotOfferedAction interface called when an instructional offering was made not offered"
argument_list|)
name|ExternalActionInstructionalOfferingNotOffered
argument_list|(
literal|"tmtbl.external.instr_offr.not_offered_action.class"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Class
operator|.
name|class
argument_list|)
expr|@
name|Implements
argument_list|(
name|ExternalInstructionalOfferingOfferedAction
operator|.
name|class
argument_list|)
expr|@
name|Description
argument_list|(
literal|"ExternalInstructionalOfferingOfferedAction interface called when an instructional offering was made offered"
argument_list|)
name|ExternalActionInstructionalOfferingOffered
argument_list|(
literal|"tmtbl.external.instr_offr.offered_action.class"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Class
operator|.
name|class
argument_list|)
expr|@
name|Implements
argument_list|(
name|ExternalSolutionCommitAction
operator|.
name|class
argument_list|)
expr|@
name|Description
argument_list|(
literal|"ExternalSolutionCommitAction interface called when a solution was committed or uncommitted"
argument_list|)
name|ExternalActionSolutionCommit
argument_list|(
literal|"tmtbl.external.solution.commit_action.class"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Class
operator|.
name|class
argument_list|)
expr|@
name|Implements
argument_list|(
name|ExternalSchedulingSubpartEditAction
operator|.
name|class
argument_list|)
expr|@
name|Description
argument_list|(
literal|"ExternalSchedulingSubpartEditAction interface called when a scheduling subpart was edited"
argument_list|)
name|ExternalActionSchedulingSubpartEdit
argument_list|(
literal|"tmtbl.external.sched_subpart.edit_action.class"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Class
operator|.
name|class
argument_list|)
expr|@
name|Implements
argument_list|(
name|ExternalCourseOfferingReservationEditAction
operator|.
name|class
argument_list|)
expr|@
name|Description
argument_list|(
literal|"ExternalCourseOfferingReservationEditAction interface called when a reservation was edited"
argument_list|)
name|ExternalActionCourseOfferingReservationEdit
argument_list|(
literal|"tmtbl.external.reservation.edit_action.class"
argument_list|)
operator|,
comment|/** 	 * Use {@link SpringLdapExternalUidTranslation} when LDAP authentication is enabled. 	 * See http://help34.unitime.org/LDAP for more details. 	 */
expr_stmt|@
name|Type
argument_list|(
name|Class
operator|.
name|class
argument_list|)
expr|@
name|Implements
argument_list|(
name|ExternalUidTranslation
operator|.
name|class
argument_list|)
expr|@
name|Description
argument_list|(
literal|"ExternalUidTranslation interface for translating user external ids from different sources"
argument_list|)
name|ExternalUserIdTranslation
argument_list|(
literal|"tmtbl.externalUid.translation"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Class
operator|.
name|class
argument_list|)
expr|@
name|Implements
argument_list|(
name|DatabaseUpdate
operator|.
name|class
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Database: additional database update class to be executed at startup"
argument_list|)
name|DatabaseUpdateAddonClass
argument_list|(
literal|"tmtbl.db.addon.update.class"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination Reports: use class suffixes instead of the section numbers"
argument_list|)
name|ExaminationReportsClassSufix
argument_list|(
literal|"tmtbl.exam.report.suffix"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|""
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination Reports: text to be displayed when an exam has no room assinged (e.g., INSTR OFFC)"
argument_list|)
name|ExaminationsNoRoomText
argument_list|(
literal|"tmtbl.exam.report.noroom"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Examination Reports: room code (e.g., LAMB F101:A,ELLT 116:E,STEW 183:L,STEW 130:F)"
argument_list|)
name|ExaminationRoomCode
argument_list|(
literal|"tmtbl.exam.report.roomcode"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination Reports: display class external id instead of instructional type"
argument_list|)
name|ExaminationReportsExternalId
argument_list|(
literal|"tmtbl.exam.report.external"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Examination Reports: column name if external ids are to be displayed"
argument_list|)
name|ExaminationReportsExternalIdName
argument_list|(
literal|"tmtbl.exam.report.external.name"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination Reports: show instructional types"
argument_list|)
name|ExaminationReportsShowInstructionalType
argument_list|(
literal|"tmtbl.exam.report.itype"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination Reports: include student back-to-back conflicts by default"
argument_list|)
name|ExaminationReportsStudentBackToBacks
argument_list|(
literal|"tmtbl.exams.reports.student.btb"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination Reports: include instructor back-to-back conflicts by default"
argument_list|)
name|ExaminationReportsInstructorBackToBacks
argument_list|(
literal|"tmtbl.exams.reports.instructor.btb"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination PDF Reports: can use in-memory solution"
argument_list|)
name|ExaminationPdfReportsCanUseSolution
argument_list|(
literal|"tmtbl.exam.pdfReports.canUseSolution"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination PDF Reports: pre-load cross-listed examinations"
argument_list|)
name|ExaminationPdfReportsPreloadCrosslistedExams
argument_list|(
literal|"tmtbl.exam.pdfReports.useSolution.preloadCrosslistedExams"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination PDF Reports: skip suffixed subparts of the same instructional type (e.g., Lec 1a if there is a Lec 1) in the verification report"
argument_list|)
name|ExaminationPdfReportsSkipSuffixSubpart
argument_list|(
literal|"tmtbl.exam.report.verification.skipSuffixSubparts"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Examination PDF Reports: % examinations title in the report"
argument_list|)
expr|@
name|Parameter
argument_list|(
literal|"examination type"
argument_list|)
name|ExaminationPdfReportTitle
argument_list|(
literal|"tmtbl.exam.report.%"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination PDF Reports: include class schedule in student / instructor individual reports"
argument_list|)
name|ExaminationPdfReportsIncludeClassSchedule
argument_list|(
literal|"tmtbl.exam.report.cschedule"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination PDF Reports: class meeting time, use default date pattern as full term indication"
argument_list|)
name|ExaminationPdfReportsFullTermCheckDatePattern
argument_list|(
literal|"tmtbl.exam.report.fullterm.checkdp"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination PDF Reports: use class event to compute class meeting time"
argument_list|)
name|ExaminationPdfReportsUseEventsForMeetingTimes
argument_list|(
literal|"tmtbl.exam.report.meeting_time.use_events"
argument_list|)
operator|,
comment|/** 	 * Exams default start and stop offsets. This is to be used to reserve time for 	 * students entering the exam room before the exam begins and time for students 	 * to leave the exam after the exam has finished. The start offset must be a 	 * positive number that is not greater than the number of minutes in the exam 	 * period. 	 */
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"0"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination Period: default start offset (% is the reference of the examination problem)"
argument_list|)
expr|@
name|Parameter
argument_list|(
literal|"examination type"
argument_list|)
name|ExaminationPeriodDefaultStartOffset
argument_list|(
literal|"tmtbl.exam.defaultStartOffset.%"
argument_list|)
operator|,
comment|/** 	 * Exams default start and stop offsets. This is to be used to reserve time for 	 * students entering the exam room before the exam begins and time for students 	 * to leave the exam after the exam has finished. The start offset must be a 	 * positive number that is not greater than the number of minutes in the exam 	 * period. 	 */
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"0"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination Period: default stop offset (% is the reference of the examination problem)"
argument_list|)
expr|@
name|Parameter
argument_list|(
literal|"examination type"
argument_list|)
name|ExaminationPeriodDefaultStopOffset
argument_list|(
literal|"tmtbl.exam.defaultStopOffset.%"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examinations: cache examination conflicts with solution"
argument_list|)
name|ExaminationCacheConflicts
argument_list|(
literal|"tmtbl.exams.conflicts.cache"
argument_list|)
operator|,
comment|/** 	 * Required minimal travel time between class event and an exam (in the number of 5-minute long time slots). 	 */
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"6"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examinations: minimal travel time (in the number of 5 minute long slots) between an exam and any class for a student"
argument_list|)
name|ExaminationTravelTimeClass
argument_list|(
literal|"tmtbl.exam.eventConflicts.travelTime.classEvent"
argument_list|)
operator|,
comment|/** 	 * Required minimal travel time between course event and an exam (in the number of 5-minute long time slots). 	 */
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"0"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examinations: minimal travel time (in the number of 5 minute long slots) between an exam and any course related event for a student"
argument_list|)
name|ExaminationTravelTimeCourse
argument_list|(
literal|"tmtbl.exam.eventConflicts.travelTime.courseEvent"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examinations: use class / course limits to compute examination size instead of the actuall enrollment (defaults to false, except of final exams where it is true)"
argument_list|)
expr|@
name|Parameter
argument_list|(
literal|"examination type"
argument_list|)
name|ExaminationSizeUseLimitInsteadOfEnrollment
argument_list|(
literal|"tmtbl.exam.useLimit.%"
argument_list|)
operator|,
comment|/** 	 * Examination Timetabling: Consider direct student and instructor conflicts with other events 	 * (that is class events, course events with required attendance) for the given examination problem. 	 */
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examinations: consider event conflicts for % exams"
argument_list|)
expr|@
name|Parameter
argument_list|(
literal|"examination type"
argument_list|)
name|ExaminationConsiderEventConflicts
argument_list|(
literal|"tmtbl.exam.eventConflicts.%"
argument_list|)
operator|,
comment|/** 	 * Examination Timetabling: Automatically create strongly preferred same room constraint between exams of the same owner(s) 	 * (while examination data are loaded into the solver). 	 */
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examinations: create strongly preferred same room constraints between exams of the same class / course"
argument_list|)
expr|@
name|Parameter
argument_list|(
literal|"examination type"
argument_list|)
name|ExaminationCreateSameRoomConstraints
argument_list|(
literal|"tmtbl.exam.sameRoom.%"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination Name: if there is an examiantion for a cross-listed instructional offering, name the examination after all the courses (not just after the controlling one)"
argument_list|)
name|ExaminationNameExpandCrossListedOfferingsToCourses
argument_list|(
literal|"tmtbl.exam.name.expandCrosslistedOfferingToCourses"
argument_list|)
operator|,
comment|/** 	 * See http://help34.unitime.org/Exam_Naming_Convention for more details. 	 */
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"100"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination Name: maximum length"
argument_list|)
name|ExamNameMaxLength
argument_list|(
literal|"tmtbl.exam.name.maxLength"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Examination Name: type for % exams"
argument_list|)
expr|@
name|Parameter
argument_list|(
literal|"examination type"
argument_list|)
name|ExamNameType
argument_list|(
literal|"tmtbl.exam.name.type.%"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|""
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination Name: suffix"
argument_list|)
name|ExamNameSuffix
argument_list|(
literal|"tmtbl.exam.name.suffix"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|";%_"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination Name: differnt subjects separator (use %_ for space)"
argument_list|)
name|ExamNameSeparator
argument_list|(
literal|"tmtbl.exam.name.diffSubject.separator"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"%s %c"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination Name: course exam (use %s for subject area abbreviation and %c for course number)"
argument_list|)
name|ExamNameCourse
argument_list|(
literal|"tmtbl.exam.name.Course"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"%s %c"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination Name: offering exam (use %s for subject area abbreviation and %c for course number)"
argument_list|)
name|ExamNameOffering
argument_list|(
literal|"tmtbl.exam.name.Offering"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"%s %c [%x]"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination Name: config exam (use %x for configuration name)"
argument_list|)
name|ExamNameConfig
argument_list|(
literal|"tmtbl.exam.name.Config"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"%s %c %i %n"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination Name: class exam (use %i for instructional type and %n for section number)"
argument_list|)
name|ExamNameClass
argument_list|(
literal|"tmtbl.exam.name.Class"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"; %c"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination Name: next course exam of the same subject"
argument_list|)
name|ExamNameSameSubjectCourse
argument_list|(
literal|"tmtbl.exam.name.sameSubject.Course"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"; %c"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination Name: next offering exam of the same subject"
argument_list|)
name|ExamNameSameSubjectOffering
argument_list|(
literal|"tmtbl.exam.name.sameSubject.Offering"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"; %c [%x]"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination Name: next config exam of the same subject"
argument_list|)
name|ExamNameSameSubjectConfig
argument_list|(
literal|"tmtbl.exam.name.sameSubject.Config"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"; %c %i %n"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination Name: next class exam of the same subject"
argument_list|)
name|ExamNameSameSubjectClass
argument_list|(
literal|"tmtbl.exam.name.sameSubject.Class"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|", [%x]"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination Name: next config exam of the same course"
argument_list|)
name|ExamNameSameCourseConfig
argument_list|(
literal|"tmtbl.exam.name.sameCourse.Config"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|", %i %n"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination Name: next class exam of the same course"
argument_list|)
name|ExamNameSameCourseClass
argument_list|(
literal|"tmtbl.exam.name.sameCourse.Class"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|", %n"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination Name: next class exam of the same subpart"
argument_list|)
name|ExamNameSameSubpartClass
argument_list|(
literal|"tmtbl.exam.name.sameSubpart.Class"
argument_list|)
operator|,
comment|/** 	 * Examination Timetabling: Automatically create following preferences (while an exam is being saved into the database). 	 *  	 * For an exam that is attached to an evening class -> put period preference on a period that overlaps 	 * in time and day of week with the class (if not preference is set by the user). 	 */
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"0"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination Preferences: default prefence for an evening class exam of % examination type (R for required, -2 strongly preferred, -1 preferred, 0 rule disabled, 1 discouraged, 2 strongly discouraged, P prohibited)"
argument_list|)
expr|@
name|Parameter
argument_list|(
literal|"examination type"
argument_list|)
name|ExamDefaultsEveningClassPreference
argument_list|(
literal|"tmtbl.exam.defaultPrefs.%.eveningClasses.pref"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"216"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination Preferences: evening class is a class that takes place after this period (number of 5-minute long time slots from midnight, e.g., 216 is 6pm)"
argument_list|)
expr|@
name|Parameter
argument_list|(
literal|"examination type"
argument_list|)
name|ExamDefaultsEveningClassStart
argument_list|(
literal|"tmtbl.exam.defaultPrefs.%.eveningClasses.firstEveningPeriod"
argument_list|)
operator|,
comment|/** 	 * Examination Timetabling: Automatically create following preferences (while an exam is being saved into the database). 	 *  	 * For an exam that is attached to a class -> put room preference on a room (if it allows exams) of the class. 	 */
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"0"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination Preferences: default room prefence for a class exam of % examination type (R for required, -2 strongly preferred, -1 preferred, 0 rule disabled, 1 discouraged, 2 strongly discouraged, P prohibited)"
argument_list|)
expr|@
name|Parameter
argument_list|(
literal|"examination type"
argument_list|)
name|ExamDefaultsOriginalRoomPreference
argument_list|(
literal|"tmtbl.exam.defaultPrefs.%.originalRoom.pref"
argument_list|)
operator|,
comment|/** 	 * Examination Timetabling: Automatically create following preferences (while an exam is being saved into the database). 	 *  	 * For an exam that is attached to a class -> put building preference on a room of the class. 	 */
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"0"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination Preferences: default building prefence for a class exam of % examination type (R for required, -2 strongly preferred, -1 preferred, 0 rule disabled, 1 discouraged, 2 strongly discouraged, P prohibited)"
argument_list|)
expr|@
name|Parameter
argument_list|(
literal|"examination type"
argument_list|)
name|ExamDefaultsOriginalBuildingPreference
argument_list|(
literal|"tmtbl.exam.defaultPrefs.%.originalBuilding.pref"
argument_list|)
operator|,
comment|/** 	 * Examination Timetabling: Automatically create following preferences (while an exam is being saved into the database). 	 *  	 * If the building preference rule is enabled, set whether it is to be applied only when a class is in a room that allows exams. 	 */
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Examination Preferences: put default building preference for a class that did not take place in an examination room (for a class exam of % examination type)"
argument_list|)
expr|@
name|Parameter
argument_list|(
literal|"examination type"
argument_list|)
name|ExamDefaultsOriginalBuildingOnlyForExamRooms
argument_list|(
literal|"tmtbl.exam.defaultPrefs.%.originalBuilding.onlyForExaminationRooms"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Class
operator|.
name|class
argument_list|)
expr|@
name|Implements
argument_list|(
name|CourseDetailsProvider
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"org.unitime.timetable.onlinesectioning.custom.DefaultCourseDetailsProvider"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Customization: course details provider (interface CourseDetailsProvider)"
argument_list|)
name|CustomizationCourseDetails
argument_list|(
literal|"unitime.custom.CourseDetailsProvider"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Class
operator|.
name|class
argument_list|)
expr|@
name|Implements
argument_list|(
name|CourseUrlProvider
operator|.
name|class
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Customization: course catalog link provider (interface CourseUrlProvider)"
argument_list|)
name|CustomizationCourseLink
argument_list|(
literal|"unitime.custom.CourseUrlProvider"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Class
operator|.
name|class
argument_list|)
expr|@
name|Implements
argument_list|(
name|StudentEnrollmentProvider
operator|.
name|class
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Customization: student enrollment provider (interface StudentEnrollmentProvider, used by Student Scheduling Assistant when the academic session is in the assistant mode)"
argument_list|)
name|CustomizationStudentEnrollments
argument_list|(
literal|"unitime.custom.StudentEnrollmentProvider"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Class
operator|.
name|class
argument_list|)
expr|@
name|Implements
argument_list|(
name|ExternalLinkLookup
operator|.
name|class
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Customization: course catalog link provider (interface ExternalLinkLookup, deprecated)"
argument_list|)
expr|@
name|Deprecated
name|CourseCatalogLinkProvider
argument_list|(
literal|"tmtbl.catalogLink.lookup.class"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Class
operator|.
name|class
argument_list|)
expr|@
name|Implements
argument_list|(
name|SectionUrlProvider
operator|.
name|class
argument_list|)
expr|@
name|Deprecated
expr|@
name|Description
argument_list|(
literal|"Customization: section link provider (interface SectionUrlProvider, deprecated)"
argument_list|)
name|CustomizationSectionUrl
argument_list|(
literal|"unitime.custom.SectionUrlProvider"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Class
operator|.
name|class
argument_list|)
expr|@
name|Implements
argument_list|(
name|SectionLimitProvider
operator|.
name|class
argument_list|)
expr|@
name|Deprecated
expr|@
name|Description
argument_list|(
literal|"Customization: section limit provider (interface SectionLimitProvider, deprecated)"
argument_list|)
name|CustomizationSectionLimit
argument_list|(
literal|"unitime.custom.SectionLimitProvider"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Curriculum: convert academic area, classification and major codes and names to initial case"
argument_list|)
name|CurriculumConvertNamesToInitialCase
argument_list|(
literal|"tmtbl.toInitialCase.curriculum"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Double
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"0.03"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Makup Curriculum: minimal procentual projection across all the classifications (for a course to show up)"
argument_list|)
name|CurriculumLastLikeDemandsTotalShareLimit
argument_list|(
literal|"tmtbl.curriculum.lldemands.totalShareLimit"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Double
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"0.0"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Makup Curriculum: minimal procentual projection"
argument_list|)
name|CurriculumLastLikeDemandsShareLimit
argument_list|(
literal|"tmtbl.curriculum.lldemands.shareLimit"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"0"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Makup Curriculum: minimal number of last-like students"
argument_list|)
name|CurriculumLastLikeDemandsEnrollmentLimit
argument_list|(
literal|"tmtbl.curriculum.lldemands.enrlLimit"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"-1"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Events: indicate that a meeting is on an unusual time (too early); the value is the last time slot that is considered too early (e.g., 72 means 6 am)"
argument_list|)
name|EventTooEarlySlot
argument_list|(
literal|"unitime.event.tooEarly"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"5"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Event: event expiration service thread update interval in minutes"
argument_list|)
name|EventExpirationServiceUpdateInterval
argument_list|(
literal|"unitime.events.expiration.updateIntervalInMinutes"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Room Timetable: allow to see all the rooms (when set to false)"
argument_list|)
name|EventRoomTimetableAllRooms
argument_list|(
literal|"unitime.event_timetable.event_rooms_only"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Class
operator|.
name|class
argument_list|)
expr|@
name|Implements
argument_list|(
name|Email
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"org.unitime.commons.JavaMailWrapper"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Email Configuration: provider class"
argument_list|)
name|EmailProvider
argument_list|(
literal|"unitime.email.class"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"127.0.0.1"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Email Configuration: SMTP host"
argument_list|)
expr|@
name|Replaces
argument_list|(
block|{
literal|"tmtbl.smtp.host"
block|}
argument_list|)
name|EmailSmtpHost
argument_list|(
literal|"mail.smtp.host"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"25"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Email Configuration: SMTP port"
argument_list|)
name|EmailSmtpPort
argument_list|(
literal|"mail.smtp.port"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Email Configuration: SMTP user (if authentication is needed)"
argument_list|)
expr|@
name|Replaces
argument_list|(
block|{
literal|"unitime.email.user"
block|,
literal|"tmtbl.mail.user"
block|}
argument_list|)
name|EmailSmtpUser
argument_list|(
literal|"mail.smtp.user"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Email Configuration: SMTP password (if authentication is needed)"
argument_list|)
expr|@
name|Replaces
argument_list|(
block|{
literal|"unitime.email.password"
block|,
literal|"tmtbl.mail.pwd"
block|}
argument_list|)
expr|@
name|Secret
name|EmailSmtpPassword
argument_list|(
literal|"mail.smtp.password"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Email Configuration: enable SSL if needed. Other mail.smtp.ssl properties may need to be set"
argument_list|)
name|EmailSmtpSSL
argument_list|(
literal|"mail.smtp.ssl.enable"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"noreply@unitime.org"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Email Configuration: sender email address"
argument_list|)
name|EmailSenderAddress
argument_list|(
literal|"unitime.email.sender"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"UniTime Application"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Email Configuration: sender name"
argument_list|)
name|EmailSenderName
argument_list|(
literal|"unitime.email.sender.name"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"support@unitime.org"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Email Configuration: reply-to address"
argument_list|)
name|EmailReplyToAddress
argument_list|(
literal|"unitime.email.replyto"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"UniTime Support"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Email Configuration: reply-to name"
argument_list|)
name|EmailReplyToName
argument_list|(
literal|"unitime.email.replyto.name"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"demo@unitime.org"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Email Notifications: email address"
argument_list|)
name|EmailNotificationAddress
argument_list|(
literal|"unitime.email.notif"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"UniTime Demo"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Email Notifications: email address name"
argument_list|)
name|EmailNotificationAddressName
argument_list|(
literal|"unitime.email.notif.name"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Email Notifications: send solution commit / uncommit notifications"
argument_list|)
name|EmailNotificationSolutionCommits
argument_list|(
literal|"unitime.email.notif.commit"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Email Notifications: send error reports"
argument_list|)
name|EmailNotificationErrorReports
argument_list|(
literal|"unitime.email.notif.error"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Email Notifications: data exchange emails"
argument_list|)
name|EmailNotificationDataExchange
argument_list|(
literal|"unitime.email.notif.data"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Contact Us: email address (if not used, unitime.email.notif is used instead)"
argument_list|)
expr|@
name|Replaces
argument_list|(
block|{
literal|"unitime.email.notif"
block|}
argument_list|)
name|EmailInquiryAddress
argument_list|(
literal|"unitime.email.inquiry"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Contact Us: email address name (if not used, unitime.email.notif.name is used instead)"
argument_list|)
expr|@
name|Replaces
argument_list|(
block|{
literal|"unitime.email.notif.name"
block|}
argument_list|)
name|EmailInquiryAddressName
argument_list|(
literal|"unitime.email.inquiry.name"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"@unitime.org"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Contact Us: for users without email, an email is constructed as login name + the given address suffix"
argument_list|)
name|EmailInquiryAddressSuffix
argument_list|(
literal|"unitime.email.inquiry.suffix"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Contact Us: also send an autoreply message back to the user (if false, the user is CC-ed in the original message); this is handy when sending emails to users can fail (e.g., because of an invalid email address)"
argument_list|)
name|EmailInquiryAutoreply
argument_list|(
literal|"unitime.email.inquiry.autoreply"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Email Confirmations: Enable confirmation emails for event management"
argument_list|)
expr|@
name|Replaces
argument_list|(
block|{
literal|"tmtbl.event.confirmationEmail"
block|}
argument_list|)
name|EmailConfirmationEvents
argument_list|(
literal|"unitime.email.confirm.event"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Event Email Confirmations: default value of the \"Send email confirmation\" toggle"
argument_list|)
name|EmailConfirmationEventsDefault
argument_list|(
literal|"unitime.email.confirm.default"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Event Email Confirmations: include instructors"
argument_list|)
name|EmailConfirmationEventInstructors
argument_list|(
literal|"unitime.email.event.instructor"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Event Email Confirmations: include coordinators"
argument_list|)
name|EmailConfirmationEventCoordinators
argument_list|(
literal|"unitime.email.event.coordinator"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Event Email Confirmations: default email suffix (e.g., @unitime.org)"
argument_list|)
name|EmailDefaultAddressSuffix
argument_list|(
literal|"unitime.email.event.suffix"
argument_list|)
operator|,
comment|/** 	 * Enable UniTime to receive replies on event confirmation emails. 	 * If a reply message is received, a new note is added to the event's notes and an updated confirmation is sent to all contacts of the event. 	 * If the reply message contains an attachment, it is also added to the new event note and included in the new confirmation email. 	 */
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Event Email Confirmations: Enable UniTime to receive replies on event confirmation emails. If a reply message is received, a new note is added to the event's notes and an updated confirmation is sent to all contacts of the event. If the reply message contains an attachment, it is also added to the new event note and included in the new confirmation email."
argument_list|)
name|InboundEmailsEnabled
argument_list|(
literal|"unitime.email.inbound.enabled"
argument_list|)
operator|,
expr_stmt|@
name|Secret
expr|@
name|Description
argument_list|(
literal|"Event Email Confirmations: IMAP connection for receiving replies (for Gmail and SSL use imaps://[username]:[password]@imap.gmail.com/INBOX, if username contains a whole email address, use %40 instead of @ in the username)"
argument_list|)
name|InboundEmailsAddress
argument_list|(
literal|"unitime.email.inbound.uri"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Event Email Confirmations: reply-to address for event confirmation emails (e.g., [username]@gmail.com)"
argument_list|)
name|InboundEmailsReplyToAddress
argument_list|(
literal|"unitime.email.inbound.address"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"UniTime Events"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Event Email Confirmations: reply-to address name for event confirmation emails"
argument_list|)
name|InboundEmailsReplyToAddressName
argument_list|(
literal|"unitime.email.inbound.name"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"IP address of the machine running UniTime"
argument_list|)
expr|@
name|Since
argument_list|(
literal|3.5
argument_list|)
name|JGroupsBindAddress
argument_list|(
literal|"jgroups.bind_addr"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Clustering: form hibernate cluster to replicate Hibernate L2 cache"
argument_list|)
expr|@
name|Since
argument_list|(
literal|3.5
argument_list|)
name|HibernateClusterEnabled
argument_list|(
literal|"unitime.hibernate.cluster"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"hibernate-jgroups-tcp.xml"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Clustering: hibernate L2 cache cluster configuration"
argument_list|)
expr|@
name|Since
argument_list|(
literal|3.5
argument_list|)
name|HibernateClusterConfiguration
argument_list|(
literal|"unitime.hibernate.jgroups.config"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Clustering: default port for the hibernate cluster"
argument_list|)
expr|@
name|Since
argument_list|(
literal|3.5
argument_list|)
name|HibernateClusterPort
argument_list|(
literal|"unitime.hibernate.port"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Clustering: initial hosts for the hibernate cluster (cluster discovery)"
argument_list|)
expr|@
name|Since
argument_list|(
literal|3.5
argument_list|)
name|HibernateClusterInitialHosts
argument_list|(
literal|"unitime.hibernate.initial_hosts"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Clustering: fork online student scheduling cluster from the solver server cluster"
argument_list|)
expr|@
name|Since
argument_list|(
literal|3.5
argument_list|)
name|OnlineSchedulingClusterForkChannel
argument_list|(
literal|"unitime.enrollment.jgroups.fork_channel"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"sectioning-jgroups-tcp.xml"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Clustering: online scheduling cluster configuration"
argument_list|)
expr|@
name|Since
argument_list|(
literal|3.5
argument_list|)
name|OnlineSchedulingClusterConfiguration
argument_list|(
literal|"unitime.enrollment.jgroups.config"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Clustering: default port for the online scheduling cluster"
argument_list|)
expr|@
name|Since
argument_list|(
literal|3.5
argument_list|)
name|OnlineSchedulingClusterPort
argument_list|(
literal|"unitime.enrollment.port"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Clustering: initial hosts for the online scheduling cluster (cluster discovery)"
argument_list|)
expr|@
name|Since
argument_list|(
literal|3.5
argument_list|)
name|OnlineSchedulingClusterInitialHosts
argument_list|(
literal|"unitime.enrollment.initial_hosts"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Clustering: form solver cluster to communitace between solver servers"
argument_list|)
expr|@
name|Since
argument_list|(
literal|3.5
argument_list|)
name|SolverClusterEnabled
argument_list|(
literal|"unitime.solver.cluster"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"solver-jgroups-tcp.xml"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Clustering: solver cluster configuration"
argument_list|)
expr|@
name|Since
argument_list|(
literal|3.5
argument_list|)
name|SolverClusterConfiguration
argument_list|(
literal|"unitime.solver.jgroups.config"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Clustering: default port for the solver cluster"
argument_list|)
expr|@
name|Since
argument_list|(
literal|3.5
argument_list|)
name|SolverClusterPort
argument_list|(
literal|"unitime.solver.port"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Clustering: initial hosts for the solver cluster (cluster discovery)"
argument_list|)
expr|@
name|Since
argument_list|(
literal|3.5
argument_list|)
name|SolverClusterInitialHosts
argument_list|(
literal|"unitime.solver.initial_hosts"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"100"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Test HQL: maximum number of returned lines"
argument_list|)
name|TestHQLMaxLines
argument_list|(
literal|"tmtbl.test_hql.max_line"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"5000"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Query Log: limit on the number of queries held in memory (before persisted)"
argument_list|)
name|QueryLogLimit
argument_list|(
literal|"unitime.query.log.limit"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Classes: if there are two or more scheduling subparts in a parent-child relation with the same instructional type (e.g., Lec - Lec a - Lec b stacked underneath), inherit preferences and the date pattern from the parent subpart whenever possible"
argument_list|)
expr|@
name|Since
argument_list|(
literal|3.5
argument_list|)
name|PreferencesHierarchicalInheritance
argument_list|(
literal|"unitime.preferences.hierarchicalInheritance"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"0"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Session Start/End Month: add a given number of days to the first / last day of a session"
argument_list|)
name|SessionNrExcessDays
argument_list|(
literal|"unitime.session.nrExcessDays"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"3"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Date Pattern Start/End Month: add a given number of months to the first / last month of a session"
argument_list|)
name|DatePatternNrExessMonth
argument_list|(
literal|"unitime.pattern.nrExcessMoths"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"1000"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"People Lookup: limit on the number of returned records"
argument_list|)
name|PeopleLookupLimit
argument_list|(
literal|"tmtbl.lookup.limit"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"People Lookup LDAP: ldap url (if not configured using the ldapPeopleLookupTemplate bean)"
argument_list|)
name|PeopleLookupLdapUrl
argument_list|(
literal|"tmtbl.lookup.ldap"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|""
argument_list|)
expr|@
name|Description
argument_list|(
literal|"People Lookup LDAP: ldap search base (if not configured using the ldapPeopleLookupTemplate bean)"
argument_list|)
name|PeopleLookupLdapBase
argument_list|(
literal|"tmtbl.lookup.ldap.name"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"People Lookup LDAP: ldap user (if not configured using the ldapPeopleLookupTemplate bean)"
argument_list|)
name|PeopleLookupLdapUser
argument_list|(
literal|"tmtbl.lookup.ldap.user"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"People Lookup LDAP: ldap password (if not configured using the ldapPeopleLookupTemplate bean)"
argument_list|)
expr|@
name|Secret
name|PeopleLookupLdapPassword
argument_list|(
literal|"tmtbl.lookup.ldap.password"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"100"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"People Lookup LDAP: search limit"
argument_list|)
name|PeopleLookupLdapLimit
argument_list|(
literal|"tmtbl.lookup.ldap.countLimit"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"(|(|(sn=%*)(uid=%))(givenName=%*)(cn=* %* *)(mail=%*))"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"People Lookup LDAP: search query"
argument_list|)
name|PeopleLookupLdapQuery
argument_list|(
literal|"tmtbl.lookup.ldap.query"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"mail"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"People Lookup LDAP: email attribute"
argument_list|)
name|PeopleLookupLdapEmailAttribute
argument_list|(
literal|"tmtbl.lookup.ldap.email"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"phone,officePhone,homePhone,telephoneNumber"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"People Lookup LDAP: phone attribute"
argument_list|)
name|PeopleLookupLdapPhoneAttribute
argument_list|(
literal|"tmtbl.lookup.ldap.phone"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"department"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"People Lookup LDAP: department attribute"
argument_list|)
name|PeopleLookupLdapDepartmentAttribute
argument_list|(
literal|"tmtbl.lookup.ldap.department"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"position,title"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"People Lookup LDAP: position attribute"
argument_list|)
name|PeopleLookupLdapPositionAttribute
argument_list|(
literal|"tmtbl.lookup.ldap.position"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Reservations: default reservation expiration date for all reservation types (given either in the number of days relative to the academic session begin date, or as a date in yyyy-mm-dd format)"
argument_list|)
name|ReservationExpirationDateGlobal
argument_list|(
literal|"unitime.reservations.expiration_date"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Reservations: default reservation expiration date for reservation of type % (given either in the number of days relative to the academic session begin date, or as a date in yyyy-mm-dd format)"
argument_list|)
expr|@
name|Parameter
argument_list|(
literal|"reservation type"
argument_list|)
name|ReservationExpirationDate
argument_list|(
literal|"unitime.reservations.%.expiration_date"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Reservations: default expiration date for all reservation types; it is defined by a number of days after today (e.g., 7 days from now)"
argument_list|)
name|ReservationExpirationInDaysGlobal
argument_list|(
literal|"unitime.reservations.expires_in_days"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Reservations: default expiration date for reservation of type %; it is defined by a number of days after today (e.g., 7 days from now)"
argument_list|)
expr|@
name|Parameter
argument_list|(
literal|"reservation type"
argument_list|)
name|ReservationExpirationInDays
argument_list|(
literal|"unitime.reservations.%.expires_in_days"
argument_list|)
operator|,
comment|/** 	 * Minimap (to be displayed if set, e.g., on the Room Detail page) 	 *<ul> 	 *<li>Strings %x and %y are replaced by the room's coordinates 	 *<li>String %n is replaced by the room name 	 *<li>String %i is replaced by the room external id  	 *</ul> 	 */
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"https://maps.google.com/maps/api/staticmap?center=%x,%y&zoom=16&size=600x400&maptype=roadmap&sensor=false&markers=color:blue|%x,%y"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Rooms: Campus map image"
argument_list|)
name|RoomMapStatic
argument_list|(
literal|"unitime.minimap.url"
argument_list|)
operator|,
comment|/** 	 * Minimap to be used in location's tooltip 	 *<ul> 	 *<li>Strings %x and %y are replaced by the room's coordinates 	 *<li>String %n is replaced by the room name 	 *<li>String %i is replaced by the room external id  	 *</ul> 	 */
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"https://maps.google.com/maps/api/staticmap?center=%x,%y&zoom=15&size=300x200&maptype=roadmap&sensor=false&markers=color:blue|%x,%y"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Rooms: minimap to be used in location's tooltip (%x and %y are replaced by the room's coordinates)"
argument_list|)
name|RoomHintMinimapUrl
argument_list|(
literal|"unitime.minimap.hint"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Rooms: use Google maps to enter room / building coordinates"
argument_list|)
name|RoomUseGoogleMap
argument_list|(
literal|"unitime.coordinates.googlemap"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Rooms: include break time in the hint"
argument_list|)
name|RoomHintShowBreakTime
argument_list|(
literal|"unitime.roomHint.showBreakTime"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"1000"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Last Changes: limit on the number of returned changes"
argument_list|)
name|LastChangesLimit
argument_list|(
literal|"unitime.changelog.limit"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Solver: include names in the XML Export"
argument_list|)
name|SolverXMLExportNames
argument_list|(
literal|"unitime.solution.export.names"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Solver: serialize uniuqe ids in the XML Export"
argument_list|)
name|SolverXMLExportConvertIds
argument_list|(
literal|"unitime.solution.export.id-conv"
argument_list|)
operator|,
comment|/** 	 * Solution passivation time. 	 * Number of minutes after which an inactive solution can be passivated to disk to save memory. 	 * Passivation is disabled if set to zero, default is 30 minutes. 	 */
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"30"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Solver: passivate solution after given number of minutes of inactivity (disable passivation by setting to zero)"
argument_list|)
name|SolverPasivationTime
argument_list|(
literal|"unitime.solver.passivation.time"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"300"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Online Student Scheduling: sectioning queue load interval in seconds"
argument_list|)
name|OnlineSchedulingQueueLoadInterval
argument_list|(
literal|"unitime.sectioning.queue.loadInterval"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"30"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Online Student Scheduling: sectioning queue update interval in seconds"
argument_list|)
name|OnlineSchedulingQueueUpdateInterval
argument_list|(
literal|"unitime.sectioning.queue.updateInterval"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Online Student Scheduling: only academic sessions matching this year (regular expression) are loaded in"
argument_list|)
name|OnlineSchedulingAcademicYear
argument_list|(
literal|"unitime.enrollment.year"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Online Student Scheduling: only academic sessions matching this term (regular expression) are loaded in"
argument_list|)
name|OnlineSchedulingAcademicTerm
argument_list|(
literal|"unitime.enrollment.term"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Online Student Scheduling: only academic sessions matching this campus (initiative, regular expression) are loaded in"
argument_list|)
name|OnlineSchedulingAcademicCampus
argument_list|(
literal|"unitime.enrollment.campus"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Class
operator|.
name|class
argument_list|)
expr|@
name|Implements
argument_list|(
name|OnlineSectioningServer
operator|.
name|class
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Online Student Scheduling: server implementation"
argument_list|)
name|OnlineSchedulingServerClass
argument_list|(
literal|"unitime.enrollment.server.class"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Online Student Scheduling: server support replications (it can be loaded on multiple machines of the cluster)"
argument_list|)
name|OnlineSchedulingServerReplicated
argument_list|(
literal|"unitime.enrollment.server.replicated"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"366"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Change Log: automatically remove records after the given number of days"
argument_list|)
name|LogCleanupChangeLog
argument_list|(
literal|"unitime.cleanup.changeLog"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"92"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Query Log: automatically remove records after the given number of days"
argument_list|)
name|LogCleanupQueryLog
argument_list|(
literal|"unitime.cleanup.queryLog"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"366"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Online Scheduling Log: automatically remove records after the given number of days"
argument_list|)
name|LogCleanupOnlineSchedulingLog
argument_list|(
literal|"unitime.cleanup.sectioningLog"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"14"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Message Log: automatically remove records after the given number of days"
argument_list|)
name|LogCleanupMessageLog
argument_list|(
literal|"unitime.message.log.cleanup.days"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"14"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Online Scheduling Queue: automatically remove records after the given number of days"
argument_list|)
name|LogCleanupOnlineSchedulingQueue
argument_list|(
literal|"unitime.cleanup.sectioningQueue"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"WARN"
argument_list|)
expr|@
name|Values
argument_list|(
block|{
literal|"ERROR"
block|,
literal|"WARN"
block|,
literal|"INFO"
block|}
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Message Log: minimum message level to be logged in the MessageLog table"
argument_list|)
name|MessageLogLevel
argument_list|(
literal|"unitime.message.log.level"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"5000"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Message Log: limit on the number of records held in memory (before persisted)"
argument_list|)
name|MessageLogLimit
argument_list|(
literal|"unitime.message.log.limit"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"180"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Message Log: message log cleanup interval in minutes"
argument_list|)
name|MessageLogCleanupInterval
argument_list|(
literal|"unitime.message.log.cleanup.interval"
argument_list|)
operator|,
comment|/** 	 * For various PDF exports, if you need other fonts than the ones bundled in the iText library (e.g., because of their poor unicode support), 	 * set the following unitime.pdf.font properties. The fonts will be embedded in the exported PDF. 	 * See application.properties for some tested examples. 	 */
expr_stmt|@
name|Description
argument_list|(
literal|"PDF Font: normal font"
argument_list|)
name|PdfFontNormal
argument_list|(
literal|"unitime.pdf.font"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"PDF Font: italic font"
argument_list|)
name|PdfFontItalic
argument_list|(
literal|"unitime.pdf.font.italic"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"PDF Font: bold font"
argument_list|)
name|PdfFontBold
argument_list|(
literal|"unitime.pdf.font.bold"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"PDF Font: bold italic font"
argument_list|)
name|PdfFontBoldItalic
argument_list|(
literal|"unitime.pdf.font.bolditalic"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"PDF Font: fixed font"
argument_list|)
name|PdfFontFixed
argument_list|(
literal|"unitime.pdf.font.fixed"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Float
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"9"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"PDF Font: small size"
argument_list|)
name|PdfFontSizeSmall
argument_list|(
literal|"unitime.pdf.fontsize.small"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Float
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"12"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"PDF Font: normal size"
argument_list|)
name|PdfFontSizeNormal
argument_list|(
literal|"unitime.pdf.fontsize.normal"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Float
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"9"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"PDF Font: fixed font size"
argument_list|)
name|PdfFontSizeFixed
argument_list|(
literal|"unitime.pdf.fontsize.fixed"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Float
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"16"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"PDF Font: big size"
argument_list|)
name|PdfFontSizeBig
argument_list|(
literal|"unitime.pdf.fontsize.big"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"PDF Font: cache fonts in memory"
argument_list|)
name|PdfFontCache
argument_list|(
literal|"unitime.pdf.fontcache"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Instructional Offerings: enable PDF Worksheet export"
argument_list|)
name|WorksheetPdfEnabled
argument_list|(
literal|"tmtbl.pdf.worksheet"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"PDF Worksheet: include committed assignments"
argument_list|)
name|WorksheetPdfUseCommittedAssignments
argument_list|(
literal|"tmtbl.pdf.worksheet.useCommitedAssignments"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"UniTime %"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"PDF Worksheet: author (% is replaced with version number)"
argument_list|)
name|WorksheetPdfAuthor
argument_list|(
literal|"tmtbl.pdf.worksheet.author"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"PDF WORKSHEET"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"PDF Worksheet: report title"
argument_list|)
name|WorksheetPdfTitle
argument_list|(
literal|"tmtbl.pdf.worksheet.title"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"6"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Timetable Grid: number of slots (5 minute long) per period"
argument_list|)
name|TimetableGridSlotsPerPeriod
argument_list|(
literal|"tmtbl.timeGrid.slotsPerPeriod"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"90"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Timetable Grid: start time (in the number of 5 minute long slots starting midnight, e.g., 90 is 7:30 am)"
argument_list|)
name|TimetableGridFirstDaySlot
argument_list|(
literal|"tmtbl.timeGrid.firstDaySlot"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"209"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Timetable Grid: end time (in the number of 5 minute long slots starting midnight, e.g., 209 is 5:25 pm)"
argument_list|)
name|TimetableGridLastDaySlot
argument_list|(
literal|"tmtbl.timeGrid.lastDaySlot"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"275"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Timetable Grid: evening end time (in the number of 5 minute long slots starting midnight, e.g., 275 is 10:55 pm)"
argument_list|)
name|TimetableGridLastEveningSlot
argument_list|(
literal|"tmtbl.timeGrid.lastEveningSlot"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"10"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Timetable Grid: max cell width"
argument_list|)
name|TimetableGridMaxCellWidth
argument_list|(
literal|"tmtbl.timeGrid.maxCellWidth"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"200"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Timetable Grid: max cell width (vertical layout)"
argument_list|)
name|TimetableGridMaxCellWidthVertical
argument_list|(
literal|"tmtbl.timeGrid.maxCellWidthVertical"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Contact Us: address"
argument_list|)
name|ContactUsAddress
argument_list|(
literal|"tmtbl.contact.address"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Contact Us: phone"
argument_list|)
name|ContactUsPhone
argument_list|(
literal|"tmtbl.contact.phone"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Contact Us: office hours"
argument_list|)
name|ContactUsOfficeHours
argument_list|(
literal|"tmtbl.contact.office_hours"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Contact Us: email"
argument_list|)
name|ContactUsEmail
argument_list|(
literal|"tmtbl.contact.email"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Contact Us: mailto anchor (e.g., timetabling@universty.edu?subject=TIMETABLING:&lt;add subject here&gt)"
argument_list|)
name|ContactUsMailTo
argument_list|(
literal|"tmtbl.contact.email_mailto"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"^(tmtbl|unitime)\\..*$"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Application Configuration: only properties matching the following regular expression are displayed"
argument_list|)
name|ApplicationConfigPattern
argument_list|(
literal|"tmtbl.appConfig.pattern"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Events: allow edit past meetings (deprecated, use EventEditPast permission instead)"
argument_list|)
expr|@
name|Deprecated
name|EventAllowEditPast
argument_list|(
literal|"tmtbl.event.allowEditPast"
argument_list|)
operator|,
expr_stmt|@
name|Description
argument_list|(
literal|"Exams / Classes Page: user login message (deprecated)"
argument_list|)
expr|@
name|Deprecated
name|ExamsLoginMessage
argument_list|(
literal|"tmtbl.exams.login.message"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"http://help34.unitime.org/Frequently_Asked_Questions"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Help: FAQ page"
argument_list|)
name|HelpFAQ
argument_list|(
literal|"tmtbl.help.faq"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"http://www.unitime.org/papers/event_documentation.pdf"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Manuals: event manual"
argument_list|)
name|ManualEvents
argument_list|(
literal|"tmtbl.help.manual.events"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"http://www.unitime.org/papers/ttman_data.pdf"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Manuals: course timetabling data entry manual"
argument_list|)
name|ManualCourseDataEntry
argument_list|(
literal|"tmtbl.help.manual.input_data"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"http://www.unitime.org/papers/ttman_solver.pdf"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Manuals: course timetabling solver manual"
argument_list|)
name|ManualCourseSolver
argument_list|(
literal|"tmtbl.help.manual.solver"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"help/Release-Notes.xml"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Help: release notes"
argument_list|)
name|HelpReleaseNotes
argument_list|(
literal|"tmtbl.help.release_notes"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"http://help34.unitime.org/Timetabling"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Help: online help landing page"
argument_list|)
name|HelpMain
argument_list|(
literal|"tmtbl.help.root"
argument_list|)
operator|,
expr_stmt|@
name|DefaultValue
argument_list|(
literal|"http://help34.unitime.org/Tips_and_Tricks"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Help: tips and tricks"
argument_list|)
name|HelpTricks
argument_list|(
literal|"tmtbl.help.tricks"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Session Roll Forward: allow roll forward of class preferences"
argument_list|)
name|RollForwardAllowClassPreferences
argument_list|(
literal|"unitime.rollforward.allowClassPrefs"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Main Page: when Internet Explorer is used, show \"the UniTime application may run very slow in Internet Explorer\" warning"
argument_list|)
expr|@
name|Deprecated
name|ChromeFrameWarning
argument_list|(
literal|"unitime.warn.chromeframe"
argument_list|)
operator|,
expr_stmt|@
name|Parameter
argument_list|(
literal|"class"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Logging: logging level for %"
argument_list|)
expr|@
name|ReadOnly
name|LoggingLevel
argument_list|(
literal|"log4j.logger.%"
argument_list|)
operator|,
expr_stmt|@
name|Type
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr|@
name|DefaultValue
argument_list|(
literal|"true"
argument_list|)
expr|@
name|Description
argument_list|(
literal|"Instructor Add/Edit: allow editation of external id"
argument_list|)
name|InstructorAllowEditExternalId
argument_list|(
literal|"tmtbl.instructor.allowExternalIdEdit"
argument_list|)
operator|,
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|String
name|iKey
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|ApplicationProperty
argument_list|(
name|String
name|key
argument_list|)
block|{
name|iKey
operator|=
name|key
block|; }
specifier|public
name|String
name|key
argument_list|()
block|{
return|return
name|iKey
return|;
block|}
end_expr_stmt

begin_function
specifier|public
name|String
name|key
parameter_list|(
name|String
name|reference
parameter_list|)
block|{
return|return
operator|(
name|reference
operator|==
literal|null
condition|?
name|iKey
else|:
name|iKey
operator|.
name|replace
argument_list|(
literal|"%"
argument_list|,
name|reference
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|public
name|String
name|defaultValue
parameter_list|()
block|{
try|try
block|{
name|DefaultValue
name|defaultValue
init|=
name|ApplicationProperty
operator|.
name|class
operator|.
name|getField
argument_list|(
name|name
argument_list|()
argument_list|)
operator|.
name|getAnnotation
argument_list|(
name|DefaultValue
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|(
name|defaultValue
operator|==
literal|null
condition|?
literal|null
else|:
name|defaultValue
operator|.
name|value
argument_list|()
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
end_function

begin_function
specifier|public
name|String
name|description
parameter_list|()
block|{
try|try
block|{
name|Description
name|description
init|=
name|ApplicationProperty
operator|.
name|class
operator|.
name|getField
argument_list|(
name|name
argument_list|()
argument_list|)
operator|.
name|getAnnotation
argument_list|(
name|Description
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|(
name|description
operator|==
literal|null
condition|?
literal|null
else|:
name|description
operator|.
name|value
argument_list|()
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
end_function

begin_function
specifier|public
name|Class
name|type
parameter_list|()
block|{
try|try
block|{
name|Type
name|type
init|=
name|ApplicationProperty
operator|.
name|class
operator|.
name|getField
argument_list|(
name|name
argument_list|()
argument_list|)
operator|.
name|getAnnotation
argument_list|(
name|Type
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|(
name|type
operator|==
literal|null
condition|?
name|String
operator|.
name|class
else|:
name|type
operator|.
name|value
argument_list|()
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
end_function

begin_function
specifier|public
name|Class
name|implementation
parameter_list|()
block|{
try|try
block|{
name|Implements
name|impl
init|=
name|ApplicationProperty
operator|.
name|class
operator|.
name|getField
argument_list|(
name|name
argument_list|()
argument_list|)
operator|.
name|getAnnotation
argument_list|(
name|Implements
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|(
name|impl
operator|==
literal|null
condition|?
literal|null
else|:
name|impl
operator|.
name|value
argument_list|()
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
end_function

begin_function
specifier|public
name|String
index|[]
name|availableValues
parameter_list|()
block|{
try|try
block|{
name|Values
name|type
init|=
name|ApplicationProperty
operator|.
name|class
operator|.
name|getField
argument_list|(
name|name
argument_list|()
argument_list|)
operator|.
name|getAnnotation
argument_list|(
name|Values
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|(
name|type
operator|==
literal|null
condition|?
literal|null
else|:
name|type
operator|.
name|value
argument_list|()
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
end_function

begin_function
specifier|public
name|Double
name|since
parameter_list|()
block|{
try|try
block|{
name|Since
name|since
init|=
name|ApplicationProperty
operator|.
name|class
operator|.
name|getField
argument_list|(
name|name
argument_list|()
argument_list|)
operator|.
name|getAnnotation
argument_list|(
name|Since
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|(
name|since
operator|==
literal|null
condition|?
literal|null
else|:
name|since
operator|.
name|value
argument_list|()
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
end_function

begin_function
specifier|public
name|String
name|value
parameter_list|()
block|{
return|return
name|value
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|String
name|value
parameter_list|(
name|String
name|reference
parameter_list|)
block|{
return|return
name|value
argument_list|(
name|reference
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|String
name|value
parameter_list|(
name|String
name|reference
parameter_list|,
name|String
name|defaultValueOverride
parameter_list|)
block|{
name|String
name|value
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
name|key
argument_list|(
name|reference
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
return|return
name|value
return|;
name|String
index|[]
name|oldKeys
init|=
name|replaces
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldKeys
operator|!=
literal|null
condition|)
for|for
control|(
name|String
name|key
range|:
name|oldKeys
control|)
block|{
name|value
operator|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
name|reference
operator|==
literal|null
condition|?
name|key
else|:
name|key
operator|.
name|replace
argument_list|(
literal|"%"
argument_list|,
name|reference
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
return|return
name|value
return|;
block|}
return|return
name|defaultValueOverride
operator|!=
literal|null
condition|?
name|defaultValueOverride
else|:
name|defaultValue
argument_list|()
return|;
block|}
end_function

begin_function
specifier|public
name|boolean
name|isTrue
parameter_list|()
block|{
return|return
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|boolean
name|isTrue
parameter_list|(
name|String
name|reference
parameter_list|)
block|{
return|return
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|(
name|reference
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|boolean
name|isTrue
parameter_list|(
name|String
name|reference
parameter_list|,
name|boolean
name|defaultValueOverride
parameter_list|)
block|{
return|return
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|(
name|reference
argument_list|,
name|defaultValueOverride
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|boolean
name|isFalse
parameter_list|()
block|{
return|return
operator|!
name|isTrue
argument_list|()
return|;
block|}
end_function

begin_function
specifier|public
name|Integer
name|intValue
parameter_list|()
block|{
try|try
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|value
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
end_function

begin_function
specifier|public
name|Integer
name|intValue
parameter_list|(
name|String
name|reference
parameter_list|)
block|{
try|try
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|value
argument_list|(
name|reference
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
end_function

begin_function
specifier|public
name|Float
name|floatValue
parameter_list|()
block|{
try|try
block|{
return|return
name|Float
operator|.
name|valueOf
argument_list|(
name|value
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
end_function

begin_function
specifier|public
name|Double
name|doubleValue
parameter_list|()
block|{
try|try
block|{
return|return
name|Double
operator|.
name|valueOf
argument_list|(
name|value
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
end_function

begin_function
specifier|private
name|String
index|[]
name|replaces
parameter_list|()
block|{
try|try
block|{
name|Replaces
name|replaces
init|=
name|ApplicationProperty
operator|.
name|class
operator|.
name|getField
argument_list|(
name|name
argument_list|()
argument_list|)
operator|.
name|getAnnotation
argument_list|(
name|Replaces
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|(
name|replaces
operator|==
literal|null
condition|?
literal|null
else|:
name|replaces
operator|.
name|value
argument_list|()
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
end_function

begin_function
specifier|public
name|boolean
name|matches
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|.
name|matches
argument_list|(
name|key
argument_list|()
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
literal|"\\."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"%"
argument_list|,
literal|"(.+)"
argument_list|)
argument_list|)
condition|)
return|return
literal|true
return|;
name|String
index|[]
name|oldKeys
init|=
name|replaces
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldKeys
operator|!=
literal|null
condition|)
for|for
control|(
name|String
name|old
range|:
name|oldKeys
control|)
block|{
if|if
condition|(
name|key
operator|.
name|matches
argument_list|(
name|old
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
literal|"\\."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"%"
argument_list|,
literal|"(.+)"
argument_list|)
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
specifier|public
name|String
name|reference
parameter_list|()
block|{
try|try
block|{
name|Parameter
name|reference
init|=
name|ApplicationProperty
operator|.
name|class
operator|.
name|getField
argument_list|(
name|name
argument_list|()
argument_list|)
operator|.
name|getAnnotation
argument_list|(
name|Parameter
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|(
name|reference
operator|==
literal|null
condition|?
literal|null
else|:
name|reference
operator|.
name|value
argument_list|()
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
end_function

begin_function
specifier|public
name|String
name|reference
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|key
argument_list|()
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
literal|"\\."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"%"
argument_list|,
literal|"(.+)"
argument_list|)
argument_list|)
operator|.
name|matcher
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
operator|&&
name|m
operator|.
name|groupCount
argument_list|()
operator|>
literal|0
condition|)
return|return
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
return|;
name|String
index|[]
name|oldKeys
init|=
name|replaces
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldKeys
operator|!=
literal|null
condition|)
for|for
control|(
name|String
name|old
range|:
name|oldKeys
control|)
block|{
name|m
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|old
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
literal|"\\."
argument_list|)
operator|.
name|replace
argument_list|(
literal|"%"
argument_list|,
literal|"(.+)"
argument_list|)
argument_list|)
operator|.
name|matcher
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
operator|&&
name|m
operator|.
name|groupCount
argument_list|()
operator|>
literal|0
condition|)
return|return
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|ApplicationProperty
name|fromKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
for|for
control|(
name|ApplicationProperty
name|property
range|:
name|values
argument_list|()
control|)
if|if
condition|(
name|property
operator|.
name|key
argument_list|()
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
return|return
name|property
return|;
for|for
control|(
name|ApplicationProperty
name|property
range|:
name|values
argument_list|()
control|)
if|if
condition|(
name|property
operator|.
name|matches
argument_list|(
name|key
argument_list|)
condition|)
return|return
name|property
return|;
return|return
literal|null
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|String
name|getDescription
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|ApplicationProperty
name|property
init|=
name|fromKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
name|String
name|reference
init|=
name|property
operator|.
name|reference
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|String
name|description
init|=
name|property
operator|.
name|description
argument_list|()
decl_stmt|;
if|if
condition|(
name|reference
operator|!=
literal|null
condition|)
return|return
name|description
operator|.
name|replace
argument_list|(
literal|"%"
argument_list|,
name|reference
argument_list|)
return|;
return|return
name|description
return|;
block|}
return|return
literal|null
return|;
block|}
end_function

begin_function
specifier|public
name|boolean
name|isDeprecated
parameter_list|()
block|{
try|try
block|{
return|return
operator|(
name|ApplicationProperty
operator|.
name|class
operator|.
name|getField
argument_list|(
name|name
argument_list|()
argument_list|)
operator|.
name|getAnnotation
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
operator|!=
literal|null
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
end_function

begin_function
specifier|public
name|boolean
name|isSecret
parameter_list|()
block|{
try|try
block|{
return|return
operator|(
name|ApplicationProperty
operator|.
name|class
operator|.
name|getField
argument_list|(
name|name
argument_list|()
argument_list|)
operator|.
name|getAnnotation
argument_list|(
name|Secret
operator|.
name|class
argument_list|)
operator|!=
literal|null
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
end_function

begin_function
specifier|public
name|boolean
name|isReadOnly
parameter_list|()
block|{
try|try
block|{
return|return
operator|(
name|ApplicationProperty
operator|.
name|class
operator|.
name|getField
argument_list|(
name|name
argument_list|()
argument_list|)
operator|.
name|getAnnotation
argument_list|(
name|ReadOnly
operator|.
name|class
argument_list|)
operator|!=
literal|null
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
end_function

begin_annotation_defn
annotation|@
name|Documented
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
annotation|@
name|Target
argument_list|(
name|value
operator|=
block|{
name|ElementType
operator|.
name|FIELD
block|}
argument_list|)
comment|/** 	 * Application property is secret (should not show up on the Application Configuration page). 	 */
specifier|public
specifier|static
annotation_defn|@interface
name|Secret
block|{ 	}
end_annotation_defn

begin_annotation_defn
annotation|@
name|Documented
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
annotation|@
name|Target
argument_list|(
name|value
operator|=
block|{
name|ElementType
operator|.
name|FIELD
block|}
argument_list|)
comment|/** 	 * Application property cannot be changed on the Application Configuration page. 	 */
specifier|public
specifier|static
annotation_defn|@interface
name|ReadOnly
block|{ 	}
end_annotation_defn

begin_annotation_defn
annotation|@
name|Documented
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
annotation|@
name|Target
argument_list|(
name|value
operator|=
block|{
name|ElementType
operator|.
name|FIELD
block|}
argument_list|)
comment|/** 	 * UniTime version where the application property was introduced. 	 */
specifier|static
annotation_defn|@interface
name|Since
block|{
name|double
name|value
parameter_list|()
function_decl|;
block|}
end_annotation_defn

begin_annotation_defn
annotation|@
name|Documented
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
annotation|@
name|Target
argument_list|(
name|value
operator|=
block|{
name|ElementType
operator|.
name|FIELD
block|}
argument_list|)
comment|/** 	 * Short description of the application property. 	 */
specifier|static
annotation_defn|@interface
name|Description
block|{
name|String
name|value
parameter_list|()
function_decl|;
block|}
end_annotation_defn

begin_annotation_defn
annotation|@
name|Documented
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
annotation|@
name|Target
argument_list|(
name|value
operator|=
block|{
name|ElementType
operator|.
name|FIELD
block|}
argument_list|)
comment|/** 	 * Default value of the application property. 	 */
specifier|static
annotation_defn|@interface
name|DefaultValue
block|{
name|String
name|value
parameter_list|()
function_decl|;
block|}
end_annotation_defn

begin_annotation_defn
annotation|@
name|Documented
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
annotation|@
name|Target
argument_list|(
name|value
operator|=
block|{
name|ElementType
operator|.
name|FIELD
block|}
argument_list|)
comment|/** 	 * Type of the application property. 	 */
specifier|static
annotation_defn|@interface
name|Type
block|{
name|Class
name|value
parameter_list|()
default|default
name|String
operator|.
name|class
function_decl|;
block|}
end_annotation_defn

begin_annotation_defn
annotation|@
name|Documented
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
annotation|@
name|Target
argument_list|(
name|value
operator|=
block|{
name|ElementType
operator|.
name|FIELD
block|}
argument_list|)
comment|/** 	 * Possible values of the application property. 	 */
specifier|static
annotation_defn|@interface
name|Values
block|{
name|String
index|[]
name|value
parameter_list|()
function_decl|;
block|}
end_annotation_defn

begin_annotation_defn
annotation|@
name|Documented
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
annotation|@
name|Target
argument_list|(
name|value
operator|=
block|{
name|ElementType
operator|.
name|FIELD
block|}
argument_list|)
comment|/** 	 * Old key (or keys) of the application property. 	 */
specifier|static
annotation_defn|@interface
name|Replaces
block|{
name|String
index|[]
name|value
parameter_list|()
function_decl|;
block|}
end_annotation_defn

begin_annotation_defn
annotation|@
name|Documented
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
annotation|@
name|Target
argument_list|(
name|value
operator|=
block|{
name|ElementType
operator|.
name|FIELD
block|}
argument_list|)
comment|/** 	 * Description of the parameter (%) in the property's key. 	 */
specifier|static
annotation_defn|@interface
name|Parameter
block|{
name|String
name|value
parameter_list|()
function_decl|;
block|}
end_annotation_defn

begin_annotation_defn
annotation|@
name|Documented
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
annotation|@
name|Target
argument_list|(
name|value
operator|=
block|{
name|ElementType
operator|.
name|FIELD
block|}
argument_list|)
comment|/** 	 * If the property is class, interface (or abstract class) that the given class must implement (extend). 	 */
specifier|static
annotation_defn|@interface
name|Implements
block|{
name|Class
name|value
parameter_list|()
function_decl|;
block|}
end_annotation_defn

begin_function
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|description
init|=
name|description
argument_list|()
decl_stmt|;
name|String
name|defaultValue
init|=
name|defaultValue
argument_list|()
decl_stmt|;
return|return
operator|(
name|description
operator|==
literal|null
condition|?
literal|""
else|:
literal|"# "
operator|+
name|description
operator|+
literal|"\n"
operator|)
operator|+
name|key
argument_list|()
operator|+
literal|"="
operator|+
operator|(
name|defaultValue
operator|==
literal|null
condition|?
literal|""
else|:
name|defaultValue
operator|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
for|for
control|(
name|ApplicationProperty
name|p
range|:
name|ApplicationProperty
operator|.
name|values
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|description
argument_list|()
operator|!=
literal|null
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"# "
operator|+
name|p
operator|.
name|description
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|implementation
argument_list|()
operator|!=
literal|null
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"# Implements: "
operator|+
name|p
operator|.
name|implementation
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|p
operator|.
name|type
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|p
operator|.
name|type
argument_list|()
operator|.
name|equals
argument_list|(
name|String
operator|.
name|class
argument_list|)
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"# Type: "
operator|+
name|p
operator|.
name|type
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|reference
argument_list|()
operator|!=
literal|null
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"# Parameter: "
operator|+
name|p
operator|.
name|reference
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|replaces
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|String
name|r
range|:
name|p
operator|.
name|replaces
argument_list|()
control|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"# Replaces: "
operator|+
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|since
argument_list|()
operator|!=
literal|null
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"# Since "
operator|+
name|p
operator|.
name|since
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|isDeprecated
argument_list|()
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"# Deprecated"
argument_list|)
expr_stmt|;
name|String
name|value
init|=
name|p
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|defaultValue
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|p
operator|.
name|isSecret
argument_list|()
operator|&&
operator|!
name|p
operator|.
name|defaultValue
argument_list|()
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"# Default: "
operator|+
name|p
operator|.
name|defaultValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"#"
operator|+
name|p
operator|.
name|key
argument_list|()
operator|+
literal|"="
operator|+
operator|(
name|p
operator|.
name|isSecret
argument_list|()
condition|?
literal|"****"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
else|else
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|p
operator|.
name|key
argument_list|()
operator|+
literal|"="
operator|+
operator|(
name|p
operator|.
name|isSecret
argument_list|()
condition|?
literal|"****"
else|:
name|value
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

unit|}
end_unit

