begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|instructor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|util
operator|.
name|HtmlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|FilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|FilterRpcResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|FilterRpcResponse
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|AttributeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|InstructorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|PreferenceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|TeachingRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|TeachingRequestsFilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorAttributeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructorAttributeTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|FilterBoxBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|instructor
operator|.
name|InstructorSchedulingProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|NameFormat
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|TeachingRequestsFilterRpcRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TeachingRequestsFilterBackend
extends|extends
name|FilterBoxBackend
argument_list|<
name|TeachingRequestsFilterRpcRequest
argument_list|>
block|{
specifier|protected
specifier|static
name|GwtMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
name|SolverService
argument_list|<
name|InstructorSchedulingProxy
argument_list|>
name|instructorSchedulingSolverService
decl_stmt|;
annotation|@
name|Override
specifier|public
name|FilterRpcResponse
name|execute
parameter_list|(
name|TeachingRequestsFilterRpcRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|InstructorScheduling
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|execute
argument_list|(
name|request
argument_list|,
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|load
parameter_list|(
name|TeachingRequestsFilterRpcRequest
name|request
parameter_list|,
name|FilterRpcResponse
name|response
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|InstructorSchedulingProxy
name|solver
init|=
name|instructorSchedulingSolverService
operator|.
name|getSolver
argument_list|()
decl_stmt|;
name|Long
name|ownerId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
name|ownerId
operator|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SolverGroupId"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|ownerId
operator|!=
literal|null
condition|)
name|request
operator|.
name|setOption
argument_list|(
literal|"owner"
argument_list|,
name|ownerId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SubjectArea
name|sa
range|:
name|SubjectArea
operator|.
name|getUserSubjectAreas
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
literal|true
argument_list|)
control|)
block|{
if|if
condition|(
name|ownerId
operator|!=
literal|null
operator|&&
operator|(
name|sa
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSolverGroup
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|ownerId
operator|.
name|equals
argument_list|(
name|sa
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSolverGroup
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
condition|)
continue|continue;
name|boolean
name|hasTeachingPreference
init|=
literal|false
decl_stmt|;
for|for
control|(
name|DepartmentalInstructor
name|di
range|:
name|sa
operator|.
name|getDepartment
argument_list|()
operator|.
name|getInstructors
argument_list|()
control|)
if|if
condition|(
name|di
operator|.
name|getTeachingPreference
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|di
operator|.
name|getTeachingPreference
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
block|{
name|hasTeachingPreference
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|hasTeachingPreference
condition|)
continue|continue;
name|response
operator|.
name|add
argument_list|(
literal|"subject"
argument_list|,
operator|new
name|Entity
argument_list|(
name|sa
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|sa
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|,
name|sa
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|" - "
operator|+
name|HtmlUtils
operator|.
name|htmlUnescape
argument_list|(
name|sa
operator|.
name|getTitle
argument_list|()
argument_list|)
argument_list|,
literal|"hint"
argument_list|,
name|sa
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|" - "
operator|+
name|HtmlUtils
operator|.
name|htmlUnescape
argument_list|(
name|sa
operator|.
name|getTitle
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Department
name|d
range|:
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|ownerId
operator|!=
literal|null
operator|&&
operator|(
name|d
operator|.
name|getSolverGroup
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|ownerId
operator|.
name|equals
argument_list|(
name|d
operator|.
name|getSolverGroup
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
condition|)
continue|continue;
name|boolean
name|hasTeachingPreference
init|=
literal|false
decl_stmt|;
for|for
control|(
name|DepartmentalInstructor
name|di
range|:
name|d
operator|.
name|getInstructors
argument_list|()
control|)
if|if
condition|(
name|di
operator|.
name|getTeachingPreference
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|di
operator|.
name|getTeachingPreference
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
block|{
name|hasTeachingPreference
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|hasTeachingPreference
condition|)
continue|continue;
name|response
operator|.
name|add
argument_list|(
literal|"department"
argument_list|,
operator|new
name|Entity
argument_list|(
name|d
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|d
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|d
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" - "
operator|+
name|HtmlUtils
operator|.
name|htmlUnescape
argument_list|(
name|d
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Department
name|department
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"department"
argument_list|)
condition|)
name|department
operator|=
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"department"
argument_list|)
argument_list|,
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"subject"
argument_list|)
condition|)
block|{
name|SubjectArea
name|subject
init|=
name|SubjectArea
operator|.
name|findByAbbv
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|request
operator|.
name|getOption
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|subject
operator|!=
literal|null
condition|)
name|department
operator|=
name|subject
operator|.
name|getDepartment
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|InstructorAttribute
name|a
range|:
name|InstructorAttribute
operator|.
name|getAllGlobalAttributes
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
control|)
block|{
name|response
operator|.
name|add
argument_list|(
name|a
operator|.
name|getType
argument_list|()
operator|.
name|getReference
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'_'
argument_list|)
argument_list|,
operator|new
name|Entity
argument_list|(
name|a
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|a
operator|.
name|getCode
argument_list|()
argument_list|,
name|a
operator|.
name|getName
argument_list|()
argument_list|,
literal|"hint"
argument_list|,
name|a
operator|.
name|getNameWithType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|department
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|InstructorAttribute
name|a
range|:
name|InstructorAttribute
operator|.
name|getAllDepartmentalAttributes
argument_list|(
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
control|)
block|{
name|response
operator|.
name|add
argument_list|(
name|a
operator|.
name|getType
argument_list|()
operator|.
name|getReference
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'_'
argument_list|)
argument_list|,
operator|new
name|Entity
argument_list|(
name|a
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|a
operator|.
name|getCode
argument_list|()
argument_list|,
name|a
operator|.
name|getName
argument_list|()
argument_list|,
literal|"hint"
argument_list|,
name|a
operator|.
name|getNameWithType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|fixAttributeTypes
parameter_list|(
name|TeachingRequestsFilterRpcRequest
name|request
parameter_list|)
block|{
name|InstructorSchedulingProxy
name|solver
init|=
name|instructorSchedulingSolverService
operator|.
name|getSolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
name|Long
name|ownerId
init|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SolverGroupId"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|ownerId
operator|!=
literal|null
condition|)
name|request
operator|.
name|setOption
argument_list|(
literal|"owner"
argument_list|,
name|ownerId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|InstructorAttributeType
name|type
range|:
name|InstructorAttributeTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
control|)
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'_'
argument_list|)
argument_list|)
condition|)
for|for
control|(
name|String
name|option
range|:
name|request
operator|.
name|getOptions
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'_'
argument_list|)
argument_list|)
control|)
name|request
operator|.
name|addOption
argument_list|(
literal|"attribute"
argument_list|,
name|option
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|suggestions
parameter_list|(
name|TeachingRequestsFilterRpcRequest
name|request
parameter_list|,
name|FilterRpcResponse
name|response
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|fixAttributeTypes
argument_list|(
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|NameFormat
name|nf
init|=
name|NameFormat
operator|.
name|fromReference
argument_list|(
name|UserProperty
operator|.
name|NameFormat
operator|.
name|get
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|InstructorQuery
operator|.
name|QueryInstance
name|instance
init|=
name|getQuery
argument_list|(
name|request
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
literal|"distinct i"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"instructor"
argument_list|)
operator|.
name|order
argument_list|(
literal|"i.lastName, i.firstName, i.middleName"
argument_list|)
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
name|String
name|where
init|=
literal|""
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|request
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
literal|", "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|token
init|=
name|s
operator|.
name|nextToken
argument_list|()
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|where
operator|.
name|isEmpty
argument_list|()
condition|)
name|where
operator|+=
literal|" and "
expr_stmt|;
name|where
operator|+=
literal|"(upper(i.firstName) like :cn"
operator|+
name|id
operator|+
literal|" || '%' or upper(i.middleName) like :cn"
operator|+
name|id
operator|+
literal|" || '%' or upper(i.lastName) like :cn"
operator|+
name|id
operator|+
literal|" || '%' or upper(i.email) like :cn"
operator|+
name|id
operator|+
literal|")"
expr_stmt|;
name|instance
operator|.
name|set
argument_list|(
literal|"cn"
operator|+
name|id
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|>
literal|0
condition|)
block|{
name|instance
operator|.
name|where
argument_list|(
literal|"("
operator|+
name|where
operator|+
literal|") or upper(trim(trailing ' ' from i.lastName || ', ' || i.firstName || ' ' || i.middleName)) = :name or i.externalUniqueId = :id"
argument_list|)
expr_stmt|;
name|instance
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
name|request
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|set
argument_list|(
literal|"id"
argument_list|,
name|request
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DepartmentalInstructor
name|instructor
range|:
operator|(
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
operator|)
name|instance
operator|.
name|limit
argument_list|(
literal|20
argument_list|)
operator|.
name|query
argument_list|(
name|DepartmentalInstructorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
name|response
operator|.
name|addSuggestion
argument_list|(
name|nf
operator|.
name|format
argument_list|(
name|instructor
argument_list|)
argument_list|,
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
condition|?
name|nf
operator|.
name|format
argument_list|(
name|instructor
argument_list|)
else|:
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|MSG
operator|.
name|fieldInstructor
argument_list|()
argument_list|,
literal|"instructor"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|request
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RequestQuery
operator|.
name|QueryInstance
name|instance
init|=
name|getRequestQuery
argument_list|(
name|request
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
literal|"distinct c"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"course"
argument_list|)
operator|.
name|order
argument_list|(
literal|"c.subjectAreaAbbv, c.courseNbr"
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"subject"
argument_list|)
condition|)
name|instance
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
name|request
operator|.
name|getText
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|where
argument_list|(
literal|"upper(c.subjectAreaAbbv || ' ' || c.courseNbr) like :name or c.courseNbr like :name"
argument_list|)
expr_stmt|;
else|else
name|instance
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
name|request
operator|.
name|getText
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|where
argument_list|(
literal|"upper(c.subjectAreaAbbv || ' ' || c.courseNbr) like :name"
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseOffering
name|co
range|:
operator|(
name|List
argument_list|<
name|CourseOffering
argument_list|>
operator|)
name|instance
operator|.
name|limit
argument_list|(
literal|20
argument_list|)
operator|.
name|query
argument_list|(
name|DepartmentalInstructorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|response
operator|.
name|addSuggestion
argument_list|(
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|co
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
operator|||
name|co
operator|.
name|getTitle
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|MSG
operator|.
name|fieldCourse
argument_list|()
else|:
name|co
operator|.
name|getTitle
argument_list|()
argument_list|,
literal|"course"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|enumarate
parameter_list|(
name|TeachingRequestsFilterRpcRequest
name|request
parameter_list|,
name|FilterRpcResponse
name|response
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
block|}
specifier|public
specifier|static
name|InstructorQuery
name|getQuery
parameter_list|(
name|FilterRpcRequest
name|request
parameter_list|,
name|UserContext
name|user
parameter_list|)
block|{
name|InstructorQuery
name|query
init|=
operator|new
name|InstructorQuery
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
operator|==
literal|null
condition|?
name|user
operator|.
name|getCurrentAcademicSessionId
argument_list|()
else|:
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"instructorId"
argument_list|)
condition|)
block|{
name|query
operator|.
name|addParameter
argument_list|(
literal|"instructor"
argument_list|,
literal|"Xiid"
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"instructorId"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"instructor"
argument_list|,
literal|"i.uniqueId = :Xiid"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"instructor"
argument_list|)
condition|)
block|{
name|String
name|instructor
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"instructor"
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|,
literal|", "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|token
init|=
name|s
operator|.
name|nextToken
argument_list|()
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|instructor
operator|+=
operator|(
name|instructor
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|" and "
operator|)
operator|+
literal|"(upper(i.firstName) like :Xins"
operator|+
name|id
operator|+
literal|" || '%' or "
operator|+
literal|"upper(i.middleName) like :Xins"
operator|+
name|id
operator|+
literal|" || '%' or upper(i.lastName) like :Xins"
operator|+
name|id
operator|+
literal|" || '%' or upper(i.email) like :Xins"
operator|+
name|id
operator|+
literal|" || '%')"
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"instructor"
argument_list|,
literal|"Xins"
operator|+
name|id
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|>
literal|0
condition|)
block|{
name|instructor
operator|=
literal|"("
operator|+
name|instructor
operator|+
literal|") or (upper(trim(trailing ' ' from i.lastName || ', ' || i.firstName || ' ' || i.middleName)) = :Xins) or (i.externalUniqueId = :Xiid)"
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"instructor"
argument_list|,
literal|"Xins"
argument_list|,
name|request
operator|.
name|getOption
argument_list|(
literal|"instructor"
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"instructor"
argument_list|,
literal|"Xiid"
argument_list|,
name|request
operator|.
name|getOption
argument_list|(
literal|"instructor"
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"instructor"
argument_list|,
name|instructor
argument_list|)
expr_stmt|;
block|}
block|}
name|query
operator|.
name|addWhere
argument_list|(
literal|"load"
argument_list|,
literal|"i.maxLoad> 0"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"preference"
argument_list|,
literal|"i.teachingPreference.prefProlog != :Xpref"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"preference"
argument_list|,
literal|"Xpref"
argument_list|,
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"department"
argument_list|)
condition|)
block|{
name|query
operator|.
name|addParameter
argument_list|(
literal|"department"
argument_list|,
literal|"Xdpt"
argument_list|,
name|request
operator|.
name|getOption
argument_list|(
literal|"department"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"department"
argument_list|,
literal|"i.department.deptCode = :Xdpt"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"subject"
argument_list|)
condition|)
block|{
name|query
operator|.
name|addFrom
argument_list|(
literal|"subject"
argument_list|,
literal|"SubjectArea s"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"subject"
argument_list|,
literal|"Xsa"
argument_list|,
name|request
operator|.
name|getOption
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"subject"
argument_list|,
literal|"s in elements(i.department.subjectAreas) and s.subjectAreaAbbreviation = :Xsa"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"owner"
argument_list|)
condition|)
block|{
name|query
operator|.
name|addParameter
argument_list|(
literal|"owner"
argument_list|,
literal|"Xsg"
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"owner"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"owner"
argument_list|,
literal|"i.department.solverGroup.uniqueId = :Xsg"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|department
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Department
name|d
range|:
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|user
argument_list|)
control|)
block|{
name|boolean
name|hasTeachingPreference
init|=
literal|false
decl_stmt|;
for|for
control|(
name|DepartmentalInstructor
name|di
range|:
name|d
operator|.
name|getInstructors
argument_list|()
control|)
if|if
condition|(
name|di
operator|.
name|getTeachingPreference
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|di
operator|.
name|getTeachingPreference
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
block|{
name|hasTeachingPreference
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|hasTeachingPreference
condition|)
continue|continue;
name|query
operator|.
name|addParameter
argument_list|(
literal|"department"
argument_list|,
literal|"Xdpt"
operator|+
name|id
argument_list|,
name|d
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|department
operator|+=
operator|(
name|department
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":Xdpt"
operator|+
name|id
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|>
literal|0
condition|)
name|query
operator|.
name|addWhere
argument_list|(
literal|"department"
argument_list|,
literal|"i.department.uniqueId in ("
operator|+
name|department
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"attribute"
argument_list|)
condition|)
block|{
name|query
operator|.
name|addFrom
argument_list|(
literal|"attribute"
argument_list|,
literal|"InstructorAttribute a"
argument_list|)
expr_stmt|;
name|String
name|attribute
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|g
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"attribute"
argument_list|)
control|)
block|{
name|attribute
operator|+=
operator|(
name|attribute
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":Xatt"
operator|+
name|id
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"attribute"
argument_list|,
literal|"Xatt"
operator|+
name|id
argument_list|,
name|g
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
name|query
operator|.
name|addWhere
argument_list|(
literal|"attribute"
argument_list|,
literal|"a in elements(i.attributes) and a.code in ("
operator|+
name|attribute
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
specifier|public
specifier|static
class|class
name|InstructorQuery
block|{
specifier|protected
name|Long
name|iSessionId
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|iFrom
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|iWhere
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|iParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|InstructorQuery
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|iSessionId
operator|=
name|sessionId
expr_stmt|;
block|}
specifier|public
name|InstructorQuery
parameter_list|(
name|InstructorQuery
name|q
parameter_list|)
block|{
name|iSessionId
operator|=
name|q
operator|.
name|iSessionId
expr_stmt|;
name|iFrom
operator|.
name|putAll
argument_list|(
name|q
operator|.
name|iFrom
argument_list|)
expr_stmt|;
name|iWhere
operator|.
name|putAll
argument_list|(
name|q
operator|.
name|iWhere
argument_list|)
expr_stmt|;
name|iParams
operator|.
name|putAll
argument_list|(
name|q
operator|.
name|iParams
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addFrom
parameter_list|(
name|String
name|option
parameter_list|,
name|String
name|from
parameter_list|)
block|{
if|if
condition|(
name|from
operator|==
literal|null
condition|)
name|iFrom
operator|.
name|remove
argument_list|(
name|option
argument_list|)
expr_stmt|;
else|else
name|iFrom
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|from
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addWhere
parameter_list|(
name|String
name|option
parameter_list|,
name|String
name|where
parameter_list|)
block|{
if|if
condition|(
name|where
operator|==
literal|null
condition|)
name|iWhere
operator|.
name|remove
argument_list|(
name|option
argument_list|)
expr_stmt|;
else|else
name|iWhere
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|where
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addParameter
parameter_list|(
name|String
name|option
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
name|iParams
operator|.
name|get
argument_list|(
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
name|params
operator|==
literal|null
condition|)
block|{
name|params
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|iParams
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
name|params
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
else|else
name|params
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getFrom
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|excludeOption
parameter_list|)
block|{
name|String
name|from
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|iFrom
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|excludeOption
operator|!=
literal|null
operator|&&
name|excludeOption
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
continue|continue;
name|from
operator|+=
operator|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"inner join"
argument_list|)
condition|?
literal|" "
else|:
literal|", "
operator|)
operator|+
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
return|return
name|from
return|;
block|}
specifier|public
name|String
name|getWhere
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|excludeOption
parameter_list|)
block|{
name|String
name|where
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|iWhere
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|excludeOption
operator|!=
literal|null
operator|&&
name|excludeOption
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
continue|continue;
name|where
operator|+=
literal|" and ("
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
return|return
name|where
return|;
block|}
specifier|public
name|org
operator|.
name|hibernate
operator|.
name|Query
name|setParams
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Query
name|query
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|excludeOption
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entry
range|:
name|iParams
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|excludeOption
operator|!=
literal|null
operator|&&
name|excludeOption
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|param
range|:
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Integer
condition|)
block|{
name|query
operator|.
name|setInteger
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Integer
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Long
condition|)
block|{
name|query
operator|.
name|setLong
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Long
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|String
condition|)
block|{
name|query
operator|.
name|setString
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Boolean
condition|)
block|{
name|query
operator|.
name|setBoolean
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Boolean
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Date
condition|)
block|{
name|query
operator|.
name|setDate
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Date
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|setString
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
name|param
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|query
return|;
block|}
specifier|public
name|QueryInstance
name|select
parameter_list|(
name|String
name|select
parameter_list|)
block|{
return|return
operator|new
name|QueryInstance
argument_list|(
name|select
argument_list|)
return|;
block|}
specifier|public
class|class
name|QueryInstance
block|{
specifier|protected
name|String
name|iSelect
init|=
literal|null
decl_stmt|,
name|iFrom
init|=
literal|null
decl_stmt|,
name|iWhere
init|=
literal|null
decl_stmt|,
name|iOrderBy
init|=
literal|null
decl_stmt|,
name|iGroupBy
init|=
literal|null
decl_stmt|,
name|iType
init|=
literal|"DepartmentalInstructor"
decl_stmt|;
specifier|protected
name|Integer
name|iLimit
init|=
literal|null
decl_stmt|;
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|iExclude
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|iParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|QueryInstance
parameter_list|(
name|String
name|select
parameter_list|)
block|{
name|iSelect
operator|=
name|select
expr_stmt|;
block|}
specifier|public
name|QueryInstance
name|from
parameter_list|(
name|String
name|from
parameter_list|)
block|{
name|iFrom
operator|=
name|from
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|QueryInstance
name|where
parameter_list|(
name|String
name|where
parameter_list|)
block|{
if|if
condition|(
name|iWhere
operator|==
literal|null
condition|)
name|iWhere
operator|=
literal|"("
operator|+
name|where
operator|+
literal|")"
expr_stmt|;
else|else
name|iWhere
operator|+=
literal|" and ("
operator|+
name|where
operator|+
literal|")"
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|QueryInstance
name|type
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|iType
operator|=
name|type
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|QueryInstance
name|order
parameter_list|(
name|String
name|orderBy
parameter_list|)
block|{
name|iOrderBy
operator|=
name|orderBy
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|QueryInstance
name|group
parameter_list|(
name|String
name|groupBy
parameter_list|)
block|{
name|iGroupBy
operator|=
name|groupBy
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|QueryInstance
name|exclude
parameter_list|(
name|String
name|excludeOption
parameter_list|)
block|{
name|iExclude
operator|.
name|add
argument_list|(
name|excludeOption
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|QueryInstance
name|set
parameter_list|(
name|String
name|param
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|iParams
operator|.
name|put
argument_list|(
name|param
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|QueryInstance
name|limit
parameter_list|(
name|Integer
name|limit
parameter_list|)
block|{
name|iLimit
operator|=
operator|(
name|limit
operator|==
literal|null
operator|||
name|limit
operator|<=
literal|0
condition|?
literal|null
else|:
name|limit
operator|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|String
name|query
parameter_list|()
block|{
return|return
literal|"select "
operator|+
operator|(
name|iSelect
operator|==
literal|null
condition|?
literal|"distinct i"
else|:
name|iSelect
operator|)
operator|+
literal|" from "
operator|+
name|iType
operator|+
literal|" i "
operator|+
operator|(
name|iFrom
operator|==
literal|null
condition|?
literal|""
else|:
name|iFrom
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"inner join"
argument_list|)
condition|?
literal|" "
operator|+
name|iFrom
else|:
literal|", "
operator|+
name|iFrom
operator|)
operator|+
name|getFrom
argument_list|(
name|iExclude
argument_list|)
operator|+
literal|" where i.department.session.uniqueId = :sessionId"
operator|+
name|getWhere
argument_list|(
name|iExclude
argument_list|)
operator|+
operator|(
name|iWhere
operator|==
literal|null
condition|?
literal|""
else|:
literal|" and ("
operator|+
name|iWhere
operator|+
literal|")"
operator|)
operator|+
operator|(
name|iGroupBy
operator|==
literal|null
condition|?
literal|""
else|:
literal|" group by "
operator|+
name|iGroupBy
operator|)
operator|+
operator|(
name|iOrderBy
operator|==
literal|null
condition|?
literal|""
else|:
literal|" order by "
operator|+
name|iOrderBy
operator|)
return|;
block|}
specifier|public
name|org
operator|.
name|hibernate
operator|.
name|Query
name|query
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Query
name|query
init|=
name|setParams
argument_list|(
name|hibSession
operator|.
name|createQuery
argument_list|(
name|query
argument_list|()
argument_list|)
argument_list|,
name|iExclude
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|param
range|:
name|iParams
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Integer
condition|)
block|{
name|query
operator|.
name|setInteger
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Integer
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Long
condition|)
block|{
name|query
operator|.
name|setLong
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Long
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|String
condition|)
block|{
name|query
operator|.
name|setString
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Boolean
condition|)
block|{
name|query
operator|.
name|setBoolean
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Boolean
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Date
condition|)
block|{
name|query
operator|.
name|setDate
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Date
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|setString
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
name|param
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iLimit
operator|!=
literal|null
condition|)
name|query
operator|.
name|setMaxResults
argument_list|(
name|iLimit
argument_list|)
expr_stmt|;
return|return
name|query
return|;
block|}
block|}
block|}
specifier|public
specifier|static
name|RequestQuery
name|getRequestQuery
parameter_list|(
name|FilterRpcRequest
name|request
parameter_list|,
name|UserContext
name|user
parameter_list|)
block|{
name|RequestQuery
name|query
init|=
operator|new
name|RequestQuery
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
operator|==
literal|null
condition|?
name|user
operator|.
name|getCurrentAcademicSessionId
argument_list|()
else|:
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"subject"
argument_list|)
condition|)
block|{
name|query
operator|.
name|addParameter
argument_list|(
literal|"owner"
argument_list|,
literal|"Xsa"
argument_list|,
name|request
operator|.
name|getOption
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"owner"
argument_list|,
literal|"c.subjectArea.subjectAreaAbbreviation = :Xsa"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"subjectId"
argument_list|)
condition|)
block|{
name|query
operator|.
name|addParameter
argument_list|(
literal|"owner"
argument_list|,
literal|"Xsa"
argument_list|,
name|request
operator|.
name|getOption
argument_list|(
literal|"subjectId"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"owner"
argument_list|,
literal|"c.subjectArea.uniqueId = :Xsa"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"department"
argument_list|)
condition|)
block|{
name|query
operator|.
name|addParameter
argument_list|(
literal|"owner"
argument_list|,
literal|"Xdpt"
argument_list|,
name|request
operator|.
name|getOption
argument_list|(
literal|"department"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"owner"
argument_list|,
literal|"c.subjectArea.department.deptCode = :Xdpt"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"departmentId"
argument_list|)
condition|)
block|{
name|query
operator|.
name|addParameter
argument_list|(
literal|"owner"
argument_list|,
literal|"Xdpt"
argument_list|,
name|request
operator|.
name|getOption
argument_list|(
literal|"department"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"owner"
argument_list|,
literal|"c.subjectArea.department.uniqueId = :Xdpt"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"owner"
argument_list|)
condition|)
block|{
name|query
operator|.
name|addParameter
argument_list|(
literal|"owner"
argument_list|,
literal|"Xsg"
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"owner"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"owner"
argument_list|,
literal|"c.subjectArea.department.solverGroup.uniqueId = :Xsg"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"offeringId"
argument_list|)
condition|)
block|{
name|query
operator|.
name|addParameter
argument_list|(
literal|"owner"
argument_list|,
literal|"Xoff"
argument_list|,
name|request
operator|.
name|getOption
argument_list|(
literal|"offeringId"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"owner"
argument_list|,
literal|"o.uniqueId = :Xoff"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|department
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Department
name|d
range|:
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|user
argument_list|)
control|)
block|{
name|boolean
name|hasTeachingPreference
init|=
literal|false
decl_stmt|;
for|for
control|(
name|DepartmentalInstructor
name|di
range|:
name|d
operator|.
name|getInstructors
argument_list|()
control|)
if|if
condition|(
name|di
operator|.
name|getTeachingPreference
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|di
operator|.
name|getTeachingPreference
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
block|{
name|hasTeachingPreference
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|hasTeachingPreference
condition|)
continue|continue;
name|query
operator|.
name|addParameter
argument_list|(
literal|"owner"
argument_list|,
literal|"Xdpt"
operator|+
name|id
argument_list|,
name|d
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|department
operator|+=
operator|(
name|department
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":Xdpt"
operator|+
name|id
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|>
literal|0
condition|)
name|query
operator|.
name|addWhere
argument_list|(
literal|"owner"
argument_list|,
literal|"c.subjectArea.department.uniqueId in ("
operator|+
name|department
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"course"
argument_list|)
condition|)
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"course"
argument_list|,
literal|"c.subjectAreaAbbv || ' ' || c.courseNbr = :Xcrs"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"course"
argument_list|,
literal|"Xcrs"
argument_list|,
name|request
operator|.
name|getOption
argument_list|(
literal|"course"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
specifier|public
specifier|static
class|class
name|RequestQuery
block|{
specifier|protected
name|Long
name|iSessionId
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|iFrom
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|iWhere
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|iParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|RequestQuery
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|iSessionId
operator|=
name|sessionId
expr_stmt|;
block|}
specifier|public
name|RequestQuery
parameter_list|(
name|RequestQuery
name|q
parameter_list|)
block|{
name|iSessionId
operator|=
name|q
operator|.
name|iSessionId
expr_stmt|;
name|iFrom
operator|.
name|putAll
argument_list|(
name|q
operator|.
name|iFrom
argument_list|)
expr_stmt|;
name|iWhere
operator|.
name|putAll
argument_list|(
name|q
operator|.
name|iWhere
argument_list|)
expr_stmt|;
name|iParams
operator|.
name|putAll
argument_list|(
name|q
operator|.
name|iParams
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addFrom
parameter_list|(
name|String
name|option
parameter_list|,
name|String
name|from
parameter_list|)
block|{
if|if
condition|(
name|from
operator|==
literal|null
condition|)
name|iFrom
operator|.
name|remove
argument_list|(
name|option
argument_list|)
expr_stmt|;
else|else
name|iFrom
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|from
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addWhere
parameter_list|(
name|String
name|option
parameter_list|,
name|String
name|where
parameter_list|)
block|{
if|if
condition|(
name|where
operator|==
literal|null
condition|)
name|iWhere
operator|.
name|remove
argument_list|(
name|option
argument_list|)
expr_stmt|;
else|else
name|iWhere
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|where
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addParameter
parameter_list|(
name|String
name|option
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
name|iParams
operator|.
name|get
argument_list|(
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
name|params
operator|==
literal|null
condition|)
block|{
name|params
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|iParams
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
name|params
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
else|else
name|params
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getFrom
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|excludeOption
parameter_list|)
block|{
name|String
name|from
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|iFrom
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|excludeOption
operator|!=
literal|null
operator|&&
name|excludeOption
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
continue|continue;
name|from
operator|+=
operator|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"inner join"
argument_list|)
condition|?
literal|" "
else|:
literal|", "
operator|)
operator|+
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
return|return
name|from
return|;
block|}
specifier|public
name|String
name|getWhere
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|excludeOption
parameter_list|)
block|{
name|String
name|where
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|iWhere
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|excludeOption
operator|!=
literal|null
operator|&&
name|excludeOption
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
continue|continue;
name|where
operator|+=
literal|" and ("
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
return|return
name|where
return|;
block|}
specifier|public
name|org
operator|.
name|hibernate
operator|.
name|Query
name|setParams
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Query
name|query
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|excludeOption
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entry
range|:
name|iParams
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|excludeOption
operator|!=
literal|null
operator|&&
name|excludeOption
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|param
range|:
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Integer
condition|)
block|{
name|query
operator|.
name|setInteger
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Integer
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Long
condition|)
block|{
name|query
operator|.
name|setLong
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Long
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|String
condition|)
block|{
name|query
operator|.
name|setString
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Boolean
condition|)
block|{
name|query
operator|.
name|setBoolean
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Boolean
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Date
condition|)
block|{
name|query
operator|.
name|setDate
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Date
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|setString
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
name|param
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|query
return|;
block|}
specifier|public
name|QueryInstance
name|select
parameter_list|(
name|String
name|select
parameter_list|)
block|{
return|return
operator|new
name|QueryInstance
argument_list|(
name|select
argument_list|)
return|;
block|}
specifier|public
class|class
name|QueryInstance
block|{
specifier|protected
name|String
name|iSelect
init|=
literal|null
decl_stmt|,
name|iFrom
init|=
literal|null
decl_stmt|,
name|iWhere
init|=
literal|null
decl_stmt|,
name|iOrderBy
init|=
literal|null
decl_stmt|,
name|iGroupBy
init|=
literal|null
decl_stmt|,
name|iType
init|=
literal|"TeachingRequest"
decl_stmt|;
specifier|protected
name|Integer
name|iLimit
init|=
literal|null
decl_stmt|;
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|iExclude
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|iParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|QueryInstance
parameter_list|(
name|String
name|select
parameter_list|)
block|{
name|iSelect
operator|=
name|select
expr_stmt|;
block|}
specifier|public
name|QueryInstance
name|from
parameter_list|(
name|String
name|from
parameter_list|)
block|{
name|iFrom
operator|=
name|from
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|QueryInstance
name|where
parameter_list|(
name|String
name|where
parameter_list|)
block|{
if|if
condition|(
name|iWhere
operator|==
literal|null
condition|)
name|iWhere
operator|=
literal|"("
operator|+
name|where
operator|+
literal|")"
expr_stmt|;
else|else
name|iWhere
operator|+=
literal|" and ("
operator|+
name|where
operator|+
literal|")"
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|QueryInstance
name|type
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|iType
operator|=
name|type
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|QueryInstance
name|order
parameter_list|(
name|String
name|orderBy
parameter_list|)
block|{
name|iOrderBy
operator|=
name|orderBy
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|QueryInstance
name|group
parameter_list|(
name|String
name|groupBy
parameter_list|)
block|{
name|iGroupBy
operator|=
name|groupBy
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|QueryInstance
name|exclude
parameter_list|(
name|String
name|excludeOption
parameter_list|)
block|{
name|iExclude
operator|.
name|add
argument_list|(
name|excludeOption
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|QueryInstance
name|set
parameter_list|(
name|String
name|param
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|iParams
operator|.
name|put
argument_list|(
name|param
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|QueryInstance
name|limit
parameter_list|(
name|Integer
name|limit
parameter_list|)
block|{
name|iLimit
operator|=
operator|(
name|limit
operator|==
literal|null
operator|||
name|limit
operator|<=
literal|0
condition|?
literal|null
else|:
name|limit
operator|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|String
name|query
parameter_list|()
block|{
return|return
literal|"select "
operator|+
operator|(
name|iSelect
operator|==
literal|null
condition|?
literal|"distinct r"
else|:
name|iSelect
operator|)
operator|+
literal|" from "
operator|+
name|iType
operator|+
literal|" r inner join r.offering o inner join o.courseOfferings c "
operator|+
operator|(
name|iFrom
operator|==
literal|null
condition|?
literal|""
else|:
name|iFrom
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"inner join"
argument_list|)
condition|?
literal|" "
operator|+
name|iFrom
else|:
literal|", "
operator|+
name|iFrom
operator|)
operator|+
name|getFrom
argument_list|(
name|iExclude
argument_list|)
operator|+
literal|" where c.isControl = true and o.session.uniqueId = :sessionId"
operator|+
name|getWhere
argument_list|(
name|iExclude
argument_list|)
operator|+
operator|(
name|iWhere
operator|==
literal|null
condition|?
literal|""
else|:
literal|" and ("
operator|+
name|iWhere
operator|+
literal|")"
operator|)
operator|+
operator|(
name|iGroupBy
operator|==
literal|null
condition|?
literal|""
else|:
literal|" group by "
operator|+
name|iGroupBy
operator|)
operator|+
operator|(
name|iOrderBy
operator|==
literal|null
condition|?
literal|""
else|:
literal|" order by "
operator|+
name|iOrderBy
operator|)
return|;
block|}
specifier|public
name|org
operator|.
name|hibernate
operator|.
name|Query
name|query
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Query
name|query
init|=
name|setParams
argument_list|(
name|hibSession
operator|.
name|createQuery
argument_list|(
name|query
argument_list|()
argument_list|)
argument_list|,
name|iExclude
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|param
range|:
name|iParams
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Integer
condition|)
block|{
name|query
operator|.
name|setInteger
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Integer
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Long
condition|)
block|{
name|query
operator|.
name|setLong
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Long
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|String
condition|)
block|{
name|query
operator|.
name|setString
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Boolean
condition|)
block|{
name|query
operator|.
name|setBoolean
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Boolean
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Date
condition|)
block|{
name|query
operator|.
name|setDate
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Date
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|setString
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
name|param
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iLimit
operator|!=
literal|null
condition|)
name|query
operator|.
name|setMaxResults
argument_list|(
name|iLimit
argument_list|)
expr_stmt|;
return|return
name|query
return|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|TeachingRequestMatcher
implements|implements
name|Query
operator|.
name|TermMatcher
block|{
specifier|private
name|TeachingRequestInfo
name|iRequest
decl_stmt|;
specifier|private
name|InstructorInfo
name|iInstructor
decl_stmt|;
specifier|private
name|FilterRpcRequest
name|iFilter
decl_stmt|;
specifier|public
name|TeachingRequestMatcher
parameter_list|(
name|TeachingRequestInfo
name|request
parameter_list|,
name|InstructorInfo
name|instructor
parameter_list|,
name|FilterRpcRequest
name|filter
parameter_list|)
block|{
name|iRequest
operator|=
name|request
expr_stmt|;
name|iInstructor
operator|=
name|instructor
expr_stmt|;
name|iFilter
operator|=
name|filter
expr_stmt|;
block|}
specifier|public
name|TeachingRequestMatcher
parameter_list|(
name|TeachingRequestInfo
name|request
parameter_list|,
name|FilterRpcRequest
name|filter
parameter_list|)
block|{
name|this
argument_list|(
name|request
argument_list|,
literal|null
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TeachingRequestMatcher
parameter_list|(
name|InstructorInfo
name|instructor
parameter_list|,
name|FilterRpcRequest
name|filter
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|instructor
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|attr
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
literal|"department"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"departmentId"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
literal|"subject"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"subjectId"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
literal|"owner"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"offeringId"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
literal|"course"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|iRequest
operator|!=
literal|null
condition|)
block|{
return|return
name|iRequest
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
return|;
block|}
else|else
block|{
for|for
control|(
name|TeachingRequestInfo
name|r
range|:
name|iInstructor
operator|.
name|getAssignedRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
literal|"attribute"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|iInstructor
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AttributeInterface
name|a
range|:
name|iInstructor
operator|.
name|getAttributes
argument_list|()
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getCode
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
operator|||
name|a
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
if|else if
condition|(
name|iRequest
operator|.
name|hasInstructors
argument_list|()
condition|)
block|{
for|for
control|(
name|InstructorInfo
name|i
range|:
name|iRequest
operator|.
name|getInstructors
argument_list|()
control|)
block|{
for|for
control|(
name|AttributeInterface
name|a
range|:
name|i
operator|.
name|getAttributes
argument_list|()
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getCode
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
operator|||
name|a
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
literal|"instructor"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|iInstructor
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|iInstructor
operator|.
name|hasExternalId
argument_list|()
operator|&&
name|iInstructor
operator|.
name|getExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|term
argument_list|)
operator|)
operator|||
name|iInstructor
operator|.
name|getInstructorName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
return|;
block|}
if|else if
condition|(
name|iRequest
operator|.
name|hasInstructors
argument_list|()
condition|)
block|{
for|for
control|(
name|InstructorInfo
name|i
range|:
name|iRequest
operator|.
name|getInstructors
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|i
operator|.
name|hasExternalId
argument_list|()
operator|&&
name|i
operator|.
name|getExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|term
argument_list|)
operator|)
operator|||
name|i
operator|.
name|getInstructorName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
literal|"instructorId"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|iInstructor
operator|!=
literal|null
condition|)
block|{
return|return
name|iInstructor
operator|.
name|getInstructorId
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|term
argument_list|)
return|;
block|}
if|else if
condition|(
name|iRequest
operator|.
name|hasInstructors
argument_list|()
condition|)
block|{
for|for
control|(
name|InstructorInfo
name|i
range|:
name|iRequest
operator|.
name|getInstructors
argument_list|()
control|)
block|{
if|if
condition|(
name|i
operator|.
name|getInstructorId
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
literal|"assigned"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|iRequest
operator|!=
literal|null
operator|&&
name|iInstructor
operator|==
literal|null
condition|)
block|{
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
operator|&&
name|iRequest
operator|.
name|getNrAssignedInstructors
argument_list|()
operator|>
literal|0
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
operator|&&
name|iRequest
operator|.
name|getNrAssignedInstructors
argument_list|()
operator|<
name|iRequest
operator|.
name|getNrInstructors
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|iInstructor
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AttributeInterface
name|a
range|:
name|iInstructor
operator|.
name|getAttributes
argument_list|()
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|attr
argument_list|)
operator|&&
name|a
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
if|else if
condition|(
name|iRequest
operator|.
name|hasInstructors
argument_list|()
condition|)
block|{
for|for
control|(
name|InstructorInfo
name|i
range|:
name|iRequest
operator|.
name|getInstructors
argument_list|()
control|)
block|{
for|for
control|(
name|AttributeInterface
name|a
range|:
name|i
operator|.
name|getAttributes
argument_list|()
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|attr
argument_list|)
operator|&&
name|a
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
if|else if
condition|(
name|iFilter
operator|.
name|hasOption
argument_list|(
literal|"assigned"
argument_list|)
operator|&&
operator|!
literal|"true"
operator|.
name|equals
argument_list|(
name|iFilter
operator|.
name|getOption
argument_list|(
literal|"assigned"
argument_list|)
argument_list|)
condition|)
block|{
for|for
control|(
name|PreferenceInfo
name|p
range|:
name|iRequest
operator|.
name|getAttributePreferences
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getOwnerName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
specifier|public
specifier|static
name|Query
name|toQuery
parameter_list|(
name|FilterRpcRequest
name|request
parameter_list|)
block|{
name|List
argument_list|<
name|Query
operator|.
name|Term
argument_list|>
name|ands
init|=
operator|new
name|ArrayList
argument_list|<
name|Query
operator|.
name|Term
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|option
range|:
name|request
operator|.
name|getOptions
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Query
operator|.
name|Term
argument_list|>
name|ors
init|=
operator|new
name|ArrayList
argument_list|<
name|Query
operator|.
name|Term
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|value
range|:
name|option
operator|.
name|getValue
argument_list|()
control|)
block|{
name|ors
operator|.
name|add
argument_list|(
operator|new
name|Query
operator|.
name|AtomTerm
argument_list|(
name|option
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ors
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
name|ands
operator|.
name|add
argument_list|(
operator|new
name|Query
operator|.
name|OrTerm
argument_list|(
name|ors
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|ors
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|ands
operator|.
name|add
argument_list|(
name|ors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|hasText
argument_list|()
condition|)
name|ands
operator|.
name|add
argument_list|(
operator|new
name|Query
argument_list|(
name|request
operator|.
name|getText
argument_list|()
argument_list|)
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ands
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
return|return
operator|new
name|Query
argument_list|(
name|ands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
return|return
operator|new
name|Query
argument_list|(
operator|new
name|Query
operator|.
name|AndTerm
argument_list|(
name|ands
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

