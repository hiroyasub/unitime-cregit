begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|instructor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|preference
operator|.
name|MinMaxPreferenceCombination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|instructor
operator|.
name|model
operator|.
name|EnrolledClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|instructor
operator|.
name|model
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|AttributeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|AttributeTypeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|ClassInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|CourseInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|InstructorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|PreferenceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|SectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|TeachingRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorAttributePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorCoursePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameterDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePatternModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameterGroup
operator|.
name|SolverType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|instructor
operator|.
name|InstructorSchedulingDatabaseLoader
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|InstructorSchedulingBackendHelper
block|{
specifier|protected
specifier|static
name|GwtConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|int
name|nrInstructorsNeeded
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
name|int
name|nrChildInstructors
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Class_
name|child
range|:
name|clazz
operator|.
name|getChildClasses
argument_list|()
control|)
block|{
name|nrChildInstructors
operator|+=
name|nrInstructorsNeeded
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
return|return
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
operator|(
name|clazz
operator|.
name|isInstructorAssignmentNeeded
argument_list|()
condition|?
name|clazz
operator|.
name|effectiveNbrInstructors
argument_list|()
else|:
literal|0
operator|)
operator|-
name|nrChildInstructors
argument_list|)
return|;
block|}
specifier|protected
name|CourseInfo
name|getCourse
parameter_list|(
name|CourseOffering
name|course
parameter_list|)
block|{
name|CourseInfo
name|info
init|=
operator|new
name|CourseInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setCourseId
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setCourseName
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
specifier|protected
name|SectionInfo
name|getSection
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
name|SectionInfo
name|section
init|=
operator|new
name|SectionInfo
argument_list|()
decl_stmt|;
name|CourseOffering
name|course
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
decl_stmt|;
name|String
name|room
init|=
literal|null
decl_stmt|;
name|TimeLocation
name|time
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
name|assignment
init|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
name|time
operator|=
name|assignment
operator|.
name|getTimeLocation
argument_list|()
expr_stmt|;
for|for
control|(
name|Location
name|location
range|:
name|assignment
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
name|room
operator|==
literal|null
condition|)
name|room
operator|=
name|location
operator|.
name|getLabel
argument_list|()
expr_stmt|;
else|else
name|room
operator|+=
literal|", "
operator|+
name|location
operator|.
name|getLabel
argument_list|()
expr_stmt|;
block|}
block|}
name|section
operator|.
name|setSectionId
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|section
operator|.
name|setExternalId
argument_list|(
name|InstructorSchedulingDatabaseLoader
operator|.
name|getClassExternalId
argument_list|(
name|course
argument_list|,
name|clazz
argument_list|)
argument_list|)
expr_stmt|;
name|section
operator|.
name|setSectionName
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
name|section
operator|.
name|setSectionType
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|section
operator|.
name|setCommon
argument_list|(
operator|!
name|clazz
operator|.
name|isInstructorAssignmentNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|section
operator|.
name|setTime
argument_list|(
name|time
operator|!=
literal|null
condition|?
name|time
operator|.
name|getDayHeader
argument_list|()
operator|+
literal|" "
operator|+
name|time
operator|.
name|getStartTimeHeader
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|time
operator|.
name|getEndTimeHeader
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
name|section
operator|.
name|setDate
argument_list|(
name|time
operator|!=
literal|null
condition|?
name|time
operator|.
name|getDatePatternName
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
name|section
operator|.
name|setRoom
argument_list|(
name|room
argument_list|)
expr_stmt|;
return|return
name|section
return|;
block|}
specifier|protected
name|boolean
name|isToBeIncluded
parameter_list|(
name|Class_
name|clazz
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|commonItypes
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isCancelled
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|clazz
operator|.
name|isInstructorAssignmentNeeded
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|commonItypes
operator|.
name|contains
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getSis_ref
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|protected
name|boolean
name|isToBeIgnored
parameter_list|(
name|ClassInstructor
name|ci
parameter_list|)
block|{
if|if
condition|(
name|ci
operator|.
name|isTentative
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|ci
operator|.
name|isLead
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|protected
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|getInstructors
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|instructors
init|=
operator|new
name|ArrayList
argument_list|<
name|DepartmentalInstructor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|clazz
operator|.
name|getClassInstructors
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|isToBeIgnored
argument_list|(
name|ci
argument_list|)
operator|&&
operator|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getTeachingPreference
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getTeachingPreference
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|)
condition|)
block|{
name|instructors
operator|.
name|add
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Class_
name|child
range|:
name|clazz
operator|.
name|getChildClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|child
operator|.
name|isCancelled
argument_list|()
operator|||
operator|!
name|child
operator|.
name|isInstructorAssignmentNeeded
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|child
operator|.
name|getClassInstructors
argument_list|()
control|)
if|if
condition|(
operator|!
name|isToBeIgnored
argument_list|(
name|ci
argument_list|)
condition|)
name|instructors
operator|.
name|remove
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|instructors
return|;
block|}
specifier|protected
name|InstructorInfo
name|getInstructor
parameter_list|(
name|TeachingRequestInfo
name|request
parameter_list|,
name|DepartmentalInstructor
name|instructor
parameter_list|,
name|String
name|nameFormat
parameter_list|)
block|{
name|InstructorInfo
name|info
init|=
operator|new
name|InstructorInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setInstructorId
argument_list|(
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setInstructorName
argument_list|(
name|instructor
operator|.
name|getName
argument_list|(
name|nameFormat
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setExternalId
argument_list|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setMaxLoad
argument_list|(
name|instructor
operator|.
name|getMaxLoad
argument_list|()
operator|==
literal|null
condition|?
literal|0f
else|:
name|instructor
operator|.
name|getMaxLoad
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
operator|==
literal|null
condition|)
block|{
name|info
operator|.
name|setTeachingPreference
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
name|info
operator|.
name|setValue
argument_list|(
literal|"Teaching Preferences"
argument_list|,
name|Constants
operator|.
name|preference2preferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|info
operator|.
name|setTeachingPreference
argument_list|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getTeachingPreference
argument_list|()
argument_list|)
condition|)
name|info
operator|.
name|setValue
argument_list|(
literal|"Teaching Preferences"
argument_list|,
name|Constants
operator|.
name|preference2preferenceLevel
argument_list|(
name|info
operator|.
name|getTeachingPreference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|InstructorAttribute
name|a
range|:
name|instructor
operator|.
name|getAttributes
argument_list|()
control|)
block|{
name|AttributeInterface
name|attribute
init|=
operator|new
name|AttributeInterface
argument_list|()
decl_stmt|;
name|attribute
operator|.
name|setId
argument_list|(
name|a
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|attribute
operator|.
name|setName
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|AttributeTypeInterface
name|type
init|=
operator|new
name|AttributeTypeInterface
argument_list|()
decl_stmt|;
name|type
operator|.
name|setId
argument_list|(
name|a
operator|.
name|getType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|.
name|setLabel
argument_list|(
name|a
operator|.
name|getType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|.
name|setConjunctive
argument_list|(
name|a
operator|.
name|getType
argument_list|()
operator|.
name|isConjunctive
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|.
name|setRequired
argument_list|(
name|a
operator|.
name|getType
argument_list|()
operator|.
name|isRequired
argument_list|()
argument_list|)
expr_stmt|;
name|attribute
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|info
operator|.
name|addAttribute
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
block|}
name|int
index|[]
index|[]
name|slot2pref
init|=
operator|new
name|int
index|[
name|Constants
operator|.
name|NR_DAYS
operator|*
name|Constants
operator|.
name|SLOTS_PER_DAY
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|slot2pref
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|slot2pref
index|[
name|i
index|]
operator|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
expr_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
name|p
range|:
name|instructor
operator|.
name|getPreferences
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|instanceof
name|InstructorCoursePref
condition|)
block|{
name|InstructorCoursePref
name|cp
init|=
operator|(
name|InstructorCoursePref
operator|)
name|p
decl_stmt|;
name|info
operator|.
name|addCoursePreference
argument_list|(
operator|new
name|PreferenceInfo
argument_list|(
name|cp
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|cp
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|cp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
operator|&&
name|cp
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
name|info
operator|.
name|setValue
argument_list|(
literal|"Course Preferences"
argument_list|,
name|Constants
operator|.
name|preference2preferenceLevel
argument_list|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|p
operator|instanceof
name|DistributionPref
condition|)
block|{
name|DistributionPref
name|dp
init|=
operator|(
name|DistributionPref
operator|)
name|p
decl_stmt|;
name|info
operator|.
name|addDistributionPreference
argument_list|(
operator|new
name|PreferenceInfo
argument_list|(
name|dp
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|dp
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|,
name|dp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|p
operator|instanceof
name|TimePref
condition|)
block|{
name|TimePref
name|tp
init|=
operator|(
name|TimePref
operator|)
name|p
decl_stmt|;
name|info
operator|.
name|setAvailability
argument_list|(
name|tp
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Preference
argument_list|<
name|TimeLocation
argument_list|>
name|pf
range|:
name|loadTimePreferences
argument_list|(
operator|(
name|TimePref
operator|)
name|p
argument_list|)
control|)
block|{
name|PreferenceInfo
name|pi
init|=
operator|new
name|PreferenceInfo
argument_list|(
operator|new
name|Long
argument_list|(
name|pf
operator|.
name|getTarget
argument_list|()
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|,
name|pf
operator|.
name|getTarget
argument_list|()
operator|.
name|getLongName
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|,
name|Constants
operator|.
name|preferenceLevel2preference
argument_list|(
name|pf
operator|.
name|getPreference
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|pi
operator|.
name|setComparable
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%03d:%05d"
argument_list|,
name|pf
operator|.
name|getTarget
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|,
name|pf
operator|.
name|getTarget
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|addTimePreference
argument_list|(
name|pi
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|Integer
argument_list|>
name|i
init|=
name|pf
operator|.
name|getTarget
argument_list|()
operator|.
name|getSlots
argument_list|()
init|;
name|i
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|int
name|slot
init|=
name|i
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|slot2pref
index|[
name|slot
index|]
index|[
literal|0
index|]
operator|=
name|Math
operator|.
name|min
argument_list|(
name|slot2pref
index|[
name|slot
index|]
index|[
literal|0
index|]
argument_list|,
name|pf
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
name|slot2pref
index|[
name|slot
index|]
index|[
literal|1
index|]
operator|=
name|Math
operator|.
name|max
argument_list|(
name|slot2pref
index|[
name|slot
index|]
index|[
literal|1
index|]
argument_list|,
name|pf
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|EnrolledClass
name|ec
range|:
name|InstructorSchedulingDatabaseLoader
operator|.
name|loadUnavailability
argument_list|(
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|,
name|instructor
argument_list|)
control|)
block|{
name|PreferenceInfo
name|pi
init|=
operator|new
name|PreferenceInfo
argument_list|(
name|ec
operator|.
name|getClassId
argument_list|()
argument_list|,
name|ec
operator|.
name|getLongName
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|,
name|Constants
operator|.
name|sPreferenceProhibited
argument_list|)
decl_stmt|;
name|pi
operator|.
name|setComparable
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%03d:%05d"
argument_list|,
name|ec
operator|.
name|getDayCode
argument_list|()
argument_list|,
name|ec
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|addTimePreference
argument_list|(
name|pi
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|Integer
argument_list|>
name|i
init|=
name|ec
operator|.
name|getSlots
argument_list|()
init|;
name|i
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|int
name|slot
init|=
name|i
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|slot2pref
index|[
name|slot
index|]
index|[
literal|0
index|]
operator|=
name|Math
operator|.
name|min
argument_list|(
name|slot2pref
index|[
name|slot
index|]
index|[
literal|0
index|]
argument_list|,
name|Constants
operator|.
name|sPreferenceLevelProhibited
argument_list|)
expr_stmt|;
name|slot2pref
index|[
name|slot
index|]
index|[
literal|1
index|]
operator|=
name|Math
operator|.
name|max
argument_list|(
name|slot2pref
index|[
name|slot
index|]
index|[
literal|1
index|]
argument_list|,
name|Constants
operator|.
name|sPreferenceLevelProhibited
argument_list|)
expr_stmt|;
name|slot2pref
index|[
name|slot
index|]
index|[
literal|2
index|]
operator|=
literal|1
expr_stmt|;
block|}
name|ClassInfo
name|ci
init|=
operator|new
name|ClassInfo
argument_list|()
decl_stmt|;
name|ci
operator|.
name|setCourseId
argument_list|(
name|ec
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setCourse
argument_list|(
name|ec
operator|.
name|getCourse
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setClassId
argument_list|(
name|ec
operator|.
name|getClassId
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setSection
argument_list|(
name|ec
operator|.
name|getSection
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setExternalId
argument_list|(
name|ec
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setType
argument_list|(
name|ec
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setInstructor
argument_list|(
name|ec
operator|.
name|isInstructor
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setRoom
argument_list|(
name|ec
operator|.
name|getRoom
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setTime
argument_list|(
name|ec
operator|.
name|getDayHeader
argument_list|()
operator|+
literal|" "
operator|+
name|ec
operator|.
name|getStartTimeHeader
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|ec
operator|.
name|getEndTimeHeader
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setDate
argument_list|(
name|ec
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|addEnrollment
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
name|StringBuffer
name|pattern
init|=
operator|new
name|StringBuffer
argument_list|(
name|slot2pref
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|slot2pref
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|min
init|=
name|slot2pref
index|[
name|i
index|]
index|[
literal|0
index|]
decl_stmt|;
name|int
name|max
init|=
name|slot2pref
index|[
name|i
index|]
index|[
literal|1
index|]
decl_stmt|;
name|int
name|pref
init|=
operator|(
name|max
operator|>
operator|-
name|min
condition|?
name|max
else|:
operator|-
name|min
operator|>
name|max
condition|?
name|min
else|:
name|max
operator|)
decl_stmt|;
if|if
condition|(
name|slot2pref
index|[
name|i
index|]
index|[
literal|2
index|]
operator|==
literal|1
condition|)
name|pattern
operator|.
name|append
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2char
argument_list|(
name|PreferenceLevel
operator|.
name|sNotAvailable
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|pattern
operator|.
name|append
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2char
argument_list|(
name|Constants
operator|.
name|preferenceLevel2preference
argument_list|(
name|pref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|info
operator|.
name|setAvailability
argument_list|(
name|pattern
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
specifier|protected
name|List
argument_list|<
name|Preference
argument_list|<
name|TimeLocation
argument_list|>
argument_list|>
name|loadTimePreferences
parameter_list|(
name|TimePref
name|tp
parameter_list|)
block|{
name|List
argument_list|<
name|Preference
argument_list|<
name|TimeLocation
argument_list|>
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|Preference
argument_list|<
name|TimeLocation
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|TimePatternModel
name|m
init|=
name|tp
operator|.
name|getTimePatternModel
argument_list|()
decl_stmt|;
name|boolean
name|out
index|[]
index|[]
init|=
operator|new
name|boolean
index|[
name|m
operator|.
name|getNrDays
argument_list|()
index|]
index|[
name|m
operator|.
name|getNrTimes
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m
operator|.
name|getNrDays
argument_list|()
condition|;
name|i
operator|++
control|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|m
operator|.
name|getNrTimes
argument_list|()
condition|;
name|j
operator|++
control|)
name|out
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m
operator|.
name|getNrDays
argument_list|()
condition|;
name|i
operator|++
control|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|m
operator|.
name|getNrTimes
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|out
index|[
name|i
index|]
index|[
name|j
index|]
condition|)
continue|continue;
name|out
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getPreference
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
condition|)
continue|continue;
name|int
name|endDay
init|=
name|i
decl_stmt|,
name|endTime
init|=
name|j
decl_stmt|;
while|while
condition|(
name|endTime
operator|+
literal|1
operator|<
name|m
operator|.
name|getNrTimes
argument_list|()
operator|&&
operator|!
name|out
index|[
name|i
index|]
index|[
name|endTime
operator|+
literal|1
index|]
operator|&&
name|m
operator|.
name|getPreference
argument_list|(
name|i
argument_list|,
name|endTime
operator|+
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getPreference
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
condition|)
name|endTime
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|boolean
name|same
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
name|i
init|;
name|k
operator|+
literal|1
operator|<
name|m
operator|.
name|getNrDays
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
for|for
control|(
name|int
name|x
init|=
name|j
init|;
name|x
operator|<=
name|endTime
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|out
index|[
name|k
operator|+
literal|1
index|]
index|[
name|x
index|]
operator|&&
operator|!
name|m
operator|.
name|getPreference
argument_list|(
name|i
argument_list|,
name|x
argument_list|)
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getPreference
argument_list|(
name|k
operator|+
literal|1
argument_list|,
name|x
argument_list|)
argument_list|)
condition|)
block|{
name|same
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|same
condition|)
break|break;
block|}
if|if
condition|(
operator|!
name|same
condition|)
break|break;
block|}
if|if
condition|(
name|same
condition|)
name|endDay
operator|=
name|m
operator|.
name|getNrDays
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
while|while
condition|(
name|endDay
operator|+
literal|1
operator|<
name|m
operator|.
name|getNrDays
argument_list|()
condition|)
block|{
name|boolean
name|same
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
name|j
init|;
name|x
operator|<=
name|endTime
condition|;
name|x
operator|++
control|)
if|if
condition|(
operator|!
name|out
index|[
name|endDay
operator|+
literal|1
index|]
index|[
name|x
index|]
operator|&&
operator|!
name|m
operator|.
name|getPreference
argument_list|(
name|i
argument_list|,
name|x
argument_list|)
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getPreference
argument_list|(
name|endDay
operator|+
literal|1
argument_list|,
name|x
argument_list|)
argument_list|)
condition|)
block|{
name|same
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|same
condition|)
break|break;
name|endDay
operator|++
expr_stmt|;
block|}
for|for
control|(
name|int
name|a
init|=
name|i
init|;
name|a
operator|<=
name|endDay
condition|;
name|a
operator|++
control|)
for|for
control|(
name|int
name|b
init|=
name|j
init|;
name|b
operator|<=
name|endTime
condition|;
name|b
operator|++
control|)
name|out
index|[
name|a
index|]
index|[
name|b
index|]
operator|=
literal|true
expr_stmt|;
name|int
name|dayCode
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|a
init|=
name|i
init|;
name|a
operator|<=
name|endDay
condition|;
name|a
operator|++
control|)
name|dayCode
operator||=
name|m
operator|.
name|getDayCode
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|TimeLocation
name|time
init|=
operator|new
name|TimeLocation
argument_list|(
name|dayCode
argument_list|,
name|m
operator|.
name|getStartSlot
argument_list|(
name|j
argument_list|)
argument_list|,
name|m
operator|.
name|getStartSlot
argument_list|(
name|endTime
argument_list|)
operator|-
name|m
operator|.
name|getStartSlot
argument_list|(
name|j
argument_list|)
operator|+
name|m
operator|.
name|getSlotsPerMtg
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0.0
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|,
name|m
operator|.
name|getBreakTime
argument_list|()
argument_list|)
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|Preference
argument_list|<
name|TimeLocation
argument_list|>
argument_list|(
name|time
argument_list|,
name|Constants
operator|.
name|preference2preferenceLevel
argument_list|(
name|m
operator|.
name|getPreference
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|protected
name|TeachingRequestInfo
name|getRequestForClass
parameter_list|(
name|Class_
name|clazz
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|commonItypes
parameter_list|,
name|String
name|nameFormat
parameter_list|)
block|{
name|int
name|nrInstructors
init|=
name|nrInstructorsNeeded
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|nrInstructors
operator|<=
literal|0
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|instructors
init|=
name|getInstructors
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructors
operator|.
name|size
argument_list|()
operator|>
name|nrInstructors
condition|)
name|nrInstructors
operator|=
name|instructors
operator|.
name|size
argument_list|()
expr_stmt|;
name|TeachingRequestInfo
name|request
init|=
operator|new
name|TeachingRequestInfo
argument_list|()
decl_stmt|;
name|request
operator|.
name|setRequestId
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setNrInstructors
argument_list|(
name|nrInstructors
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCourse
argument_list|(
name|getCourse
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|addSection
argument_list|(
name|getSection
argument_list|(
name|clazz
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setLoad
argument_list|(
name|clazz
operator|.
name|effectiveTeachingLoad
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|SchedulingSubpart
argument_list|>
name|checked
init|=
operator|new
name|HashSet
argument_list|<
name|SchedulingSubpart
argument_list|>
argument_list|()
decl_stmt|;
name|checked
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Class_
name|parent
init|=
name|clazz
operator|.
name|getParentClass
argument_list|()
init|;
name|parent
operator|!=
literal|null
condition|;
name|parent
operator|=
name|parent
operator|.
name|getParentClass
argument_list|()
control|)
block|{
name|checked
operator|.
name|add
argument_list|(
name|parent
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isToBeIncluded
argument_list|(
name|parent
argument_list|,
name|commonItypes
argument_list|)
condition|)
block|{
name|request
operator|.
name|addSection
argument_list|(
name|getSection
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|.
name|isInstructorAssignmentNeeded
argument_list|()
condition|)
name|request
operator|.
name|setLoad
argument_list|(
name|request
operator|.
name|getLoad
argument_list|()
operator|+
name|parent
operator|.
name|effectiveTeachingLoad
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|SchedulingSubpart
name|other
range|:
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
block|{
if|if
condition|(
name|checked
operator|.
name|contains
argument_list|(
name|other
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|commonItypes
operator|.
name|contains
argument_list|(
name|other
operator|.
name|getItype
argument_list|()
operator|.
name|getSis_ref
argument_list|()
argument_list|)
operator|&&
operator|!
name|other
operator|.
name|isInstructorAssignmentNeeded
argument_list|()
condition|)
block|{
for|for
control|(
name|Class_
name|c
range|:
name|other
operator|.
name|getClasses
argument_list|()
control|)
name|request
operator|.
name|addSection
argument_list|(
name|getSection
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|InstructorPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructorPref
name|p
init|=
operator|(
name|InstructorPref
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|request
operator|.
name|addInstructorPreference
argument_list|(
operator|new
name|PreferenceInfo
argument_list|(
name|p
operator|.
name|getInstructor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|p
operator|.
name|getInstructor
argument_list|()
operator|.
name|getName
argument_list|(
name|nameFormat
argument_list|)
argument_list|,
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|InstructorAttributePref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructorAttributePref
name|p
init|=
operator|(
name|InstructorAttributePref
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|request
operator|.
name|addAttributePreference
argument_list|(
operator|new
name|PreferenceInfo
argument_list|(
name|p
operator|.
name|getAttribute
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|p
operator|.
name|getAttribute
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|instructors
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
name|instructors
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructor
operator|!=
literal|null
condition|)
block|{
name|InstructorInfo
name|info
init|=
name|getInstructor
argument_list|(
name|request
argument_list|,
name|instructor
argument_list|,
name|nameFormat
argument_list|)
decl_stmt|;
name|float
name|load
init|=
literal|0f
decl_stmt|;
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|instructor
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ci
operator|.
name|isLead
argument_list|()
operator|||
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|isCancelled
argument_list|()
operator|||
operator|!
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|isInstructorAssignmentNeeded
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|ci
operator|.
name|isLead
argument_list|()
operator|&&
operator|!
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|isCancelled
argument_list|()
operator|&&
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|isInstructorAssignmentNeeded
argument_list|()
condition|)
name|load
operator|+=
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|effectiveTeachingLoad
argument_list|()
expr_stmt|;
block|}
name|info
operator|.
name|setAssignedLoad
argument_list|(
name|load
argument_list|)
expr_stmt|;
name|request
operator|.
name|addInstructor
argument_list|(
name|info
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|InstructorPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructorPref
name|p
init|=
operator|(
name|InstructorPref
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getInstructor
argument_list|()
operator|.
name|equals
argument_list|(
name|instructor
argument_list|)
condition|)
name|info
operator|.
name|setValue
argument_list|(
literal|"Instructor Preferences"
argument_list|,
name|Constants
operator|.
name|preference2preferenceLevel
argument_list|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MinMaxPreferenceCombination
name|attr
init|=
operator|new
name|MinMaxPreferenceCombination
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|InstructorAttributePref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructorAttributePref
name|p
init|=
operator|(
name|InstructorAttributePref
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getAttributes
argument_list|()
operator|.
name|contains
argument_list|(
name|p
operator|.
name|getAttribute
argument_list|()
argument_list|)
condition|)
name|attr
operator|.
name|addPreferenceProlog
argument_list|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|info
operator|.
name|setValue
argument_list|(
literal|"Attribute Preferences"
argument_list|,
name|attr
operator|.
name|getPreferenceInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|request
return|;
block|}
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|getCommonItypes
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|commonItypes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|SolverParameterDef
name|param
init|=
name|SolverParameterDef
operator|.
name|findByNameType
argument_list|(
literal|"General.CommonItypes"
argument_list|,
name|SolverType
operator|.
name|INSTRUCTOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|param
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|param
operator|.
name|getDefault
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|param
operator|.
name|getDefault
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|itype
range|:
name|param
operator|.
name|getDefault
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
if|if
condition|(
operator|!
name|itype
operator|.
name|isEmpty
argument_list|()
condition|)
name|commonItypes
operator|.
name|add
argument_list|(
name|itype
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|commonItypes
operator|.
name|add
argument_list|(
literal|"lec"
argument_list|)
expr_stmt|;
block|}
return|return
name|commonItypes
return|;
block|}
block|}
end_class

end_unit

