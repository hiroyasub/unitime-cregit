begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|instructor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|preference
operator|.
name|MinMaxPreferenceCombination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|preference
operator|.
name|PreferenceCombination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|preference
operator|.
name|SumPreferenceCombination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|instructor
operator|.
name|model
operator|.
name|EnrolledClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|instructor
operator|.
name|model
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|AssignmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|AttributeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|AttributeTypeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|ClassInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|CourseInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|InstructorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|PreferenceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|SectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|SuggestionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|SuggestionsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|TeachingRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorAttributePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorAttributeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorCoursePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TeachingClassRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TeachingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePatternModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructorAttributeTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TeachingRequestDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|instructor
operator|.
name|InstructorSchedulingDatabaseLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|instructor
operator|.
name|InstructorSchedulingProxy
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|InstructorSchedulingBackendHelper
block|{
specifier|protected
specifier|static
name|GwtConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|CourseInfo
name|getCourse
parameter_list|(
name|CourseOffering
name|course
parameter_list|)
block|{
name|CourseInfo
name|info
init|=
operator|new
name|CourseInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setCourseId
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setCourseName
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
specifier|protected
name|SectionInfo
name|getSection
parameter_list|(
name|TeachingClassRequest
name|r
parameter_list|)
block|{
name|Class_
name|clazz
init|=
name|r
operator|.
name|getTeachingClass
argument_list|()
decl_stmt|;
name|SectionInfo
name|section
init|=
operator|new
name|SectionInfo
argument_list|()
decl_stmt|;
name|CourseOffering
name|course
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
decl_stmt|;
name|String
name|room
init|=
literal|null
decl_stmt|;
name|TimeLocation
name|time
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
name|assignment
init|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
name|time
operator|=
name|assignment
operator|.
name|getTimeLocation
argument_list|()
expr_stmt|;
for|for
control|(
name|Location
name|location
range|:
name|assignment
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
name|room
operator|==
literal|null
condition|)
name|room
operator|=
name|location
operator|.
name|getLabel
argument_list|()
expr_stmt|;
else|else
name|room
operator|+=
literal|", "
operator|+
name|location
operator|.
name|getLabel
argument_list|()
expr_stmt|;
block|}
block|}
name|section
operator|.
name|setSectionId
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|section
operator|.
name|setExternalId
argument_list|(
name|InstructorSchedulingDatabaseLoader
operator|.
name|getClassExternalId
argument_list|(
name|course
argument_list|,
name|clazz
argument_list|)
argument_list|)
expr_stmt|;
name|section
operator|.
name|setSectionName
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
name|section
operator|.
name|setSectionType
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|section
operator|.
name|setCommon
argument_list|(
name|r
operator|.
name|isCommon
argument_list|()
argument_list|)
expr_stmt|;
name|section
operator|.
name|setTime
argument_list|(
name|time
operator|!=
literal|null
condition|?
name|time
operator|.
name|getDayHeader
argument_list|()
operator|+
literal|" "
operator|+
name|time
operator|.
name|getStartTimeHeader
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|time
operator|.
name|getEndTimeHeader
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
name|section
operator|.
name|setDate
argument_list|(
name|time
operator|!=
literal|null
condition|?
name|time
operator|.
name|getDatePatternName
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
name|section
operator|.
name|setRoom
argument_list|(
name|room
argument_list|)
expr_stmt|;
return|return
name|section
return|;
block|}
specifier|protected
name|InstructorInfo
name|getInstructor
parameter_list|(
name|TeachingRequestInfo
name|request
parameter_list|,
name|DepartmentalInstructor
name|instructor
parameter_list|,
name|String
name|nameFormat
parameter_list|)
block|{
name|InstructorInfo
name|info
init|=
operator|new
name|InstructorInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setInstructorId
argument_list|(
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setInstructorName
argument_list|(
name|instructor
operator|.
name|getName
argument_list|(
name|nameFormat
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setExternalId
argument_list|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setMaxLoad
argument_list|(
name|instructor
operator|.
name|getMaxLoad
argument_list|()
operator|==
literal|null
condition|?
literal|0f
else|:
name|instructor
operator|.
name|getMaxLoad
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
operator|==
literal|null
condition|)
block|{
name|info
operator|.
name|setTeachingPreference
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
name|info
operator|.
name|setValue
argument_list|(
literal|"Teaching Preferences"
argument_list|,
name|Constants
operator|.
name|preference2preferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|info
operator|.
name|setTeachingPreference
argument_list|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getTeachingPreference
argument_list|()
argument_list|)
condition|)
name|info
operator|.
name|setValue
argument_list|(
literal|"Teaching Preferences"
argument_list|,
name|Constants
operator|.
name|preference2preferenceLevel
argument_list|(
name|info
operator|.
name|getTeachingPreference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|InstructorAttribute
name|a
range|:
name|instructor
operator|.
name|getAttributes
argument_list|()
control|)
block|{
name|AttributeInterface
name|attribute
init|=
operator|new
name|AttributeInterface
argument_list|()
decl_stmt|;
name|attribute
operator|.
name|setId
argument_list|(
name|a
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|attribute
operator|.
name|setName
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|AttributeTypeInterface
name|type
init|=
operator|new
name|AttributeTypeInterface
argument_list|()
decl_stmt|;
name|type
operator|.
name|setId
argument_list|(
name|a
operator|.
name|getType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|.
name|setLabel
argument_list|(
name|a
operator|.
name|getType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|.
name|setConjunctive
argument_list|(
name|a
operator|.
name|getType
argument_list|()
operator|.
name|isConjunctive
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|.
name|setRequired
argument_list|(
name|a
operator|.
name|getType
argument_list|()
operator|.
name|isRequired
argument_list|()
argument_list|)
expr_stmt|;
name|attribute
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|info
operator|.
name|addAttribute
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
block|}
name|int
index|[]
index|[]
name|slot2pref
init|=
operator|new
name|int
index|[
name|Constants
operator|.
name|NR_DAYS
operator|*
name|Constants
operator|.
name|SLOTS_PER_DAY
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|slot2pref
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|slot2pref
index|[
name|i
index|]
operator|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
expr_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
name|p
range|:
name|instructor
operator|.
name|getPreferences
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|instanceof
name|InstructorCoursePref
condition|)
block|{
name|InstructorCoursePref
name|cp
init|=
operator|(
name|InstructorCoursePref
operator|)
name|p
decl_stmt|;
name|info
operator|.
name|addCoursePreference
argument_list|(
operator|new
name|PreferenceInfo
argument_list|(
name|cp
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|cp
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|cp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
operator|&&
name|cp
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
name|info
operator|.
name|setValue
argument_list|(
literal|"Course Preferences"
argument_list|,
name|Constants
operator|.
name|preference2preferenceLevel
argument_list|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|p
operator|instanceof
name|DistributionPref
condition|)
block|{
name|DistributionPref
name|dp
init|=
operator|(
name|DistributionPref
operator|)
name|p
decl_stmt|;
name|info
operator|.
name|addDistributionPreference
argument_list|(
operator|new
name|PreferenceInfo
argument_list|(
name|dp
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|dp
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|,
name|dp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|p
operator|instanceof
name|TimePref
condition|)
block|{
name|TimePref
name|tp
init|=
operator|(
name|TimePref
operator|)
name|p
decl_stmt|;
name|info
operator|.
name|setAvailability
argument_list|(
name|tp
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Preference
argument_list|<
name|TimeLocation
argument_list|>
name|pf
range|:
name|loadTimePreferences
argument_list|(
operator|(
name|TimePref
operator|)
name|p
argument_list|)
control|)
block|{
name|PreferenceInfo
name|pi
init|=
operator|new
name|PreferenceInfo
argument_list|(
operator|new
name|Long
argument_list|(
name|pf
operator|.
name|getTarget
argument_list|()
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|,
name|pf
operator|.
name|getTarget
argument_list|()
operator|.
name|getLongName
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|,
name|Constants
operator|.
name|preferenceLevel2preference
argument_list|(
name|pf
operator|.
name|getPreference
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|pi
operator|.
name|setComparable
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%03d:%05d"
argument_list|,
name|pf
operator|.
name|getTarget
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|,
name|pf
operator|.
name|getTarget
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|addTimePreference
argument_list|(
name|pi
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|Integer
argument_list|>
name|i
init|=
name|pf
operator|.
name|getTarget
argument_list|()
operator|.
name|getSlots
argument_list|()
init|;
name|i
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|int
name|slot
init|=
name|i
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|slot2pref
index|[
name|slot
index|]
index|[
literal|0
index|]
operator|=
name|Math
operator|.
name|min
argument_list|(
name|slot2pref
index|[
name|slot
index|]
index|[
literal|0
index|]
argument_list|,
name|pf
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
name|slot2pref
index|[
name|slot
index|]
index|[
literal|1
index|]
operator|=
name|Math
operator|.
name|max
argument_list|(
name|slot2pref
index|[
name|slot
index|]
index|[
literal|1
index|]
argument_list|,
name|pf
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|EnrolledClass
name|ec
range|:
name|InstructorSchedulingDatabaseLoader
operator|.
name|loadUnavailability
argument_list|(
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|,
name|instructor
argument_list|)
control|)
block|{
name|PreferenceInfo
name|pi
init|=
operator|new
name|PreferenceInfo
argument_list|(
name|ec
operator|.
name|getClassId
argument_list|()
argument_list|,
name|ec
operator|.
name|getLongName
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|,
name|Constants
operator|.
name|sPreferenceProhibited
argument_list|)
decl_stmt|;
name|pi
operator|.
name|setComparable
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%03d:%05d"
argument_list|,
name|ec
operator|.
name|getDayCode
argument_list|()
argument_list|,
name|ec
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|addTimePreference
argument_list|(
name|pi
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|Integer
argument_list|>
name|i
init|=
name|ec
operator|.
name|getSlots
argument_list|()
init|;
name|i
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|int
name|slot
init|=
name|i
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|slot2pref
index|[
name|slot
index|]
index|[
literal|0
index|]
operator|=
name|Math
operator|.
name|min
argument_list|(
name|slot2pref
index|[
name|slot
index|]
index|[
literal|0
index|]
argument_list|,
name|Constants
operator|.
name|sPreferenceLevelProhibited
argument_list|)
expr_stmt|;
name|slot2pref
index|[
name|slot
index|]
index|[
literal|1
index|]
operator|=
name|Math
operator|.
name|max
argument_list|(
name|slot2pref
index|[
name|slot
index|]
index|[
literal|1
index|]
argument_list|,
name|Constants
operator|.
name|sPreferenceLevelProhibited
argument_list|)
expr_stmt|;
name|slot2pref
index|[
name|slot
index|]
index|[
literal|2
index|]
operator|=
literal|1
expr_stmt|;
block|}
name|ClassInfo
name|ci
init|=
operator|new
name|ClassInfo
argument_list|()
decl_stmt|;
name|ci
operator|.
name|setCourseId
argument_list|(
name|ec
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setCourse
argument_list|(
name|ec
operator|.
name|getCourse
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setClassId
argument_list|(
name|ec
operator|.
name|getClassId
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setSection
argument_list|(
name|ec
operator|.
name|getSection
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setExternalId
argument_list|(
name|ec
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setType
argument_list|(
name|ec
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setInstructor
argument_list|(
name|ec
operator|.
name|isInstructor
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setRoom
argument_list|(
name|ec
operator|.
name|getRoom
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setTime
argument_list|(
name|ec
operator|.
name|getDayHeader
argument_list|()
operator|+
literal|" "
operator|+
name|ec
operator|.
name|getStartTimeHeader
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|ec
operator|.
name|getEndTimeHeader
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setDate
argument_list|(
name|ec
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|addEnrollment
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
name|StringBuffer
name|pattern
init|=
operator|new
name|StringBuffer
argument_list|(
name|slot2pref
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|slot2pref
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|min
init|=
name|slot2pref
index|[
name|i
index|]
index|[
literal|0
index|]
decl_stmt|;
name|int
name|max
init|=
name|slot2pref
index|[
name|i
index|]
index|[
literal|1
index|]
decl_stmt|;
name|int
name|pref
init|=
operator|(
name|max
operator|>
operator|-
name|min
condition|?
name|max
else|:
operator|-
name|min
operator|>
name|max
condition|?
name|min
else|:
name|max
operator|)
decl_stmt|;
if|if
condition|(
name|slot2pref
index|[
name|i
index|]
index|[
literal|2
index|]
operator|==
literal|1
condition|)
name|pattern
operator|.
name|append
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2char
argument_list|(
name|PreferenceLevel
operator|.
name|sNotAvailable
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|pattern
operator|.
name|append
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2char
argument_list|(
name|Constants
operator|.
name|preferenceLevel2preference
argument_list|(
name|pref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|info
operator|.
name|setAvailability
argument_list|(
name|pattern
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
specifier|protected
name|List
argument_list|<
name|Preference
argument_list|<
name|TimeLocation
argument_list|>
argument_list|>
name|loadTimePreferences
parameter_list|(
name|TimePref
name|tp
parameter_list|)
block|{
name|List
argument_list|<
name|Preference
argument_list|<
name|TimeLocation
argument_list|>
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|Preference
argument_list|<
name|TimeLocation
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|TimePatternModel
name|m
init|=
name|tp
operator|.
name|getTimePatternModel
argument_list|()
decl_stmt|;
name|boolean
name|out
index|[]
index|[]
init|=
operator|new
name|boolean
index|[
name|m
operator|.
name|getNrDays
argument_list|()
index|]
index|[
name|m
operator|.
name|getNrTimes
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m
operator|.
name|getNrDays
argument_list|()
condition|;
name|i
operator|++
control|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|m
operator|.
name|getNrTimes
argument_list|()
condition|;
name|j
operator|++
control|)
name|out
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m
operator|.
name|getNrDays
argument_list|()
condition|;
name|i
operator|++
control|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|m
operator|.
name|getNrTimes
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|out
index|[
name|i
index|]
index|[
name|j
index|]
condition|)
continue|continue;
name|out
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getPreference
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
condition|)
continue|continue;
name|int
name|endDay
init|=
name|i
decl_stmt|,
name|endTime
init|=
name|j
decl_stmt|;
while|while
condition|(
name|endTime
operator|+
literal|1
operator|<
name|m
operator|.
name|getNrTimes
argument_list|()
operator|&&
operator|!
name|out
index|[
name|i
index|]
index|[
name|endTime
operator|+
literal|1
index|]
operator|&&
name|m
operator|.
name|getPreference
argument_list|(
name|i
argument_list|,
name|endTime
operator|+
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getPreference
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
condition|)
name|endTime
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|boolean
name|same
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
name|i
init|;
name|k
operator|+
literal|1
operator|<
name|m
operator|.
name|getNrDays
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
for|for
control|(
name|int
name|x
init|=
name|j
init|;
name|x
operator|<=
name|endTime
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|out
index|[
name|k
operator|+
literal|1
index|]
index|[
name|x
index|]
operator|&&
operator|!
name|m
operator|.
name|getPreference
argument_list|(
name|i
argument_list|,
name|x
argument_list|)
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getPreference
argument_list|(
name|k
operator|+
literal|1
argument_list|,
name|x
argument_list|)
argument_list|)
condition|)
block|{
name|same
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|same
condition|)
break|break;
block|}
if|if
condition|(
operator|!
name|same
condition|)
break|break;
block|}
if|if
condition|(
name|same
condition|)
name|endDay
operator|=
name|m
operator|.
name|getNrDays
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
while|while
condition|(
name|endDay
operator|+
literal|1
operator|<
name|m
operator|.
name|getNrDays
argument_list|()
condition|)
block|{
name|boolean
name|same
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
name|j
init|;
name|x
operator|<=
name|endTime
condition|;
name|x
operator|++
control|)
if|if
condition|(
operator|!
name|out
index|[
name|endDay
operator|+
literal|1
index|]
index|[
name|x
index|]
operator|&&
operator|!
name|m
operator|.
name|getPreference
argument_list|(
name|i
argument_list|,
name|x
argument_list|)
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getPreference
argument_list|(
name|endDay
operator|+
literal|1
argument_list|,
name|x
argument_list|)
argument_list|)
condition|)
block|{
name|same
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|same
condition|)
break|break;
name|endDay
operator|++
expr_stmt|;
block|}
for|for
control|(
name|int
name|a
init|=
name|i
init|;
name|a
operator|<=
name|endDay
condition|;
name|a
operator|++
control|)
for|for
control|(
name|int
name|b
init|=
name|j
init|;
name|b
operator|<=
name|endTime
condition|;
name|b
operator|++
control|)
name|out
index|[
name|a
index|]
index|[
name|b
index|]
operator|=
literal|true
expr_stmt|;
name|int
name|dayCode
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|a
init|=
name|i
init|;
name|a
operator|<=
name|endDay
condition|;
name|a
operator|++
control|)
name|dayCode
operator||=
name|m
operator|.
name|getDayCode
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|TimeLocation
name|time
init|=
operator|new
name|TimeLocation
argument_list|(
name|dayCode
argument_list|,
name|m
operator|.
name|getStartSlot
argument_list|(
name|j
argument_list|)
argument_list|,
name|m
operator|.
name|getStartSlot
argument_list|(
name|endTime
argument_list|)
operator|-
name|m
operator|.
name|getStartSlot
argument_list|(
name|j
argument_list|)
operator|+
name|m
operator|.
name|getSlotsPerMtg
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0.0
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|,
name|m
operator|.
name|getBreakTime
argument_list|()
argument_list|)
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|Preference
argument_list|<
name|TimeLocation
argument_list|>
argument_list|(
name|time
argument_list|,
name|Constants
operator|.
name|preference2preferenceLevel
argument_list|(
name|m
operator|.
name|getPreference
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|protected
name|TeachingRequestInfo
name|getRequest
parameter_list|(
name|TeachingRequest
name|tr
parameter_list|,
name|String
name|nameFormat
parameter_list|,
name|InstructorSchedulingProxy
name|solver
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|DepartmentalInstructorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|TeachingRequestInfo
name|request
init|=
operator|new
name|TeachingRequestInfo
argument_list|()
decl_stmt|;
name|request
operator|.
name|setRequestId
argument_list|(
name|tr
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setNrInstructors
argument_list|(
name|tr
operator|.
name|getNbrInstructors
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCourse
argument_list|(
name|getCourse
argument_list|(
name|tr
operator|.
name|getOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TeachingClassRequest
name|tcr
range|:
operator|new
name|TreeSet
argument_list|<
name|TeachingClassRequest
argument_list|>
argument_list|(
name|tr
operator|.
name|getClassRequests
argument_list|()
argument_list|)
control|)
name|request
operator|.
name|addSection
argument_list|(
name|getSection
argument_list|(
name|tcr
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setLoad
argument_list|(
name|tr
operator|.
name|getTeachingLoad
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|tr
operator|.
name|getPreferences
argument_list|(
name|InstructorPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructorPref
name|p
init|=
operator|(
name|InstructorPref
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|request
operator|.
name|addInstructorPreference
argument_list|(
operator|new
name|PreferenceInfo
argument_list|(
name|p
operator|.
name|getInstructor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|p
operator|.
name|getInstructor
argument_list|()
operator|.
name|getName
argument_list|(
name|nameFormat
argument_list|)
argument_list|,
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|tr
operator|.
name|getPreferences
argument_list|(
name|InstructorAttributePref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructorAttributePref
name|p
init|=
operator|(
name|InstructorAttributePref
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|request
operator|.
name|addAttributePreference
argument_list|(
operator|new
name|PreferenceInfo
argument_list|(
name|p
operator|.
name|getAttribute
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|p
operator|.
name|getAttribute
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|index
init|=
literal|0
decl_stmt|;
name|TreeSet
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|instructors
init|=
operator|new
name|TreeSet
argument_list|<
name|DepartmentalInstructor
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
name|TeachingRequestInfo
name|info
init|=
name|solver
operator|.
name|getTeachingRequestInfo
argument_list|(
name|tr
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
operator|&&
name|info
operator|.
name|hasInstructors
argument_list|()
condition|)
for|for
control|(
name|InstructorInfo
name|i
range|:
name|info
operator|.
name|getInstructors
argument_list|()
control|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
name|DepartmentalInstructorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|i
operator|.
name|getInstructorId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructor
operator|!=
literal|null
condition|)
name|instructors
operator|.
name|add
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|instructors
operator|.
name|addAll
argument_list|(
name|tr
operator|.
name|getAssignedInstructors
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|DepartmentalInstructor
name|instructor
range|:
name|instructors
control|)
block|{
name|InstructorInfo
name|info
init|=
name|getInstructor
argument_list|(
name|request
argument_list|,
name|instructor
argument_list|,
name|nameFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
name|InstructorInfo
name|i
init|=
name|solver
operator|.
name|getInstructorInfo
argument_list|(
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|info
operator|.
name|setAssignedLoad
argument_list|(
name|i
operator|==
literal|null
condition|?
literal|0f
else|:
name|i
operator|.
name|getAssignedLoad
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Number
name|load
init|=
operator|(
operator|(
name|Number
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select sum(r.teachingLoad) from TeachingRequest r inner join r.assignedInstructors i where i.uniqueId = :instructorId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"instructorId"
argument_list|,
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
decl_stmt|;
name|info
operator|.
name|setAssignedLoad
argument_list|(
name|load
operator|==
literal|null
condition|?
literal|0f
else|:
name|load
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|addInstructor
argument_list|(
name|info
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|tr
operator|.
name|getPreferences
argument_list|(
name|InstructorPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructorPref
name|p
init|=
operator|(
name|InstructorPref
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getInstructor
argument_list|()
operator|.
name|equals
argument_list|(
name|instructor
argument_list|)
condition|)
name|info
operator|.
name|setValue
argument_list|(
literal|"Instructor Preferences"
argument_list|,
name|Constants
operator|.
name|preference2preferenceLevel
argument_list|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MinMaxPreferenceCombination
name|attr
init|=
operator|new
name|MinMaxPreferenceCombination
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|tr
operator|.
name|getPreferences
argument_list|(
name|InstructorAttributePref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructorAttributePref
name|p
init|=
operator|(
name|InstructorAttributePref
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getAttributes
argument_list|()
operator|.
name|contains
argument_list|(
name|p
operator|.
name|getAttribute
argument_list|()
argument_list|)
condition|)
name|attr
operator|.
name|addPreferenceProlog
argument_list|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|info
operator|.
name|setValue
argument_list|(
literal|"Attribute Preferences"
argument_list|,
name|attr
operator|.
name|getPreferenceInt
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setAssignmentIndex
argument_list|(
name|index
operator|++
argument_list|)
expr_stmt|;
block|}
return|return
name|request
return|;
block|}
specifier|public
name|InstructorInfo
name|getInstructorInfo
parameter_list|(
name|DepartmentalInstructor
name|instructor
parameter_list|,
name|String
name|nameFormat
parameter_list|)
block|{
name|InstructorInfo
name|info
init|=
operator|new
name|InstructorInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setInstructorId
argument_list|(
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setInstructorName
argument_list|(
name|instructor
operator|.
name|getName
argument_list|(
name|nameFormat
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setExternalId
argument_list|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setMaxLoad
argument_list|(
name|instructor
operator|.
name|getMaxLoad
argument_list|()
operator|==
literal|null
condition|?
literal|0f
else|:
name|instructor
operator|.
name|getMaxLoad
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|InstructorAttribute
name|a
range|:
name|instructor
operator|.
name|getAttributes
argument_list|()
control|)
block|{
name|AttributeInterface
name|attribute
init|=
operator|new
name|AttributeInterface
argument_list|()
decl_stmt|;
name|attribute
operator|.
name|setId
argument_list|(
name|a
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|attribute
operator|.
name|setName
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|AttributeTypeInterface
name|type
init|=
operator|new
name|AttributeTypeInterface
argument_list|()
decl_stmt|;
name|type
operator|.
name|setId
argument_list|(
name|a
operator|.
name|getType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|.
name|setLabel
argument_list|(
name|a
operator|.
name|getType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|.
name|setConjunctive
argument_list|(
name|a
operator|.
name|getType
argument_list|()
operator|.
name|isConjunctive
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|.
name|setRequired
argument_list|(
name|a
operator|.
name|getType
argument_list|()
operator|.
name|isRequired
argument_list|()
argument_list|)
expr_stmt|;
name|attribute
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|info
operator|.
name|addAttribute
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
block|}
name|int
index|[]
index|[]
name|slot2pref
init|=
operator|new
name|int
index|[
name|Constants
operator|.
name|NR_DAYS
operator|*
name|Constants
operator|.
name|SLOTS_PER_DAY
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|slot2pref
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|slot2pref
index|[
name|i
index|]
operator|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
expr_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
name|p
range|:
name|instructor
operator|.
name|getPreferences
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|instanceof
name|InstructorCoursePref
condition|)
block|{
name|InstructorCoursePref
name|cp
init|=
operator|(
name|InstructorCoursePref
operator|)
name|p
decl_stmt|;
name|info
operator|.
name|addCoursePreference
argument_list|(
operator|new
name|PreferenceInfo
argument_list|(
name|cp
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|cp
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|cp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|p
operator|instanceof
name|DistributionPref
condition|)
block|{
name|DistributionPref
name|dp
init|=
operator|(
name|DistributionPref
operator|)
name|p
decl_stmt|;
name|info
operator|.
name|addDistributionPreference
argument_list|(
operator|new
name|PreferenceInfo
argument_list|(
name|dp
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|dp
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|,
name|dp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|p
operator|instanceof
name|TimePref
condition|)
block|{
name|TimePref
name|tp
init|=
operator|(
name|TimePref
operator|)
name|p
decl_stmt|;
name|info
operator|.
name|setAvailability
argument_list|(
name|tp
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Preference
argument_list|<
name|TimeLocation
argument_list|>
name|pf
range|:
name|loadTimePreferences
argument_list|(
operator|(
name|TimePref
operator|)
name|p
argument_list|)
control|)
block|{
name|PreferenceInfo
name|pi
init|=
operator|new
name|PreferenceInfo
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
name|pf
operator|.
name|getTarget
argument_list|()
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|,
name|pf
operator|.
name|getTarget
argument_list|()
operator|.
name|getLongName
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|,
name|Constants
operator|.
name|preferenceLevel2preference
argument_list|(
name|pf
operator|.
name|getPreference
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|pi
operator|.
name|setComparable
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%03d:%05d"
argument_list|,
name|pf
operator|.
name|getTarget
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|,
name|pf
operator|.
name|getTarget
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|addTimePreference
argument_list|(
name|pi
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|Integer
argument_list|>
name|i
init|=
name|pf
operator|.
name|getTarget
argument_list|()
operator|.
name|getSlots
argument_list|()
init|;
name|i
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|int
name|slot
init|=
name|i
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|slot2pref
index|[
name|slot
index|]
index|[
literal|0
index|]
operator|=
name|Math
operator|.
name|min
argument_list|(
name|slot2pref
index|[
name|slot
index|]
index|[
literal|0
index|]
argument_list|,
name|pf
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
name|slot2pref
index|[
name|slot
index|]
index|[
literal|1
index|]
operator|=
name|Math
operator|.
name|max
argument_list|(
name|slot2pref
index|[
name|slot
index|]
index|[
literal|1
index|]
argument_list|,
name|pf
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|EnrolledClass
name|ec
range|:
name|InstructorSchedulingDatabaseLoader
operator|.
name|loadUnavailability
argument_list|(
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|,
name|instructor
argument_list|)
control|)
block|{
name|PreferenceInfo
name|pi
init|=
operator|new
name|PreferenceInfo
argument_list|(
name|ec
operator|.
name|getClassId
argument_list|()
argument_list|,
name|ec
operator|.
name|getLongName
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|,
name|Constants
operator|.
name|sPreferenceProhibited
argument_list|)
decl_stmt|;
name|pi
operator|.
name|setComparable
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%03d:%05d"
argument_list|,
name|ec
operator|.
name|getDayCode
argument_list|()
argument_list|,
name|ec
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|addTimePreference
argument_list|(
name|pi
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|Integer
argument_list|>
name|i
init|=
name|ec
operator|.
name|getSlots
argument_list|()
init|;
name|i
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|int
name|slot
init|=
name|i
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|slot2pref
index|[
name|slot
index|]
index|[
literal|0
index|]
operator|=
name|Math
operator|.
name|min
argument_list|(
name|slot2pref
index|[
name|slot
index|]
index|[
literal|0
index|]
argument_list|,
name|Constants
operator|.
name|sPreferenceLevelProhibited
argument_list|)
expr_stmt|;
name|slot2pref
index|[
name|slot
index|]
index|[
literal|1
index|]
operator|=
name|Math
operator|.
name|max
argument_list|(
name|slot2pref
index|[
name|slot
index|]
index|[
literal|1
index|]
argument_list|,
name|Constants
operator|.
name|sPreferenceLevelProhibited
argument_list|)
expr_stmt|;
name|slot2pref
index|[
name|slot
index|]
index|[
literal|2
index|]
operator|=
literal|1
expr_stmt|;
block|}
name|ClassInfo
name|ci
init|=
operator|new
name|ClassInfo
argument_list|()
decl_stmt|;
name|ci
operator|.
name|setCourseId
argument_list|(
name|ec
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setCourse
argument_list|(
name|ec
operator|.
name|getCourse
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setClassId
argument_list|(
name|ec
operator|.
name|getClassId
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setSection
argument_list|(
name|ec
operator|.
name|getSection
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setExternalId
argument_list|(
name|ec
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setType
argument_list|(
name|ec
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setInstructor
argument_list|(
name|ec
operator|.
name|isInstructor
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setRoom
argument_list|(
name|ec
operator|.
name|getRoom
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setTime
argument_list|(
name|ec
operator|.
name|getDayHeader
argument_list|()
operator|+
literal|" "
operator|+
name|ec
operator|.
name|getStartTimeHeader
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|ec
operator|.
name|getEndTimeHeader
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setDate
argument_list|(
name|ec
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|addEnrollment
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
name|StringBuffer
name|pattern
init|=
operator|new
name|StringBuffer
argument_list|(
name|slot2pref
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|slot2pref
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|min
init|=
name|slot2pref
index|[
name|i
index|]
index|[
literal|0
index|]
decl_stmt|;
name|int
name|max
init|=
name|slot2pref
index|[
name|i
index|]
index|[
literal|1
index|]
decl_stmt|;
name|int
name|pref
init|=
operator|(
name|max
operator|>
operator|-
name|min
condition|?
name|max
else|:
operator|-
name|min
operator|>
name|max
condition|?
name|min
else|:
name|max
operator|)
decl_stmt|;
if|if
condition|(
name|slot2pref
index|[
name|i
index|]
index|[
literal|2
index|]
operator|==
literal|1
condition|)
name|pattern
operator|.
name|append
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2char
argument_list|(
name|PreferenceLevel
operator|.
name|sNotAvailable
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|pattern
operator|.
name|append
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2char
argument_list|(
name|Constants
operator|.
name|preferenceLevel2preference
argument_list|(
name|pref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|info
operator|.
name|setAvailability
argument_list|(
name|pattern
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|DepartmentalInstructorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
for|for
control|(
name|TeachingRequest
name|tr
range|:
operator|(
name|List
argument_list|<
name|TeachingRequest
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select r from TeachingRequest r inner join r.assignedInstructors i where i.uniqueId = :instructorId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"instructorId"
argument_list|,
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|tr
operator|.
name|isCancelled
argument_list|()
condition|)
continue|continue;
name|TeachingRequestInfo
name|request
init|=
name|getRequest
argument_list|(
name|tr
argument_list|,
name|info
argument_list|,
name|nameFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
operator|==
literal|null
condition|)
block|{
name|info
operator|.
name|setTeachingPreference
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
name|request
operator|.
name|setValue
argument_list|(
literal|"Teaching Preferences"
argument_list|,
name|Constants
operator|.
name|preference2preferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|addValue
argument_list|(
literal|"Teaching Preferences"
argument_list|,
name|Constants
operator|.
name|preference2preferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|info
operator|.
name|setTeachingPreference
argument_list|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getTeachingPreference
argument_list|()
argument_list|)
condition|)
block|{
name|request
operator|.
name|setValue
argument_list|(
literal|"Teaching Preferences"
argument_list|,
name|Constants
operator|.
name|preference2preferenceLevel
argument_list|(
name|info
operator|.
name|getTeachingPreference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|addValue
argument_list|(
literal|"Teaching Preferences"
argument_list|,
name|Constants
operator|.
name|preference2preferenceLevel
argument_list|(
name|info
operator|.
name|getTeachingPreference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
name|p
range|:
name|instructor
operator|.
name|getPreferences
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|instanceof
name|InstructorCoursePref
condition|)
block|{
name|InstructorCoursePref
name|cp
init|=
operator|(
name|InstructorCoursePref
operator|)
name|p
decl_stmt|;
if|if
condition|(
name|cp
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
name|info
operator|.
name|addValue
argument_list|(
literal|"Course Preferences"
argument_list|,
name|Constants
operator|.
name|preference2preferenceLevel
argument_list|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setValue
argument_list|(
literal|"Course Preferences"
argument_list|,
name|Constants
operator|.
name|preference2preferenceLevel
argument_list|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|info
operator|.
name|addAssignedRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
specifier|protected
name|TeachingRequestInfo
name|getRequest
parameter_list|(
name|TeachingRequest
name|tr
parameter_list|,
name|InstructorInfo
name|instructor
parameter_list|,
name|String
name|nameFormat
parameter_list|)
block|{
name|TeachingRequestInfo
name|request
init|=
operator|new
name|TeachingRequestInfo
argument_list|()
decl_stmt|;
name|request
operator|.
name|setRequestId
argument_list|(
name|tr
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setNrInstructors
argument_list|(
name|tr
operator|.
name|getNbrInstructors
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCourse
argument_list|(
name|getCourse
argument_list|(
name|tr
operator|.
name|getOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TeachingClassRequest
name|tcr
range|:
operator|new
name|TreeSet
argument_list|<
name|TeachingClassRequest
argument_list|>
argument_list|(
name|tr
operator|.
name|getClassRequests
argument_list|()
argument_list|)
control|)
name|request
operator|.
name|addSection
argument_list|(
name|getSection
argument_list|(
name|tcr
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setLoad
argument_list|(
name|tr
operator|.
name|getTeachingLoad
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|tr
operator|.
name|getPreferences
argument_list|(
name|InstructorPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructorPref
name|p
init|=
operator|(
name|InstructorPref
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|request
operator|.
name|addInstructorPreference
argument_list|(
operator|new
name|PreferenceInfo
argument_list|(
name|p
operator|.
name|getInstructor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|p
operator|.
name|getInstructor
argument_list|()
operator|.
name|getName
argument_list|(
name|nameFormat
argument_list|)
argument_list|,
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|getInstructor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|instructor
operator|.
name|getInstructorId
argument_list|()
argument_list|)
condition|)
block|{
name|request
operator|.
name|setValue
argument_list|(
literal|"Instructor Preferences"
argument_list|,
name|Constants
operator|.
name|preference2preferenceLevel
argument_list|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|addValue
argument_list|(
literal|"Instructor Preferences"
argument_list|,
name|Constants
operator|.
name|preference2preferenceLevel
argument_list|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|MinMaxPreferenceCombination
name|attr
init|=
operator|new
name|MinMaxPreferenceCombination
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|tr
operator|.
name|getPreferences
argument_list|(
name|InstructorAttributePref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructorAttributePref
name|p
init|=
operator|(
name|InstructorAttributePref
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|request
operator|.
name|addAttributePreference
argument_list|(
operator|new
name|PreferenceInfo
argument_list|(
name|p
operator|.
name|getAttribute
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|p
operator|.
name|getAttribute
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|AttributeInterface
name|a
range|:
name|instructor
operator|.
name|getAttributes
argument_list|()
control|)
if|if
condition|(
name|a
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getAttribute
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|attr
operator|.
name|addPreferenceProlog
argument_list|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|request
operator|.
name|setValue
argument_list|(
literal|"Attribute Preferences"
argument_list|,
name|attr
operator|.
name|getPreferenceInt
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|addValue
argument_list|(
literal|"Attribute Preferences"
argument_list|,
name|attr
operator|.
name|getPreferenceInt
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setAssignedLoad
argument_list|(
name|instructor
operator|.
name|getAssignedLoad
argument_list|()
operator|+
name|request
operator|.
name|getLoad
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
specifier|protected
name|PreferenceCombination
name|getTimePreference
parameter_list|(
name|DepartmentalInstructor
name|instructor
parameter_list|,
name|TeachingRequest
name|tr
parameter_list|)
block|{
name|PreferenceCombination
name|comb
init|=
operator|new
name|MinMaxPreferenceCombination
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TimeLocation
argument_list|>
name|noOverlap
init|=
operator|new
name|ArrayList
argument_list|<
name|TimeLocation
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TimeLocation
argument_list|>
name|canOverlap
init|=
operator|new
name|ArrayList
argument_list|<
name|TimeLocation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TeachingClassRequest
name|tcr
range|:
name|tr
operator|.
name|getClassRequests
argument_list|()
control|)
block|{
name|Assignment
name|assignment
init|=
name|tcr
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|tcr
operator|.
name|isCanOverlap
argument_list|()
condition|)
name|canOverlap
operator|.
name|add
argument_list|(
name|assignment
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|noOverlap
operator|.
name|add
argument_list|(
name|assignment
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|instructor
operator|.
name|effectivePreferences
argument_list|(
name|TimePref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|p
init|=
operator|(
name|TimePref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Preference
argument_list|<
name|TimeLocation
argument_list|>
name|pref
range|:
name|loadTimePreferences
argument_list|(
operator|(
name|TimePref
operator|)
name|p
argument_list|)
control|)
block|{
for|for
control|(
name|TimeLocation
name|time
range|:
name|noOverlap
control|)
if|if
condition|(
name|time
operator|.
name|hasIntersection
argument_list|(
name|pref
operator|.
name|getTarget
argument_list|()
argument_list|)
condition|)
name|comb
operator|.
name|addPreferenceInt
argument_list|(
name|pref
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TimeLocation
name|time
range|:
name|canOverlap
control|)
if|if
condition|(
name|time
operator|.
name|hasIntersection
argument_list|(
name|pref
operator|.
name|getTarget
argument_list|()
argument_list|)
condition|)
name|comb
operator|.
name|addPreferenceInt
argument_list|(
name|pref
operator|.
name|isProhibited
argument_list|()
condition|?
name|Constants
operator|.
name|sPreferenceLevelStronglyDiscouraged
else|:
name|pref
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|EnrolledClass
name|ec
range|:
name|InstructorSchedulingDatabaseLoader
operator|.
name|loadUnavailability
argument_list|(
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|,
name|instructor
argument_list|)
control|)
block|{
for|for
control|(
name|TimeLocation
name|time
range|:
name|noOverlap
control|)
if|if
condition|(
name|time
operator|.
name|hasIntersection
argument_list|(
name|ec
argument_list|)
condition|)
name|comb
operator|.
name|addPreferenceInt
argument_list|(
name|Constants
operator|.
name|sPreferenceLevelProhibited
argument_list|)
expr_stmt|;
for|for
control|(
name|TimeLocation
name|time
range|:
name|canOverlap
control|)
if|if
condition|(
name|time
operator|.
name|hasIntersection
argument_list|(
name|ec
argument_list|)
condition|)
name|comb
operator|.
name|addPreferenceInt
argument_list|(
name|Constants
operator|.
name|sPreferenceLevelStronglyDiscouraged
argument_list|)
expr_stmt|;
block|}
return|return
name|comb
return|;
block|}
specifier|protected
name|String
name|getCoursePreference
parameter_list|(
name|DepartmentalInstructor
name|instructor
parameter_list|,
name|TeachingRequest
name|tr
parameter_list|)
block|{
name|CourseOffering
name|course
init|=
name|tr
operator|.
name|getOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
decl_stmt|;
name|boolean
name|hasRequired
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|instructor
operator|.
name|effectivePreferences
argument_list|(
name|InstructorCoursePref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructorCoursePref
name|p
init|=
operator|(
name|InstructorCoursePref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|sPreferenceRequired
argument_list|)
condition|)
block|{
name|hasRequired
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|instructor
operator|.
name|effectivePreferences
argument_list|(
name|InstructorCoursePref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructorCoursePref
name|p
init|=
operator|(
name|InstructorCoursePref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getCourse
argument_list|()
operator|.
name|equals
argument_list|(
name|course
argument_list|)
condition|)
block|{
if|if
condition|(
name|hasRequired
operator|&&
operator|!
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|sPreferenceRequired
argument_list|)
condition|)
continue|continue;
return|return
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
return|;
block|}
block|}
if|if
condition|(
name|hasRequired
condition|)
return|return
name|Constants
operator|.
name|sPreferenceProhibited
return|;
return|return
name|Constants
operator|.
name|sPreferenceNeutral
return|;
block|}
specifier|protected
name|String
name|getInstructorPreference
parameter_list|(
name|DepartmentalInstructor
name|instructor
parameter_list|,
name|TeachingRequest
name|tr
parameter_list|)
block|{
name|boolean
name|hasRequired
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|tr
operator|.
name|getPreferences
argument_list|(
name|InstructorPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructorPref
name|p
init|=
operator|(
name|InstructorPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|sPreferenceRequired
argument_list|)
condition|)
block|{
name|hasRequired
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|tr
operator|.
name|getPreferences
argument_list|(
name|InstructorPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructorPref
name|p
init|=
operator|(
name|InstructorPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getInstructor
argument_list|()
operator|.
name|equals
argument_list|(
name|instructor
argument_list|)
condition|)
block|{
if|if
condition|(
name|hasRequired
operator|&&
operator|!
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|sPreferenceRequired
argument_list|)
condition|)
continue|continue;
return|return
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
return|;
block|}
block|}
if|if
condition|(
name|hasRequired
condition|)
return|return
name|Constants
operator|.
name|sPreferenceProhibited
return|;
return|return
name|Constants
operator|.
name|sPreferenceNeutral
return|;
block|}
specifier|protected
name|int
name|getAttributePreference
parameter_list|(
name|DepartmentalInstructor
name|instructor
parameter_list|,
name|TeachingRequest
name|tr
parameter_list|,
name|InstructorAttributeType
name|type
parameter_list|)
block|{
name|Set
argument_list|<
name|InstructorAttribute
argument_list|>
name|attributes
init|=
operator|new
name|HashSet
argument_list|<
name|InstructorAttribute
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|InstructorAttribute
name|a
range|:
name|instructor
operator|.
name|getAttributes
argument_list|()
control|)
if|if
condition|(
name|a
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
name|attributes
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|boolean
name|hasReq
init|=
literal|false
decl_stmt|,
name|hasPref
init|=
literal|false
decl_stmt|,
name|needReq
init|=
literal|false
decl_stmt|,
name|hasType
init|=
literal|false
decl_stmt|;
name|PreferenceCombination
name|ret
init|=
operator|new
name|SumPreferenceCombination
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|tr
operator|.
name|getPreferences
argument_list|(
name|InstructorAttributePref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructorAttributePref
name|p
init|=
operator|(
name|InstructorAttributePref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getAttribute
argument_list|()
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|InstructorAttribute
name|a
init|=
operator|(
operator|(
name|InstructorAttributePref
operator|)
name|p
operator|)
operator|.
name|getAttribute
argument_list|()
decl_stmt|;
name|hasType
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|sPreferenceRequired
argument_list|)
condition|)
name|needReq
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|attributes
operator|.
name|contains
argument_list|(
name|a
argument_list|)
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|sPreferenceProhibited
argument_list|)
condition|)
return|return
name|Constants
operator|.
name|sPreferenceLevelProhibited
return|;
if|else if
condition|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|sPreferenceRequired
argument_list|)
condition|)
name|hasReq
operator|=
literal|true
expr_stmt|;
else|else
name|ret
operator|.
name|addPreferenceProlog
argument_list|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
name|hasPref
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|sPreferenceRequired
argument_list|)
operator|&&
name|type
operator|.
name|isConjunctive
argument_list|()
condition|)
return|return
name|Constants
operator|.
name|sPreferenceLevelProhibited
return|;
block|}
block|}
block|}
if|if
condition|(
name|needReq
operator|&&
operator|!
name|hasReq
condition|)
return|return
name|Constants
operator|.
name|sPreferenceLevelProhibited
return|;
if|if
condition|(
name|type
operator|.
name|isRequired
argument_list|()
operator|&&
name|hasType
operator|&&
operator|!
name|hasPref
condition|)
return|return
name|Constants
operator|.
name|sPreferenceLevelProhibited
return|;
return|return
name|ret
operator|.
name|getPreferenceInt
argument_list|()
return|;
block|}
specifier|public
name|PreferenceCombination
name|getAttributePreference
parameter_list|(
name|DepartmentalInstructor
name|instructor
parameter_list|,
name|TeachingRequest
name|tr
parameter_list|,
name|List
argument_list|<
name|InstructorAttributeType
argument_list|>
name|attributeTypes
parameter_list|)
block|{
name|PreferenceCombination
name|preference
init|=
operator|new
name|SumPreferenceCombination
argument_list|()
decl_stmt|;
for|for
control|(
name|InstructorAttributeType
name|type
range|:
name|attributeTypes
control|)
name|preference
operator|.
name|addPreferenceInt
argument_list|(
name|getAttributePreference
argument_list|(
name|instructor
argument_list|,
name|tr
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|preference
return|;
block|}
specifier|protected
name|boolean
name|canTeach
parameter_list|(
name|DepartmentalInstructor
name|instructor
parameter_list|,
name|TeachingRequest
name|request
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|isCancelled
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|request
operator|.
name|getTeachingLoad
argument_list|()
operator|>
name|instructor
operator|.
name|getMaxLoad
argument_list|()
condition|)
return|return
literal|false
return|;
name|PreferenceCombination
name|timePref
init|=
name|getTimePreference
argument_list|(
name|instructor
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|timePref
operator|.
name|isProhibited
argument_list|()
condition|)
return|return
literal|false
return|;
name|String
name|coursePref
init|=
name|getCoursePreference
argument_list|(
name|instructor
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|Constants
operator|.
name|sPreferenceProhibited
operator|.
name|equals
argument_list|(
name|coursePref
argument_list|)
condition|)
return|return
literal|false
return|;
name|String
name|instrPref
init|=
name|getInstructorPreference
argument_list|(
name|instructor
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|Constants
operator|.
name|sPreferenceProhibited
operator|.
name|equals
argument_list|(
name|instrPref
argument_list|)
condition|)
return|return
literal|false
return|;
name|PreferenceCombination
name|attPref
init|=
name|getAttributePreference
argument_list|(
name|instructor
argument_list|,
name|request
argument_list|,
name|context
operator|.
name|getAttributeTypes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|attPref
operator|.
name|isProhibited
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
specifier|protected
name|InstructorInfo
name|getInstructor
parameter_list|(
name|TeachingRequest
name|tr
parameter_list|,
name|TeachingRequestInfo
name|request
parameter_list|,
name|DepartmentalInstructor
name|instructor
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
name|InstructorInfo
name|info
init|=
name|getInstructor
argument_list|(
name|request
argument_list|,
name|instructor
argument_list|,
name|context
operator|.
name|getNameFormat
argument_list|()
argument_list|)
decl_stmt|;
name|info
operator|.
name|setValue
argument_list|(
literal|"Time Preferences"
argument_list|,
name|getTimePreference
argument_list|(
name|instructor
argument_list|,
name|tr
argument_list|)
operator|.
name|getPreferenceInt
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setValue
argument_list|(
literal|"Course Preferences"
argument_list|,
name|Constants
operator|.
name|preference2preferenceLevel
argument_list|(
name|getCoursePreference
argument_list|(
name|instructor
argument_list|,
name|tr
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setValue
argument_list|(
literal|"Instructor Preferences"
argument_list|,
name|Constants
operator|.
name|preference2preferenceLevel
argument_list|(
name|getInstructorPreference
argument_list|(
name|instructor
argument_list|,
name|tr
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setValue
argument_list|(
literal|"Attribute Preferences"
argument_list|,
name|getAttributePreference
argument_list|(
name|instructor
argument_list|,
name|tr
argument_list|,
name|context
operator|.
name|getAttributeTypes
argument_list|()
argument_list|)
operator|.
name|getPreferenceInt
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
specifier|public
name|void
name|computeDomainForClass
parameter_list|(
name|SuggestionsResponse
name|response
parameter_list|,
name|TeachingRequest
name|tr
parameter_list|,
name|int
name|index
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|DepartmentalInstructorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct i from DepartmentalInstructor i where "
operator|+
literal|"i.department.uniqueId = :deptId and i.teachingPreference.prefProlog != :prohibited and i.maxLoad> 0.0"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"deptId"
argument_list|,
name|tr
operator|.
name|getOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"prohibited"
argument_list|,
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|)
expr_stmt|;
for|for
control|(
name|DepartmentalInstructor
name|instructor
range|:
name|list
control|)
block|{
if|if
condition|(
name|canTeach
argument_list|(
name|instructor
argument_list|,
name|tr
argument_list|,
name|context
argument_list|)
condition|)
block|{
name|Suggestion
name|s
init|=
operator|new
name|Suggestion
argument_list|()
decl_stmt|;
name|s
operator|.
name|set
argument_list|(
name|tr
argument_list|,
name|index
argument_list|,
name|instructor
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|response
operator|.
name|addDomainValue
argument_list|(
name|s
operator|.
name|toInfo
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|computeDomainForInstructor
parameter_list|(
name|SuggestionsResponse
name|response
parameter_list|,
name|DepartmentalInstructor
name|instructor
parameter_list|,
name|TeachingRequest
name|selected
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|DepartmentalInstructorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TeachingRequest
argument_list|>
name|requests
init|=
operator|(
name|List
argument_list|<
name|TeachingRequest
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select r from TeachingRequest r inner join r.offering.courseOfferings co where co.isControl = true and co.subjectArea.department.uniqueId = :deptId order by co.subjectAreaAbbv, co.courseNbr"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"deptId"
argument_list|,
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|InstructorAssignment
name|selectedAssignment
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|selected
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|assigned
init|=
operator|new
name|ArrayList
argument_list|<
name|DepartmentalInstructor
argument_list|>
argument_list|(
name|selected
operator|.
name|getAssignedInstructors
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|assigned
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|assigned
operator|.
name|indexOf
argument_list|(
name|instructor
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
name|selectedAssignment
operator|=
operator|new
name|InstructorAssignment
argument_list|(
name|selected
argument_list|,
name|index
argument_list|,
name|instructor
argument_list|,
name|instructor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TeachingRequest
name|tr
range|:
name|requests
control|)
block|{
if|if
condition|(
name|canTeach
argument_list|(
name|instructor
argument_list|,
name|tr
argument_list|,
name|context
argument_list|)
condition|)
block|{
name|TeachingRequestInfo
name|request
init|=
name|getRequest
argument_list|(
name|tr
argument_list|,
name|context
operator|.
name|getNameFormat
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
condition|)
continue|continue;
name|int
name|maxIndex
init|=
operator|(
name|tr
operator|.
name|getNbrInstructors
argument_list|()
operator|==
literal|1
condition|?
literal|1
else|:
name|tr
operator|.
name|getAssignedInstructors
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
operator|)
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|tr
operator|.
name|getNbrInstructors
argument_list|()
operator|&&
name|index
operator|<
name|maxIndex
condition|;
name|index
operator|++
control|)
block|{
name|Suggestion
name|s
init|=
operator|new
name|Suggestion
argument_list|()
decl_stmt|;
name|s
operator|.
name|set
argument_list|(
name|tr
argument_list|,
name|index
argument_list|,
name|instructor
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|response
operator|.
name|addDomainValue
argument_list|(
name|s
operator|.
name|toInfo
argument_list|(
name|context
argument_list|,
name|selectedAssignment
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|Context
block|{
specifier|private
name|String
name|iNameFormat
decl_stmt|;
specifier|private
name|List
argument_list|<
name|InstructorAttributeType
argument_list|>
name|iAttributeTypes
decl_stmt|;
specifier|private
name|Suggestion
name|iBase
decl_stmt|;
specifier|private
name|SessionContext
name|iSessionContext
decl_stmt|;
name|Context
parameter_list|(
name|SessionContext
name|cx
parameter_list|)
block|{
name|iSessionContext
operator|=
name|cx
expr_stmt|;
name|iNameFormat
operator|=
name|UserProperty
operator|.
name|NameFormat
operator|.
name|get
argument_list|(
name|cx
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|iAttributeTypes
operator|=
operator|(
name|List
argument_list|<
name|InstructorAttributeType
argument_list|>
operator|)
name|InstructorAttributeTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from InstructorAttributeType"
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getNameFormat
parameter_list|()
block|{
return|return
name|iNameFormat
return|;
block|}
specifier|public
name|List
argument_list|<
name|InstructorAttributeType
argument_list|>
name|getAttributeTypes
parameter_list|()
block|{
return|return
name|iAttributeTypes
return|;
block|}
specifier|public
name|Suggestion
name|getBase
parameter_list|()
block|{
return|return
name|iBase
return|;
block|}
specifier|public
name|void
name|setBase
parameter_list|(
name|Suggestion
name|base
parameter_list|)
block|{
name|iBase
operator|=
name|base
expr_stmt|;
block|}
specifier|public
name|SessionContext
name|getSessionContext
parameter_list|()
block|{
return|return
name|iSessionContext
return|;
block|}
block|}
specifier|public
class|class
name|InstructorAssignment
block|{
specifier|private
name|TeachingRequest
name|iRequest
decl_stmt|;
specifier|private
name|int
name|iIndex
decl_stmt|;
specifier|private
name|DepartmentalInstructor
name|iInstructor
decl_stmt|;
specifier|private
name|DepartmentalInstructor
name|iOldInstructor
decl_stmt|;
name|InstructorAssignment
parameter_list|(
name|TeachingRequest
name|tr
parameter_list|,
name|int
name|index
parameter_list|,
name|DepartmentalInstructor
name|instructor
parameter_list|)
block|{
name|iRequest
operator|=
name|tr
expr_stmt|;
name|iIndex
operator|=
name|index
expr_stmt|;
name|iInstructor
operator|=
name|instructor
expr_stmt|;
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|current
init|=
operator|new
name|ArrayList
argument_list|<
name|DepartmentalInstructor
argument_list|>
argument_list|(
name|tr
operator|.
name|getAssignedInstructors
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|iOldInstructor
operator|=
operator|(
name|index
operator|<
name|current
operator|.
name|size
argument_list|()
condition|?
name|current
operator|.
name|get
argument_list|(
name|index
argument_list|)
else|:
literal|null
operator|)
expr_stmt|;
block|}
name|InstructorAssignment
parameter_list|(
name|TeachingRequest
name|tr
parameter_list|,
name|int
name|index
parameter_list|,
name|DepartmentalInstructor
name|instructor
parameter_list|,
name|DepartmentalInstructor
name|oldInstructor
parameter_list|)
block|{
name|iRequest
operator|=
name|tr
expr_stmt|;
name|iIndex
operator|=
name|index
expr_stmt|;
name|iInstructor
operator|=
name|instructor
expr_stmt|;
name|iOldInstructor
operator|=
name|oldInstructor
expr_stmt|;
block|}
specifier|public
name|TeachingRequest
name|getTeachingRequest
parameter_list|()
block|{
return|return
name|iRequest
return|;
block|}
specifier|public
name|int
name|getIndex
parameter_list|()
block|{
return|return
name|iIndex
return|;
block|}
specifier|public
name|DepartmentalInstructor
name|getAssigment
parameter_list|()
block|{
return|return
name|iInstructor
return|;
block|}
specifier|public
name|DepartmentalInstructor
name|getCurrentAssignment
parameter_list|()
block|{
return|return
name|iOldInstructor
return|;
block|}
specifier|public
name|void
name|setAssignment
parameter_list|(
name|DepartmentalInstructor
name|instructor
parameter_list|)
block|{
name|iInstructor
operator|=
name|instructor
expr_stmt|;
block|}
specifier|public
name|boolean
name|isExclusive
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|isSameCommon
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|AssignmentInfo
name|toInfo
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|AssignmentInfo
name|ai
init|=
operator|new
name|AssignmentInfo
argument_list|()
decl_stmt|;
name|ai
operator|.
name|setRequest
argument_list|(
name|getRequest
argument_list|(
name|getTeachingRequest
argument_list|()
argument_list|,
name|context
operator|.
name|getNameFormat
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|ai
operator|.
name|setIndex
argument_list|(
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getAssigment
argument_list|()
operator|!=
literal|null
condition|)
name|ai
operator|.
name|setInstructor
argument_list|(
name|getInstructor
argument_list|(
name|getTeachingRequest
argument_list|()
argument_list|,
name|ai
operator|.
name|getRequest
argument_list|()
argument_list|,
name|getAssigment
argument_list|()
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ai
return|;
block|}
specifier|private
name|boolean
name|overlaps
parameter_list|(
name|TeachingRequest
name|other
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
for|for
control|(
name|TeachingClassRequest
name|c1
range|:
name|getTeachingRequest
argument_list|()
operator|.
name|getClassRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|c1
operator|.
name|isCanOverlap
argument_list|()
condition|)
continue|continue;
name|Assignment
name|a1
init|=
name|c1
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|a1
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|TeachingClassRequest
name|c2
range|:
name|other
operator|.
name|getClassRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|c2
operator|.
name|isCanOverlap
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|c1
operator|.
name|isCommon
argument_list|()
operator|&&
name|c2
operator|.
name|isCommon
argument_list|()
operator|&&
name|c1
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|equals
argument_list|(
name|c2
operator|.
name|getTeachingClass
argument_list|()
argument_list|)
condition|)
continue|continue;
name|Assignment
name|a2
init|=
name|c2
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|a2
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|a1
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|hasIntersection
argument_list|(
name|a2
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|sameCourse
parameter_list|(
name|TeachingRequest
name|other
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
return|return
name|getTeachingRequest
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getOffering
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|sameCommon
parameter_list|(
name|TeachingRequest
name|other
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
if|if
condition|(
operator|!
name|sameCourse
argument_list|(
name|other
argument_list|,
name|context
argument_list|)
condition|)
return|return
literal|false
return|;
for|for
control|(
name|TeachingClassRequest
name|c1
range|:
name|getTeachingRequest
argument_list|()
operator|.
name|getClassRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|c1
operator|.
name|isCommon
argument_list|()
condition|)
for|for
control|(
name|TeachingClassRequest
name|c2
range|:
name|other
operator|.
name|getClassRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|c2
operator|.
name|isCommon
argument_list|()
operator|&&
name|c1
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|equals
argument_list|(
name|c2
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
operator|&&
operator|!
name|c1
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|equals
argument_list|(
name|c2
operator|.
name|getTeachingClass
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|float
name|getLoad
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
return|return
name|getTeachingRequest
argument_list|()
operator|.
name|getTeachingLoad
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getTeachingRequest
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|InstructorAssignment
operator|)
condition|)
return|return
literal|false
return|;
name|InstructorAssignment
name|a
init|=
operator|(
name|InstructorAssignment
operator|)
name|o
decl_stmt|;
return|return
name|getTeachingRequest
argument_list|()
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getTeachingRequest
argument_list|()
argument_list|)
operator|&&
name|getIndex
argument_list|()
operator|==
name|a
operator|.
name|getIndex
argument_list|()
return|;
block|}
block|}
specifier|public
class|class
name|Suggestion
block|{
name|List
argument_list|<
name|InstructorAssignment
argument_list|>
name|iAssignments
init|=
operator|new
name|ArrayList
argument_list|<
name|InstructorAssignment
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|set
parameter_list|(
name|TeachingRequest
name|request
parameter_list|,
name|int
name|index
parameter_list|,
name|DepartmentalInstructor
name|instructor
parameter_list|,
name|DepartmentalInstructor
name|oldInstructor
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|InstructorAssignment
argument_list|>
name|i
init|=
name|iAssignments
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructorAssignment
name|other
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|getTeachingRequest
argument_list|()
operator|.
name|equals
argument_list|(
name|request
argument_list|)
operator|&&
name|other
operator|.
name|getIndex
argument_list|()
operator|==
name|index
condition|)
block|{
if|if
condition|(
name|instructor
operator|!=
literal|null
condition|)
name|other
operator|.
name|setAssignment
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
else|else
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|instructor
operator|!=
literal|null
condition|)
name|iAssignments
operator|.
name|add
argument_list|(
operator|new
name|InstructorAssignment
argument_list|(
name|request
argument_list|,
name|index
argument_list|,
name|instructor
argument_list|,
name|oldInstructor
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|InstructorAssignment
argument_list|>
name|getAssignments
parameter_list|()
block|{
return|return
name|iAssignments
return|;
block|}
specifier|public
name|DepartmentalInstructor
name|getAssignment
parameter_list|(
name|TeachingRequest
name|tr
parameter_list|,
name|int
name|index
parameter_list|)
block|{
for|for
control|(
name|InstructorAssignment
name|a
range|:
name|iAssignments
control|)
if|if
condition|(
name|a
operator|.
name|getTeachingRequest
argument_list|()
operator|.
name|equals
argument_list|(
name|tr
argument_list|)
operator|&&
name|a
operator|.
name|getIndex
argument_list|()
operator|==
name|index
condition|)
return|return
name|a
operator|.
name|getAssigment
argument_list|()
return|;
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|instructors
init|=
operator|new
name|ArrayList
argument_list|<
name|DepartmentalInstructor
argument_list|>
argument_list|(
name|tr
operator|.
name|getAssignedInstructors
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|instructors
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|<
name|instructors
operator|.
name|size
argument_list|()
condition|)
return|return
name|instructors
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|List
argument_list|<
name|InstructorAssignment
argument_list|>
name|getAssignments
parameter_list|(
name|DepartmentalInstructor
name|instructor
parameter_list|)
block|{
name|List
argument_list|<
name|InstructorAssignment
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|InstructorAssignment
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|InstructorAssignment
name|a
range|:
name|iAssignments
control|)
if|if
condition|(
name|instructor
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getAssigment
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|tr
label|:
for|for
control|(
name|TeachingRequest
name|tr
range|:
operator|(
name|List
argument_list|<
name|TeachingRequest
argument_list|>
operator|)
name|TeachingRequestDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct r from TeachingRequest r inner join r.assignedInstructors i where i.uniqueId = :instructorId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"instructorId"
argument_list|,
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|tr
operator|.
name|isCancelled
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|InstructorAssignment
name|a
range|:
name|iAssignments
control|)
if|if
condition|(
name|a
operator|.
name|getTeachingRequest
argument_list|()
operator|.
name|equals
argument_list|(
name|tr
argument_list|)
condition|)
continue|continue
name|tr
continue|;
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|assignments
init|=
operator|new
name|ArrayList
argument_list|<
name|DepartmentalInstructor
argument_list|>
argument_list|(
name|tr
operator|.
name|getAssignedInstructors
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|assignments
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|InstructorAssignment
argument_list|(
name|tr
argument_list|,
name|assignments
operator|.
name|indexOf
argument_list|(
name|instructor
argument_list|)
argument_list|,
name|instructor
argument_list|,
name|instructor
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|void
name|computeConflicts
parameter_list|(
name|InstructorAssignment
name|assignment
parameter_list|,
name|Set
argument_list|<
name|InstructorAssignment
argument_list|>
name|conflicts
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
for|for
control|(
name|InstructorAssignment
name|ta
range|:
name|getAssignments
argument_list|(
name|assignment
operator|.
name|getAssigment
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|ta
operator|.
name|equals
argument_list|(
name|assignment
argument_list|)
operator|||
name|conflicts
operator|.
name|contains
argument_list|(
name|ta
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|ta
operator|.
name|overlaps
argument_list|(
name|assignment
operator|.
name|getTeachingRequest
argument_list|()
argument_list|,
name|context
argument_list|)
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
name|ta
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|assignment
operator|.
name|isExclusive
argument_list|()
condition|)
block|{
name|boolean
name|sameCommon
init|=
name|assignment
operator|.
name|isSameCommon
argument_list|()
decl_stmt|;
for|for
control|(
name|InstructorAssignment
name|ta
range|:
name|getAssignments
argument_list|(
name|assignment
operator|.
name|getAssigment
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|ta
operator|.
name|equals
argument_list|(
name|assignment
argument_list|)
operator|||
name|conflicts
operator|.
name|contains
argument_list|(
name|ta
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|ta
operator|.
name|sameCourse
argument_list|(
name|assignment
operator|.
name|getTeachingRequest
argument_list|()
argument_list|,
name|context
argument_list|)
operator|||
operator|(
name|sameCommon
operator|&&
operator|!
name|ta
operator|.
name|sameCommon
argument_list|(
name|assignment
operator|.
name|getTeachingRequest
argument_list|()
argument_list|,
name|context
argument_list|)
operator|)
condition|)
name|conflicts
operator|.
name|add
argument_list|(
name|ta
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|assignment
operator|.
name|isSameCommon
argument_list|()
condition|)
block|{
for|for
control|(
name|InstructorAssignment
name|ta
range|:
name|getAssignments
argument_list|(
name|assignment
operator|.
name|getAssigment
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|ta
operator|.
name|equals
argument_list|(
name|assignment
argument_list|)
operator|||
name|conflicts
operator|.
name|contains
argument_list|(
name|ta
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|ta
operator|.
name|sameCourse
argument_list|(
name|assignment
operator|.
name|getTeachingRequest
argument_list|()
argument_list|,
name|context
argument_list|)
operator|&&
operator|!
name|ta
operator|.
name|sameCommon
argument_list|(
name|assignment
operator|.
name|getTeachingRequest
argument_list|()
argument_list|,
name|context
argument_list|)
condition|)
name|conflicts
operator|.
name|add
argument_list|(
name|ta
argument_list|)
expr_stmt|;
block|}
block|}
name|float
name|load
init|=
name|assignment
operator|.
name|getLoad
argument_list|(
name|context
argument_list|)
decl_stmt|;
for|for
control|(
name|InstructorAssignment
name|conflict
range|:
name|conflicts
control|)
if|if
condition|(
name|assignment
operator|.
name|getAssigment
argument_list|()
operator|.
name|equals
argument_list|(
name|conflict
operator|.
name|getAssigment
argument_list|()
argument_list|)
condition|)
name|load
operator|-=
name|conflict
operator|.
name|getLoad
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|InstructorAssignment
argument_list|>
name|adepts
init|=
operator|new
name|ArrayList
argument_list|<
name|InstructorAssignment
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|InstructorAssignment
argument_list|>
name|priority
init|=
operator|new
name|ArrayList
argument_list|<
name|InstructorAssignment
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|InstructorAssignment
name|ta
range|:
name|getAssignments
argument_list|(
name|assignment
operator|.
name|getAssigment
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|ta
operator|.
name|equals
argument_list|(
name|assignment
argument_list|)
operator|||
name|conflicts
operator|.
name|contains
argument_list|(
name|ta
argument_list|)
condition|)
continue|continue;
name|adepts
operator|.
name|add
argument_list|(
name|ta
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iAssignments
operator|.
name|contains
argument_list|(
name|ta
argument_list|)
condition|)
name|priority
operator|.
name|add
argument_list|(
name|ta
argument_list|)
expr_stmt|;
name|load
operator|+=
name|ta
operator|.
name|getLoad
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|load
operator|>
name|assignment
operator|.
name|getAssigment
argument_list|()
operator|.
name|getMaxLoad
argument_list|()
condition|)
block|{
if|if
condition|(
name|adepts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|priority
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|InstructorAssignment
name|conflict
init|=
name|ToolBox
operator|.
name|random
argument_list|(
name|priority
argument_list|)
decl_stmt|;
name|load
operator|-=
name|conflict
operator|.
name|getLoad
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|priority
operator|.
name|remove
argument_list|(
name|conflict
argument_list|)
expr_stmt|;
name|adepts
operator|.
name|remove
argument_list|(
name|conflict
argument_list|)
expr_stmt|;
name|conflicts
operator|.
name|add
argument_list|(
name|conflict
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|InstructorAssignment
name|conflict
init|=
name|ToolBox
operator|.
name|random
argument_list|(
name|adepts
argument_list|)
decl_stmt|;
name|load
operator|-=
name|conflict
operator|.
name|getLoad
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|adepts
operator|.
name|remove
argument_list|(
name|conflict
argument_list|)
expr_stmt|;
name|conflicts
operator|.
name|add
argument_list|(
name|conflict
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|SuggestionInfo
name|toInfo
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
return|return
name|toInfo
argument_list|(
name|context
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|SuggestionInfo
name|toInfo
parameter_list|(
name|Context
name|context
parameter_list|,
name|InstructorAssignment
name|selected
parameter_list|)
block|{
if|if
condition|(
name|context
operator|.
name|getBase
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|InstructorAssignment
name|a
range|:
name|context
operator|.
name|getBase
argument_list|()
operator|.
name|iAssignments
control|)
if|if
condition|(
operator|!
name|iAssignments
operator|.
name|contains
argument_list|(
name|a
argument_list|)
operator|&&
name|a
operator|.
name|getAssigment
argument_list|()
operator|!=
literal|null
condition|)
name|iAssignments
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|SuggestionInfo
name|si
init|=
operator|new
name|SuggestionInfo
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|InstructorAssignment
argument_list|>
name|conflicts
init|=
operator|new
name|HashSet
argument_list|<
name|InstructorAssignment
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|selected
operator|!=
literal|null
operator|&&
operator|!
name|iAssignments
operator|.
name|contains
argument_list|(
name|selected
argument_list|)
condition|)
name|conflicts
operator|.
name|add
argument_list|(
name|selected
argument_list|)
expr_stmt|;
for|for
control|(
name|InstructorAssignment
name|a
range|:
name|iAssignments
control|)
block|{
name|computeConflicts
argument_list|(
name|a
argument_list|,
name|conflicts
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|InstructorAssignment
name|a
range|:
name|iAssignments
control|)
if|if
condition|(
operator|!
name|conflicts
operator|.
name|remove
argument_list|(
name|a
argument_list|)
condition|)
name|si
operator|.
name|addAssignment
argument_list|(
name|a
operator|.
name|toInfo
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|InstructorAssignment
name|c
range|:
name|conflicts
control|)
name|si
operator|.
name|addAssignment
argument_list|(
operator|new
name|InstructorAssignment
argument_list|(
name|c
operator|.
name|getTeachingRequest
argument_list|()
argument_list|,
name|c
operator|.
name|getIndex
argument_list|()
argument_list|,
literal|null
argument_list|)
operator|.
name|toInfo
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|AssignmentInfo
name|ai
range|:
name|si
operator|.
name|getAssignments
argument_list|()
control|)
block|{
if|if
condition|(
name|ai
operator|.
name|getInstructor
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|e
range|:
name|ai
operator|.
name|getInstructor
argument_list|()
operator|.
name|getValues
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
name|si
operator|.
name|addValue
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ai
operator|.
name|getRequest
argument_list|()
operator|.
name|getInstructor
argument_list|(
name|ai
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|e
range|:
name|ai
operator|.
name|getRequest
argument_list|()
operator|.
name|getInstructor
argument_list|(
name|ai
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|.
name|getValues
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
name|si
operator|.
name|addValue
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
operator|-
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|si
return|;
block|}
block|}
block|}
end_class

end_unit

