begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|instructor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|CommonValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|instructor
operator|.
name|InstructorAvailabilityWidget
operator|.
name|InstructorAvailabilityModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|instructor
operator|.
name|InstructorAvailabilityWidget
operator|.
name|InstructorAvailabilityRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomSharingOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|RequiredTimeTable
import|;
end_import

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|InstructorAvailabilityRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|InstructorAvailabilityBackend
implements|implements
name|GwtRpcImplementation
argument_list|<
name|InstructorAvailabilityRequest
argument_list|,
name|InstructorAvailabilityModel
argument_list|>
block|{
specifier|protected
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|InstructorAvailabilityModel
name|execute
parameter_list|(
name|InstructorAvailabilityRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|InstructorAvailabilityModel
name|model
init|=
operator|new
name|InstructorAvailabilityModel
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
literal|true
condition|;
name|i
operator|++
control|)
block|{
name|String
name|mode
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.room.sharingMode"
operator|+
operator|(
literal|1
operator|+
name|i
operator|)
argument_list|,
name|i
operator|<
name|CONSTANTS
operator|.
name|roomSharingModes
argument_list|()
operator|.
name|length
condition|?
name|CONSTANTS
operator|.
name|roomSharingModes
argument_list|()
index|[
name|i
index|]
else|:
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|mode
operator|==
literal|null
operator|||
name|mode
operator|.
name|isEmpty
argument_list|()
condition|)
break|break;
name|model
operator|.
name|addMode
argument_list|(
operator|new
name|RoomInterface
operator|.
name|RoomSharingDisplayMode
argument_list|(
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|model
operator|.
name|setDefaultEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|PreferenceLevel
name|pref
range|:
name|PreferenceLevel
operator|.
name|getPreferenceLevelList
argument_list|()
control|)
block|{
if|if
condition|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
continue|continue;
name|RoomSharingOption
name|option
init|=
operator|new
name|RoomSharingOption
argument_list|(
name|model
operator|.
name|char2id
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2char
argument_list|(
name|pref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|pref
operator|.
name|prefcolor
argument_list|()
argument_list|,
literal|""
argument_list|,
name|pref
operator|.
name|getPrefName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|model
operator|.
name|addOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
name|model
operator|.
name|setDefaultOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
name|String
name|defaultGridSize
init|=
name|RequiredTimeTable
operator|.
name|getTimeGridSize
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultGridSize
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|model
operator|.
name|getModes
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|model
operator|.
name|getModes
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|defaultGridSize
argument_list|)
condition|)
block|{
name|model
operator|.
name|setDefaultMode
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|model
operator|.
name|setDefaultHorizontal
argument_list|(
name|CommonValues
operator|.
name|HorizontalGrid
operator|.
name|eq
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
name|UserProperty
operator|.
name|GridOrientation
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setNoteEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getInstructorId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
name|DepartmentalInstructorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getInstructorId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Preference
name|pref
range|:
name|instructor
operator|.
name|getPreferences
argument_list|()
control|)
block|{
if|if
condition|(
name|pref
operator|instanceof
name|TimePref
condition|)
block|{
name|model
operator|.
name|setPattern
argument_list|(
operator|(
operator|(
name|TimePref
operator|)
name|pref
operator|)
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|model
return|;
block|}
block|}
end_class

end_unit

