begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|instructor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|CommonValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|AttributeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|AttributeTypeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|DepartmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|PositionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|PreferenceInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|UpdateInstructorAttributeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorAttributePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructorAttributeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructorAttributeTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|NameFormat
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|UpdateInstructorAttributeRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|UpdateInstructorAttributeBackend
implements|implements
name|GwtRpcImplementation
argument_list|<
name|UpdateInstructorAttributeRequest
argument_list|,
name|AttributeInterface
argument_list|>
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|AttributeInterface
name|execute
parameter_list|(
name|UpdateInstructorAttributeRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
name|AttributeInterface
name|a
init|=
literal|null
decl_stmt|;
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|InstructorAttributeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|InstructorAttribute
name|attribute
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasAttribute
argument_list|()
condition|)
block|{
name|attribute
operator|=
name|createOrUpdateAttribute
argument_list|(
name|request
operator|.
name|getAttribute
argument_list|()
argument_list|,
name|request
operator|.
name|getAddInstructors
argument_list|()
argument_list|,
name|request
operator|.
name|getDropInstructors
argument_list|()
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|,
name|hibSession
argument_list|,
name|context
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|request
operator|.
name|getDeleteAttributeId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|dropAttribute
argument_list|(
name|request
operator|.
name|getDeleteAttributeId
argument_list|()
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|,
name|hibSession
argument_list|,
name|context
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|GwtRpcException
argument_list|(
literal|"Bad request."
argument_list|)
throw|;
block|}
if|if
condition|(
name|attribute
operator|!=
literal|null
condition|)
block|{
name|a
operator|=
operator|new
name|AttributeInterface
argument_list|()
expr_stmt|;
name|a
operator|.
name|setId
argument_list|(
name|attribute
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setParentId
argument_list|(
name|attribute
operator|.
name|getParentAttribute
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|attribute
operator|.
name|getParentAttribute
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setParentName
argument_list|(
name|attribute
operator|.
name|getParentAttribute
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|attribute
operator|.
name|getParentAttribute
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setCode
argument_list|(
name|attribute
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setName
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setCanDelete
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|attribute
argument_list|,
name|Right
operator|.
name|InstructorAttributeDelete
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setCanEdit
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|attribute
argument_list|,
name|Right
operator|.
name|InstructorAttributeEdit
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setCanAssign
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|attribute
argument_list|,
name|Right
operator|.
name|InstructorAttributeAssign
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setCanChangeType
argument_list|(
name|attribute
operator|.
name|getChildAttributes
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|attribute
operator|.
name|getType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|AttributeTypeInterface
name|t
init|=
operator|new
name|AttributeTypeInterface
argument_list|()
decl_stmt|;
name|t
operator|.
name|setId
argument_list|(
name|attribute
operator|.
name|getType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setAbbreviation
argument_list|(
name|attribute
operator|.
name|getType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setLabel
argument_list|(
name|attribute
operator|.
name|getType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setConjunctive
argument_list|(
name|attribute
operator|.
name|getType
argument_list|()
operator|.
name|isConjunctive
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setRequired
argument_list|(
name|attribute
operator|.
name|getType
argument_list|()
operator|.
name|isRequired
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setType
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attribute
operator|.
name|getDepartment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|DepartmentInterface
name|d
init|=
operator|new
name|DepartmentInterface
argument_list|()
decl_stmt|;
name|d
operator|.
name|setId
argument_list|(
name|attribute
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setAbbreviation
argument_list|(
name|attribute
operator|.
name|getDepartment
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setDeptCode
argument_list|(
name|attribute
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setLabel
argument_list|(
name|attribute
operator|.
name|getDepartment
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setTitle
argument_list|(
name|attribute
operator|.
name|getDepartment
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setDepartment
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|NameFormat
name|instructorNameFormat
init|=
name|NameFormat
operator|.
name|fromReference
argument_list|(
name|UserProperty
operator|.
name|NameFormat
operator|.
name|get
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|sortByLastName
init|=
name|CommonValues
operator|.
name|SortByLastName
operator|.
name|eq
argument_list|(
name|UserProperty
operator|.
name|SortNames
operator|.
name|get
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|DepartmentalInstructor
name|instructor
range|:
name|attribute
operator|.
name|getInstructors
argument_list|()
control|)
block|{
name|InstructorInterface
name|i
init|=
operator|new
name|InstructorInterface
argument_list|()
decl_stmt|;
name|i
operator|.
name|setId
argument_list|(
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|setFirstName
argument_list|(
name|instructor
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|setMiddleName
argument_list|(
name|instructor
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|setLastName
argument_list|(
name|instructor
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|setFormattedName
argument_list|(
name|instructorNameFormat
operator|.
name|format
argument_list|(
name|instructor
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sortByLastName
condition|)
name|i
operator|.
name|setOrderName
argument_list|(
name|instructor
operator|.
name|nameLastNameFirst
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|setExternalId
argument_list|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getPositionType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|PositionInterface
name|p
init|=
operator|new
name|PositionInterface
argument_list|()
decl_stmt|;
name|p
operator|.
name|setId
argument_list|(
name|instructor
operator|.
name|getPositionType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setAbbreviation
argument_list|(
name|instructor
operator|.
name|getPositionType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setLabel
argument_list|(
name|instructor
operator|.
name|getPositionType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setSortOrder
argument_list|(
name|instructor
operator|.
name|getPositionType
argument_list|()
operator|.
name|getSortOrder
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|setPosition
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|PreferenceLevel
name|pref
init|=
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
decl_stmt|;
if|if
condition|(
name|pref
operator|==
literal|null
condition|)
name|pref
operator|=
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
name|i
operator|.
name|setTeachingPreference
argument_list|(
operator|new
name|PreferenceInterface
argument_list|(
name|pref
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|prolog2bgColor
argument_list|(
name|pref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
argument_list|,
name|pref
operator|.
name|getPrefProlog
argument_list|()
argument_list|,
name|pref
operator|.
name|getPrefName
argument_list|()
argument_list|,
name|pref
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|.
name|setMaxLoad
argument_list|(
name|instructor
operator|.
name|getMaxLoad
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|addInstructor
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
name|a
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|GwtRpcException
condition|)
throw|throw
operator|(
name|GwtRpcException
operator|)
name|e
throw|;
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|Department
name|lookuDepartment
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|DepartmentInterface
name|original
parameter_list|,
name|boolean
name|future
parameter_list|,
name|Long
name|sessionId
parameter_list|)
block|{
if|if
condition|(
name|original
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|future
condition|)
block|{
return|return
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|original
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|sessionId
argument_list|,
name|hibSession
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|original
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
return|;
block|}
block|}
specifier|protected
name|InstructorAttribute
name|lookupAttribute
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|AttributeInterface
name|original
parameter_list|,
name|boolean
name|future
parameter_list|,
name|Long
name|sessionId
parameter_list|)
block|{
if|if
condition|(
name|original
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|future
condition|)
block|{
if|if
condition|(
name|original
operator|.
name|isDepartmental
argument_list|()
condition|)
return|return
operator|(
name|InstructorAttribute
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select f from InstructorAttribute f, InstructorAttribute o where o.uniqueId = :originalId and f.department.session.uniqueId = :sessionId "
operator|+
literal|"and f.code = o.code and f.department.deptCode = o.department.deptCode"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"originalId"
argument_list|,
name|original
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
else|else
return|return
operator|(
name|InstructorAttribute
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select f from InstructorAttribute f, InstructorAttribute o where o.uniqueId = :originalId and f.session.uniqueId = :sessionId "
operator|+
literal|"and f.code = o.code and f.department is null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"originalId"
argument_list|,
name|original
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|InstructorAttributeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|original
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
return|;
block|}
block|}
specifier|protected
name|InstructorAttribute
name|lookupAttribute
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Long
name|attributeId
parameter_list|,
name|boolean
name|future
parameter_list|,
name|Long
name|sessionId
parameter_list|)
block|{
if|if
condition|(
name|attributeId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|future
condition|)
block|{
name|InstructorAttribute
name|attribute
init|=
operator|(
name|InstructorAttribute
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select f from InstructorAttribute f, InstructorAttribute o where o.uniqueId = :originalId and f.department.session.uniqueId = :sessionId "
operator|+
literal|"and f.code = o.code and f.department.deptCode = o.department.deptCode"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"originalId"
argument_list|,
name|attributeId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|attribute
operator|==
literal|null
condition|)
name|attribute
operator|=
operator|(
name|InstructorAttribute
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select f from InstructorAttribute f, InstructorAttribute o where o.uniqueId = :originalId and f.session.uniqueId = :sessionId "
operator|+
literal|"and f.code = o.code and f.department is null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"originalId"
argument_list|,
name|attributeId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
expr_stmt|;
return|return
name|attribute
return|;
block|}
else|else
block|{
return|return
name|InstructorAttributeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|attributeId
argument_list|,
name|hibSession
argument_list|)
return|;
block|}
block|}
specifier|protected
name|Collection
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|lookupInstructors
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|ids
parameter_list|,
name|boolean
name|future
parameter_list|,
name|Long
name|sessionId
parameter_list|)
block|{
if|if
condition|(
name|ids
operator|==
literal|null
operator|||
name|ids
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|new
name|ArrayList
argument_list|<
name|DepartmentalInstructor
argument_list|>
argument_list|()
return|;
if|if
condition|(
name|future
condition|)
block|{
return|return
operator|(
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select f from DepartmentalInstructor f, DepartmentalInstructor o where o.uniqueId in :ids and "
operator|+
literal|"o.externalUniqueId is not null and f.externalUniqueId = o.externalUniqueId and "
operator|+
literal|"f.department.deptCode = o.department.deptCode and f.department.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setParameterList
argument_list|(
literal|"ids"
argument_list|,
name|ids
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|(
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from DepartmentalInstructor where uniqueId in :ids"
argument_list|)
operator|.
name|setParameterList
argument_list|(
literal|"ids"
argument_list|,
name|ids
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
block|}
specifier|protected
name|InstructorAttribute
name|createOrUpdateAttribute
parameter_list|(
name|AttributeInterface
name|attribute
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|add
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|drop
parameter_list|,
name|Long
name|sessionId
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|boolean
name|future
parameter_list|)
block|{
name|Department
name|d
init|=
name|attribute
operator|.
name|isDepartmental
argument_list|()
condition|?
name|lookuDepartment
argument_list|(
name|hibSession
argument_list|,
name|attribute
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|future
argument_list|,
name|sessionId
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|attribute
operator|.
name|isDepartmental
argument_list|()
operator|&&
name|d
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|InstructorAttribute
name|ia
init|=
operator|(
name|attribute
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|lookupAttribute
argument_list|(
name|hibSession
argument_list|,
name|attribute
argument_list|,
name|future
argument_list|,
name|sessionId
argument_list|)
operator|)
decl_stmt|;
name|boolean
name|edit
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|ia
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|future
operator|&&
name|attribute
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|errorInstructorAttributeDoesNotExist
argument_list|(
name|attribute
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
throw|;
if|if
condition|(
name|d
operator|==
literal|null
condition|)
block|{
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|InstructorGlobalAttributeEdit
argument_list|)
expr_stmt|;
name|ia
operator|=
operator|new
name|InstructorAttribute
argument_list|()
expr_stmt|;
name|ia
operator|.
name|setSession
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|checkPermission
argument_list|(
name|d
argument_list|,
name|Right
operator|.
name|InstructorAttributeAdd
argument_list|)
expr_stmt|;
name|ia
operator|=
operator|new
name|InstructorAttribute
argument_list|()
expr_stmt|;
name|ia
operator|.
name|setDepartment
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|ia
operator|.
name|setSession
argument_list|(
name|d
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ia
operator|.
name|setInstructors
argument_list|(
operator|new
name|HashSet
argument_list|<
name|DepartmentalInstructor
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|ia
operator|.
name|setChildAttributes
argument_list|(
operator|new
name|HashSet
argument_list|<
name|InstructorAttribute
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|checkPermission
argument_list|(
name|ia
argument_list|,
name|Right
operator|.
name|InstructorAttributeAssign
argument_list|)
expr_stmt|;
name|edit
operator|=
name|context
operator|.
name|hasPermission
argument_list|(
name|ia
argument_list|,
name|Right
operator|.
name|InstructorAttributeEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|edit
operator|&&
name|d
operator|==
literal|null
condition|)
name|edit
operator|=
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|InstructorGlobalAttributeEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|edit
operator|&&
name|d
operator|!=
literal|null
condition|)
name|ia
operator|.
name|setDepartment
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|InstructorAttribute
operator|.
name|getAllGlobalAttributes
argument_list|(
name|sessionId
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructorAttribute
name|x
init|=
operator|(
name|InstructorAttribute
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|x
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|x
operator|.
name|getCode
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|attribute
operator|.
name|getCode
argument_list|()
argument_list|)
operator|)
operator|&&
operator|!
name|x
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|ia
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|errorInstructorAttributeAlreadyExists
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|ia
operator|.
name|getDepartment
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|InstructorAttribute
operator|.
name|getAllDepartmentalAttributes
argument_list|(
name|d
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructorAttribute
name|x
init|=
operator|(
name|InstructorAttribute
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|x
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|x
operator|.
name|getCode
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|attribute
operator|.
name|getCode
argument_list|()
argument_list|)
operator|)
operator|&&
operator|!
name|x
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|ia
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|errorInstructorAttributeAlreadyExists
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|edit
condition|)
block|{
name|ia
operator|.
name|setCode
argument_list|(
name|attribute
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|ia
operator|.
name|setName
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ia
operator|.
name|setType
argument_list|(
name|attribute
operator|.
name|getType
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|InstructorAttributeTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|attribute
operator|.
name|getType
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ia
operator|.
name|getParentAttribute
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|ia
operator|.
name|getParentAttribute
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|attribute
operator|.
name|getParentId
argument_list|()
argument_list|)
condition|)
block|{
name|ia
operator|.
name|getParentAttribute
argument_list|()
operator|.
name|getChildAttributes
argument_list|()
operator|.
name|remove
argument_list|(
name|ia
argument_list|)
expr_stmt|;
block|}
name|ia
operator|.
name|setParentAttribute
argument_list|(
name|attribute
operator|.
name|getParentId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|InstructorAttributeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|attribute
operator|.
name|getParentId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ia
operator|.
name|getParentAttribute
argument_list|()
operator|!=
literal|null
condition|)
name|ia
operator|.
name|getParentAttribute
argument_list|()
operator|.
name|getChildAttributes
argument_list|()
operator|.
name|add
argument_list|(
name|ia
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|ia
argument_list|)
expr_stmt|;
if|if
condition|(
name|add
operator|!=
literal|null
operator|&&
operator|!
name|add
operator|.
name|isEmpty
argument_list|()
condition|)
for|for
control|(
name|DepartmentalInstructor
name|instructor
range|:
name|lookupInstructors
argument_list|(
name|hibSession
argument_list|,
name|add
argument_list|,
name|future
argument_list|,
name|sessionId
argument_list|)
control|)
block|{
name|instructor
operator|.
name|getAttributes
argument_list|()
operator|.
name|add
argument_list|(
name|ia
argument_list|)
expr_stmt|;
name|ia
operator|.
name|getInstructors
argument_list|()
operator|.
name|add
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|drop
operator|!=
literal|null
operator|&&
operator|!
name|drop
operator|.
name|isEmpty
argument_list|()
condition|)
for|for
control|(
name|DepartmentalInstructor
name|instructor
range|:
name|lookupInstructors
argument_list|(
name|hibSession
argument_list|,
name|drop
argument_list|,
name|future
argument_list|,
name|sessionId
argument_list|)
control|)
block|{
name|instructor
operator|.
name|getAttributes
argument_list|()
operator|.
name|remove
argument_list|(
name|ia
argument_list|)
expr_stmt|;
name|ia
operator|.
name|getInstructors
argument_list|()
operator|.
name|remove
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|ia
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
name|ia
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|INSTRUCTOR_ATTRIBUTE_EDIT
argument_list|,
operator|(
name|attribute
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|?
name|ChangeLog
operator|.
name|Operation
operator|.
name|CREATE
else|:
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
operator|)
argument_list|,
literal|null
argument_list|,
name|ia
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ia
return|;
block|}
specifier|protected
name|boolean
name|dropAttribute
parameter_list|(
name|Long
name|attributeId
parameter_list|,
name|Long
name|sessionId
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|boolean
name|future
parameter_list|)
block|{
name|InstructorAttribute
name|ia
init|=
name|lookupAttribute
argument_list|(
name|hibSession
argument_list|,
name|attributeId
argument_list|,
name|future
argument_list|,
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ia
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|future
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|errorInstructorAttributeDoesNotExist
argument_list|(
name|attributeId
argument_list|)
argument_list|)
throw|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|ia
operator|.
name|getDepartment
argument_list|()
operator|==
literal|null
condition|)
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|InstructorGlobalAttributeEdit
argument_list|)
expr_stmt|;
name|context
operator|.
name|checkPermission
argument_list|(
name|ia
argument_list|,
name|Right
operator|.
name|InstructorAttributeDelete
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
name|ia
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|INSTRUCTOR_ATTRIBUTE_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
name|ia
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DepartmentalInstructor
name|instructor
range|:
name|ia
operator|.
name|getInstructors
argument_list|()
control|)
block|{
name|instructor
operator|.
name|getAttributes
argument_list|()
operator|.
name|remove
argument_list|(
name|ia
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ia
operator|.
name|getParentAttribute
argument_list|()
operator|!=
literal|null
condition|)
name|ia
operator|.
name|getParentAttribute
argument_list|()
operator|.
name|getChildAttributes
argument_list|()
operator|.
name|remove
argument_list|(
name|ia
argument_list|)
expr_stmt|;
for|for
control|(
name|InstructorAttribute
name|ch
range|:
name|ia
operator|.
name|getChildAttributes
argument_list|()
control|)
block|{
name|ch
operator|.
name|setParentAttribute
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|InstructorAttributePref
name|p
range|:
operator|(
name|List
argument_list|<
name|InstructorAttributePref
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from InstructorAttributePref p where p.attribute.uniqueId = :id"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"id"
argument_list|,
name|ia
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|p
operator|.
name|getOwner
argument_list|()
operator|.
name|getPreferences
argument_list|()
operator|.
name|remove
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|p
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|delete
argument_list|(
name|ia
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

