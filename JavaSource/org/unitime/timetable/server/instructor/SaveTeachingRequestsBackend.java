begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|instructor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TeachingRequestInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TeachingRequestInterface
operator|.
name|IncludeLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TeachingRequestInterface
operator|.
name|MultiRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TeachingRequestInterface
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TeachingRequestInterface
operator|.
name|RequestedClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TeachingRequestInterface
operator|.
name|SaveRequestsRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TeachingRequestInterface
operator|.
name|SingleRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalCourseOfferingEditAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalInstrOfferingConfigAssignInstructorsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorAttributePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|OfferingCoordinator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TeachingClassRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TeachingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructorAttributeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|PreferenceLevelDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SchedulingSubpartDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TeachingResponsibilityDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|SaveRequestsRpcRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|SaveTeachingRequestsBackend
implements|implements
name|GwtRpcImplementation
argument_list|<
name|SaveRequestsRpcRequest
argument_list|,
name|GwtRpcResponseNull
argument_list|>
block|{
specifier|protected
specifier|static
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|GwtRpcResponseNull
name|execute
parameter_list|(
name|SaveRequestsRpcRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|InstructionalOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|InstructionalOffering
name|offering
init|=
name|InstructionalOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getOfferingId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|errorOfferingDoesNotExist
argument_list|(
name|request
operator|.
name|getOfferingId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
name|boolean
name|commit
init|=
name|Department
operator|.
name|isInstructorSchedulingCommitted
argument_list|(
name|offering
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|checkPermission
argument_list|(
name|offering
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|Right
operator|.
name|InstructorAssignmentPreferences
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|InstrOfferingConfig
argument_list|>
name|updateConfigs
init|=
operator|new
name|HashSet
argument_list|<
name|InstrOfferingConfig
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|updateOffering
init|=
literal|false
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|updatedClassIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|TeachingRequest
argument_list|>
name|requests
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|TeachingRequest
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TeachingRequest
name|r
range|:
name|offering
operator|.
name|getTeachingRequests
argument_list|()
control|)
name|requests
operator|.
name|put
argument_list|(
name|r
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|request
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|SingleRequest
condition|)
block|{
name|SingleRequest
name|single
init|=
operator|(
name|SingleRequest
operator|)
name|r
decl_stmt|;
name|TeachingRequest
name|tr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|single
operator|.
name|getRequestId
argument_list|()
operator|!=
literal|null
condition|)
name|tr
operator|=
name|requests
operator|.
name|remove
argument_list|(
name|single
operator|.
name|getRequestId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tr
operator|==
literal|null
condition|)
block|{
name|tr
operator|=
operator|new
name|TeachingRequest
argument_list|()
expr_stmt|;
name|tr
operator|.
name|setOffering
argument_list|(
name|offering
argument_list|)
expr_stmt|;
name|offering
operator|.
name|getTeachingRequests
argument_list|()
operator|.
name|add
argument_list|(
name|tr
argument_list|)
expr_stmt|;
name|tr
operator|.
name|setClassRequests
argument_list|(
operator|new
name|HashSet
argument_list|<
name|TeachingClassRequest
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|tr
operator|.
name|setPreferences
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Preference
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Preference
argument_list|>
name|i
init|=
name|tr
operator|.
name|getPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|p
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|tr
operator|.
name|setNbrInstructors
argument_list|(
name|single
operator|.
name|getNbrInstructors
argument_list|()
argument_list|)
expr_stmt|;
name|fillRequestInfo
argument_list|(
name|r
argument_list|,
name|tr
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TeachingClassRequest
argument_list|>
name|remains
init|=
operator|new
name|ArrayList
argument_list|<
name|TeachingClassRequest
argument_list|>
argument_list|(
name|tr
operator|.
name|getClassRequests
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|IncludeLine
name|line
range|:
name|single
operator|.
name|getClasses
argument_list|()
control|)
block|{
name|TeachingClassRequest
name|cr
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|TeachingClassRequest
argument_list|>
name|i
init|=
name|remains
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TeachingClassRequest
name|adept
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|adept
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|line
operator|.
name|getOwnerId
argument_list|()
argument_list|)
condition|)
block|{
name|cr
operator|=
name|adept
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|cr
operator|==
literal|null
condition|)
block|{
name|cr
operator|=
operator|new
name|TeachingClassRequest
argument_list|()
expr_stmt|;
name|cr
operator|.
name|setTeachingClass
argument_list|(
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|line
operator|.
name|getOwnerId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|getTeachingClass
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|cr
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getTeachingRequests
argument_list|()
operator|.
name|add
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setTeachingRequest
argument_list|(
name|tr
argument_list|)
expr_stmt|;
name|tr
operator|.
name|getClassRequests
argument_list|()
operator|.
name|add
argument_list|(
name|cr
argument_list|)
expr_stmt|;
block|}
name|cr
operator|.
name|setAssignInstructor
argument_list|(
name|line
operator|.
name|isAssign
argument_list|()
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setCommon
argument_list|(
name|line
operator|.
name|isCommon
argument_list|()
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setCanOverlap
argument_list|(
name|line
operator|.
name|isCanOverlap
argument_list|()
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setLead
argument_list|(
name|line
operator|.
name|isLead
argument_list|()
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setPercentShare
argument_list|(
name|line
operator|.
name|getShare
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TeachingClassRequest
name|cr
range|:
name|remains
control|)
block|{
name|cr
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getTeachingRequests
argument_list|()
operator|.
name|remove
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|tr
operator|.
name|getClassRequests
argument_list|()
operator|.
name|remove
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|cr
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|tr
argument_list|)
expr_stmt|;
for|for
control|(
name|TeachingClassRequest
name|tcr
range|:
name|tr
operator|.
name|getClassRequests
argument_list|()
control|)
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|tcr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MultiRequest
name|multi
init|=
operator|(
name|MultiRequest
operator|)
name|r
decl_stmt|;
for|for
control|(
name|RequestedClass
name|rc
range|:
name|multi
operator|.
name|getClasses
argument_list|()
control|)
block|{
name|Class_
name|clazz
init|=
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|rc
operator|.
name|getClassId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
continue|continue;
name|TeachingRequest
name|tr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rc
operator|.
name|getRequestId
argument_list|()
operator|!=
literal|null
condition|)
name|tr
operator|=
name|requests
operator|.
name|remove
argument_list|(
name|rc
operator|.
name|getRequestId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tr
operator|==
literal|null
condition|)
block|{
name|tr
operator|=
operator|new
name|TeachingRequest
argument_list|()
expr_stmt|;
name|tr
operator|.
name|setOffering
argument_list|(
name|offering
argument_list|)
expr_stmt|;
name|offering
operator|.
name|getTeachingRequests
argument_list|()
operator|.
name|add
argument_list|(
name|tr
argument_list|)
expr_stmt|;
name|tr
operator|.
name|setClassRequests
argument_list|(
operator|new
name|HashSet
argument_list|<
name|TeachingClassRequest
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|tr
operator|.
name|setPreferences
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Preference
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Preference
argument_list|>
name|i
init|=
name|tr
operator|.
name|getPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|p
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|tr
operator|.
name|setNbrInstructors
argument_list|(
name|rc
operator|.
name|getNbrInstructors
argument_list|()
argument_list|)
expr_stmt|;
name|fillRequestInfo
argument_list|(
name|r
argument_list|,
name|tr
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
name|tr
operator|.
name|setAssignCoordinator
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|tr
operator|.
name|setPercentShare
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TeachingClassRequest
argument_list|>
name|remains
init|=
operator|new
name|ArrayList
argument_list|<
name|TeachingClassRequest
argument_list|>
argument_list|(
name|tr
operator|.
name|getClassRequests
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|IncludeLine
name|line
range|:
name|multi
operator|.
name|getSubparts
argument_list|()
control|)
block|{
for|for
control|(
name|Class_
name|c
range|:
name|getClasses
argument_list|(
name|clazz
argument_list|,
name|line
operator|.
name|getOwnerId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
control|)
block|{
name|TeachingClassRequest
name|cr
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|TeachingClassRequest
argument_list|>
name|i
init|=
name|remains
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TeachingClassRequest
name|adept
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|equals
argument_list|(
name|adept
operator|.
name|getTeachingClass
argument_list|()
argument_list|)
condition|)
block|{
name|cr
operator|=
name|adept
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|cr
operator|==
literal|null
condition|)
block|{
name|cr
operator|=
operator|new
name|TeachingClassRequest
argument_list|()
expr_stmt|;
name|cr
operator|.
name|setTeachingClass
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|getTeachingClass
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|cr
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getTeachingRequests
argument_list|()
operator|.
name|add
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setTeachingRequest
argument_list|(
name|tr
argument_list|)
expr_stmt|;
name|tr
operator|.
name|getClassRequests
argument_list|()
operator|.
name|add
argument_list|(
name|cr
argument_list|)
expr_stmt|;
block|}
name|cr
operator|.
name|setAssignInstructor
argument_list|(
name|line
operator|.
name|isAssign
argument_list|()
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setCommon
argument_list|(
name|line
operator|.
name|isCommon
argument_list|()
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setCanOverlap
argument_list|(
name|line
operator|.
name|isCanOverlap
argument_list|()
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setLead
argument_list|(
name|line
operator|.
name|isLead
argument_list|()
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setPercentShare
argument_list|(
name|line
operator|.
name|getShare
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|TeachingClassRequest
name|cr
range|:
name|remains
control|)
block|{
name|cr
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getTeachingRequests
argument_list|()
operator|.
name|remove
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|tr
operator|.
name|getClassRequests
argument_list|()
operator|.
name|remove
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|cr
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|tr
argument_list|)
expr_stmt|;
for|for
control|(
name|TeachingClassRequest
name|tcr
range|:
name|tr
operator|.
name|getClassRequests
argument_list|()
control|)
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|tcr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Set
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|updatedInstructors
init|=
operator|new
name|HashSet
argument_list|<
name|DepartmentalInstructor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TeachingRequest
name|tr
range|:
name|requests
operator|.
name|values
argument_list|()
control|)
block|{
name|tr
operator|.
name|getOffering
argument_list|()
operator|.
name|getTeachingRequests
argument_list|()
operator|.
name|remove
argument_list|(
name|tr
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|TeachingClassRequest
argument_list|>
name|i
init|=
name|tr
operator|.
name|getClassRequests
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TeachingClassRequest
name|cr
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ClassInstructor
argument_list|>
name|j
init|=
name|cr
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|tr
operator|.
name|equals
argument_list|(
name|ci
operator|.
name|getTeachingRequest
argument_list|()
argument_list|)
condition|)
block|{
name|Debug
operator|.
name|info
argument_list|(
name|cr
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getClassLabel
argument_list|(
name|hibSession
argument_list|)
operator|+
literal|": UNASSIGN "
operator|+
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getNameLastFirst
argument_list|()
argument_list|)
expr_stmt|;
name|updatedInstructors
operator|.
name|add
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getClasses
argument_list|()
operator|.
name|remove
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
name|updateConfigs
operator|.
name|add
argument_list|(
name|cr
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
argument_list|)
expr_stmt|;
name|updatedClassIds
operator|.
name|add
argument_list|(
name|cr
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|cr
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getTeachingRequests
argument_list|()
operator|.
name|remove
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|cr
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Preference
argument_list|>
name|i
init|=
name|tr
operator|.
name|getPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|p
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|OfferingCoordinator
argument_list|>
name|i
init|=
name|tr
operator|.
name|getOffering
argument_list|()
operator|.
name|getOfferingCoordinators
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|OfferingCoordinator
name|oc
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|tr
operator|.
name|equals
argument_list|(
name|oc
operator|.
name|getTeachingRequest
argument_list|()
argument_list|)
condition|)
block|{
name|Debug
operator|.
name|info
argument_list|(
name|tr
operator|.
name|getOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
literal|": UNASSIGN "
operator|+
name|oc
operator|.
name|getInstructor
argument_list|()
operator|.
name|getNameLastFirst
argument_list|()
argument_list|)
expr_stmt|;
name|updatedInstructors
operator|.
name|add
argument_list|(
name|oc
operator|.
name|getInstructor
argument_list|()
argument_list|)
expr_stmt|;
name|oc
operator|.
name|getInstructor
argument_list|()
operator|.
name|getOfferingCoordinators
argument_list|()
operator|.
name|remove
argument_list|(
name|oc
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|oc
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|updateOffering
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|delete
argument_list|(
name|tr
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|OfferingCoordinator
argument_list|>
name|i
init|=
name|offering
operator|.
name|getOfferingCoordinators
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|OfferingCoordinator
name|oc
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|oc
operator|.
name|getTeachingRequest
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|oc
operator|.
name|getTeachingRequest
argument_list|()
operator|.
name|isAssignCoordinator
argument_list|()
condition|)
block|{
name|Debug
operator|.
name|info
argument_list|(
name|offering
operator|.
name|getCourseName
argument_list|()
operator|+
literal|": UNASSIGN "
operator|+
name|oc
operator|.
name|getInstructor
argument_list|()
operator|.
name|getNameLastFirst
argument_list|()
argument_list|)
expr_stmt|;
name|updatedInstructors
operator|.
name|add
argument_list|(
name|oc
operator|.
name|getInstructor
argument_list|()
argument_list|)
expr_stmt|;
name|oc
operator|.
name|getInstructor
argument_list|()
operator|.
name|getOfferingCoordinators
argument_list|()
operator|.
name|remove
argument_list|(
name|oc
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|oc
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|updateOffering
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|offering
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
for|for
control|(
name|Class_
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
for|for
control|(
name|Iterator
argument_list|<
name|ClassInstructor
argument_list|>
name|i
init|=
name|clazz
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ci
operator|.
name|getTeachingRequest
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|TeachingClassRequest
name|support
init|=
literal|null
decl_stmt|;
for|for
control|(
name|TeachingClassRequest
name|tcr
range|:
name|ci
operator|.
name|getTeachingRequest
argument_list|()
operator|.
name|getClassRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|tcr
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|equals
argument_list|(
name|clazz
argument_list|)
operator|&&
name|tcr
operator|.
name|isAssignInstructor
argument_list|()
condition|)
block|{
name|support
operator|=
name|tcr
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|support
operator|==
literal|null
condition|)
block|{
name|Debug
operator|.
name|info
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|hibSession
argument_list|)
operator|+
literal|": UNASSIGN "
operator|+
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getNameLastFirst
argument_list|()
argument_list|)
expr_stmt|;
name|updatedInstructors
operator|.
name|add
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getClasses
argument_list|()
operator|.
name|remove
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|updateConfigs
operator|.
name|add
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|updatedClassIds
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|ci
operator|.
name|getPercentShare
argument_list|()
operator|.
name|equals
argument_list|(
name|support
operator|.
name|getPercentShare
argument_list|()
argument_list|)
operator|||
operator|!
name|ci
operator|.
name|isLead
argument_list|()
operator|.
name|equals
argument_list|(
name|support
operator|.
name|getLead
argument_list|()
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|ci
operator|.
name|getResponsibility
argument_list|()
argument_list|,
name|support
operator|.
name|getTeachingRequest
argument_list|()
operator|.
name|getResponsibility
argument_list|()
argument_list|)
condition|)
block|{
name|Debug
operator|.
name|info
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|hibSession
argument_list|)
operator|+
literal|": UPDATE "
operator|+
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getNameLastFirst
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setPercentShare
argument_list|(
name|support
operator|.
name|getPercentShare
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setLead
argument_list|(
name|support
operator|.
name|getLead
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setResponsibility
argument_list|(
name|support
operator|.
name|getTeachingRequest
argument_list|()
operator|.
name|getResponsibility
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|updateConfigs
operator|.
name|add
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|updatedClassIds
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|commit
condition|)
block|{
for|for
control|(
name|TeachingRequest
name|tr
range|:
name|offering
operator|.
name|getTeachingRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|tr
operator|.
name|getAssignedInstructors
argument_list|()
operator|==
literal|null
operator|||
name|tr
operator|.
name|getAssignedInstructors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|tr
operator|.
name|isAssignCoordinator
argument_list|()
condition|)
block|{
for|for
control|(
name|DepartmentalInstructor
name|instructor
range|:
name|tr
operator|.
name|getAssignedInstructors
argument_list|()
control|)
block|{
name|OfferingCoordinator
name|support
init|=
literal|null
decl_stmt|;
for|for
control|(
name|OfferingCoordinator
name|oc
range|:
name|offering
operator|.
name|getOfferingCoordinators
argument_list|()
control|)
block|{
if|if
condition|(
name|instructor
operator|.
name|equals
argument_list|(
name|oc
operator|.
name|getInstructor
argument_list|()
argument_list|)
operator|&&
name|tr
operator|.
name|equals
argument_list|(
name|oc
operator|.
name|getTeachingRequest
argument_list|()
argument_list|)
condition|)
block|{
name|support
operator|=
name|oc
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|support
operator|==
literal|null
condition|)
block|{
name|Debug
operator|.
name|info
argument_list|(
name|offering
operator|.
name|getCourseName
argument_list|()
operator|+
literal|": ASSIGN "
operator|+
name|instructor
operator|.
name|getNameLastFirst
argument_list|()
argument_list|)
expr_stmt|;
name|OfferingCoordinator
name|oc
init|=
operator|new
name|OfferingCoordinator
argument_list|()
decl_stmt|;
name|oc
operator|.
name|setInstructor
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|oc
operator|.
name|setOffering
argument_list|(
name|offering
argument_list|)
expr_stmt|;
name|oc
operator|.
name|setResponsibility
argument_list|(
name|tr
operator|.
name|getResponsibility
argument_list|()
argument_list|)
expr_stmt|;
name|oc
operator|.
name|setPercentShare
argument_list|(
name|tr
operator|.
name|getPercentShare
argument_list|()
argument_list|)
expr_stmt|;
name|oc
operator|.
name|setTeachingRequest
argument_list|(
name|tr
argument_list|)
expr_stmt|;
name|offering
operator|.
name|getOfferingCoordinators
argument_list|()
operator|.
name|add
argument_list|(
name|oc
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|oc
argument_list|)
expr_stmt|;
name|updateOffering
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|TeachingClassRequest
name|cr
range|:
name|tr
operator|.
name|getClassRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|isAssignInstructor
argument_list|()
condition|)
block|{
for|for
control|(
name|DepartmentalInstructor
name|instructor
range|:
name|tr
operator|.
name|getAssignedInstructors
argument_list|()
control|)
block|{
name|ClassInstructor
name|support
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|cr
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getClassInstructors
argument_list|()
control|)
block|{
if|if
condition|(
name|instructor
operator|.
name|equals
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
argument_list|)
operator|&&
name|tr
operator|.
name|equals
argument_list|(
name|ci
operator|.
name|getTeachingRequest
argument_list|()
argument_list|)
condition|)
block|{
name|support
operator|=
name|ci
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|support
operator|==
literal|null
condition|)
block|{
name|Debug
operator|.
name|info
argument_list|(
name|cr
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getClassLabel
argument_list|(
name|hibSession
argument_list|)
operator|+
literal|": ASSIGN "
operator|+
name|instructor
operator|.
name|getNameLastFirst
argument_list|()
argument_list|)
expr_stmt|;
name|ClassInstructor
name|ci
init|=
operator|new
name|ClassInstructor
argument_list|()
decl_stmt|;
name|ci
operator|.
name|setClassInstructing
argument_list|(
name|cr
operator|.
name|getTeachingClass
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setInstructor
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setLead
argument_list|(
name|cr
operator|.
name|isLead
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setPercentShare
argument_list|(
name|cr
operator|.
name|getPercentShare
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setResponsibility
argument_list|(
name|tr
operator|.
name|getResponsibility
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setTeachingRequest
argument_list|(
name|tr
argument_list|)
expr_stmt|;
name|cr
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|add
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|getClasses
argument_list|()
operator|.
name|add
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|updateConfigs
operator|.
name|add
argument_list|(
name|cr
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
argument_list|)
expr_stmt|;
name|updatedClassIds
operator|.
name|add
argument_list|(
name|cr
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|offering
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|tx
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|updateConfigs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|String
name|className
init|=
name|ApplicationProperty
operator|.
name|ExternalActionInstrOfferingConfigAssignInstructors
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExternalInstrOfferingConfigAssignInstructorsAction
name|assignAction
init|=
operator|(
name|ExternalInstrOfferingConfigAssignInstructorsAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
for|for
control|(
name|InstrOfferingConfig
name|ioc
range|:
name|updateConfigs
control|)
name|assignAction
operator|.
name|performExternalInstrOfferingConfigAssignInstructorsAction
argument_list|(
name|ioc
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
literal|"Failed to call external action: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|updateOffering
condition|)
block|{
try|try
block|{
name|String
name|className
init|=
name|ApplicationProperty
operator|.
name|ExternalActionCourseOfferingEdit
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExternalCourseOfferingEditAction
name|editAction
init|=
operator|(
name|ExternalCourseOfferingEditAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|editAction
operator|.
name|performExternalCourseOfferingEditAction
argument_list|(
name|offering
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
literal|"Failed to call external action: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|updatedClassIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Session
name|session
init|=
name|offering
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|isTestSession
argument_list|()
condition|)
block|{
if|if
condition|(
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canOnlineSectionStudents
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|session
operator|.
name|isOfferingLocked
argument_list|(
name|offering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
name|StudentSectioningQueue
operator|.
name|offeringChanged
argument_list|(
name|hibSession
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|offering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canSectionAssistStudents
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|session
operator|.
name|isOfferingLocked
argument_list|(
name|offering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
name|StudentSectioningQueue
operator|.
name|classAssignmentChanged
argument_list|(
name|hibSession
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|updatedClassIds
argument_list|)
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|GwtRpcResponseNull
argument_list|()
return|;
block|}
specifier|protected
name|void
name|fillRequestInfo
parameter_list|(
name|Request
name|r
parameter_list|,
name|TeachingRequest
name|tr
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|tr
operator|.
name|setAssignCoordinator
argument_list|(
name|r
operator|.
name|isAssignCoordinator
argument_list|()
argument_list|)
expr_stmt|;
name|tr
operator|.
name|setPercentShare
argument_list|(
name|r
operator|.
name|getPercentShare
argument_list|()
argument_list|)
expr_stmt|;
name|tr
operator|.
name|setTeachingLoad
argument_list|(
name|r
operator|.
name|getTeachingLoad
argument_list|()
argument_list|)
expr_stmt|;
name|tr
operator|.
name|setResponsibility
argument_list|(
name|r
operator|.
name|getTeachingResponsibility
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|TeachingResponsibilityDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|r
operator|.
name|getTeachingResponsibility
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|tr
operator|.
name|setSameCoursePreference
argument_list|(
name|r
operator|.
name|getSameCoursePreference
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|PreferenceLevelDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|r
operator|.
name|getSameCoursePreference
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|tr
operator|.
name|setSameCommonPart
argument_list|(
name|r
operator|.
name|getSameCommonPreference
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|PreferenceLevelDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|r
operator|.
name|getSameCommonPreference
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|hasInstructorPrefernces
argument_list|()
condition|)
for|for
control|(
name|TeachingRequestInterface
operator|.
name|Preference
name|p
range|:
name|r
operator|.
name|getInstructorPreferences
argument_list|()
control|)
block|{
name|InstructorPref
name|pref
init|=
operator|new
name|InstructorPref
argument_list|()
decl_stmt|;
name|pref
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevelDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|p
operator|.
name|getPreferenceId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|pref
operator|.
name|setInstructor
argument_list|(
name|DepartmentalInstructorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|p
operator|.
name|getOwnerId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|==
literal|null
operator|||
name|pref
operator|.
name|getInstructor
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|pref
operator|.
name|setOwner
argument_list|(
name|tr
argument_list|)
expr_stmt|;
name|tr
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|hasAttributePrefernces
argument_list|()
condition|)
for|for
control|(
name|TeachingRequestInterface
operator|.
name|Preference
name|p
range|:
name|r
operator|.
name|getAttributePreferences
argument_list|()
control|)
block|{
name|InstructorAttributePref
name|pref
init|=
operator|new
name|InstructorAttributePref
argument_list|()
decl_stmt|;
name|pref
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevelDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|p
operator|.
name|getPreferenceId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|pref
operator|.
name|setAttribute
argument_list|(
name|InstructorAttributeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|p
operator|.
name|getOwnerId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|==
literal|null
operator|||
name|pref
operator|.
name|getAttribute
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|pref
operator|.
name|setOwner
argument_list|(
name|tr
argument_list|)
expr_stmt|;
name|tr
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|Class_
argument_list|>
name|getClasses
parameter_list|(
name|Class_
name|clazz
parameter_list|,
name|Long
name|subpartId
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|Collection
argument_list|<
name|Class_
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|()
decl_stmt|;
comment|// same subpart
if|if
condition|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|subpartId
argument_list|)
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
name|SchedulingSubpart
name|subpart
init|=
name|SchedulingSubpartDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|subpartId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|subpart
operator|==
literal|null
condition|)
return|return
name|ret
return|;
comment|// parent subpart
if|if
condition|(
name|subpart
operator|.
name|isParentOf
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
condition|)
block|{
name|Class_
name|parent
init|=
name|clazz
operator|.
name|getParentClass
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
operator|&&
operator|!
name|parent
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|equals
argument_list|(
name|subpart
argument_list|)
condition|)
name|parent
operator|=
name|parent
operator|.
name|getParentClass
argument_list|()
expr_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
name|ret
operator|.
name|add
argument_list|(
name|parent
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|// child subpart
if|if
condition|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|isParentOf
argument_list|(
name|subpart
argument_list|)
condition|)
block|{
for|for
control|(
name|Class_
name|c
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isParentOf
argument_list|(
name|c
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|// same parent?
name|SchedulingSubpart
name|parent
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getParentSubpart
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
operator|&&
operator|!
name|parent
operator|.
name|isParentOf
argument_list|(
name|subpart
argument_list|)
condition|)
name|parent
operator|=
name|parent
operator|.
name|getParentSubpart
argument_list|()
expr_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|Class_
name|parentClazz
init|=
name|clazz
operator|.
name|getParentClass
argument_list|()
decl_stmt|;
while|while
condition|(
name|parentClazz
operator|!=
literal|null
operator|&&
operator|!
name|parentClazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|equals
argument_list|(
name|parent
argument_list|)
condition|)
name|parentClazz
operator|=
name|parentClazz
operator|.
name|getParentClass
argument_list|()
expr_stmt|;
if|if
condition|(
name|parentClazz
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Class_
name|c
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|parentClazz
operator|.
name|isParentOf
argument_list|(
name|c
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
comment|// all classes of the subpart
return|return
name|subpart
operator|.
name|getClasses
argument_list|()
return|;
block|}
block|}
end_class

end_unit

