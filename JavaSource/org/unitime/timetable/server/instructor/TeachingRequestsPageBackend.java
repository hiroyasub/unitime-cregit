begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|instructor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|SessionAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|TeachingRequestsPageRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|TeachingRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|instructor
operator|.
name|InstructorSchedulingProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverService
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|TeachingRequestsPageRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TeachingRequestsPageBackend
extends|extends
name|InstructorSchedulingBackendHelper
implements|implements
name|GwtRpcImplementation
argument_list|<
name|TeachingRequestsPageRequest
argument_list|,
name|GwtRpcResponseList
argument_list|<
name|TeachingRequestInfo
argument_list|>
argument_list|>
block|{
annotation|@
name|Autowired
name|SolverService
argument_list|<
name|InstructorSchedulingProxy
argument_list|>
name|instructorSchedulingSolverService
decl_stmt|;
annotation|@
name|Override
specifier|public
name|GwtRpcResponseList
argument_list|<
name|TeachingRequestInfo
argument_list|>
name|execute
parameter_list|(
name|TeachingRequestsPageRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|InstructorSchedulingSolver
argument_list|)
expr_stmt|;
name|context
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OfferingsSubjectArea
argument_list|,
name|request
operator|.
name|getSubjectAreaId
argument_list|()
operator|==
literal|null
condition|?
literal|"-1"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|request
operator|.
name|getSubjectAreaId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|InstructorSchedulingProxy
name|solver
init|=
name|instructorSchedulingSolverService
operator|.
name|getSolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
return|return
operator|new
name|GwtRpcResponseList
argument_list|<
name|TeachingRequestInfo
argument_list|>
argument_list|(
name|solver
operator|.
name|getTeachingRequests
argument_list|(
name|request
operator|.
name|getSubjectAreaId
argument_list|()
argument_list|,
name|request
operator|.
name|isAssigned
argument_list|()
argument_list|)
argument_list|)
return|;
else|else
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|commonItypes
init|=
name|getCommonItypes
argument_list|()
decl_stmt|;
name|String
name|nameFormat
init|=
name|UserProperty
operator|.
name|NameFormat
operator|.
name|get
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|GwtRpcResponseList
argument_list|<
name|TeachingRequestInfo
argument_list|>
name|ret
init|=
operator|new
name|GwtRpcResponseList
argument_list|<
name|TeachingRequestInfo
argument_list|>
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Class_
argument_list|>
name|classes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getSubjectAreaId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|subjectAreaIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SubjectArea
name|sa
range|:
name|SubjectArea
operator|.
name|getUserSubjectAreas
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
literal|true
argument_list|)
control|)
block|{
for|for
control|(
name|DepartmentalInstructor
name|di
range|:
name|sa
operator|.
name|getDepartment
argument_list|()
operator|.
name|getInstructors
argument_list|()
control|)
if|if
condition|(
name|di
operator|.
name|getTeachingPreference
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|di
operator|.
name|getTeachingPreference
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
block|{
name|subjectAreaIds
operator|.
name|add
argument_list|(
name|sa
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|subjectAreaIds
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|ret
return|;
name|classes
operator|=
operator|(
name|List
argument_list|<
name|Class_
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct c from Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co "
operator|+
literal|"left join fetch c.schedulingSubpart as ss left join fetch c.classInstructors as ci left join fetch ci.instructor as di "
operator|+
literal|"left join fetch c.preferences as cp left join fetch ss.preferences as sp left join fetch di.preferences as dip "
operator|+
literal|"where co.subjectArea.uniqueId in :subjectAreaIds and co.isControl = true and c.cancelled = false and "
operator|+
literal|"(c.teachingLoad is not null or c.schedulingSubpart.teachingLoad is not null) and "
operator|+
literal|"((c.nbrInstructors is null and c.schedulingSubpart.nbrInstructors> 0) or c.nbrInstructors> 0)"
argument_list|)
operator|.
name|setParameterList
argument_list|(
literal|"subjectAreaIds"
argument_list|,
name|subjectAreaIds
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|classes
operator|=
operator|(
name|List
argument_list|<
name|Class_
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct c from Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co "
operator|+
literal|"left join fetch c.schedulingSubpart as ss left join fetch c.classInstructors as ci left join fetch ci.instructor as di "
operator|+
literal|"left join fetch c.preferences as cp left join fetch ss.preferences as sp left join fetch di.preferences as dip "
operator|+
literal|"where co.subjectArea.uniqueId = :subjectAreaId and co.isControl = true and c.cancelled = false and "
operator|+
literal|"(c.teachingLoad is not null or c.schedulingSubpart.teachingLoad is not null) and "
operator|+
literal|"((c.nbrInstructors is null and c.schedulingSubpart.nbrInstructors> 0) or c.nbrInstructors> 0)"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"subjectAreaId"
argument_list|,
name|request
operator|.
name|getSubjectAreaId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|classes
argument_list|,
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Class_
name|clazz
range|:
name|classes
control|)
block|{
if|if
condition|(
operator|!
name|clazz
operator|.
name|isInstructorAssignmentNeeded
argument_list|()
condition|)
continue|continue;
name|TeachingRequestInfo
name|info
init|=
name|getRequestForClass
argument_list|(
name|clazz
argument_list|,
name|commonItypes
argument_list|,
name|nameFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|isAssigned
argument_list|()
operator|&&
name|info
operator|.
name|getNrAssignedInstructors
argument_list|()
operator|>
literal|0
condition|)
name|ret
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
if|else if
condition|(
operator|!
name|request
operator|.
name|isAssigned
argument_list|()
operator|&&
name|info
operator|.
name|getNrAssignedInstructors
argument_list|()
operator|<
name|info
operator|.
name|getNrInstructors
argument_list|()
condition|)
name|ret
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
block|}
end_class

end_unit

