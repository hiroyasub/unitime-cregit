begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|instructor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|AttributeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|GetInstructorAttributeParentsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructorAttributeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|GetInstructorAttributeParentsRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|GetInstructorAttributeParentsBackend
implements|implements
name|GwtRpcImplementation
argument_list|<
name|GetInstructorAttributeParentsRequest
argument_list|,
name|GwtRpcResponseList
argument_list|<
name|AttributeInterface
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|GwtRpcResponseList
argument_list|<
name|AttributeInterface
argument_list|>
name|execute
parameter_list|(
name|GetInstructorAttributeParentsRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|InstructorAttributes
argument_list|)
expr_stmt|;
name|InstructorAttribute
name|current
init|=
operator|(
name|request
operator|.
name|getAttributeId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|InstructorAttributeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getAttributeId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
name|GwtRpcResponseList
argument_list|<
name|AttributeInterface
argument_list|>
name|response
init|=
operator|new
name|GwtRpcResponseList
argument_list|<
name|AttributeInterface
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|InstructorAttribute
name|attribute
range|:
operator|(
name|List
argument_list|<
name|InstructorAttribute
argument_list|>
operator|)
name|InstructorAttributeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from InstructorAttribute a where a.session.uniqueId = :sessionId and (a.department is null or a.department.uniqueId = :departmentId) and a.type.uniqueId = :typeId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"departmentId"
argument_list|,
name|request
operator|.
name|getDepartmentId
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1l
else|:
name|request
operator|.
name|getDepartmentId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"typeId"
argument_list|,
name|request
operator|.
name|getTypeId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|current
operator|==
literal|null
operator|||
operator|(
operator|!
name|current
operator|.
name|equals
argument_list|(
name|attribute
argument_list|)
operator|&&
operator|!
name|current
operator|.
name|isParentOf
argument_list|(
name|attribute
argument_list|)
operator|)
condition|)
block|{
name|AttributeInterface
name|a
init|=
operator|new
name|AttributeInterface
argument_list|()
decl_stmt|;
name|a
operator|.
name|setId
argument_list|(
name|attribute
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setName
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|response
return|;
block|}
block|}
end_class

end_unit

