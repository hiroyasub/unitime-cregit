begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|instructor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|AssignmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|InstructorAssignmentRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|InstructorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalCourseOfferingEditAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalInstrOfferingConfigAssignInstructorsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|OfferingCoordinator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TeachingClassRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TeachingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TeachingRequestDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|instructor
operator|.
name|InstructorSchedulingProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverService
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|InstructorAssignmentRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|InstructorAssignmentBackend
extends|extends
name|InstructorSchedulingBackendHelper
implements|implements
name|GwtRpcImplementation
argument_list|<
name|InstructorAssignmentRequest
argument_list|,
name|GwtRpcResponseNull
argument_list|>
block|{
specifier|protected
specifier|static
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
name|SolverService
argument_list|<
name|InstructorSchedulingProxy
argument_list|>
name|instructorSchedulingSolverService
decl_stmt|;
annotation|@
name|Override
specifier|public
name|GwtRpcResponseNull
name|execute
parameter_list|(
name|InstructorAssignmentRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|InstructorSchedulingSolver
argument_list|)
expr_stmt|;
name|InstructorSchedulingProxy
name|solver
init|=
name|instructorSchedulingSolverService
operator|.
name|getSolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
name|solver
operator|.
name|assign
argument_list|(
name|request
operator|.
name|getAssignments
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|GwtRpcResponseNull
argument_list|()
return|;
block|}
name|Boolean
name|commit
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|updateInstructors
init|=
operator|new
name|HashSet
argument_list|<
name|DepartmentalInstructor
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|InstrOfferingConfig
argument_list|>
name|updateConfigs
init|=
operator|new
name|HashSet
argument_list|<
name|InstrOfferingConfig
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|InstructionalOffering
argument_list|>
name|updateOfferings
init|=
operator|new
name|HashSet
argument_list|<
name|InstructionalOffering
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|Long
argument_list|>
argument_list|>
name|touchedOfferingIds
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|DepartmentalInstructorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
name|Context
name|cx
init|=
operator|new
name|Context
argument_list|(
name|context
argument_list|,
name|solver
argument_list|)
decl_stmt|;
name|Suggestion
name|s
init|=
operator|new
name|Suggestion
argument_list|()
decl_stmt|;
for|for
control|(
name|AssignmentInfo
name|ai
range|:
name|request
operator|.
name|getAssignments
argument_list|()
control|)
block|{
name|TeachingRequest
name|tr
init|=
name|TeachingRequestDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|ai
operator|.
name|getRequest
argument_list|()
operator|.
name|getRequestId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tr
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|commit
operator|==
literal|null
condition|)
name|commit
operator|=
name|Department
operator|.
name|isInstructorSchedulingCommitted
argument_list|(
name|tr
operator|.
name|getOffering
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|DepartmentalInstructor
name|instructor
init|=
operator|(
name|ai
operator|.
name|getInstructor
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|DepartmentalInstructorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|ai
operator|.
name|getInstructor
argument_list|()
operator|.
name|getInstructorId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|instructor
operator|!=
literal|null
condition|)
block|{
name|InstructorInfo
name|prev
init|=
name|ai
operator|.
name|getRequest
argument_list|()
operator|.
name|getInstructor
argument_list|(
name|ai
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
name|s
operator|.
name|set
argument_list|(
name|tr
argument_list|,
name|ai
operator|.
name|getIndex
argument_list|()
argument_list|,
name|instructor
argument_list|,
name|prev
operator|==
literal|null
condition|?
literal|null
else|:
name|DepartmentalInstructorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|prev
operator|.
name|getInstructorId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|InstructorAssignment
argument_list|>
name|conflicts
init|=
operator|new
name|HashSet
argument_list|<
name|InstructorAssignment
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|isIgnoreConflicts
argument_list|()
condition|)
for|for
control|(
name|InstructorAssignment
name|a
range|:
name|s
operator|.
name|getAssignments
argument_list|()
control|)
name|s
operator|.
name|computeConflicts
argument_list|(
name|a
argument_list|,
name|conflicts
argument_list|,
name|cx
argument_list|)
expr_stmt|;
for|for
control|(
name|InstructorAssignment
name|a
range|:
name|s
operator|.
name|getAssignments
argument_list|()
control|)
name|unassign
argument_list|(
name|hibSession
argument_list|,
name|a
operator|.
name|getTeachingRequest
argument_list|()
argument_list|,
name|a
operator|.
name|getCurrentAssignment
argument_list|()
argument_list|,
name|commit
argument_list|)
expr_stmt|;
for|for
control|(
name|InstructorAssignment
name|c
range|:
name|conflicts
control|)
block|{
name|unassign
argument_list|(
name|hibSession
argument_list|,
name|c
operator|.
name|getTeachingRequest
argument_list|()
argument_list|,
name|c
operator|.
name|getAssigment
argument_list|()
argument_list|,
name|commit
argument_list|)
expr_stmt|;
if|if
condition|(
name|commit
operator|&&
name|c
operator|.
name|getAssigment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|updateInstructors
operator|.
name|add
argument_list|(
name|c
operator|.
name|getAssigment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getTeachingRequest
argument_list|()
operator|.
name|isAssignCoordinator
argument_list|()
condition|)
name|updateOfferings
operator|.
name|add
argument_list|(
name|c
operator|.
name|getTeachingRequest
argument_list|()
operator|.
name|getOffering
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TeachingClassRequest
name|tcr
range|:
name|c
operator|.
name|getTeachingRequest
argument_list|()
operator|.
name|getClassRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|tcr
operator|.
name|isAssignInstructor
argument_list|()
condition|)
block|{
name|updateConfigs
operator|.
name|add
argument_list|(
name|tcr
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|classIds
init|=
name|touchedOfferingIds
operator|.
name|get
argument_list|(
name|c
operator|.
name|getTeachingRequest
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|classIds
operator|==
literal|null
condition|)
block|{
name|classIds
operator|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|touchedOfferingIds
operator|.
name|put
argument_list|(
name|c
operator|.
name|getTeachingRequest
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|classIds
argument_list|)
expr_stmt|;
block|}
name|classIds
operator|.
name|add
argument_list|(
name|tcr
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|InstructorAssignment
name|a
range|:
name|s
operator|.
name|getAssignments
argument_list|()
control|)
block|{
name|assign
argument_list|(
name|hibSession
argument_list|,
name|a
operator|.
name|getTeachingRequest
argument_list|()
argument_list|,
name|a
operator|.
name|getAssigment
argument_list|()
argument_list|,
name|commit
argument_list|)
expr_stmt|;
if|if
condition|(
name|commit
condition|)
block|{
if|if
condition|(
name|a
operator|.
name|getCurrentAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|updateInstructors
operator|.
name|add
argument_list|(
name|a
operator|.
name|getCurrentAssignment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|getAssigment
argument_list|()
operator|!=
literal|null
condition|)
name|updateInstructors
operator|.
name|add
argument_list|(
name|a
operator|.
name|getAssigment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|getTeachingRequest
argument_list|()
operator|.
name|isAssignCoordinator
argument_list|()
condition|)
name|updateOfferings
operator|.
name|add
argument_list|(
name|a
operator|.
name|getTeachingRequest
argument_list|()
operator|.
name|getOffering
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TeachingClassRequest
name|tcr
range|:
name|a
operator|.
name|getTeachingRequest
argument_list|()
operator|.
name|getClassRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|tcr
operator|.
name|isAssignInstructor
argument_list|()
condition|)
block|{
name|updateConfigs
operator|.
name|add
argument_list|(
name|tcr
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|classIds
init|=
name|touchedOfferingIds
operator|.
name|get
argument_list|(
name|a
operator|.
name|getTeachingRequest
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|classIds
operator|==
literal|null
condition|)
block|{
name|classIds
operator|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|touchedOfferingIds
operator|.
name|put
argument_list|(
name|a
operator|.
name|getTeachingRequest
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|classIds
argument_list|)
expr_stmt|;
block|}
name|classIds
operator|.
name|add
argument_list|(
name|tcr
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|InstructorAssignment
name|c
range|:
name|conflicts
control|)
name|changelog
argument_list|(
name|hibSession
argument_list|,
name|c
operator|.
name|getTeachingRequest
argument_list|()
argument_list|,
name|c
operator|.
name|getAssigment
argument_list|()
argument_list|,
literal|null
argument_list|,
name|cx
argument_list|)
expr_stmt|;
for|for
control|(
name|InstructorAssignment
name|a
range|:
name|s
operator|.
name|getAssignments
argument_list|()
control|)
name|changelog
argument_list|(
name|hibSession
argument_list|,
name|a
operator|.
name|getTeachingRequest
argument_list|()
argument_list|,
name|a
operator|.
name|getCurrentAssignment
argument_list|()
argument_list|,
name|a
operator|.
name|getAssigment
argument_list|()
argument_list|,
name|cx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|tx
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|updateConfigs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|String
name|className
init|=
name|ApplicationProperty
operator|.
name|ExternalActionInstrOfferingConfigAssignInstructors
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExternalInstrOfferingConfigAssignInstructorsAction
name|assignAction
init|=
operator|(
name|ExternalInstrOfferingConfigAssignInstructorsAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
for|for
control|(
name|InstrOfferingConfig
name|ioc
range|:
name|updateConfigs
control|)
name|assignAction
operator|.
name|performExternalInstrOfferingConfigAssignInstructorsAction
argument_list|(
name|ioc
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
literal|"Failed to call external action: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|updateOfferings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|String
name|className
init|=
name|ApplicationProperty
operator|.
name|ExternalActionCourseOfferingEdit
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExternalCourseOfferingEditAction
name|editAction
init|=
operator|(
name|ExternalCourseOfferingEditAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
for|for
control|(
name|InstructionalOffering
name|io
range|:
name|updateOfferings
control|)
name|editAction
operator|.
name|performExternalCourseOfferingEditAction
argument_list|(
name|io
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
literal|"Failed to call external action: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|touchedOfferingIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Long
name|sessionId
init|=
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|isTestSession
argument_list|()
condition|)
block|{
if|if
condition|(
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canOnlineSectionStudents
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|unlockedOfferings
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|offeringId
range|:
name|touchedOfferingIds
operator|.
name|keySet
argument_list|()
control|)
if|if
condition|(
operator|!
name|session
operator|.
name|isOfferingLocked
argument_list|(
name|offeringId
argument_list|)
condition|)
name|unlockedOfferings
operator|.
name|add
argument_list|(
name|offeringId
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|unlockedOfferings
operator|.
name|isEmpty
argument_list|()
condition|)
name|StudentSectioningQueue
operator|.
name|offeringChanged
argument_list|(
name|hibSession
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
name|sessionId
argument_list|,
name|unlockedOfferings
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canSectionAssistStudents
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|Long
argument_list|>
argument_list|>
name|entry
range|:
name|touchedOfferingIds
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|session
operator|.
name|isOfferingLocked
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
name|StudentSectioningQueue
operator|.
name|classAssignmentChanged
argument_list|(
name|hibSession
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
name|sessionId
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|GwtRpcResponseNull
argument_list|()
return|;
block|}
specifier|protected
name|void
name|unassign
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|TeachingRequest
name|request
parameter_list|,
name|DepartmentalInstructor
name|instructor
parameter_list|,
name|boolean
name|commit
parameter_list|)
block|{
if|if
condition|(
name|instructor
operator|==
literal|null
condition|)
return|return;
name|request
operator|.
name|getAssignedInstructors
argument_list|()
operator|.
name|remove
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
if|if
condition|(
name|commit
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|isAssignCoordinator
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|OfferingCoordinator
argument_list|>
name|i
init|=
name|request
operator|.
name|getOffering
argument_list|()
operator|.
name|getOfferingCoordinators
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|OfferingCoordinator
name|oc
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|equals
argument_list|(
name|oc
operator|.
name|getTeachingRequest
argument_list|()
argument_list|)
operator|&&
name|instructor
operator|.
name|equals
argument_list|(
name|oc
operator|.
name|getInstructor
argument_list|()
argument_list|)
condition|)
block|{
name|Debug
operator|.
name|info
argument_list|(
name|request
operator|.
name|getOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
literal|": UNASSIGN "
operator|+
name|instructor
operator|.
name|getNameLastFirst
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|oc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Iterator
argument_list|<
name|ClassInstructor
argument_list|>
name|i
init|=
name|instructor
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|equals
argument_list|(
name|ci
operator|.
name|getTeachingRequest
argument_list|()
argument_list|)
condition|)
block|{
name|Debug
operator|.
name|info
argument_list|(
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getClassLabel
argument_list|(
name|hibSession
argument_list|)
operator|+
literal|": UNASSIGN "
operator|+
name|instructor
operator|.
name|getNameLastFirst
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|remove
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|assign
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|TeachingRequest
name|request
parameter_list|,
name|DepartmentalInstructor
name|instructor
parameter_list|,
name|boolean
name|commit
parameter_list|)
block|{
if|if
condition|(
name|instructor
operator|==
literal|null
condition|)
return|return;
name|request
operator|.
name|getAssignedInstructors
argument_list|()
operator|.
name|add
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
if|if
condition|(
name|commit
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|isAssignCoordinator
argument_list|()
condition|)
block|{
name|Debug
operator|.
name|info
argument_list|(
name|request
operator|.
name|getOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
literal|": ASSIGN "
operator|+
name|instructor
operator|.
name|getNameLastFirst
argument_list|()
argument_list|)
expr_stmt|;
name|OfferingCoordinator
name|oc
init|=
operator|new
name|OfferingCoordinator
argument_list|()
decl_stmt|;
name|oc
operator|.
name|setInstructor
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|oc
operator|.
name|setOffering
argument_list|(
name|request
operator|.
name|getOffering
argument_list|()
argument_list|)
expr_stmt|;
name|oc
operator|.
name|setResponsibility
argument_list|(
name|request
operator|.
name|getResponsibility
argument_list|()
argument_list|)
expr_stmt|;
name|oc
operator|.
name|setTeachingRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|oc
operator|.
name|setPercentShare
argument_list|(
name|request
operator|.
name|getPercentShare
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|getOffering
argument_list|()
operator|.
name|getOfferingCoordinators
argument_list|()
operator|.
name|add
argument_list|(
name|oc
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|oc
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TeachingClassRequest
name|cr
range|:
name|request
operator|.
name|getClassRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|isAssignInstructor
argument_list|()
condition|)
block|{
name|Debug
operator|.
name|info
argument_list|(
name|cr
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getClassLabel
argument_list|(
name|hibSession
argument_list|)
operator|+
literal|": ASSIGN "
operator|+
name|instructor
operator|.
name|getNameLastFirst
argument_list|()
argument_list|)
expr_stmt|;
name|ClassInstructor
name|ci
init|=
operator|new
name|ClassInstructor
argument_list|()
decl_stmt|;
name|ci
operator|.
name|setClassInstructing
argument_list|(
name|cr
operator|.
name|getTeachingClass
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setInstructor
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setLead
argument_list|(
name|cr
operator|.
name|isLead
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setPercentShare
argument_list|(
name|cr
operator|.
name|getPercentShare
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setResponsibility
argument_list|(
name|request
operator|.
name|getResponsibility
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setTeachingRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|cr
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|add
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|getClasses
argument_list|()
operator|.
name|add
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|changelog
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|TeachingRequest
name|request
parameter_list|,
name|DepartmentalInstructor
name|oldInstructor
parameter_list|,
name|DepartmentalInstructor
name|newInstructor
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
if|if
condition|(
name|oldInstructor
operator|!=
literal|null
operator|||
name|newInstructor
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|isAssignCoordinator
argument_list|()
condition|)
block|{
name|CourseOffering
name|co
init|=
name|request
operator|.
name|getOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
decl_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
operator|.
name|getSessionContext
argument_list|()
argument_list|,
name|co
argument_list|,
name|co
operator|.
name|getCourseName
argument_list|()
operator|+
literal|": "
operator|+
operator|(
name|oldInstructor
operator|==
literal|null
condition|?
literal|"<i>Not Assigned</i>"
else|:
name|oldInstructor
operator|.
name|getName
argument_list|(
name|context
operator|.
name|getNameFormat
argument_list|()
argument_list|)
operator|)
operator|+
literal|"&rarr; "
operator|+
operator|(
name|newInstructor
operator|==
literal|null
condition|?
literal|"<i>Not Assigned</i>"
else|:
name|newInstructor
operator|.
name|getName
argument_list|(
name|context
operator|.
name|getNameFormat
argument_list|()
argument_list|)
operator|)
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|INSTRUCTOR_ASSIGNMENT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|ASSIGN
argument_list|,
name|co
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|co
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TeachingClassRequest
name|cr
range|:
name|request
operator|.
name|getClassRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|isAssignInstructor
argument_list|()
condition|)
block|{
name|Class_
name|clazz
init|=
name|cr
operator|.
name|getTeachingClass
argument_list|()
decl_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
operator|.
name|getSessionContext
argument_list|()
argument_list|,
name|clazz
argument_list|,
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|hibSession
argument_list|)
operator|+
literal|": "
operator|+
operator|(
name|oldInstructor
operator|==
literal|null
condition|?
literal|"<i>Not Assigned</i>"
else|:
name|oldInstructor
operator|.
name|getName
argument_list|(
name|context
operator|.
name|getNameFormat
argument_list|()
argument_list|)
operator|)
operator|+
literal|"&rarr; "
operator|+
operator|(
name|newInstructor
operator|==
literal|null
condition|?
literal|"<i>Not Assigned</i>"
else|:
name|newInstructor
operator|.
name|getName
argument_list|(
name|context
operator|.
name|getNameFormat
argument_list|()
argument_list|)
operator|)
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|INSTRUCTOR_ASSIGNMENT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|ASSIGN
argument_list|,
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|clazz
operator|.
name|getControllingDept
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

