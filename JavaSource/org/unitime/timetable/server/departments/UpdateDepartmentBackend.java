begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|departments
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|departments
operator|.
name|DepartmentsEdit
operator|.
name|UpdateDepartmentRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|DepartmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|PageAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExternalDepartmentStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|UpdateDepartmentRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|UpdateDepartmentBackend
implements|implements
name|GwtRpcImplementation
argument_list|<
name|UpdateDepartmentRequest
argument_list|,
name|DepartmentInterface
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|DepartmentInterface
name|execute
parameter_list|(
name|UpdateDepartmentRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Department
name|department
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|request
operator|.
name|getAction
argument_list|()
condition|)
block|{
case|case
name|CREATE
case|:
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|DepartmentAdd
argument_list|)
expr_stmt|;
name|department
operator|=
name|saveOrUpdate
argument_list|(
name|request
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
name|department
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DEPARTMENT_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|CREATE
argument_list|,
literal|null
argument_list|,
name|department
argument_list|)
expr_stmt|;
break|break;
case|case
name|UPDATE
case|:
name|context
operator|.
name|checkPermission
argument_list|(
name|request
operator|.
name|getDepartment
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
literal|"Department"
argument_list|,
name|Right
operator|.
name|DepartmentEdit
argument_list|)
expr_stmt|;
name|department
operator|=
name|saveOrUpdate
argument_list|(
name|request
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
name|department
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DEPARTMENT_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
name|department
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|context
operator|.
name|checkPermission
argument_list|(
name|request
operator|.
name|getDepartment
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
literal|"Department"
argument_list|,
name|Right
operator|.
name|DepartmentDelete
argument_list|)
expr_stmt|;
name|department
operator|=
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getDepartment
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
name|department
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DEPARTMENT_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|delete
argument_list|(
name|request
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|request
operator|.
name|getDepartment
argument_list|()
return|;
block|}
comment|//Edit or create a department
specifier|protected
name|Department
name|saveOrUpdate
parameter_list|(
name|DepartmentInterface
name|departmentInterface
parameter_list|,
name|SessionContext
name|context
parameter_list|)
throws|throws
name|GwtRpcException
block|{
name|Department
name|department
init|=
literal|null
decl_stmt|;
try|try
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
name|acadSession
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|departmentInterface
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|department
operator|=
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|departmentInterface
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|department
operator|==
literal|null
condition|)
block|{
name|department
operator|=
operator|new
name|Department
argument_list|()
expr_stmt|;
name|acadSession
operator|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|department
operator|.
name|setSession
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|department
operator|.
name|setDistributionPrefPriority
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|acadSession
operator|.
name|addTodepartments
argument_list|(
name|department
argument_list|)
expr_stmt|;
name|department
operator|.
name|setExternalStatusTypes
argument_list|(
operator|new
name|HashSet
argument_list|<
name|ExternalDepartmentStatusType
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|department
operator|.
name|setDeptCode
argument_list|(
name|departmentInterface
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
name|department
operator|.
name|setAllowReqTime
argument_list|(
name|departmentInterface
operator|.
name|getAllowReqTime
argument_list|()
argument_list|)
expr_stmt|;
name|department
operator|.
name|setAbbreviation
argument_list|(
name|departmentInterface
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|department
operator|.
name|setName
argument_list|(
name|departmentInterface
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|department
operator|.
name|setExternalUniqueId
argument_list|(
name|departmentInterface
operator|.
name|getExternalId
argument_list|()
operator|!=
literal|null
operator|&&
name|departmentInterface
operator|.
name|getExternalId
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|departmentInterface
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|department
operator|.
name|setDistributionPrefPriority
argument_list|(
name|departmentInterface
operator|.
name|getDistributionPrefPriority
argument_list|()
argument_list|)
expr_stmt|;
name|department
operator|.
name|setExternalManager
argument_list|(
name|departmentInterface
operator|.
name|getExternalManager
argument_list|()
argument_list|)
expr_stmt|;
name|department
operator|.
name|setExternalMgrAbbv
argument_list|(
name|departmentInterface
operator|.
name|getExternalMgrAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|department
operator|.
name|setAllowReqDistribution
argument_list|(
name|departmentInterface
operator|.
name|getAllowReqDistribution
argument_list|()
argument_list|)
expr_stmt|;
name|department
operator|.
name|setExternalFundingDept
argument_list|(
name|departmentInterface
operator|.
name|getExternalFundingDept
argument_list|()
argument_list|)
expr_stmt|;
name|department
operator|.
name|setExternalMgrLabel
argument_list|(
name|departmentInterface
operator|.
name|getExternalMgrLabel
argument_list|()
argument_list|)
expr_stmt|;
name|department
operator|.
name|setAllowReqRoom
argument_list|(
name|departmentInterface
operator|.
name|getAllowReqRoom
argument_list|()
argument_list|)
expr_stmt|;
name|department
operator|.
name|setAllowEvents
argument_list|(
name|departmentInterface
operator|.
name|getAllowEvents
argument_list|()
argument_list|)
expr_stmt|;
name|department
operator|.
name|setAllowStudentScheduling
argument_list|(
name|departmentInterface
operator|.
name|getAllowStudentScheduling
argument_list|()
argument_list|)
expr_stmt|;
name|department
operator|.
name|setInheritInstructorPreferences
argument_list|(
name|departmentInterface
operator|.
name|getInheritInstructorPreferences
argument_list|()
argument_list|)
expr_stmt|;
name|department
operator|.
name|setStatusType
argument_list|(
name|DepartmentStatusType
operator|.
name|findByRef
argument_list|(
name|departmentInterface
operator|.
name|getStatusTypeStr
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExternalDepartmentStatusType
argument_list|>
name|statuses
init|=
operator|new
name|ArrayList
argument_list|<
name|ExternalDepartmentStatusType
argument_list|>
argument_list|(
name|department
operator|.
name|getExternalStatusTypes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|department
operator|.
name|isExternalManager
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Math
operator|.
name|min
argument_list|(
name|departmentInterface
operator|.
name|iDependentDepartments
operator|.
name|size
argument_list|()
argument_list|,
name|departmentInterface
operator|.
name|iDependentStatuses
operator|.
name|size
argument_list|()
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|Long
name|deptId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|departmentInterface
operator|.
name|iDependentDepartments
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|status
init|=
name|departmentInterface
operator|.
name|iDependentStatuses
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|DepartmentStatusType
name|d
init|=
name|DepartmentStatusType
operator|.
name|findByRef
argument_list|(
name|status
argument_list|)
decl_stmt|;
if|if
condition|(
name|deptId
operator|>=
literal|0
operator|&&
operator|!
name|status
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ExternalDepartmentStatusType
name|t
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ExternalDepartmentStatusType
argument_list|>
name|j
init|=
name|statuses
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExternalDepartmentStatusType
name|x
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|deptId
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
name|t
operator|=
name|x
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
name|t
operator|=
operator|new
name|ExternalDepartmentStatusType
argument_list|()
expr_stmt|;
name|t
operator|.
name|setExternalDepartment
argument_list|(
name|department
argument_list|)
expr_stmt|;
name|t
operator|.
name|setDepartment
argument_list|(
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|deptId
argument_list|)
argument_list|)
expr_stmt|;
name|department
operator|.
name|getExternalStatusTypes
argument_list|()
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|t
operator|.
name|setStatusType
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|ExternalDepartmentStatusType
name|t
range|:
name|statuses
control|)
block|{
name|department
operator|.
name|getExternalStatusTypes
argument_list|()
operator|.
name|remove
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|department
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|departmentInterface
operator|.
name|setId
argument_list|(
operator|(
name|Long
operator|)
name|hibSession
operator|.
name|save
argument_list|(
name|department
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hibSession
operator|.
name|update
argument_list|(
name|department
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|department
return|;
block|}
comment|//DELETE a department
specifier|protected
name|void
name|delete
parameter_list|(
name|DepartmentInterface
name|DepartmentInterface
parameter_list|,
name|SessionContext
name|context
parameter_list|)
throws|throws
name|GwtRpcException
block|{
name|context
operator|.
name|checkPermission
argument_list|(
name|DepartmentInterface
operator|.
name|getId
argument_list|()
argument_list|,
literal|"Department"
argument_list|,
name|Right
operator|.
name|DepartmentDelete
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Department
name|department
init|=
operator|new
name|DepartmentDAO
argument_list|()
operator|.
name|get
argument_list|(
name|DepartmentInterface
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|department
operator|.
name|isExternalManager
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
for|for
control|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Iterator
argument_list|<
name|Class_
argument_list|>
name|i
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from Class_ c where c.managingDept.uniqueId=:deptId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"deptId"
argument_list|,
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getManagingDept
argument_list|()
operator|.
name|equals
argument_list|(
name|department
argument_list|)
condition|)
block|{
comment|// Clear all room preferences from the subpart
for|for
control|(
name|Iterator
argument_list|<
name|Preference
argument_list|>
name|j
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|pref
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|pref
operator|instanceof
name|TimePref
operator|)
condition|)
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|deleteAllDistributionPreferences
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|clazz
operator|.
name|setManagingDept
argument_list|(
name|clazz
operator|.
name|getControllingDept
argument_list|()
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
comment|// Clear all room preferences from the class
for|for
control|(
name|Iterator
argument_list|<
name|Preference
argument_list|>
name|j
init|=
name|clazz
operator|.
name|getPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|pref
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|pref
operator|instanceof
name|TimePref
operator|)
condition|)
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|clazz
operator|.
name|deleteAllDistributionPreferences
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"delete StudentClassEnrollment e where e.clazz.uniqueId in "
operator|+
literal|"(select c.uniqueId from Class_ c, CourseOffering co where "
operator|+
literal|"co.isControl=true and "
operator|+
literal|"c.schedulingSubpart.instrOfferingConfig.instructionalOffering=co.instructionalOffering and "
operator|+
literal|"co.subjectArea.department.uniqueId=:deptId)"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"deptId"
argument_list|,
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
name|hibSession
operator|.
name|delete
argument_list|(
name|department
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|HibernateUtil
operator|.
name|clearCache
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

