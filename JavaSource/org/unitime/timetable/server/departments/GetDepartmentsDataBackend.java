begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|departments
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DistanceMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|CommonValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|DepartmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|DepartmentInterface
operator|.
name|DepartmentsDataResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|DepartmentInterface
operator|.
name|GetDepartmentsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExternalDepartmentStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RefTableEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|ReferenceList
import|;
end_import

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|GetDepartmentsRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|GetDepartmentsDataBackend
implements|implements
name|GwtRpcImplementation
argument_list|<
name|GetDepartmentsRequest
argument_list|,
name|DepartmentsDataResponse
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|DepartmentsDataResponse
name|execute
parameter_list|(
name|GetDepartmentsRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|Departments
argument_list|)
expr_stmt|;
name|DepartmentsDataResponse
name|response
init|=
operator|new
name|DepartmentsDataResponse
argument_list|()
decl_stmt|;
comment|/*permission */
name|response
operator|.
name|setCanAdd
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|DepartmentAdd
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCanExportPdf
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|Departments
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setFundingDeptEnabled
argument_list|(
name|ApplicationProperty
operator|.
name|CoursesFundingDepartmentsEnabled
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
comment|/*department list */
for|for
control|(
name|Department
name|dept
range|:
name|Department
operator|.
name|findAll
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
control|)
block|{
name|DepartmentInterface
name|d
init|=
operator|new
name|DepartmentInterface
argument_list|()
decl_stmt|;
name|d
operator|.
name|setSessionId
argument_list|(
name|dept
operator|.
name|getSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setCoursesFundingDepartmentsEnabled
argument_list|(
name|ApplicationProperty
operator|.
name|CoursesFundingDepartmentsEnabled
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setAcademicSessionName
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|getQualifiers
argument_list|(
literal|"Session"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getQualifierLabel
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setDeptCode
argument_list|(
name|dept
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setUniqueId
argument_list|(
name|dept
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setAbbreviation
argument_list|(
name|dept
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setName
argument_list|(
name|dept
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setExternalManager
argument_list|(
name|dept
operator|.
name|isExternalManager
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setExternalMgrAbbv
argument_list|(
name|dept
operator|.
name|getExternalMgrAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setExternalMgrLabel
argument_list|(
name|dept
operator|.
name|getExternalMgrLabel
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setTimetableManagersCount
argument_list|(
operator|!
name|dept
operator|.
name|getTimetableManagers
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|dept
operator|.
name|getTimetableManagers
argument_list|()
operator|.
name|size
argument_list|()
else|:
literal|0
argument_list|)
expr_stmt|;
name|d
operator|.
name|setSubjectAreaCount
argument_list|(
operator|!
name|dept
operator|.
name|getSubjectAreas
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|dept
operator|.
name|getSubjectAreas
argument_list|()
operator|.
name|size
argument_list|()
else|:
literal|0
argument_list|)
expr_stmt|;
name|d
operator|.
name|setRoomDeptCount
argument_list|(
operator|!
name|dept
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|dept
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|size
argument_list|()
else|:
literal|0
argument_list|)
expr_stmt|;
name|d
operator|.
name|setDistributionPrefPriority
argument_list|(
name|dept
operator|.
name|getDistributionPrefPriority
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setStatusTypeStr
argument_list|(
name|dept
operator|.
name|effectiveStatusType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setStatusTypeCode
argument_list|(
name|dept
operator|.
name|effectiveStatusType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setAllowReqTime
argument_list|(
name|dept
operator|.
name|getAllowReqTime
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setAllowReqRoom
argument_list|(
name|dept
operator|.
name|getAllowReqRoom
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setAllowReqDistribution
argument_list|(
name|dept
operator|.
name|getAllowReqDistribution
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setExternalFundingDept
argument_list|(
name|dept
operator|.
name|getExternalFundingDept
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setCanEdit
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|dept
argument_list|,
name|Right
operator|.
name|DepartmentEdit
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|setCanDelete
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|dept
argument_list|,
name|Right
operator|.
name|DepartmentDelete
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|setCanChangeExtManager
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|dept
argument_list|,
name|Right
operator|.
name|DepartmentEditChangeExternalManager
argument_list|)
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|dependentStatuses
init|=
name|dependentStatuses
argument_list|(
name|dept
argument_list|)
decl_stmt|;
name|d
operator|.
name|setDependentStatusesStr
argument_list|(
name|dependentStatusesAsStr
argument_list|(
name|dept
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|setInheritInstructorPreferences
argument_list|(
name|dept
operator|.
name|isInheritInstructorPreferences
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setAllowEvents
argument_list|(
name|dept
operator|.
name|isAllowEvents
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setAllowStudentScheduling
argument_list|(
name|dept
operator|.
name|isAllowStudentScheduling
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setLastChangeStr
argument_list|(
name|lastChangeStr
argument_list|(
name|dept
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|setDependentDepartments
argument_list|(
name|dependentDepartments
argument_list|(
name|dept
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|setDependentStatuses
argument_list|(
name|dependentStatuses
argument_list|)
expr_stmt|;
name|d
operator|.
name|setSatusOptions
argument_list|(
name|getStatusOptions
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setExtDepartmentOptions
argument_list|(
name|getAllDependentDepartmentOptions
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|setExternalId
argument_list|(
name|dept
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setCanEdit
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|dept
argument_list|,
name|Right
operator|.
name|DepartmentEdit
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|addDepartment
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|String
argument_list|>
name|dependentStatuses
parameter_list|(
name|Department
name|dept
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|dependentStatuses
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|dept
operator|.
name|isExternalManager
argument_list|()
operator|&&
name|dept
operator|.
name|getExternalStatusTypes
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|dept
operator|.
name|getExternalStatusTypes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TreeSet
argument_list|<
name|ExternalDepartmentStatusType
argument_list|>
name|set
init|=
operator|new
name|TreeSet
argument_list|<
name|ExternalDepartmentStatusType
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|ExternalDepartmentStatusType
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ExternalDepartmentStatusType
name|e1
parameter_list|,
name|ExternalDepartmentStatusType
name|e2
parameter_list|)
block|{
return|return
name|e1
operator|.
name|getDepartment
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getDepartment
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|set
operator|.
name|addAll
argument_list|(
name|dept
operator|.
name|getExternalStatusTypes
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ExternalDepartmentStatusType
name|t
range|:
name|set
control|)
block|{
name|dependentStatuses
operator|.
name|add
argument_list|(
name|t
operator|.
name|getStatusType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dependentStatuses
return|;
block|}
comment|/* 	 * for display in UI 	 */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|dependentStatusesAsStr
parameter_list|(
name|Department
name|dept
parameter_list|)
block|{
name|List
name|dependentStatuses
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
empty_stmt|;
if|if
condition|(
name|dept
operator|.
name|isExternalManager
argument_list|()
operator|&&
name|dept
operator|.
name|getExternalStatusTypes
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|dept
operator|.
name|getExternalStatusTypes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TreeSet
argument_list|<
name|ExternalDepartmentStatusType
argument_list|>
name|set
init|=
operator|new
name|TreeSet
argument_list|<
name|ExternalDepartmentStatusType
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|ExternalDepartmentStatusType
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ExternalDepartmentStatusType
name|e1
parameter_list|,
name|ExternalDepartmentStatusType
name|e2
parameter_list|)
block|{
return|return
name|e1
operator|.
name|getDepartment
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getDepartment
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|set
operator|.
name|addAll
argument_list|(
name|dept
operator|.
name|getExternalStatusTypes
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ExternalDepartmentStatusType
name|t
range|:
name|set
control|)
block|{
name|dependentStatuses
operator|.
name|add
argument_list|(
name|t
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|": "
operator|+
name|t
operator|.
name|getStatusType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dependentStatuses
return|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|String
argument_list|>
name|dependentDepartments
parameter_list|(
name|Department
name|dept
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|dependentDepartments
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|dept
operator|.
name|isExternalManager
argument_list|()
operator|&&
name|dept
operator|.
name|getExternalStatusTypes
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|dept
operator|.
name|getExternalStatusTypes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TreeSet
argument_list|<
name|ExternalDepartmentStatusType
argument_list|>
name|set
init|=
operator|new
name|TreeSet
argument_list|<
name|ExternalDepartmentStatusType
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|ExternalDepartmentStatusType
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ExternalDepartmentStatusType
name|e1
parameter_list|,
name|ExternalDepartmentStatusType
name|e2
parameter_list|)
block|{
return|return
name|e1
operator|.
name|getDepartment
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getDepartment
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|set
operator|.
name|addAll
argument_list|(
name|dept
operator|.
name|getExternalStatusTypes
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ExternalDepartmentStatusType
name|t
range|:
name|set
control|)
block|{
name|dependentDepartments
operator|.
name|add
argument_list|(
name|t
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dependentDepartments
return|;
block|}
specifier|public
name|String
name|lastChangeStr
parameter_list|(
name|Department
name|dept
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|String
name|lastChangeStr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|HasRole
argument_list|)
operator|&&
name|CommonValues
operator|.
name|Yes
operator|.
name|eq
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
name|UserProperty
operator|.
name|DisplayLastChanges
argument_list|)
argument_list|)
condition|)
block|{
name|List
name|changes
init|=
name|ChangeLog
operator|.
name|findLastNChanges
argument_list|(
name|dept
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|dept
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ChangeLog
name|lastChange
init|=
operator|(
name|changes
operator|==
literal|null
operator|||
name|changes
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|(
name|ChangeLog
operator|)
name|changes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
decl_stmt|;
name|lastChangeStr
operator|=
operator|(
name|lastChange
operator|==
literal|null
condition|?
literal|""
else|:
name|ChangeLog
operator|.
name|sDFdate
operator|.
name|format
argument_list|(
name|lastChange
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
operator|+
literal|" by "
operator|+
name|lastChange
operator|.
name|getManager
argument_list|()
operator|.
name|getShortName
argument_list|()
operator|)
expr_stmt|;
block|}
return|return
name|lastChangeStr
return|;
block|}
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getStatusOptions
parameter_list|()
block|{
name|ReferenceList
name|ref
init|=
operator|new
name|ReferenceList
argument_list|()
decl_stmt|;
name|ref
operator|.
name|addAll
argument_list|(
name|DepartmentStatusType
operator|.
name|findAllForDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|ref
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RefTableEntry
name|r
init|=
operator|(
name|RefTableEntry
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|r
operator|.
name|getReference
argument_list|()
argument_list|,
name|r
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
specifier|public
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|getAllDependentDepartmentOptions
parameter_list|(
name|SessionContext
name|context
parameter_list|)
block|{
name|TreeSet
argument_list|<
name|Department
argument_list|>
name|departments
init|=
name|Department
operator|.
name|findAllNonExternal
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Department
name|d
range|:
name|departments
control|)
block|{
name|String
name|deptCode
init|=
name|d
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
decl_stmt|;
name|String
name|deptName
init|=
name|d
operator|.
name|getDepartment
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|displayName
init|=
name|deptCode
operator|+
literal|" : "
operator|+
name|deptName
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|d
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|displayName
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
block|}
end_class

end_unit

