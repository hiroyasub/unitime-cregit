begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|departments
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|DepartmentInterface
import|;
end_import

begin_comment
comment|//import org.unitime.timetable.gwt.shared.DepartmentInterface.DepartmentCheckCanDeleteRequest;
end_comment

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|DepartmentInterface
operator|.
name|DepartmentPropertiesInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|DepartmentInterface
operator|.
name|DepartmentPropertiesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|ListItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RefTableEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|ReferenceList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|DepartmentPropertiesRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|DepartmentPropertiesBackend
implements|implements
name|GwtRpcImplementation
argument_list|<
name|DepartmentPropertiesRequest
argument_list|,
name|DepartmentPropertiesInterface
argument_list|>
block|{
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getStatusOptions
parameter_list|()
block|{
name|ReferenceList
name|ref
init|=
operator|new
name|ReferenceList
argument_list|()
decl_stmt|;
name|ref
operator|.
name|addAll
argument_list|(
name|DepartmentStatusType
operator|.
name|findAllForDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|ref
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RefTableEntry
name|r
init|=
operator|(
name|RefTableEntry
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|r
operator|.
name|getReference
argument_list|()
argument_list|,
name|r
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
specifier|public
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|getAllDependentDepartments
parameter_list|(
name|SessionContext
name|context
parameter_list|)
block|{
name|TreeSet
argument_list|<
name|Department
argument_list|>
name|departments
init|=
name|Department
operator|.
name|findAllNonExternal
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Department
name|d
range|:
name|departments
control|)
block|{
name|String
name|deptCode
init|=
name|d
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
decl_stmt|;
name|String
name|deptName
init|=
name|d
operator|.
name|getDepartment
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|displayName
init|=
name|deptCode
operator|+
literal|" : "
operator|+
name|deptName
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|d
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|displayName
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
comment|/* 		public HashMap<String, String> getAllStatusOptions() {  			 TreeSet<DepartmentStatusType> departmentStatusTypes =  DepartmentStatusType.findAllForDepartment(); 			 List<String> ret = new ArrayList<String>(); 			 HashMap<String,String> map = new HashMap<String,String>();  			 for (DepartmentStatusType d: departmentStatusTypes) 				 map.put(d.getReference(),d.getLabel()); 				  //map.put(d.getStatus(),d.getLabel()); 			 //map.put(d.getStatus(),d.getLabel()); 				 //ret.add(d.toString()); 			  return map;    		}*/
annotation|@
name|Override
specifier|public
name|DepartmentPropertiesInterface
name|execute
parameter_list|(
name|DepartmentPropertiesRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|DepartmentPropertiesInterface
name|d
init|=
operator|new
name|DepartmentPropertiesInterface
argument_list|()
decl_stmt|;
name|d
operator|.
name|setSatusOptions
argument_list|(
name|getStatusOptions
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setExtDepartmentOptions
argument_list|(
name|getAllDependentDepartments
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|setAcademicSessionName
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|getQualifiers
argument_list|(
literal|"Session"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getQualifierLabel
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|coursesFundingDepartmentsEnabled
init|=
name|ApplicationProperty
operator|.
name|CoursesFundingDepartmentsEnabled
operator|.
name|isTrue
argument_list|()
decl_stmt|;
if|if
condition|(
name|coursesFundingDepartmentsEnabled
condition|)
name|d
operator|.
name|setCoursesFundingDepartmentsEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"getAcademicSessionName"
operator|+
name|d
operator|.
name|getAcademicSessionName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|d
return|;
comment|//return new GwtRpcResponseBoolean(context.hasPermission(request.getDepartmentId(), "Department", Right.DepartmentDelete));
block|}
block|}
end_class

end_unit

