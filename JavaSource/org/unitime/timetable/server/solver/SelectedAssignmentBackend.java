begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|ClassLimitConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|DepartmentSpreadConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|FlexibleConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|GroupConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|InstructorConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|JenrlConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|RoomConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|SpreadConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|StudentOverlapConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|placement
operator|.
name|DeltaTimePreference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Lecture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimetableModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|criteria
operator|.
name|Criterion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solution
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solver
operator|.
name|Solver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|BtbInstructorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|ClassAssignmentDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|DistributionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|InstructorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|RoomInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|SelectedAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|SelectedAssignmentsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|StudentConflictInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|Suggestion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|TimeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|SolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|TimetableSolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|JenrlInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|SelectedAssignmentsRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|SelectedAssignmentBackend
implements|implements
name|GwtRpcImplementation
argument_list|<
name|SelectedAssignmentsRequest
argument_list|,
name|Suggestion
argument_list|>
block|{
specifier|protected
specifier|static
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
name|SolverService
argument_list|<
name|SolverProxy
argument_list|>
name|courseTimetablingSolverService
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Suggestion
name|execute
parameter_list|(
name|SelectedAssignmentsRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|Suggestions
argument_list|)
expr_stmt|;
name|SuggestionsContext
name|cx
init|=
operator|new
name|SuggestionsContext
argument_list|()
decl_stmt|;
name|String
name|instructorFormat
init|=
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
name|UserProperty
operator|.
name|NameFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructorFormat
operator|!=
literal|null
condition|)
name|cx
operator|.
name|setInstructorNameFormat
argument_list|(
name|instructorFormat
argument_list|)
expr_stmt|;
name|SolverProxy
name|solver
init|=
name|courseTimetablingSolverService
operator|.
name|getSolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|warnSolverNotLoaded
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|solver
operator|.
name|isWorking
argument_list|()
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|warnSolverIsWorking
argument_list|()
argument_list|)
throw|;
name|Suggestion
name|response
init|=
name|solver
operator|.
name|getSelectedSuggestion
argument_list|(
name|cx
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getClassId
argument_list|()
operator|!=
literal|null
condition|)
name|response
operator|.
name|setSelectedPlacement
argument_list|(
name|solver
operator|.
name|getClassAssignmentDetails
argument_list|(
name|cx
argument_list|,
name|request
operator|.
name|getClassId
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
specifier|public
specifier|static
name|Placement
name|getPlacement
parameter_list|(
name|TimetableModel
name|model
parameter_list|,
name|SelectedAssignment
name|assignment
parameter_list|,
name|boolean
name|checkValidity
parameter_list|)
block|{
for|for
control|(
name|Lecture
name|lecture
range|:
name|model
operator|.
name|variables
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|lecture
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|assignment
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|TimeLocation
name|timeLocation
init|=
literal|null
decl_stmt|;
for|for
control|(
name|TimeLocation
name|t
range|:
name|lecture
operator|.
name|timeLocations
argument_list|()
control|)
block|{
if|if
condition|(
name|t
operator|.
name|getDayCode
argument_list|()
operator|!=
name|assignment
operator|.
name|getDays
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|t
operator|.
name|getStartSlot
argument_list|()
operator|!=
name|assignment
operator|.
name|getStartSlot
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|t
operator|.
name|getTimePatternId
argument_list|()
operator|.
name|equals
argument_list|(
name|assignment
operator|.
name|getPatternId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|t
operator|.
name|getDatePatternId
argument_list|()
operator|.
name|equals
argument_list|(
name|assignment
operator|.
name|getDatePatternId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|timeLocation
operator|=
name|t
expr_stmt|;
break|break;
block|}
name|List
argument_list|<
name|RoomLocation
argument_list|>
name|roomLocations
init|=
operator|new
name|ArrayList
argument_list|<
name|RoomLocation
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|lecture
operator|.
name|getNrRooms
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Long
name|roomId
range|:
name|assignment
operator|.
name|getRoomIds
argument_list|()
control|)
block|{
for|for
control|(
name|RoomLocation
name|r
range|:
name|lecture
operator|.
name|roomLocations
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|roomId
argument_list|)
condition|)
name|roomLocations
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|timeLocation
operator|!=
literal|null
operator|&&
name|roomLocations
operator|.
name|size
argument_list|()
operator|==
name|lecture
operator|.
name|getNrRooms
argument_list|()
condition|)
block|{
name|Placement
name|placement
init|=
operator|new
name|Placement
argument_list|(
name|lecture
argument_list|,
name|timeLocation
argument_list|,
name|roomLocations
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkValidity
operator|&&
operator|!
name|placement
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
name|placement
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|void
name|setAssigned
parameter_list|(
name|ClassAssignmentDetails
name|details
parameter_list|,
name|SelectedAssignment
name|assignment
parameter_list|)
block|{
name|details
operator|.
name|setAssignedTime
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|details
operator|.
name|hasTimes
argument_list|()
condition|)
for|for
control|(
name|TimeInfo
name|time
range|:
name|details
operator|.
name|getTimes
argument_list|()
control|)
block|{
if|if
condition|(
name|time
operator|.
name|getDays
argument_list|()
operator|==
name|assignment
operator|.
name|getDays
argument_list|()
operator|&&
name|time
operator|.
name|getStartSlot
argument_list|()
operator|==
name|assignment
operator|.
name|getStartSlot
argument_list|()
operator|&&
operator|(
name|assignment
operator|.
name|getPatternId
argument_list|()
operator|==
literal|null
operator|||
name|assignment
operator|.
name|getPatternId
argument_list|()
operator|.
name|equals
argument_list|(
name|time
operator|.
name|getPatternId
argument_list|()
argument_list|)
operator|)
operator|&&
operator|(
name|assignment
operator|.
name|getDatePatternId
argument_list|()
operator|==
literal|null
operator|||
name|assignment
operator|.
name|getDatePatternId
argument_list|()
operator|.
name|equals
argument_list|(
name|time
operator|.
name|getDatePatternId
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|details
operator|.
name|setAssignedTime
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|details
operator|.
name|getNrAssignedRooms
argument_list|()
operator|>
literal|0
condition|)
name|details
operator|.
name|getAssignedRoom
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|details
operator|.
name|hasRooms
argument_list|()
operator|&&
name|assignment
operator|.
name|getRoomIds
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Long
name|roomId
range|:
name|assignment
operator|.
name|getRoomIds
argument_list|()
control|)
block|{
for|for
control|(
name|RoomInfo
name|room
range|:
name|details
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
name|room
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|roomId
argument_list|)
condition|)
block|{
name|details
operator|.
name|setAssignedRoom
argument_list|(
name|room
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
specifier|public
specifier|static
name|ClassAssignmentDetails
name|createClassAssignmentDetails
parameter_list|(
name|SuggestionsContext
name|context
parameter_list|,
name|Solver
name|solver
parameter_list|,
name|Lecture
name|lecture
parameter_list|,
name|Placement
name|oldPlacement
parameter_list|,
name|Placement
name|newPlacement
parameter_list|)
block|{
name|ClassAssignmentDetails
name|details
init|=
name|ClassAssignmentDetailsBackend
operator|.
name|createClassAssignmentDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|lecture
argument_list|,
name|oldPlacement
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|newPlacement
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|newPlacement
operator|.
name|isMultiRoom
argument_list|()
condition|)
block|{
for|for
control|(
name|RoomLocation
name|room
range|:
name|newPlacement
operator|.
name|getRoomLocations
argument_list|()
control|)
block|{
name|details
operator|.
name|setAssignedRoom
argument_list|(
operator|new
name|RoomInfo
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
name|room
operator|.
name|getId
argument_list|()
argument_list|,
name|room
operator|.
name|getRoomSize
argument_list|()
argument_list|,
operator|(
name|room
operator|.
name|getPreference
argument_list|()
operator|==
literal|0
operator|&&
name|lecture
operator|.
name|nrRoomLocations
argument_list|()
operator|==
name|lecture
operator|.
name|getNrRooms
argument_list|()
condition|?
name|PreferenceLevel
operator|.
name|sIntLevelRequired
else|:
name|room
operator|.
name|getPreference
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|RoomLocation
name|room
init|=
name|newPlacement
operator|.
name|getRoomLocation
argument_list|()
decl_stmt|;
name|details
operator|.
name|setAssignedRoom
argument_list|(
operator|new
name|RoomInfo
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
name|room
operator|.
name|getId
argument_list|()
argument_list|,
name|room
operator|.
name|getRoomSize
argument_list|()
argument_list|,
operator|(
name|room
operator|.
name|getPreference
argument_list|()
operator|==
literal|0
operator|&&
name|lecture
operator|.
name|nrRoomLocations
argument_list|()
operator|==
name|lecture
operator|.
name|getNrRooms
argument_list|()
condition|?
name|PreferenceLevel
operator|.
name|sIntLevelRequired
else|:
name|room
operator|.
name|getPreference
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TimeLocation
name|time
init|=
name|newPlacement
operator|.
name|getTimeLocation
argument_list|()
decl_stmt|;
name|int
name|min
init|=
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|time
operator|.
name|getNrSlotsPerMeeting
argument_list|()
operator|-
name|time
operator|.
name|getBreakTime
argument_list|()
decl_stmt|;
name|details
operator|.
name|setAssignedTime
argument_list|(
operator|new
name|TimeInfo
argument_list|(
name|time
operator|.
name|getDayCode
argument_list|()
argument_list|,
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|,
operator|(
name|time
operator|.
name|getPreference
argument_list|()
operator|==
literal|0
operator|&&
name|lecture
operator|.
name|nrTimeLocations
argument_list|()
operator|==
literal|1
condition|?
name|PreferenceLevel
operator|.
name|sIntLevelRequired
else|:
name|time
operator|.
name|getPreference
argument_list|()
operator|)
argument_list|,
name|min
argument_list|,
name|time
operator|.
name|getDatePatternName
argument_list|()
argument_list|,
name|time
operator|.
name|getTimePatternId
argument_list|()
argument_list|,
name|time
operator|.
name|getDatePatternId
argument_list|()
argument_list|,
name|time
operator|.
name|getDatePatternPreference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|lecture
operator|.
name|getInstructorConstraints
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lecture
operator|.
name|getInstructorConstraints
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|InstructorConstraint
name|ic
init|=
operator|(
name|InstructorConstraint
operator|)
name|lecture
operator|.
name|getInstructorConstraints
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|details
operator|.
name|setInstructor
argument_list|(
operator|new
name|InstructorInfo
argument_list|(
name|ic
operator|.
name|getName
argument_list|()
argument_list|,
name|ic
operator|.
name|getResourceId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Criterion
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|criterion
range|:
name|lecture
operator|.
name|getModel
argument_list|()
operator|.
name|getCriteria
argument_list|()
control|)
block|{
if|if
condition|(
name|criterion
operator|instanceof
name|StudentOverlapConflict
condition|)
continue|continue;
if|if
condition|(
name|criterion
operator|instanceof
name|DeltaTimePreference
condition|)
continue|continue;
name|details
operator|.
name|setAssignedObjective
argument_list|(
name|criterion
operator|.
name|getName
argument_list|()
argument_list|,
name|criterion
operator|.
name|getValue
argument_list|(
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|,
name|newPlacement
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|details
return|;
block|}
specifier|public
specifier|static
name|Suggestion
name|createSuggestion
parameter_list|(
name|SuggestionsContext
name|context
parameter_list|,
name|TimetableSolver
name|solver
parameter_list|,
name|Map
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|initialAssignments
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|order
parameter_list|,
name|Collection
argument_list|<
name|Placement
argument_list|>
name|unresolvedConflicts
parameter_list|)
block|{
return|return
name|createSuggestion
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|initialAssignments
argument_list|,
name|order
argument_list|,
name|unresolvedConflicts
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Suggestion
name|createSuggestion
parameter_list|(
name|SuggestionsContext
name|context
parameter_list|,
name|TimetableSolver
name|solver
parameter_list|,
name|Map
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|initialAssignments
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|order
parameter_list|,
name|Collection
argument_list|<
name|Placement
argument_list|>
name|unresolvedConflicts
parameter_list|,
name|Map
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|unresolvedAssignments
parameter_list|)
block|{
name|Suggestion
name|suggestion
init|=
operator|new
name|Suggestion
argument_list|()
decl_stmt|;
name|Assignment
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|assignment
init|=
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|unresolvedConflicts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Placement
name|p
range|:
name|unresolvedConflicts
control|)
block|{
name|suggestion
operator|.
name|addUnresolvedConflict
argument_list|(
name|createClassAssignmentDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|p
operator|.
name|variable
argument_list|()
argument_list|,
name|p
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|initialAssignments
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|JenrlConstraint
argument_list|>
name|jenrls
init|=
operator|new
name|HashSet
argument_list|<
name|JenrlConstraint
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|GroupConstraint
argument_list|>
name|gcs
init|=
operator|new
name|HashSet
argument_list|<
name|GroupConstraint
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|FlexibleConstraint
argument_list|>
name|fcs
init|=
operator|new
name|HashSet
argument_list|<
name|FlexibleConstraint
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Placement
argument_list|,
name|Map
argument_list|<
name|Placement
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|committed
init|=
operator|new
name|HashMap
argument_list|<
name|Placement
argument_list|,
name|Map
argument_list|<
name|Placement
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
name|assignment
operator|.
name|assignedVariables
argument_list|()
control|)
block|{
name|Placement
name|p
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|lecture
argument_list|)
decl_stmt|;
if|if
condition|(
name|unresolvedAssignments
operator|!=
literal|null
operator|&&
name|unresolvedAssignments
operator|.
name|containsKey
argument_list|(
name|lecture
argument_list|)
condition|)
name|p
operator|=
name|unresolvedAssignments
operator|.
name|get
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
name|Placement
name|ini
init|=
name|initialAssignments
operator|.
name|get
argument_list|(
name|p
operator|.
name|variable
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ini
operator|==
literal|null
operator|||
operator|!
name|ini
operator|.
name|equals
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|suggestion
operator|.
name|addDifferentAssignment
argument_list|(
name|createClassAssignmentDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|p
operator|.
name|variable
argument_list|()
argument_list|,
name|ini
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|jenrls
operator|.
name|addAll
argument_list|(
name|lecture
operator|.
name|activeJenrls
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|getCommitedConflicts
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Map
argument_list|<
name|Placement
argument_list|,
name|Integer
argument_list|>
name|x
init|=
operator|new
name|HashMap
argument_list|<
name|Placement
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|lecture
operator|.
name|students
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Student
name|s
init|=
operator|(
name|Student
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Set
name|confs
init|=
name|s
operator|.
name|conflictPlacements
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|confs
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|Iterator
name|j
init|=
name|confs
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Placement
name|commitedPlacement
init|=
operator|(
name|Placement
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|Integer
name|current
init|=
operator|(
name|Integer
operator|)
name|x
operator|.
name|get
argument_list|(
name|commitedPlacement
argument_list|)
decl_stmt|;
name|x
operator|.
name|put
argument_list|(
name|commitedPlacement
argument_list|,
operator|new
name|Integer
argument_list|(
literal|1
operator|+
operator|(
name|current
operator|==
literal|null
condition|?
literal|0
else|:
name|current
operator|.
name|intValue
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|committed
operator|.
name|put
argument_list|(
name|p
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
name|gcs
operator|.
name|addAll
argument_list|(
name|lecture
operator|.
name|groupConstraints
argument_list|()
argument_list|)
expr_stmt|;
name|fcs
operator|.
name|addAll
argument_list|(
name|lecture
operator|.
name|getFlexibleGroupConstraints
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|InstructorConstraint
name|ic
range|:
name|lecture
operator|.
name|getInstructorConstraints
argument_list|()
control|)
block|{
for|for
control|(
name|Lecture
name|other
range|:
name|ic
operator|.
name|variables
argument_list|()
control|)
block|{
name|Placement
name|otherPlacement
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|other
argument_list|)
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|equals
argument_list|(
name|lecture
argument_list|)
operator|||
name|otherPlacement
operator|==
literal|null
condition|)
continue|continue;
name|int
name|pref
init|=
name|ic
operator|.
name|getDistancePreference
argument_list|(
name|p
argument_list|,
name|otherPlacement
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|==
name|PreferenceLevel
operator|.
name|sIntLevelNeutral
condition|)
continue|continue;
name|BtbInstructorInfo
name|conf
init|=
operator|new
name|BtbInstructorInfo
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setOther
argument_list|(
name|createClassAssignmentDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|p
operator|.
name|variable
argument_list|()
argument_list|,
name|p
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAnother
argument_list|(
name|createClassAssignmentDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|otherPlacement
operator|.
name|variable
argument_list|()
argument_list|,
name|otherPlacement
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setPreference
argument_list|(
name|pref
argument_list|)
expr_stmt|;
name|suggestion
operator|.
name|addBtbInstructorConflict
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|unresolvedAssignments
operator|!=
literal|null
condition|)
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|entry
range|:
name|unresolvedAssignments
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Lecture
name|lecture
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Placement
name|p
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|.
name|getValue
argument_list|(
name|lecture
argument_list|)
operator|!=
literal|null
condition|)
continue|continue;
name|Placement
name|ini
init|=
name|initialAssignments
operator|.
name|get
argument_list|(
name|p
operator|.
name|variable
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ini
operator|==
literal|null
operator|||
operator|!
name|ini
operator|.
name|equals
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|suggestion
operator|.
name|addDifferentAssignment
argument_list|(
name|createClassAssignmentDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|p
operator|.
name|variable
argument_list|()
argument_list|,
name|ini
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|jenrls
operator|.
name|addAll
argument_list|(
name|lecture
operator|.
name|activeJenrls
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|getCommitedConflicts
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Map
argument_list|<
name|Placement
argument_list|,
name|Integer
argument_list|>
name|x
init|=
operator|new
name|HashMap
argument_list|<
name|Placement
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|lecture
operator|.
name|students
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Student
name|s
init|=
operator|(
name|Student
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Set
name|confs
init|=
name|s
operator|.
name|conflictPlacements
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|confs
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|Iterator
name|j
init|=
name|confs
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Placement
name|commitedPlacement
init|=
operator|(
name|Placement
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|Integer
name|current
init|=
operator|(
name|Integer
operator|)
name|x
operator|.
name|get
argument_list|(
name|commitedPlacement
argument_list|)
decl_stmt|;
name|x
operator|.
name|put
argument_list|(
name|commitedPlacement
argument_list|,
operator|new
name|Integer
argument_list|(
literal|1
operator|+
operator|(
name|current
operator|==
literal|null
condition|?
literal|0
else|:
name|current
operator|.
name|intValue
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|committed
operator|.
name|put
argument_list|(
name|p
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
name|gcs
operator|.
name|addAll
argument_list|(
name|lecture
operator|.
name|groupConstraints
argument_list|()
argument_list|)
expr_stmt|;
name|fcs
operator|.
name|addAll
argument_list|(
name|lecture
operator|.
name|getFlexibleGroupConstraints
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|InstructorConstraint
name|ic
range|:
name|lecture
operator|.
name|getInstructorConstraints
argument_list|()
control|)
block|{
for|for
control|(
name|Lecture
name|other
range|:
name|ic
operator|.
name|variables
argument_list|()
control|)
block|{
name|Placement
name|otherPlacement
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|other
argument_list|)
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|equals
argument_list|(
name|lecture
argument_list|)
operator|||
name|otherPlacement
operator|==
literal|null
condition|)
continue|continue;
name|int
name|pref
init|=
name|ic
operator|.
name|getDistancePreference
argument_list|(
name|p
argument_list|,
name|otherPlacement
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|==
name|PreferenceLevel
operator|.
name|sIntLevelNeutral
condition|)
continue|continue;
name|BtbInstructorInfo
name|conf
init|=
operator|new
name|BtbInstructorInfo
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setOther
argument_list|(
name|createClassAssignmentDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|p
operator|.
name|variable
argument_list|()
argument_list|,
name|p
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAnother
argument_list|(
name|createClassAssignmentDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|otherPlacement
operator|.
name|variable
argument_list|()
argument_list|,
name|otherPlacement
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setPreference
argument_list|(
name|pref
argument_list|)
expr_stmt|;
name|suggestion
operator|.
name|addBtbInstructorConflict
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|order
operator|!=
literal|null
operator|&&
name|suggestion
operator|.
name|hasDifferentAssignments
argument_list|()
condition|)
name|Collections
operator|.
name|sort
argument_list|(
name|suggestion
operator|.
name|getDifferentAssignments
argument_list|()
argument_list|,
operator|new
name|ClassAssignmentDetailsComparator
argument_list|(
name|order
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|JenrlConstraint
name|jenrl
range|:
name|jenrls
control|)
block|{
if|if
condition|(
name|jenrl
operator|.
name|jenrl
argument_list|()
operator|<=
literal|0.0
condition|)
continue|continue;
name|StudentConflictInfo
name|conf
init|=
operator|new
name|StudentConflictInfo
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setOther
argument_list|(
name|createClassAssignmentDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|jenrl
operator|.
name|first
argument_list|()
argument_list|,
name|assignment
operator|.
name|getValue
argument_list|(
name|jenrl
operator|.
name|first
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAnother
argument_list|(
name|createClassAssignmentDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|jenrl
operator|.
name|second
argument_list|()
argument_list|,
name|assignment
operator|.
name|getValue
argument_list|(
name|jenrl
operator|.
name|second
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|suggestion
operator|.
name|hasDifferentAssignments
argument_list|()
condition|)
block|{
name|int
name|i1
init|=
name|suggestion
operator|.
name|getDifferentAssignments
argument_list|()
operator|.
name|indexOf
argument_list|(
name|conf
operator|.
name|getOther
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i2
init|=
name|suggestion
operator|.
name|getDifferentAssignments
argument_list|()
operator|.
name|indexOf
argument_list|(
name|conf
operator|.
name|getAnother
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|i2
operator|>
literal|0
operator|&&
name|i1
operator|<
name|i2
condition|)
block|{
name|ClassAssignmentDetails
name|d
init|=
name|conf
operator|.
name|getOther
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setOther
argument_list|(
name|conf
operator|.
name|getAnother
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAnother
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
name|conf
operator|.
name|setInfo
argument_list|(
name|ClassAssignmentDetailsBackend
operator|.
name|toJenrlInfo
argument_list|(
operator|new
name|JenrlInfo
argument_list|(
name|solver
argument_list|,
name|jenrl
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|suggestion
operator|.
name|addStudentConflict
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|GroupConstraint
name|gc
range|:
name|gcs
control|)
block|{
if|if
condition|(
name|gc
operator|.
name|isSatisfied
argument_list|(
name|assignment
argument_list|)
condition|)
continue|continue;
name|DistributionInfo
name|dist
init|=
operator|new
name|DistributionInfo
argument_list|()
decl_stmt|;
name|dist
operator|.
name|setInfo
argument_list|(
name|ClassAssignmentDetailsBackend
operator|.
name|toGroupConstraintInfo
argument_list|(
operator|new
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|GroupConstraintInfo
argument_list|(
name|assignment
argument_list|,
name|gc
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Lecture
name|another
range|:
name|gc
operator|.
name|variables
argument_list|()
control|)
block|{
name|Placement
name|anotherPlacement
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|another
argument_list|)
decl_stmt|;
if|if
condition|(
name|anotherPlacement
operator|!=
literal|null
condition|)
name|dist
operator|.
name|addClass
argument_list|(
name|createClassAssignmentDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|another
argument_list|,
name|anotherPlacement
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|suggestion
operator|.
name|addDistributionConflict
argument_list|(
name|dist
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FlexibleConstraint
name|fc
range|:
name|fcs
control|)
block|{
if|if
condition|(
name|fc
operator|.
name|isHard
argument_list|()
operator|||
name|fc
operator|.
name|getNrViolations
argument_list|(
name|assignment
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Placement
argument_list|>
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
argument_list|()
argument_list|)
operator|==
literal|0.0
condition|)
continue|continue;
name|DistributionInfo
name|dist
init|=
operator|new
name|DistributionInfo
argument_list|()
decl_stmt|;
name|dist
operator|.
name|setInfo
argument_list|(
name|ClassAssignmentDetailsBackend
operator|.
name|toGroupConstraintInfo
argument_list|(
operator|new
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|GroupConstraintInfo
argument_list|(
name|assignment
argument_list|,
name|fc
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Lecture
name|another
range|:
name|fc
operator|.
name|variables
argument_list|()
control|)
block|{
name|Placement
name|anotherPlacement
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|another
argument_list|)
decl_stmt|;
if|if
condition|(
name|anotherPlacement
operator|!=
literal|null
condition|)
name|dist
operator|.
name|addClass
argument_list|(
name|createClassAssignmentDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|another
argument_list|,
name|anotherPlacement
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|suggestion
operator|.
name|addDistributionConflict
argument_list|(
name|dist
argument_list|)
expr_stmt|;
block|}
block|}
name|TimetableModel
name|m
init|=
operator|(
name|TimetableModel
operator|)
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|suggestion
operator|.
name|setValue
argument_list|(
name|m
operator|.
name|getTotalValue
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
name|suggestion
operator|.
name|setUnassignedVariables
argument_list|(
name|m
operator|.
name|nrUnassignedVariables
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Criterion
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|c
range|:
name|m
operator|.
name|getCriteria
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|instanceof
name|StudentOverlapConflict
condition|)
continue|continue;
if|if
condition|(
name|c
operator|instanceof
name|DeltaTimePreference
condition|)
continue|continue;
name|suggestion
operator|.
name|setCriterion
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|,
name|c
operator|.
name|getValue
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|suggestion
return|;
block|}
specifier|protected
specifier|static
name|void
name|fillDescriptions
parameter_list|(
name|Assignment
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|assignment
parameter_list|,
name|Placement
name|p
parameter_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|descriptions
parameter_list|)
block|{
for|for
control|(
name|Constraint
name|constraint
range|:
name|p
operator|.
name|variable
argument_list|()
operator|.
name|hardConstraints
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Placement
argument_list|>
name|conflicts
init|=
operator|new
name|HashSet
argument_list|<
name|Placement
argument_list|>
argument_list|()
decl_stmt|;
name|constraint
operator|.
name|computeConflicts
argument_list|(
name|assignment
argument_list|,
name|p
argument_list|,
name|conflicts
argument_list|)
expr_stmt|;
for|for
control|(
name|Placement
name|conflict
range|:
name|conflicts
control|)
block|{
if|if
condition|(
operator|!
name|descriptions
operator|.
name|containsKey
argument_list|(
name|conflict
operator|.
name|variable
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|constraint
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|constraint
operator|instanceof
name|RoomConstraint
condition|)
block|{
name|name
operator|=
literal|"Room "
operator|+
name|constraint
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|constraint
operator|instanceof
name|InstructorConstraint
condition|)
block|{
name|name
operator|=
literal|"Instructor "
operator|+
name|constraint
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|constraint
operator|instanceof
name|GroupConstraint
condition|)
block|{
name|name
operator|=
literal|"Distribution "
operator|+
name|constraint
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|constraint
operator|instanceof
name|DepartmentSpreadConstraint
condition|)
block|{
name|name
operator|=
literal|"Balancing of department "
operator|+
name|constraint
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|constraint
operator|instanceof
name|SpreadConstraint
condition|)
block|{
name|name
operator|=
literal|"Same subpart spread "
operator|+
name|constraint
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|constraint
operator|instanceof
name|ClassLimitConstraint
condition|)
block|{
name|name
operator|=
literal|"Class limit "
operator|+
name|constraint
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|descriptions
operator|.
name|put
argument_list|(
name|conflict
operator|.
name|variable
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
name|Suggestion
name|computeSuggestion
parameter_list|(
name|SuggestionsContext
name|context
parameter_list|,
name|TimetableSolver
name|solver
parameter_list|,
name|List
argument_list|<
name|SelectedAssignment
argument_list|>
name|assignments
parameter_list|,
name|Placement
name|placement
parameter_list|)
block|{
name|Suggestion
name|ret
init|=
literal|null
decl_stmt|;
name|Solution
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|solution
init|=
name|solver
operator|.
name|currentSolution
argument_list|()
decl_stmt|;
name|TimetableModel
name|model
init|=
operator|(
name|TimetableModel
operator|)
name|solution
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|Assignment
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|assignment
init|=
name|solution
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Lecture
argument_list|>
name|unAssignedVariables
init|=
operator|new
name|ArrayList
argument_list|<
name|Lecture
argument_list|>
argument_list|(
name|assignment
operator|.
name|unassignedVariables
argument_list|(
name|model
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|initialAssignments
init|=
operator|new
name|HashMap
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Lecture
name|lec
range|:
name|assignment
operator|.
name|assignedVariables
argument_list|()
control|)
name|initialAssignments
operator|.
name|put
argument_list|(
name|lec
argument_list|,
name|assignment
operator|.
name|getValue
argument_list|(
name|lec
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|conflictsToResolve
init|=
operator|new
name|HashMap
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|resolvedLectures
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|unresolvedLectures
init|=
operator|new
name|HashMap
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Placement
argument_list|>
name|hints
init|=
operator|new
name|ArrayList
argument_list|<
name|Placement
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|descriptions
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignments
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SelectedAssignment
name|a
range|:
name|assignments
control|)
block|{
name|Placement
name|plac
init|=
name|getPlacement
argument_list|(
name|model
argument_list|,
name|a
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|plac
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
operator|!
name|plac
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|String
name|reason
init|=
name|plac
operator|.
name|getNotValidReason
argument_list|(
name|assignment
argument_list|,
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.UseAmPm"
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|reason
operator|==
literal|null
condition|?
literal|"room or instructor not avaiable"
else|:
name|reason
argument_list|)
throw|;
block|}
name|Lecture
name|lect
init|=
operator|(
name|Lecture
operator|)
name|plac
operator|.
name|variable
argument_list|()
decl_stmt|;
if|if
condition|(
name|placement
operator|!=
literal|null
operator|&&
name|placement
operator|.
name|variable
argument_list|()
operator|.
name|equals
argument_list|(
name|lect
argument_list|)
condition|)
continue|continue;
name|hints
operator|.
name|add
argument_list|(
name|plac
argument_list|)
expr_stmt|;
name|fillDescriptions
argument_list|(
name|assignment
argument_list|,
name|plac
argument_list|,
name|descriptions
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Placement
argument_list|>
name|conflicts
init|=
name|model
operator|.
name|conflictValues
argument_list|(
name|assignment
argument_list|,
name|plac
argument_list|)
decl_stmt|;
for|for
control|(
name|Placement
name|conflictPlacement
range|:
name|conflicts
control|)
block|{
name|conflictsToResolve
operator|.
name|put
argument_list|(
name|conflictPlacement
operator|.
name|variable
argument_list|()
argument_list|,
name|conflictPlacement
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|unassign
argument_list|(
literal|0
argument_list|,
name|conflictPlacement
operator|.
name|variable
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|conflicts
operator|.
name|contains
argument_list|(
name|plac
argument_list|)
condition|)
block|{
name|resolvedLectures
operator|.
name|add
argument_list|(
name|lect
operator|.
name|getClassId
argument_list|()
argument_list|)
expr_stmt|;
name|conflictsToResolve
operator|.
name|remove
argument_list|(
name|lect
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|plac
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unresolvedLectures
operator|.
name|put
argument_list|(
name|plac
operator|.
name|variable
argument_list|()
argument_list|,
name|plac
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
block|{
name|fillDescriptions
argument_list|(
name|assignment
argument_list|,
name|placement
argument_list|,
name|descriptions
argument_list|)
expr_stmt|;
name|Lecture
name|lect
init|=
operator|(
name|Lecture
operator|)
name|placement
operator|.
name|variable
argument_list|()
decl_stmt|;
name|Set
name|conflicts
init|=
name|model
operator|.
name|conflictValues
argument_list|(
name|assignment
argument_list|,
name|placement
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|conflicts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Placement
name|conflictPlacement
init|=
operator|(
name|Placement
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|conflictsToResolve
operator|.
name|put
argument_list|(
name|conflictPlacement
operator|.
name|variable
argument_list|()
argument_list|,
name|conflictPlacement
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|unassign
argument_list|(
literal|0
argument_list|,
name|conflictPlacement
operator|.
name|variable
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|conflicts
operator|.
name|contains
argument_list|(
name|placement
argument_list|)
condition|)
block|{
name|resolvedLectures
operator|.
name|add
argument_list|(
name|lect
operator|.
name|getClassId
argument_list|()
argument_list|)
expr_stmt|;
name|conflictsToResolve
operator|.
name|remove
argument_list|(
name|lect
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|placement
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unresolvedLectures
operator|.
name|put
argument_list|(
name|placement
operator|.
name|variable
argument_list|()
argument_list|,
name|placement
argument_list|)
expr_stmt|;
block|}
block|}
name|ret
operator|=
name|createSuggestion
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|initialAssignments
argument_list|,
literal|null
argument_list|,
name|conflictsToResolve
operator|.
name|values
argument_list|()
argument_list|,
name|unresolvedLectures
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setCanAssign
argument_list|(
name|unresolvedLectures
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
name|ret
operator|.
name|setPlacement
argument_list|(
name|createClassAssignmentDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|placement
operator|.
name|variable
argument_list|()
argument_list|,
name|placement
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Placement
name|plac
range|:
name|hints
control|)
block|{
name|Lecture
name|lect
init|=
name|plac
operator|.
name|variable
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|.
name|getValue
argument_list|(
name|lect
argument_list|)
operator|!=
literal|null
condition|)
name|assignment
operator|.
name|unassign
argument_list|(
literal|0
argument_list|,
name|lect
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Lecture
name|lect
range|:
name|unAssignedVariables
control|)
block|{
if|if
condition|(
name|assignment
operator|.
name|getValue
argument_list|(
name|lect
argument_list|)
operator|!=
literal|null
condition|)
name|assignment
operator|.
name|unassign
argument_list|(
literal|0
argument_list|,
name|lect
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
name|assignment
operator|.
name|unassign
argument_list|(
literal|0
argument_list|,
name|placement
operator|.
name|variable
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Placement
name|plac
range|:
name|initialAssignments
operator|.
name|values
argument_list|()
control|)
block|{
name|Lecture
name|lect
init|=
name|plac
operator|.
name|variable
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|plac
operator|.
name|equals
argument_list|(
name|assignment
operator|.
name|getValue
argument_list|(
name|lect
argument_list|)
argument_list|)
condition|)
name|assignment
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|plac
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ret
operator|.
name|hasDifferentAssignments
argument_list|()
condition|)
for|for
control|(
name|ClassAssignmentDetails
name|d
range|:
name|ret
operator|.
name|getDifferentAssignments
argument_list|()
control|)
name|d
operator|.
name|setConflict
argument_list|(
name|descriptions
operator|.
name|get
argument_list|(
name|d
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|.
name|hasUnresolvedConflicts
argument_list|()
condition|)
for|for
control|(
name|ClassAssignmentDetails
name|d
range|:
name|ret
operator|.
name|getUnresolvedConflicts
argument_list|()
control|)
name|d
operator|.
name|setConflict
argument_list|(
name|descriptions
operator|.
name|get
argument_list|(
name|d
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Criterion
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|c
range|:
name|model
operator|.
name|getCriteria
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|instanceof
name|StudentOverlapConflict
condition|)
continue|continue;
if|if
condition|(
name|c
operator|instanceof
name|DeltaTimePreference
condition|)
continue|continue;
name|ret
operator|.
name|setBaseCriterion
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|,
name|c
operator|.
name|getValue
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|setBaseValue
argument_list|(
name|model
operator|.
name|getTotalValue
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setBaseUnassignedVariables
argument_list|(
name|model
operator|.
name|nrUnassignedVariables
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
class|class
name|ClassAssignmentDetailsComparator
implements|implements
name|Comparator
argument_list|<
name|ClassAssignmentDetails
argument_list|>
block|{
specifier|private
name|List
argument_list|<
name|Long
argument_list|>
name|iOrder
decl_stmt|;
specifier|public
name|ClassAssignmentDetailsComparator
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|order
parameter_list|)
block|{
name|iOrder
operator|=
name|order
expr_stmt|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|ClassAssignmentDetails
name|d1
parameter_list|,
name|ClassAssignmentDetails
name|d2
parameter_list|)
block|{
name|int
name|i1
init|=
name|iOrder
operator|.
name|indexOf
argument_list|(
name|d1
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i2
init|=
name|iOrder
operator|.
name|indexOf
argument_list|(
name|d2
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Integer
argument_list|(
name|i1
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
operator|new
name|Integer
argument_list|(
name|i2
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

