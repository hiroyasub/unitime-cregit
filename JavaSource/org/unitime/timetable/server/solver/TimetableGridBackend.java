begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|SessionAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|Query
operator|.
name|TermMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TimetableGridInterface
operator|.
name|TimetableGridRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TimetableGridInterface
operator|.
name|TimetableGridResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|RoomAvailabilityInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|PageMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|PageMessageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|SolverType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TimetableGridInterface
operator|.
name|TimetableGridCell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TimetableGridInterface
operator|.
name|TimetableGridModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ConstraintInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ItypeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ItypeDescDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolutionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|solver
operator|.
name|TimetableGridHelper
operator|.
name|BgMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|solver
operator|.
name|TimetableGridHelper
operator|.
name|OrderBy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|solver
operator|.
name|TimetableGridHelper
operator|.
name|ResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|SolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|StudentGroupInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|TimetableInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|RoomAvailability
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|TimetableGridRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TimetableGridBackend
implements|implements
name|GwtRpcImplementation
argument_list|<
name|TimetableGridRequest
argument_list|,
name|TimetableGridResponse
argument_list|>
block|{
specifier|protected
specifier|static
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|GwtConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
name|SolverService
argument_list|<
name|SolverProxy
argument_list|>
name|courseTimetablingSolverService
decl_stmt|;
annotation|@
name|Override
specifier|public
name|TimetableGridResponse
name|execute
parameter_list|(
name|TimetableGridRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|TimetableGrid
argument_list|)
expr_stmt|;
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"TimetableGridTable.week"
argument_list|,
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|getParameterValue
argument_list|(
literal|"weeks"
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"TimetableGridTable.resourceType"
argument_list|,
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|getParameterValue
argument_list|(
literal|"resource"
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"TimetableGridTable.findString"
argument_list|,
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|getParameterValue
argument_list|(
literal|"filter"
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"TimetableGridTable.day"
argument_list|,
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|getParameterValue
argument_list|(
literal|"days"
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"TimetableGridTable.times"
argument_list|,
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|getParameterValue
argument_list|(
literal|"times"
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"TimetableGridTable.dispMode"
argument_list|,
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|getParameterValue
argument_list|(
literal|"dispMode"
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"TimetableGridTable.bgMode"
argument_list|,
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|getParameterValue
argument_list|(
literal|"background"
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"TimetableGridTable.showUselessTimes"
argument_list|,
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|getParameterValue
argument_list|(
literal|"showFreeTimes"
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"TimetableGridTable.showComments"
argument_list|,
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|getParameterValue
argument_list|(
literal|"showPreferences"
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"TimetableGridTable.showInstructors"
argument_list|,
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|getParameterValue
argument_list|(
literal|"showInstructors"
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"TimetableGridTable.showEvents"
argument_list|,
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|getParameterValue
argument_list|(
literal|"showEvents"
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"TimetableGridTable.showTimes"
argument_list|,
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|getParameterValue
argument_list|(
literal|"showTimes"
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"TimetableGridTable.orderBy"
argument_list|,
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|getParameterValue
argument_list|(
literal|"orderBy"
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"TimetableGridTable.showTitles"
argument_list|,
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|getParameterValue
argument_list|(
literal|"showTitles"
argument_list|)
argument_list|)
expr_stmt|;
name|TimetableGridResponse
name|response
init|=
operator|new
name|TimetableGridResponse
argument_list|()
decl_stmt|;
name|Session
name|acadSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
decl_stmt|;
name|DatePattern
name|defaultDatePattern
init|=
name|acadSession
operator|.
name|getDefaultDatePatternNotNull
argument_list|()
decl_stmt|;
name|response
operator|.
name|setDefaultDatePatternName
argument_list|(
name|defaultDatePattern
operator|==
literal|null
condition|?
literal|null
else|:
name|defaultDatePattern
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|TimetableGridContext
name|cx
init|=
operator|new
name|TimetableGridContext
argument_list|(
name|request
operator|.
name|getFilter
argument_list|()
argument_list|,
name|acadSession
argument_list|)
decl_stmt|;
name|String
name|instructorFormat
init|=
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
name|UserProperty
operator|.
name|NameFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructorFormat
operator|!=
literal|null
condition|)
name|cx
operator|.
name|setInstructorNameFormat
argument_list|(
name|instructorFormat
argument_list|)
expr_stmt|;
name|response
operator|.
name|setWeekOffset
argument_list|(
name|cx
operator|.
name|getWeekOffset
argument_list|()
argument_list|)
expr_stmt|;
name|SolverProxy
name|solver
init|=
name|courseTimetablingSolverService
operator|.
name|getSolver
argument_list|()
decl_stmt|;
name|SolverPageBackend
operator|.
name|fillSolverWarnings
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|SolverType
operator|.
name|COURSE
argument_list|,
name|response
argument_list|)
expr_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
name|cx
operator|.
name|setInstructorNameFormat
argument_list|(
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.InstructorFormat"
argument_list|,
name|cx
operator|.
name|getInstructorNameFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|fixInstructors
init|=
name|ApplicationProperty
operator|.
name|TimeGridFixInstructors
operator|.
name|isTrue
argument_list|()
operator|&&
name|cx
operator|.
name|isShowInstructor
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TimetableGridModel
argument_list|>
name|models
init|=
name|solver
operator|.
name|getTimetableGridTables
argument_list|(
name|cx
argument_list|)
decl_stmt|;
if|if
condition|(
name|models
operator|!=
literal|null
condition|)
for|for
control|(
name|TimetableGridModel
name|model
range|:
name|models
control|)
block|{
if|if
condition|(
name|fixInstructors
condition|)
name|TimetableGridSolverHelper
operator|.
name|fixInstructors
argument_list|(
name|model
argument_list|,
name|cx
argument_list|)
expr_stmt|;
if|if
condition|(
name|cx
operator|.
name|isShowClassNameTwoLines
argument_list|()
operator|||
name|cx
operator|.
name|isShowCourseTitle
argument_list|()
condition|)
name|TimetableGridSolverHelper
operator|.
name|fixClassNames
argument_list|(
name|model
argument_list|,
name|cx
argument_list|)
expr_stmt|;
if|else if
condition|(
name|cx
operator|.
name|isShowCrossLists
argument_list|()
condition|)
name|TimetableGridSolverHelper
operator|.
name|addCrosslistedNames
argument_list|(
name|model
argument_list|,
name|cx
argument_list|)
expr_stmt|;
if|if
condition|(
name|cx
operator|.
name|getBgMode
argument_list|()
operator|==
name|BgMode
operator|.
name|InstructionalType
operator|.
name|ordinal
argument_list|()
condition|)
name|TimetableGridSolverHelper
operator|.
name|setInstructionalTypeBackgroundColors
argument_list|(
name|model
argument_list|,
name|cx
argument_list|)
expr_stmt|;
name|TimetableGridHelper
operator|.
name|computeIndexes
argument_list|(
name|model
argument_list|,
name|cx
argument_list|)
expr_stmt|;
name|response
operator|.
name|addModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
name|String
name|ts
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ts
operator|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"RoomAvailability.TimeStamp"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|ts
operator|==
literal|null
condition|)
name|response
operator|.
name|addPageMessage
argument_list|(
operator|new
name|PageMessage
argument_list|(
name|PageMessageType
operator|.
name|WARNING
argument_list|,
name|MESSAGES
operator|.
name|warnCourseSolverNoRoomAvailability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|response
operator|.
name|addPageMessage
argument_list|(
operator|new
name|PageMessage
argument_list|(
name|PageMessageType
operator|.
name|INFO
argument_list|,
name|MESSAGES
operator|.
name|infoCourseSolverRoomAvailabilityLastUpdated
argument_list|(
name|ts
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|Query
name|filter
init|=
literal|null
decl_stmt|;
name|String
name|filterStr
init|=
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|getParameterValue
argument_list|(
literal|"filter"
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterStr
operator|!=
literal|null
operator|&&
operator|!
name|filterStr
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|filter
operator|=
operator|new
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|Query
argument_list|(
name|filterStr
argument_list|)
expr_stmt|;
name|String
name|solutionIdsStr
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|SelectedSolution
argument_list|)
decl_stmt|;
if|if
condition|(
name|solutionIdsStr
operator|==
literal|null
operator|||
name|solutionIdsStr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|ApplicationProperty
operator|.
name|TimeGridShowAllCommitted
operator|.
name|isTrue
argument_list|()
condition|)
block|{
for|for
control|(
name|Long
name|id
range|:
operator|(
name|List
argument_list|<
name|Long
argument_list|>
operator|)
name|SolutionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select s.uniqueId from Solution s where s.commited = true and s.owner.session = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|acadSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|solutionIdsStr
operator|==
literal|null
condition|)
name|solutionIdsStr
operator|=
name|id
operator|.
name|toString
argument_list|()
expr_stmt|;
else|else
name|solutionIdsStr
operator|+=
operator|(
name|solutionIdsStr
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
name|id
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|SolverGroup
name|g
range|:
name|SolverGroup
operator|.
name|getUserSolverGroups
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
control|)
block|{
for|for
control|(
name|Long
name|id
range|:
operator|(
name|List
argument_list|<
name|Long
argument_list|>
operator|)
name|SolutionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select s.uniqueId from Solution s where s.commited = true and s.owner = :groupId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"groupId"
argument_list|,
name|g
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|solutionIdsStr
operator|==
literal|null
condition|)
name|solutionIdsStr
operator|=
name|id
operator|.
name|toString
argument_list|()
expr_stmt|;
else|else
name|solutionIdsStr
operator|+=
operator|(
name|solutionIdsStr
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
name|id
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|solutionIdsStr
operator|==
literal|null
operator|||
name|solutionIdsStr
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|errorTimetableGridNoSolution
argument_list|()
argument_list|)
throw|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SolutionDAO
name|dao
init|=
operator|new
name|SolutionDAO
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|dao
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|cx
operator|.
name|getResourceType
argument_list|()
operator|==
name|ResourceType
operator|.
name|ROOM
operator|.
name|ordinal
argument_list|()
condition|)
block|{
if|if
condition|(
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|.
name|activate
argument_list|(
name|acadSession
argument_list|,
name|cx
operator|.
name|getSessionStartDate
argument_list|()
argument_list|,
name|cx
operator|.
name|getSessionEndDate
argument_list|()
argument_list|,
name|RoomAvailabilityInterface
operator|.
name|sClassType
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|ts
init|=
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|.
name|getTimeStamp
argument_list|(
name|cx
operator|.
name|getSessionStartDate
argument_list|()
argument_list|,
name|cx
operator|.
name|getSessionEndDate
argument_list|()
argument_list|,
name|RoomAvailabilityInterface
operator|.
name|sClassType
argument_list|)
decl_stmt|;
if|if
condition|(
name|ts
operator|==
literal|null
condition|)
name|response
operator|.
name|addPageMessage
argument_list|(
operator|new
name|PageMessage
argument_list|(
name|PageMessageType
operator|.
name|WARNING
argument_list|,
name|MESSAGES
operator|.
name|warnCourseSolverNoRoomAvailability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|response
operator|.
name|addPageMessage
argument_list|(
operator|new
name|PageMessage
argument_list|(
name|PageMessageType
operator|.
name|INFO
argument_list|,
name|MESSAGES
operator|.
name|infoCourseSolverRoomAvailabilityLastUpdated
argument_list|(
name|ts
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct r from "
operator|+
literal|"Location as r inner join r.assignments as a where "
operator|+
literal|"a.solution.uniqueId in ("
operator|+
name|solutionIdsStr
operator|+
literal|")"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|q
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|room
init|=
operator|(
name|Location
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|match
argument_list|(
name|filter
argument_list|,
name|room
argument_list|)
condition|)
continue|continue;
name|response
operator|.
name|addModel
argument_list|(
name|TimetableGridSolutionHelper
operator|.
name|createModel
argument_list|(
name|solutionIdsStr
argument_list|,
name|room
argument_list|,
name|hibSession
argument_list|,
name|cx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|cx
operator|.
name|getResourceType
argument_list|()
operator|==
name|ResourceType
operator|.
name|INSTRUCTOR
operator|.
name|ordinal
argument_list|()
condition|)
block|{
if|if
condition|(
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|!=
literal|null
operator|&&
name|cx
operator|.
name|isShowEvents
argument_list|()
condition|)
block|{
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|.
name|activate
argument_list|(
name|acadSession
argument_list|,
name|cx
operator|.
name|getSessionStartDate
argument_list|()
argument_list|,
name|cx
operator|.
name|getSessionEndDate
argument_list|()
argument_list|,
name|RoomAvailabilityInterface
operator|.
name|sClassType
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|ts
init|=
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|.
name|getTimeStamp
argument_list|(
name|cx
operator|.
name|getSessionStartDate
argument_list|()
argument_list|,
name|cx
operator|.
name|getSessionEndDate
argument_list|()
argument_list|,
name|RoomAvailabilityInterface
operator|.
name|sClassType
argument_list|)
decl_stmt|;
if|if
condition|(
name|ts
operator|==
literal|null
condition|)
name|response
operator|.
name|addPageMessage
argument_list|(
operator|new
name|PageMessage
argument_list|(
name|PageMessageType
operator|.
name|WARNING
argument_list|,
name|MESSAGES
operator|.
name|warnCourseSolverNoRoomAvailability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|response
operator|.
name|addPageMessage
argument_list|(
operator|new
name|PageMessage
argument_list|(
name|PageMessageType
operator|.
name|INFO
argument_list|,
name|MESSAGES
operator|.
name|infoCourseSolverRoomAvailabilityLastUpdated
argument_list|(
name|ts
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|instructorNameFormat
init|=
name|UserProperty
operator|.
name|NameFormat
operator|.
name|get
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|Query
name|q
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|TimetableGridUseClassInstructors
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|q
operator|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct i.instructor from "
operator|+
literal|"ClassInstructor as i inner join i.classInstructing.assignments as a where "
operator|+
literal|"a.solution.uniqueId in ("
operator|+
name|solutionIdsStr
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|q
operator|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct i from "
operator|+
literal|"DepartmentalInstructor as i inner join i.assignments as a where "
operator|+
literal|"a.solution.uniqueId in ("
operator|+
name|solutionIdsStr
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|HashSet
name|puids
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|q
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
operator|(
name|instructor
operator|.
name|getLastName
argument_list|()
operator|+
literal|", "
operator|+
name|instructor
operator|.
name|getFirstName
argument_list|()
operator|+
literal|" "
operator|+
name|instructor
operator|.
name|getMiddleName
argument_list|()
operator|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|match
argument_list|(
name|filter
argument_list|,
name|name
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
operator|||
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|puids
operator|.
name|add
argument_list|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|TimetableGridModel
name|m
init|=
name|TimetableGridSolutionHelper
operator|.
name|createModel
argument_list|(
name|solutionIdsStr
argument_list|,
name|instructor
argument_list|,
name|hibSession
argument_list|,
name|cx
argument_list|)
decl_stmt|;
name|m
operator|.
name|setName
argument_list|(
name|instructor
operator|.
name|getName
argument_list|(
name|instructorNameFormat
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|addModel
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|cx
operator|.
name|getResourceType
argument_list|()
operator|==
name|ResourceType
operator|.
name|DEPARTMENT
operator|.
name|ordinal
argument_list|()
condition|)
block|{
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct d from "
operator|+
literal|"Assignment a inner join a.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings as o inner join o.subjectArea.department as d where "
operator|+
literal|"a.solution.uniqueId in ("
operator|+
name|solutionIdsStr
operator|+
literal|") and o.isControl=true"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|q
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|dept
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|dept
operator|.
name|getAbbreviation
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|match
argument_list|(
name|filter
argument_list|,
name|name
argument_list|)
condition|)
continue|continue;
name|response
operator|.
name|addModel
argument_list|(
name|TimetableGridSolutionHelper
operator|.
name|createModel
argument_list|(
name|solutionIdsStr
argument_list|,
name|dept
argument_list|,
name|hibSession
argument_list|,
name|cx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|cx
operator|.
name|getResourceType
argument_list|()
operator|==
name|ResourceType
operator|.
name|SUBJECT_AREA
operator|.
name|ordinal
argument_list|()
condition|)
block|{
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct sa from "
operator|+
literal|"Assignment a inner join a.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings as o inner join o.subjectArea as sa where "
operator|+
literal|"a.solution.uniqueId in ("
operator|+
name|solutionIdsStr
operator|+
literal|") and o.isControl=true"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|q
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SubjectArea
name|sa
init|=
operator|(
name|SubjectArea
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|sa
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|match
argument_list|(
name|filter
argument_list|,
name|name
argument_list|)
condition|)
continue|continue;
name|response
operator|.
name|addModel
argument_list|(
name|TimetableGridSolutionHelper
operator|.
name|createModel
argument_list|(
name|solutionIdsStr
argument_list|,
name|sa
argument_list|,
name|hibSession
argument_list|,
name|cx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|cx
operator|.
name|getResourceType
argument_list|()
operator|==
name|ResourceType
operator|.
name|CURRICULUM
operator|.
name|ordinal
argument_list|()
condition|)
block|{
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select cc.classification from "
operator|+
literal|"CurriculumCourse cc, Assignment a inner join a.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings as co where "
operator|+
literal|"a.solution.uniqueId in ("
operator|+
name|solutionIdsStr
operator|+
literal|") and co = cc.course"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|infos
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|q
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CurriculumClassification
name|cc
init|=
operator|(
name|CurriculumClassification
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|infos
operator|.
name|add
argument_list|(
name|cc
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|String
name|name
init|=
name|cc
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" "
operator|+
name|cc
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|match
argument_list|(
name|filter
argument_list|,
name|name
argument_list|)
condition|)
continue|continue;
name|response
operator|.
name|addModel
argument_list|(
name|TimetableGridSolutionHelper
operator|.
name|createModel
argument_list|(
name|solutionIdsStr
argument_list|,
name|cc
argument_list|,
name|hibSession
argument_list|,
name|cx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|cx
operator|.
name|getResourceType
argument_list|()
operator|==
name|ResourceType
operator|.
name|STUDENT_GROUP
operator|.
name|ordinal
argument_list|()
condition|)
block|{
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from ConstraintInfo c inner join c.assignments a where a.solution.uniqueId in ("
operator|+
name|solutionIdsStr
operator|+
literal|") and c.definition.name = 'GroupInfo'"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|infos
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|q
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ConstraintInfo
name|g
init|=
operator|(
name|ConstraintInfo
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|infos
operator|.
name|add
argument_list|(
name|g
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|match
argument_list|(
name|filter
argument_list|,
name|g
operator|.
name|getOpt
argument_list|()
argument_list|)
condition|)
continue|continue;
name|TimetableInfo
name|info
init|=
name|g
operator|.
name|getInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
operator|&&
name|info
operator|instanceof
name|StudentGroupInfo
condition|)
name|response
operator|.
name|addModel
argument_list|(
name|TimetableGridSolutionHelper
operator|.
name|createModel
argument_list|(
name|solutionIdsStr
argument_list|,
operator|(
name|StudentGroupInfo
operator|)
name|info
argument_list|,
name|hibSession
argument_list|,
name|cx
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|getModels
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|q
operator|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct r.group from StudentGroupReservation r, Assignment a inner join a.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering as io where "
operator|+
literal|"a.solution.uniqueId in ("
operator|+
name|solutionIdsStr
operator|+
literal|") and io = r.instructionalOffering"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|q
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StudentGroup
name|g
init|=
operator|(
name|StudentGroup
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|match
argument_list|(
name|filter
argument_list|,
name|g
operator|.
name|getGroupName
argument_list|()
argument_list|)
operator|||
name|match
argument_list|(
name|filter
argument_list|,
name|g
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|)
condition|)
name|response
operator|.
name|addModel
argument_list|(
name|TimetableGridSolutionHelper
operator|.
name|createModel
argument_list|(
name|solutionIdsStr
argument_list|,
name|g
argument_list|,
name|hibSession
argument_list|,
name|cx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GwtRpcException
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
for|for
control|(
name|TimetableGridModel
name|model
range|:
name|response
operator|.
name|getModels
argument_list|()
control|)
name|TimetableGridHelper
operator|.
name|computeIndexes
argument_list|(
name|model
argument_list|,
name|cx
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|getDefaultDatePatternName
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|TimetableGridModel
name|model
range|:
name|response
operator|.
name|getModels
argument_list|()
control|)
for|for
control|(
name|TimetableGridCell
name|cell
range|:
name|model
operator|.
name|getCells
argument_list|()
control|)
if|if
condition|(
name|cell
operator|.
name|hasDate
argument_list|()
operator|&&
name|response
operator|.
name|getDefaultDatePatternName
argument_list|()
operator|.
name|equals
argument_list|(
name|cell
operator|.
name|getDate
argument_list|()
argument_list|)
condition|)
name|cell
operator|.
name|setDate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|OrderBy
name|order
init|=
name|OrderBy
operator|.
name|values
argument_list|()
index|[
name|Integer
operator|.
name|parseInt
argument_list|(
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|getParameterValue
argument_list|(
literal|"orderBy"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
index|]
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|response
operator|.
name|getModels
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|TimetableGridModel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|TimetableGridModel
name|m1
parameter_list|,
name|TimetableGridModel
name|m2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|compareModels
argument_list|(
name|m1
argument_list|,
name|m2
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|m1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareModels
parameter_list|(
name|TimetableGridModel
name|m1
parameter_list|,
name|TimetableGridModel
name|m2
parameter_list|)
block|{
switch|switch
condition|(
name|order
condition|)
block|{
case|case
name|NameAsc
case|:
return|return
name|m1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getName
argument_list|()
argument_list|)
return|;
case|case
name|NameDesc
case|:
return|return
name|m2
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m1
operator|.
name|getName
argument_list|()
argument_list|)
return|;
case|case
name|SizeAsc
case|:
return|return
name|Double
operator|.
name|compare
argument_list|(
name|m1
operator|.
name|getSize
argument_list|()
argument_list|,
name|m2
operator|.
name|getSize
argument_list|()
argument_list|)
return|;
case|case
name|SizeDesc
case|:
return|return
name|Double
operator|.
name|compare
argument_list|(
name|m2
operator|.
name|getSize
argument_list|()
argument_list|,
name|m1
operator|.
name|getSize
argument_list|()
argument_list|)
return|;
case|case
name|TypeAsc
case|:
if|if
condition|(
name|m1
operator|.
name|getType
argument_list|()
operator|!=
literal|null
operator|&&
name|m2
operator|.
name|getType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|cmp
init|=
name|m1
operator|.
name|getType
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
return|return
name|m1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getName
argument_list|()
argument_list|)
return|;
case|case
name|TypeDesc
case|:
if|if
condition|(
name|m1
operator|.
name|getType
argument_list|()
operator|!=
literal|null
operator|&&
name|m2
operator|.
name|getType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|cmp
init|=
name|m2
operator|.
name|getType
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m1
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
return|return
name|m2
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m1
operator|.
name|getName
argument_list|()
argument_list|)
return|;
case|case
name|UtilizationAsc
case|:
return|return
name|Double
operator|.
name|compare
argument_list|(
name|m1
operator|.
name|getUtilization
argument_list|()
argument_list|,
name|m2
operator|.
name|getUtilization
argument_list|()
argument_list|)
return|;
case|case
name|UtilizationDesc
case|:
return|return
name|Double
operator|.
name|compare
argument_list|(
name|m2
operator|.
name|getUtilization
argument_list|()
argument_list|,
name|m1
operator|.
name|getUtilization
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|BgMode
operator|.
name|values
argument_list|()
index|[
name|cx
operator|.
name|getBgMode
argument_list|()
index|]
condition|)
block|{
case|case
name|TimePref
case|:
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendRequiredTime
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendStronglyPreferredTime
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sPreferred
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendPreferredTime
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendNoTimePreference
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendDiscouragedTime
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendStronglyDiscouragedTime
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendProhibitedTime
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|RoomPref
case|:
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendRequiredRoom
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendStronglyPreferredRoom
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sPreferred
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendPreferredRoom
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendNoRoomPreference
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendDiscouragedRoom
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendStronglyDiscouragedRoom
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendProhibitedRoom
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|StudentConf
case|:
for|for
control|(
name|int
name|nrConflicts
init|=
literal|0
init|;
name|nrConflicts
operator|<=
literal|15
condition|;
name|nrConflicts
operator|++
control|)
if|if
condition|(
name|nrConflicts
operator|<
literal|15
condition|)
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|conflicts2color
argument_list|(
name|nrConflicts
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendStudentConflicts
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|nrConflicts
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|conflicts2color
argument_list|(
name|nrConflicts
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendStudentConflictsOrMore
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|nrConflicts
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|InstructorBtbPref
case|:
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendInstructorBTBNoPreference
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendInstructorBTBDiscouraged
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendInstructorBTBStronglyDiscouraged
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendInstructorBTBProhibited
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DistributionConstPref
case|:
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendDistributionNoViolation
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendDistributionDiscouraged
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendDistributionStronglyDiscouraged
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendDistributionProhibited
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Perturbations
case|:
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendPerturbationNoChange
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendPerturbationNoInitial
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendPerturbationRoomChanged
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendPerturbationTimeChanged
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendPerturbationBothChanged
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PerturbationPenalty
case|:
for|for
control|(
name|int
name|nrConflicts
init|=
literal|0
init|;
name|nrConflicts
operator|<=
literal|15
condition|;
name|nrConflicts
operator|++
control|)
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|conflicts2color
argument_list|(
name|nrConflicts
argument_list|)
argument_list|,
operator|(
name|nrConflicts
operator|==
literal|0
condition|?
name|MESSAGES
operator|.
name|legendPerturbationNoPenalty
argument_list|()
else|:
name|nrConflicts
operator|==
literal|15
condition|?
name|MESSAGES
operator|.
name|legendPerturbationPenaltyAbove
argument_list|(
literal|"15"
argument_list|)
else|:
name|MESSAGES
operator|.
name|legendPerturbationPenaltyBelow
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|nrConflicts
argument_list|)
argument_list|)
operator|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|HardConflicts
case|:
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendHardRequired
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendHardStronglyPreferred
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sPreferred
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendHardPreferred
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendHardNeutral
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendHardDiscouraged
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendHardStronglyDiscouraged
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DepartmentalBalancing
case|:
for|for
control|(
name|int
name|nrConflicts
init|=
literal|0
init|;
name|nrConflicts
operator|<=
literal|3
condition|;
name|nrConflicts
operator|++
control|)
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|conflicts2colorFast
argument_list|(
name|nrConflicts
argument_list|)
argument_list|,
operator|(
name|nrConflicts
operator|==
literal|0
condition|?
name|MESSAGES
operator|.
name|legendNoPenalty
argument_list|()
else|:
name|nrConflicts
operator|==
literal|3
condition|?
name|MESSAGES
operator|.
name|legendPenaltyEqualAbove
argument_list|(
literal|"3"
argument_list|)
else|:
name|MESSAGES
operator|.
name|legendPenaltyEqual
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|nrConflicts
argument_list|)
argument_list|)
operator|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TooBigRooms
case|:
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendTooBigRoomsRequired
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendTooBigRoomsNeutral
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendTooBigRoomsDiscouraged
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendTooBigRoomsStronglyDiscouraged
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|StudentGroups
case|:
for|for
control|(
name|int
name|percentage
init|=
literal|0
init|;
name|percentage
operator|<=
literal|100
condition|;
name|percentage
operator|+=
literal|5
control|)
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|percentage2color
argument_list|(
name|percentage
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendStudentGroups
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|percentage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|InstructionalType
case|:
for|for
control|(
name|ItypeDesc
name|it
range|:
operator|(
name|List
argument_list|<
name|ItypeDesc
argument_list|>
operator|)
name|ItypeDescDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from ItypeDesc where "
operator|+
literal|"itype in (select s.itype.itype from SchedulingSubpart s where s.instrOfferingConfig.instructionalOffering.session = :sessionId) "
operator|+
literal|"and parent is null order by itype"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|acadSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|response
operator|.
name|addAssignedLegend
argument_list|(
name|cx
operator|.
name|getInstructionalTypeColor
argument_list|(
name|it
operator|.
name|getItype
argument_list|()
argument_list|)
argument_list|,
name|it
operator|.
name|getDesc
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|response
operator|.
name|addNotAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|sBgColorNotAvailable
argument_list|,
name|MESSAGES
operator|.
name|legendTimeNotAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addNotAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendNoPreference
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cx
operator|.
name|isShowFreeTimes
argument_list|()
condition|)
block|{
name|response
operator|.
name|addNotAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendFreeTimeDiscouraged
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addNotAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendFreeTimeStronglyDiscouraged
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addNotAssignedLegend
argument_list|(
name|TimetableGridHelper
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|legendFreeTimeProhibited
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
specifier|private
name|boolean
name|match
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|Query
name|q
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|q
operator|==
literal|null
operator|||
name|q
operator|.
name|match
argument_list|(
operator|new
name|TermMatcher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|attr
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|term
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|attr
operator|==
literal|null
condition|)
block|{
name|term
label|:
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|term
argument_list|,
literal|" ,"
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|termToken
init|=
name|s
operator|.
name|nextToken
argument_list|()
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|t
init|=
operator|new
name|StringTokenizer
argument_list|(
name|name
argument_list|,
literal|" ,"
argument_list|)
init|;
name|t
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|token
init|=
name|t
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|termToken
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
continue|continue
name|term
continue|;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
if|else if
condition|(
literal|"regex"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"regexp"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"re"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
name|name
operator|.
name|matches
argument_list|(
name|term
argument_list|)
return|;
block|}
if|else if
condition|(
literal|"find"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
name|name
operator|.
name|toLowerCase
argument_list|()
operator|.
name|indexOf
argument_list|(
name|term
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|>=
literal|0
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
specifier|static
enum|enum
name|Size
block|{
name|eq
block|,
name|lt
block|,
name|gt
block|,
name|le
block|,
name|ge
block|}
empty_stmt|;
specifier|private
name|boolean
name|match
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|Query
name|q
parameter_list|,
specifier|final
name|Location
name|location
parameter_list|)
block|{
return|return
name|q
operator|==
literal|null
operator|||
name|q
operator|.
name|match
argument_list|(
operator|new
name|TermMatcher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|attr
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|term
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|attr
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|" ,"
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|token
init|=
name|s
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
name|token
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
if|else if
condition|(
literal|"regex"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"regexp"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"re"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
name|location
operator|.
name|getLabel
argument_list|()
operator|.
name|matches
argument_list|(
name|term
argument_list|)
return|;
block|}
if|else if
condition|(
literal|"find"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
name|location
operator|.
name|getLabel
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|indexOf
argument_list|(
name|term
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|>=
literal|0
return|;
block|}
if|else if
condition|(
literal|"type"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
name|location
operator|.
name|getRoomType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
operator|||
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
name|location
operator|.
name|getRoomType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
literal|"size"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
name|int
name|min
init|=
literal|0
decl_stmt|,
name|max
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|Size
name|prefix
init|=
name|Size
operator|.
name|eq
decl_stmt|;
name|String
name|number
init|=
name|term
decl_stmt|;
if|if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|"<="
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Size
operator|.
name|le
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|">="
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Size
operator|.
name|ge
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|"<"
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Size
operator|.
name|lt
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|">"
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Size
operator|.
name|gt
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Size
operator|.
name|eq
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|int
name|a
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|prefix
condition|)
block|{
case|case
name|eq
case|:
name|min
operator|=
name|max
operator|=
name|a
expr_stmt|;
break|break;
comment|// = a
case|case
name|le
case|:
name|max
operator|=
name|a
expr_stmt|;
break|break;
comment|//<= a
case|case
name|ge
case|:
name|min
operator|=
name|a
expr_stmt|;
break|break;
comment|//>= a
case|case
name|lt
case|:
name|max
operator|=
name|a
operator|-
literal|1
expr_stmt|;
break|break;
comment|//< a
case|case
name|gt
case|:
name|min
operator|=
name|a
operator|+
literal|1
expr_stmt|;
break|break;
comment|//> a
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|term
operator|.
name|contains
argument_list|(
literal|".."
argument_list|)
condition|)
block|{
try|try
block|{
name|String
name|a
init|=
name|term
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|term
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|b
init|=
name|term
operator|.
name|substring
argument_list|(
name|term
operator|.
name|indexOf
argument_list|(
literal|".."
argument_list|)
operator|+
literal|2
argument_list|)
decl_stmt|;
name|min
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|max
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
block|}
return|return
name|min
operator|<=
name|location
operator|.
name|getCapacity
argument_list|()
operator|&&
name|location
operator|.
name|getCapacity
argument_list|()
operator|<=
name|max
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

