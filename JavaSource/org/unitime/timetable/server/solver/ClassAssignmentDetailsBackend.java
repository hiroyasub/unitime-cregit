begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|FlexibleConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|GroupConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|InstructorConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|JenrlConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|StudentOverlapConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|placement
operator|.
name|DeltaTimePreference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Lecture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|criteria
operator|.
name|Criterion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solver
operator|.
name|Solver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|CPSolverMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|BtbInstructorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|ClassAssignmentDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|ClassAssignmentDetailsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|ClassInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|CurriculumInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|DistributionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|GroupConstraintInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|InstructorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|JenrlInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|RoomInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|StudentConflictInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|TimeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ConstraintInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExactTimeMins
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|AssignmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ClassAssignmentProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|SolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|AssignmentService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|BtbInstructorConstraintInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|duration
operator|.
name|DurationModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|timegrid
operator|.
name|SolutionGridModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|timegrid
operator|.
name|SolverGridModel
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|ClassAssignmentDetailsRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|ClassAssignmentDetailsBackend
implements|implements
name|GwtRpcImplementation
argument_list|<
name|ClassAssignmentDetailsRequest
argument_list|,
name|ClassAssignmentDetails
argument_list|>
block|{
specifier|protected
specifier|static
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|CPSolverMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|CPSolverMessages
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
name|SolverService
argument_list|<
name|SolverProxy
argument_list|>
name|courseTimetablingSolverService
decl_stmt|;
annotation|@
name|Autowired
name|AssignmentService
argument_list|<
name|ClassAssignmentProxy
argument_list|>
name|classAssignmentService
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ClassAssignmentDetails
name|execute
parameter_list|(
name|ClassAssignmentDetailsRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|Suggestions
argument_list|)
expr_stmt|;
name|SuggestionsContext
name|cx
init|=
operator|new
name|SuggestionsContext
argument_list|()
decl_stmt|;
name|String
name|instructorFormat
init|=
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
name|UserProperty
operator|.
name|NameFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructorFormat
operator|!=
literal|null
condition|)
name|cx
operator|.
name|setInstructorNameFormat
argument_list|(
name|instructorFormat
argument_list|)
expr_stmt|;
name|SolverProxy
name|solver
init|=
name|courseTimetablingSolverService
operator|.
name|getSolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
name|ClassAssignmentDetails
name|details
init|=
name|solver
operator|.
name|getClassAssignmentDetails
argument_list|(
name|cx
argument_list|,
name|request
operator|.
name|getClassId
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|details
operator|!=
literal|null
condition|)
return|return
name|details
return|;
try|try
block|{
name|Class_
name|clazz
init|=
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getClassId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|errorClassDoesNotExist
argument_list|(
name|request
operator|.
name|getClassId
argument_list|()
argument_list|)
argument_list|)
throw|;
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
name|assignment
init|=
name|solver
operator|.
name|getAssignment
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignment
operator|==
literal|null
operator|||
name|assignment
operator|.
name|getSolution
argument_list|()
operator|==
literal|null
condition|)
return|return
name|createClassAssignmentDetailsFromClass
argument_list|(
name|cx
argument_list|,
name|clazz
argument_list|)
return|;
return|return
name|createClassAssignmentDetailsFromAssignment
argument_list|(
name|cx
argument_list|,
name|assignment
argument_list|,
literal|true
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|ClassAssignmentProxy
name|proxy
init|=
name|classAssignmentService
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
name|assignment
init|=
name|proxy
operator|.
name|getAssignment
argument_list|(
name|request
operator|.
name|getClassId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
return|return
name|createClassAssignmentDetailsFromAssignment
argument_list|(
name|cx
argument_list|,
name|assignment
argument_list|,
literal|true
argument_list|)
return|;
name|Class_
name|clazz
init|=
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getClassId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|errorClassDoesNotExist
argument_list|(
name|request
operator|.
name|getClassId
argument_list|()
argument_list|)
argument_list|)
throw|;
return|return
name|createClassAssignmentDetailsFromClass
argument_list|(
name|cx
argument_list|,
name|clazz
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|ClassAssignmentDetails
name|createClassAssignmentDetails
parameter_list|(
name|SuggestionsContext
name|context
parameter_list|,
name|Solver
name|solver
parameter_list|,
name|Lecture
name|lecture
parameter_list|,
name|boolean
name|includeDomain
parameter_list|,
name|boolean
name|includeConstraints
parameter_list|)
block|{
return|return
name|createClassAssignmentDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|lecture
argument_list|,
operator|(
name|Placement
operator|)
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|lecture
argument_list|)
argument_list|,
name|includeDomain
argument_list|,
name|includeConstraints
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ClassAssignmentDetails
name|createClassAssignmentDetails
parameter_list|(
name|SuggestionsContext
name|context
parameter_list|,
name|Solver
name|solver
parameter_list|,
name|Lecture
name|lecture
parameter_list|,
name|Placement
name|placement
parameter_list|,
name|boolean
name|includeDomain
parameter_list|,
name|boolean
name|includeConstraints
parameter_list|)
block|{
name|Assignment
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|assignment
init|=
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
name|ClassAssignmentDetails
name|details
init|=
operator|new
name|ClassAssignmentDetails
argument_list|()
decl_stmt|;
name|details
operator|.
name|setCanUnassign
argument_list|(
operator|!
name|lecture
operator|.
name|isCommitted
argument_list|()
argument_list|)
expr_stmt|;
name|details
operator|.
name|setClazz
argument_list|(
operator|new
name|ClassInfo
argument_list|(
name|lecture
operator|.
name|getName
argument_list|()
argument_list|,
name|lecture
operator|.
name|getClassId
argument_list|()
argument_list|,
name|lecture
operator|.
name|getNrRooms
argument_list|()
argument_list|,
name|SolverGridModel
operator|.
name|hardConflicts2pref
argument_list|(
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|,
name|lecture
argument_list|,
name|placement
argument_list|)
argument_list|,
name|lecture
operator|.
name|minRoomSize
argument_list|()
argument_list|,
name|lecture
operator|.
name|getOrd
argument_list|()
argument_list|,
name|lecture
operator|.
name|getNote
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|placement
operator|.
name|isMultiRoom
argument_list|()
condition|)
block|{
for|for
control|(
name|RoomLocation
name|room
range|:
name|placement
operator|.
name|getRoomLocations
argument_list|()
control|)
block|{
name|details
operator|.
name|setRoom
argument_list|(
operator|new
name|RoomInfo
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
name|room
operator|.
name|getId
argument_list|()
argument_list|,
name|room
operator|.
name|getRoomSize
argument_list|()
argument_list|,
operator|(
name|room
operator|.
name|getPreference
argument_list|()
operator|==
literal|0
operator|&&
name|lecture
operator|.
name|nrRoomLocations
argument_list|()
operator|==
name|lecture
operator|.
name|getNrRooms
argument_list|()
condition|?
name|PreferenceLevel
operator|.
name|sIntLevelRequired
else|:
name|room
operator|.
name|getPreference
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|RoomLocation
name|room
init|=
name|placement
operator|.
name|getRoomLocation
argument_list|()
decl_stmt|;
name|details
operator|.
name|setRoom
argument_list|(
operator|new
name|RoomInfo
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
name|room
operator|.
name|getId
argument_list|()
argument_list|,
name|room
operator|.
name|getRoomSize
argument_list|()
argument_list|,
operator|(
name|room
operator|.
name|getPreference
argument_list|()
operator|==
literal|0
operator|&&
name|lecture
operator|.
name|nrRoomLocations
argument_list|()
operator|==
name|lecture
operator|.
name|getNrRooms
argument_list|()
condition|?
name|PreferenceLevel
operator|.
name|sIntLevelRequired
else|:
name|room
operator|.
name|getPreference
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TimeLocation
name|time
init|=
name|placement
operator|.
name|getTimeLocation
argument_list|()
decl_stmt|;
name|int
name|min
init|=
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|time
operator|.
name|getNrSlotsPerMeeting
argument_list|()
operator|-
name|time
operator|.
name|getBreakTime
argument_list|()
decl_stmt|;
name|details
operator|.
name|setTime
argument_list|(
operator|new
name|TimeInfo
argument_list|(
name|time
operator|.
name|getDayCode
argument_list|()
argument_list|,
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|,
operator|(
name|time
operator|.
name|getPreference
argument_list|()
operator|==
literal|0
operator|&&
name|lecture
operator|.
name|nrTimeLocations
argument_list|()
operator|==
literal|1
condition|?
name|PreferenceLevel
operator|.
name|sIntLevelRequired
else|:
name|time
operator|.
name|getPreference
argument_list|()
operator|)
argument_list|,
name|min
argument_list|,
name|time
operator|.
name|getDatePatternName
argument_list|()
argument_list|,
name|time
operator|.
name|getTimePatternId
argument_list|()
argument_list|,
name|time
operator|.
name|getDatePatternId
argument_list|()
argument_list|,
name|time
operator|.
name|getDatePatternPreference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|lecture
operator|.
name|getInstructorConstraints
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lecture
operator|.
name|getInstructorConstraints
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|InstructorConstraint
name|ic
init|=
operator|(
name|InstructorConstraint
operator|)
name|lecture
operator|.
name|getInstructorConstraints
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|details
operator|.
name|setInstructor
argument_list|(
operator|new
name|InstructorInfo
argument_list|(
name|ic
operator|.
name|getName
argument_list|()
argument_list|,
name|ic
operator|.
name|getResourceId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|translations
init|=
name|context
operator|.
name|courseObjectives
argument_list|()
decl_stmt|;
for|for
control|(
name|Criterion
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|criterion
range|:
name|lecture
operator|.
name|getModel
argument_list|()
operator|.
name|getCriteria
argument_list|()
control|)
block|{
if|if
condition|(
name|criterion
operator|instanceof
name|StudentOverlapConflict
condition|)
continue|continue;
if|if
condition|(
name|criterion
operator|instanceof
name|DeltaTimePreference
condition|)
continue|continue;
name|String
name|translatedName
init|=
operator|(
name|translations
operator|==
literal|null
operator|||
name|translations
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|translations
operator|.
name|get
argument_list|(
name|criterion
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|translatedName
operator|!=
literal|null
condition|)
name|details
operator|.
name|setObjective
argument_list|(
name|translatedName
argument_list|,
name|criterion
operator|.
name|getValue
argument_list|(
name|assignment
argument_list|,
name|placement
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|details
operator|.
name|setObjective
argument_list|(
name|criterion
operator|.
name|getName
argument_list|()
argument_list|,
name|criterion
operator|.
name|getValue
argument_list|(
name|assignment
argument_list|,
name|placement
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Placement
name|initialPlacement
init|=
operator|(
name|Placement
operator|)
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|initialPlacement
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|initialPlacement
operator|.
name|isMultiRoom
argument_list|()
condition|)
block|{
for|for
control|(
name|RoomLocation
name|room
range|:
name|initialPlacement
operator|.
name|getRoomLocations
argument_list|()
control|)
block|{
name|details
operator|.
name|setInitialRoom
argument_list|(
operator|new
name|RoomInfo
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
name|room
operator|.
name|getId
argument_list|()
argument_list|,
name|room
operator|.
name|getRoomSize
argument_list|()
argument_list|,
operator|(
name|room
operator|.
name|getPreference
argument_list|()
operator|==
literal|0
operator|&&
name|lecture
operator|.
name|nrRoomLocations
argument_list|()
operator|==
name|lecture
operator|.
name|getNrRooms
argument_list|()
condition|?
name|PreferenceLevel
operator|.
name|sIntLevelRequired
else|:
name|room
operator|.
name|getPreference
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|RoomLocation
name|room
init|=
name|initialPlacement
operator|.
name|getRoomLocation
argument_list|()
decl_stmt|;
name|details
operator|.
name|setInitialRoom
argument_list|(
operator|new
name|RoomInfo
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
name|room
operator|.
name|getId
argument_list|()
argument_list|,
name|room
operator|.
name|getRoomSize
argument_list|()
argument_list|,
operator|(
name|room
operator|.
name|getPreference
argument_list|()
operator|==
literal|0
operator|&&
name|lecture
operator|.
name|nrRoomLocations
argument_list|()
operator|==
name|lecture
operator|.
name|getNrRooms
argument_list|()
condition|?
name|PreferenceLevel
operator|.
name|sIntLevelRequired
else|:
name|room
operator|.
name|getPreference
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TimeLocation
name|time
init|=
name|initialPlacement
operator|.
name|getTimeLocation
argument_list|()
decl_stmt|;
name|int
name|min
init|=
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|time
operator|.
name|getNrSlotsPerMeeting
argument_list|()
operator|-
name|time
operator|.
name|getBreakTime
argument_list|()
decl_stmt|;
name|details
operator|.
name|setInitialTime
argument_list|(
operator|new
name|TimeInfo
argument_list|(
name|time
operator|.
name|getDayCode
argument_list|()
argument_list|,
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|,
operator|(
name|time
operator|.
name|getPreference
argument_list|()
operator|==
literal|0
operator|&&
name|lecture
operator|.
name|nrTimeLocations
argument_list|()
operator|==
literal|1
condition|?
name|PreferenceLevel
operator|.
name|sIntLevelRequired
else|:
name|time
operator|.
name|getPreference
argument_list|()
operator|)
argument_list|,
name|min
argument_list|,
name|time
operator|.
name|getDatePatternName
argument_list|()
argument_list|,
name|time
operator|.
name|getTimePatternId
argument_list|()
argument_list|,
name|time
operator|.
name|getDatePatternId
argument_list|()
argument_list|,
name|time
operator|.
name|getDatePatternPreference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeDomain
condition|)
block|{
for|for
control|(
name|TimeLocation
name|time
range|:
name|lecture
operator|.
name|timeLocations
argument_list|()
control|)
block|{
name|int
name|min
init|=
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|time
operator|.
name|getNrSlotsPerMeeting
argument_list|()
operator|-
name|time
operator|.
name|getBreakTime
argument_list|()
decl_stmt|;
name|details
operator|.
name|addTime
argument_list|(
operator|new
name|TimeInfo
argument_list|(
name|time
operator|.
name|getDayCode
argument_list|()
argument_list|,
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|,
operator|(
name|time
operator|.
name|getPreference
argument_list|()
operator|==
literal|0
operator|&&
name|lecture
operator|.
name|nrTimeLocations
argument_list|()
operator|==
literal|1
condition|?
name|PreferenceLevel
operator|.
name|sIntLevelRequired
else|:
name|time
operator|.
name|getPreference
argument_list|()
operator|)
argument_list|,
name|min
argument_list|,
name|time
operator|.
name|getDatePatternName
argument_list|()
argument_list|,
name|time
operator|.
name|getTimePatternId
argument_list|()
argument_list|,
name|time
operator|.
name|getDatePatternId
argument_list|()
argument_list|,
name|time
operator|.
name|getDatePatternPreference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RoomLocation
name|room
range|:
name|lecture
operator|.
name|roomLocations
argument_list|()
control|)
block|{
name|details
operator|.
name|addRoom
argument_list|(
operator|new
name|RoomInfo
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
name|room
operator|.
name|getId
argument_list|()
argument_list|,
name|room
operator|.
name|getRoomSize
argument_list|()
argument_list|,
operator|(
name|room
operator|.
name|getPreference
argument_list|()
operator|==
literal|0
operator|&&
name|lecture
operator|.
name|nrRoomLocations
argument_list|()
operator|==
name|lecture
operator|.
name|getNrRooms
argument_list|()
condition|?
name|PreferenceLevel
operator|.
name|sIntLevelRequired
else|:
name|room
operator|.
name|getPreference
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|includeConstraints
condition|)
block|{
for|for
control|(
name|Iterator
name|e
init|=
name|lecture
operator|.
name|activeJenrls
argument_list|(
name|assignment
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JenrlConstraint
name|jenrl
init|=
operator|(
name|JenrlConstraint
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
name|Lecture
name|another
init|=
operator|(
name|Lecture
operator|)
name|jenrl
operator|.
name|another
argument_list|(
name|lecture
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|jenrl
operator|.
name|isToBeIgnored
argument_list|()
operator|&&
name|jenrl
operator|.
name|getJenrl
argument_list|()
operator|>
literal|0
condition|)
name|details
operator|.
name|addStudentConflict
argument_list|(
operator|new
name|StudentConflictInfo
argument_list|(
name|toJenrlInfo
argument_list|(
operator|new
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|JenrlInfo
argument_list|(
name|solver
argument_list|,
name|jenrl
argument_list|)
argument_list|)
argument_list|,
name|createClassAssignmentDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|another
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
block|{
name|Hashtable
name|infos
init|=
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|JenrlInfo
operator|.
name|getCommitedJenrlInfos
argument_list|(
name|solver
argument_list|,
name|lecture
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|infos
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|assignmentId
init|=
operator|(
name|Long
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|JenrlInfo
name|jInfo
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|JenrlInfo
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|details
operator|.
name|addStudentConflict
argument_list|(
operator|new
name|StudentConflictInfo
argument_list|(
name|toJenrlInfo
argument_list|(
name|jInfo
argument_list|)
argument_list|,
name|createClassAssignmentDetailsFromAssignment
argument_list|(
name|context
argument_list|,
name|assignmentId
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Constraint
name|c
range|:
name|lecture
operator|.
name|constraints
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|instanceof
name|GroupConstraint
condition|)
block|{
name|GroupConstraint
name|gc
init|=
operator|(
name|GroupConstraint
operator|)
name|c
decl_stmt|;
name|DistributionInfo
name|dist
init|=
operator|new
name|DistributionInfo
argument_list|()
decl_stmt|;
name|dist
operator|.
name|setInfo
argument_list|(
name|toGroupConstraintInfo
argument_list|(
operator|new
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|GroupConstraintInfo
argument_list|(
name|assignment
argument_list|,
name|gc
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Lecture
name|another
range|:
name|gc
operator|.
name|variables
argument_list|()
control|)
block|{
if|if
condition|(
name|another
operator|.
name|equals
argument_list|(
name|lecture
argument_list|)
condition|)
continue|continue;
name|dist
operator|.
name|addClass
argument_list|(
name|createClassAssignmentDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|another
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|details
operator|.
name|addDistributionConflict
argument_list|(
name|dist
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|instanceof
name|FlexibleConstraint
condition|)
block|{
name|FlexibleConstraint
name|gc
init|=
operator|(
name|FlexibleConstraint
operator|)
name|c
decl_stmt|;
name|DistributionInfo
name|dist
init|=
operator|new
name|DistributionInfo
argument_list|()
decl_stmt|;
name|dist
operator|.
name|setInfo
argument_list|(
name|toGroupConstraintInfo
argument_list|(
operator|new
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|GroupConstraintInfo
argument_list|(
name|assignment
argument_list|,
name|gc
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Lecture
name|another
range|:
name|gc
operator|.
name|variables
argument_list|()
control|)
block|{
if|if
condition|(
name|another
operator|.
name|equals
argument_list|(
name|lecture
argument_list|)
condition|)
continue|continue;
name|dist
operator|.
name|addClass
argument_list|(
name|createClassAssignmentDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|another
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|details
operator|.
name|addDistributionConflict
argument_list|(
name|dist
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|lecture
operator|.
name|getInstructorConstraints
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|placement
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|InstructorConstraint
name|ic
range|:
name|lecture
operator|.
name|getInstructorConstraints
argument_list|()
control|)
block|{
for|for
control|(
name|Lecture
name|other
range|:
name|ic
operator|.
name|variables
argument_list|()
control|)
block|{
if|if
condition|(
name|other
operator|.
name|equals
argument_list|(
name|lecture
argument_list|)
operator|||
name|assignment
operator|.
name|getValue
argument_list|(
name|other
argument_list|)
operator|==
literal|null
condition|)
continue|continue;
name|int
name|pref
init|=
name|ic
operator|.
name|getDistancePreference
argument_list|(
name|placement
argument_list|,
name|assignment
operator|.
name|getValue
argument_list|(
name|other
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|==
name|PreferenceLevel
operator|.
name|sIntLevelNeutral
condition|)
continue|continue;
name|details
operator|.
name|addBtbInstructorConflict
argument_list|(
operator|new
name|BtbInstructorInfo
argument_list|(
name|createClassAssignmentDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|other
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|,
name|pref
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|details
return|;
block|}
specifier|public
specifier|static
name|ClassAssignmentDetails
name|createClassAssignmentDetailsFromAssignment
parameter_list|(
name|SuggestionsContext
name|context
parameter_list|,
name|Long
name|assignmentId
parameter_list|,
name|boolean
name|includeConstraints
parameter_list|)
block|{
return|return
name|createClassAssignmentDetailsFromAssignment
argument_list|(
name|context
argument_list|,
name|AssignmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|assignmentId
argument_list|)
argument_list|,
name|includeConstraints
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ClassAssignmentDetails
name|createClassAssignmentDetailsFromClass
parameter_list|(
name|SuggestionsContext
name|context
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
name|clazz
parameter_list|)
block|{
name|ClassAssignmentDetails
name|details
init|=
operator|new
name|ClassAssignmentDetails
argument_list|()
decl_stmt|;
name|details
operator|.
name|setClazz
argument_list|(
operator|new
name|ClassInfo
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|()
argument_list|,
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|clazz
operator|.
name|getNbrRooms
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
name|clazz
operator|.
name|getNotes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|details
operator|.
name|setCanUnassign
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|details
return|;
block|}
specifier|public
specifier|static
name|ClassAssignmentDetails
name|createClassAssignmentDetailsFromAssignment
parameter_list|(
name|SuggestionsContext
name|context
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
name|assignment
parameter_list|,
name|boolean
name|includeConstraints
parameter_list|)
block|{
if|if
condition|(
name|assignment
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|ClassAssignmentDetails
name|details
init|=
operator|new
name|ClassAssignmentDetails
argument_list|()
decl_stmt|;
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|AssignmentPreferenceInfo
name|assignmentInfo
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|AssignmentPreferenceInfo
operator|)
name|assignment
operator|.
name|getAssignmentInfo
argument_list|(
literal|"AssignmentInfo"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|assignment
operator|.
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Location
name|room
range|:
name|assignment
operator|.
name|getRooms
argument_list|()
control|)
name|details
operator|.
name|setRoom
argument_list|(
operator|new
name|RoomInfo
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
argument_list|,
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|room
operator|.
name|getCapacity
argument_list|()
argument_list|,
operator|(
name|assignmentInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|assignmentInfo
operator|.
name|getRoomPreference
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|length
init|=
name|assignment
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getSlotsPerMtg
argument_list|()
decl_stmt|;
name|int
name|breakTime
init|=
name|assignment
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getBreakTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getType
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|TimePattern
operator|.
name|sTypeExactTime
condition|)
block|{
name|DurationModel
name|dm
init|=
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getDurationModel
argument_list|()
decl_stmt|;
name|int
name|minsPerMeeting
init|=
name|dm
operator|.
name|getExactTimeMinutesPerMeeting
argument_list|(
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|,
name|assignment
operator|.
name|getDatePattern
argument_list|()
argument_list|,
name|assignment
operator|.
name|getDays
argument_list|()
argument_list|)
decl_stmt|;
name|length
operator|=
name|ExactTimeMins
operator|.
name|getNrSlotsPerMtg
argument_list|(
name|minsPerMeeting
argument_list|)
expr_stmt|;
name|breakTime
operator|=
name|ExactTimeMins
operator|.
name|getBreakTime
argument_list|(
name|minsPerMeeting
argument_list|)
expr_stmt|;
block|}
name|int
name|min
init|=
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|length
operator|-
name|breakTime
decl_stmt|;
name|DatePattern
name|datePattern
init|=
name|assignment
operator|.
name|getDatePattern
argument_list|()
decl_stmt|;
name|details
operator|.
name|setTime
argument_list|(
operator|new
name|TimeInfo
argument_list|(
name|assignment
operator|.
name|getDays
argument_list|()
argument_list|,
name|assignment
operator|.
name|getStartSlot
argument_list|()
argument_list|,
operator|(
name|assignmentInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|assignmentInfo
operator|.
name|getTimePreference
argument_list|()
operator|)
argument_list|,
name|min
argument_list|,
operator|(
name|datePattern
operator|==
literal|null
condition|?
literal|"not set"
else|:
name|datePattern
operator|.
name|getName
argument_list|()
operator|)
argument_list|,
name|assignment
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
operator|(
name|datePattern
operator|==
literal|null
condition|?
literal|null
else|:
name|datePattern
operator|.
name|getUniqueId
argument_list|()
operator|)
argument_list|,
operator|(
name|assignmentInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|assignmentInfo
operator|.
name|getDatePatternPref
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|instructors
init|=
operator|new
name|TreeSet
argument_list|<
name|DepartmentalInstructor
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|TimetableGridUseClassInstructors
operator|.
name|isTrue
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|ApplicationProperty
operator|.
name|TimetableGridUseClassInstructorsCheckClassDisplayInstructors
operator|.
name|isTrue
argument_list|()
operator|||
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|isDisplayInstructor
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|ClassInstructor
argument_list|>
name|i
init|=
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|instructor
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|instructor
operator|.
name|isLead
argument_list|()
operator|||
operator|!
name|ApplicationProperty
operator|.
name|TimetableGridUseClassInstructorsCheckLead
operator|.
name|isTrue
argument_list|()
condition|)
name|instructors
operator|.
name|add
argument_list|(
name|instructor
operator|.
name|getInstructor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|instructors
operator|.
name|addAll
argument_list|(
name|assignment
operator|.
name|getInstructors
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|instructors
operator|!=
literal|null
operator|&&
operator|!
name|instructors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|DepartmentalInstructor
name|di
range|:
name|instructors
control|)
block|{
name|details
operator|.
name|setInstructor
argument_list|(
operator|new
name|InstructorInfo
argument_list|(
name|di
operator|.
name|getName
argument_list|(
name|context
operator|.
name|getInstructorNameFormat
argument_list|()
argument_list|)
argument_list|,
name|di
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|includeConstraints
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|assignment
operator|.
name|getConstraintInfoTable
argument_list|(
literal|"JenrlInfo"
argument_list|)
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ConstraintInfo
name|constraint
init|=
operator|(
name|ConstraintInfo
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|JenrlInfo
name|info
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|JenrlInfo
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
name|another
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|constraint
operator|.
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
name|x
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|assignment
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|another
operator|=
name|x
expr_stmt|;
break|break;
block|}
name|details
operator|.
name|addStudentConflict
argument_list|(
operator|new
name|StudentConflictInfo
argument_list|(
name|toJenrlInfo
argument_list|(
name|info
argument_list|)
argument_list|,
name|createClassAssignmentDetailsFromAssignment
argument_list|(
name|context
argument_list|,
name|another
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|assignment
operator|.
name|getConstraintInfoTable
argument_list|(
literal|"DistributionInfo"
argument_list|)
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ConstraintInfo
name|constraint
init|=
operator|(
name|ConstraintInfo
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|GroupConstraintInfo
name|info
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|GroupConstraintInfo
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|DistributionInfo
name|dist
init|=
operator|new
name|DistributionInfo
argument_list|(
name|toGroupConstraintInfo
argument_list|(
name|info
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|constraint
operator|.
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
name|another
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|another
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|assignment
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|dist
operator|.
name|addClass
argument_list|(
name|createClassAssignmentDetailsFromAssignment
argument_list|(
name|context
argument_list|,
name|another
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|details
operator|.
name|addDistributionConflict
argument_list|(
name|dist
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|assignment
operator|.
name|getConstraintInfoTable
argument_list|(
literal|"BtbInstructorInfo"
argument_list|)
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ConstraintInfo
name|constraint
init|=
operator|(
name|ConstraintInfo
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|BtbInstructorConstraintInfo
name|info
init|=
operator|(
name|BtbInstructorConstraintInfo
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
name|another
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|constraint
operator|.
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
name|x
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|assignment
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|another
operator|=
name|x
expr_stmt|;
break|break;
block|}
name|details
operator|.
name|addBtbInstructorConflict
argument_list|(
operator|new
name|BtbInstructorInfo
argument_list|(
name|createClassAssignmentDetailsFromAssignment
argument_list|(
name|context
argument_list|,
name|another
argument_list|,
literal|false
argument_list|)
argument_list|,
name|info
operator|.
name|getPreference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|details
operator|.
name|setClazz
argument_list|(
operator|new
name|ClassInfo
argument_list|(
name|assignment
operator|.
name|getClassName
argument_list|()
argument_list|,
name|assignment
operator|.
name|getClassId
argument_list|()
argument_list|,
name|assignment
operator|.
name|getRooms
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|SolutionGridModel
operator|.
name|hardConflicts2pref
argument_list|(
name|assignmentInfo
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getNotes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|details
operator|.
name|setCanUnassign
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|details
return|;
block|}
specifier|public
specifier|static
name|JenrlInfo
name|toJenrlInfo
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|JenrlInfo
name|info
parameter_list|)
block|{
name|JenrlInfo
name|ret
init|=
operator|new
name|JenrlInfo
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setJenrl
argument_list|(
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|info
operator|.
name|getJenrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setIsSatisfied
argument_list|(
name|info
operator|.
name|isSatisfied
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setIsHard
argument_list|(
name|info
operator|.
name|isHard
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setIsDistance
argument_list|(
name|info
operator|.
name|isDistance
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setIsFixed
argument_list|(
name|info
operator|.
name|isFixed
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setIsCommited
argument_list|(
name|info
operator|.
name|isCommited
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setIsImportant
argument_list|(
name|info
operator|.
name|isImportant
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setIsWorkDay
argument_list|(
name|info
operator|.
name|isWorkDay
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setIsInstructor
argument_list|(
name|info
operator|.
name|isInstructor
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setDistance
argument_list|(
name|info
operator|.
name|getDistance
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|hasCurricula
argument_list|()
condition|)
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|JenrlInfo
operator|.
name|CurriculumInfo
name|cur
range|:
name|info
operator|.
name|getCurricula
argument_list|()
control|)
name|ret
operator|.
name|addCurriculum
argument_list|(
operator|new
name|CurriculumInfo
argument_list|(
name|cur
operator|.
name|getName
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|cur
operator|.
name|getNrStudents
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|GroupConstraintInfo
name|toGroupConstraintInfo
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|GroupConstraintInfo
name|info
parameter_list|)
block|{
name|GroupConstraintInfo
name|ret
init|=
operator|new
name|GroupConstraintInfo
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setPreference
argument_list|(
name|info
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setIsSatisfied
argument_list|(
name|info
operator|.
name|isSatisfied
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|info
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|info
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

