begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|preference
operator|.
name|PreferenceCombination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|LongType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
operator|.
name|EventLookupBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|DayCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TimetableGridInterface
operator|.
name|TimetableGridBackground
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TimetableGridInterface
operator|.
name|TimetableGridCell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TimetableGridInterface
operator|.
name|TimetableGridCell
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TimetableGridInterface
operator|.
name|TimetableGridModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|RoomAvailabilityInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|RoomAvailabilityInterface
operator|.
name|TimeBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExactTimeMins
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ItypeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomSharingModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolutionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|AssignmentPreferenceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|GroupConstraintInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|StudentGroupInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|NameFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|RoomAvailability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|duration
operator|.
name|DurationModel
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|TimetableGridSolutionHelper
extends|extends
name|TimetableGridHelper
block|{
specifier|private
specifier|static
name|DecimalFormat
name|sDF
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.0"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|void
name|createCells
parameter_list|(
name|TimetableGridModel
name|model
parameter_list|,
name|List
argument_list|<
name|Assignment
argument_list|>
name|assignments
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|TimetableGridContext
name|context
parameter_list|,
name|boolean
name|notAvailable
parameter_list|)
block|{
for|for
control|(
name|Assignment
name|assignment
range|:
name|assignments
control|)
block|{
name|createCells
argument_list|(
name|model
argument_list|,
name|assignment
argument_list|,
name|hibSession
argument_list|,
name|context
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|List
argument_list|<
name|TimetableGridCell
argument_list|>
name|createCells
parameter_list|(
name|TimetableGridModel
name|model
parameter_list|,
name|Assignment
name|assignment
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|TimetableGridContext
name|context
parameter_list|,
name|boolean
name|notAvailable
parameter_list|)
block|{
name|List
argument_list|<
name|TimetableGridCell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<
name|TimetableGridCell
argument_list|>
argument_list|()
decl_stmt|;
name|TimetableGridCell
name|cell
init|=
literal|null
decl_stmt|;
name|int
name|days
init|=
name|assignment
operator|.
name|getDays
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|start
init|=
name|assignment
operator|.
name|getStartSlot
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|BitSet
name|weekCode
init|=
operator|(
name|assignment
operator|.
name|getDatePattern
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|assignment
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getPatternBitSet
argument_list|()
operator|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|int
name|d
init|=
operator|(
name|j
operator|+
name|context
operator|.
name|getWeekOffset
argument_list|()
operator|)
operator|%
literal|7
decl_stmt|;
if|if
condition|(
operator|(
name|Constants
operator|.
name|DAY_CODES
index|[
name|d
index|]
operator|&
name|days
operator|)
operator|==
literal|0
condition|)
continue|continue;
if|if
condition|(
name|context
operator|.
name|getFirstDay
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|int
name|day
init|=
name|context
operator|.
name|getFirstDay
argument_list|()
operator|+
name|j
decl_stmt|;
if|if
condition|(
operator|!
name|weekCode
operator|.
name|get
argument_list|(
name|day
argument_list|)
condition|)
continue|continue;
block|}
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
name|cell
operator|=
name|createCell
argument_list|(
name|model
argument_list|,
name|d
argument_list|,
name|start
argument_list|,
name|hibSession
argument_list|,
name|assignment
argument_list|,
name|context
argument_list|,
name|notAvailable
argument_list|)
expr_stmt|;
else|else
block|{
name|cell
operator|=
operator|new
name|TimetableGridCell
argument_list|(
name|cell
argument_list|,
name|d
argument_list|,
name|formatDatePattern
argument_list|(
name|assignment
operator|.
name|getDatePattern
argument_list|()
argument_list|,
name|Constants
operator|.
name|DAY_CODES
index|[
name|d
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|model
operator|.
name|addCell
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|cells
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
return|return
name|cells
return|;
block|}
specifier|protected
specifier|static
name|void
name|createMeetingCells
parameter_list|(
name|TimetableGridModel
name|model
parameter_list|,
name|Session
name|session
parameter_list|,
name|TimetableGridContext
name|context
parameter_list|,
name|Collection
argument_list|<
name|TimeBlock
argument_list|>
name|times
parameter_list|,
name|String
name|room
parameter_list|)
block|{
if|if
condition|(
name|times
operator|==
literal|null
condition|)
return|return;
name|int
name|sessionYear
init|=
name|session
operator|.
name|getSessionStartYear
argument_list|()
decl_stmt|;
name|int
name|firstDOY
init|=
name|session
operator|.
name|getDayOfYear
argument_list|(
literal|1
argument_list|,
name|session
operator|.
name|getPatternStartMonth
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|lastDOY
init|=
name|session
operator|.
name|getDayOfYear
argument_list|(
literal|0
argument_list|,
name|session
operator|.
name|getPatternEndMonth
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|df
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_EVENT_SHORT
argument_list|)
decl_stmt|;
for|for
control|(
name|TimeBlock
name|time
range|:
name|times
control|)
block|{
if|if
condition|(
name|time
operator|.
name|getEndTime
argument_list|()
operator|.
name|before
argument_list|(
name|context
operator|.
name|getSessionStartDate
argument_list|()
argument_list|)
operator|||
name|time
operator|.
name|getStartTime
argument_list|()
operator|.
name|after
argument_list|(
name|context
operator|.
name|getSessionEndDate
argument_list|()
argument_list|)
condition|)
continue|continue;
name|int
name|dayCode
init|=
literal|0
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|time
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|m
init|=
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
decl_stmt|;
name|int
name|d
init|=
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|<
name|sessionYear
condition|)
name|m
operator|-=
operator|(
literal|12
operator|*
operator|(
name|sessionYear
operator|-
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|)
operator|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|>
name|sessionYear
condition|)
name|m
operator|+=
operator|(
literal|12
operator|*
operator|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|-
name|sessionYear
operator|)
operator|)
expr_stmt|;
name|BitSet
name|weekCode
init|=
operator|new
name|BitSet
argument_list|(
name|lastDOY
operator|-
name|firstDOY
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
name|session
operator|.
name|getDayOfYear
argument_list|(
name|d
argument_list|,
name|m
argument_list|)
operator|-
name|firstDOY
decl_stmt|;
name|weekCode
operator|.
name|set
argument_list|(
name|offset
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
name|dayCode
operator|=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_MON
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
name|dayCode
operator|=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_TUE
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
name|dayCode
operator|=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_WED
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
name|dayCode
operator|=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_THU
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
name|dayCode
operator|=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_FRI
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
name|dayCode
operator|=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SAT
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
name|dayCode
operator|=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SUN
index|]
expr_stmt|;
break|break;
block|}
name|int
name|startSlot
init|=
operator|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
operator|*
literal|60
operator|+
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
operator|-
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|time
operator|.
name|getEndTime
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|endSlot
init|=
operator|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
operator|*
literal|60
operator|+
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
operator|-
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
name|int
name|length
init|=
name|endSlot
operator|-
name|startSlot
decl_stmt|;
if|if
condition|(
name|length
operator|<=
literal|0
condition|)
continue|continue;
name|TimeLocation
name|timeLocation
init|=
operator|new
name|TimeLocation
argument_list|(
name|dayCode
argument_list|,
name|startSlot
argument_list|,
name|length
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|df
operator|.
name|format
argument_list|(
name|time
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|,
name|weekCode
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|TimetableGridCell
name|cell
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|Integer
argument_list|>
name|f
init|=
name|timeLocation
operator|.
name|getStartSlots
argument_list|()
init|;
name|f
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|int
name|slot
init|=
name|f
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
operator|(
literal|7
operator|+
name|slot
operator|/
name|Constants
operator|.
name|SLOTS_PER_DAY
operator|-
name|context
operator|.
name|getWeekOffset
argument_list|()
operator|)
operator|%
literal|7
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getFirstDay
argument_list|()
operator|>=
literal|0
operator|&&
operator|!
name|timeLocation
operator|.
name|getWeekCode
argument_list|()
operator|.
name|get
argument_list|(
name|context
operator|.
name|getFirstDay
argument_list|()
operator|+
name|idx
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
block|{
name|cell
operator|=
operator|new
name|TimetableGridCell
argument_list|()
expr_stmt|;
name|cell
operator|.
name|setType
argument_list|(
name|TimetableGridCell
operator|.
name|Type
operator|.
name|Event
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setId
argument_list|(
name|time
operator|.
name|getEventId
argument_list|()
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setDay
argument_list|(
name|slot
operator|/
name|Constants
operator|.
name|SLOTS_PER_DAY
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setSlot
argument_list|(
name|slot
operator|%
name|Constants
operator|.
name|SLOTS_PER_DAY
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addRoom
argument_list|(
name|room
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addName
argument_list|(
name|time
operator|.
name|getEventName
argument_list|()
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|EventType
argument_list|,
name|time
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setBackground
argument_list|(
name|sBgColorNotAvailable
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setLength
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setTime
argument_list|(
name|Constants
operator|.
name|toTime
argument_list|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|startSlot
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
argument_list|)
operator|+
literal|" - "
operator|+
name|Constants
operator|.
name|toTime
argument_list|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|endSlot
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
argument_list|)
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setDate
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|time
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setWeekCode
argument_list|(
name|pattern2string
argument_list|(
name|weekCode
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|=
operator|new
name|TimetableGridCell
argument_list|(
name|cell
argument_list|,
name|slot
operator|/
name|Constants
operator|.
name|SLOTS_PER_DAY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|model
operator|.
name|addCell
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
specifier|static
name|TimetableGridCell
name|createCell
parameter_list|(
name|TimetableGridModel
name|model
parameter_list|,
name|int
name|day
parameter_list|,
name|int
name|slot
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Assignment
name|assignment
parameter_list|,
name|TimetableGridContext
name|context
parameter_list|,
name|boolean
name|notAvailable
parameter_list|)
block|{
name|TimetableGridCell
name|cell
init|=
operator|new
name|TimetableGridCell
argument_list|()
decl_stmt|;
name|cell
operator|.
name|setType
argument_list|(
name|TimetableGridCell
operator|.
name|Type
operator|.
name|Class
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setId
argument_list|(
name|assignment
operator|.
name|getClassId
argument_list|()
argument_list|)
expr_stmt|;
name|CourseOffering
name|course
init|=
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|isShowClassNameTwoLines
argument_list|()
condition|)
block|{
name|cell
operator|.
name|addName
argument_list|(
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|label
init|=
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|" "
operator|+
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSectionNumberString
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|isShowClassSuffix
argument_list|()
condition|)
block|{
name|String
name|extId
init|=
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|extId
operator|!=
literal|null
operator|&&
operator|!
name|extId
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|extId
operator|.
name|equalsIgnoreCase
argument_list|(
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSectionNumberString
argument_list|()
argument_list|)
condition|)
name|label
operator|+=
literal|" - "
operator|+
name|extId
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|isShowConfigName
argument_list|()
operator|&&
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|label
operator|+=
literal|" ("
operator|+
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
name|cell
operator|.
name|addName
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|.
name|addName
argument_list|(
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassLabel
argument_list|(
name|context
operator|.
name|isShowClassSuffix
argument_list|()
argument_list|,
name|context
operator|.
name|isShowConfigName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|isShowCourseTitle
argument_list|()
operator|&&
name|course
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|course
operator|.
name|getTitle
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cell
operator|.
name|addName
argument_list|(
name|course
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cell
operator|.
name|setCommitted
argument_list|(
name|notAvailable
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setDay
argument_list|(
name|day
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setSlot
argument_list|(
name|slot
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|isShowCourseTitle
argument_list|()
operator|||
name|context
operator|.
name|isShowClassNameTwoLines
argument_list|()
condition|)
block|{
name|cell
operator|.
name|addTitle
argument_list|(
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassLabel
argument_list|(
name|course
argument_list|,
name|context
operator|.
name|isShowClassSuffix
argument_list|()
argument_list|,
name|context
operator|.
name|isShowConfigName
argument_list|()
argument_list|)
operator|+
operator|(
name|course
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|course
operator|.
name|getTitle
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|" - "
operator|+
name|course
operator|.
name|getTitle
argument_list|()
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|isShowCrossLists
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|CourseOffering
argument_list|>
name|courses
init|=
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
decl_stmt|;
if|if
condition|(
name|courses
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|CourseOffering
name|co
range|:
operator|new
name|TreeSet
argument_list|<
name|CourseOffering
argument_list|>
argument_list|(
name|courses
argument_list|)
control|)
block|{
if|if
condition|(
name|co
operator|.
name|isIsControl
argument_list|()
condition|)
continue|continue;
name|cell
operator|.
name|addName
argument_list|(
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassLabel
argument_list|(
name|co
argument_list|,
name|context
operator|.
name|isShowClassSuffix
argument_list|()
argument_list|,
name|context
operator|.
name|isShowConfigName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|isShowCourseTitle
argument_list|()
condition|)
block|{
if|if
condition|(
name|co
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|co
operator|.
name|getTitle
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cell
operator|.
name|addName
argument_list|(
name|co
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addTitle
argument_list|(
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassLabel
argument_list|(
name|co
argument_list|,
name|context
operator|.
name|isShowClassSuffix
argument_list|()
argument_list|,
name|context
operator|.
name|isShowConfigName
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|co
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|.
name|addTitle
argument_list|(
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassLabel
argument_list|(
name|co
argument_list|,
name|context
operator|.
name|isShowClassSuffix
argument_list|()
argument_list|,
name|context
operator|.
name|isShowConfigName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|context
operator|.
name|isShowClassNameTwoLines
argument_list|()
condition|)
block|{
name|cell
operator|.
name|addTitle
argument_list|(
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassLabel
argument_list|(
name|co
argument_list|,
name|context
operator|.
name|isShowClassSuffix
argument_list|()
argument_list|,
name|context
operator|.
name|isShowConfigName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|cell
operator|.
name|setLength
argument_list|(
name|assignment
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getSlotsPerMtg
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignment
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|TimePattern
operator|.
name|sTypeExactTime
condition|)
block|{
name|DurationModel
name|dm
init|=
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getDurationModel
argument_list|()
decl_stmt|;
name|int
name|minsPerMeeting
init|=
name|dm
operator|.
name|getExactTimeMinutesPerMeeting
argument_list|(
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|,
name|assignment
operator|.
name|getDatePattern
argument_list|()
argument_list|,
name|assignment
operator|.
name|getDays
argument_list|()
argument_list|)
decl_stmt|;
name|cell
operator|.
name|setLength
argument_list|(
name|ExactTimeMins
operator|.
name|getNrSlotsPerMtg
argument_list|(
name|minsPerMeeting
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Location
name|location
range|:
name|assignment
operator|.
name|getRooms
argument_list|()
control|)
block|{
name|cell
operator|.
name|addRoom
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|bgMode
init|=
name|context
operator|.
name|getBgMode
argument_list|()
decl_stmt|;
name|AssignmentPreferenceInfo
name|assignmentInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|notAvailable
condition|)
block|{
name|cell
operator|.
name|setBackground
argument_list|(
name|sBgColorNotAvailable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|assignmentInfo
operator|=
operator|(
name|AssignmentPreferenceInfo
operator|)
name|assignment
operator|.
name|getAssignmentInfo
argument_list|(
literal|"AssignmentInfo"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|assignmentInfo
operator|!=
literal|null
condition|)
block|{
name|int
name|roomPref
init|=
name|assignmentInfo
operator|.
name|combineRoomPreference
argument_list|()
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|getResourceType
argument_list|()
operator|==
name|ResourceType
operator|.
name|ROOM
operator|.
name|ordinal
argument_list|()
operator|&&
name|model
operator|.
name|getResourceId
argument_list|()
operator|!=
literal|null
condition|)
name|roomPref
operator|=
name|assignmentInfo
operator|.
name|getRoomPreference
argument_list|(
name|model
operator|.
name|getResourceId
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|BgMode
operator|.
name|values
argument_list|()
index|[
name|bgMode
index|]
condition|)
block|{
case|case
name|TimePref
case|:
name|cell
operator|.
name|setBackground
argument_list|(
name|pref2color
argument_list|(
name|assignmentInfo
operator|.
name|getTimePreference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|RoomPref
case|:
name|cell
operator|.
name|setBackground
argument_list|(
name|pref2color
argument_list|(
name|roomPref
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|StudentConf
case|:
name|cell
operator|.
name|setBackground
argument_list|(
name|conflicts2color
argument_list|(
name|assignmentInfo
operator|.
name|getNrStudentConflicts
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|InstructorBtbPref
case|:
name|cell
operator|.
name|setBackground
argument_list|(
name|pref2color
argument_list|(
name|assignmentInfo
operator|.
name|getBtbInstructorPreference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Perturbations
case|:
name|String
name|pref
init|=
name|PreferenceLevel
operator|.
name|sNeutral
decl_stmt|;
if|if
condition|(
name|assignmentInfo
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|assignmentInfo
operator|.
name|getIsInitial
argument_list|()
condition|)
name|pref
operator|=
name|PreferenceLevel
operator|.
name|sStronglyPreferred
expr_stmt|;
if|else if
condition|(
name|assignmentInfo
operator|.
name|getHasInitialSameTime
argument_list|()
condition|)
name|pref
operator|=
name|PreferenceLevel
operator|.
name|sDiscouraged
expr_stmt|;
if|else if
condition|(
name|assignmentInfo
operator|.
name|getHasInitialSameRoom
argument_list|()
condition|)
name|pref
operator|=
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
expr_stmt|;
else|else
name|pref
operator|=
name|PreferenceLevel
operator|.
name|sProhibited
expr_stmt|;
block|}
name|cell
operator|.
name|setBackground
argument_list|(
name|pref2color
argument_list|(
name|pref
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|PerturbationPenalty
case|:
name|cell
operator|.
name|setBackground
argument_list|(
name|conflicts2color
argument_list|(
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|assignmentInfo
operator|.
name|getPerturbationPenalty
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|HardConflicts
case|:
name|cell
operator|.
name|setBackground
argument_list|(
name|pref2color
argument_list|(
name|hardConflicts2pref
argument_list|(
name|assignmentInfo
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DepartmentalBalancing
case|:
name|cell
operator|.
name|setBackground
argument_list|(
name|conflicts2colorFast
argument_list|(
operator|(
name|int
operator|)
name|assignmentInfo
operator|.
name|getMaxDeptBalancPenalty
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TooBigRooms
case|:
comment|//FIXME: this needs to be changed to reflect the new maxLimit/room ratio model
name|int
name|roomCap
init|=
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getMinRoomLimit
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|long
name|minRoomSize
init|=
name|assignmentInfo
operator|.
name|getMinRoomSize
argument_list|()
decl_stmt|;
name|int
name|roomSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|assignment
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|r
init|=
operator|(
name|Location
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|roomSize
operator|+=
name|r
operator|.
name|getCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|roomSize
operator|<
name|roomCap
condition|)
name|cell
operator|.
name|setBackground
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|cell
operator|.
name|setBackground
argument_list|(
name|pref2color
argument_list|(
name|assignmentInfo
operator|.
name|getTooBigRoomPreference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|assignment
operator|.
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cell
operator|.
name|setPreference
argument_list|(
operator|(
name|assignmentInfo
operator|.
name|getNrRoomLocations
argument_list|()
operator|==
literal|1
condition|?
literal|"<u>"
else|:
literal|""
operator|)
operator|+
name|roomCap
operator|+
literal|" / "
operator|+
operator|(
name|minRoomSize
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|?
literal|"-"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|minRoomSize
argument_list|)
operator|)
operator|+
literal|" / "
operator|+
name|roomSize
operator|+
operator|(
name|assignmentInfo
operator|.
name|getNrRoomLocations
argument_list|()
operator|==
literal|1
condition|?
literal|"</u>"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|StudentGroups
case|:
if|if
condition|(
name|assignmentInfo
operator|.
name|getStudentGroupPercent
argument_list|()
operator|!=
literal|null
condition|)
name|cell
operator|.
name|setBackground
argument_list|(
name|percentage2color
argument_list|(
name|assignmentInfo
operator|.
name|getStudentGroupPercent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignmentInfo
operator|.
name|getStudentGroupComment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cell
operator|.
name|setPreference
argument_list|(
name|assignmentInfo
operator|.
name|getStudentGroupComment
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
if|if
condition|(
operator|!
name|cell
operator|.
name|hasPreference
argument_list|()
condition|)
block|{
name|cell
operator|.
name|setPreference
argument_list|(
operator|(
name|assignmentInfo
operator|.
name|getBestNormalizedTimePreference
argument_list|()
operator|<
name|assignmentInfo
operator|.
name|getNormalizedTimePreference
argument_list|()
condition|?
literal|"<span style='color:red'>"
operator|+
operator|(
name|int
operator|)
operator|(
name|assignmentInfo
operator|.
name|getNormalizedTimePreference
argument_list|()
operator|-
name|assignmentInfo
operator|.
name|getBestNormalizedTimePreference
argument_list|()
operator|)
operator|+
literal|"</span>"
else|:
literal|""
operator|+
operator|(
name|int
operator|)
operator|(
name|assignmentInfo
operator|.
name|getNormalizedTimePreference
argument_list|()
operator|-
name|assignmentInfo
operator|.
name|getBestNormalizedTimePreference
argument_list|()
operator|)
operator|)
operator|+
literal|", "
operator|+
operator|(
name|assignmentInfo
operator|.
name|getNrStudentConflicts
argument_list|()
operator|>
literal|0
condition|?
literal|"<span style='color:rgb(20,130,10)'>"
operator|+
name|assignmentInfo
operator|.
name|getNrStudentConflicts
argument_list|()
operator|+
literal|"</span>"
else|:
literal|""
operator|+
name|assignmentInfo
operator|.
name|getNrStudentConflicts
argument_list|()
operator|)
operator|+
literal|", "
operator|+
operator|(
name|assignmentInfo
operator|.
name|getBestRoomPreference
argument_list|()
operator|<
name|roomPref
condition|?
literal|"<span style='color:blue'>"
operator|+
operator|(
name|roomPref
operator|-
name|assignmentInfo
operator|.
name|getBestRoomPreference
argument_list|()
operator|)
operator|+
literal|"</span>"
else|:
literal|""
operator|+
operator|(
name|roomPref
operator|-
name|assignmentInfo
operator|.
name|getBestRoomPreference
argument_list|()
operator|)
operator|)
argument_list|)
expr_stmt|;
block|}
name|cell
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|TimePreference
argument_list|,
operator|(
name|int
operator|)
name|assignmentInfo
operator|.
name|getNormalizedTimePreference
argument_list|()
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|StudentConflicts
argument_list|,
name|assignmentInfo
operator|.
name|getNrStudentConflicts
argument_list|()
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|StudentConflictsCommitted
argument_list|,
name|assignmentInfo
operator|.
name|getNrCommitedStudentConflicts
argument_list|()
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|StudentConflictsDistance
argument_list|,
name|assignmentInfo
operator|.
name|getNrDistanceStudentConflicts
argument_list|()
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|StudentConflictsHard
argument_list|,
name|assignmentInfo
operator|.
name|getNrHardStudentConflicts
argument_list|()
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|RoomPreference
argument_list|,
name|roomPref
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|InstructorPreference
argument_list|,
name|assignmentInfo
operator|.
name|getBtbInstructorPreference
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignmentInfo
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cell
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|InitialAssignment
argument_list|,
name|assignmentInfo
operator|.
name|getIsInitial
argument_list|()
condition|?
literal|"-"
else|:
name|assignmentInfo
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|PerturbationPenalty
argument_list|,
name|sDF
operator|.
name|format
argument_list|(
name|assignmentInfo
operator|.
name|getPerturbationPenalty
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cell
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|NonConflictingPlacements
argument_list|,
name|assignmentInfo
operator|.
name|getNrPlacementsNoConf
argument_list|()
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|DepartmentBalance
argument_list|,
name|sDF
operator|.
name|format
argument_list|(
name|assignmentInfo
operator|.
name|getDeptBalancPenalty
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|Owner
argument_list|,
name|assignment
operator|.
name|getSolution
argument_list|()
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bgMode
operator|==
name|BgMode
operator|.
name|InstructionalType
operator|.
name|ordinal
argument_list|()
condition|)
block|{
name|ItypeDesc
name|it
init|=
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
decl_stmt|;
if|if
condition|(
name|it
operator|!=
literal|null
condition|)
name|cell
operator|.
name|setBackground
argument_list|(
name|context
operator|.
name|getInstructionalTypeColor
argument_list|(
name|it
operator|.
name|getItype
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bgMode
operator|==
name|BgMode
operator|.
name|DistributionConstPref
operator|.
name|ordinal
argument_list|()
condition|)
block|{
name|Vector
name|constraintInfos
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
try|try
block|{
name|constraintInfos
operator|=
name|assignment
operator|.
name|getConstraintInfos
argument_list|(
literal|"DistributionInfo"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|constraintInfos
operator|!=
literal|null
condition|)
block|{
name|PreferenceCombination
name|pref
init|=
name|PreferenceCombination
operator|.
name|getDefault
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|constraintInfos
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|GroupConstraintInfo
name|gcInfo
init|=
operator|(
name|GroupConstraintInfo
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|gcInfo
operator|.
name|isSatisfied
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|gcInfo
operator|.
name|getPreference
argument_list|()
argument_list|)
operator|||
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|gcInfo
operator|.
name|getPreference
argument_list|()
argument_list|)
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
name|pref
operator|.
name|addPreferenceInt
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2int
argument_list|(
name|gcInfo
operator|.
name|getPreference
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cell
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|DistributionPreference
argument_list|,
name|pref
operator|.
name|getPreferenceProlog
argument_list|()
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setBackground
argument_list|(
name|pref2color
argument_list|(
name|pref
operator|.
name|getPreferenceProlog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ApplicationProperty
operator|.
name|TimetableGridUseClassInstructors
operator|.
name|isTrue
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|ApplicationProperty
operator|.
name|TimetableGridUseClassInstructorsCheckClassDisplayInstructors
operator|.
name|isTrue
argument_list|()
operator|||
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|isDisplayInstructor
argument_list|()
condition|)
block|{
for|for
control|(
name|ClassInstructor
name|instructor
range|:
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassInstructors
argument_list|()
control|)
block|{
if|if
condition|(
name|instructor
operator|.
name|isLead
argument_list|()
operator|||
name|ApplicationProperty
operator|.
name|TimetableGridUseClassInstructorsCheckLead
operator|.
name|isFalse
argument_list|()
condition|)
name|cell
operator|.
name|addInstructor
argument_list|(
name|instructor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getName
argument_list|(
name|context
operator|.
name|getInstructorNameFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|DepartmentalInstructor
name|instructor
range|:
name|assignment
operator|.
name|getInstructors
argument_list|()
control|)
block|{
name|cell
operator|.
name|addInstructor
argument_list|(
name|instructor
operator|.
name|getName
argument_list|(
name|context
operator|.
name|getInstructorNameFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|days
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|(
name|assignment
operator|.
name|getDays
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|i
index|]
operator|)
operator|!=
literal|0
condition|)
name|days
operator|+=
name|CONST
operator|.
name|shortDays
argument_list|()
index|[
name|i
index|]
expr_stmt|;
name|cell
operator|.
name|setDays
argument_list|(
name|days
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setTime
argument_list|(
name|Constants
operator|.
name|toTime
argument_list|(
name|assignment
operator|.
name|getStartSlot
argument_list|()
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
argument_list|)
operator|+
literal|" - "
operator|+
name|Constants
operator|.
name|toTime
argument_list|(
operator|(
name|assignment
operator|.
name|getStartSlot
argument_list|()
operator|+
name|assignment
operator|.
name|getSlotPerMtg
argument_list|()
operator|)
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|-
name|assignment
operator|.
name|getBreakTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setDate
argument_list|(
name|formatDatePattern
argument_list|(
name|assignment
operator|.
name|getDatePattern
argument_list|()
argument_list|,
name|Constants
operator|.
name|DAY_CODES
index|[
name|day
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setWeekCode
argument_list|(
name|pattern2string
argument_list|(
name|assignment
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getPatternBitSet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cell
return|;
block|}
specifier|protected
specifier|static
name|double
name|countUtilization
parameter_list|(
name|Iterable
argument_list|<
name|Assignment
argument_list|>
name|assignments
parameter_list|,
name|TimetableGridContext
name|context
parameter_list|)
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|slots
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Assignment
name|assignment
range|:
name|assignments
control|)
block|{
name|TimeLocation
name|t
init|=
operator|(
name|assignment
operator|==
literal|null
condition|?
literal|null
else|:
name|assignment
operator|.
name|getTimeLocation
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
continue|continue;
name|int
name|start
init|=
name|Math
operator|.
name|max
argument_list|(
name|context
operator|.
name|getFirstSlot
argument_list|()
argument_list|,
name|t
operator|.
name|getStartSlot
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|stop
init|=
name|Math
operator|.
name|min
argument_list|(
name|context
operator|.
name|getLastSlot
argument_list|()
argument_list|,
name|t
operator|.
name|getStartSlot
argument_list|()
operator|+
name|t
operator|.
name|getLength
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|start
operator|>
name|stop
condition|)
continue|continue;
if|if
condition|(
name|context
operator|.
name|getFirstDay
argument_list|()
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|idx
init|=
name|context
operator|.
name|getFirstDay
argument_list|()
init|;
name|idx
operator|<
literal|7
operator|+
name|context
operator|.
name|getFirstDay
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|int
name|dow
init|=
operator|(
operator|(
name|idx
operator|+
name|context
operator|.
name|getStartDayDayOfWeek
argument_list|()
operator|)
operator|%
literal|7
operator|)
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|getWeekCode
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|&&
operator|(
name|t
operator|.
name|getDayCode
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|dow
index|]
operator|)
operator|!=
literal|0
operator|&&
operator|(
name|context
operator|.
name|getDayCode
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|dow
index|]
operator|)
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|slot
init|=
name|start
init|;
name|slot
operator|<=
name|stop
condition|;
name|slot
operator|++
control|)
name|slots
operator|.
name|add
argument_list|(
literal|288
operator|*
name|idx
operator|+
name|slot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|int
name|idx
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
operator|(
name|idx
operator|=
name|t
operator|.
name|getWeekCode
argument_list|()
operator|.
name|nextSetBit
argument_list|(
literal|1
operator|+
name|idx
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|int
name|dow
init|=
operator|(
operator|(
name|idx
operator|+
name|context
operator|.
name|getStartDayDayOfWeek
argument_list|()
operator|)
operator|%
literal|7
operator|)
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getDefaultDatePattern
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|&&
operator|(
name|t
operator|.
name|getDayCode
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|dow
index|]
operator|)
operator|!=
literal|0
operator|&&
operator|(
name|context
operator|.
name|getDayCode
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|dow
index|]
operator|)
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|slot
init|=
name|start
init|;
name|slot
operator|<=
name|stop
condition|;
name|slot
operator|++
control|)
name|slots
operator|.
name|add
argument_list|(
literal|288
operator|*
name|idx
operator|+
name|slot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|slots
operator|.
name|size
argument_list|()
operator|/
operator|(
name|context
operator|.
name|getNumberOfWeeks
argument_list|()
operator|*
literal|12
operator|)
return|;
block|}
specifier|public
specifier|static
name|String
name|formatDatePattern
parameter_list|(
name|DatePattern
name|dp
parameter_list|,
name|int
name|dayCode
parameter_list|)
block|{
if|if
condition|(
name|dp
operator|==
literal|null
operator|||
name|dp
operator|.
name|isDefault
argument_list|()
condition|)
return|return
literal|null
return|;
name|String
name|format
init|=
name|ApplicationProperty
operator|.
name|DatePatternFormatUseDates
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"never"
operator|.
name|equals
argument_list|(
name|format
argument_list|)
condition|)
return|return
name|dp
operator|.
name|getName
argument_list|()
return|;
if|if
condition|(
literal|"extended"
operator|.
name|equals
argument_list|(
name|format
argument_list|)
operator|&&
name|dp
operator|.
name|getType
argument_list|()
operator|!=
name|DatePattern
operator|.
name|sTypeExtended
condition|)
return|return
name|dp
operator|.
name|getName
argument_list|()
return|;
if|if
condition|(
literal|"alternate"
operator|.
name|equals
argument_list|(
name|format
argument_list|)
operator|&&
name|dp
operator|.
name|getType
argument_list|()
operator|==
name|DatePattern
operator|.
name|sTypeAlternate
condition|)
return|return
name|dp
operator|.
name|getName
argument_list|()
return|;
name|BitSet
name|weekCode
init|=
name|dp
operator|.
name|getPatternBitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|weekCode
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|dp
operator|.
name|getName
argument_list|()
return|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setLenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Date
name|dpFirstDate
init|=
name|DateUtils
operator|.
name|getDate
argument_list|(
literal|1
argument_list|,
name|dp
operator|.
name|getSession
argument_list|()
operator|.
name|getPatternStartMonth
argument_list|()
argument_list|,
name|dp
operator|.
name|getSession
argument_list|()
operator|.
name|getSessionStartYear
argument_list|()
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|dpFirstDate
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
name|weekCode
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|Date
name|first
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|idx
operator|<
name|weekCode
operator|.
name|size
argument_list|()
operator|&&
name|first
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|weekCode
operator|.
name|get
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|int
name|dow
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|dow
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|MON
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|TUE
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|WED
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|THU
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|FRI
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|SAT
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|SUN
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|first
operator|==
literal|null
condition|)
return|return
name|dp
operator|.
name|getName
argument_list|()
return|;
name|cal
operator|.
name|setTime
argument_list|(
name|dpFirstDate
argument_list|)
expr_stmt|;
name|idx
operator|=
name|weekCode
operator|.
name|length
argument_list|()
operator|-
literal|1
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|Date
name|last
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|idx
operator|>=
literal|0
operator|&&
name|last
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|weekCode
operator|.
name|get
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|int
name|dow
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|dow
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|MON
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|TUE
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|WED
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|THU
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|FRI
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|SAT
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
if|if
condition|(
operator|(
name|dayCode
operator|&
name|DayCode
operator|.
name|SUN
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|last
operator|==
literal|null
condition|)
return|return
name|dp
operator|.
name|getName
argument_list|()
return|;
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|dpf
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_EVENT_SHORT
argument_list|)
decl_stmt|;
return|return
name|dpf
operator|.
name|format
argument_list|(
name|first
argument_list|)
operator|+
operator|(
name|first
operator|.
name|equals
argument_list|(
name|last
argument_list|)
condition|?
literal|""
else|:
literal|" - "
operator|+
name|dpf
operator|.
name|format
argument_list|(
name|last
argument_list|)
operator|)
return|;
block|}
specifier|public
specifier|static
name|TimetableGridModel
name|createModel
parameter_list|(
name|String
name|solutionIdsStr
parameter_list|,
name|Location
name|room
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|TimetableGridContext
name|context
parameter_list|)
block|{
name|TimetableGridModel
name|model
init|=
operator|new
name|TimetableGridModel
argument_list|(
name|ResourceType
operator|.
name|ROOM
operator|.
name|ordinal
argument_list|()
argument_list|,
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|.
name|setName
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setSize
argument_list|(
name|room
operator|.
name|getCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstDay
argument_list|(
name|context
operator|.
name|getFirstDay
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstSessionDay
argument_list|(
name|context
operator|.
name|getFirstSessionDay
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstDate
argument_list|(
name|context
operator|.
name|getFirstDate
argument_list|()
argument_list|)
expr_stmt|;
name|Solution
name|firstSolution
init|=
literal|null
decl_stmt|;
name|String
name|ownerIds
init|=
literal|""
decl_stmt|;
name|HashSet
name|deptIds
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|solutionIdsStr
argument_list|,
literal|","
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|Long
name|solutionId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
name|Solution
name|solution
init|=
name|SolutionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|solutionId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|solution
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|firstSolution
operator|==
literal|null
condition|)
name|firstSolution
operator|=
name|solution
expr_stmt|;
if|if
condition|(
name|ownerIds
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|ownerIds
operator|+=
literal|","
expr_stmt|;
name|ownerIds
operator|+=
name|solution
operator|.
name|getOwner
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|solution
operator|.
name|getOwner
argument_list|()
operator|.
name|getDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|deptIds
operator|.
name|add
argument_list|(
name|d
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct a from Assignment as a inner join a.rooms as r where a.solution.uniqueId in ("
operator|+
name|solutionIdsStr
operator|+
literal|") and r.uniqueId=:resourceId"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Assignment
argument_list|>
name|assignments
init|=
name|q
operator|.
name|list
argument_list|()
decl_stmt|;
name|createCells
argument_list|(
name|model
argument_list|,
name|assignments
argument_list|,
name|hibSession
argument_list|,
name|context
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|q
operator|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct a from Room r inner join r.assignments as a "
operator|+
literal|"where r.uniqueId=:roomId and a.solution.commited=true and a.solution.owner.session.uniqueId=:sessionId and a.solution.owner.uniqueId not in ("
operator|+
name|ownerIds
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"roomId"
argument_list|,
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|room
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Assignment
argument_list|>
name|committed
init|=
name|q
operator|.
name|list
argument_list|()
decl_stmt|;
name|createCells
argument_list|(
name|model
argument_list|,
name|committed
argument_list|,
name|hibSession
argument_list|,
name|context
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|TimeGridShowClassesAcrossPartitions
operator|.
name|isTrue
argument_list|()
operator|&&
name|room
operator|instanceof
name|Room
condition|)
block|{
name|q
operator|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct a from Assignment as a inner join a.rooms as r where a.solution.uniqueId in ("
operator|+
name|solutionIdsStr
operator|+
literal|") and r.parentRoom.uniqueId=:resourceId"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assignments
operator|=
name|q
operator|.
name|list
argument_list|()
expr_stmt|;
name|createCells
argument_list|(
name|model
argument_list|,
name|assignments
argument_list|,
name|hibSession
argument_list|,
name|context
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|q
operator|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct a from Room r inner join r.assignments as a "
operator|+
literal|"where r.parentRoom.uniqueId=:roomId and a.solution.commited=true and a.solution.owner.session.uniqueId=:sessionId and a.solution.owner.uniqueId not in ("
operator|+
name|ownerIds
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"roomId"
argument_list|,
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|room
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|committed
operator|=
name|q
operator|.
name|list
argument_list|()
expr_stmt|;
name|createCells
argument_list|(
name|model
argument_list|,
name|committed
argument_list|,
name|hibSession
argument_list|,
name|context
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|Room
operator|)
name|room
operator|)
operator|.
name|getParentRoom
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|q
operator|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct a from Assignment as a inner join a.rooms as r where a.solution.uniqueId in ("
operator|+
name|solutionIdsStr
operator|+
literal|") and r.uniqueId=:resourceId"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
operator|(
operator|(
name|Room
operator|)
name|room
operator|)
operator|.
name|getParentRoom
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assignments
operator|=
name|q
operator|.
name|list
argument_list|()
expr_stmt|;
name|createCells
argument_list|(
name|model
argument_list|,
name|assignments
argument_list|,
name|hibSession
argument_list|,
name|context
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|q
operator|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct a from Room r inner join r.assignments as a "
operator|+
literal|"where r.uniqueId=:roomId and a.solution.commited=true and a.solution.owner.session.uniqueId=:sessionId and a.solution.owner.uniqueId not in ("
operator|+
name|ownerIds
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"roomId"
argument_list|,
operator|(
operator|(
name|Room
operator|)
name|room
operator|)
operator|.
name|getParentRoom
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|room
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|committed
operator|=
name|q
operator|.
name|list
argument_list|()
expr_stmt|;
name|createCells
argument_list|(
name|model
argument_list|,
name|committed
argument_list|,
name|hibSession
argument_list|,
name|context
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|model
operator|.
name|setUtilization
argument_list|(
name|countUtilization
argument_list|(
operator|new
name|Combine
argument_list|<
name|Assignment
argument_list|>
argument_list|(
name|assignments
argument_list|,
name|committed
argument_list|)
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|RoomSharingModel
name|sharing
init|=
name|room
operator|.
name|getRoomSharingModel
argument_list|()
decl_stmt|;
if|if
condition|(
name|sharing
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|start
init|=
literal|0
decl_stmt|;
name|Boolean
name|av
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|Constants
operator|.
name|SLOTS_PER_DAY
condition|;
name|j
operator|++
control|)
block|{
name|Boolean
name|available
decl_stmt|;
if|if
condition|(
name|sharing
operator|.
name|isFreeForAll
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
condition|)
block|{
name|available
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|sharing
operator|.
name|isNotAvailable
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
condition|)
block|{
name|available
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|Long
name|dept
init|=
name|sharing
operator|.
name|getDepartmentId
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
decl_stmt|;
name|available
operator|=
operator|(
name|dept
operator|==
literal|null
operator|||
name|deptIds
operator|.
name|contains
argument_list|(
name|dept
argument_list|)
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|av
operator|==
literal|null
condition|)
block|{
name|av
operator|=
name|available
expr_stmt|;
name|start
operator|=
name|j
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|av
operator|.
name|equals
argument_list|(
name|available
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|av
condition|)
block|{
name|TimetableGridBackground
name|bg
init|=
operator|new
name|TimetableGridBackground
argument_list|()
decl_stmt|;
name|bg
operator|.
name|setBackground
argument_list|(
name|sBgColorNotAvailable
argument_list|)
expr_stmt|;
name|bg
operator|.
name|setSlot
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|bg
operator|.
name|setLength
argument_list|(
name|j
operator|-
name|start
argument_list|)
expr_stmt|;
name|bg
operator|.
name|setDay
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|bg
operator|.
name|setAvailable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|model
operator|.
name|addBackground
argument_list|(
name|bg
argument_list|)
expr_stmt|;
block|}
name|av
operator|=
name|available
expr_stmt|;
name|start
operator|=
name|j
expr_stmt|;
block|}
block|}
if|if
condition|(
name|av
operator|!=
literal|null
operator|&&
operator|!
name|av
condition|)
block|{
name|TimetableGridBackground
name|bg
init|=
operator|new
name|TimetableGridBackground
argument_list|()
decl_stmt|;
name|bg
operator|.
name|setBackground
argument_list|(
name|sBgColorNotAvailable
argument_list|)
expr_stmt|;
name|bg
operator|.
name|setSlot
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|bg
operator|.
name|setLength
argument_list|(
name|Constants
operator|.
name|SLOTS_PER_DAY
operator|-
name|start
argument_list|)
expr_stmt|;
name|bg
operator|.
name|setDay
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|bg
operator|.
name|setAvailable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|model
operator|.
name|addBackground
argument_list|(
name|bg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|context
operator|.
name|isShowEvents
argument_list|()
operator|&&
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|createMeetingCells
argument_list|(
name|model
argument_list|,
name|room
operator|.
name|getSession
argument_list|()
argument_list|,
name|context
argument_list|,
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|.
name|getRoomAvailability
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|context
operator|.
name|getSessionStartDate
argument_list|()
argument_list|,
name|context
operator|.
name|getSessionEndDate
argument_list|()
argument_list|,
name|RoomAvailabilityInterface
operator|.
name|sClassType
argument_list|)
argument_list|,
name|room
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|TimeGridShowClassesAcrossPartitions
operator|.
name|isTrue
argument_list|()
operator|&&
name|room
operator|instanceof
name|Room
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|Room
operator|)
name|room
operator|)
operator|.
name|getParentRoom
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|createMeetingCells
argument_list|(
name|model
argument_list|,
name|room
operator|.
name|getSession
argument_list|()
argument_list|,
name|context
argument_list|,
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|.
name|getRoomAvailability
argument_list|(
operator|(
operator|(
name|Room
operator|)
name|room
operator|)
operator|.
name|getParentRoom
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|context
operator|.
name|getSessionStartDate
argument_list|()
argument_list|,
name|context
operator|.
name|getSessionEndDate
argument_list|()
argument_list|,
name|RoomAvailabilityInterface
operator|.
name|sClassType
argument_list|)
argument_list|,
operator|(
operator|(
name|Room
operator|)
name|room
operator|)
operator|.
name|getParentRoom
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Room
name|child
range|:
operator|(
operator|(
name|Room
operator|)
name|room
operator|)
operator|.
name|getPartitions
argument_list|()
control|)
block|{
name|createMeetingCells
argument_list|(
name|model
argument_list|,
name|room
operator|.
name|getSession
argument_list|()
argument_list|,
name|context
argument_list|,
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|.
name|getRoomAvailability
argument_list|(
name|child
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|context
operator|.
name|getSessionStartDate
argument_list|()
argument_list|,
name|context
operator|.
name|getSessionEndDate
argument_list|()
argument_list|,
name|RoomAvailabilityInterface
operator|.
name|sClassType
argument_list|)
argument_list|,
name|child
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|model
operator|.
name|setType
argument_list|(
name|room
operator|instanceof
name|Room
condition|?
operator|(
operator|(
name|Room
operator|)
name|room
operator|)
operator|.
name|getRoomType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
return|return
name|model
return|;
block|}
specifier|public
specifier|static
name|TimetableGridModel
name|createModel
parameter_list|(
name|String
name|solutionIdsStr
parameter_list|,
name|DepartmentalInstructor
name|instructor
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|TimetableGridContext
name|context
parameter_list|)
block|{
name|TimetableGridModel
name|model
init|=
operator|new
name|TimetableGridModel
argument_list|(
name|ResourceType
operator|.
name|INSTRUCTOR
operator|.
name|ordinal
argument_list|()
argument_list|,
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|.
name|setName
argument_list|(
name|instructor
operator|.
name|getName
argument_list|(
name|NameFormat
operator|.
name|LAST_FIRST_MIDDLE
operator|.
name|reference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstDay
argument_list|(
name|context
operator|.
name|getFirstDay
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstSessionDay
argument_list|(
name|context
operator|.
name|getFirstSessionDay
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstDate
argument_list|(
name|context
operator|.
name|getFirstDate
argument_list|()
argument_list|)
expr_stmt|;
name|Solution
name|firstSolution
init|=
literal|null
decl_stmt|;
name|String
name|ownerIds
init|=
literal|""
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|solutionIdsStr
argument_list|,
literal|","
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|Long
name|solutionId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
name|Solution
name|solution
init|=
operator|(
operator|new
name|SolutionDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|solutionId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|solution
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|firstSolution
operator|==
literal|null
condition|)
name|firstSolution
operator|=
name|solution
expr_stmt|;
if|if
condition|(
name|ownerIds
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|ownerIds
operator|+=
literal|","
expr_stmt|;
name|ownerIds
operator|+=
name|solution
operator|.
name|getOwner
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|Assignment
argument_list|>
name|assignments
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Assignment
argument_list|>
name|committed
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|TimetableGridUseClassInstructors
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|String
name|check
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|TimetableGridUseClassInstructorsCheckLead
operator|.
name|isTrue
argument_list|()
condition|)
name|check
operator|+=
literal|" and i.lead = true"
expr_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|TimetableGridUseClassInstructorsCheckClassDisplayInstructors
operator|.
name|isTrue
argument_list|()
condition|)
name|check
operator|+=
literal|" and i.classInstructing.displayInstructor = true"
expr_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct a from Assignment as a inner join a.clazz.classInstructors as i where a.solution.uniqueId in ("
operator|+
name|solutionIdsStr
operator|+
literal|") and i.instructor.externalUniqueId = :extId"
operator|+
name|check
argument_list|)
decl_stmt|;
name|q
operator|.
name|setString
argument_list|(
literal|"extId"
argument_list|,
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assignments
operator|=
name|q
operator|.
name|list
argument_list|()
expr_stmt|;
name|q
operator|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct a from ClassInstructor i inner join i.classInstructing.assignments as a "
operator|+
literal|"where i.instructor.externalUniqueId = :extId and a.solution.commited = true and a.solution.owner.session.uniqueId = :sessionId and a.solution.owner.uniqueId not in ("
operator|+
name|ownerIds
operator|+
literal|")"
operator|+
name|check
argument_list|)
expr_stmt|;
name|q
operator|.
name|setString
argument_list|(
literal|"extId"
argument_list|,
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|committed
operator|=
name|q
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct a from Assignment as a inner join a.clazz.classInstructors as i where a.solution.uniqueId in ("
operator|+
name|solutionIdsStr
operator|+
literal|") and i.instructor.uniqueId = :instructorId"
operator|+
name|check
argument_list|)
decl_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"instructorId"
argument_list|,
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assignments
operator|=
name|q
operator|.
name|list
argument_list|()
expr_stmt|;
name|q
operator|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct a from ClassInstructor i inner join i.classInstructing.assignments as a "
operator|+
literal|"where i.instructor.uniqueId = :instructorId and a.solution.commited = true and a.solution.owner.session.uniqueId = :sessionId and a.solution.owner.uniqueId not in ("
operator|+
name|ownerIds
operator|+
literal|")"
operator|+
name|check
argument_list|)
expr_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"instructorId"
argument_list|,
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|committed
operator|=
name|q
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct a from Assignment as a inner join a.instructors as i where a.solution.uniqueId in ("
operator|+
name|solutionIdsStr
operator|+
literal|") and i.externalUniqueId=:puid"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setString
argument_list|(
literal|"puid"
argument_list|,
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assignments
operator|=
name|q
operator|.
name|list
argument_list|()
expr_stmt|;
name|q
operator|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct a from DepartmentalInstructor i inner join i.assignments as a "
operator|+
literal|"where i.externalUniqueId=:puid and a.solution.commited=true and a.solution.owner.session.uniqueId=:sessionId and a.solution.owner.uniqueId not in ("
operator|+
name|ownerIds
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setString
argument_list|(
literal|"puid"
argument_list|,
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|committed
operator|=
name|q
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct a from Assignment as a inner join a.instructors as i where a.solution.uniqueId in ("
operator|+
name|solutionIdsStr
operator|+
literal|") and i.uniqueId=:resourceId"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assignments
operator|=
name|q
operator|.
name|list
argument_list|()
expr_stmt|;
name|q
operator|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct a from DepartmentalInstructor i inner join i.assignments as a "
operator|+
literal|"where i.uniqueId=:instructorId and a.solution.commited=true and a.solution.owner.session.uniqueId=:sessionId and a.solution.owner.uniqueId not in ("
operator|+
name|ownerIds
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"instructorId"
argument_list|,
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|committed
operator|=
name|q
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
block|}
name|createCells
argument_list|(
name|model
argument_list|,
name|assignments
argument_list|,
name|hibSession
argument_list|,
name|context
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|createCells
argument_list|(
name|model
argument_list|,
name|committed
argument_list|,
name|hibSession
argument_list|,
name|context
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|model
operator|.
name|setUtilization
argument_list|(
name|countUtilization
argument_list|(
operator|new
name|Combine
argument_list|<
name|Assignment
argument_list|>
argument_list|(
name|assignments
argument_list|,
name|committed
argument_list|)
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|isShowEvents
argument_list|()
operator|&&
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|createMeetingCells
argument_list|(
name|model
argument_list|,
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|,
name|context
argument_list|,
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|.
name|getInstructorAvailability
argument_list|(
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|context
operator|.
name|getSessionStartDate
argument_list|()
argument_list|,
name|context
operator|.
name|getSessionEndDate
argument_list|()
argument_list|,
name|RoomAvailabilityInterface
operator|.
name|sClassType
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|instructor
operator|.
name|getPositionType
argument_list|()
operator|!=
literal|null
condition|)
name|model
operator|.
name|setType
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|instructor
operator|.
name|getPositionType
argument_list|()
operator|.
name|getSortOrder
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|model
return|;
block|}
specifier|public
specifier|static
name|TimetableGridModel
name|createModel
parameter_list|(
name|String
name|solutionIdsStr
parameter_list|,
name|Department
name|department
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|TimetableGridContext
name|context
parameter_list|)
block|{
name|TimetableGridModel
name|model
init|=
operator|new
name|TimetableGridModel
argument_list|(
name|ResourceType
operator|.
name|DEPARTMENT
operator|.
name|ordinal
argument_list|()
argument_list|,
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|.
name|setName
argument_list|(
name|department
operator|.
name|getShortLabel
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstDay
argument_list|(
name|context
operator|.
name|getFirstDay
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstSessionDay
argument_list|(
name|context
operator|.
name|getFirstSessionDay
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstDate
argument_list|(
name|context
operator|.
name|getFirstDate
argument_list|()
argument_list|)
expr_stmt|;
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct a from Assignment as a inner join a.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings as o inner join o.subjectArea.department as d where "
operator|+
literal|"a.solution.uniqueId in ("
operator|+
name|solutionIdsStr
operator|+
literal|") and d.uniqueId=:resourceId and "
operator|+
literal|"o.isControl=true"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|List
name|assignments
init|=
name|q
operator|.
name|list
argument_list|()
decl_stmt|;
name|createCells
argument_list|(
name|model
argument_list|,
name|assignments
argument_list|,
name|hibSession
argument_list|,
name|context
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|model
operator|.
name|setSize
argument_list|(
name|assignments
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setUtilization
argument_list|(
name|countUtilization
argument_list|(
name|assignments
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|model
return|;
block|}
specifier|public
specifier|static
name|TimetableGridModel
name|createModel
parameter_list|(
name|String
name|solutionIdsStr
parameter_list|,
name|SubjectArea
name|sa
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|TimetableGridContext
name|context
parameter_list|)
block|{
name|TimetableGridModel
name|model
init|=
operator|new
name|TimetableGridModel
argument_list|(
name|ResourceType
operator|.
name|SUBJECT_AREA
operator|.
name|ordinal
argument_list|()
argument_list|,
name|sa
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|.
name|setName
argument_list|(
name|sa
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstDay
argument_list|(
name|context
operator|.
name|getFirstDay
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstSessionDay
argument_list|(
name|context
operator|.
name|getFirstSessionDay
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstDate
argument_list|(
name|context
operator|.
name|getFirstDate
argument_list|()
argument_list|)
expr_stmt|;
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct a from Assignment as a inner join a.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings as o inner join o.subjectArea as sa where "
operator|+
literal|"a.solution.uniqueId in ("
operator|+
name|solutionIdsStr
operator|+
literal|") and sa.uniqueId=:resourceId and "
operator|+
literal|"o.isControl=true"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|sa
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|List
name|assignments
init|=
name|q
operator|.
name|list
argument_list|()
decl_stmt|;
name|createCells
argument_list|(
name|model
argument_list|,
name|assignments
argument_list|,
name|hibSession
argument_list|,
name|context
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|model
operator|.
name|setSize
argument_list|(
name|assignments
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setUtilization
argument_list|(
name|countUtilization
argument_list|(
name|assignments
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|model
return|;
block|}
specifier|public
specifier|static
name|TimetableGridModel
name|createModel
parameter_list|(
name|String
name|solutionIdsStr
parameter_list|,
name|CurriculumClassification
name|cc
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|TimetableGridContext
name|context
parameter_list|)
block|{
name|TimetableGridModel
name|model
init|=
operator|new
name|TimetableGridModel
argument_list|(
name|ResourceType
operator|.
name|CURRICULUM
operator|.
name|ordinal
argument_list|()
argument_list|,
name|cc
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|.
name|setName
argument_list|(
name|cc
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" "
operator|+
name|cc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstDay
argument_list|(
name|context
operator|.
name|getFirstDay
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstSessionDay
argument_list|(
name|context
operator|.
name|getFirstSessionDay
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstDate
argument_list|(
name|context
operator|.
name|getFirstDate
argument_list|()
argument_list|)
expr_stmt|;
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct a from CurriculumClassification cc inner join cc.courses cx, Assignment a inner join a.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co where "
operator|+
literal|"a.solution.uniqueId in ("
operator|+
name|solutionIdsStr
operator|+
literal|") and cc.uniqueId=:resourceId and "
operator|+
literal|"cx.course = co"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|cc
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|List
name|assignments
init|=
name|q
operator|.
name|list
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
index|[]
argument_list|>
name|restrictions
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
index|[]
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct cc.course.instructionalOffering.uniqueId, (case when g.uniqueId is null then x.uniqueId else g.uniqueId end), z.uniqueId "
operator|+
literal|"from CurriculumReservation r inner join r.areas ra left outer join r.configurations g left outer join r.classes z left outer join z.schedulingSubpart.instrOfferingConfig x "
operator|+
literal|"left outer join r.majors rm left outer join r.classifications rc, "
operator|+
literal|"CurriculumCourse cc inner join cc.classification.curriculum.majors cm "
operator|+
literal|"where cc.classification.uniqueId = :resourceId "
operator|+
literal|"and cc.course.instructionalOffering = r.instructionalOffering and ra = cc.classification.curriculum.academicArea "
operator|+
literal|"and (rm is null or rm = cm) and (rc is null or rc = cc.classification.academicClassification)"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|cc
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|offeringId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|configId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Long
name|clazzId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
index|[]
name|r
init|=
name|restrictions
operator|.
name|get
argument_list|(
name|offeringId
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|r
operator|=
operator|new
name|Set
index|[]
block|{
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
block|,
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
block|}
expr_stmt|;
name|restrictions
operator|.
name|put
argument_list|(
name|offeringId
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configId
operator|!=
literal|null
condition|)
name|r
index|[
literal|0
index|]
operator|.
name|add
argument_list|(
name|configId
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazzId
operator|!=
literal|null
condition|)
name|r
index|[
literal|1
index|]
operator|.
name|add
argument_list|(
name|clazzId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|restrictions
operator|.
name|isEmpty
argument_list|()
condition|)
for|for
control|(
name|Iterator
name|i
init|=
name|assignments
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Assignment
name|asgn
init|=
operator|(
name|Assignment
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
index|[]
name|r
init|=
operator|(
name|restrictions
operator|==
literal|null
condition|?
literal|null
else|:
name|restrictions
operator|.
name|get
argument_list|(
name|asgn
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
operator|&&
name|EventLookupBackend
operator|.
name|hide
argument_list|(
name|r
argument_list|,
name|asgn
operator|.
name|getClazz
argument_list|()
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|createCells
argument_list|(
name|model
argument_list|,
name|assignments
argument_list|,
name|hibSession
argument_list|,
name|context
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|model
operator|.
name|setSize
argument_list|(
name|assignments
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setUtilization
argument_list|(
name|countUtilization
argument_list|(
name|assignments
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|model
return|;
block|}
specifier|public
specifier|static
name|TimetableGridModel
name|createModel
parameter_list|(
name|String
name|solutionIdsStr
parameter_list|,
name|StudentGroup
name|g
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|TimetableGridContext
name|context
parameter_list|)
block|{
name|TimetableGridModel
name|model
init|=
operator|new
name|TimetableGridModel
argument_list|(
name|ResourceType
operator|.
name|STUDENT_GROUP
operator|.
name|ordinal
argument_list|()
argument_list|,
name|g
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|.
name|setName
argument_list|(
name|g
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstDay
argument_list|(
name|context
operator|.
name|getFirstDay
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstSessionDay
argument_list|(
name|context
operator|.
name|getFirstSessionDay
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstDate
argument_list|(
name|context
operator|.
name|getFirstDate
argument_list|()
argument_list|)
expr_stmt|;
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct a from StudentGroupReservation r, Assignment a inner join a.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering as io where "
operator|+
literal|"a.solution.uniqueId in ("
operator|+
name|solutionIdsStr
operator|+
literal|") and io = r.instructionalOffering and r.group.uniqueId=:resourceId"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|g
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|List
name|assignments
init|=
name|q
operator|.
name|list
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
index|[]
argument_list|>
name|restrictions
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
index|[]
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct r.instructionalOffering.uniqueId, (case when g.uniqueId is null then x.uniqueId else g.uniqueId end), z.uniqueId "
operator|+
literal|"from StudentGroupReservation r left outer join r.configurations g left outer join r.classes z left outer join z.schedulingSubpart.instrOfferingConfig x "
operator|+
literal|"where r.group.uniqueId = :resourceId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|g
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|offeringId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|configId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Long
name|clazzId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
index|[]
name|r
init|=
name|restrictions
operator|.
name|get
argument_list|(
name|offeringId
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|r
operator|=
operator|new
name|Set
index|[]
block|{
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
block|,
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
block|}
expr_stmt|;
name|restrictions
operator|.
name|put
argument_list|(
name|offeringId
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configId
operator|!=
literal|null
condition|)
name|r
index|[
literal|0
index|]
operator|.
name|add
argument_list|(
name|configId
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazzId
operator|!=
literal|null
condition|)
name|r
index|[
literal|1
index|]
operator|.
name|add
argument_list|(
name|clazzId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|restrictions
operator|.
name|isEmpty
argument_list|()
condition|)
for|for
control|(
name|Iterator
name|i
init|=
name|assignments
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Assignment
name|asgn
init|=
operator|(
name|Assignment
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
index|[]
name|r
init|=
operator|(
name|restrictions
operator|==
literal|null
condition|?
literal|null
else|:
name|restrictions
operator|.
name|get
argument_list|(
name|asgn
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
operator|&&
name|EventLookupBackend
operator|.
name|hide
argument_list|(
name|r
argument_list|,
name|asgn
operator|.
name|getClazz
argument_list|()
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|createCells
argument_list|(
name|model
argument_list|,
name|assignments
argument_list|,
name|hibSession
argument_list|,
name|context
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|model
operator|.
name|setSize
argument_list|(
name|assignments
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setUtilization
argument_list|(
name|countUtilization
argument_list|(
name|assignments
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|model
return|;
block|}
specifier|public
specifier|static
name|TimetableGridModel
name|createModel
parameter_list|(
name|String
name|solutionIdsStr
parameter_list|,
name|StudentGroupInfo
name|g
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|TimetableGridContext
name|context
parameter_list|)
block|{
name|TimetableGridModel
name|model
init|=
operator|new
name|TimetableGridModel
argument_list|(
name|ResourceType
operator|.
name|STUDENT_GROUP
operator|.
name|ordinal
argument_list|()
argument_list|,
name|g
operator|.
name|getGroupId
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|.
name|setName
argument_list|(
name|g
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstDay
argument_list|(
name|context
operator|.
name|getFirstDay
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstSessionDay
argument_list|(
name|context
operator|.
name|getFirstSessionDay
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstDate
argument_list|(
name|context
operator|.
name|getFirstDate
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|classIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentGroupInfo
operator|.
name|ClassInfo
name|clazz
range|:
name|g
operator|.
name|getGroupAssignments
argument_list|()
control|)
name|classIds
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getClassId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|classIds
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct a from Assignment a where a.solution.uniqueId in ("
operator|+
name|solutionIdsStr
operator|+
literal|") and a.classId in (:classIds)"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setParameterList
argument_list|(
literal|"classIds"
argument_list|,
name|classIds
argument_list|,
operator|new
name|LongType
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
name|assignments
init|=
name|q
operator|.
name|list
argument_list|()
decl_stmt|;
name|model
operator|.
name|setSize
argument_list|(
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|g
operator|.
name|countStudentWeights
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|assignments
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Assignment
name|assignment
init|=
operator|(
name|Assignment
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TimetableGridCell
argument_list|>
name|cells
init|=
name|createCells
argument_list|(
name|model
argument_list|,
name|assignment
argument_list|,
name|hibSession
argument_list|,
name|context
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|StudentGroupInfo
operator|.
name|ClassInfo
name|ci
init|=
name|g
operator|.
name|getGroupAssignment
argument_list|(
name|assignment
operator|.
name|getClassId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ci
operator|!=
literal|null
condition|)
block|{
name|int
name|total
init|=
name|g
operator|.
name|countStudentsOfOffering
argument_list|(
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|TimetableGridCell
name|cell
range|:
name|cells
control|)
block|{
name|cell
operator|.
name|setGroup
argument_list|(
literal|"("
operator|+
name|Math
operator|.
name|round
argument_list|(
name|ci
operator|.
name|countStudentsWeight
argument_list|()
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ci
operator|.
name|getStudents
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|ci
operator|.
name|getStudents
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|total
operator|>
literal|1
condition|)
block|{
name|int
name|assigned
init|=
name|ci
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|minLimit
init|=
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getExpectedCapacity
argument_list|()
decl_stmt|;
name|int
name|maxLimit
init|=
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getMaxExpectedCapacity
argument_list|()
decl_stmt|;
name|int
name|limit
init|=
name|maxLimit
decl_stmt|;
if|if
condition|(
name|minLimit
operator|<
name|maxLimit
condition|)
block|{
name|int
name|roomLimit
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|assignment
operator|.
name|getPlacement
argument_list|()
operator|.
name|getRoomSize
argument_list|()
operator|/
operator|(
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getRoomRatio
argument_list|()
operator|==
literal|null
condition|?
literal|1.0f
else|:
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getRoomRatio
argument_list|()
operator|)
argument_list|)
decl_stmt|;
comment|// int roomLimit = Math.round((c.getRoomRatio() == null ? 1.0f : c.getRoomRatio()) * p.getRoomSize());
name|limit
operator|=
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|minLimit
argument_list|,
name|roomLimit
argument_list|)
argument_list|,
name|maxLimit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|||
name|limit
operator|>=
literal|9999
condition|)
name|limit
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
name|int
name|p
init|=
literal|100
operator|*
name|assigned
operator|/
name|Math
operator|.
name|min
argument_list|(
name|limit
argument_list|,
name|total
argument_list|)
decl_stmt|;
name|cell
operator|.
name|setBackground
argument_list|(
name|percentage2color
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setPreference
argument_list|(
name|assigned
operator|+
literal|" of "
operator|+
name|total
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|model
operator|.
name|setUtilization
argument_list|(
name|g
operator|.
name|getGroupValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|model
return|;
block|}
block|}
end_class

end_unit

