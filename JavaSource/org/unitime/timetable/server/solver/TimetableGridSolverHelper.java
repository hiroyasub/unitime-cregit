begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|DepartmentSpreadConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|DiscouragedRoomConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|GroupConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|InstructorConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|JenrlConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|RoomConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|TooBigRooms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Lecture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomSharingModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|StudentGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimetableModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|LongType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TimetableGridInterface
operator|.
name|TimetableGridBackground
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TimetableGridInterface
operator|.
name|TimetableGridCell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TimetableGridInterface
operator|.
name|TimetableGridCell
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TimetableGridInterface
operator|.
name|TimetableGridCell
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TimetableGridInterface
operator|.
name|TimetableGridModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CurriculumDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|TimetableSolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|StudentGroupInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|timegrid
operator|.
name|SolverGridModel
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|TimetableGridSolverHelper
extends|extends
name|TimetableGridHelper
block|{
specifier|protected
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|TimetableGridModel
name|createModel
parameter_list|(
name|TimetableSolver
name|solver
parameter_list|,
name|RoomConstraint
name|room
parameter_list|,
name|TimetableGridContext
name|context
parameter_list|)
block|{
name|TimetableGridModel
name|model
init|=
operator|new
name|TimetableGridModel
argument_list|(
name|ResourceType
operator|.
name|ROOM
operator|.
name|ordinal
argument_list|()
argument_list|,
name|room
operator|.
name|getResourceId
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|.
name|setName
argument_list|(
name|room
operator|.
name|getRoomName
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setSize
argument_list|(
name|room
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setType
argument_list|(
name|room
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstDay
argument_list|(
name|context
operator|.
name|getFirstDay
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstSessionDay
argument_list|(
name|context
operator|.
name|getFirstSessionDay
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstDate
argument_list|(
name|context
operator|.
name|getFirstDate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|room
operator|instanceof
name|DiscouragedRoomConstraint
condition|)
name|model
operator|.
name|setNameColor
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|)
expr_stmt|;
name|Assignment
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|assignment
init|=
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getFirstDay
argument_list|()
operator|<
literal|0
condition|)
block|{
name|Vector
name|placements
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
name|room
operator|.
name|variables
argument_list|()
control|)
block|{
name|Placement
name|placement
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|lecture
argument_list|)
decl_stmt|;
if|if
condition|(
name|placement
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|placement
operator|.
name|hasRoomLocation
argument_list|(
name|model
operator|.
name|getResourceId
argument_list|()
argument_list|)
condition|)
name|placements
operator|.
name|add
argument_list|(
name|placement
argument_list|)
expr_stmt|;
block|}
name|createCells
argument_list|(
name|model
argument_list|,
name|solver
argument_list|,
name|placements
argument_list|,
name|context
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|context
operator|.
name|getWeekOffset
argument_list|()
operator|==
literal|0
condition|)
block|{
name|createCells
argument_list|(
name|model
argument_list|,
name|solver
argument_list|,
name|room
operator|.
name|getResourceOfWeek
argument_list|(
name|assignment
argument_list|,
name|context
operator|.
name|getFirstDay
argument_list|()
argument_list|)
argument_list|,
name|context
argument_list|,
literal|0
argument_list|,
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|createCells
argument_list|(
name|model
argument_list|,
name|solver
argument_list|,
name|room
operator|.
name|getResourceOfWeek
argument_list|(
name|assignment
argument_list|,
name|context
operator|.
name|getFirstDay
argument_list|()
operator|-
name|context
operator|.
name|getWeekOffset
argument_list|()
argument_list|)
argument_list|,
name|context
argument_list|,
name|context
operator|.
name|getWeekOffset
argument_list|()
argument_list|,
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
argument_list|)
expr_stmt|;
name|createCells
argument_list|(
name|model
argument_list|,
name|solver
argument_list|,
name|room
operator|.
name|getResourceOfWeek
argument_list|(
name|assignment
argument_list|,
name|context
operator|.
name|getFirstDay
argument_list|()
operator|-
name|context
operator|.
name|getWeekOffset
argument_list|()
operator|+
literal|7
argument_list|)
argument_list|,
name|context
argument_list|,
literal|0
argument_list|,
name|context
operator|.
name|getWeekOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|deptIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|deptIdsStr
init|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.DepartmentIds"
argument_list|)
decl_stmt|;
if|if
condition|(
name|deptIdsStr
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|StringTokenizer
name|stk
init|=
operator|new
name|StringTokenizer
argument_list|(
name|deptIdsStr
argument_list|,
literal|","
argument_list|)
init|;
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|deptIds
operator|.
name|add
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|stk
operator|.
name|nextToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|RoomSharingModel
name|sharing
init|=
name|room
operator|.
name|getSharingModel
argument_list|()
decl_stmt|;
if|if
condition|(
name|sharing
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|start
init|=
literal|0
decl_stmt|;
name|Boolean
name|av
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|Constants
operator|.
name|SLOTS_PER_DAY
condition|;
name|j
operator|++
control|)
block|{
name|Boolean
name|available
decl_stmt|;
if|if
condition|(
name|sharing
operator|.
name|isFreeForAll
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
condition|)
block|{
name|available
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|sharing
operator|.
name|isNotAvailable
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
condition|)
block|{
name|available
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|Long
name|dept
init|=
name|sharing
operator|.
name|getDepartmentId
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
decl_stmt|;
name|available
operator|=
operator|(
name|dept
operator|==
literal|null
operator|||
name|deptIds
operator|.
name|contains
argument_list|(
name|dept
argument_list|)
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|av
operator|==
literal|null
condition|)
block|{
name|av
operator|=
name|available
expr_stmt|;
name|start
operator|=
name|j
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|av
operator|.
name|equals
argument_list|(
name|available
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|av
condition|)
block|{
name|TimetableGridBackground
name|bg
init|=
operator|new
name|TimetableGridBackground
argument_list|()
decl_stmt|;
name|bg
operator|.
name|setBackground
argument_list|(
name|sBgColorNotAvailable
argument_list|)
expr_stmt|;
name|bg
operator|.
name|setSlot
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|bg
operator|.
name|setLength
argument_list|(
name|j
operator|-
name|start
argument_list|)
expr_stmt|;
name|bg
operator|.
name|setDay
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|bg
operator|.
name|setAvailable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|model
operator|.
name|addBackground
argument_list|(
name|bg
argument_list|)
expr_stmt|;
block|}
name|av
operator|=
name|available
expr_stmt|;
name|start
operator|=
name|j
expr_stmt|;
block|}
block|}
if|if
condition|(
name|av
operator|!=
literal|null
operator|&&
operator|!
name|av
condition|)
block|{
name|TimetableGridBackground
name|bg
init|=
operator|new
name|TimetableGridBackground
argument_list|()
decl_stmt|;
name|bg
operator|.
name|setBackground
argument_list|(
name|sBgColorNotAvailable
argument_list|)
expr_stmt|;
name|bg
operator|.
name|setSlot
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|bg
operator|.
name|setLength
argument_list|(
name|Constants
operator|.
name|SLOTS_PER_DAY
operator|-
name|start
argument_list|)
expr_stmt|;
name|bg
operator|.
name|setDay
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|bg
operator|.
name|setAvailable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|model
operator|.
name|addBackground
argument_list|(
name|bg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|room
operator|.
name|getAvailableArray
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Placement
argument_list|>
name|done
init|=
operator|new
name|HashSet
argument_list|<
name|Placement
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|Constants
operator|.
name|SLOTS_PER_DAY
condition|;
name|j
operator|++
control|)
block|{
name|List
argument_list|<
name|Placement
argument_list|>
name|placements
init|=
name|room
operator|.
name|getAvailableArray
argument_list|()
index|[
name|i
operator|*
name|Constants
operator|.
name|SLOTS_PER_DAY
operator|+
name|j
index|]
decl_stmt|;
if|if
condition|(
name|placements
operator|!=
literal|null
operator|&&
operator|!
name|placements
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Placement
name|p
range|:
name|placements
control|)
block|{
if|if
condition|(
operator|(
name|context
operator|.
name|isShowEvents
argument_list|()
operator|||
name|p
operator|.
name|getAssignmentId
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
name|done
operator|.
name|add
argument_list|(
name|p
argument_list|)
condition|)
name|createCells
argument_list|(
name|model
argument_list|,
name|solver
argument_list|,
name|p
argument_list|,
name|context
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|model
return|;
block|}
specifier|public
specifier|static
name|TimetableGridModel
name|createModel
parameter_list|(
name|TimetableSolver
name|solver
parameter_list|,
name|InstructorConstraint
name|instructor
parameter_list|,
name|TimetableGridContext
name|context
parameter_list|)
block|{
name|TimetableGridModel
name|model
init|=
operator|new
name|TimetableGridModel
argument_list|(
name|ResourceType
operator|.
name|INSTRUCTOR
operator|.
name|ordinal
argument_list|()
argument_list|,
name|instructor
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|.
name|setName
argument_list|(
name|instructor
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setType
argument_list|(
name|instructor
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstDay
argument_list|(
name|context
operator|.
name|getFirstDay
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstSessionDay
argument_list|(
name|context
operator|.
name|getFirstSessionDay
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstDate
argument_list|(
name|context
operator|.
name|getFirstDate
argument_list|()
argument_list|)
expr_stmt|;
name|Assignment
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|assignment
init|=
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getFirstDay
argument_list|()
operator|<
literal|0
condition|)
block|{
name|List
argument_list|<
name|Placement
argument_list|>
name|placements
init|=
operator|new
name|ArrayList
argument_list|<
name|Placement
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
name|instructor
operator|.
name|variables
argument_list|()
control|)
block|{
name|Placement
name|placement
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|lecture
argument_list|)
decl_stmt|;
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
name|placements
operator|.
name|add
argument_list|(
name|placement
argument_list|)
expr_stmt|;
block|}
name|createCells
argument_list|(
name|model
argument_list|,
name|solver
argument_list|,
name|placements
argument_list|,
name|context
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|context
operator|.
name|getWeekOffset
argument_list|()
operator|==
literal|0
condition|)
block|{
name|createCells
argument_list|(
name|model
argument_list|,
name|solver
argument_list|,
name|instructor
operator|.
name|getContext
argument_list|(
name|assignment
argument_list|)
operator|.
name|getResourceOfWeek
argument_list|(
name|context
operator|.
name|getFirstDay
argument_list|()
argument_list|)
argument_list|,
name|context
argument_list|,
literal|0
argument_list|,
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|createCells
argument_list|(
name|model
argument_list|,
name|solver
argument_list|,
name|instructor
operator|.
name|getContext
argument_list|(
name|assignment
argument_list|)
operator|.
name|getResourceOfWeek
argument_list|(
name|context
operator|.
name|getFirstDay
argument_list|()
operator|-
name|context
operator|.
name|getWeekOffset
argument_list|()
argument_list|)
argument_list|,
name|context
argument_list|,
name|context
operator|.
name|getWeekOffset
argument_list|()
argument_list|,
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
argument_list|)
expr_stmt|;
name|createCells
argument_list|(
name|model
argument_list|,
name|solver
argument_list|,
name|instructor
operator|.
name|getContext
argument_list|(
name|assignment
argument_list|)
operator|.
name|getResourceOfWeek
argument_list|(
name|context
operator|.
name|getFirstDay
argument_list|()
operator|-
name|context
operator|.
name|getWeekOffset
argument_list|()
operator|+
literal|7
argument_list|)
argument_list|,
name|context
argument_list|,
literal|0
argument_list|,
name|context
operator|.
name|getWeekOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|instructor
operator|.
name|getUnavailabilities
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Placement
name|p
range|:
name|instructor
operator|.
name|getUnavailabilities
argument_list|()
control|)
block|{
if|if
condition|(
name|context
operator|.
name|isShowEvents
argument_list|()
operator|||
name|p
operator|.
name|getAssignmentId
argument_list|()
operator|!=
literal|null
condition|)
name|createCells
argument_list|(
name|model
argument_list|,
name|solver
argument_list|,
name|p
argument_list|,
name|context
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Student
name|student
range|:
operator|(
operator|(
name|TimetableModel
operator|)
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|)
operator|.
name|getAllStudents
argument_list|()
control|)
block|{
if|if
condition|(
name|instructor
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getInstructor
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Lecture
name|lecture
range|:
name|student
operator|.
name|getLectures
argument_list|()
control|)
block|{
name|Placement
name|placement
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|lecture
argument_list|)
decl_stmt|;
if|if
condition|(
name|placement
operator|!=
literal|null
operator|&&
operator|!
name|instructor
operator|.
name|variables
argument_list|()
operator|.
name|contains
argument_list|(
name|lecture
argument_list|)
condition|)
block|{
for|for
control|(
name|TimetableGridCell
name|cell
range|:
name|createCells
argument_list|(
name|model
argument_list|,
name|solver
argument_list|,
name|placement
argument_list|,
name|context
argument_list|,
literal|false
argument_list|)
control|)
block|{
name|cell
operator|.
name|setItalics
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|model
return|;
block|}
specifier|public
specifier|static
name|TimetableGridModel
name|createModel
parameter_list|(
name|TimetableSolver
name|solver
parameter_list|,
name|DepartmentSpreadConstraint
name|department
parameter_list|,
name|TimetableGridContext
name|context
parameter_list|)
block|{
name|TimetableGridModel
name|model
init|=
operator|new
name|TimetableGridModel
argument_list|(
name|ResourceType
operator|.
name|DEPARTMENT
operator|.
name|ordinal
argument_list|()
argument_list|,
name|department
operator|.
name|getDepartmentId
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|.
name|setName
argument_list|(
name|department
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setSize
argument_list|(
name|department
operator|.
name|variables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstDay
argument_list|(
name|context
operator|.
name|getFirstDay
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstSessionDay
argument_list|(
name|context
operator|.
name|getFirstSessionDay
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstDate
argument_list|(
name|context
operator|.
name|getFirstDate
argument_list|()
argument_list|)
expr_stmt|;
name|Assignment
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|assignment
init|=
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Placement
argument_list|>
name|placements
init|=
operator|new
name|ArrayList
argument_list|<
name|Placement
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
name|department
operator|.
name|variables
argument_list|()
control|)
block|{
name|Placement
name|placement
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|lecture
argument_list|)
decl_stmt|;
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
name|placements
operator|.
name|add
argument_list|(
name|placement
argument_list|)
expr_stmt|;
block|}
name|createCells
argument_list|(
name|model
argument_list|,
name|solver
argument_list|,
name|placements
argument_list|,
name|context
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|model
return|;
block|}
specifier|public
specifier|static
name|TimetableGridModel
name|createModel
parameter_list|(
name|TimetableSolver
name|solver
parameter_list|,
name|int
name|resourceType
parameter_list|,
name|long
name|resourceId
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|size
parameter_list|,
name|Collection
argument_list|<
name|Placement
argument_list|>
name|placements
parameter_list|,
name|TimetableGridContext
name|context
parameter_list|)
block|{
name|TimetableGridModel
name|model
init|=
operator|new
name|TimetableGridModel
argument_list|(
name|resourceType
argument_list|,
name|resourceId
argument_list|)
decl_stmt|;
name|model
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|model
operator|.
name|setSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstDay
argument_list|(
name|context
operator|.
name|getFirstDay
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstSessionDay
argument_list|(
name|context
operator|.
name|getFirstSessionDay
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstDate
argument_list|(
name|context
operator|.
name|getFirstDate
argument_list|()
argument_list|)
expr_stmt|;
name|createCells
argument_list|(
name|model
argument_list|,
name|solver
argument_list|,
name|placements
argument_list|,
name|context
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|model
return|;
block|}
specifier|public
specifier|static
name|TimetableGridModel
name|createModel
parameter_list|(
name|TimetableSolver
name|solver
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|Student
argument_list|>
name|students
parameter_list|,
name|TimetableGridContext
name|context
parameter_list|)
block|{
name|TimetableGridModel
name|model
init|=
operator|new
name|TimetableGridModel
argument_list|(
name|ResourceType
operator|.
name|CURRICULUM
operator|.
name|ordinal
argument_list|()
argument_list|,
operator|-
literal|1l
argument_list|)
decl_stmt|;
name|model
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstDay
argument_list|(
name|context
operator|.
name|getFirstDay
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstSessionDay
argument_list|(
name|context
operator|.
name|getFirstSessionDay
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstDate
argument_list|(
name|context
operator|.
name|getFirstDate
argument_list|()
argument_list|)
expr_stmt|;
name|Assignment
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|assignment
init|=
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|groups
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c.course.instructionalOffering.uniqueId, g.name from CurriculumCourse c inner join c.groups g where "
operator|+
literal|"c.classification.curriculum.abbv || ' ' || c.classification.academicClassification.code = :name and "
operator|+
literal|"c.classification.curriculum.department.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SessionId"
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|courseId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|String
name|group
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|String
name|old
init|=
name|groups
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
name|groups
operator|.
name|put
argument_list|(
name|courseId
argument_list|,
operator|(
name|old
operator|==
literal|null
condition|?
literal|""
else|:
name|old
operator|+
literal|", "
operator|)
operator|+
name|group
argument_list|)
expr_stmt|;
block|}
name|double
name|size
init|=
literal|0
decl_stmt|;
name|Hashtable
argument_list|<
name|Placement
argument_list|,
name|Double
argument_list|>
name|placements
init|=
operator|new
name|Hashtable
argument_list|<
name|Placement
argument_list|,
name|Double
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Student
name|student
range|:
name|students
control|)
block|{
name|int
name|cnt
init|=
literal|0
decl_stmt|;
name|double
name|w
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
name|student
operator|.
name|getLectures
argument_list|()
control|)
block|{
name|w
operator|+=
name|student
operator|.
name|getOfferingWeight
argument_list|(
name|lecture
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|cnt
operator|++
expr_stmt|;
name|Placement
name|placement
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|lecture
argument_list|)
decl_stmt|;
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
block|{
name|Double
name|old
init|=
name|placements
operator|.
name|get
argument_list|(
name|placement
argument_list|)
decl_stmt|;
name|placements
operator|.
name|put
argument_list|(
name|placement
argument_list|,
name|student
operator|.
name|getOfferingWeight
argument_list|(
name|lecture
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|+
operator|(
name|old
operator|==
literal|null
condition|?
literal|0
else|:
name|old
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|student
operator|.
name|getCommitedPlacements
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Placement
name|placement
range|:
name|student
operator|.
name|getCommitedPlacements
argument_list|()
control|)
block|{
name|w
operator|+=
name|student
operator|.
name|getOfferingWeight
argument_list|(
name|placement
operator|.
name|variable
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|cnt
operator|++
expr_stmt|;
name|Double
name|old
init|=
name|placements
operator|.
name|get
argument_list|(
name|placement
argument_list|)
decl_stmt|;
name|placements
operator|.
name|put
argument_list|(
name|placement
argument_list|,
name|student
operator|.
name|getOfferingWeight
argument_list|(
name|placement
operator|.
name|variable
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|+
operator|(
name|old
operator|==
literal|null
condition|?
literal|0
else|:
name|old
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cnt
operator|>
literal|0
condition|)
name|size
operator|+=
name|w
operator|/
name|cnt
expr_stmt|;
block|}
name|model
operator|.
name|setSize
argument_list|(
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setUtilization
argument_list|(
name|countUtilization
argument_list|(
name|context
argument_list|,
name|placements
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Placement
argument_list|,
name|Double
argument_list|>
name|entry
range|:
name|placements
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|TimetableGridCell
name|cell
range|:
name|createCells
argument_list|(
name|model
argument_list|,
name|solver
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|context
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|variable
argument_list|()
operator|.
name|isCommitted
argument_list|()
argument_list|)
control|)
block|{
name|String
name|group
init|=
operator|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|variable
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|groups
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|variable
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getOfferingId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
name|cell
operator|.
name|setGroup
argument_list|(
literal|"("
operator|+
name|Math
operator|.
name|round
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|+
operator|(
name|group
operator|==
literal|null
condition|?
literal|""
else|:
literal|", "
operator|+
name|group
operator|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|model
return|;
block|}
specifier|public
specifier|static
name|TimetableGridModel
name|createModel
parameter_list|(
name|TimetableSolver
name|solver
parameter_list|,
name|StudentGroup
name|group
parameter_list|,
name|TimetableGridContext
name|context
parameter_list|)
block|{
name|TimetableGridModel
name|model
init|=
operator|new
name|TimetableGridModel
argument_list|(
name|ResourceType
operator|.
name|STUDENT_GROUP
operator|.
name|ordinal
argument_list|()
argument_list|,
name|group
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|.
name|setName
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstDay
argument_list|(
name|context
operator|.
name|getFirstDay
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstSessionDay
argument_list|(
name|context
operator|.
name|getFirstSessionDay
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setFirstDate
argument_list|(
name|context
operator|.
name|getFirstDate
argument_list|()
argument_list|)
expr_stmt|;
name|Assignment
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|assignment
init|=
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
name|double
name|size
init|=
literal|0
decl_stmt|;
name|Hashtable
argument_list|<
name|Placement
argument_list|,
name|Double
argument_list|>
name|placements
init|=
operator|new
name|Hashtable
argument_list|<
name|Placement
argument_list|,
name|Double
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Student
name|student
range|:
name|group
operator|.
name|getStudents
argument_list|()
control|)
block|{
name|int
name|cnt
init|=
literal|0
decl_stmt|;
name|double
name|w
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
name|student
operator|.
name|getLectures
argument_list|()
control|)
block|{
name|w
operator|+=
name|student
operator|.
name|getOfferingWeight
argument_list|(
name|lecture
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|cnt
operator|++
expr_stmt|;
name|Placement
name|placement
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|lecture
argument_list|)
decl_stmt|;
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
block|{
name|Double
name|old
init|=
name|placements
operator|.
name|get
argument_list|(
name|placement
argument_list|)
decl_stmt|;
name|placements
operator|.
name|put
argument_list|(
name|placement
argument_list|,
name|student
operator|.
name|getOfferingWeight
argument_list|(
name|lecture
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|+
operator|(
name|old
operator|==
literal|null
condition|?
literal|0
else|:
name|old
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|student
operator|.
name|getCommitedPlacements
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Placement
name|placement
range|:
name|student
operator|.
name|getCommitedPlacements
argument_list|()
control|)
block|{
name|w
operator|+=
name|student
operator|.
name|getOfferingWeight
argument_list|(
name|placement
operator|.
name|variable
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|cnt
operator|++
expr_stmt|;
name|Double
name|old
init|=
name|placements
operator|.
name|get
argument_list|(
name|placement
argument_list|)
decl_stmt|;
name|placements
operator|.
name|put
argument_list|(
name|placement
argument_list|,
name|student
operator|.
name|getOfferingWeight
argument_list|(
name|placement
operator|.
name|variable
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|+
operator|(
name|old
operator|==
literal|null
condition|?
literal|0
else|:
name|old
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cnt
operator|>
literal|0
condition|)
name|size
operator|+=
name|w
operator|/
name|cnt
expr_stmt|;
block|}
name|model
operator|.
name|setSize
argument_list|(
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setUtilization
argument_list|(
name|StudentGroupInfo
operator|.
name|value
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Placement
argument_list|,
name|Double
argument_list|>
name|entry
range|:
name|placements
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|TimetableGridCell
name|cell
range|:
name|createCells
argument_list|(
name|model
argument_list|,
name|solver
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|context
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|variable
argument_list|()
operator|.
name|isCommitted
argument_list|()
argument_list|)
control|)
block|{
name|cell
operator|.
name|setGroup
argument_list|(
literal|"("
operator|+
name|Math
operator|.
name|round
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|model
return|;
block|}
specifier|protected
specifier|static
name|void
name|createCells
parameter_list|(
name|TimetableGridModel
name|model
parameter_list|,
name|TimetableSolver
name|solver
parameter_list|,
name|Collection
argument_list|<
name|Placement
argument_list|>
name|placements
parameter_list|,
name|TimetableGridContext
name|context
parameter_list|,
name|boolean
name|notAvailable
parameter_list|)
block|{
name|model
operator|.
name|setUtilization
argument_list|(
name|countUtilization
argument_list|(
name|context
argument_list|,
name|placements
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Placement
name|placement
range|:
name|placements
control|)
block|{
if|if
condition|(
name|placement
operator|.
name|variable
argument_list|()
operator|.
name|isCommitted
argument_list|()
condition|)
continue|continue;
name|createCells
argument_list|(
name|model
argument_list|,
name|solver
argument_list|,
name|placement
argument_list|,
name|context
argument_list|,
name|notAvailable
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|void
name|createCells
parameter_list|(
name|TimetableGridModel
name|model
parameter_list|,
name|TimetableSolver
name|solver
parameter_list|,
name|Placement
index|[]
name|resource
parameter_list|,
name|TimetableGridContext
name|context
parameter_list|,
name|int
name|firstDay
parameter_list|,
name|int
name|lastDay
parameter_list|)
block|{
name|Map
argument_list|<
name|Lecture
argument_list|,
name|TimetableGridCell
argument_list|>
name|processed
init|=
operator|new
name|HashMap
argument_list|<
name|Lecture
argument_list|,
name|TimetableGridCell
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Placement
argument_list|>
name|placements
init|=
operator|new
name|ArrayList
argument_list|<
name|Placement
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|firstDay
init|;
name|i
operator|<
name|lastDay
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|Constants
operator|.
name|SLOTS_PER_DAY
condition|;
name|j
operator|++
control|)
block|{
name|Placement
name|placement
init|=
name|resource
index|[
name|i
operator|*
name|Constants
operator|.
name|SLOTS_PER_DAY
operator|+
name|j
index|]
decl_stmt|;
if|if
condition|(
name|placement
operator|==
literal|null
condition|)
continue|continue;
name|Lecture
name|lecture
init|=
name|placement
operator|.
name|variable
argument_list|()
decl_stmt|;
if|if
condition|(
name|lecture
operator|.
name|isCommitted
argument_list|()
condition|)
continue|continue;
name|TimetableGridCell
name|cell
init|=
name|processed
operator|.
name|get
argument_list|(
name|lecture
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
block|{
name|cell
operator|=
name|createCell
argument_list|(
name|model
argument_list|,
name|solver
argument_list|,
name|i
argument_list|,
name|j
argument_list|,
operator|(
name|Lecture
operator|)
name|placement
operator|.
name|variable
argument_list|()
argument_list|,
name|placement
argument_list|,
name|context
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|processed
operator|.
name|put
argument_list|(
name|lecture
argument_list|,
name|cell
argument_list|)
expr_stmt|;
name|placements
operator|.
name|add
argument_list|(
name|placement
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|=
operator|new
name|TimetableGridCell
argument_list|(
name|cell
argument_list|,
name|i
argument_list|,
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|model
operator|.
name|addCell
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|j
operator|+=
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getNrSlotsPerMeeting
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
block|}
name|model
operator|.
name|setUtilization
argument_list|(
name|countUtilization
argument_list|(
name|context
argument_list|,
name|placements
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|List
argument_list|<
name|TimetableGridCell
argument_list|>
name|createCells
parameter_list|(
name|TimetableGridModel
name|model
parameter_list|,
name|TimetableSolver
name|solver
parameter_list|,
name|Placement
name|placement
parameter_list|,
name|TimetableGridContext
name|context
parameter_list|,
name|boolean
name|notAvailable
parameter_list|)
block|{
name|List
argument_list|<
name|TimetableGridCell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<
name|TimetableGridCell
argument_list|>
argument_list|()
decl_stmt|;
name|TimetableGridCell
name|cell
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|Integer
argument_list|>
name|f
init|=
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getStartSlots
argument_list|()
init|;
name|f
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|int
name|slot
init|=
name|f
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
operator|(
literal|7
operator|+
name|slot
operator|/
name|Constants
operator|.
name|SLOTS_PER_DAY
operator|-
name|context
operator|.
name|getWeekOffset
argument_list|()
operator|)
operator|%
literal|7
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getFirstDay
argument_list|()
operator|>=
literal|0
operator|&&
operator|!
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getWeekCode
argument_list|()
operator|.
name|get
argument_list|(
name|context
operator|.
name|getFirstDay
argument_list|()
operator|+
name|idx
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
block|{
name|cell
operator|=
name|createCell
argument_list|(
name|model
argument_list|,
name|solver
argument_list|,
name|slot
operator|/
name|Constants
operator|.
name|SLOTS_PER_DAY
argument_list|,
name|slot
operator|%
name|Constants
operator|.
name|SLOTS_PER_DAY
argument_list|,
operator|(
name|Lecture
operator|)
name|placement
operator|.
name|variable
argument_list|()
argument_list|,
name|placement
argument_list|,
name|context
argument_list|,
name|notAvailable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|=
operator|new
name|TimetableGridCell
argument_list|(
name|cell
argument_list|,
name|slot
operator|/
name|Constants
operator|.
name|SLOTS_PER_DAY
argument_list|,
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|model
operator|.
name|addCell
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|cells
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
return|return
name|cells
return|;
block|}
specifier|protected
specifier|static
name|TimetableGridCell
name|createCell
parameter_list|(
name|TimetableGridModel
name|model
parameter_list|,
name|TimetableSolver
name|solver
parameter_list|,
name|int
name|day
parameter_list|,
name|int
name|slot
parameter_list|,
name|Lecture
name|lecture
parameter_list|,
name|Placement
name|placement
parameter_list|,
name|TimetableGridContext
name|context
parameter_list|,
name|boolean
name|notAvailable
parameter_list|)
block|{
name|TimetableGridCell
name|cell
init|=
operator|new
name|TimetableGridCell
argument_list|()
decl_stmt|;
if|if
condition|(
name|lecture
operator|.
name|getClassId
argument_list|()
operator|<
literal|0
condition|)
block|{
name|cell
operator|.
name|setType
argument_list|(
name|TimetableGridCell
operator|.
name|Type
operator|.
name|Event
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setId
argument_list|(
operator|-
name|lecture
operator|.
name|getClassId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|.
name|setType
argument_list|(
name|TimetableGridCell
operator|.
name|Type
operator|.
name|Class
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setId
argument_list|(
name|lecture
operator|.
name|getClassId
argument_list|()
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setCommitted
argument_list|(
name|lecture
operator|.
name|isCommitted
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cell
operator|.
name|addName
argument_list|(
name|lecture
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setDay
argument_list|(
name|day
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setSlot
argument_list|(
name|slot
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setLength
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getNrSlotsPerMeeting
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|bgMode
init|=
name|context
operator|.
name|getBgMode
argument_list|()
decl_stmt|;
comment|// cell.setBackground(sBgColorNeutral);
if|if
condition|(
name|notAvailable
condition|)
name|cell
operator|.
name|setBackground
argument_list|(
name|sBgColorNotAvailable
argument_list|)
expr_stmt|;
name|DecimalFormat
name|df
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.0"
argument_list|)
decl_stmt|;
name|Assignment
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|assignment
init|=
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
name|int
name|studConf
init|=
name|lecture
operator|.
name|countStudentConflicts
argument_list|(
name|assignment
argument_list|,
name|placement
argument_list|)
operator|+
name|lecture
operator|.
name|getCommitedConflicts
argument_list|(
name|placement
argument_list|)
decl_stmt|;
name|double
name|penalty
init|=
literal|0.0
decl_stmt|;
if|if
condition|(
name|solver
operator|.
name|getPerturbationsCounter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|penalty
operator|=
name|solver
operator|.
name|getPerturbationsCounter
argument_list|()
operator|.
name|getPerturbationPenalty
argument_list|(
name|assignment
argument_list|,
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|,
name|placement
argument_list|,
operator|new
name|Vector
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DepartmentSpreadConstraint
name|deptConstraint
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Constraint
name|c
range|:
name|lecture
operator|.
name|constraints
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|instanceof
name|DepartmentSpreadConstraint
condition|)
block|{
name|deptConstraint
operator|=
operator|(
name|DepartmentSpreadConstraint
operator|)
name|c
expr_stmt|;
break|break;
block|}
block|}
switch|switch
condition|(
name|BgMode
operator|.
name|values
argument_list|()
index|[
name|bgMode
index|]
condition|)
block|{
case|case
name|TimePref
case|:
if|if
condition|(
name|notAvailable
condition|)
break|break;
name|int
name|timePref
init|=
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getPreference
argument_list|()
decl_stmt|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|int2prolog
argument_list|(
name|timePref
argument_list|)
argument_list|)
operator|&&
name|lecture
operator|.
name|nrTimeLocations
argument_list|()
operator|==
literal|1
condition|)
name|timePref
operator|=
name|PreferenceLevel
operator|.
name|sIntLevelRequired
expr_stmt|;
name|cell
operator|.
name|setBackground
argument_list|(
name|pref2color
argument_list|(
name|timePref
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|RoomPref
case|:
if|if
condition|(
name|notAvailable
condition|)
break|break;
name|int
name|roomPref
init|=
name|placement
operator|.
name|getRoomPreference
argument_list|()
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|getResourceType
argument_list|()
operator|==
name|ResourceType
operator|.
name|ROOM
operator|.
name|ordinal
argument_list|()
operator|&&
name|model
operator|.
name|getResourceId
argument_list|()
operator|!=
literal|null
condition|)
name|roomPref
operator|=
name|placement
operator|.
name|getRoomLocation
argument_list|(
name|model
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|getPreference
argument_list|()
expr_stmt|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|int2prolog
argument_list|(
name|roomPref
argument_list|)
argument_list|)
operator|&&
name|lecture
operator|.
name|nrRoomLocations
argument_list|()
operator|==
name|lecture
operator|.
name|getNrRooms
argument_list|()
condition|)
name|roomPref
operator|=
name|PreferenceLevel
operator|.
name|sIntLevelRequired
expr_stmt|;
name|cell
operator|.
name|setBackground
argument_list|(
name|pref2color
argument_list|(
name|roomPref
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|StudentConf
case|:
name|cell
operator|.
name|setBackground
argument_list|(
name|conflicts2color
argument_list|(
name|studConf
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|.
name|getResourceType
argument_list|()
operator|==
name|ResourceType
operator|.
name|INSTRUCTOR
operator|.
name|ordinal
argument_list|()
condition|)
name|jenrl
label|:
for|for
control|(
name|JenrlConstraint
name|jenrl
range|:
name|lecture
operator|.
name|jenrlConstraints
argument_list|()
control|)
if|if
condition|(
name|jenrl
operator|.
name|getNrInstructors
argument_list|()
operator|>
literal|0
operator|&&
name|jenrl
operator|.
name|isInConflict
argument_list|(
name|assignment
argument_list|)
condition|)
block|{
for|for
control|(
name|Student
name|student
range|:
name|jenrl
operator|.
name|getInstructors
argument_list|()
control|)
block|{
if|if
condition|(
name|model
operator|.
name|getResourceId
argument_list|()
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getInstructor
argument_list|()
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|&&
operator|!
name|student
operator|.
name|getInstructor
argument_list|()
operator|.
name|variables
argument_list|()
operator|.
name|contains
argument_list|(
name|lecture
argument_list|)
condition|)
block|{
name|cell
operator|.
name|setBackground
argument_list|(
name|sBgColorRequired
argument_list|)
expr_stmt|;
break|break
name|jenrl
break|;
block|}
block|}
block|}
break|break;
case|case
name|InstructorBtbPref
case|:
name|int
name|instrPref
init|=
literal|0
decl_stmt|;
for|for
control|(
name|InstructorConstraint
name|ic
range|:
name|lecture
operator|.
name|getInstructorConstraints
argument_list|()
control|)
block|{
name|instrPref
operator|+=
name|ic
operator|.
name|getPreferenceCombination
argument_list|(
name|assignment
argument_list|,
name|placement
argument_list|)
expr_stmt|;
block|}
name|cell
operator|.
name|setBackground
argument_list|(
name|pref2color
argument_list|(
name|instrPref
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Perturbations
case|:
if|if
condition|(
name|notAvailable
condition|)
break|break;
name|String
name|perPref
init|=
name|PreferenceLevel
operator|.
name|sNeutral
decl_stmt|;
if|if
condition|(
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|placement
operator|.
name|equals
argument_list|(
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
condition|)
name|perPref
operator|=
name|PreferenceLevel
operator|.
name|sStronglyPreferred
expr_stmt|;
if|else if
condition|(
name|placement
operator|.
name|sameTime
argument_list|(
operator|(
name|Placement
operator|)
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
condition|)
name|perPref
operator|=
name|PreferenceLevel
operator|.
name|sDiscouraged
expr_stmt|;
if|else if
condition|(
name|placement
operator|.
name|sameRooms
argument_list|(
operator|(
name|Placement
operator|)
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
condition|)
name|perPref
operator|=
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
expr_stmt|;
else|else
name|perPref
operator|=
name|PreferenceLevel
operator|.
name|sProhibited
expr_stmt|;
block|}
name|cell
operator|.
name|setBackground
argument_list|(
name|pref2color
argument_list|(
name|perPref
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|PerturbationPenalty
case|:
if|if
condition|(
name|notAvailable
condition|)
break|break;
name|cell
operator|.
name|setBackground
argument_list|(
name|conflicts2color
argument_list|(
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|penalty
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|HardConflicts
case|:
if|if
condition|(
name|notAvailable
condition|)
break|break;
name|cell
operator|.
name|setBackground
argument_list|(
name|pref2color
argument_list|(
name|SolverGridModel
operator|.
name|hardConflicts2pref
argument_list|(
name|assignment
argument_list|,
name|lecture
argument_list|,
name|placement
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DepartmentalBalancing
case|:
if|if
condition|(
name|notAvailable
condition|)
break|break;
if|if
condition|(
name|deptConstraint
operator|!=
literal|null
condition|)
name|cell
operator|.
name|setBackground
argument_list|(
name|conflicts2colorFast
argument_list|(
name|deptConstraint
operator|.
name|getMaxPenalty
argument_list|(
name|assignment
argument_list|,
name|placement
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TooBigRooms
case|:
if|if
condition|(
name|notAvailable
condition|)
break|break;
name|long
name|minRoomSize
init|=
name|lecture
operator|.
name|minRoomSize
argument_list|()
decl_stmt|;
name|int
name|roomSize
init|=
name|placement
operator|.
name|getRoomSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|roomSize
operator|<
name|lecture
operator|.
name|minRoomSize
argument_list|()
condition|)
name|cell
operator|.
name|setBackground
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|cell
operator|.
name|setBackground
argument_list|(
name|pref2color
argument_list|(
name|TooBigRooms
operator|.
name|getTooBigRoomPreference
argument_list|(
name|placement
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|lecture
operator|.
name|getNrRooms
argument_list|()
operator|>
literal|0
condition|)
block|{
name|cell
operator|.
name|setPreference
argument_list|(
operator|(
name|lecture
operator|.
name|nrRoomLocations
argument_list|()
operator|==
literal|1
condition|?
literal|"<u>"
else|:
literal|""
operator|)
operator|+
name|lecture
operator|.
name|minRoomUse
argument_list|()
operator|+
operator|(
name|lecture
operator|.
name|maxRoomUse
argument_list|()
operator|!=
name|lecture
operator|.
name|minRoomUse
argument_list|()
condition|?
literal|" - "
operator|+
name|lecture
operator|.
name|maxRoomUse
argument_list|()
else|:
literal|""
operator|)
operator|+
literal|" / "
operator|+
operator|(
name|minRoomSize
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|?
literal|"-"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|minRoomSize
argument_list|)
operator|)
operator|+
literal|" / "
operator|+
name|roomSize
operator|+
operator|(
name|lecture
operator|.
name|nrRoomLocations
argument_list|()
operator|==
literal|1
condition|?
literal|"</u>"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|StudentGroups
case|:
name|TimetableModel
name|tm
init|=
operator|(
name|TimetableModel
operator|)
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tm
operator|.
name|getStudentGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|nrGroups
init|=
literal|0
decl_stmt|;
name|double
name|value
init|=
literal|0
decl_stmt|;
name|int
name|allAssigned
init|=
literal|0
decl_stmt|,
name|grandTotal
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StudentGroup
name|group
range|:
name|tm
operator|.
name|getStudentGroups
argument_list|()
control|)
block|{
name|int
name|total
init|=
literal|0
decl_stmt|,
name|assigned
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|getResourceType
argument_list|()
operator|==
name|ResourceType
operator|.
name|STUDENT_GROUP
operator|.
name|ordinal
argument_list|()
operator|&&
operator|!
name|model
operator|.
name|getResourceId
argument_list|()
operator|.
name|equals
argument_list|(
name|group
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|Student
name|student
range|:
name|group
operator|.
name|getStudents
argument_list|()
control|)
block|{
if|if
condition|(
name|lecture
operator|.
name|getConfiguration
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|student
operator|.
name|hasOffering
argument_list|(
name|lecture
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getOfferingId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|total
operator|++
expr_stmt|;
if|if
condition|(
name|lecture
operator|.
name|students
argument_list|()
operator|.
name|contains
argument_list|(
name|student
argument_list|)
condition|)
name|assigned
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|total
operator|>
literal|1
operator|&&
name|assigned
operator|>
literal|0
condition|)
block|{
name|allAssigned
operator|+=
name|assigned
expr_stmt|;
name|grandTotal
operator|+=
name|total
expr_stmt|;
name|int
name|limit
init|=
name|Math
operator|.
name|max
argument_list|(
name|lecture
operator|.
name|students
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|lecture
operator|.
name|classLimit
argument_list|(
name|assignment
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|total
operator|>
name|limit
condition|)
name|total
operator|=
name|limit
expr_stmt|;
name|nrGroups
operator|++
expr_stmt|;
name|value
operator|+=
operator|(
operator|(
name|double
operator|)
name|assigned
operator|)
operator|/
name|total
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nrGroups
operator|>
literal|0
condition|)
block|{
name|cell
operator|.
name|setBackground
argument_list|(
name|percentage2color
argument_list|(
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
literal|100.0
operator|*
name|value
operator|/
name|nrGroups
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setPreference
argument_list|(
operator|(
name|nrGroups
operator|==
literal|1
condition|?
name|allAssigned
operator|+
literal|" of "
operator|+
name|grandTotal
else|:
name|nrGroups
operator|+
literal|" groups"
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
if|if
condition|(
operator|!
name|notAvailable
condition|)
block|{
name|int
name|roomPref
init|=
name|placement
operator|.
name|getRoomPreference
argument_list|()
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|getResourceType
argument_list|()
operator|==
name|ResourceType
operator|.
name|ROOM
operator|.
name|ordinal
argument_list|()
operator|&&
name|model
operator|.
name|getResourceId
argument_list|()
operator|!=
literal|null
condition|)
name|roomPref
operator|=
name|placement
operator|.
name|getRoomLocation
argument_list|(
name|model
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|getPreference
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|cell
operator|.
name|hasPreference
argument_list|()
condition|)
block|{
name|cell
operator|.
name|setPreference
argument_list|(
operator|(
name|lecture
operator|.
name|getBestTimePreference
argument_list|()
operator|<
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getNormalizedPreference
argument_list|()
condition|?
literal|"<span style='color:red'>"
operator|+
operator|(
name|int
operator|)
operator|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getNormalizedPreference
argument_list|()
operator|-
name|lecture
operator|.
name|getBestTimePreference
argument_list|()
operator|)
operator|+
literal|"</span>"
else|:
literal|""
operator|+
operator|(
name|int
operator|)
operator|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getNormalizedPreference
argument_list|()
operator|-
name|lecture
operator|.
name|getBestTimePreference
argument_list|()
operator|)
operator|)
operator|+
literal|", "
operator|+
operator|(
name|studConf
operator|>
literal|0
condition|?
literal|"<span style='color:rgb(20,130,10)'>"
operator|+
name|studConf
operator|+
literal|"</span>"
else|:
literal|""
operator|+
name|studConf
operator|)
operator|+
literal|", "
operator|+
operator|(
name|lecture
operator|.
name|getBestRoomPreference
argument_list|()
operator|<
name|roomPref
condition|?
literal|"<span style='color:blue'>"
operator|+
operator|(
name|roomPref
operator|-
name|lecture
operator|.
name|getBestRoomPreference
argument_list|()
operator|)
operator|+
literal|"</span>"
else|:
literal|""
operator|+
operator|(
name|roomPref
operator|-
name|lecture
operator|.
name|getBestRoomPreference
argument_list|()
operator|)
operator|)
argument_list|)
expr_stmt|;
block|}
name|int
name|btbInstrPref
init|=
literal|0
decl_stmt|;
for|for
control|(
name|InstructorConstraint
name|ic
range|:
name|lecture
operator|.
name|getInstructorConstraints
argument_list|()
control|)
block|{
name|btbInstrPref
operator|+=
name|ic
operator|.
name|getPreferenceCombination
argument_list|(
name|assignment
argument_list|,
name|placement
argument_list|)
expr_stmt|;
block|}
name|cell
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|TimePreference
argument_list|,
operator|(
name|int
operator|)
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getNormalizedPreference
argument_list|()
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|StudentConflicts
argument_list|,
operator|(
name|lecture
operator|.
name|countStudentConflicts
argument_list|(
name|assignment
argument_list|,
name|placement
argument_list|)
operator|+
name|lecture
operator|.
name|getCommitedConflicts
argument_list|(
name|placement
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|StudentConflictsCommitted
argument_list|,
operator|(
name|lecture
operator|.
name|countCommittedStudentConflicts
argument_list|(
name|assignment
argument_list|,
name|placement
argument_list|)
operator|+
name|lecture
operator|.
name|getCommitedConflicts
argument_list|(
name|placement
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|StudentConflictsDistance
argument_list|,
name|lecture
operator|.
name|countDistanceStudentConflicts
argument_list|(
name|assignment
argument_list|,
name|placement
argument_list|)
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|StudentConflictsHard
argument_list|,
name|lecture
operator|.
name|countHardStudentConflicts
argument_list|(
name|assignment
argument_list|,
name|placement
argument_list|)
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|RoomPreference
argument_list|,
name|roomPref
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|lecture
operator|.
name|getInstructorConstraints
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|cell
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|InstructorPreference
argument_list|,
name|btbInstrPref
argument_list|)
expr_stmt|;
if|if
condition|(
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cell
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|InitialAssignment
argument_list|,
operator|(
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|equals
argument_list|(
name|placement
argument_list|)
condition|?
literal|"-"
else|:
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|getName
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|PerturbationPenalty
argument_list|,
name|df
operator|.
name|format
argument_list|(
name|penalty
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deptConstraint
operator|!=
literal|null
condition|)
name|cell
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|DepartmentBalance
argument_list|,
name|deptConstraint
operator|.
name|getMaxPenalty
argument_list|(
name|assignment
argument_list|,
name|placement
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|gcPref
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Constraint
name|c
range|:
name|lecture
operator|.
name|constraints
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|c
operator|instanceof
name|GroupConstraint
operator|)
condition|)
continue|continue;
name|GroupConstraint
name|gc
init|=
operator|(
name|GroupConstraint
operator|)
name|c
decl_stmt|;
if|if
condition|(
name|gc
operator|.
name|isHard
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|gc
operator|.
name|getPreference
argument_list|()
operator|>
literal|0
operator|&&
name|gc
operator|.
name|getCurrentPreference
argument_list|(
name|assignment
argument_list|)
operator|==
literal|0
condition|)
continue|continue;
if|if
condition|(
name|gc
operator|.
name|getPreference
argument_list|()
operator|<
literal|0
operator|&&
name|gc
operator|.
name|getCurrentPreference
argument_list|(
name|assignment
argument_list|)
operator|<
literal|0
condition|)
continue|continue;
name|gcPref
operator|=
name|Math
operator|.
name|max
argument_list|(
name|gcPref
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|gc
operator|.
name|getPreference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cell
operator|.
name|setProperty
argument_list|(
name|Property
operator|.
name|DistributionPreference
argument_list|,
name|gcPref
argument_list|)
expr_stmt|;
if|if
condition|(
name|bgMode
operator|==
name|BgMode
operator|.
name|DistributionConstPref
operator|.
name|ordinal
argument_list|()
condition|)
name|cell
operator|.
name|setBackground
argument_list|(
name|pref2color
argument_list|(
name|gcPref
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cell
operator|.
name|setDays
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDayHeader
argument_list|()
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setTime
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getStartTimeHeader
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getEndTimeHeader
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setDate
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setWeekCode
argument_list|(
name|pattern2string
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getWeekCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|placement
operator|.
name|isMultiRoom
argument_list|()
condition|)
for|for
control|(
name|RoomLocation
name|room
range|:
name|placement
operator|.
name|getRoomLocations
argument_list|()
control|)
name|cell
operator|.
name|addRoom
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|placement
operator|.
name|getRoomLocation
argument_list|()
operator|!=
literal|null
condition|)
name|cell
operator|.
name|addRoom
argument_list|(
name|placement
operator|.
name|getRoomLocation
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|InstructorConstraint
name|ic
range|:
name|lecture
operator|.
name|getInstructorConstraints
argument_list|()
control|)
name|cell
operator|.
name|addInstructor
argument_list|(
name|ic
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|cell
return|;
block|}
specifier|protected
specifier|static
name|double
name|countUtilization
parameter_list|(
name|TimetableGridContext
name|context
parameter_list|,
name|Iterable
argument_list|<
name|Placement
argument_list|>
name|placements
parameter_list|)
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|slots
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Placement
name|p
range|:
name|placements
control|)
block|{
name|TimeLocation
name|t
init|=
operator|(
name|p
operator|==
literal|null
condition|?
literal|null
else|:
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
continue|continue;
name|int
name|start
init|=
name|Math
operator|.
name|max
argument_list|(
name|context
operator|.
name|getFirstSlot
argument_list|()
argument_list|,
name|t
operator|.
name|getStartSlot
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|stop
init|=
name|Math
operator|.
name|min
argument_list|(
name|context
operator|.
name|getLastSlot
argument_list|()
argument_list|,
name|t
operator|.
name|getStartSlot
argument_list|()
operator|+
name|t
operator|.
name|getLength
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|start
operator|>
name|stop
condition|)
continue|continue;
if|if
condition|(
name|context
operator|.
name|getFirstDay
argument_list|()
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|idx
init|=
name|context
operator|.
name|getFirstDay
argument_list|()
init|;
name|idx
operator|<
literal|7
operator|+
name|context
operator|.
name|getFirstDay
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|int
name|dow
init|=
operator|(
operator|(
name|idx
operator|+
name|context
operator|.
name|getStartDayDayOfWeek
argument_list|()
operator|)
operator|%
literal|7
operator|)
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|getWeekCode
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|&&
operator|(
name|t
operator|.
name|getDayCode
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|dow
index|]
operator|)
operator|!=
literal|0
operator|&&
operator|(
name|context
operator|.
name|getDayCode
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|dow
index|]
operator|)
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|slot
init|=
name|start
init|;
name|slot
operator|<=
name|stop
condition|;
name|slot
operator|++
control|)
name|slots
operator|.
name|add
argument_list|(
literal|288
operator|*
name|idx
operator|+
name|slot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|int
name|idx
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
operator|(
name|idx
operator|=
name|t
operator|.
name|getWeekCode
argument_list|()
operator|.
name|nextSetBit
argument_list|(
literal|1
operator|+
name|idx
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|int
name|dow
init|=
operator|(
operator|(
name|idx
operator|+
name|context
operator|.
name|getStartDayDayOfWeek
argument_list|()
operator|)
operator|%
literal|7
operator|)
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getDefaultDatePattern
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|&&
operator|(
name|t
operator|.
name|getDayCode
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|dow
index|]
operator|)
operator|!=
literal|0
operator|&&
operator|(
name|context
operator|.
name|getDayCode
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|dow
index|]
operator|)
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|slot
init|=
name|start
init|;
name|slot
operator|<=
name|stop
condition|;
name|slot
operator|++
control|)
name|slots
operator|.
name|add
argument_list|(
literal|288
operator|*
name|idx
operator|+
name|slot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|slots
operator|.
name|size
argument_list|()
operator|/
operator|(
name|context
operator|.
name|getNumberOfWeeks
argument_list|()
operator|*
literal|12
operator|)
return|;
block|}
specifier|public
specifier|static
name|void
name|addCrosslistedNames
parameter_list|(
name|TimetableGridModel
name|model
parameter_list|,
name|TimetableGridContext
name|context
parameter_list|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|TimetableGridCell
argument_list|>
argument_list|>
name|id2cells
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|TimetableGridCell
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TimetableGridCell
name|cell
range|:
name|model
operator|.
name|getCells
argument_list|()
control|)
block|{
if|if
condition|(
name|cell
operator|.
name|getType
argument_list|()
operator|!=
name|Type
operator|.
name|Class
operator|||
name|cell
operator|.
name|getId
argument_list|()
operator|==
literal|null
operator|||
name|cell
operator|.
name|getId
argument_list|()
operator|<
literal|0
condition|)
continue|continue;
name|List
argument_list|<
name|TimetableGridCell
argument_list|>
name|cells
init|=
name|id2cells
operator|.
name|get
argument_list|(
name|cell
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cells
operator|==
literal|null
condition|)
block|{
name|cells
operator|=
operator|new
name|ArrayList
argument_list|<
name|TimetableGridCell
argument_list|>
argument_list|()
expr_stmt|;
name|id2cells
operator|.
name|put
argument_list|(
name|cell
operator|.
name|getId
argument_list|()
argument_list|,
name|cells
argument_list|)
expr_stmt|;
block|}
name|cells
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|id2cells
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
if|if
condition|(
name|id2cells
operator|.
name|size
argument_list|()
operator|<=
literal|1000
condition|)
block|{
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c, co from Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co where "
operator|+
literal|"co.isControl = false and c.uniqueId in :classIds order by co.subjectAreaAbbv, co.courseNbr"
argument_list|)
operator|.
name|setParameterList
argument_list|(
literal|"classIds"
argument_list|,
name|id2cells
operator|.
name|keySet
argument_list|()
argument_list|,
name|LongType
operator|.
name|INSTANCE
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|CourseOffering
name|course
init|=
operator|(
name|CourseOffering
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|TimetableGridCell
name|cell
range|:
name|id2cells
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
control|)
name|cell
operator|.
name|addName
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|course
argument_list|,
name|context
operator|.
name|isShowClassSuffix
argument_list|()
argument_list|,
name|context
operator|.
name|isShowConfigName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
for|for
control|(
name|Long
name|id
range|:
name|id2cells
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|ids
operator|.
name|size
argument_list|()
operator|==
literal|1000
condition|)
block|{
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c, co from Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co where "
operator|+
literal|"co.isControl = false and c.uniqueId in :classIds order by co.subjectAreaAbbv, co.courseNbr"
argument_list|)
operator|.
name|setParameterList
argument_list|(
literal|"classIds"
argument_list|,
name|ids
argument_list|,
name|LongType
operator|.
name|INSTANCE
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|CourseOffering
name|course
init|=
operator|(
name|CourseOffering
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|TimetableGridCell
name|cell
range|:
name|id2cells
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
control|)
name|cell
operator|.
name|addName
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|course
argument_list|,
name|context
operator|.
name|isShowClassSuffix
argument_list|()
argument_list|,
name|context
operator|.
name|isShowConfigName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ids
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|ids
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c, co from Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co where "
operator|+
literal|"co.isControl = false and c.uniqueId in :classIds order by co.subjectAreaAbbv, co.courseNbr"
argument_list|)
operator|.
name|setParameterList
argument_list|(
literal|"classIds"
argument_list|,
name|ids
argument_list|,
name|LongType
operator|.
name|INSTANCE
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|CourseOffering
name|course
init|=
operator|(
name|CourseOffering
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|TimetableGridCell
name|cell
range|:
name|id2cells
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
control|)
name|cell
operator|.
name|addName
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|course
argument_list|,
name|context
operator|.
name|isShowClassSuffix
argument_list|()
argument_list|,
name|context
operator|.
name|isShowConfigName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|fixClassName
parameter_list|(
name|TimetableGridContext
name|context
parameter_list|,
name|TimetableGridCell
name|cell
parameter_list|,
name|Class_
name|clazz
parameter_list|,
name|CourseOffering
name|course
parameter_list|)
block|{
name|cell
operator|.
name|clearName
argument_list|()
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|isShowClassNameTwoLines
argument_list|()
condition|)
block|{
name|cell
operator|.
name|addName
argument_list|(
name|clazz
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|label
init|=
name|clazz
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getSectionNumberString
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|isShowClassSuffix
argument_list|()
condition|)
block|{
name|String
name|extId
init|=
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|extId
operator|!=
literal|null
operator|&&
operator|!
name|extId
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|extId
operator|.
name|equalsIgnoreCase
argument_list|(
name|clazz
operator|.
name|getSectionNumberString
argument_list|()
argument_list|)
condition|)
name|label
operator|+=
literal|" - "
operator|+
name|extId
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|isShowConfigName
argument_list|()
operator|&&
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|label
operator|+=
literal|" ("
operator|+
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
name|cell
operator|.
name|addName
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|.
name|addName
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|course
argument_list|,
name|context
operator|.
name|isShowClassSuffix
argument_list|()
argument_list|,
name|context
operator|.
name|isShowConfigName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|isShowCourseTitle
argument_list|()
operator|&&
name|course
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|course
operator|.
name|getTitle
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cell
operator|.
name|addName
argument_list|(
name|course
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|isShowCourseTitle
argument_list|()
condition|)
block|{
name|cell
operator|.
name|addTitle
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|course
argument_list|,
name|context
operator|.
name|isShowClassSuffix
argument_list|()
argument_list|,
name|context
operator|.
name|isShowConfigName
argument_list|()
argument_list|)
operator|+
operator|(
name|course
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|course
operator|.
name|getTitle
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|" - "
operator|+
name|course
operator|.
name|getTitle
argument_list|()
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|context
operator|.
name|isShowClassNameTwoLines
argument_list|()
condition|)
block|{
name|cell
operator|.
name|addTitle
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|course
argument_list|,
name|context
operator|.
name|isShowClassSuffix
argument_list|()
argument_list|,
name|context
operator|.
name|isShowConfigName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|isShowCrossLists
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|CourseOffering
argument_list|>
name|courses
init|=
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
decl_stmt|;
if|if
condition|(
name|courses
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|CourseOffering
name|co
range|:
operator|new
name|TreeSet
argument_list|<
name|CourseOffering
argument_list|>
argument_list|(
name|courses
argument_list|)
control|)
block|{
if|if
condition|(
name|co
operator|.
name|isIsControl
argument_list|()
condition|)
continue|continue;
name|cell
operator|.
name|addName
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|co
argument_list|,
name|context
operator|.
name|isShowClassSuffix
argument_list|()
argument_list|,
name|context
operator|.
name|isShowConfigName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|isShowCourseTitle
argument_list|()
condition|)
block|{
if|if
condition|(
name|co
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|co
operator|.
name|getTitle
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cell
operator|.
name|addName
argument_list|(
name|co
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addTitle
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|co
argument_list|,
name|context
operator|.
name|isShowClassSuffix
argument_list|()
argument_list|,
name|context
operator|.
name|isShowConfigName
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|co
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|.
name|addTitle
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|co
argument_list|,
name|context
operator|.
name|isShowClassSuffix
argument_list|()
argument_list|,
name|context
operator|.
name|isShowConfigName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|context
operator|.
name|isShowClassNameTwoLines
argument_list|()
condition|)
block|{
name|cell
operator|.
name|addTitle
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|co
argument_list|,
name|context
operator|.
name|isShowClassSuffix
argument_list|()
argument_list|,
name|context
operator|.
name|isShowConfigName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|fixClassNames
parameter_list|(
name|TimetableGridModel
name|model
parameter_list|,
name|TimetableGridContext
name|context
parameter_list|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|TimetableGridCell
argument_list|>
argument_list|>
name|id2cells
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|TimetableGridCell
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TimetableGridCell
name|cell
range|:
name|model
operator|.
name|getCells
argument_list|()
control|)
block|{
if|if
condition|(
name|cell
operator|.
name|getType
argument_list|()
operator|!=
name|Type
operator|.
name|Class
operator|||
name|cell
operator|.
name|getId
argument_list|()
operator|==
literal|null
operator|||
name|cell
operator|.
name|getId
argument_list|()
operator|<
literal|0
condition|)
continue|continue;
name|List
argument_list|<
name|TimetableGridCell
argument_list|>
name|cells
init|=
name|id2cells
operator|.
name|get
argument_list|(
name|cell
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cells
operator|==
literal|null
condition|)
block|{
name|cells
operator|=
operator|new
name|ArrayList
argument_list|<
name|TimetableGridCell
argument_list|>
argument_list|()
expr_stmt|;
name|id2cells
operator|.
name|put
argument_list|(
name|cell
operator|.
name|getId
argument_list|()
argument_list|,
name|cells
argument_list|)
expr_stmt|;
block|}
name|cells
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|id2cells
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
if|if
condition|(
name|id2cells
operator|.
name|size
argument_list|()
operator|<=
literal|1000
condition|)
block|{
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c, co from Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co where "
operator|+
literal|"co.isControl = true and c.uniqueId in :classIds order by co.subjectAreaAbbv, co.courseNbr"
argument_list|)
operator|.
name|setParameterList
argument_list|(
literal|"classIds"
argument_list|,
name|id2cells
operator|.
name|keySet
argument_list|()
argument_list|,
name|LongType
operator|.
name|INSTANCE
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|CourseOffering
name|course
init|=
operator|(
name|CourseOffering
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|TimetableGridCell
name|cell
range|:
name|id2cells
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
control|)
name|fixClassName
argument_list|(
name|context
argument_list|,
name|cell
argument_list|,
name|clazz
argument_list|,
name|course
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
for|for
control|(
name|Long
name|id
range|:
name|id2cells
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|ids
operator|.
name|size
argument_list|()
operator|==
literal|1000
condition|)
block|{
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c, co from Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co where "
operator|+
literal|"co.isControl = true and c.uniqueId in :classIds order by co.subjectAreaAbbv, co.courseNbr"
argument_list|)
operator|.
name|setParameterList
argument_list|(
literal|"classIds"
argument_list|,
name|ids
argument_list|,
name|LongType
operator|.
name|INSTANCE
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|CourseOffering
name|course
init|=
operator|(
name|CourseOffering
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|TimetableGridCell
name|cell
range|:
name|id2cells
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
control|)
name|fixClassName
argument_list|(
name|context
argument_list|,
name|cell
argument_list|,
name|clazz
argument_list|,
name|course
argument_list|)
expr_stmt|;
block|}
name|ids
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|ids
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c, co from Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co where "
operator|+
literal|"co.isControl = true and c.uniqueId in :classIds order by co.subjectAreaAbbv, co.courseNbr"
argument_list|)
operator|.
name|setParameterList
argument_list|(
literal|"classIds"
argument_list|,
name|ids
argument_list|,
name|LongType
operator|.
name|INSTANCE
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|CourseOffering
name|course
init|=
operator|(
name|CourseOffering
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|TimetableGridCell
name|cell
range|:
name|id2cells
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
control|)
name|fixClassName
argument_list|(
name|context
argument_list|,
name|cell
argument_list|,
name|clazz
argument_list|,
name|course
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|fixInstructors
parameter_list|(
name|TimetableGridModel
name|model
parameter_list|,
name|TimetableGridContext
name|context
parameter_list|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|TimetableGridCell
argument_list|>
argument_list|>
name|id2cells
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|TimetableGridCell
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TimetableGridCell
name|cell
range|:
name|model
operator|.
name|getCells
argument_list|()
control|)
block|{
if|if
condition|(
name|cell
operator|.
name|getType
argument_list|()
operator|!=
name|Type
operator|.
name|Class
operator|||
name|cell
operator|.
name|getId
argument_list|()
operator|==
literal|null
operator|||
name|cell
operator|.
name|getId
argument_list|()
operator|<
literal|0
operator|||
operator|!
name|cell
operator|.
name|isCommitted
argument_list|()
condition|)
continue|continue;
name|List
argument_list|<
name|TimetableGridCell
argument_list|>
name|cells
init|=
name|id2cells
operator|.
name|get
argument_list|(
name|cell
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cells
operator|==
literal|null
condition|)
block|{
name|cells
operator|=
operator|new
name|ArrayList
argument_list|<
name|TimetableGridCell
argument_list|>
argument_list|()
expr_stmt|;
name|id2cells
operator|.
name|put
argument_list|(
name|cell
operator|.
name|getId
argument_list|()
argument_list|,
name|cells
argument_list|)
expr_stmt|;
block|}
name|cell
operator|.
name|resetInstructors
argument_list|()
expr_stmt|;
name|cells
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|id2cells
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|String
name|query
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|TimetableGridUseClassInstructors
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|query
operator|=
literal|"select ci.classInstructing.uniqueId, ci.instructor from ClassInstructor ci "
operator|+
literal|"where ci.classInstructing.uniqueId in :classIds"
expr_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|TimetableGridUseClassInstructorsCheckClassDisplayInstructors
operator|.
name|isTrue
argument_list|()
condition|)
name|query
operator|+=
literal|" and ci.classInstructing.displayInstructor = true"
expr_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|TimetableGridUseClassInstructorsCheckLead
operator|.
name|isTrue
argument_list|()
condition|)
name|query
operator|+=
literal|" and ci.lead = true"
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
literal|"select a.clazz.uniqueId, i from Assignment a inner join a.instructors i "
operator|+
literal|"where a.solution.commited = true and a.clazz.uniqueId in :classIds"
expr_stmt|;
block|}
if|if
condition|(
name|id2cells
operator|.
name|size
argument_list|()
operator|<=
literal|1000
condition|)
block|{
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|query
argument_list|)
operator|.
name|setParameterList
argument_list|(
literal|"classIds"
argument_list|,
name|id2cells
operator|.
name|keySet
argument_list|()
argument_list|,
name|LongType
operator|.
name|INSTANCE
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|classId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|DepartmentalInstructor
name|instructor
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|TimetableGridCell
name|cell
range|:
name|id2cells
operator|.
name|get
argument_list|(
name|classId
argument_list|)
control|)
block|{
name|cell
operator|.
name|addInstructor
argument_list|(
name|instructor
operator|.
name|getName
argument_list|(
name|context
operator|.
name|getInstructorNameFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
for|for
control|(
name|Long
name|id
range|:
name|id2cells
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|ids
operator|.
name|size
argument_list|()
operator|==
literal|1000
condition|)
block|{
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|query
argument_list|)
operator|.
name|setParameterList
argument_list|(
literal|"classIds"
argument_list|,
name|ids
argument_list|,
name|LongType
operator|.
name|INSTANCE
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|classId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|DepartmentalInstructor
name|instructor
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|TimetableGridCell
name|cell
range|:
name|id2cells
operator|.
name|get
argument_list|(
name|classId
argument_list|)
control|)
block|{
name|cell
operator|.
name|addInstructor
argument_list|(
name|instructor
operator|.
name|getName
argument_list|(
name|context
operator|.
name|getInstructorNameFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ids
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|ids
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|query
argument_list|)
operator|.
name|setParameterList
argument_list|(
literal|"classIds"
argument_list|,
name|ids
argument_list|,
name|LongType
operator|.
name|INSTANCE
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|classId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|DepartmentalInstructor
name|instructor
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|TimetableGridCell
name|cell
range|:
name|id2cells
operator|.
name|get
argument_list|(
name|classId
argument_list|)
control|)
block|{
name|cell
operator|.
name|addInstructor
argument_list|(
name|instructor
operator|.
name|getName
argument_list|(
name|context
operator|.
name|getInstructorNameFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

