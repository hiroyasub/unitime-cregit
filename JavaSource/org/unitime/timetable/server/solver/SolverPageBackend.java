begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ListSolutionsForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|HasPageMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|PageMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|PageMessageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|ProgressLogLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|SolutionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|SolverConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|SolverOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|SolverOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|SolverPageRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|SolverPageResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|SolverParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|SolverType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameterDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameterGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverPredefinedSetting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolutionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolverGroupDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolverParameterDefDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolverPredefinedSettingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|CommonSolverInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|SolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ExamSolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|instructor
operator|.
name|InstructorSchedulingProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|jgroups
operator|.
name|SolverServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverServerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|studentsct
operator|.
name|StudentSolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|LogInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|PropertiesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|BackTracker
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|SolverPageRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|SolverPageBackend
implements|implements
name|GwtRpcImplementation
argument_list|<
name|SolverPageRequest
argument_list|,
name|SolverPageResponse
argument_list|>
block|{
specifier|protected
specifier|static
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
name|SolverServerService
name|solverServerService
decl_stmt|;
annotation|@
name|Autowired
name|SolverService
argument_list|<
name|SolverProxy
argument_list|>
name|courseTimetablingSolverService
decl_stmt|;
annotation|@
name|Autowired
name|SolverService
argument_list|<
name|ExamSolverProxy
argument_list|>
name|examinationSolverService
decl_stmt|;
annotation|@
name|Autowired
name|SolverService
argument_list|<
name|StudentSolverProxy
argument_list|>
name|studentSectioningSolverService
decl_stmt|;
annotation|@
name|Autowired
name|SolverService
argument_list|<
name|InstructorSchedulingProxy
argument_list|>
name|instructorSchedulingSolverService
decl_stmt|;
annotation|@
name|Override
specifier|public
name|SolverPageResponse
name|execute
parameter_list|(
name|SolverPageRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
switch|switch
condition|(
name|request
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|COURSE
case|:
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|Solver
argument_list|)
expr_stmt|;
break|break;
case|case
name|EXAM
case|:
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|ExaminationSolver
argument_list|)
expr_stmt|;
break|break;
case|case
name|STUDENT
case|:
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|StudentSectioningSolver
argument_list|)
expr_stmt|;
break|break;
case|case
name|INSTRUCTOR
case|:
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|InstructorSchedulingSolver
argument_list|)
expr_stmt|;
break|break;
block|}
name|SolverPageResponse
name|response
init|=
operator|new
name|SolverPageResponse
argument_list|()
decl_stmt|;
name|response
operator|.
name|setSolverType
argument_list|(
name|request
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setOperation
argument_list|(
name|request
operator|.
name|getOperation
argument_list|()
argument_list|)
expr_stmt|;
name|SolverService
argument_list|<
name|?
extends|extends
name|CommonSolverInterface
argument_list|>
name|service
init|=
name|getSolverService
argument_list|(
name|request
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|CommonSolverInterface
name|solver
init|=
name|executeOperation
argument_list|(
name|context
argument_list|,
name|service
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
decl_stmt|;
name|fillHosts
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|fillOwners
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|fillParameters
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|fillSolverInfos
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|fillSolverLog
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|fillSolverStatus
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|fillAvailableOperations
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|fillSolverWarnings
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|request
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|COURSE
case|:
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|context
argument_list|,
literal|"gwt.jsp?page=solver&type=course"
argument_list|,
name|MESSAGES
operator|.
name|pageCourseTimetablingSolver
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|EXAM
case|:
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|context
argument_list|,
literal|"gwt.jsp?page=solver&type=exam"
argument_list|,
name|MESSAGES
operator|.
name|pageExaminationTimetablingSolver
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|INSTRUCTOR
case|:
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|context
argument_list|,
literal|"gwt.jsp?page=solver&type=instructor"
argument_list|,
name|MESSAGES
operator|.
name|pageInstructorSchedulingSolver
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|STUDENT
case|:
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|context
argument_list|,
literal|"gwt.jsp?page=solver&type=student"
argument_list|,
name|MESSAGES
operator|.
name|pageStudentSchedulingSolver
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|response
return|;
block|}
specifier|protected
name|CommonSolverInterface
name|executeOperation
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|SolverService
argument_list|<
name|?
extends|extends
name|CommonSolverInterface
argument_list|>
name|service
parameter_list|,
name|SolverPageRequest
name|request
parameter_list|,
name|SolverPageResponse
name|response
parameter_list|)
block|{
name|CommonSolverInterface
name|solver
init|=
name|service
operator|.
name|getSolver
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|request
operator|.
name|getOperation
argument_list|()
condition|)
block|{
case|case
name|RESTORE_BEST
case|:
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|warnSolverNotStarted
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|solver
operator|.
name|isWorking
argument_list|()
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|warnSolverIsWorking
argument_list|()
argument_list|)
throw|;
name|solver
operator|.
name|restoreBest
argument_list|()
expr_stmt|;
break|break;
case|case
name|SAVE_BEST
case|:
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|warnSolverNotStarted
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|solver
operator|.
name|isWorking
argument_list|()
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|warnSolverIsWorking
argument_list|()
argument_list|)
throw|;
name|solver
operator|.
name|saveBest
argument_list|()
expr_stmt|;
break|break;
case|case
name|CLEAR
case|:
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|warnSolverNotStarted
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|solver
operator|.
name|isWorking
argument_list|()
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|warnSolverIsWorking
argument_list|()
argument_list|)
throw|;
name|solver
operator|.
name|clear
argument_list|()
expr_stmt|;
break|break;
case|case
name|SAVE
case|:
case|case
name|SAVE_AS_NEW
case|:
case|case
name|SAVE_AS_NEW_COMMIT
case|:
case|case
name|SAVE_COMMIT
case|:
case|case
name|SAVE_UNCOMMIT
case|:
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|warnSolverNotStarted
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|solver
operator|.
name|isWorking
argument_list|()
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|warnSolverIsWorking
argument_list|()
argument_list|)
throw|;
switch|switch
condition|(
name|request
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|COURSE
case|:
name|Long
index|[]
name|owners
init|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLongArry
argument_list|(
literal|"General.SolverGroupId"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|context
operator|.
name|checkPermission
argument_list|(
name|owners
argument_list|,
literal|"SolverGroup"
argument_list|,
name|Right
operator|.
name|SolverSolutionSave
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getOperation
argument_list|()
operator|==
name|SolverOperation
operator|.
name|SAVE_AS_NEW_COMMIT
operator|||
name|request
operator|.
name|getOperation
argument_list|()
operator|==
name|SolverOperation
operator|.
name|SAVE_COMMIT
condition|)
name|context
operator|.
name|checkPermission
argument_list|(
name|owners
argument_list|,
literal|"SolverGroup"
argument_list|,
name|Right
operator|.
name|TimetablesSolutionCommit
argument_list|)
expr_stmt|;
if|if
condition|(
name|solver
operator|.
name|bestSolutionInfo
argument_list|()
operator|!=
literal|null
condition|)
name|solver
operator|.
name|restoreBest
argument_list|()
expr_stmt|;
operator|(
operator|(
name|SolverProxy
operator|)
name|solver
operator|)
operator|.
name|save
argument_list|(
name|request
operator|.
name|getOperation
argument_list|()
operator|==
name|SolverOperation
operator|.
name|SAVE_AS_NEW
operator|||
name|request
operator|.
name|getOperation
argument_list|()
operator|==
name|SolverOperation
operator|.
name|SAVE_AS_NEW_COMMIT
argument_list|,
name|request
operator|.
name|getOperation
argument_list|()
operator|==
name|SolverOperation
operator|.
name|SAVE_AS_NEW_COMMIT
operator|||
name|request
operator|.
name|getOperation
argument_list|()
operator|==
name|SolverOperation
operator|.
name|SAVE_COMMIT
argument_list|)
expr_stmt|;
break|break;
case|case
name|EXAM
case|:
name|solver
operator|.
name|save
argument_list|()
expr_stmt|;
break|break;
case|case
name|STUDENT
case|:
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|StudentSectioningSolverSave
argument_list|)
expr_stmt|;
name|SolverParameterDef
name|statusToSet
init|=
name|SolverParameterDef
operator|.
name|findByNameType
argument_list|(
literal|"Save.StudentSectioningStatusToSet"
argument_list|,
name|SolverParameterGroup
operator|.
name|SolverType
operator|.
name|STUDENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|statusToSet
operator|!=
literal|null
condition|)
block|{
name|solver
operator|.
name|setProperty
argument_list|(
literal|"Save.StudentSectioningStatusToSet"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
name|statusToSet
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|solver
operator|.
name|save
argument_list|()
expr_stmt|;
break|break;
case|case
name|INSTRUCTOR
case|:
name|solver
operator|.
name|setProperty
argument_list|(
literal|"Save.Commit"
argument_list|,
operator|(
name|request
operator|.
name|getOperation
argument_list|()
operator|==
name|SolverOperation
operator|.
name|SAVE_AS_NEW_COMMIT
operator|||
name|request
operator|.
name|getOperation
argument_list|()
operator|==
name|SolverOperation
operator|.
name|SAVE_COMMIT
operator|)
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|solver
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|UNLOAD
case|:
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|warnSolverNotStarted
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|solver
operator|.
name|isWorking
argument_list|()
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|warnSolverIsWorking
argument_list|()
argument_list|)
throw|;
name|service
operator|.
name|removeSolver
argument_list|()
expr_stmt|;
name|request
operator|.
name|clear
argument_list|()
expr_stmt|;
name|response
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|solver
operator|=
literal|null
expr_stmt|;
break|break;
case|case
name|RELOAD
case|:
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|warnSolverNotStarted
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|solver
operator|.
name|isWorking
argument_list|()
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|warnSolverIsWorking
argument_list|()
argument_list|)
throw|;
name|service
operator|.
name|reload
argument_list|(
name|service
operator|.
name|createConfig
argument_list|(
name|request
operator|.
name|getConfigurationId
argument_list|()
argument_list|,
name|request
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|START
case|:
case|case
name|LOAD
case|:
if|if
condition|(
name|solver
operator|!=
literal|null
operator|&&
name|solver
operator|.
name|isWorking
argument_list|()
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|warnSolverIsWorking
argument_list|()
argument_list|)
throw|;
name|Long
name|settingsId
init|=
name|request
operator|.
name|getConfigurationId
argument_list|()
decl_stmt|;
name|DataProperties
name|config
init|=
name|service
operator|.
name|createConfig
argument_list|(
name|settingsId
argument_list|,
name|request
operator|.
name|getParameters
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getHost
argument_list|()
operator|!=
literal|null
condition|)
name|config
operator|.
name|setProperty
argument_list|(
literal|"General.Host"
argument_list|,
name|request
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
literal|"General.StartSolver"
argument_list|,
name|request
operator|.
name|getOperation
argument_list|()
operator|==
name|SolverOperation
operator|.
name|START
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getType
argument_list|()
operator|==
name|SolverType
operator|.
name|COURSE
condition|)
block|{
name|String
name|solutionId
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
literal|"Solver.selectedSolutionId"
argument_list|)
decl_stmt|;
if|if
condition|(
name|solutionId
operator|!=
literal|null
condition|)
name|config
operator|.
name|setProperty
argument_list|(
literal|"General.SolutionId"
argument_list|,
name|solutionId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOwerIds
argument_list|()
condition|)
block|{
name|String
name|ownerIds
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Long
name|ownerId
range|:
name|request
operator|.
name|getOwnerIds
argument_list|()
control|)
name|ownerIds
operator|+=
operator|(
name|ownerIds
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
name|ownerId
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getType
argument_list|()
operator|==
name|SolverType
operator|.
name|COURSE
condition|)
name|config
operator|.
name|setProperty
argument_list|(
literal|"General.SolverGroupId"
argument_list|,
name|ownerIds
argument_list|)
expr_stmt|;
if|else if
condition|(
name|request
operator|.
name|getType
argument_list|()
operator|==
name|SolverType
operator|.
name|INSTRUCTOR
condition|)
name|config
operator|.
name|setProperty
argument_list|(
literal|"General.SolverGroupId"
argument_list|,
name|ownerIds
argument_list|)
expr_stmt|;
if|else if
condition|(
name|request
operator|.
name|getType
argument_list|()
operator|==
name|SolverType
operator|.
name|EXAM
condition|)
name|config
operator|.
name|setProperty
argument_list|(
literal|"Exam.Type"
argument_list|,
name|ownerIds
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
block|{
name|solver
operator|=
name|service
operator|.
name|createSolver
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|solver
operator|.
name|setProperties
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|solver
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|response
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|STOP
case|:
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|warnSolverNotStarted
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|solver
operator|.
name|isRunning
argument_list|()
condition|)
name|solver
operator|.
name|stopSolver
argument_list|()
expr_stmt|;
break|break;
case|case
name|STUDENT_SECTIONING
case|:
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|warnSolverNotStarted
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|solver
operator|.
name|isWorking
argument_list|()
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|warnSolverIsWorking
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|request
operator|.
name|getType
argument_list|()
operator|==
name|SolverType
operator|.
name|COURSE
condition|)
operator|(
operator|(
name|SolverProxy
operator|)
name|solver
operator|)
operator|.
name|finalSectioning
argument_list|()
expr_stmt|;
break|break;
case|case
name|INIT
case|:
name|response
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|solver
return|;
block|}
specifier|protected
name|void
name|fillHosts
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|SolverPageRequest
name|request
parameter_list|,
name|SolverPageResponse
name|response
parameter_list|)
block|{
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CanSelectSolverServer
argument_list|)
condition|)
block|{
for|for
control|(
name|SolverServer
name|server
range|:
name|solverServerService
operator|.
name|getServers
argument_list|(
literal|true
argument_list|)
control|)
name|response
operator|.
name|addHost
argument_list|(
name|server
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|hasHosts
argument_list|()
condition|)
name|Collections
operator|.
name|sort
argument_list|(
name|response
operator|.
name|getHosts
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|SolverLocalEnabled
operator|.
name|isTrue
argument_list|()
operator|&&
operator|(
operator|!
name|response
operator|.
name|hasHosts
argument_list|()
operator|||
operator|!
name|response
operator|.
name|getHosts
argument_list|()
operator|.
name|contains
argument_list|(
literal|"local"
argument_list|)
operator|)
condition|)
name|response
operator|.
name|addHost
argument_list|(
literal|0
argument_list|,
literal|"local"
argument_list|)
expr_stmt|;
name|response
operator|.
name|addHost
argument_list|(
literal|0
argument_list|,
literal|"auto"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|fillOwners
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|SolverPageRequest
name|request
parameter_list|,
name|SolverPageResponse
name|response
parameter_list|)
block|{
switch|switch
condition|(
name|request
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|COURSE
case|:
for|for
control|(
name|SolverGroup
name|owner
range|:
name|SolverGroup
operator|.
name|getUserSolverGroups
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|owner
argument_list|,
name|Right
operator|.
name|TimetablesSolutionLoadEmpty
argument_list|)
condition|)
name|response
operator|.
name|addSolverOwner
argument_list|(
operator|new
name|SolverOwner
argument_list|(
name|owner
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|owner
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|hasSolverOwners
argument_list|()
operator|&&
name|response
operator|.
name|getSolverOwners
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|response
operator|.
name|addOwnerId
argument_list|(
name|response
operator|.
name|getSolverOwners
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|response
operator|.
name|hasSolverOwners
argument_list|()
operator|&&
name|response
operator|.
name|getSolverOwners
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
name|response
operator|.
name|setAllowMultipleOwners
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|EXAM
case|:
for|for
control|(
name|ExamType
name|type
range|:
name|ExamType
operator|.
name|findAllUsedApplicable
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ExamTimetable
argument_list|)
control|)
block|{
name|response
operator|.
name|addSolverOwner
argument_list|(
operator|new
name|SolverOwner
argument_list|(
name|type
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|type
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|INSTRUCTOR
case|:
for|for
control|(
name|SolverGroup
name|owner
range|:
name|SolverGroup
operator|.
name|getUserSolverGroups
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|owner
argument_list|,
name|Right
operator|.
name|InstructorScheduling
argument_list|)
condition|)
name|response
operator|.
name|addSolverOwner
argument_list|(
operator|new
name|SolverOwner
argument_list|(
name|owner
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|owner
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|protected
name|void
name|fillParameters
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|SolverPageRequest
name|request
parameter_list|,
name|SolverPageResponse
name|response
parameter_list|)
block|{
name|SolverParameterGroup
operator|.
name|SolverType
name|type
init|=
literal|null
decl_stmt|;
name|String
name|group
init|=
literal|null
decl_stmt|;
name|int
name|appearance
init|=
literal|0
decl_stmt|;
name|String
name|defaultConfig
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|request
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|COURSE
case|:
name|type
operator|=
name|SolverParameterGroup
operator|.
name|SolverType
operator|.
name|COURSE
expr_stmt|;
name|group
operator|=
literal|"Basic"
expr_stmt|;
name|appearance
operator|=
name|SolverPredefinedSetting
operator|.
name|APPEARANCE_SOLVER
expr_stmt|;
name|defaultConfig
operator|=
literal|"Default.Solver"
expr_stmt|;
break|break;
case|case
name|EXAM
case|:
name|type
operator|=
name|SolverParameterGroup
operator|.
name|SolverType
operator|.
name|EXAM
expr_stmt|;
name|group
operator|=
literal|"ExamBasic"
expr_stmt|;
name|appearance
operator|=
name|SolverPredefinedSetting
operator|.
name|APPEARANCE_EXAM_SOLVER
expr_stmt|;
name|defaultConfig
operator|=
literal|"Exam.Default"
expr_stmt|;
break|break;
case|case
name|STUDENT
case|:
name|type
operator|=
name|SolverParameterGroup
operator|.
name|SolverType
operator|.
name|STUDENT
expr_stmt|;
name|group
operator|=
literal|"StudentSctBasic"
expr_stmt|;
name|appearance
operator|=
name|SolverPredefinedSetting
operator|.
name|APPEARANCE_STUDENT_SOLVER
expr_stmt|;
name|defaultConfig
operator|=
literal|"StudentSct.Default"
expr_stmt|;
break|break;
case|case
name|INSTRUCTOR
case|:
name|type
operator|=
name|SolverParameterGroup
operator|.
name|SolverType
operator|.
name|INSTRUCTOR
expr_stmt|;
name|group
operator|=
literal|"InstrSchd.Basic"
expr_stmt|;
name|appearance
operator|=
name|SolverPredefinedSetting
operator|.
name|APPEARANCE_INSTRUCTOR_SOLVER
expr_stmt|;
name|defaultConfig
operator|=
literal|"InstrSchd.Default"
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|MESSAGES
operator|.
name|errorSolverInvalidType
argument_list|(
name|request
operator|.
name|getType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|SolverParameterDef
argument_list|>
name|parameters
init|=
operator|(
name|List
argument_list|<
name|SolverParameterDef
argument_list|>
operator|)
name|SolverParameterDefDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from SolverParameterDef d where d.visible = true and d.group.type = :type and d.group.name = :group order by d.order"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"type"
argument_list|,
name|type
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"group"
argument_list|,
name|group
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|SolverParameterDef
name|def
range|:
name|parameters
control|)
block|{
name|SolverParameter
name|p
init|=
operator|new
name|SolverParameter
argument_list|()
decl_stmt|;
name|p
operator|.
name|setId
argument_list|(
name|def
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setKey
argument_list|(
name|def
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setName
argument_list|(
name|def
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setDefaultValue
argument_list|(
name|def
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setType
argument_list|(
name|def
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasParameters
argument_list|()
condition|)
name|p
operator|.
name|setValue
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
name|p
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|addParameter
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|SolverPredefinedSetting
argument_list|>
name|configs
init|=
operator|(
name|List
argument_list|<
name|SolverPredefinedSetting
argument_list|>
operator|)
name|SolverPredefinedSettingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from SolverPredefinedSetting s where s.appearance = :appearance"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"appearance"
argument_list|,
name|appearance
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|response
operator|.
name|setConfigurationId
argument_list|(
name|request
operator|.
name|getConfigurationId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SolverPredefinedSetting
name|config
range|:
name|configs
control|)
block|{
name|SolverConfiguration
name|c
init|=
operator|new
name|SolverConfiguration
argument_list|()
decl_stmt|;
name|c
operator|.
name|setId
argument_list|(
name|config
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setName
argument_list|(
name|config
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameter
name|p
range|:
name|config
operator|.
name|getParameters
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getDefinition
argument_list|()
operator|.
name|isVisible
argument_list|()
operator|&&
name|p
operator|.
name|getDefinition
argument_list|()
operator|.
name|getGroup
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|type
operator|.
name|ordinal
argument_list|()
operator|&&
name|group
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getDefinition
argument_list|()
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|c
operator|.
name|addParameter
argument_list|(
name|p
operator|.
name|getDefinition
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|response
operator|.
name|addConfiguration
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getConfigurationId
argument_list|()
operator|==
literal|null
operator|&&
name|defaultConfig
operator|.
name|equals
argument_list|(
name|config
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|response
operator|.
name|setConfigurationId
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameter
name|p
range|:
name|config
operator|.
name|getParameters
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getDefinition
argument_list|()
operator|.
name|isVisible
argument_list|()
operator|&&
name|p
operator|.
name|getDefinition
argument_list|()
operator|.
name|getGroup
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|type
operator|.
name|ordinal
argument_list|()
operator|&&
name|group
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getDefinition
argument_list|()
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|response
operator|.
name|getParameter
argument_list|(
name|p
operator|.
name|getDefinition
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|protected
name|SolverService
argument_list|<
name|?
extends|extends
name|CommonSolverInterface
argument_list|>
name|getSolverService
parameter_list|(
name|SolverType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|COURSE
case|:
return|return
name|courseTimetablingSolverService
return|;
case|case
name|EXAM
case|:
return|return
name|examinationSolverService
return|;
case|case
name|STUDENT
case|:
return|return
name|studentSectioningSolverService
return|;
case|case
name|INSTRUCTOR
case|:
return|return
name|instructorSchedulingSolverService
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|MESSAGES
operator|.
name|errorSolverInvalidType
argument_list|(
name|type
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|CommonSolverInterface
name|getSolver
parameter_list|(
name|SolverType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|COURSE
case|:
return|return
name|courseTimetablingSolverService
operator|.
name|getSolver
argument_list|()
return|;
case|case
name|EXAM
case|:
return|return
name|examinationSolverService
operator|.
name|getSolver
argument_list|()
return|;
case|case
name|STUDENT
case|:
return|return
name|studentSectioningSolverService
operator|.
name|getSolver
argument_list|()
return|;
case|case
name|INSTRUCTOR
case|:
return|return
name|instructorSchedulingSolverService
operator|.
name|getSolver
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|MESSAGES
operator|.
name|errorSolverInvalidType
argument_list|(
name|type
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|fillSolverInfos
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|CommonSolverInterface
name|solver
parameter_list|,
name|SolverPageRequest
name|request
parameter_list|,
name|SolverPageResponse
name|response
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
init|=
operator|(
name|solver
operator|==
literal|null
condition|?
literal|null
else|:
name|solver
operator|.
name|currentSolutionInfo
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|SolutionInfo
name|si
init|=
operator|new
name|SolutionInfo
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
operator|new
name|ListSolutionsForm
operator|.
name|InfoComparator
argument_list|()
argument_list|)
decl_stmt|;
name|keys
operator|.
name|addAll
argument_list|(
name|info
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
name|si
operator|.
name|addPair
argument_list|(
name|key
argument_list|,
name|info
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCurrentSolution
argument_list|(
name|si
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|best
init|=
operator|(
name|solver
operator|==
literal|null
condition|?
literal|null
else|:
name|solver
operator|.
name|bestSolutionInfo
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|best
operator|!=
literal|null
condition|)
block|{
name|SolutionInfo
name|si
init|=
operator|new
name|SolutionInfo
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
operator|new
name|ListSolutionsForm
operator|.
name|InfoComparator
argument_list|()
argument_list|)
decl_stmt|;
name|keys
operator|.
name|addAll
argument_list|(
name|best
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
name|si
operator|.
name|addPair
argument_list|(
name|key
argument_list|,
name|best
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setBestSolution
argument_list|(
name|si
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|response
operator|.
name|hasOwerIds
argument_list|()
condition|)
name|response
operator|.
name|getOwnerIds
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|request
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|COURSE
case|:
name|Long
index|[]
name|owners
init|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLongArry
argument_list|(
literal|"General.SolverGroupId"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|owners
operator|!=
literal|null
condition|)
for|for
control|(
name|Long
name|owner
range|:
name|owners
control|)
name|response
operator|.
name|addOwnerId
argument_list|(
name|owner
argument_list|)
expr_stmt|;
break|break;
case|case
name|EXAM
case|:
name|Long
name|owner
init|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLong
argument_list|(
literal|"Exam.Type"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|owner
operator|!=
literal|null
condition|)
name|response
operator|.
name|addOwnerId
argument_list|(
name|owner
argument_list|)
expr_stmt|;
break|break;
case|case
name|INSTRUCTOR
case|:
name|owner
operator|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SolverGroupId"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|owner
operator|!=
literal|null
condition|)
name|response
operator|.
name|addOwnerId
argument_list|(
name|owner
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|solver
operator|==
literal|null
operator|&&
name|request
operator|.
name|getType
argument_list|()
operator|==
name|SolverType
operator|.
name|COURSE
condition|)
block|{
name|String
name|id
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
literal|"Solver.selectedSolutionId"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
operator|!
name|id
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|id
argument_list|,
literal|","
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|Solution
name|solution
init|=
name|SolutionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|solution
operator|==
literal|null
condition|)
continue|continue;
name|SolutionInfo
name|si
init|=
operator|new
name|SolutionInfo
argument_list|()
decl_stmt|;
name|si
operator|.
name|setName
argument_list|(
name|solution
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LogInfo
name|logInfo
init|=
operator|(
name|LogInfo
operator|)
name|solution
operator|.
name|getInfo
argument_list|(
literal|"LogInfo"
argument_list|)
decl_stmt|;
if|if
condition|(
name|logInfo
operator|!=
literal|null
condition|)
for|for
control|(
name|Progress
operator|.
name|Message
name|m
range|:
name|logInfo
operator|.
name|getLog
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getLevel
argument_list|()
operator|==
name|ProgressLogLevel
operator|.
name|STAGE
operator|.
name|ordinal
argument_list|()
operator|&&
literal|"Loading input data ..."
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|&&
name|si
operator|.
name|hasLog
argument_list|()
condition|)
name|si
operator|.
name|getLog
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|getLevel
argument_list|()
operator|>=
name|ProgressLogLevel
operator|.
name|WARN
operator|.
name|ordinal
argument_list|()
condition|)
name|si
operator|.
name|addMessage
argument_list|(
name|m
operator|.
name|getLevel
argument_list|()
argument_list|,
name|m
operator|.
name|getDate
argument_list|()
argument_list|,
name|m
operator|.
name|getMessage
argument_list|()
argument_list|,
name|m
operator|.
name|getTrace
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|PropertiesInfo
name|propInfo
init|=
operator|(
name|PropertiesInfo
operator|)
name|solution
operator|.
name|getInfo
argument_list|(
literal|"GlobalInfo"
argument_list|)
decl_stmt|;
if|if
condition|(
name|propInfo
operator|!=
literal|null
condition|)
block|{
name|TreeSet
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
operator|new
name|ListSolutionsForm
operator|.
name|InfoComparator
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|propInfo
operator|.
name|keySet
argument_list|()
control|)
name|keys
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
name|si
operator|.
name|addPair
argument_list|(
name|key
argument_list|,
name|propInfo
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|addSelectedSolution
argument_list|(
name|si
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|addOwnerId
argument_list|(
name|solution
operator|.
name|getOwner
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|fillSolverLog
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|CommonSolverInterface
name|solver
parameter_list|,
name|SolverPageRequest
name|request
parameter_list|,
name|SolverPageResponse
name|response
parameter_list|)
block|{
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Progress
operator|.
name|Message
argument_list|>
name|log
init|=
name|solver
operator|.
name|getProgressLog
argument_list|(
name|ProgressLogLevel
operator|.
name|WARN
operator|.
name|ordinal
argument_list|()
argument_list|,
literal|"Loading input data ..."
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
for|for
control|(
name|Progress
operator|.
name|Message
name|m
range|:
name|log
control|)
name|response
operator|.
name|addMessage
argument_list|(
name|m
operator|.
name|getLevel
argument_list|()
argument_list|,
name|m
operator|.
name|getDate
argument_list|()
argument_list|,
name|m
operator|.
name|getMessage
argument_list|()
argument_list|,
name|m
operator|.
name|getTrace
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|fillSolverStatus
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|CommonSolverInterface
name|solver
parameter_list|,
name|SolverPageRequest
name|request
parameter_list|,
name|SolverPageResponse
name|response
parameter_list|)
block|{
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
name|response
operator|.
name|setLoadDate
argument_list|(
name|solver
operator|.
name|getLoadedDate
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setWorking
argument_list|(
name|solver
operator|.
name|isRunning
argument_list|()
operator|||
name|solver
operator|.
name|isWorking
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Map
name|p
init|=
name|solver
operator|.
name|getProgress
argument_list|()
decl_stmt|;
name|response
operator|.
name|setSolverStatus
argument_list|(
operator|(
name|String
operator|)
name|p
operator|.
name|get
argument_list|(
literal|"STATUS"
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|progressMax
init|=
operator|(
operator|(
name|Long
operator|)
name|p
operator|.
name|get
argument_list|(
literal|"MAX_PROGRESS"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|progressMax
operator|>
literal|0
condition|)
block|{
name|String
name|progress
init|=
operator|(
name|String
operator|)
name|p
operator|.
name|get
argument_list|(
literal|"PHASE"
argument_list|)
decl_stmt|;
name|long
name|progressCur
init|=
operator|(
operator|(
name|Long
operator|)
name|p
operator|.
name|get
argument_list|(
literal|"PROGRESS"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|double
name|progressPercent
init|=
literal|100.0
operator|*
operator|(
operator|(
name|double
operator|)
operator|(
name|progressCur
operator|<
name|progressMax
condition|?
name|progressCur
else|:
name|progressMax
operator|)
operator|)
operator|/
operator|(
operator|(
name|double
operator|)
name|progressMax
operator|)
decl_stmt|;
name|progress
operator|+=
literal|" ("
operator|+
operator|new
name|DecimalFormat
argument_list|(
literal|"0.0"
argument_list|)
operator|.
name|format
argument_list|(
name|progressPercent
argument_list|)
operator|+
literal|"%)"
expr_stmt|;
name|response
operator|.
name|setSolverProgress
argument_list|(
name|progress
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|DataProperties
name|config
init|=
name|solver
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|response
operator|.
name|setConfigurationId
argument_list|(
name|config
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SettingsId"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|getConfigurationId
argument_list|()
operator|!=
literal|null
operator|&&
name|response
operator|.
name|getConfiguration
argument_list|(
name|response
operator|.
name|getConfigurationId
argument_list|()
argument_list|)
operator|==
literal|null
operator|&&
name|response
operator|.
name|getSolverType
argument_list|()
operator|==
name|SolverType
operator|.
name|COURSE
condition|)
block|{
name|SolverPredefinedSetting
name|cfg
init|=
name|SolverPredefinedSettingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|response
operator|.
name|getConfigurationId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cfg
operator|!=
literal|null
operator|&&
name|cfg
operator|.
name|getAppearance
argument_list|()
operator|==
name|SolverPredefinedSetting
operator|.
name|APPEARANCE_TIMETABLES
condition|)
block|{
name|SolverConfiguration
name|c
init|=
operator|new
name|SolverConfiguration
argument_list|()
decl_stmt|;
name|c
operator|.
name|setId
argument_list|(
name|cfg
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setName
argument_list|(
name|cfg
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameter
name|p
range|:
name|cfg
operator|.
name|getParameters
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getDefinition
argument_list|()
operator|.
name|isVisible
argument_list|()
operator|&&
name|p
operator|.
name|getDefinition
argument_list|()
operator|.
name|getGroup
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|SolverParameterGroup
operator|.
name|SolverType
operator|.
name|COURSE
operator|.
name|ordinal
argument_list|()
operator|&&
literal|"Basic"
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getDefinition
argument_list|()
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|c
operator|.
name|addParameter
argument_list|(
name|p
operator|.
name|getDefinition
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|response
operator|.
name|addConfiguration
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|response
operator|.
name|hasParameters
argument_list|()
condition|)
block|{
for|for
control|(
name|SolverParameter
name|p
range|:
name|response
operator|.
name|getParameters
argument_list|()
control|)
name|p
operator|.
name|setValue
argument_list|(
name|config
operator|.
name|getProperty
argument_list|(
name|p
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|response
operator|.
name|setSolverStatus
argument_list|(
name|MESSAGES
operator|.
name|solverStatusNotStarted
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|fillAvailableOperations
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|CommonSolverInterface
name|solver
parameter_list|,
name|SolverPageRequest
name|request
parameter_list|,
name|SolverPageResponse
name|response
parameter_list|)
block|{
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|setCanExecute
argument_list|(
name|SolverOperation
operator|.
name|LOAD
argument_list|,
name|SolverOperation
operator|.
name|START
argument_list|,
name|SolverOperation
operator|.
name|CHECK
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|setCanExecute
argument_list|(
name|SolverOperation
operator|.
name|CHECK
argument_list|)
expr_stmt|;
if|if
condition|(
name|solver
operator|.
name|isRunning
argument_list|()
condition|)
name|response
operator|.
name|setCanExecute
argument_list|(
name|SolverOperation
operator|.
name|STOP
argument_list|)
expr_stmt|;
if|else if
condition|(
operator|!
name|solver
operator|.
name|isWorking
argument_list|()
condition|)
block|{
name|response
operator|.
name|setCanExecute
argument_list|(
name|SolverOperation
operator|.
name|START
argument_list|,
name|SolverOperation
operator|.
name|UNLOAD
argument_list|,
name|SolverOperation
operator|.
name|SAVE_BEST
argument_list|,
name|SolverOperation
operator|.
name|RELOAD
argument_list|)
expr_stmt|;
if|if
condition|(
name|solver
operator|.
name|bestSolutionInfo
argument_list|()
operator|!=
literal|null
condition|)
name|response
operator|.
name|setCanExecute
argument_list|(
name|SolverOperation
operator|.
name|RESTORE_BEST
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|request
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|COURSE
case|:
name|Long
index|[]
name|owners
init|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLongArry
argument_list|(
literal|"General.SolverGroupId"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|owners
argument_list|,
literal|"SolverGroup"
argument_list|,
name|Right
operator|.
name|SolverSolutionExportCsv
argument_list|)
condition|)
name|response
operator|.
name|setCanExecute
argument_list|(
name|SolverOperation
operator|.
name|EXPORT_CSV
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|owners
argument_list|,
literal|"SolverGroup"
argument_list|,
name|Right
operator|.
name|SolverSolutionExportXml
argument_list|)
condition|)
name|response
operator|.
name|setCanExecute
argument_list|(
name|SolverOperation
operator|.
name|EXPORT_XML
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|SolverProxy
operator|)
name|solver
operator|)
operator|.
name|hasFinalSectioning
argument_list|()
condition|)
name|response
operator|.
name|setCanExecute
argument_list|(
name|SolverOperation
operator|.
name|STUDENT_SECTIONING
argument_list|)
expr_stmt|;
name|Long
index|[]
name|iSolutionIds
init|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLongArry
argument_list|(
literal|"General.SolutionId"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|hasSolution
init|=
literal|false
decl_stmt|;
name|boolean
name|canOverwrite
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|iSolutionIds
operator|!=
literal|null
operator|&&
name|iSolutionIds
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSolutionIds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Solution
name|solution
init|=
operator|(
name|iSolutionIds
index|[
name|i
index|]
operator|==
literal|null
condition|?
literal|null
else|:
name|SolutionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|iSolutionIds
index|[
name|i
index|]
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|solution
operator|!=
literal|null
condition|)
block|{
name|hasSolution
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|solution
operator|.
name|getCommited
argument_list|()
condition|)
name|canOverwrite
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|owners
argument_list|,
literal|"SolverGroup"
argument_list|,
name|Right
operator|.
name|SolverSolutionSave
argument_list|)
condition|)
block|{
name|response
operator|.
name|setCanExecute
argument_list|(
name|SolverOperation
operator|.
name|SAVE_AS_NEW
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasSolution
operator|&&
name|canOverwrite
condition|)
name|response
operator|.
name|setCanExecute
argument_list|(
name|SolverOperation
operator|.
name|SAVE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|owners
argument_list|,
literal|"SolverGroup"
argument_list|,
name|Right
operator|.
name|TimetablesSolutionCommit
argument_list|)
condition|)
block|{
name|response
operator|.
name|setCanExecute
argument_list|(
name|SolverOperation
operator|.
name|SAVE_AS_NEW_COMMIT
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasSolution
condition|)
name|response
operator|.
name|setCanExecute
argument_list|(
name|SolverOperation
operator|.
name|SAVE_COMMIT
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|EXAM
case|:
name|response
operator|.
name|setCanExecute
argument_list|(
name|SolverOperation
operator|.
name|CLEAR
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|ExaminationSolutionExportXml
argument_list|)
condition|)
name|response
operator|.
name|setCanExecute
argument_list|(
name|SolverOperation
operator|.
name|EXPORT_XML
argument_list|)
expr_stmt|;
name|hasSolution
operator|=
name|Exam
operator|.
name|hasTimetable
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCanExecute
argument_list|(
name|hasSolution
condition|?
name|SolverOperation
operator|.
name|SAVE
else|:
name|SolverOperation
operator|.
name|SAVE_AS_NEW
argument_list|)
expr_stmt|;
break|break;
case|case
name|STUDENT
case|:
name|response
operator|.
name|setCanExecute
argument_list|(
name|SolverOperation
operator|.
name|CLEAR
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|StudentSectioningSolutionExportXml
argument_list|)
condition|)
name|response
operator|.
name|setCanExecute
argument_list|(
name|SolverOperation
operator|.
name|EXPORT_XML
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|StudentSectioningSolverSave
argument_list|)
condition|)
block|{
name|hasSolution
operator|=
name|Session
operator|.
name|hasStudentSchedule
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCanExecute
argument_list|(
name|hasSolution
condition|?
name|SolverOperation
operator|.
name|SAVE
else|:
name|SolverOperation
operator|.
name|SAVE_AS_NEW
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|INSTRUCTOR
case|:
name|response
operator|.
name|setCanExecute
argument_list|(
name|SolverOperation
operator|.
name|CLEAR
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|InstructorSchedulingSolutionExportXml
argument_list|)
condition|)
name|response
operator|.
name|setCanExecute
argument_list|(
name|SolverOperation
operator|.
name|EXPORT_XML
argument_list|)
expr_stmt|;
if|if
condition|(
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Save.Commit"
argument_list|,
literal|false
argument_list|)
condition|)
name|response
operator|.
name|setCanExecute
argument_list|(
name|SolverOperation
operator|.
name|SAVE_UNCOMMIT
argument_list|)
expr_stmt|;
else|else
name|response
operator|.
name|setCanExecute
argument_list|(
name|SolverOperation
operator|.
name|SAVE
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCanExecute
argument_list|(
name|SolverOperation
operator|.
name|SAVE_COMMIT
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|fillSolverWarnings
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|CommonSolverInterface
name|solver
parameter_list|,
name|SolverPageRequest
name|request
parameter_list|,
name|SolverPageResponse
name|response
parameter_list|)
block|{
name|fillSolverWarnings
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|request
operator|.
name|getType
argument_list|()
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|fillSolverWarnings
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|CommonSolverInterface
name|solver
parameter_list|,
name|SolverType
name|solverType
parameter_list|,
name|HasPageMessages
name|response
parameter_list|)
block|{
switch|switch
condition|(
name|solverType
condition|)
block|{
case|case
name|EXAM
case|:
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
name|ExamType
name|type
init|=
name|ExamTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLong
argument_list|(
literal|"Exam.Type"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|String
name|ts
init|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"RoomAvailability.TimeStamp"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ts
operator|==
literal|null
condition|)
name|response
operator|.
name|addPageMessage
argument_list|(
operator|new
name|PageMessage
argument_list|(
name|PageMessageType
operator|.
name|WARNING
argument_list|,
name|MESSAGES
operator|.
name|warnExamSolverNoRoomAvailability
argument_list|(
name|type
operator|.
name|getLabel
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|response
operator|.
name|addPageMessage
argument_list|(
operator|new
name|PageMessage
argument_list|(
name|PageMessageType
operator|.
name|INFO
argument_list|,
name|MESSAGES
operator|.
name|infoExamSolverRoomAvailabilityLastUpdated
argument_list|(
name|type
operator|.
name|getLabel
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|ts
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|addPageMessage
argument_list|(
operator|new
name|PageMessage
argument_list|(
name|PageMessageType
operator|.
name|INFO
argument_list|,
name|MESSAGES
operator|.
name|infoExamSolverShowingSolution
argument_list|(
name|type
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|,
literal|"gwt.jsp?page=solver&type=exam"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|COURSE
case|:
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
name|String
name|warn
init|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.SolverWarnings"
argument_list|)
decl_stmt|;
if|if
condition|(
name|warn
operator|!=
literal|null
operator|&&
operator|!
name|warn
operator|.
name|isEmpty
argument_list|()
condition|)
name|response
operator|.
name|addPageMessage
argument_list|(
operator|new
name|PageMessage
argument_list|(
name|PageMessageType
operator|.
name|WARNING
argument_list|,
name|warn
argument_list|)
argument_list|)
expr_stmt|;
name|Long
index|[]
name|solverGroupId
init|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLongArry
argument_list|(
literal|"General.SolverGroupId"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|interactive
init|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.InteractiveMode"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|solverGroupId
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|solverGroupId
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SolverGroup
name|sg
init|=
name|SolverGroupDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|solverGroupId
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|names
operator|.
name|add
argument_list|(
name|sg
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
else|:
name|solverGroupId
operator|.
name|length
operator|<=
literal|3
condition|?
name|sg
operator|.
name|getName
argument_list|()
else|:
name|sg
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|names
operator|==
literal|null
operator|||
name|names
operator|.
name|isEmpty
argument_list|()
condition|)
name|names
operator|.
name|add
argument_list|(
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addPageMessage
argument_list|(
operator|new
name|PageMessage
argument_list|(
name|PageMessageType
operator|.
name|INFO
argument_list|,
name|MESSAGES
operator|.
name|infoSolverShowingSolution
argument_list|(
name|toString
argument_list|(
name|names
argument_list|)
argument_list|)
argument_list|,
name|interactive
condition|?
literal|"listSolutions.do"
else|:
literal|"gwt.jsp?page=solver&type=course"
argument_list|)
argument_list|)
expr_stmt|;
comment|/*             	String ts = solver.getProperties().getProperty("RoomAvailability.TimeStamp");             	if (ts==null)             		response.addPageMessage(new PageMessage(PageMessageType.WARNING, MESSAGES.warnCourseSolverNoRoomAvailability()));                 else                 	response.addPageMessage(new PageMessage(PageMessageType.INFO, MESSAGES.infoCourseSolverRoomAvailabilityLastUpdated(ts)));                 */
block|}
else|else
block|{
name|String
name|id
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
literal|"Solver.selectedSolutionId"
argument_list|)
decl_stmt|;
name|String
name|warn
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
operator|!
name|id
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|solutionIds
init|=
name|id
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|solutionIds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Solution
name|solution
init|=
name|SolutionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|solutionIds
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|names
operator|.
name|add
argument_list|(
name|solutionIds
operator|.
name|length
operator|<=
literal|3
condition|?
name|solution
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
else|:
name|solution
operator|.
name|getOwner
argument_list|()
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameter
name|p
range|:
name|solution
operator|.
name|getParameters
argument_list|()
control|)
block|{
if|if
condition|(
literal|"General.SolverWarnings"
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getDefinition
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|p
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|warn
operator|.
name|isEmpty
argument_list|()
condition|)
name|warn
operator|+=
literal|"<br>"
expr_stmt|;
name|warn
operator|+=
name|p
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|warn
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|SolverGroup
argument_list|>
name|solverGroups
init|=
name|SolverGroup
operator|.
name|getUserSolverGroups
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|solverGroups
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|maxDistPriority
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
name|int
name|nrWarns
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SolverGroup
name|sg
range|:
name|solverGroups
control|)
name|maxDistPriority
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxDistPriority
argument_list|,
name|sg
operator|.
name|getMaxDistributionPriority
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SolverGroup
name|sg
range|:
name|SolverGroup
operator|.
name|findBySessionId
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|solverGroups
operator|.
name|contains
argument_list|(
name|sg
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|sg
operator|.
name|getMinDistributionPriority
argument_list|()
operator|<
name|maxDistPriority
operator|&&
name|sg
operator|.
name|getCommittedSolution
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|nrWarns
operator|>
literal|0
condition|)
name|warn
operator|+=
literal|"<br>"
expr_stmt|;
name|boolean
name|dept
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|subjects
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Department
name|d
range|:
name|sg
operator|.
name|getDepartments
argument_list|()
control|)
block|{
if|if
condition|(
name|d
operator|.
name|isExternalManager
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|subjects
operator|.
name|add
argument_list|(
name|d
operator|.
name|getExternalMgrAbbv
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dept
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|SubjectArea
name|sa
range|:
name|d
operator|.
name|getSubjectAreas
argument_list|()
control|)
name|subjects
operator|.
name|add
argument_list|(
name|sa
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dept
condition|)
name|warn
operator|+=
name|MESSAGES
operator|.
name|warnSolverNoCommittedSolutionDepartmental
argument_list|(
name|sg
operator|.
name|getAbbv
argument_list|()
argument_list|,
name|toString
argument_list|(
name|subjects
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|warn
operator|+=
name|MESSAGES
operator|.
name|warnSolverNoCommittedSolutionExternal
argument_list|(
name|sg
operator|.
name|getAbbv
argument_list|()
argument_list|,
name|toString
argument_list|(
name|subjects
argument_list|)
argument_list|)
expr_stmt|;
name|nrWarns
operator|++
expr_stmt|;
if|if
condition|(
name|nrWarns
operator|>=
literal|3
condition|)
block|{
name|warn
operator|+=
literal|"<br>..."
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|warn
operator|!=
literal|null
operator|&&
operator|!
name|warn
operator|.
name|isEmpty
argument_list|()
condition|)
name|response
operator|.
name|addPageMessage
argument_list|(
operator|new
name|PageMessage
argument_list|(
name|PageMessageType
operator|.
name|WARNING
argument_list|,
name|warn
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|addPageMessage
argument_list|(
operator|new
name|PageMessage
argument_list|(
name|PageMessageType
operator|.
name|INFO
argument_list|,
operator|(
name|names
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
name|MESSAGES
operator|.
name|infoSolverShowingSelectedSolution
argument_list|(
name|names
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
else|:
name|MESSAGES
operator|.
name|infoSolverShowingSelectedSolutions
argument_list|(
name|toString
argument_list|(
name|names
argument_list|)
argument_list|)
operator|)
argument_list|,
literal|"listSolutions.do"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|items
parameter_list|)
block|{
if|if
condition|(
name|items
operator|==
literal|null
operator|||
name|items
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|""
return|;
if|if
condition|(
name|items
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
return|return
name|items
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
if|if
condition|(
name|items
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|i
init|=
name|items
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
name|MESSAGES
operator|.
name|itemSeparatorPair
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|,
name|i
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|i
init|=
name|items
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
name|list
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|item
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|list
operator|=
name|MESSAGES
operator|.
name|itemSeparatorMiddle
argument_list|(
name|list
argument_list|,
name|item
argument_list|)
expr_stmt|;
else|else
name|list
operator|=
name|MESSAGES
operator|.
name|itemSeparatorLast
argument_list|(
name|list
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
block|}
block|}
end_class

end_unit

