begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|LongType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseTimetablingSolverInterface
operator|.
name|AssignmentHistoryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseTimetablingSolverInterface
operator|.
name|AssignmentHistoryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|SolverType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
operator|.
name|TableCellChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
operator|.
name|TableCellMultiLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
operator|.
name|TableCellInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
operator|.
name|TableCellMulti
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
operator|.
name|TableCellRooms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
operator|.
name|TableHeaderIterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
operator|.
name|TableRowInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|SolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|TimetableSolver
operator|.
name|AssignmentRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|TimetableSolver
operator|.
name|RecordedAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|interactive
operator|.
name|ClassAssignmentDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|interactive
operator|.
name|ClassAssignmentDetails
operator|.
name|RoomInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|interactive
operator|.
name|Suggestion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
operator|.
name|Format
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|BackTracker
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|AssignmentHistoryRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|AssignmentHistoryBackend
implements|implements
name|GwtRpcImplementation
argument_list|<
name|AssignmentHistoryRequest
argument_list|,
name|AssignmentHistoryResponse
argument_list|>
block|{
specifier|protected
specifier|static
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|DecimalFormat
name|sDF
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.###"
argument_list|,
operator|new
name|java
operator|.
name|text
operator|.
name|DecimalFormatSymbols
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|Format
argument_list|<
name|Date
argument_list|>
name|sTS
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_TIME_STAMP
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
name|SolverService
argument_list|<
name|SolverProxy
argument_list|>
name|courseTimetablingSolverService
decl_stmt|;
annotation|@
name|Override
specifier|public
name|AssignmentHistoryResponse
name|execute
parameter_list|(
name|AssignmentHistoryRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|AssignmentHistory
argument_list|)
expr_stmt|;
name|AssignmentHistoryResponse
name|response
init|=
operator|new
name|AssignmentHistoryResponse
argument_list|()
decl_stmt|;
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"SuggestionsModel.simpleMode"
argument_list|,
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|getParameterValue
argument_list|(
literal|"simpleMode"
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|simple
init|=
literal|"1"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|getParameterValue
argument_list|(
literal|"simpleMode"
argument_list|)
argument_list|)
decl_stmt|;
name|SolverProxy
name|solver
init|=
name|courseTimetablingSolverService
operator|.
name|getSolver
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AssignmentRecord
argument_list|>
name|history
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|errorNoSolverLoaded
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|history
operator|=
name|solver
operator|.
name|getAssignmentRecords
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|history
operator|!=
literal|null
condition|)
block|{
name|long
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|AssignmentRecord
argument_list|>
name|it
init|=
name|history
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|AssignmentRecord
name|record
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|TableCellMultiLine
name|allClasses
init|=
operator|new
name|TableCellMultiLine
argument_list|()
decl_stmt|;
name|TableCellMultiLine
name|allDates
init|=
operator|new
name|TableCellMultiLine
argument_list|()
decl_stmt|;
name|TableCellMultiLine
name|allTimes
init|=
operator|new
name|TableCellMultiLine
argument_list|()
decl_stmt|;
name|TableCellMultiLine
name|allRooms
init|=
operator|new
name|TableCellMultiLine
argument_list|()
decl_stmt|;
name|Long
name|classId
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RecordedAssignment
name|assignment
range|:
name|record
operator|.
name|getAssignments
argument_list|()
control|)
block|{
name|ClassAssignmentDetails
name|before
init|=
operator|(
name|assignment
operator|.
name|getBefore
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|assignment
operator|.
name|getBefore
argument_list|()
operator|.
name|getDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
literal|false
argument_list|)
operator|)
decl_stmt|;
name|ClassAssignmentDetails
name|after
init|=
operator|(
name|assignment
operator|.
name|getAfter
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|assignment
operator|.
name|getAfter
argument_list|()
operator|.
name|getDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
literal|false
argument_list|)
operator|)
decl_stmt|;
name|ClassAssignmentDetails
name|ca
init|=
operator|(
name|after
operator|==
literal|null
condition|?
name|before
else|:
name|after
operator|)
decl_stmt|;
if|if
condition|(
name|classId
operator|==
literal|null
condition|)
name|classId
operator|=
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
expr_stmt|;
name|TableCellChange
name|date
init|=
operator|new
name|TableCellChange
argument_list|(
name|before
operator|==
literal|null
operator|||
name|before
operator|.
name|getAssignedTime
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|TableCellInterface
argument_list|(
name|before
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|before
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|getDatePatternPreference
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|after
operator|==
literal|null
operator|||
name|after
operator|.
name|getAssignedTime
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|TableCellInterface
argument_list|(
name|after
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|after
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|getDatePatternPreference
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TableCellChange
name|time
init|=
operator|new
name|TableCellChange
argument_list|(
name|before
operator|==
literal|null
operator|||
name|before
operator|.
name|getAssignedTime
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|TableInterface
operator|.
name|TableCellTime
argument_list|(
name|before
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|getDaysName
argument_list|()
operator|+
literal|" "
operator|+
name|before
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|.
name|setId
argument_list|(
name|before
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
operator|+
literal|","
operator|+
name|before
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|getDays
argument_list|()
operator|+
literal|","
operator|+
name|before
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|before
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|after
operator|==
literal|null
operator|||
name|after
operator|.
name|getAssignedTime
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|TableInterface
operator|.
name|TableCellTime
argument_list|(
name|after
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|getDaysName
argument_list|()
operator|+
literal|" "
operator|+
name|after
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|.
name|setId
argument_list|(
name|after
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
operator|+
literal|","
operator|+
name|after
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|getDays
argument_list|()
operator|+
literal|","
operator|+
name|after
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|after
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TableCellChange
name|room
init|=
operator|new
name|TableCellChange
argument_list|()
decl_stmt|;
if|if
condition|(
name|before
operator|!=
literal|null
operator|&&
name|before
operator|.
name|getAssignedRoom
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|TableCellRooms
name|beforeRooms
init|=
operator|new
name|TableCellRooms
argument_list|()
decl_stmt|;
for|for
control|(
name|RoomInfo
name|r
range|:
operator|new
name|TreeSet
argument_list|<
name|RoomInfo
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|before
operator|.
name|getAssignedRoom
argument_list|()
argument_list|)
argument_list|)
control|)
name|beforeRooms
operator|.
name|add
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|,
name|r
operator|.
name|getColor
argument_list|()
argument_list|,
name|r
operator|.
name|getId
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|int2string
argument_list|(
name|r
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|room
operator|.
name|setFirst
argument_list|(
name|beforeRooms
argument_list|)
expr_stmt|;
if|if
condition|(
name|before
operator|.
name|getAssignedRoom
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|&&
name|after
operator|==
literal|null
condition|)
name|room
operator|.
name|setSecond
argument_list|(
operator|new
name|TableCellRooms
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|after
operator|!=
literal|null
operator|&&
name|after
operator|.
name|getAssignedRoom
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|TableCellRooms
name|afterRooms
init|=
operator|new
name|TableCellRooms
argument_list|()
decl_stmt|;
for|for
control|(
name|RoomInfo
name|r
range|:
operator|new
name|TreeSet
argument_list|<
name|RoomInfo
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|after
operator|.
name|getAssignedRoom
argument_list|()
argument_list|)
argument_list|)
control|)
name|afterRooms
operator|.
name|add
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|,
name|r
operator|.
name|getColor
argument_list|()
argument_list|,
name|r
operator|.
name|getId
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|int2string
argument_list|(
name|r
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|room
operator|.
name|setSecond
argument_list|(
name|afterRooms
argument_list|)
expr_stmt|;
if|if
condition|(
name|after
operator|.
name|getAssignedRoom
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|&&
name|before
operator|==
literal|null
condition|)
name|room
operator|.
name|setFirst
argument_list|(
operator|new
name|TableCellRooms
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|allClasses
operator|.
name|add
argument_list|(
operator|new
name|TableInterface
operator|.
name|TableCellClassName
argument_list|(
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|allDates
operator|.
name|add
argument_list|(
name|date
argument_list|)
expr_stmt|;
name|allTimes
operator|.
name|add
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|allRooms
operator|.
name|add
argument_list|(
name|room
argument_list|)
expr_stmt|;
block|}
name|Suggestion
name|bSg
init|=
name|record
operator|.
name|getBefore
argument_list|()
decl_stmt|;
name|Suggestion
name|aSg
init|=
name|record
operator|.
name|getAfter
argument_list|()
decl_stmt|;
name|TableCellMulti
name|studentConfs
init|=
operator|new
name|TableCellMulti
argument_list|()
decl_stmt|;
name|studentConfs
operator|.
name|add
argument_list|(
name|dispNumber
argument_list|(
name|aSg
operator|.
name|getViolatedStudentConflicts
argument_list|()
operator|-
name|bSg
operator|.
name|getViolatedStudentConflicts
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|aSg
operator|.
name|getCommitedStudentConflicts
argument_list|()
operator|-
name|bSg
operator|.
name|getCommitedStudentConflicts
argument_list|()
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|studentConfs
operator|.
name|getNrChunks
argument_list|()
operator|<=
literal|1
condition|)
name|studentConfs
operator|.
name|add
argument_list|(
literal|" ("
argument_list|)
expr_stmt|;
else|else
name|studentConfs
operator|.
name|add
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|studentConfs
operator|.
name|add
argument_list|(
name|dispNumber
argument_list|(
name|aSg
operator|.
name|getCommitedStudentConflicts
argument_list|()
operator|-
name|bSg
operator|.
name|getCommitedStudentConflicts
argument_list|()
argument_list|)
operator|.
name|setFormattedValue
argument_list|(
literal|"c"
operator|+
operator|(
name|aSg
operator|.
name|getCommitedStudentConflicts
argument_list|()
operator|-
name|bSg
operator|.
name|getCommitedStudentConflicts
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|aSg
operator|.
name|getDistanceStudentConflicts
argument_list|()
operator|-
name|bSg
operator|.
name|getDistanceStudentConflicts
argument_list|()
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|studentConfs
operator|.
name|getNrChunks
argument_list|()
operator|<=
literal|1
condition|)
name|studentConfs
operator|.
name|add
argument_list|(
literal|" ("
argument_list|)
expr_stmt|;
else|else
name|studentConfs
operator|.
name|add
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|studentConfs
operator|.
name|add
argument_list|(
name|dispNumber
argument_list|(
name|aSg
operator|.
name|getDistanceStudentConflicts
argument_list|()
operator|-
name|bSg
operator|.
name|getDistanceStudentConflicts
argument_list|()
argument_list|)
operator|.
name|setFormattedValue
argument_list|(
literal|"d"
operator|+
operator|(
name|aSg
operator|.
name|getDistanceStudentConflicts
argument_list|()
operator|-
name|bSg
operator|.
name|getDistanceStudentConflicts
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|aSg
operator|.
name|getHardStudentConflicts
argument_list|()
operator|-
name|bSg
operator|.
name|getHardStudentConflicts
argument_list|()
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|studentConfs
operator|.
name|getNrChunks
argument_list|()
operator|<=
literal|1
condition|)
name|studentConfs
operator|.
name|add
argument_list|(
literal|" ("
argument_list|)
expr_stmt|;
else|else
name|studentConfs
operator|.
name|add
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|studentConfs
operator|.
name|add
argument_list|(
name|dispNumber
argument_list|(
name|aSg
operator|.
name|getHardStudentConflicts
argument_list|()
operator|-
name|bSg
operator|.
name|getHardStudentConflicts
argument_list|()
argument_list|)
operator|.
name|setFormattedValue
argument_list|(
literal|"h"
operator|+
operator|(
name|aSg
operator|.
name|getHardStudentConflicts
argument_list|()
operator|-
name|bSg
operator|.
name|getHardStudentConflicts
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|studentConfs
operator|.
name|getNrChunks
argument_list|()
operator|>
literal|1
condition|)
name|studentConfs
operator|.
name|add
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|simple
condition|)
name|response
operator|.
name|addRow
argument_list|(
operator|new
name|TableRowInterface
argument_list|(
name|idx
argument_list|,
literal|"gwt.jsp?page=suggestions&menu=hide&id="
operator|+
name|classId
operator|+
literal|"&history="
operator|+
name|idx
argument_list|,
name|MESSAGES
operator|.
name|dialogSuggestions
argument_list|()
argument_list|,
operator|new
name|TableCellInterface
argument_list|<
name|Date
argument_list|>
argument_list|(
name|record
operator|.
name|getTimeStamp
argument_list|()
argument_list|,
name|sTS
operator|.
name|format
argument_list|(
name|record
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|aSg
operator|.
name|getValue
argument_list|()
operator|-
name|bSg
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
name|allClasses
argument_list|,
name|allDates
argument_list|,
name|allTimes
argument_list|,
name|allRooms
argument_list|,
name|dispNumber
argument_list|(
name|aSg
operator|.
name|getUnassignedVariables
argument_list|()
operator|-
name|bSg
operator|.
name|getUnassignedVariables
argument_list|()
argument_list|)
argument_list|,
name|studentConfs
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|response
operator|.
name|addRow
argument_list|(
operator|new
name|TableRowInterface
argument_list|(
name|idx
argument_list|,
literal|"gwt.jsp?page=suggestions&menu=hide&id="
operator|+
name|classId
operator|+
literal|"&history="
operator|+
name|idx
argument_list|,
name|MESSAGES
operator|.
name|dialogSuggestions
argument_list|()
argument_list|,
operator|new
name|TableCellInterface
argument_list|<
name|Date
argument_list|>
argument_list|(
name|record
operator|.
name|getTimeStamp
argument_list|()
argument_list|,
name|sTS
operator|.
name|format
argument_list|(
name|record
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|aSg
operator|.
name|getValue
argument_list|()
operator|-
name|bSg
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
name|allClasses
argument_list|,
name|allDates
argument_list|,
name|allTimes
argument_list|,
name|allRooms
argument_list|,
name|dispNumber
argument_list|(
name|aSg
operator|.
name|getUnassignedVariables
argument_list|()
operator|-
name|bSg
operator|.
name|getUnassignedVariables
argument_list|()
argument_list|)
argument_list|,
name|studentConfs
argument_list|,
name|dispNumber
argument_list|(
name|aSg
operator|.
name|getGlobalTimePreference
argument_list|()
operator|-
name|bSg
operator|.
name|getGlobalTimePreference
argument_list|()
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|aSg
operator|.
name|getGlobalRoomPreference
argument_list|()
operator|-
name|bSg
operator|.
name|getGlobalRoomPreference
argument_list|()
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|aSg
operator|.
name|getGlobalGroupConstraintPreference
argument_list|()
operator|-
name|bSg
operator|.
name|getGlobalGroupConstraintPreference
argument_list|()
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|aSg
operator|.
name|getInstructorDistancePreference
argument_list|()
operator|-
name|bSg
operator|.
name|getInstructorDistancePreference
argument_list|()
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|aSg
operator|.
name|getUselessSlots
argument_list|()
operator|-
name|bSg
operator|.
name|getUselessSlots
argument_list|()
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|aSg
operator|.
name|getTooBigRooms
argument_list|()
operator|-
name|bSg
operator|.
name|getTooBigRooms
argument_list|()
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|aSg
operator|.
name|getDepartmentSpreadPenalty
argument_list|()
operator|-
name|bSg
operator|.
name|getDepartmentSpreadPenalty
argument_list|()
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|aSg
operator|.
name|getSpreadPenalty
argument_list|()
operator|-
name|bSg
operator|.
name|getSpreadPenalty
argument_list|()
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|aSg
operator|.
name|getPerturbationPenalty
argument_list|()
operator|-
name|bSg
operator|.
name|getPerturbationPenalty
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|simple
condition|)
name|response
operator|.
name|setHeader
argument_list|(
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colTimeStamp
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colScore
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colClass
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colDate
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colTime
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colRoom
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colShortUnassignments
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colNrStudentConflicts
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|response
operator|.
name|setHeader
argument_list|(
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colTimeStamp
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colScore
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colClass
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colDate
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colTime
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colRoom
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colShortUnassignments
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colNrStudentConflicts
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colShortTimePref
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colShortRoomPref
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colShortDistPref
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colShortInstructorBtbPref
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colShortUselessHalfHours
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colShortTooBigRooms
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colShortDepartmentBalance
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colShortSameSubpartBalance
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colShortPerturbations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|SolverPageBackend
operator|.
name|fillSolverWarnings
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|SolverType
operator|.
name|COURSE
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|context
argument_list|,
literal|"gwt.jsp?page=solutionChanges"
argument_list|,
name|MESSAGES
operator|.
name|pageSolutionChanges
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
specifier|public
name|TableCellInterface
name|dispNumber
parameter_list|(
name|int
name|value
parameter_list|)
block|{
return|return
operator|new
name|TableCellInterface
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|value
argument_list|,
name|value
operator|==
literal|0
condition|?
literal|""
else|:
name|value
operator|<=
literal|0
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
else|:
literal|"+"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
operator|.
name|setColor
argument_list|(
name|value
operator|<
literal|0
condition|?
literal|"green"
else|:
name|value
operator|>
literal|0
condition|?
literal|"red"
else|:
literal|null
argument_list|)
return|;
block|}
specifier|public
name|TableCellInterface
name|dispNumber
parameter_list|(
name|double
name|value
parameter_list|)
block|{
return|return
operator|new
name|TableCellInterface
argument_list|<
name|Double
argument_list|>
argument_list|(
name|value
argument_list|,
name|Math
operator|.
name|round
argument_list|(
literal|1000.0
operator|*
name|value
argument_list|)
operator|==
literal|0.0
condition|?
literal|""
else|:
operator|(
name|value
operator|>=
literal|0.0005
condition|?
literal|"+"
else|:
literal|""
operator|)
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|value
argument_list|)
argument_list|)
operator|.
name|setColor
argument_list|(
name|value
operator|<
literal|0
condition|?
literal|"green"
else|:
name|value
operator|>
literal|0
condition|?
literal|"red"
else|:
literal|null
argument_list|)
return|;
block|}
block|}
end_class

end_unit

