begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|LongType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|SessionAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseTimetablingSolverInterface
operator|.
name|SolutionChangesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseTimetablingSolverInterface
operator|.
name|SolutionChangesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|SolverType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
operator|.
name|TableCellChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
operator|.
name|TableCellInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
operator|.
name|TableCellMulti
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
operator|.
name|TableCellRooms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
operator|.
name|TableHeaderIterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
operator|.
name|TableRowInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|SolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|TimetableSolver
operator|.
name|RecordedAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|interactive
operator|.
name|ClassAssignmentDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|interactive
operator|.
name|SuggestionsModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|AssignmentPreferenceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|BackTracker
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|SolutionChangesRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|SolutionChangesBackend
implements|implements
name|GwtRpcImplementation
argument_list|<
name|SolutionChangesRequest
argument_list|,
name|SolutionChangesResponse
argument_list|>
block|{
specifier|protected
specifier|static
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|DecimalFormat
name|sDF
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.###"
argument_list|,
operator|new
name|java
operator|.
name|text
operator|.
name|DecimalFormatSymbols
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
name|SolverService
argument_list|<
name|SolverProxy
argument_list|>
name|courseTimetablingSolverService
decl_stmt|;
annotation|@
name|Override
specifier|public
name|SolutionChangesResponse
name|execute
parameter_list|(
name|SolutionChangesRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|SolutionChanges
argument_list|)
expr_stmt|;
name|SolutionChangesResponse
name|response
init|=
operator|new
name|SolutionChangesResponse
argument_list|()
decl_stmt|;
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"SuggestionsModel.simpleMode"
argument_list|,
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|getParameterValue
argument_list|(
literal|"simpleMode"
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|simple
init|=
literal|"1"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|getParameterValue
argument_list|(
literal|"simpleMode"
argument_list|)
argument_list|)
decl_stmt|;
name|SuggestionsModel
name|model
init|=
operator|(
name|SuggestionsModel
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
literal|"Suggestions.model"
argument_list|)
decl_stmt|;
if|if
condition|(
name|model
operator|!=
literal|null
condition|)
name|model
operator|.
name|setSimpleMode
argument_list|(
name|simple
argument_list|)
expr_stmt|;
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"SolutionChanges.reference"
argument_list|,
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|getParameterValue
argument_list|(
literal|"reference"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|reference
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|getParameterValue
argument_list|(
literal|"reference"
argument_list|)
argument_list|)
decl_stmt|;
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"SolutionChanges.reversedMode"
argument_list|,
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|getParameterValue
argument_list|(
literal|"reversedMode"
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|reversed
init|=
literal|"1"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|getParameterValue
argument_list|(
literal|"reversedMode"
argument_list|)
argument_list|)
decl_stmt|;
name|SolverProxy
name|solver
init|=
name|courseTimetablingSolverService
operator|.
name|getSolver
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RecordedAssignment
argument_list|>
name|changes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|errorNoSolverLoaded
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reference
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|solver
operator|.
name|bestSolutionInfo
argument_list|()
operator|==
literal|null
condition|)
name|response
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|errorNoBestSolutionSaved
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|changes
operator|=
name|solver
operator|.
name|getChangesToBest
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|reference
operator|==
literal|1
condition|)
block|{
name|changes
operator|=
name|solver
operator|.
name|getChangesToInitial
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|solutionIdsStr
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|SelectedSolution
argument_list|)
decl_stmt|;
if|if
condition|(
name|solutionIdsStr
operator|==
literal|null
operator|||
name|solutionIdsStr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|response
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|errorNoSolutionSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|changes
operator|=
operator|new
name|ArrayList
argument_list|<
name|RecordedAssignment
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|solutionIdsStr
argument_list|,
literal|","
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|Long
name|solutionId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RecordedAssignment
argument_list|>
name|ch
init|=
name|solver
operator|.
name|getChangesToSolution
argument_list|(
name|solutionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|!=
literal|null
condition|)
name|changes
operator|.
name|addAll
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|changes
operator|!=
literal|null
condition|)
for|for
control|(
name|RecordedAssignment
name|assignment
range|:
name|changes
control|)
block|{
name|ClassAssignmentDetails
name|before
init|=
operator|(
name|assignment
operator|.
name|getBefore
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|assignment
operator|.
name|getBefore
argument_list|()
operator|.
name|getDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
literal|false
argument_list|)
operator|)
decl_stmt|;
name|ClassAssignmentDetails
name|after
init|=
operator|(
name|assignment
operator|.
name|getAfter
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|assignment
operator|.
name|getAfter
argument_list|()
operator|.
name|getDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
literal|false
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|reversed
condition|)
block|{
name|ClassAssignmentDetails
name|x
init|=
name|after
decl_stmt|;
name|after
operator|=
name|before
expr_stmt|;
name|before
operator|=
name|x
expr_stmt|;
block|}
name|ClassAssignmentDetails
name|ca
init|=
operator|(
name|after
operator|==
literal|null
condition|?
name|before
else|:
name|after
operator|)
decl_stmt|;
name|TableCellChange
name|date
init|=
operator|new
name|TableCellChange
argument_list|(
name|before
operator|==
literal|null
operator|||
name|before
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|TableCellInterface
argument_list|(
name|before
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|before
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternPreference
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|after
operator|==
literal|null
operator|||
name|after
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|TableCellInterface
argument_list|(
name|after
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|after
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternPreference
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TableCellChange
name|time
init|=
operator|new
name|TableCellChange
argument_list|(
name|before
operator|==
literal|null
operator|||
name|before
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|TableInterface
operator|.
name|TableCellTime
argument_list|(
name|before
operator|.
name|getTime
argument_list|()
operator|.
name|getDaysName
argument_list|()
operator|+
literal|" "
operator|+
name|before
operator|.
name|getTime
argument_list|()
operator|.
name|getStartTime
argument_list|()
operator|+
literal|" - "
operator|+
name|before
operator|.
name|getTime
argument_list|()
operator|.
name|getEndTime
argument_list|()
argument_list|)
operator|.
name|setId
argument_list|(
name|before
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
operator|+
literal|","
operator|+
name|before
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
operator|+
literal|","
operator|+
name|before
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|before
operator|.
name|getTime
argument_list|()
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|after
operator|==
literal|null
operator|||
name|after
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|TableInterface
operator|.
name|TableCellTime
argument_list|(
name|after
operator|.
name|getTime
argument_list|()
operator|.
name|getDaysName
argument_list|()
operator|+
literal|" "
operator|+
name|after
operator|.
name|getTime
argument_list|()
operator|.
name|getStartTime
argument_list|()
operator|+
literal|" - "
operator|+
name|after
operator|.
name|getTime
argument_list|()
operator|.
name|getEndTime
argument_list|()
argument_list|)
operator|.
name|setId
argument_list|(
name|after
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
operator|+
literal|","
operator|+
name|after
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
operator|+
literal|","
operator|+
name|after
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|after
operator|.
name|getTime
argument_list|()
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|link
init|=
literal|"id="
operator|+
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
decl_stmt|;
if|if
condition|(
name|before
operator|!=
literal|null
condition|)
name|link
operator|+=
literal|"&days="
operator|+
name|before
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
operator|+
literal|"&slot="
operator|+
name|before
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
operator|+
literal|"&pid="
operator|+
name|before
operator|.
name|getTime
argument_list|()
operator|.
name|getPatternId
argument_list|()
operator|+
literal|"&did="
operator|+
name|before
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternId
argument_list|()
expr_stmt|;
name|TableCellChange
name|room
init|=
operator|new
name|TableCellChange
argument_list|()
decl_stmt|;
if|if
condition|(
name|before
operator|!=
literal|null
operator|&&
name|before
operator|.
name|getRoom
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|TableCellRooms
name|beforeRooms
init|=
operator|new
name|TableCellRooms
argument_list|()
decl_stmt|;
name|String
name|rid
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|before
operator|.
name|getRoom
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|rid
operator|+=
operator|(
name|i
operator|>
literal|0
condition|?
literal|","
else|:
literal|""
operator|)
operator|+
name|before
operator|.
name|getRoom
argument_list|()
index|[
name|i
index|]
operator|.
name|getId
argument_list|()
expr_stmt|;
name|beforeRooms
operator|.
name|add
argument_list|(
name|before
operator|.
name|getRoom
argument_list|()
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|before
operator|.
name|getRoom
argument_list|()
index|[
name|i
index|]
operator|.
name|getColor
argument_list|()
argument_list|,
name|before
operator|.
name|getRoom
argument_list|()
index|[
name|i
index|]
operator|.
name|getId
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|int2string
argument_list|(
name|before
operator|.
name|getRoom
argument_list|()
index|[
name|i
index|]
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|room
operator|.
name|setFirst
argument_list|(
name|beforeRooms
argument_list|)
expr_stmt|;
name|link
operator|+=
literal|"&room="
operator|+
name|rid
expr_stmt|;
if|if
condition|(
name|before
operator|.
name|getRoom
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|&&
name|after
operator|==
literal|null
condition|)
name|room
operator|.
name|setSecond
argument_list|(
operator|new
name|TableCellRooms
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|after
operator|!=
literal|null
operator|&&
name|after
operator|.
name|getRoom
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|TableCellRooms
name|afterRooms
init|=
operator|new
name|TableCellRooms
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|after
operator|.
name|getRoom
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|afterRooms
operator|.
name|add
argument_list|(
name|after
operator|.
name|getRoom
argument_list|()
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|after
operator|.
name|getRoom
argument_list|()
index|[
name|i
index|]
operator|.
name|getColor
argument_list|()
argument_list|,
name|after
operator|.
name|getRoom
argument_list|()
index|[
name|i
index|]
operator|.
name|getId
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|int2string
argument_list|(
name|after
operator|.
name|getRoom
argument_list|()
index|[
name|i
index|]
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|room
operator|.
name|setSecond
argument_list|(
name|afterRooms
argument_list|)
expr_stmt|;
if|if
condition|(
name|after
operator|.
name|getRoom
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|&&
name|before
operator|==
literal|null
condition|)
name|room
operator|.
name|setFirst
argument_list|(
operator|new
name|TableCellRooms
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TableInterface
operator|.
name|TableCellItems
name|instructor
init|=
operator|new
name|TableInterface
operator|.
name|TableCellItems
argument_list|()
decl_stmt|;
if|if
condition|(
name|ca
operator|.
name|getInstructor
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ca
operator|.
name|getInstructor
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|instructor
operator|.
name|add
argument_list|(
name|ca
operator|.
name|getInstructor
argument_list|()
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|ca
operator|.
name|getInstructor
argument_list|()
index|[
name|i
index|]
operator|.
name|getColor
argument_list|()
argument_list|,
name|ca
operator|.
name|getInstructor
argument_list|()
index|[
name|i
index|]
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|AssignmentPreferenceInfo
name|bInf
init|=
operator|(
name|before
operator|==
literal|null
condition|?
literal|null
else|:
name|before
operator|.
name|getInfo
argument_list|()
operator|)
decl_stmt|;
name|AssignmentPreferenceInfo
name|aInf
init|=
operator|(
name|after
operator|==
literal|null
condition|?
literal|null
else|:
name|after
operator|.
name|getInfo
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|aInf
operator|==
literal|null
condition|)
name|aInf
operator|=
operator|new
name|AssignmentPreferenceInfo
argument_list|()
expr_stmt|;
if|if
condition|(
name|bInf
operator|==
literal|null
condition|)
name|bInf
operator|=
operator|new
name|AssignmentPreferenceInfo
argument_list|()
expr_stmt|;
name|TableCellMulti
name|studentConfs
init|=
operator|new
name|TableCellMulti
argument_list|()
decl_stmt|;
name|studentConfs
operator|.
name|add
argument_list|(
name|dispNumber
argument_list|(
name|aInf
operator|.
name|getNrStudentConflicts
argument_list|()
operator|-
name|bInf
operator|.
name|getNrStudentConflicts
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|aInf
operator|.
name|getNrCommitedStudentConflicts
argument_list|()
operator|-
name|bInf
operator|.
name|getNrCommitedStudentConflicts
argument_list|()
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|studentConfs
operator|.
name|getNrChunks
argument_list|()
operator|<=
literal|1
condition|)
name|studentConfs
operator|.
name|add
argument_list|(
literal|" ("
argument_list|)
expr_stmt|;
else|else
name|studentConfs
operator|.
name|add
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|studentConfs
operator|.
name|add
argument_list|(
name|dispNumber
argument_list|(
name|aInf
operator|.
name|getNrCommitedStudentConflicts
argument_list|()
operator|-
name|bInf
operator|.
name|getNrCommitedStudentConflicts
argument_list|()
argument_list|)
operator|.
name|setFormattedValue
argument_list|(
literal|"c"
operator|+
operator|(
name|aInf
operator|.
name|getNrCommitedStudentConflicts
argument_list|()
operator|-
name|bInf
operator|.
name|getNrCommitedStudentConflicts
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|aInf
operator|.
name|getNrDistanceStudentConflicts
argument_list|()
operator|-
name|bInf
operator|.
name|getNrDistanceStudentConflicts
argument_list|()
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|studentConfs
operator|.
name|getNrChunks
argument_list|()
operator|<=
literal|1
condition|)
name|studentConfs
operator|.
name|add
argument_list|(
literal|" ("
argument_list|)
expr_stmt|;
else|else
name|studentConfs
operator|.
name|add
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|studentConfs
operator|.
name|add
argument_list|(
name|dispNumber
argument_list|(
name|aInf
operator|.
name|getNrDistanceStudentConflicts
argument_list|()
operator|-
name|bInf
operator|.
name|getNrDistanceStudentConflicts
argument_list|()
argument_list|)
operator|.
name|setFormattedValue
argument_list|(
literal|"d"
operator|+
operator|(
name|aInf
operator|.
name|getNrDistanceStudentConflicts
argument_list|()
operator|-
name|bInf
operator|.
name|getNrDistanceStudentConflicts
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|aInf
operator|.
name|getNrHardStudentConflicts
argument_list|()
operator|-
name|bInf
operator|.
name|getNrHardStudentConflicts
argument_list|()
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|studentConfs
operator|.
name|getNrChunks
argument_list|()
operator|<=
literal|1
condition|)
name|studentConfs
operator|.
name|add
argument_list|(
literal|" ("
argument_list|)
expr_stmt|;
else|else
name|studentConfs
operator|.
name|add
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|studentConfs
operator|.
name|add
argument_list|(
name|dispNumber
argument_list|(
name|aInf
operator|.
name|getNrHardStudentConflicts
argument_list|()
operator|-
name|bInf
operator|.
name|getNrHardStudentConflicts
argument_list|()
argument_list|)
operator|.
name|setFormattedValue
argument_list|(
literal|"h"
operator|+
operator|(
name|aInf
operator|.
name|getNrHardStudentConflicts
argument_list|()
operator|-
name|bInf
operator|.
name|getNrHardStudentConflicts
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|studentConfs
operator|.
name|getNrChunks
argument_list|()
operator|>
literal|1
condition|)
name|studentConfs
operator|.
name|add
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|simple
condition|)
name|response
operator|.
name|addRow
argument_list|(
operator|new
name|TableRowInterface
argument_list|(
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|,
literal|"gwt.jsp?page=suggestions&menu=hide&"
operator|+
name|link
argument_list|,
name|MESSAGES
operator|.
name|dialogSuggestions
argument_list|()
argument_list|,
operator|new
name|TableInterface
operator|.
name|TableCellClassName
argument_list|(
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|date
argument_list|,
name|time
argument_list|,
name|room
argument_list|,
name|instructor
argument_list|,
name|studentConfs
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|response
operator|.
name|addRow
argument_list|(
operator|new
name|TableRowInterface
argument_list|(
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|,
literal|"gwt.jsp?page=suggestions&menu=hide&"
operator|+
name|link
argument_list|,
name|MESSAGES
operator|.
name|dialogSuggestions
argument_list|()
argument_list|,
operator|new
name|TableInterface
operator|.
name|TableCellClassName
argument_list|(
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|date
argument_list|,
name|time
argument_list|,
name|room
argument_list|,
name|instructor
argument_list|,
name|studentConfs
argument_list|,
name|dispNumber
argument_list|(
name|aInf
operator|.
name|getTimePreference
argument_list|()
operator|-
name|bInf
operator|.
name|getTimePreference
argument_list|()
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|aInf
operator|.
name|sumRoomPreference
argument_list|()
operator|-
name|bInf
operator|.
name|sumRoomPreference
argument_list|()
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|aInf
operator|.
name|getGroupConstraintPref
argument_list|()
operator|-
name|bInf
operator|.
name|getGroupConstraintPref
argument_list|()
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|aInf
operator|.
name|getBtbInstructorPreference
argument_list|()
operator|-
name|bInf
operator|.
name|getBtbInstructorPreference
argument_list|()
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|aInf
operator|.
name|getUselessHalfHours
argument_list|()
operator|-
name|bInf
operator|.
name|getUselessHalfHours
argument_list|()
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|aInf
operator|.
name|getTooBigRoomPreference
argument_list|()
operator|-
name|bInf
operator|.
name|getTooBigRoomPreference
argument_list|()
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|aInf
operator|.
name|getDeptBalancPenalty
argument_list|()
operator|-
name|bInf
operator|.
name|getDeptBalancPenalty
argument_list|()
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|aInf
operator|.
name|getSpreadPenalty
argument_list|()
operator|-
name|bInf
operator|.
name|getSpreadPenalty
argument_list|()
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|aInf
operator|.
name|getPerturbationPenalty
argument_list|()
operator|-
name|bInf
operator|.
name|getPerturbationPenalty
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|simple
condition|)
name|response
operator|.
name|setHeader
argument_list|(
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colClass
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colDate
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colTime
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colRoom
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colInstructor
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colNrStudentConflicts
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|response
operator|.
name|setHeader
argument_list|(
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colClass
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colDate
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colTime
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colRoom
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colInstructor
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colShortStudentConflicts
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colShortTimePref
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colShortRoomPref
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colShortDistPref
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colShortInstructorBtbPref
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colShortUselessHalfHours
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colShortTooBigRooms
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colShortDepartmentBalance
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colShortSameSubpartBalance
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colShortPerturbations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|SolverPageBackend
operator|.
name|fillSolverWarnings
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|SolverType
operator|.
name|COURSE
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|context
argument_list|,
literal|"gwt.jsp?page=solutionChanges"
argument_list|,
name|MESSAGES
operator|.
name|pageSolutionChanges
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|TimeGridShowCrosslists
operator|.
name|isTrue
argument_list|()
condition|)
name|addCrosslistedNames
argument_list|(
name|response
argument_list|,
name|ApplicationProperty
operator|.
name|SolverShowClassSufix
operator|.
name|isTrue
argument_list|()
argument_list|,
name|ApplicationProperty
operator|.
name|SolverShowConfiguratioName
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
specifier|public
name|TableCellInterface
name|dispNumber
parameter_list|(
name|int
name|value
parameter_list|)
block|{
return|return
operator|new
name|TableCellInterface
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|value
argument_list|,
name|value
operator|==
literal|0
condition|?
literal|""
else|:
name|value
operator|<=
literal|0
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
else|:
literal|"+"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
operator|.
name|setColor
argument_list|(
name|value
operator|<
literal|0
condition|?
literal|"green"
else|:
name|value
operator|>
literal|0
condition|?
literal|"red"
else|:
literal|null
argument_list|)
return|;
block|}
specifier|public
name|TableCellInterface
name|dispNumber
parameter_list|(
name|double
name|value
parameter_list|)
block|{
return|return
operator|new
name|TableCellInterface
argument_list|<
name|Double
argument_list|>
argument_list|(
name|value
argument_list|,
name|Math
operator|.
name|round
argument_list|(
literal|1000.0
operator|*
name|value
argument_list|)
operator|==
literal|0.0
condition|?
literal|""
else|:
operator|(
name|value
operator|>=
literal|0.0005
condition|?
literal|"+"
else|:
literal|""
operator|)
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|value
argument_list|)
argument_list|)
operator|.
name|setColor
argument_list|(
name|value
operator|<
literal|0
condition|?
literal|"green"
else|:
name|value
operator|>
literal|0
condition|?
literal|"red"
else|:
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|addCrosslistedNames
parameter_list|(
name|TableInterface
name|table
parameter_list|,
name|boolean
name|showClassSuffix
parameter_list|,
name|boolean
name|showConfigNames
parameter_list|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|TableInterface
operator|.
name|TableRowInterface
argument_list|>
name|id2row
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|TableInterface
operator|.
name|TableRowInterface
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TableInterface
operator|.
name|TableRowInterface
name|row
range|:
name|table
operator|.
name|getRows
argument_list|()
control|)
block|{
if|if
condition|(
name|row
operator|.
name|hasId
argument_list|()
condition|)
name|id2row
operator|.
name|put
argument_list|(
name|row
operator|.
name|getId
argument_list|()
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|id2row
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
if|if
condition|(
name|id2row
operator|.
name|size
argument_list|()
operator|<=
literal|1000
condition|)
block|{
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c, co from Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co where "
operator|+
literal|"co.isControl = false and c.uniqueId in :classIds order by co.subjectAreaAbbv, co.courseNbr"
argument_list|)
operator|.
name|setParameterList
argument_list|(
literal|"classIds"
argument_list|,
name|id2row
operator|.
name|keySet
argument_list|()
argument_list|,
name|LongType
operator|.
name|INSTANCE
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|CourseOffering
name|course
init|=
operator|(
name|CourseOffering
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|TableInterface
operator|.
name|TableRowInterface
name|row
init|=
name|id2row
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|!=
literal|null
condition|)
operator|(
operator|(
name|TableInterface
operator|.
name|TableCellClassName
operator|)
name|row
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|addAlternative
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|course
argument_list|,
name|showClassSuffix
argument_list|,
name|showConfigNames
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
for|for
control|(
name|Long
name|id
range|:
name|id2row
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|ids
operator|.
name|size
argument_list|()
operator|==
literal|1000
condition|)
block|{
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c, co from Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co where "
operator|+
literal|"co.isControl = false and c.uniqueId in :classIds order by co.subjectAreaAbbv, co.courseNbr"
argument_list|)
operator|.
name|setParameterList
argument_list|(
literal|"classIds"
argument_list|,
name|ids
argument_list|,
name|LongType
operator|.
name|INSTANCE
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|CourseOffering
name|course
init|=
operator|(
name|CourseOffering
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|TableInterface
operator|.
name|TableRowInterface
name|row
init|=
name|id2row
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|!=
literal|null
condition|)
operator|(
operator|(
name|TableInterface
operator|.
name|TableCellClassName
operator|)
name|row
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|addAlternative
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|course
argument_list|,
name|showClassSuffix
argument_list|,
name|showConfigNames
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ids
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|ids
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c, co from Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co where "
operator|+
literal|"co.isControl = false and c.uniqueId in :classIds order by co.subjectAreaAbbv, co.courseNbr"
argument_list|)
operator|.
name|setParameterList
argument_list|(
literal|"classIds"
argument_list|,
name|ids
argument_list|,
name|LongType
operator|.
name|INSTANCE
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|CourseOffering
name|course
init|=
operator|(
name|CourseOffering
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|TableInterface
operator|.
name|TableRowInterface
name|row
init|=
name|id2row
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|!=
literal|null
condition|)
operator|(
operator|(
name|TableInterface
operator|.
name|TableCellClassName
operator|)
name|row
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|addAlternative
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|course
argument_list|,
name|showClassSuffix
argument_list|,
name|showConfigNames
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

