begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TimetableGridInterface
operator|.
name|TimetableGridBackground
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TimetableGridInterface
operator|.
name|TimetableGridCell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TimetableGridInterface
operator|.
name|TimetableGridModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|AssignmentPreferenceInfo
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|TimetableGridHelper
block|{
specifier|protected
specifier|static
name|GwtMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|GwtConstants
name|CONST
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|ResourceType
block|{
name|ROOM
block|,
name|INSTRUCTOR
block|,
name|DEPARTMENT
block|,
name|CURRICULUM
block|,
name|SUBJECT_AREA
block|,
name|STUDENT_GROUP
block|, 	}
specifier|public
specifier|static
enum|enum
name|BgMode
block|{
name|None
block|,
name|TimePref
block|,
name|RoomPref
block|,
name|StudentConf
block|,
name|InstructorBtbPref
block|,
name|DistributionConstPref
block|,
name|Perturbations
block|,
name|PerturbationPenalty
block|,
name|HardConflicts
block|,
name|DepartmentalBalancing
block|,
name|TooBigRooms
block|,
name|StudentGroups
block|,
name|InstructionalType
block|, 	}
specifier|public
specifier|static
enum|enum
name|OrderBy
block|{
name|NameAsc
block|,
name|NameDesc
block|,
name|SizeAsc
block|,
name|SizeDesc
block|,
name|TypeAsc
block|,
name|TypeDesc
block|,
name|UtilizationAsc
block|,
name|UtilizationDesc
block|, 	}
specifier|public
specifier|static
enum|enum
name|DisplayMode
block|{
name|InRow
block|,
name|PerWeekHorizontal
block|,
name|PerWeekVertical
block|,
name|WeekByWeekHorizontal
block|, 	}
specifier|public
specifier|static
name|String
name|sBgColorEmpty
init|=
literal|"rgb(255,255,255)"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sBgColorRequired
init|=
literal|"rgb(80,80,200)"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sBgColorStronglyPreferred
init|=
literal|"rgb(40,180,60)"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sBgColorPreferred
init|=
literal|"rgb(170,240,60)"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sBgColorNeutral
init|=
literal|"rgb(240,240,240)"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sBgColorDiscouraged
init|=
literal|"rgb(240,210,60)"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sBgColorStronglyDiscouraged
init|=
literal|"rgb(240,120,60)"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sBgColorProhibited
init|=
literal|"rgb(220,50,40)"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sBgColorNotAvailable
init|=
literal|"rgb(200,200,200)"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sBgColorNotAvailableButAssigned
init|=
name|sBgColorProhibited
decl_stmt|;
specifier|public
specifier|static
name|String
name|pref2color
parameter_list|(
name|String
name|pref
parameter_list|)
block|{
return|return
name|PreferenceLevel
operator|.
name|prolog2bgColor
argument_list|(
name|pref
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|pref2color
parameter_list|(
name|int
name|pref
parameter_list|)
block|{
return|return
name|PreferenceLevel
operator|.
name|prolog2bgColor
argument_list|(
name|PreferenceLevel
operator|.
name|int2prolog
argument_list|(
name|pref
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|conflicts2color
parameter_list|(
name|int
name|nrConflicts
parameter_list|)
block|{
if|if
condition|(
name|nrConflicts
operator|>
literal|15
condition|)
name|nrConflicts
operator|=
literal|15
expr_stmt|;
name|String
name|color
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|nrConflicts
operator|==
literal|0
condition|)
block|{
name|color
operator|=
literal|"rgb(240,240,240)"
expr_stmt|;
block|}
if|else if
condition|(
name|nrConflicts
operator|<
literal|5
condition|)
block|{
name|color
operator|=
literal|"rgb(240,"
operator|+
operator|(
literal|240
operator|-
operator|(
literal|30
operator|*
name|nrConflicts
operator|/
literal|5
operator|)
operator|)
operator|+
literal|","
operator|+
operator|(
literal|240
operator|-
operator|(
literal|180
operator|*
name|nrConflicts
operator|/
literal|5
operator|)
operator|)
operator|+
literal|")"
expr_stmt|;
block|}
if|else if
condition|(
name|nrConflicts
operator|<
literal|10
condition|)
block|{
name|color
operator|=
literal|"rgb(240,"
operator|+
operator|(
literal|210
operator|-
operator|(
literal|90
operator|*
operator|(
name|nrConflicts
operator|-
literal|5
operator|)
operator|/
literal|5
operator|)
operator|)
operator|+
literal|",60)"
expr_stmt|;
block|}
else|else
block|{
name|color
operator|=
literal|"rgb("
operator|+
operator|(
literal|240
operator|-
operator|(
literal|20
operator|*
operator|(
name|nrConflicts
operator|-
literal|10
operator|)
operator|/
literal|5
operator|)
operator|)
operator|+
literal|","
operator|+
operator|(
literal|120
operator|-
operator|(
literal|70
operator|*
operator|(
name|nrConflicts
operator|-
literal|10
operator|)
operator|/
literal|5
operator|)
operator|)
operator|+
literal|","
operator|+
operator|(
literal|60
operator|-
operator|(
literal|20
operator|*
operator|(
name|nrConflicts
operator|-
literal|10
operator|)
operator|/
literal|5
operator|)
operator|)
operator|+
literal|")"
expr_stmt|;
block|}
return|return
name|color
return|;
block|}
specifier|public
specifier|static
name|String
name|conflicts2colorFast
parameter_list|(
name|int
name|nrConflicts
parameter_list|)
block|{
if|if
condition|(
name|nrConflicts
operator|==
literal|0
condition|)
return|return
literal|"rgb(240,240,240)"
return|;
if|if
condition|(
name|nrConflicts
operator|==
literal|1
condition|)
return|return
literal|"rgb(240,210,60)"
return|;
if|if
condition|(
name|nrConflicts
operator|==
literal|2
condition|)
return|return
literal|"rgb(240,120,60)"
return|;
return|return
literal|"rgb(220,50,40)"
return|;
block|}
specifier|public
specifier|static
name|String
name|hardConflicts2pref
parameter_list|(
name|AssignmentPreferenceInfo
name|assignmentInfo
parameter_list|)
block|{
if|if
condition|(
name|assignmentInfo
operator|==
literal|null
condition|)
return|return
name|PreferenceLevel
operator|.
name|sNeutral
return|;
name|String
name|pref
init|=
name|PreferenceLevel
operator|.
name|sNeutral
decl_stmt|;
if|if
condition|(
name|assignmentInfo
operator|.
name|getNrRoomLocations
argument_list|()
operator|==
literal|1
operator|&&
name|assignmentInfo
operator|.
name|getNrTimeLocations
argument_list|()
operator|==
literal|1
condition|)
name|pref
operator|=
name|PreferenceLevel
operator|.
name|sRequired
expr_stmt|;
if|else if
condition|(
name|assignmentInfo
operator|.
name|getNrSameTimePlacementsNoConf
argument_list|()
operator|>
literal|0
condition|)
name|pref
operator|=
name|PreferenceLevel
operator|.
name|sStronglyPreferred
expr_stmt|;
if|else if
condition|(
name|assignmentInfo
operator|.
name|getNrTimeLocations
argument_list|()
operator|>
literal|1
operator|&&
name|assignmentInfo
operator|.
name|getNrSameRoomPlacementsNoConf
argument_list|()
operator|>
literal|0
condition|)
name|pref
operator|=
name|PreferenceLevel
operator|.
name|sProhibited
expr_stmt|;
if|else if
condition|(
name|assignmentInfo
operator|.
name|getNrTimeLocations
argument_list|()
operator|>
literal|1
condition|)
name|pref
operator|=
name|PreferenceLevel
operator|.
name|sNeutral
expr_stmt|;
if|else if
condition|(
name|assignmentInfo
operator|.
name|getNrSameRoomPlacementsNoConf
argument_list|()
operator|>
literal|0
condition|)
name|pref
operator|=
name|PreferenceLevel
operator|.
name|sDiscouraged
expr_stmt|;
if|else if
condition|(
name|assignmentInfo
operator|.
name|getNrRoomLocations
argument_list|()
operator|>
literal|1
condition|)
name|pref
operator|=
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
expr_stmt|;
else|else
name|pref
operator|=
name|PreferenceLevel
operator|.
name|sRequired
expr_stmt|;
return|return
name|pref
return|;
block|}
specifier|private
specifier|static
name|int
name|gradient
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|v1
parameter_list|,
name|int
name|max
parameter_list|,
name|int
name|v2
parameter_list|,
name|int
name|value
parameter_list|)
block|{
return|return
operator|(
name|value
operator|<=
name|min
condition|?
name|v1
else|:
name|value
operator|>=
name|max
condition|?
name|v2
else|:
name|v1
operator|+
operator|(
name|v2
operator|-
name|v1
operator|)
operator|*
operator|(
name|value
operator|-
name|min
operator|)
operator|/
operator|(
name|max
operator|-
name|min
operator|)
operator|)
return|;
block|}
specifier|public
specifier|static
name|String
name|percentage2color
parameter_list|(
name|int
name|p
parameter_list|)
block|{
name|int
index|[]
name|points
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|20
block|,
literal|40
block|,
literal|60
block|,
literal|80
block|,
literal|100
block|}
decl_stmt|;
name|int
index|[]
name|r
init|=
operator|new
name|int
index|[]
block|{
literal|220
block|,
literal|240
block|,
literal|240
block|,
literal|240
block|,
literal|70
block|,
literal|30
block|}
decl_stmt|;
name|int
index|[]
name|g
init|=
operator|new
name|int
index|[]
block|{
literal|50
block|,
literal|120
block|,
literal|210
block|,
literal|240
block|,
literal|230
block|,
literal|160
block|}
decl_stmt|;
name|int
index|[]
name|b
init|=
operator|new
name|int
index|[]
block|{
literal|40
block|,
literal|60
block|,
literal|60
block|,
literal|240
block|,
literal|30
block|,
literal|60
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|points
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|p
operator|<=
name|points
index|[
name|i
index|]
condition|)
return|return
literal|"rgb("
operator|+
name|gradient
argument_list|(
name|points
index|[
name|i
operator|-
literal|1
index|]
argument_list|,
name|r
index|[
name|i
operator|-
literal|1
index|]
argument_list|,
name|points
index|[
name|i
index|]
argument_list|,
name|r
index|[
name|i
index|]
argument_list|,
name|p
argument_list|)
operator|+
literal|","
operator|+
name|gradient
argument_list|(
name|points
index|[
name|i
operator|-
literal|1
index|]
argument_list|,
name|g
index|[
name|i
operator|-
literal|1
index|]
argument_list|,
name|points
index|[
name|i
index|]
argument_list|,
name|g
index|[
name|i
index|]
argument_list|,
name|p
argument_list|)
operator|+
literal|","
operator|+
name|gradient
argument_list|(
name|points
index|[
name|i
operator|-
literal|1
index|]
argument_list|,
name|b
index|[
name|i
operator|-
literal|1
index|]
argument_list|,
name|points
index|[
name|i
index|]
argument_list|,
name|b
index|[
name|i
index|]
argument_list|,
name|p
argument_list|)
operator|+
literal|")"
return|;
block|}
return|return
literal|"rgb("
operator|+
name|r
index|[
name|points
operator|.
name|length
operator|-
literal|1
index|]
operator|+
literal|","
operator|+
name|g
index|[
name|points
operator|.
name|length
operator|-
literal|1
index|]
operator|+
literal|","
operator|+
name|b
index|[
name|points
operator|.
name|length
operator|-
literal|1
index|]
operator|+
literal|")"
return|;
block|}
specifier|public
specifier|static
name|String
name|pattern2string
parameter_list|(
name|BitSet
name|pattern
parameter_list|)
block|{
name|StringBuffer
name|ret
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pattern
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
name|ret
operator|.
name|append
argument_list|(
name|pattern
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|?
literal|'1'
else|:
literal|'0'
argument_list|)
expr_stmt|;
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
class|class
name|Combine
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Iterable
argument_list|<
name|T
argument_list|>
block|{
specifier|private
name|Iterable
argument_list|<
name|T
argument_list|>
index|[]
name|iItems
decl_stmt|;
specifier|public
name|Combine
parameter_list|(
name|Iterable
argument_list|<
name|T
argument_list|>
modifier|...
name|items
parameter_list|)
block|{
name|iItems
operator|=
name|items
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|CombinedIterator
argument_list|<
name|T
argument_list|>
argument_list|(
name|iItems
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|CombinedIterator
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|T
argument_list|>
block|{
specifier|private
name|Iterable
argument_list|<
name|T
argument_list|>
index|[]
name|iItems
decl_stmt|;
specifier|private
name|Iterator
argument_list|<
name|T
argument_list|>
name|iIterator
decl_stmt|;
specifier|private
name|int
name|iIdx
decl_stmt|;
specifier|public
name|CombinedIterator
parameter_list|(
name|Iterable
argument_list|<
name|T
argument_list|>
modifier|...
name|items
parameter_list|)
block|{
name|iItems
operator|=
name|items
expr_stmt|;
name|iIdx
operator|=
operator|-
literal|1
expr_stmt|;
name|iIterator
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|iIterator
operator|!=
literal|null
operator|&&
name|iIterator
operator|.
name|hasNext
argument_list|()
condition|)
return|return
literal|true
return|;
while|while
condition|(
literal|true
condition|)
block|{
name|iIdx
operator|++
expr_stmt|;
if|if
condition|(
name|iIdx
operator|>=
name|iItems
operator|.
name|length
condition|)
return|return
literal|false
return|;
name|iIterator
operator|=
name|iItems
index|[
name|iIdx
index|]
operator|.
name|iterator
argument_list|()
expr_stmt|;
if|if
condition|(
name|iIterator
operator|.
name|hasNext
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|T
name|next
parameter_list|()
block|{
return|return
name|iIterator
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|iIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|setCell
parameter_list|(
name|TimetableGridCell
index|[]
index|[]
index|[]
name|data
parameter_list|,
name|int
name|day
parameter_list|,
name|int
name|slot
parameter_list|,
name|int
name|idx
parameter_list|,
name|TimetableGridCell
name|cell
parameter_list|)
block|{
if|if
condition|(
name|data
index|[
name|day
index|]
index|[
name|slot
index|]
operator|==
literal|null
condition|)
block|{
name|data
index|[
name|day
index|]
index|[
name|slot
index|]
operator|=
operator|new
name|TimetableGridCell
index|[
name|idx
operator|+
literal|1
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|idx
condition|;
name|i
operator|++
control|)
name|data
index|[
name|day
index|]
index|[
name|slot
index|]
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
name|data
index|[
name|day
index|]
index|[
name|slot
index|]
index|[
name|idx
index|]
operator|=
name|cell
expr_stmt|;
block|}
if|else if
condition|(
name|data
index|[
name|day
index|]
index|[
name|slot
index|]
operator|.
name|length
operator|<=
name|idx
condition|)
block|{
name|TimetableGridCell
index|[]
name|old
init|=
name|data
index|[
name|day
index|]
index|[
name|slot
index|]
decl_stmt|;
name|data
index|[
name|day
index|]
index|[
name|slot
index|]
operator|=
operator|new
name|TimetableGridCell
index|[
name|idx
operator|+
literal|1
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|idx
condition|;
name|i
operator|++
control|)
name|data
index|[
name|day
index|]
index|[
name|slot
index|]
index|[
name|i
index|]
operator|=
operator|(
name|i
operator|<
name|old
operator|.
name|length
condition|?
name|old
index|[
name|i
index|]
else|:
literal|null
operator|)
expr_stmt|;
name|data
index|[
name|day
index|]
index|[
name|slot
index|]
index|[
name|idx
index|]
operator|=
name|cell
expr_stmt|;
block|}
else|else
block|{
name|data
index|[
name|day
index|]
index|[
name|slot
index|]
index|[
name|idx
index|]
operator|=
name|cell
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|TimetableGridCell
name|getCell
parameter_list|(
name|TimetableGridCell
index|[]
index|[]
index|[]
name|data
parameter_list|,
name|int
name|day
parameter_list|,
name|int
name|slot
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
if|if
condition|(
name|data
index|[
name|day
index|]
index|[
name|slot
index|]
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|data
index|[
name|day
index|]
index|[
name|slot
index|]
operator|.
name|length
operator|<=
name|idx
condition|)
return|return
literal|null
return|;
return|return
name|data
index|[
name|day
index|]
index|[
name|slot
index|]
index|[
name|idx
index|]
return|;
block|}
specifier|private
specifier|static
name|int
name|getIndex
parameter_list|(
name|TimetableGridCell
index|[]
index|[]
index|[]
name|data
parameter_list|,
name|int
name|day
parameter_list|,
name|int
name|slot
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|idx
label|:
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
condition|;
name|idx
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|getCell
argument_list|(
name|data
argument_list|,
name|day
argument_list|,
name|slot
operator|+
name|i
argument_list|,
name|idx
argument_list|)
operator|!=
literal|null
condition|)
continue|continue
name|idx
continue|;
return|return
name|idx
return|;
block|}
block|}
specifier|private
specifier|static
name|void
name|addCell
parameter_list|(
name|TimetableGridCell
index|[]
index|[]
index|[]
name|data
parameter_list|,
name|int
name|day
parameter_list|,
name|int
name|slot
parameter_list|,
name|int
name|length
parameter_list|,
name|TimetableGridCell
name|cell
parameter_list|)
block|{
name|int
name|idx
init|=
name|getIndex
argument_list|(
name|data
argument_list|,
name|day
argument_list|,
name|slot
argument_list|,
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
name|setCell
argument_list|(
name|data
argument_list|,
name|day
argument_list|,
name|slot
operator|+
name|i
argument_list|,
name|idx
argument_list|,
name|cell
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|int
name|nrEmptyAbove
parameter_list|(
name|TimetableGridCell
index|[]
index|[]
index|[]
name|data
parameter_list|,
name|int
name|day
parameter_list|,
name|int
name|slot
parameter_list|,
name|int
name|index
parameter_list|,
name|int
name|length
parameter_list|,
name|TimetableGridCell
name|cell
parameter_list|)
block|{
for|for
control|(
name|int
name|idx
init|=
name|index
operator|+
literal|1
init|;
name|idx
operator|<
name|length
condition|;
name|idx
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cell
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|getCell
argument_list|(
name|data
argument_list|,
name|day
argument_list|,
name|slot
operator|+
name|i
argument_list|,
name|idx
argument_list|)
operator|!=
literal|null
condition|)
return|return
name|idx
operator|-
name|index
operator|-
literal|1
return|;
block|}
return|return
name|length
operator|-
name|index
operator|-
literal|1
return|;
block|}
specifier|private
specifier|static
name|int
name|nrCells
parameter_list|(
name|TimetableGridCell
index|[]
index|[]
index|[]
name|data
parameter_list|,
name|int
name|day
parameter_list|,
name|int
name|slot
parameter_list|)
block|{
if|if
condition|(
name|data
index|[
name|day
index|]
index|[
name|slot
index|]
operator|==
literal|null
condition|)
return|return
literal|0
return|;
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
index|[
name|day
index|]
index|[
name|slot
index|]
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|data
index|[
name|day
index|]
index|[
name|slot
index|]
index|[
name|i
index|]
operator|!=
literal|null
condition|)
name|ret
operator|++
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isUselessFirst
parameter_list|(
name|TimetableGridCell
index|[]
index|[]
index|[]
name|data
parameter_list|,
name|int
name|d
parameter_list|,
name|int
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|-
literal|1
operator|<
literal|0
operator|||
name|s
operator|+
literal|6
operator|>=
literal|288
condition|)
return|return
literal|false
return|;
return|return
operator|(
name|nrCells
argument_list|(
name|data
argument_list|,
name|d
argument_list|,
name|s
operator|-
literal|1
argument_list|)
operator|!=
literal|0
operator|&&
name|nrCells
argument_list|(
name|data
argument_list|,
name|d
argument_list|,
name|s
operator|+
literal|0
argument_list|)
operator|==
literal|0
operator|&&
name|nrCells
argument_list|(
name|data
argument_list|,
name|d
argument_list|,
name|s
operator|+
literal|1
argument_list|)
operator|==
literal|0
operator|&&
name|nrCells
argument_list|(
name|data
argument_list|,
name|d
argument_list|,
name|s
operator|+
literal|2
argument_list|)
operator|==
literal|0
operator|&&
name|nrCells
argument_list|(
name|data
argument_list|,
name|d
argument_list|,
name|s
operator|+
literal|3
argument_list|)
operator|==
literal|0
operator|&&
name|nrCells
argument_list|(
name|data
argument_list|,
name|d
argument_list|,
name|s
operator|+
literal|4
argument_list|)
operator|==
literal|0
operator|&&
name|nrCells
argument_list|(
name|data
argument_list|,
name|d
argument_list|,
name|s
operator|+
literal|5
argument_list|)
operator|==
literal|0
operator|&&
name|nrCells
argument_list|(
name|data
argument_list|,
name|d
argument_list|,
name|s
operator|+
literal|6
argument_list|)
operator|!=
literal|0
operator|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isUseless
parameter_list|(
name|TimetableGridCell
index|[]
index|[]
index|[]
name|data
parameter_list|,
name|int
name|d
parameter_list|,
name|int
name|s
parameter_list|)
block|{
return|return
name|isUselessFirst
argument_list|(
name|data
argument_list|,
name|d
argument_list|,
name|s
argument_list|)
operator|||
name|isUselessFirst
argument_list|(
name|data
argument_list|,
name|d
argument_list|,
name|s
operator|-
literal|1
argument_list|)
operator|||
name|isUselessFirst
argument_list|(
name|data
argument_list|,
name|d
argument_list|,
name|s
operator|-
literal|2
argument_list|)
operator|||
name|isUselessFirst
argument_list|(
name|data
argument_list|,
name|d
argument_list|,
name|s
operator|-
literal|3
argument_list|)
operator|||
name|isUselessFirst
argument_list|(
name|data
argument_list|,
name|d
argument_list|,
name|s
operator|-
literal|4
argument_list|)
operator|||
name|isUselessFirst
argument_list|(
name|data
argument_list|,
name|d
argument_list|,
name|s
operator|-
literal|5
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|initBgModeUselessSlots
parameter_list|(
name|TimetableGridModel
name|model
parameter_list|,
name|TimetableGridCell
index|[]
index|[]
index|[]
name|data
parameter_list|)
block|{
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|data
operator|.
name|length
condition|;
name|d
operator|++
control|)
block|{
name|int
name|start
init|=
literal|0
decl_stmt|;
name|Integer
name|lastPref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
literal|288
condition|;
name|s
operator|++
control|)
block|{
name|Integer
name|pref
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|isAvailable
argument_list|(
name|d
argument_list|,
name|s
argument_list|)
condition|)
block|{
name|pref
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|nrCells
argument_list|(
name|data
argument_list|,
name|d
argument_list|,
name|s
argument_list|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|isUseless
argument_list|(
name|data
argument_list|,
name|d
argument_list|,
name|s
argument_list|)
condition|)
name|pref
operator|=
literal|4
expr_stmt|;
switch|switch
condition|(
name|d
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|nrCells
argument_list|(
name|data
argument_list|,
literal|2
argument_list|,
name|s
argument_list|)
operator|!=
literal|0
operator|&&
name|nrCells
argument_list|(
name|data
argument_list|,
literal|4
argument_list|,
name|s
argument_list|)
operator|!=
literal|0
condition|)
name|pref
operator|++
expr_stmt|;
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|nrCells
argument_list|(
name|data
argument_list|,
literal|3
argument_list|,
name|s
argument_list|)
operator|!=
literal|0
condition|)
name|pref
operator|++
expr_stmt|;
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|nrCells
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|s
argument_list|)
operator|!=
literal|0
operator|&&
name|nrCells
argument_list|(
name|data
argument_list|,
literal|4
argument_list|,
name|s
argument_list|)
operator|!=
literal|0
condition|)
name|pref
operator|++
expr_stmt|;
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|nrCells
argument_list|(
name|data
argument_list|,
literal|1
argument_list|,
name|s
argument_list|)
operator|!=
literal|0
condition|)
name|pref
operator|++
expr_stmt|;
break|break;
case|case
literal|4
case|:
if|if
condition|(
name|nrCells
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|s
argument_list|)
operator|!=
literal|0
operator|&&
name|nrCells
argument_list|(
name|data
argument_list|,
literal|2
argument_list|,
name|s
argument_list|)
operator|!=
literal|0
condition|)
name|pref
operator|++
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|lastPref
operator|!=
literal|null
operator|&&
operator|!
name|lastPref
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
block|{
name|TimetableGridBackground
name|bg
init|=
operator|new
name|TimetableGridBackground
argument_list|()
decl_stmt|;
name|bg
operator|.
name|setDay
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|bg
operator|.
name|setSlot
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|bg
operator|.
name|setLength
argument_list|(
name|s
operator|-
name|start
argument_list|)
expr_stmt|;
name|bg
operator|.
name|setAvailable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bg
operator|.
name|setBackground
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastPref
operator|>
literal|4
condition|)
name|bg
operator|.
name|setBackground
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|lastPref
operator|==
literal|4
condition|)
name|bg
operator|.
name|setBackground
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|lastPref
operator|>
literal|0
condition|)
name|bg
operator|.
name|setBackground
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|addBackground
argument_list|(
name|bg
argument_list|)
expr_stmt|;
name|lastPref
operator|=
name|pref
expr_stmt|;
name|start
operator|=
name|s
expr_stmt|;
block|}
if|else if
condition|(
name|lastPref
operator|==
literal|null
operator|&&
name|pref
operator|!=
literal|null
condition|)
block|{
name|lastPref
operator|=
name|pref
expr_stmt|;
name|start
operator|=
name|s
expr_stmt|;
block|}
block|}
if|if
condition|(
name|lastPref
operator|!=
literal|null
condition|)
block|{
name|TimetableGridBackground
name|bg
init|=
operator|new
name|TimetableGridBackground
argument_list|()
decl_stmt|;
name|bg
operator|.
name|setDay
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|bg
operator|.
name|setSlot
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|bg
operator|.
name|setLength
argument_list|(
literal|288
operator|-
name|start
argument_list|)
expr_stmt|;
name|bg
operator|.
name|setAvailable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bg
operator|.
name|setBackground
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastPref
operator|>
literal|4
condition|)
name|bg
operator|.
name|setBackground
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|lastPref
operator|==
literal|4
condition|)
name|bg
operator|.
name|setBackground
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|lastPref
operator|>
literal|0
condition|)
name|bg
operator|.
name|setBackground
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|addBackground
argument_list|(
name|bg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|computeIndexes
parameter_list|(
name|TimetableGridModel
name|model
parameter_list|,
name|TimetableGridContext
name|context
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|model
operator|.
name|getCells
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|getDisplayMode
argument_list|()
operator|==
name|DisplayMode
operator|.
name|WeekByWeekHorizontal
operator|.
name|ordinal
argument_list|()
condition|)
block|{
name|TimetableGridCell
index|[]
index|[]
index|[]
name|weekData
init|=
operator|new
name|TimetableGridCell
index|[
literal|365
index|]
index|[
literal|288
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
literal|365
condition|;
name|d
operator|++
control|)
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
literal|288
condition|;
name|s
operator|++
control|)
name|weekData
index|[
name|d
index|]
index|[
name|s
index|]
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|TimetableGridCell
name|cell
range|:
name|model
operator|.
name|getCells
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
literal|365
condition|;
name|d
operator|++
control|)
block|{
name|int
name|date
init|=
name|d
operator|+
name|model
operator|.
name|getFirstSessionDay
argument_list|()
decl_stmt|;
name|int
name|day
init|=
name|d
operator|%
literal|7
decl_stmt|;
if|if
condition|(
name|day
operator|==
name|cell
operator|.
name|getDay
argument_list|()
operator|&&
name|cell
operator|.
name|hasDate
argument_list|(
name|date
argument_list|)
condition|)
name|addCell
argument_list|(
name|weekData
argument_list|,
name|d
argument_list|,
name|cell
operator|.
name|getSlot
argument_list|()
argument_list|,
name|cell
operator|.
name|getLength
argument_list|()
argument_list|,
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
literal|365
condition|;
name|d
operator|++
control|)
block|{
name|int
name|date
init|=
name|d
operator|+
name|model
operator|.
name|getFirstSessionDay
argument_list|()
decl_stmt|;
name|int
name|length
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
literal|288
condition|;
name|s
operator|++
control|)
if|if
condition|(
name|weekData
index|[
name|d
index|]
index|[
name|s
index|]
operator|!=
literal|null
operator|&&
name|weekData
index|[
name|d
index|]
index|[
name|s
index|]
operator|.
name|length
operator|>
name|length
condition|)
name|length
operator|=
name|weekData
index|[
name|d
index|]
index|[
name|s
index|]
operator|.
name|length
expr_stmt|;
name|int
index|[]
name|maxLines
init|=
operator|new
name|int
index|[
name|length
index|]
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|length
condition|;
name|idx
operator|++
control|)
block|{
name|maxLines
index|[
name|idx
index|]
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
literal|288
condition|;
name|s
operator|++
control|)
block|{
name|TimetableGridCell
name|c
init|=
name|getCell
argument_list|(
name|weekData
argument_list|,
name|d
argument_list|,
name|s
argument_list|,
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
name|maxLines
index|[
name|idx
index|]
operator|<
name|c
operator|.
name|getMinLines
argument_list|(
name|context
operator|.
name|isShowRoom
argument_list|()
argument_list|,
name|context
operator|.
name|isShowInstructor
argument_list|()
argument_list|,
name|context
operator|.
name|isShowTime
argument_list|()
argument_list|,
name|context
operator|.
name|isShowPreference
argument_list|()
argument_list|,
name|context
operator|.
name|isShowDate
argument_list|()
argument_list|)
condition|)
name|maxLines
index|[
name|idx
index|]
operator|=
name|c
operator|.
name|getMinLines
argument_list|(
name|context
operator|.
name|isShowRoom
argument_list|()
argument_list|,
name|context
operator|.
name|isShowInstructor
argument_list|()
argument_list|,
name|context
operator|.
name|isShowTime
argument_list|()
argument_list|,
name|context
operator|.
name|isShowPreference
argument_list|()
argument_list|,
name|context
operator|.
name|isShowDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
literal|288
condition|;
name|s
operator|++
control|)
block|{
name|TimetableGridCell
name|c
init|=
name|getCell
argument_list|(
name|weekData
argument_list|,
name|d
argument_list|,
name|s
argument_list|,
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|setNrLines
argument_list|(
name|date
argument_list|,
name|maxLines
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
name|c
operator|.
name|setIndex
argument_list|(
name|date
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
block|}
name|index
operator|+=
name|maxLines
index|[
name|idx
index|]
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|getResourceType
argument_list|()
operator|<=
literal|1
condition|)
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|length
condition|;
name|idx
operator|++
control|)
block|{
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
literal|288
condition|;
name|s
operator|++
control|)
block|{
name|TimetableGridCell
name|c
init|=
name|getCell
argument_list|(
name|weekData
argument_list|,
name|d
argument_list|,
name|s
argument_list|,
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
name|c
operator|.
name|getSlot
argument_list|()
operator|==
name|s
condition|)
block|{
name|int
name|empty
init|=
name|nrEmptyAbove
argument_list|(
name|weekData
argument_list|,
name|d
argument_list|,
name|s
argument_list|,
name|idx
argument_list|,
name|length
argument_list|,
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|empty
operator|>
literal|0
condition|)
block|{
name|int
name|lines
init|=
name|maxLines
index|[
name|idx
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|empty
condition|;
name|i
operator|++
control|)
name|lines
operator|+=
name|maxLines
index|[
name|idx
operator|+
name|i
index|]
expr_stmt|;
name|c
operator|.
name|setNrLines
argument_list|(
name|date
argument_list|,
name|lines
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|context
operator|.
name|isShowFreeTimes
argument_list|()
condition|)
block|{
name|TimetableGridCell
index|[]
index|[]
index|[]
name|data
init|=
operator|new
name|TimetableGridCell
index|[
literal|7
index|]
index|[
literal|288
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
literal|7
condition|;
name|d
operator|++
control|)
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
literal|288
condition|;
name|s
operator|++
control|)
name|data
index|[
name|d
index|]
index|[
name|s
index|]
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|TimetableGridCell
name|cell
range|:
name|model
operator|.
name|getCells
argument_list|()
control|)
name|addCell
argument_list|(
name|data
argument_list|,
name|cell
operator|.
name|getDay
argument_list|()
argument_list|,
name|cell
operator|.
name|getSlot
argument_list|()
argument_list|,
name|cell
operator|.
name|getLength
argument_list|()
argument_list|,
name|cell
argument_list|)
expr_stmt|;
name|initBgModeUselessSlots
argument_list|(
name|model
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|TimetableGridCell
index|[]
index|[]
index|[]
name|data
init|=
operator|new
name|TimetableGridCell
index|[
literal|7
index|]
index|[
literal|288
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
literal|7
condition|;
name|d
operator|++
control|)
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
literal|288
condition|;
name|s
operator|++
control|)
name|data
index|[
name|d
index|]
index|[
name|s
index|]
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|TimetableGridCell
name|cell
range|:
name|model
operator|.
name|getCells
argument_list|()
control|)
block|{
name|addCell
argument_list|(
name|data
argument_list|,
name|cell
operator|.
name|getDay
argument_list|()
argument_list|,
name|cell
operator|.
name|getSlot
argument_list|()
argument_list|,
name|cell
operator|.
name|getLength
argument_list|()
argument_list|,
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|isVertical
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
literal|7
condition|;
name|d
operator|++
control|)
block|{
name|int
name|length
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
literal|288
condition|;
name|s
operator|++
control|)
if|if
condition|(
name|data
index|[
name|d
index|]
index|[
name|s
index|]
operator|!=
literal|null
operator|&&
name|data
index|[
name|d
index|]
index|[
name|s
index|]
operator|.
name|length
operator|>
name|length
condition|)
name|length
operator|=
name|data
index|[
name|d
index|]
index|[
name|s
index|]
operator|.
name|length
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|length
condition|;
name|idx
operator|++
control|)
block|{
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
literal|288
condition|;
name|s
operator|++
control|)
block|{
name|TimetableGridCell
name|c
init|=
name|getCell
argument_list|(
name|data
argument_list|,
name|d
argument_list|,
name|s
argument_list|,
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|setIndex
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|c
operator|.
name|setNrLines
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|context
operator|.
name|getResourceType
argument_list|()
operator|<=
literal|1
condition|)
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|length
condition|;
name|idx
operator|++
control|)
block|{
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
literal|288
condition|;
name|s
operator|++
control|)
block|{
name|TimetableGridCell
name|c
init|=
name|getCell
argument_list|(
name|data
argument_list|,
name|d
argument_list|,
name|s
argument_list|,
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
name|c
operator|.
name|getSlot
argument_list|()
operator|==
name|s
condition|)
block|{
name|int
name|empty
init|=
name|nrEmptyAbove
argument_list|(
name|data
argument_list|,
name|d
argument_list|,
name|s
argument_list|,
name|idx
argument_list|,
name|length
argument_list|,
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|empty
operator|>
literal|0
condition|)
name|c
operator|.
name|setNrLines
argument_list|(
literal|1
operator|+
name|empty
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
literal|7
condition|;
name|d
operator|++
control|)
block|{
name|int
name|length
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
literal|288
condition|;
name|s
operator|++
control|)
if|if
condition|(
name|data
index|[
name|d
index|]
index|[
name|s
index|]
operator|!=
literal|null
operator|&&
name|data
index|[
name|d
index|]
index|[
name|s
index|]
operator|.
name|length
operator|>
name|length
condition|)
name|length
operator|=
name|data
index|[
name|d
index|]
index|[
name|s
index|]
operator|.
name|length
expr_stmt|;
name|int
index|[]
name|maxLines
init|=
operator|new
name|int
index|[
name|length
index|]
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|length
condition|;
name|idx
operator|++
control|)
block|{
name|maxLines
index|[
name|idx
index|]
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
literal|288
condition|;
name|s
operator|++
control|)
block|{
name|TimetableGridCell
name|c
init|=
name|getCell
argument_list|(
name|data
argument_list|,
name|d
argument_list|,
name|s
argument_list|,
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
name|maxLines
index|[
name|idx
index|]
operator|<
name|c
operator|.
name|getMinLines
argument_list|(
name|context
operator|.
name|isShowRoom
argument_list|()
argument_list|,
name|context
operator|.
name|isShowInstructor
argument_list|()
argument_list|,
name|context
operator|.
name|isShowTime
argument_list|()
argument_list|,
name|context
operator|.
name|isShowPreference
argument_list|()
argument_list|,
name|context
operator|.
name|isShowDate
argument_list|()
argument_list|)
condition|)
name|maxLines
index|[
name|idx
index|]
operator|=
name|c
operator|.
name|getMinLines
argument_list|(
name|context
operator|.
name|isShowRoom
argument_list|()
argument_list|,
name|context
operator|.
name|isShowInstructor
argument_list|()
argument_list|,
name|context
operator|.
name|isShowTime
argument_list|()
argument_list|,
name|context
operator|.
name|isShowPreference
argument_list|()
argument_list|,
name|context
operator|.
name|isShowDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
literal|288
condition|;
name|s
operator|++
control|)
block|{
name|TimetableGridCell
name|c
init|=
name|getCell
argument_list|(
name|data
argument_list|,
name|d
argument_list|,
name|s
argument_list|,
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|setNrLines
argument_list|(
name|maxLines
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
name|c
operator|.
name|setIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
name|index
operator|+=
name|maxLines
index|[
name|idx
index|]
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|getResourceType
argument_list|()
operator|<=
literal|1
condition|)
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|length
condition|;
name|idx
operator|++
control|)
block|{
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
literal|288
condition|;
name|s
operator|++
control|)
block|{
name|TimetableGridCell
name|c
init|=
name|getCell
argument_list|(
name|data
argument_list|,
name|d
argument_list|,
name|s
argument_list|,
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
name|c
operator|.
name|getSlot
argument_list|()
operator|==
name|s
condition|)
block|{
name|int
name|empty
init|=
name|nrEmptyAbove
argument_list|(
name|data
argument_list|,
name|d
argument_list|,
name|s
argument_list|,
name|idx
argument_list|,
name|length
argument_list|,
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|empty
operator|>
literal|0
condition|)
block|{
name|int
name|lines
init|=
name|maxLines
index|[
name|idx
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|empty
condition|;
name|i
operator|++
control|)
name|lines
operator|+=
name|maxLines
index|[
name|idx
operator|+
name|i
index|]
expr_stmt|;
name|c
operator|.
name|setNrLines
argument_list|(
name|lines
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|context
operator|.
name|isShowFreeTimes
argument_list|()
condition|)
name|initBgModeUselessSlots
argument_list|(
name|model
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|getBgMode
argument_list|()
operator|==
name|BgMode
operator|.
name|None
operator|.
name|ordinal
argument_list|()
condition|)
for|for
control|(
name|TimetableGridCell
name|cell
range|:
name|model
operator|.
name|getCells
argument_list|()
control|)
if|if
condition|(
operator|!
name|sBgColorNotAvailable
operator|.
name|equals
argument_list|(
name|cell
operator|.
name|getBackground
argument_list|()
argument_list|)
condition|)
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
name|cell
operator|.
name|getLength
argument_list|()
condition|;
name|s
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|model
operator|.
name|isAvailable
argument_list|(
name|cell
operator|.
name|getDay
argument_list|()
argument_list|,
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|s
argument_list|)
condition|)
block|{
name|cell
operator|.
name|setBackground
argument_list|(
name|sBgColorNotAvailableButAssigned
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
end_class

end_unit

