begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseTimetablingSolverInterface
operator|.
name|ListSolutionsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseTimetablingSolverInterface
operator|.
name|ListSolutionsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseTimetablingSolverInterface
operator|.
name|SolutionOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|ProgressLogLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|SolutionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|SolverConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|SolverOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|SolverType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
operator|.
name|TableCellInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
operator|.
name|TableHeaderIterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
operator|.
name|TableRowInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalSolutionCommitAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverPredefinedSetting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolutionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolverGroupDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolverPredefinedSettingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|Qualifiable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|SolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|jgroups
operator|.
name|SolverServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverServerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|LogInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|PropertiesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
operator|.
name|Format
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|BackTracker
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|criterion
operator|.
name|Restrictions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|SessionAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ListSolutionsForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|CPSolverMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|ListSolutionsRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|ListSolutionsBackend
implements|implements
name|GwtRpcImplementation
argument_list|<
name|ListSolutionsRequest
argument_list|,
name|ListSolutionsResponse
argument_list|>
block|{
specifier|protected
specifier|static
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|CPSolverMessages
name|SOLVERMSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|CPSolverMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|Format
argument_list|<
name|Date
argument_list|>
name|sTS
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_TIME_STAMP
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
name|SolverService
argument_list|<
name|SolverProxy
argument_list|>
name|courseTimetablingSolverService
decl_stmt|;
annotation|@
name|Autowired
name|SolverServerService
name|solverServerService
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ListSolutionsResponse
name|execute
parameter_list|(
name|ListSolutionsRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|Timetables
argument_list|)
expr_stmt|;
name|SolverProxy
name|solver
init|=
name|courseTimetablingSolverService
operator|.
name|getSolver
argument_list|()
decl_stmt|;
name|ListSolutionsResponse
name|response
init|=
operator|new
name|ListSolutionsResponse
argument_list|()
decl_stmt|;
name|response
operator|.
name|setOperation
argument_list|(
name|request
operator|.
name|getOperation
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|selectedSolutionIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|solutionIdsStr
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|SelectedSolution
argument_list|)
decl_stmt|;
if|if
condition|(
name|solutionIdsStr
operator|!=
literal|null
condition|)
for|for
control|(
name|String
name|solutionId
range|:
name|solutionIdsStr
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
if|if
condition|(
operator|!
name|solutionId
operator|.
name|isEmpty
argument_list|()
condition|)
name|selectedSolutionIds
operator|.
name|add
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|solutionId
argument_list|)
argument_list|)
expr_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SolutionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
switch|switch
condition|(
name|request
operator|.
name|getOperation
argument_list|()
condition|)
block|{
case|case
name|UPDATE_NOTE
case|:
if|if
condition|(
name|request
operator|.
name|hasSolutionIds
argument_list|()
condition|)
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
for|for
control|(
name|Long
name|solutionId
range|:
name|request
operator|.
name|getSolutionIds
argument_list|()
control|)
block|{
name|Solution
name|solution
init|=
name|SolutionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|solutionId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|context
operator|.
name|checkPermission
argument_list|(
name|solution
argument_list|,
name|Right
operator|.
name|TimetablesSolutionChangeNote
argument_list|)
expr_stmt|;
name|String
name|note
init|=
name|request
operator|.
name|getNote
argument_list|()
decl_stmt|;
if|if
condition|(
name|note
operator|!=
literal|null
operator|&&
name|note
operator|.
name|length
argument_list|()
operator|>
literal|1000
condition|)
name|note
operator|=
name|note
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|solution
operator|.
name|setNote
argument_list|(
name|note
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|solution
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|COMMIT
case|:
if|if
condition|(
name|request
operator|.
name|hasSolutionIds
argument_list|()
condition|)
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|ids
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|solutionId
range|:
name|request
operator|.
name|getSolutionIds
argument_list|()
control|)
block|{
name|Solution
name|solution
init|=
name|SolutionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|solutionId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|context
operator|.
name|checkPermission
argument_list|(
name|solution
operator|.
name|getOwner
argument_list|()
argument_list|,
name|Right
operator|.
name|TimetablesSolutionCommit
argument_list|)
expr_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|solutionId
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Solution
argument_list|>
name|solutions
init|=
name|hibSession
operator|.
name|createCriteria
argument_list|(
name|Solution
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
name|Restrictions
operator|.
name|eq
argument_list|(
literal|"owner"
argument_list|,
name|solution
operator|.
name|getOwner
argument_list|()
argument_list|)
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|Solution
argument_list|>
name|touchedSolutionSet
init|=
operator|new
name|HashSet
argument_list|<
name|Solution
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Solution
name|s
range|:
name|solutions
control|)
block|{
if|if
condition|(
name|s
operator|.
name|equals
argument_list|(
name|solution
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|s
operator|.
name|isCommited
argument_list|()
condition|)
block|{
name|touchedSolutionSet
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|touchedSolutionSet
operator|.
name|add
argument_list|(
name|solution
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|solution
argument_list|,
name|Right
operator|.
name|TimetablesSolutionChangeNote
argument_list|)
condition|)
name|solution
operator|.
name|setNote
argument_list|(
name|request
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setSuccess
argument_list|(
name|solution
operator|.
name|commitSolution
argument_list|(
name|response
operator|.
name|getErrors
argument_list|()
argument_list|,
name|hibSession
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|solution
argument_list|)
expr_stmt|;
name|String
name|className
init|=
name|ApplicationProperty
operator|.
name|ExternalActionSolutionCommit
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
operator|!
name|className
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ExternalSolutionCommitAction
name|commitAction
init|=
operator|(
name|ExternalSolutionCommitAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|commitAction
operator|.
name|performExternalSolutionCommitAction
argument_list|(
name|touchedSolutionSet
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
name|solverServerService
operator|.
name|getLocalServer
argument_list|()
operator|.
name|refreshCourseSolution
argument_list|(
name|ids
operator|.
name|toArray
argument_list|(
operator|new
name|Long
index|[
name|ids
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|UNCOMMIT
case|:
if|if
condition|(
name|request
operator|.
name|hasSolutionIds
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|ids
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
for|for
control|(
name|Long
name|solutionId
range|:
name|request
operator|.
name|getSolutionIds
argument_list|()
control|)
block|{
name|Solution
name|solution
init|=
name|SolutionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|solutionId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|context
operator|.
name|checkPermission
argument_list|(
name|solution
operator|.
name|getOwner
argument_list|()
argument_list|,
name|Right
operator|.
name|TimetablesSolutionCommit
argument_list|)
expr_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|solutionId
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|solution
argument_list|,
name|Right
operator|.
name|TimetablesSolutionChangeNote
argument_list|)
condition|)
name|solution
operator|.
name|setNote
argument_list|(
name|request
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|solution
operator|.
name|uncommitSolution
argument_list|(
name|hibSession
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|className
init|=
name|ApplicationProperty
operator|.
name|ExternalActionSolutionCommit
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
operator|!
name|className
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ExternalSolutionCommitAction
name|commitAction
init|=
operator|(
name|ExternalSolutionCommitAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|HashSet
argument_list|<
name|Solution
argument_list|>
name|solutions
init|=
operator|new
name|HashSet
argument_list|<
name|Solution
argument_list|>
argument_list|()
decl_stmt|;
name|solutions
operator|.
name|add
argument_list|(
name|solution
argument_list|)
expr_stmt|;
name|commitAction
operator|.
name|performExternalSolutionCommitAction
argument_list|(
name|solutions
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
name|solverServerService
operator|.
name|getLocalServer
argument_list|()
operator|.
name|refreshCourseSolution
argument_list|(
name|ids
operator|.
name|toArray
argument_list|(
operator|new
name|Long
index|[
name|ids
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DELETE
case|:
if|if
condition|(
name|request
operator|.
name|hasSolutionIds
argument_list|()
condition|)
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
for|for
control|(
name|Long
name|solutionId
range|:
name|request
operator|.
name|getSolutionIds
argument_list|()
control|)
block|{
name|Solution
name|solution
init|=
name|SolutionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|solutionId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|solution
operator|.
name|isCommited
argument_list|()
condition|)
block|{
name|context
operator|.
name|checkPermission
argument_list|(
name|solution
operator|.
name|getOwner
argument_list|()
argument_list|,
name|Right
operator|.
name|TimetablesSolutionCommit
argument_list|)
expr_stmt|;
name|solution
operator|.
name|uncommitSolution
argument_list|(
name|hibSession
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|className
init|=
name|ApplicationProperty
operator|.
name|ExternalActionSolutionCommit
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
operator|!
name|className
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ExternalSolutionCommitAction
name|commitAction
init|=
operator|(
name|ExternalSolutionCommitAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|HashSet
argument_list|<
name|Solution
argument_list|>
name|solutions
init|=
operator|new
name|HashSet
argument_list|<
name|Solution
argument_list|>
argument_list|()
decl_stmt|;
name|solutions
operator|.
name|add
argument_list|(
name|solution
argument_list|)
expr_stmt|;
name|commitAction
operator|.
name|performExternalSolutionCommitAction
argument_list|(
name|solutions
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
name|context
operator|.
name|checkPermission
argument_list|(
name|solution
argument_list|,
name|Right
operator|.
name|TimetablesSolutionDelete
argument_list|)
expr_stmt|;
name|selectedSolutionIds
operator|.
name|remove
argument_list|(
name|solution
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|solution
operator|.
name|delete
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|LOAD
case|:
if|if
condition|(
name|solver
operator|!=
literal|null
operator|&&
name|solver
operator|.
name|isWorking
argument_list|()
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|warnSolverIsWorking
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|selectedSolutionIds
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|errorListSolutionsNoSolutionSelected
argument_list|()
argument_list|)
throw|;
name|context
operator|.
name|checkPermission
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|(
name|selectedSolutionIds
argument_list|)
argument_list|,
literal|"Solution"
argument_list|,
name|Right
operator|.
name|TimetablesSolutionLoad
argument_list|)
expr_stmt|;
name|String
name|solutionIds
init|=
literal|""
decl_stmt|,
name|ownerIds
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Long
name|solutionId
range|:
name|selectedSolutionIds
control|)
block|{
name|Solution
name|solution
init|=
name|SolutionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|solutionId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|solutionIds
operator|+=
operator|(
name|solutionIds
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
name|solution
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|ownerIds
operator|+=
operator|(
name|ownerIds
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
name|solution
operator|.
name|getOwner
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
block|}
name|DataProperties
name|configLoad
init|=
name|courseTimetablingSolverService
operator|.
name|createConfig
argument_list|(
name|request
operator|.
name|getConfigurationId
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|configLoad
operator|.
name|setProperty
argument_list|(
literal|"General.SolverGroupId"
argument_list|,
name|ownerIds
argument_list|)
expr_stmt|;
name|configLoad
operator|.
name|setProperty
argument_list|(
literal|"General.SolutionId"
argument_list|,
name|solutionIds
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getHost
argument_list|()
operator|!=
literal|null
condition|)
name|configLoad
operator|.
name|setProperty
argument_list|(
literal|"General.Host"
argument_list|,
name|request
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|solver
operator|=
name|courseTimetablingSolverService
operator|.
name|createSolver
argument_list|(
name|configLoad
argument_list|)
expr_stmt|;
break|break;
case|case
name|LOAD_EMPTY
case|:
if|if
condition|(
name|solver
operator|!=
literal|null
operator|&&
name|solver
operator|.
name|isWorking
argument_list|()
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|warnSolverIsWorking
argument_list|()
argument_list|)
throw|;
if|if
condition|(
operator|!
name|request
operator|.
name|hasOwner
argument_list|()
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|errorListSolutionsNoOwnerSelected
argument_list|()
argument_list|)
throw|;
name|context
operator|.
name|checkPermission
argument_list|(
name|request
operator|.
name|getOwnerId
argument_list|()
argument_list|,
literal|"SolverGroup"
argument_list|,
name|Right
operator|.
name|TimetablesSolutionLoadEmpty
argument_list|)
expr_stmt|;
name|DataProperties
name|configLoadEmpty
init|=
name|courseTimetablingSolverService
operator|.
name|createConfig
argument_list|(
name|request
operator|.
name|getConfigurationId
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|configLoadEmpty
operator|.
name|setProperty
argument_list|(
literal|"General.SolverGroupId"
argument_list|,
name|request
operator|.
name|getOwnerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getHost
argument_list|()
operator|!=
literal|null
condition|)
name|configLoadEmpty
operator|.
name|setProperty
argument_list|(
literal|"General.Host"
argument_list|,
name|request
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|solver
operator|=
name|courseTimetablingSolverService
operator|.
name|createSolver
argument_list|(
name|configLoadEmpty
argument_list|)
expr_stmt|;
break|break;
case|case
name|SELECT
case|:
if|if
condition|(
name|request
operator|.
name|hasSolutionIds
argument_list|()
condition|)
block|{
for|for
control|(
name|Long
name|solutionId
range|:
name|request
operator|.
name|getSolutionIds
argument_list|()
control|)
block|{
name|Solution
name|solution
init|=
name|SolutionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|solutionId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|solution
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Long
argument_list|>
name|i
init|=
name|selectedSolutionIds
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Solution
name|other
init|=
name|SolutionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|other
operator|!=
literal|null
operator|&&
name|other
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
name|solution
operator|.
name|getOwner
argument_list|()
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|selectedSolutionIds
operator|.
name|add
argument_list|(
name|solutionId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|DESELECT
case|:
if|if
condition|(
name|request
operator|.
name|hasSolutionIds
argument_list|()
condition|)
block|{
for|for
control|(
name|Long
name|solutionId
range|:
name|request
operator|.
name|getSolutionIds
argument_list|()
control|)
name|selectedSolutionIds
operator|.
name|remove
argument_list|(
name|solutionId
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|UNLOAD
case|:
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|warnSolverNotStarted
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|solver
operator|.
name|isWorking
argument_list|()
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|warnSolverIsWorking
argument_list|()
argument_list|)
throw|;
name|courseTimetablingSolverService
operator|.
name|removeSolver
argument_list|()
expr_stmt|;
name|solver
operator|=
literal|null
expr_stmt|;
break|break;
case|case
name|RELOAD
case|:
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|warnSolverNotStarted
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|solver
operator|.
name|isWorking
argument_list|()
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|warnSolverIsWorking
argument_list|()
argument_list|)
throw|;
name|courseTimetablingSolverService
operator|.
name|reload
argument_list|(
name|courseTimetablingSolverService
operator|.
name|createConfig
argument_list|(
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SettingsId"
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|SAVE
case|:
case|case
name|SAVE_AS_NEW
case|:
case|case
name|SAVE_COMMIT
case|:
case|case
name|SAVE_AS_NEW_COMMIT
case|:
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|warnSolverNotStarted
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|solver
operator|.
name|isWorking
argument_list|()
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|warnSolverIsWorking
argument_list|()
argument_list|)
throw|;
name|solver
operator|.
name|setNote
argument_list|(
name|request
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|isNew
init|=
operator|(
name|request
operator|.
name|getOperation
argument_list|()
operator|==
name|SolutionOperation
operator|.
name|SAVE_AS_NEW
operator|||
name|request
operator|.
name|getOperation
argument_list|()
operator|==
name|SolutionOperation
operator|.
name|SAVE_AS_NEW_COMMIT
operator|)
decl_stmt|;
name|boolean
name|isCommit
init|=
operator|(
name|request
operator|.
name|getOperation
argument_list|()
operator|==
name|SolutionOperation
operator|.
name|SAVE_COMMIT
operator|||
name|request
operator|.
name|getOperation
argument_list|()
operator|==
name|SolutionOperation
operator|.
name|SAVE_AS_NEW_COMMIT
operator|)
decl_stmt|;
name|courseTimetablingSolverService
operator|.
name|getSolver
argument_list|()
operator|.
name|save
argument_list|(
name|isNew
argument_list|,
name|isCommit
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|solutionIdsStr
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|Long
name|solutionId
range|:
name|selectedSolutionIds
control|)
name|solutionIdsStr
operator|+=
operator|(
name|solutionIdsStr
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
name|solutionId
expr_stmt|;
name|context
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|SelectedSolution
argument_list|,
name|solutionIdsStr
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|solutionIdsStr
argument_list|)
expr_stmt|;
name|SolverPageBackend
operator|.
name|fillSolverWarnings
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|SolverType
operator|.
name|COURSE
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|fillSelectedSolutions
argument_list|(
name|response
argument_list|,
name|context
argument_list|,
name|selectedSolutionIds
argument_list|,
name|solver
argument_list|)
expr_stmt|;
name|fillSolutions
argument_list|(
name|response
argument_list|,
name|context
argument_list|,
name|selectedSolutionIds
argument_list|)
expr_stmt|;
name|fillHosts
argument_list|(
name|response
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|fillConfigurations
argument_list|(
name|response
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|fillSolverStatus
argument_list|(
name|response
argument_list|,
name|context
argument_list|,
name|solver
argument_list|)
expr_stmt|;
name|fillSolverLog
argument_list|(
name|response
argument_list|,
name|context
argument_list|,
name|solver
argument_list|)
expr_stmt|;
name|fillOwners
argument_list|(
name|response
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|fillAvailableOperations
argument_list|(
name|response
argument_list|,
name|context
argument_list|,
name|solver
argument_list|)
expr_stmt|;
name|fillSolverInfos
argument_list|(
name|response
argument_list|,
name|context
argument_list|,
name|solver
argument_list|)
expr_stmt|;
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|context
argument_list|,
literal|"gwt.jsp?page=listSolutions"
argument_list|,
name|MESSAGES
operator|.
name|pageListSolutions
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
specifier|protected
name|void
name|fillHosts
parameter_list|(
name|ListSolutionsResponse
name|response
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CanSelectSolverServer
argument_list|)
condition|)
block|{
for|for
control|(
name|SolverServer
name|server
range|:
name|solverServerService
operator|.
name|getServers
argument_list|(
literal|true
argument_list|)
control|)
name|response
operator|.
name|addHost
argument_list|(
name|server
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|hasHosts
argument_list|()
condition|)
name|Collections
operator|.
name|sort
argument_list|(
name|response
operator|.
name|getHosts
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|SolverLocalEnabled
operator|.
name|isTrue
argument_list|()
operator|&&
operator|(
operator|!
name|response
operator|.
name|hasHosts
argument_list|()
operator|||
operator|!
name|response
operator|.
name|getHosts
argument_list|()
operator|.
name|contains
argument_list|(
literal|"local"
argument_list|)
operator|)
condition|)
name|response
operator|.
name|addHost
argument_list|(
literal|0
argument_list|,
literal|"local"
argument_list|)
expr_stmt|;
name|response
operator|.
name|addHost
argument_list|(
literal|0
argument_list|,
literal|"auto"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|fillConfigurations
parameter_list|(
name|ListSolutionsResponse
name|response
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|int
name|appearance
init|=
name|SolverPredefinedSetting
operator|.
name|APPEARANCE_TIMETABLES
decl_stmt|;
name|String
name|defaultConfig
init|=
literal|"Interactive"
decl_stmt|;
name|List
argument_list|<
name|SolverPredefinedSetting
argument_list|>
name|configs
init|=
operator|(
name|List
argument_list|<
name|SolverPredefinedSetting
argument_list|>
operator|)
name|SolverPredefinedSettingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from SolverPredefinedSetting s where s.appearance = :appearance"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"appearance"
argument_list|,
name|appearance
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|SolverPredefinedSetting
name|config
range|:
name|configs
control|)
block|{
name|SolverConfiguration
name|c
init|=
operator|new
name|SolverConfiguration
argument_list|()
decl_stmt|;
name|c
operator|.
name|setId
argument_list|(
name|config
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setName
argument_list|(
name|config
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addConfiguration
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|getConfigurationId
argument_list|()
operator|==
literal|null
operator|&&
name|defaultConfig
operator|.
name|equals
argument_list|(
name|config
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
name|response
operator|.
name|setConfigurationId
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|String
name|fix
parameter_list|(
name|String
name|pref
parameter_list|)
block|{
if|if
condition|(
operator|!
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
operator|&&
name|pref
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|>=
literal|0
condition|)
name|pref
operator|=
name|pref
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pref
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
operator|&&
name|pref
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|)
name|pref
operator|=
name|pref
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pref
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
return|return
name|pref
return|;
block|}
specifier|protected
name|void
name|fillSolutions
parameter_list|(
name|ListSolutionsResponse
name|response
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|selectedIds
parameter_list|)
block|{
name|boolean
name|committedOnly
init|=
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|Solver
argument_list|)
decl_stmt|;
name|boolean
name|listAll
init|=
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Solution
argument_list|>
name|solutions
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|listAll
condition|)
name|solutions
operator|=
name|Solution
operator|.
name|findBySessionId
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
else|else
block|{
name|List
argument_list|<
name|Serializable
argument_list|>
name|solverGroupIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Serializable
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Qualifiable
name|owner
range|:
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|getQualifiers
argument_list|(
literal|"SolverGroup"
argument_list|)
control|)
name|solverGroupIds
operator|.
name|add
argument_list|(
name|owner
operator|.
name|getQualifierId
argument_list|()
argument_list|)
expr_stmt|;
name|solutions
operator|=
name|SolutionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from Solution where owner.uniqueId in :solverGroupIds"
argument_list|)
operator|.
name|setParameterList
argument_list|(
literal|"solverGroupIds"
argument_list|,
name|solverGroupIds
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|solutions
operator|==
literal|null
operator|||
name|solutions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|response
operator|.
name|setMessage
argument_list|(
name|committedOnly
condition|?
name|MESSAGES
operator|.
name|errorListSolutionsNoCommitted
argument_list|()
else|:
name|MESSAGES
operator|.
name|errorListSolutionsNoSaved
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|Solution
name|solution
range|:
name|solutions
control|)
block|{
if|if
condition|(
name|committedOnly
operator|&&
operator|!
name|solution
operator|.
name|isCommited
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
continue|continue;
name|String
name|settings
init|=
literal|null
decl_stmt|;
name|String
name|type
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|solution
operator|.
name|getParameters
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SolverParameter
name|p
init|=
operator|(
name|SolverParameter
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"General.SettingsId"
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getDefinition
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|SolverPredefinedSetting
name|set
init|=
name|SolverPredefinedSettingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|!=
literal|null
condition|)
name|settings
operator|=
name|set
operator|.
name|getDescription
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|"Basic.Mode"
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getDefinition
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|type
operator|=
name|p
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
name|type
operator|=
operator|(
name|settings
operator|==
literal|null
condition|?
name|type
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|listSolutionsUnknown
argument_list|()
else|:
name|type
else|:
name|settings
operator|)
expr_stmt|;
name|PropertiesInfo
name|globalInfo
init|=
operator|(
name|PropertiesInfo
operator|)
name|solution
operator|.
name|getInfo
argument_list|(
literal|"GlobalInfo"
argument_list|)
decl_stmt|;
name|response
operator|.
name|addRow
argument_list|(
operator|new
name|TableRowInterface
argument_list|(
name|solution
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|selectedIds
operator|!=
literal|null
operator|&&
name|selectedIds
operator|.
name|contains
argument_list|(
name|solution
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableCellInterface
argument_list|<
name|Date
argument_list|>
argument_list|(
name|solution
operator|.
name|getCreated
argument_list|()
argument_list|,
name|sTS
operator|.
name|format
argument_list|(
name|solution
operator|.
name|getCreated
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TableCellInterface
argument_list|<
name|String
argument_list|>
argument_list|(
name|type
argument_list|)
argument_list|,
operator|new
name|TableCellInterface
argument_list|<
name|Date
argument_list|>
argument_list|(
name|solution
operator|.
name|isCommited
argument_list|()
condition|?
name|solution
operator|.
name|getCommitDate
argument_list|()
else|:
literal|null
argument_list|,
name|solution
operator|.
name|isCommited
argument_list|()
condition|?
name|sTS
operator|.
name|format
argument_list|(
name|solution
operator|.
name|getCommitDate
argument_list|()
argument_list|)
else|:
literal|""
argument_list|)
argument_list|,
operator|new
name|TableCellInterface
argument_list|<
name|String
argument_list|>
argument_list|(
name|solution
operator|.
name|getOwner
argument_list|()
operator|.
name|getAbbv
argument_list|()
argument_list|)
operator|.
name|setTitle
argument_list|(
name|solution
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableCellInterface
argument_list|<
name|String
argument_list|>
argument_list|(
name|globalInfo
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|listSolutionsUnknown
argument_list|()
else|:
name|fix
argument_list|(
name|globalInfo
operator|.
name|getProperty
argument_list|(
literal|"Assigned variables"
argument_list|,
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TableCellInterface
argument_list|<
name|String
argument_list|>
argument_list|(
name|globalInfo
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|listSolutionsUnknown
argument_list|()
else|:
name|fix
argument_list|(
name|globalInfo
operator|.
name|getProperty
argument_list|(
literal|"Overall solution value"
argument_list|,
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TableCellInterface
argument_list|<
name|String
argument_list|>
argument_list|(
name|globalInfo
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|listSolutionsUnknown
argument_list|()
else|:
name|fix
argument_list|(
name|globalInfo
operator|.
name|getProperty
argument_list|(
literal|"Time preferences"
argument_list|,
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TableCellInterface
argument_list|<
name|String
argument_list|>
argument_list|(
name|globalInfo
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|listSolutionsUnknown
argument_list|()
else|:
name|globalInfo
operator|.
name|getProperty
argument_list|(
literal|"Student conflicts"
argument_list|,
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|" \\["
argument_list|,
literal|"("
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\]"
argument_list|,
literal|")"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|", "
argument_list|,
literal|","
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"hard:"
argument_list|,
literal|"h"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"distance:"
argument_list|,
literal|"d"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"commited:"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"committed:"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TableCellInterface
argument_list|<
name|String
argument_list|>
argument_list|(
name|globalInfo
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|listSolutionsUnknown
argument_list|()
else|:
name|fix
argument_list|(
name|globalInfo
operator|.
name|getProperty
argument_list|(
literal|"Room preferences"
argument_list|,
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TableCellInterface
argument_list|<
name|String
argument_list|>
argument_list|(
name|globalInfo
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|listSolutionsUnknown
argument_list|()
else|:
name|fix
argument_list|(
name|globalInfo
operator|.
name|getProperty
argument_list|(
literal|"Distribution preferences"
argument_list|,
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TableCellInterface
argument_list|<
name|String
argument_list|>
argument_list|(
name|globalInfo
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|listSolutionsUnknown
argument_list|()
else|:
name|fix
argument_list|(
name|globalInfo
operator|.
name|getProperty
argument_list|(
literal|"Back-to-back instructor preferences"
argument_list|,
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TableCellInterface
argument_list|<
name|String
argument_list|>
argument_list|(
name|globalInfo
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|listSolutionsUnknown
argument_list|()
else|:
name|fix
argument_list|(
name|globalInfo
operator|.
name|getProperty
argument_list|(
literal|"Too big rooms"
argument_list|,
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TableCellInterface
argument_list|<
name|String
argument_list|>
argument_list|(
name|globalInfo
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|listSolutionsUnknown
argument_list|()
else|:
name|fix
argument_list|(
name|globalInfo
operator|.
name|getProperty
argument_list|(
literal|"Useless half-hours"
argument_list|,
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TableCellInterface
argument_list|<
name|String
argument_list|>
argument_list|(
name|globalInfo
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|listSolutionsUnknown
argument_list|()
else|:
name|fix
argument_list|(
name|globalInfo
operator|.
name|getProperty
argument_list|(
literal|"Perturbations: Total penalty"
argument_list|,
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TableCellInterface
argument_list|<
name|String
argument_list|>
argument_list|(
name|solution
operator|.
name|getNote
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|setHeader
argument_list|(
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colCreated
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colSolverConfiguration
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colCommitted
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colOwner
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colShortAssignedVariables
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colShortTotalValue
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colShortTimePref
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colShortStudentConflicts
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colShortRoomPref
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colShortDistPref
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colShortInstructorBtbPref
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colShortTooBigRooms
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colShortUselessHalfHours
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colShortPerturbations
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colNote
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|fillSelectedSolutions
parameter_list|(
name|ListSolutionsResponse
name|response
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|selectedIds
parameter_list|,
name|SolverProxy
name|solver
parameter_list|)
block|{
if|if
condition|(
name|selectedIds
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|Long
name|solutionId
range|:
name|selectedIds
control|)
block|{
name|Solution
name|solution
init|=
name|SolutionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|solutionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|solution
operator|==
literal|null
condition|)
continue|continue;
name|SolutionInfo
name|si
init|=
operator|new
name|SolutionInfo
argument_list|()
decl_stmt|;
name|si
operator|.
name|setCreated
argument_list|(
name|sTS
operator|.
name|format
argument_list|(
name|solution
operator|.
name|getCreated
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|solution
operator|.
name|isCommited
argument_list|()
condition|)
name|si
operator|.
name|setCommitted
argument_list|(
name|sTS
operator|.
name|format
argument_list|(
name|solution
operator|.
name|getCommitDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|si
operator|.
name|setNote
argument_list|(
name|solution
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|si
operator|.
name|setOwner
argument_list|(
name|solution
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|si
operator|.
name|setId
argument_list|(
name|solutionId
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCanExecute
argument_list|(
name|solutionId
argument_list|,
name|SolutionOperation
operator|.
name|UPDATE_NOTE
argument_list|,
name|context
operator|.
name|hasPermission
argument_list|(
name|solution
argument_list|,
name|Right
operator|.
name|TimetablesSolutionChangeNote
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCanExecute
argument_list|(
name|solutionId
argument_list|,
name|SolutionOperation
operator|.
name|COMMIT
argument_list|,
operator|!
name|solution
operator|.
name|isCommited
argument_list|()
operator|&&
name|context
operator|.
name|hasPermission
argument_list|(
name|solution
operator|.
name|getOwner
argument_list|()
argument_list|,
name|Right
operator|.
name|TimetablesSolutionCommit
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCanExecute
argument_list|(
name|solutionId
argument_list|,
name|SolutionOperation
operator|.
name|UNCOMMIT
argument_list|,
name|solution
operator|.
name|isCommited
argument_list|()
operator|&&
name|context
operator|.
name|hasPermission
argument_list|(
name|solution
operator|.
name|getOwner
argument_list|()
argument_list|,
name|Right
operator|.
name|TimetablesSolutionCommit
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCanExecute
argument_list|(
name|solutionId
argument_list|,
name|SolutionOperation
operator|.
name|DELETE
argument_list|,
operator|!
name|solution
operator|.
name|isCommited
argument_list|()
operator|&&
name|context
operator|.
name|hasPermission
argument_list|(
name|solution
argument_list|,
name|Right
operator|.
name|TimetablesSolutionDelete
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCanExecute
argument_list|(
name|solutionId
argument_list|,
name|SolutionOperation
operator|.
name|EXPORT
argument_list|,
name|context
operator|.
name|hasPermission
argument_list|(
name|solution
argument_list|,
name|Right
operator|.
name|TimetablesSolutionExportCsv
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCanExecute
argument_list|(
name|solutionId
argument_list|,
name|SolutionOperation
operator|.
name|LOAD
argument_list|,
name|solver
operator|==
literal|null
operator|&&
name|context
operator|.
name|hasPermission
argument_list|(
name|solution
argument_list|,
name|Right
operator|.
name|TimetablesSolutionLoad
argument_list|)
argument_list|)
expr_stmt|;
name|si
operator|.
name|setName
argument_list|(
name|solution
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LogInfo
name|logInfo
init|=
operator|(
name|LogInfo
operator|)
name|solution
operator|.
name|getInfo
argument_list|(
literal|"LogInfo"
argument_list|)
decl_stmt|;
if|if
condition|(
name|logInfo
operator|!=
literal|null
condition|)
for|for
control|(
name|Progress
operator|.
name|Message
name|m
range|:
name|logInfo
operator|.
name|getLog
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getLevel
argument_list|()
operator|==
name|ProgressLogLevel
operator|.
name|STAGE
operator|.
name|ordinal
argument_list|()
operator|&&
operator|(
name|SOLVERMSG
operator|.
name|statusLoadingInputData
argument_list|()
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|||
literal|"Loading input data ..."
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|)
operator|&&
name|si
operator|.
name|hasLog
argument_list|()
condition|)
name|si
operator|.
name|getLog
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|getLevel
argument_list|()
operator|>=
name|ProgressLogLevel
operator|.
name|WARN
operator|.
name|ordinal
argument_list|()
condition|)
name|si
operator|.
name|addMessage
argument_list|(
name|m
operator|.
name|getLevel
argument_list|()
argument_list|,
name|m
operator|.
name|getDate
argument_list|()
argument_list|,
name|m
operator|.
name|getMessage
argument_list|()
argument_list|,
name|m
operator|.
name|getTrace
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|PropertiesInfo
name|propInfo
init|=
operator|(
name|PropertiesInfo
operator|)
name|solution
operator|.
name|getInfo
argument_list|(
literal|"GlobalInfo"
argument_list|)
decl_stmt|;
if|if
condition|(
name|propInfo
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|translations
init|=
name|SOLVERMSG
operator|.
name|courseInfoMessages
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
operator|new
name|ListSolutionsForm
operator|.
name|InfoComparator
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|propInfo
operator|.
name|keySet
argument_list|()
control|)
name|keys
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|String
name|translatedKey
init|=
operator|(
name|translations
operator|==
literal|null
condition|?
literal|null
else|:
name|translations
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|translatedKey
operator|!=
literal|null
condition|)
name|si
operator|.
name|addPair
argument_list|(
name|translatedKey
argument_list|,
name|propInfo
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|si
operator|.
name|addPair
argument_list|(
name|key
argument_list|,
name|propInfo
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|addSelectedSolution
argument_list|(
name|si
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|fillSolverStatus
parameter_list|(
name|ListSolutionsResponse
name|response
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|SolverProxy
name|solver
parameter_list|)
block|{
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
name|response
operator|.
name|setLoadDate
argument_list|(
name|solver
operator|.
name|getLoadedDate
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setWorking
argument_list|(
name|solver
operator|.
name|isRunning
argument_list|()
operator|||
name|solver
operator|.
name|isWorking
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Map
name|p
init|=
name|solver
operator|.
name|getProgress
argument_list|()
decl_stmt|;
name|response
operator|.
name|setSolverStatus
argument_list|(
operator|(
name|String
operator|)
name|p
operator|.
name|get
argument_list|(
literal|"STATUS"
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|progressMax
init|=
operator|(
operator|(
name|Long
operator|)
name|p
operator|.
name|get
argument_list|(
literal|"MAX_PROGRESS"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|progressMax
operator|>
literal|0
condition|)
block|{
name|String
name|progress
init|=
operator|(
name|String
operator|)
name|p
operator|.
name|get
argument_list|(
literal|"PHASE"
argument_list|)
decl_stmt|;
name|long
name|progressCur
init|=
operator|(
operator|(
name|Long
operator|)
name|p
operator|.
name|get
argument_list|(
literal|"PROGRESS"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|double
name|progressPercent
init|=
literal|100.0
operator|*
operator|(
operator|(
name|double
operator|)
operator|(
name|progressCur
operator|<
name|progressMax
condition|?
name|progressCur
else|:
name|progressMax
operator|)
operator|)
operator|/
operator|(
operator|(
name|double
operator|)
name|progressMax
operator|)
decl_stmt|;
name|progress
operator|+=
literal|" ("
operator|+
operator|new
name|DecimalFormat
argument_list|(
literal|"0.0"
argument_list|)
operator|.
name|format
argument_list|(
name|progressPercent
argument_list|)
operator|+
literal|"%)"
expr_stmt|;
name|response
operator|.
name|setSolverProgress
argument_list|(
name|progress
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|DataProperties
name|config
init|=
name|solver
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|response
operator|.
name|setConfigurationId
argument_list|(
name|config
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SettingsId"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|getConfigurationId
argument_list|()
operator|!=
literal|null
operator|&&
name|response
operator|.
name|getConfiguration
argument_list|(
name|response
operator|.
name|getConfigurationId
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|SolverPredefinedSetting
name|cfg
init|=
name|SolverPredefinedSettingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|response
operator|.
name|getConfigurationId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cfg
operator|!=
literal|null
operator|&&
name|cfg
operator|.
name|getAppearance
argument_list|()
operator|==
name|SolverPredefinedSetting
operator|.
name|APPEARANCE_SOLVER
condition|)
block|{
name|SolverConfiguration
name|c
init|=
operator|new
name|SolverConfiguration
argument_list|()
decl_stmt|;
name|c
operator|.
name|setId
argument_list|(
name|cfg
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setName
argument_list|(
name|cfg
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addConfiguration
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|response
operator|.
name|setSolverStatus
argument_list|(
name|MESSAGES
operator|.
name|solverStatusNotStarted
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|fillSolverLog
parameter_list|(
name|ListSolutionsResponse
name|response
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|SolverProxy
name|solver
parameter_list|)
block|{
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Progress
operator|.
name|Message
argument_list|>
name|log
init|=
name|solver
operator|.
name|getProgressLog
argument_list|(
name|ProgressLogLevel
operator|.
name|WARN
operator|.
name|ordinal
argument_list|()
argument_list|,
name|SOLVERMSG
operator|.
name|statusLoadingInputData
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
for|for
control|(
name|Progress
operator|.
name|Message
name|m
range|:
name|log
control|)
name|response
operator|.
name|addMessage
argument_list|(
name|m
operator|.
name|getLevel
argument_list|()
argument_list|,
name|m
operator|.
name|getDate
argument_list|()
argument_list|,
name|m
operator|.
name|getMessage
argument_list|()
argument_list|,
name|m
operator|.
name|getTrace
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|fillOwners
parameter_list|(
name|ListSolutionsResponse
name|response
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
for|for
control|(
name|SolverGroup
name|owner
range|:
name|SolverGroup
operator|.
name|getUserSolverGroups
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|owner
argument_list|,
name|Right
operator|.
name|TimetablesSolutionLoadEmpty
argument_list|)
condition|)
name|response
operator|.
name|addSolverOwner
argument_list|(
operator|new
name|SolverOwner
argument_list|(
name|owner
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|owner
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|fillAvailableOperations
parameter_list|(
name|ListSolutionsResponse
name|response
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|SolverProxy
name|solver
parameter_list|)
block|{
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
name|response
operator|.
name|setCanExecute
argument_list|(
operator|-
literal|1l
argument_list|,
name|SolutionOperation
operator|.
name|CHECK
argument_list|,
name|solver
operator|.
name|isWorking
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCanExecute
argument_list|(
operator|-
literal|1l
argument_list|,
name|SolutionOperation
operator|.
name|UPDATE_NOTE
argument_list|,
operator|!
name|solver
operator|.
name|isWorking
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|solver
operator|.
name|isWorking
argument_list|()
condition|)
block|{
name|response
operator|.
name|setCanExecute
argument_list|(
operator|-
literal|1l
argument_list|,
name|SolutionOperation
operator|.
name|UNLOAD
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCanExecute
argument_list|(
operator|-
literal|1l
argument_list|,
name|SolutionOperation
operator|.
name|RELOAD
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Long
index|[]
name|owners
init|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLongArry
argument_list|(
literal|"General.SolverGroupId"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|owners
argument_list|,
literal|"SolverGroup"
argument_list|,
name|Right
operator|.
name|SolverSolutionExportCsv
argument_list|)
condition|)
name|response
operator|.
name|setCanExecute
argument_list|(
operator|-
literal|1l
argument_list|,
name|SolutionOperation
operator|.
name|EXPORT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Long
index|[]
name|iSolutionIds
init|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLongArry
argument_list|(
literal|"General.SolutionId"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|hasSolution
init|=
literal|false
decl_stmt|;
name|boolean
name|canOverwrite
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|iSolutionIds
operator|!=
literal|null
operator|&&
name|iSolutionIds
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSolutionIds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Solution
name|solution
init|=
operator|(
name|iSolutionIds
index|[
name|i
index|]
operator|==
literal|null
condition|?
literal|null
else|:
name|SolutionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|iSolutionIds
index|[
name|i
index|]
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|solution
operator|!=
literal|null
condition|)
block|{
name|hasSolution
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|solution
operator|.
name|getCommited
argument_list|()
condition|)
name|canOverwrite
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|owners
argument_list|,
literal|"SolverGroup"
argument_list|,
name|Right
operator|.
name|SolverSolutionSave
argument_list|)
condition|)
block|{
name|response
operator|.
name|setCanExecute
argument_list|(
operator|-
literal|1l
argument_list|,
name|SolutionOperation
operator|.
name|SAVE_AS_NEW
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasSolution
operator|&&
name|canOverwrite
condition|)
name|response
operator|.
name|setCanExecute
argument_list|(
operator|-
literal|1l
argument_list|,
name|SolutionOperation
operator|.
name|SAVE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|owners
argument_list|,
literal|"SolverGroup"
argument_list|,
name|Right
operator|.
name|TimetablesSolutionCommit
argument_list|)
condition|)
block|{
name|response
operator|.
name|setCanExecute
argument_list|(
operator|-
literal|1l
argument_list|,
name|SolutionOperation
operator|.
name|SAVE_AS_NEW_COMMIT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasSolution
condition|)
name|response
operator|.
name|setCanExecute
argument_list|(
operator|-
literal|1l
argument_list|,
name|SolutionOperation
operator|.
name|SAVE_COMMIT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|response
operator|.
name|setCanExecute
argument_list|(
operator|-
literal|1l
argument_list|,
name|SolutionOperation
operator|.
name|LOAD_EMPTY
argument_list|,
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|TimetablesSolutionLoadEmpty
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|fillSolverInfos
parameter_list|(
name|ListSolutionsResponse
name|response
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|SolverProxy
name|solver
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
init|=
operator|(
name|solver
operator|==
literal|null
condition|?
literal|null
else|:
name|solver
operator|.
name|currentSolutionInfo
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|translations
init|=
name|SOLVERMSG
operator|.
name|courseInfoMessages
argument_list|()
decl_stmt|;
name|SolutionInfo
name|si
init|=
operator|new
name|SolutionInfo
argument_list|()
decl_stmt|;
name|Date
name|loaded
init|=
name|solver
operator|.
name|getLoadedDate
argument_list|()
decl_stmt|;
name|si
operator|.
name|setCreated
argument_list|(
name|loaded
operator|==
literal|null
condition|?
literal|null
else|:
name|sTS
operator|.
name|format
argument_list|(
name|loaded
argument_list|)
argument_list|)
expr_stmt|;
name|si
operator|.
name|setNote
argument_list|(
name|solver
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
operator|new
name|ListSolutionsForm
operator|.
name|InfoComparator
argument_list|()
argument_list|)
decl_stmt|;
name|keys
operator|.
name|addAll
argument_list|(
name|info
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|String
name|translatedKey
init|=
operator|(
name|translations
operator|==
literal|null
condition|?
literal|null
else|:
name|translations
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|translatedKey
operator|!=
literal|null
condition|)
name|si
operator|.
name|addPair
argument_list|(
name|translatedKey
argument_list|,
name|info
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|si
operator|.
name|addPair
argument_list|(
name|key
argument_list|,
name|info
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|setCurrentSolution
argument_list|(
name|si
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|response
operator|.
name|hasOwerIds
argument_list|()
condition|)
name|response
operator|.
name|getOwnerIds
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Long
index|[]
name|owners
init|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLongArry
argument_list|(
literal|"General.SolverGroupId"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|ownerString
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|owners
operator|!=
literal|null
condition|)
for|for
control|(
name|Long
name|owner
range|:
name|owners
control|)
block|{
name|response
operator|.
name|addOwnerId
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|SolverGroup
name|g
init|=
name|SolverGroupDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|owner
argument_list|)
decl_stmt|;
if|if
condition|(
name|g
operator|!=
literal|null
condition|)
name|ownerString
operator|+=
operator|(
name|ownerString
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"<br>"
operator|)
operator|+
name|g
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ownerString
operator|.
name|isEmpty
argument_list|()
operator|&&
name|response
operator|.
name|hasCurrentSolution
argument_list|()
condition|)
name|response
operator|.
name|getCurrentSolution
argument_list|()
operator|.
name|setOwner
argument_list|(
name|ownerString
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

