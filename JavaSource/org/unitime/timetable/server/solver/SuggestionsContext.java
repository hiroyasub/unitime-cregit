begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|StudentCommittedConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|StudentConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|StudentDistanceConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|StudentHardConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Lecture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|criteria
operator|.
name|Criterion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solution
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|CPSolverMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|NameFormat
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SuggestionsContext
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|String
name|iInstructorNameFormat
init|=
name|NameFormat
operator|.
name|SHORT
operator|.
name|reference
argument_list|()
decl_stmt|;
specifier|private
specifier|transient
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|iCourseObjectives
init|=
literal|null
decl_stmt|;
specifier|private
name|double
name|iBaseStudentConflicts
decl_stmt|,
name|iBaseStudentConflictsCommitted
decl_stmt|,
name|iBaseStudentConflictsDistance
decl_stmt|,
name|iBaseStudentConflictsHard
decl_stmt|;
specifier|public
name|String
name|getInstructorNameFormat
parameter_list|()
block|{
return|return
name|iInstructorNameFormat
return|;
block|}
specifier|public
name|void
name|setInstructorNameFormat
parameter_list|(
name|String
name|format
parameter_list|)
block|{
name|iInstructorNameFormat
operator|=
name|format
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|courseObjectives
parameter_list|()
block|{
if|if
condition|(
name|iCourseObjectives
operator|==
literal|null
condition|)
name|iCourseObjectives
operator|=
name|Localization
operator|.
name|create
argument_list|(
name|CPSolverMessages
operator|.
name|class
argument_list|)
operator|.
name|courseObjectives
argument_list|()
expr_stmt|;
return|return
name|iCourseObjectives
return|;
block|}
specifier|public
name|void
name|setBaseStudentConflicts
parameter_list|(
name|Solution
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|solution
parameter_list|)
block|{
name|Model
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|model
init|=
name|solution
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|Assignment
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|assignment
init|=
name|solution
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
name|Criterion
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|sc
init|=
name|model
operator|.
name|getCriterion
argument_list|(
name|StudentConflict
operator|.
name|class
argument_list|)
decl_stmt|;
name|Criterion
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|shc
init|=
name|model
operator|.
name|getCriterion
argument_list|(
name|StudentHardConflict
operator|.
name|class
argument_list|)
decl_stmt|;
name|Criterion
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|sdc
init|=
name|model
operator|.
name|getCriterion
argument_list|(
name|StudentDistanceConflict
operator|.
name|class
argument_list|)
decl_stmt|;
name|Criterion
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|scc
init|=
name|model
operator|.
name|getCriterion
argument_list|(
name|StudentCommittedConflict
operator|.
name|class
argument_list|)
decl_stmt|;
name|iBaseStudentConflicts
operator|=
operator|(
name|scc
operator|==
literal|null
condition|?
literal|0.0
else|:
name|scc
operator|.
name|getValue
argument_list|(
name|assignment
argument_list|)
operator|)
operator|+
operator|(
name|sc
operator|==
literal|null
condition|?
literal|0.0
else|:
name|sc
operator|.
name|getValue
argument_list|(
name|assignment
argument_list|)
operator|)
expr_stmt|;
name|iBaseStudentConflictsCommitted
operator|=
operator|(
name|scc
operator|==
literal|null
condition|?
literal|0.0
else|:
name|scc
operator|.
name|getValue
argument_list|(
name|assignment
argument_list|)
operator|)
expr_stmt|;
name|iBaseStudentConflictsDistance
operator|=
operator|(
name|sdc
operator|==
literal|null
condition|?
literal|0.0
else|:
name|sdc
operator|.
name|getValue
argument_list|(
name|assignment
argument_list|)
operator|)
expr_stmt|;
name|iBaseStudentConflictsHard
operator|=
operator|(
name|shc
operator|==
literal|null
condition|?
literal|0.0
else|:
name|shc
operator|.
name|getValue
argument_list|(
name|assignment
argument_list|)
operator|)
expr_stmt|;
block|}
specifier|public
name|double
name|getBaseStudentConflicts
parameter_list|()
block|{
return|return
name|iBaseStudentConflicts
return|;
block|}
specifier|public
name|double
name|getBaseStudentConflictsCommitted
parameter_list|()
block|{
return|return
name|iBaseStudentConflictsCommitted
return|;
block|}
specifier|public
name|double
name|getBaseStudentConflictsDistance
parameter_list|()
block|{
return|return
name|iBaseStudentConflictsDistance
return|;
block|}
specifier|public
name|double
name|getBaseStudentConflictsHard
parameter_list|()
block|{
return|return
name|iBaseStudentConflictsHard
return|;
block|}
block|}
end_class

end_unit

