begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseTimetablingSolverInterface
operator|.
name|SolverReportsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseTimetablingSolverInterface
operator|.
name|SolverReportsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|PreferenceInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
operator|.
name|Alignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
operator|.
name|TableCellBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
operator|.
name|TableCellChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
operator|.
name|TableCellClickableClassName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
operator|.
name|TableCellInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
operator|.
name|TableCellMultiLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
operator|.
name|TableCellRooms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
operator|.
name|TableCellText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
operator|.
name|TableHeaderIterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
operator|.
name|TableRowInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|SolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|interactive
operator|.
name|ClassAssignmentDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|interactive
operator|.
name|ClassAssignmentDetails
operator|.
name|TimeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|DeptBalancingReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|DiscouragedInstructorBtbReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|JenrlInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|PerturbationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|RoomReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|SameSubpartBalancingReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|StudentConflictsReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|ViolatedDistrPreferencesReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|SolverReportsRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|SolverReportsBackend
implements|implements
name|GwtRpcImplementation
argument_list|<
name|SolverReportsRequest
argument_list|,
name|SolverReportsResponse
argument_list|>
block|{
specifier|protected
specifier|static
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Formats
operator|.
name|Format
argument_list|<
name|Number
argument_list|>
name|sDoubleFormat
init|=
name|Formats
operator|.
name|getNumberFormat
argument_list|(
literal|"0.00"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|DecimalFormat
name|sDF
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.###"
argument_list|,
operator|new
name|java
operator|.
name|text
operator|.
name|DecimalFormatSymbols
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
name|SolverService
argument_list|<
name|SolverProxy
argument_list|>
name|courseTimetablingSolverService
decl_stmt|;
annotation|@
name|Override
specifier|public
name|SolverReportsResponse
name|execute
parameter_list|(
name|SolverReportsRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|SolutionReports
argument_list|)
expr_stmt|;
name|SolverProxy
name|solver
init|=
name|courseTimetablingSolverService
operator|.
name|getSolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|warnSolverNotLoaded
argument_list|()
argument_list|)
throw|;
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
decl_stmt|;
name|BitSet
name|sessionDays
init|=
name|session
operator|.
name|getDefaultDatePattern
argument_list|()
operator|.
name|getPatternBitSet
argument_list|()
decl_stmt|;
name|int
name|startDayDayOfWeek
init|=
name|Constants
operator|.
name|getDayOfWeek
argument_list|(
name|session
operator|.
name|getDefaultDatePattern
argument_list|()
operator|.
name|getStartDate
argument_list|()
argument_list|)
decl_stmt|;
name|Float
name|nrWeeks
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|TimetableGridUtilizationSkipHolidays
operator|.
name|isFalse
argument_list|()
condition|)
block|{
name|DatePattern
name|dp
init|=
name|session
operator|.
name|getDefaultDatePatternNotNull
argument_list|()
decl_stmt|;
if|if
condition|(
name|dp
operator|!=
literal|null
condition|)
name|nrWeeks
operator|=
name|dp
operator|.
name|getEffectiveNumberOfWeeks
argument_list|()
expr_stmt|;
block|}
name|SolverReportsResponse
name|response
init|=
operator|new
name|SolverReportsResponse
argument_list|()
decl_stmt|;
for|for
control|(
name|RoomType
name|type
range|:
name|RoomType
operator|.
name|findAll
argument_list|()
control|)
block|{
name|RoomReport
name|roomReport
init|=
name|solver
operator|.
name|getRoomReport
argument_list|(
name|sessionDays
argument_list|,
name|startDayDayOfWeek
argument_list|,
name|type
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|nrWeeks
argument_list|)
decl_stmt|;
if|if
condition|(
name|roomReport
operator|!=
literal|null
operator|&&
operator|!
name|roomReport
operator|.
name|getGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|response
operator|.
name|addTable
argument_list|(
name|getRoomReportTable
argument_list|(
name|roomReport
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|RoomReport
name|roomReport
init|=
name|solver
operator|.
name|getRoomReport
argument_list|(
name|sessionDays
argument_list|,
name|startDayDayOfWeek
argument_list|,
literal|null
argument_list|,
name|nrWeeks
argument_list|)
decl_stmt|;
if|if
condition|(
name|roomReport
operator|!=
literal|null
operator|&&
operator|!
name|roomReport
operator|.
name|getGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|response
operator|.
name|addTable
argument_list|(
name|getRoomReportTable
argument_list|(
name|roomReport
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|hasTables
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|response
operator|.
name|getTables
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
for|for
control|(
name|TableHeaderIterface
name|h
range|:
name|response
operator|.
name|getTables
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getHeader
argument_list|()
control|)
name|h
operator|.
name|setDescription
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|ViolatedDistrPreferencesReport
name|violatedDistrPreferencesReport
init|=
name|solver
operator|.
name|getViolatedDistrPreferencesReport
argument_list|()
decl_stmt|;
if|if
condition|(
name|violatedDistrPreferencesReport
operator|!=
literal|null
operator|&&
operator|!
name|violatedDistrPreferencesReport
operator|.
name|getGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|response
operator|.
name|addTable
argument_list|(
name|getViolatedDistrPreferencesReportTable
argument_list|(
name|violatedDistrPreferencesReport
argument_list|)
argument_list|)
expr_stmt|;
name|DiscouragedInstructorBtbReport
name|discouragedInstructorBtbReportReport
init|=
name|solver
operator|.
name|getDiscouragedInstructorBtbReport
argument_list|()
decl_stmt|;
if|if
condition|(
name|discouragedInstructorBtbReportReport
operator|!=
literal|null
operator|&&
operator|!
name|discouragedInstructorBtbReportReport
operator|.
name|getGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|response
operator|.
name|addTable
argument_list|(
name|getDiscouragedInstructorBtbReportReportTable
argument_list|(
name|discouragedInstructorBtbReportReport
argument_list|)
argument_list|)
expr_stmt|;
name|StudentConflictsReport
name|studentConflictsReport
init|=
name|solver
operator|.
name|getStudentConflictsReport
argument_list|()
decl_stmt|;
if|if
condition|(
name|studentConflictsReport
operator|!=
literal|null
operator|&&
operator|!
name|studentConflictsReport
operator|.
name|getGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|response
operator|.
name|addTable
argument_list|(
name|getStudentConflictsReportTable
argument_list|(
name|studentConflictsReport
argument_list|)
argument_list|)
expr_stmt|;
name|DeptBalancingReport
name|deptBalancingReport
init|=
name|solver
operator|.
name|getDeptBalancingReport
argument_list|()
decl_stmt|;
if|if
condition|(
name|deptBalancingReport
operator|!=
literal|null
operator|&&
operator|!
name|deptBalancingReport
operator|.
name|getGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|response
operator|.
name|addTable
argument_list|(
name|getDeptBalancingReportTable
argument_list|(
name|deptBalancingReport
argument_list|)
argument_list|)
expr_stmt|;
name|SameSubpartBalancingReport
name|sameSubpartBalancingReport
init|=
name|solver
operator|.
name|getSameSubpartBalancingReport
argument_list|()
decl_stmt|;
if|if
condition|(
name|sameSubpartBalancingReport
operator|!=
literal|null
operator|&&
operator|!
name|sameSubpartBalancingReport
operator|.
name|getGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|response
operator|.
name|addTable
argument_list|(
name|getSameSubpartBalancingReportTable
argument_list|(
name|sameSubpartBalancingReport
argument_list|)
argument_list|)
expr_stmt|;
name|PerturbationReport
name|perturbationReport
init|=
name|solver
operator|.
name|getPerturbationReport
argument_list|()
decl_stmt|;
if|if
condition|(
name|perturbationReport
operator|!=
literal|null
operator|&&
operator|!
name|perturbationReport
operator|.
name|getGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|response
operator|.
name|addTable
argument_list|(
name|getPerturbationReportTable
argument_list|(
name|perturbationReport
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|PreferenceLevel
name|pref
range|:
name|PreferenceLevel
operator|.
name|getPreferenceLevelList
argument_list|(
literal|true
argument_list|)
control|)
name|response
operator|.
name|addPreference
argument_list|(
operator|new
name|PreferenceInterface
argument_list|(
name|pref
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|prolog2bgColor
argument_list|(
name|pref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
argument_list|,
name|pref
operator|.
name|getPrefProlog
argument_list|()
argument_list|,
name|pref
operator|.
name|getPrefName
argument_list|()
argument_list|,
name|pref
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
specifier|public
specifier|static
name|TableInterface
name|getRoomReportTable
parameter_list|(
name|RoomReport
name|report
parameter_list|,
name|RoomType
name|type
parameter_list|)
block|{
name|TableInterface
name|table
init|=
operator|new
name|TableInterface
argument_list|(
literal|"report-rooms"
operator|+
operator|(
name|type
operator|==
literal|null
condition|?
literal|""
else|:
literal|"-"
operator|+
name|type
operator|.
name|getReference
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|)
argument_list|,
name|type
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|reportRoomAllocationNonUnivLocs
argument_list|()
else|:
name|MESSAGES
operator|.
name|reportRoomAllocation
argument_list|(
name|type
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|table
operator|.
name|setHeader
argument_list|(
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colRoomReportGroup
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportRoomAlocDescGroup
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colRoomReportActualSizes
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportRoomAlocDescSize
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colRoomReportNbrRooms
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportRoomAlocDescNbrRooms
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colRoomReportClassUse
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportRoomAlocDescClassUse
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colRoomReportClassShould
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportRoomAlocDescClassShould
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colRoomReportClassMust
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportRoomAlocDescClassMust
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colRoomReportHourUse
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportRoomAlocDescHourUse
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colRoomReportHourShould
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportRoomAlocDescHourShould
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colRoomReportHourMust
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportRoomAlocDescHourMust
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|nrLines
init|=
literal|0
decl_stmt|;
try|try
block|{
name|int
name|nrAllRooms
init|=
literal|0
decl_stmt|,
name|nrAllLectureUse
init|=
literal|0
decl_stmt|,
name|nrAllLectureShouldUse
init|=
literal|0
decl_stmt|;
name|double
name|allSlotsUse
init|=
literal|0.0
decl_stmt|,
name|allSlotsShouldUse
init|=
literal|0.0
decl_stmt|;
name|TreeSet
name|groups
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|Comparator
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|RoomReport
operator|.
name|RoomAllocationGroup
name|g1
init|=
operator|(
name|RoomReport
operator|.
name|RoomAllocationGroup
operator|)
name|o1
decl_stmt|;
name|RoomReport
operator|.
name|RoomAllocationGroup
name|g2
init|=
operator|(
name|RoomReport
operator|.
name|RoomAllocationGroup
operator|)
name|o2
decl_stmt|;
return|return
operator|-
name|Double
operator|.
name|compare
argument_list|(
name|g1
operator|.
name|getMinRoomSize
argument_list|()
argument_list|,
name|g2
operator|.
name|getMinRoomSize
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|groups
operator|.
name|addAll
argument_list|(
name|report
operator|.
name|getGroups
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|groups
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomReport
operator|.
name|RoomAllocationGroup
name|g
init|=
operator|(
name|RoomReport
operator|.
name|RoomAllocationGroup
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|g
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
name|double
name|factor
init|=
operator|(
operator|(
name|double
operator|)
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|)
operator|/
literal|60.0
decl_stmt|;
name|nrAllRooms
operator|+=
name|g
operator|.
name|getNrRooms
argument_list|()
expr_stmt|;
name|allSlotsUse
operator|+=
name|g
operator|.
name|getSlotsUse
argument_list|()
expr_stmt|;
name|allSlotsShouldUse
operator|+=
name|g
operator|.
name|getSlotsShouldUse
argument_list|()
expr_stmt|;
name|nrAllLectureUse
operator|+=
name|g
operator|.
name|getLecturesUse
argument_list|()
expr_stmt|;
name|nrAllLectureShouldUse
operator|+=
name|g
operator|.
name|getLecturesShouldUse
argument_list|()
expr_stmt|;
name|nrLines
operator|++
expr_stmt|;
name|table
operator|.
name|addRow
argument_list|(
operator|new
name|TableRowInterface
argument_list|(
operator|new
name|TableCellInterface
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|g
operator|.
name|getMinRoomSize
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|reportRoomRange
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|g
operator|.
name|getMinRoomSize
argument_list|()
argument_list|)
argument_list|,
operator|(
name|g
operator|.
name|getMaxRoomSize
argument_list|()
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|?
literal|"\u221E"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|g
operator|.
name|getMaxRoomSize
argument_list|()
argument_list|)
operator|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TableCellInterface
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|g
operator|.
name|getActualMinRoomSize
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|reportRoomRange
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|g
operator|.
name|getActualMinRoomSize
argument_list|()
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|g
operator|.
name|getActualMaxRoomSize
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TableCellInterface
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|g
operator|.
name|getNrRooms
argument_list|()
argument_list|,
name|g
operator|.
name|getNrRooms
argument_list|()
operator|+
literal|" ("
operator|+
name|g
operator|.
name|getNrRoomsThisSizeOrBigger
argument_list|()
operator|+
literal|")"
argument_list|)
argument_list|,
operator|new
name|TableCellInterface
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|g
operator|.
name|getLecturesUse
argument_list|()
argument_list|,
name|g
operator|.
name|getLecturesUse
argument_list|()
operator|+
literal|" ("
operator|+
name|nrAllLectureUse
operator|+
literal|")"
argument_list|)
argument_list|,
operator|new
name|TableCellInterface
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|g
operator|.
name|getLecturesShouldUse
argument_list|()
argument_list|,
name|g
operator|.
name|getLecturesShouldUse
argument_list|()
operator|+
literal|" ("
operator|+
name|nrAllLectureShouldUse
operator|+
literal|")"
argument_list|)
argument_list|,
operator|new
name|TableCellInterface
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|g
operator|.
name|getLecturesMustUse
argument_list|()
argument_list|,
name|g
operator|.
name|getLecturesMustUse
argument_list|()
operator|+
literal|" ("
operator|+
name|g
operator|.
name|getLecturesMustUseThisSizeOrBigger
argument_list|()
operator|+
literal|")"
argument_list|)
argument_list|,
operator|new
name|TableCellInterface
argument_list|<
name|Double
argument_list|>
argument_list|(
name|factor
operator|*
name|g
operator|.
name|getSlotsUse
argument_list|()
operator|/
name|g
operator|.
name|getNrRooms
argument_list|()
argument_list|,
name|sDoubleFormat
operator|.
name|format
argument_list|(
name|factor
operator|*
name|g
operator|.
name|getSlotsUse
argument_list|()
operator|/
name|g
operator|.
name|getNrRooms
argument_list|()
argument_list|)
operator|+
literal|" ("
operator|+
name|sDoubleFormat
operator|.
name|format
argument_list|(
name|factor
operator|*
name|allSlotsUse
operator|/
name|nrAllRooms
argument_list|)
operator|+
literal|")"
argument_list|)
argument_list|,
operator|new
name|TableCellInterface
argument_list|<
name|Double
argument_list|>
argument_list|(
name|factor
operator|*
name|g
operator|.
name|getSlotsShouldUse
argument_list|()
operator|/
name|g
operator|.
name|getNrRooms
argument_list|()
argument_list|,
name|sDoubleFormat
operator|.
name|format
argument_list|(
name|factor
operator|*
name|g
operator|.
name|getSlotsShouldUse
argument_list|()
operator|/
name|g
operator|.
name|getNrRooms
argument_list|()
argument_list|)
operator|+
literal|" ("
operator|+
name|sDoubleFormat
operator|.
name|format
argument_list|(
name|factor
operator|*
name|allSlotsShouldUse
operator|/
name|nrAllRooms
argument_list|)
operator|+
literal|")"
argument_list|)
argument_list|,
operator|new
name|TableCellInterface
argument_list|<
name|Double
argument_list|>
argument_list|(
name|factor
operator|*
name|g
operator|.
name|getSlotsMustUse
argument_list|()
operator|/
name|g
operator|.
name|getNrRooms
argument_list|()
argument_list|,
name|sDoubleFormat
operator|.
name|format
argument_list|(
name|factor
operator|*
name|g
operator|.
name|getSlotsMustUse
argument_list|()
operator|/
name|g
operator|.
name|getNrRooms
argument_list|()
argument_list|)
operator|+
literal|" ("
operator|+
name|sDoubleFormat
operator|.
name|format
argument_list|(
name|factor
operator|*
name|g
operator|.
name|getSlotsMustUseThisSizeOrBigger
argument_list|()
operator|/
name|g
operator|.
name|getNrRoomsThisSizeOrBigger
argument_list|()
argument_list|)
operator|+
literal|")"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|table
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedToComputeReport
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nrLines
operator|==
literal|0
operator|&&
operator|!
name|table
operator|.
name|hasErrorMessage
argument_list|()
condition|)
return|return
literal|null
return|;
name|Collections
operator|.
name|sort
argument_list|(
name|table
operator|.
name|getRows
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|TableInterface
operator|.
name|TableRowInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|TableRowInterface
name|r1
parameter_list|,
name|TableRowInterface
name|r2
parameter_list|)
block|{
return|return
name|r1
operator|.
name|compareTo
argument_list|(
name|r2
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
specifier|public
specifier|static
name|TableInterface
name|getDeptBalancingReportTable
parameter_list|(
name|DeptBalancingReport
name|deptBalancingReport
parameter_list|)
block|{
name|TableInterface
name|table
init|=
operator|new
name|TableInterface
argument_list|(
literal|"dept-balancing"
argument_list|,
name|MESSAGES
operator|.
name|reportDepartmentalBalancing
argument_list|()
argument_list|)
decl_stmt|;
name|TableHeaderIterface
index|[]
name|header
init|=
operator|new
name|TableHeaderIterface
index|[
literal|2
operator|+
name|deptBalancingReport
operator|.
name|getSlotsPerDayNoEvening
argument_list|()
operator|/
literal|6
index|]
decl_stmt|;
name|header
index|[
literal|0
index|]
operator|=
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|header
index|[
literal|1
index|]
operator|=
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colPenalty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deptBalancingReport
operator|.
name|getSlotsPerDayNoEvening
argument_list|()
operator|/
literal|6
condition|;
name|i
operator|++
control|)
name|header
index|[
literal|2
operator|+
name|i
index|]
operator|=
operator|new
name|TableHeaderIterface
argument_list|(
name|Constants
operator|.
name|slot2str
argument_list|(
name|deptBalancingReport
operator|.
name|getFirstDaySlot
argument_list|()
operator|+
name|i
operator|*
literal|6
argument_list|)
argument_list|)
operator|.
name|setAlignment
argument_list|(
name|Alignment
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|table
operator|.
name|setHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|deptBalancingReport
operator|.
name|getGroups
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DeptBalancingReport
operator|.
name|DeptBalancingGroup
name|g
init|=
operator|(
name|DeptBalancingReport
operator|.
name|DeptBalancingGroup
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|TableCellInterface
index|[]
name|line
init|=
operator|new
name|TableCellInterface
index|[
literal|2
operator|+
name|deptBalancingReport
operator|.
name|getSlotsPerDayNoEvening
argument_list|()
operator|/
literal|6
index|]
decl_stmt|;
name|line
index|[
literal|0
index|]
operator|=
operator|new
name|TableCellInterface
argument_list|<
name|String
argument_list|>
argument_list|(
name|g
operator|.
name|getDepartmentName
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|penalty
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deptBalancingReport
operator|.
name|getSlotsPerDayNoEvening
argument_list|()
operator|/
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|int
name|slot
init|=
name|deptBalancingReport
operator|.
name|getFirstDaySlot
argument_list|()
operator|+
name|i
operator|*
literal|6
decl_stmt|;
name|int
name|usage
init|=
name|g
operator|.
name|getUsage
argument_list|(
name|slot
argument_list|)
decl_stmt|;
name|int
name|limit
init|=
name|g
operator|.
name|getLimit
argument_list|(
name|slot
argument_list|)
decl_stmt|;
if|if
condition|(
name|usage
operator|>
name|limit
condition|)
name|penalty
operator|+=
name|g
operator|.
name|getExcess
argument_list|(
name|slot
argument_list|)
expr_stmt|;
name|Vector
name|classes
init|=
operator|new
name|Vector
argument_list|(
name|g
operator|.
name|getClasses
argument_list|(
name|slot
argument_list|)
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|classes
argument_list|)
expr_stmt|;
name|TableCellMultiLine
name|cell
init|=
operator|new
name|TableCellMultiLine
argument_list|()
decl_stmt|;
name|int
name|u
init|=
literal|0
decl_stmt|;
name|boolean
name|over
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|classes
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ClassAssignmentDetails
name|ca
init|=
operator|(
name|ClassAssignmentDetails
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|TableCellClickableClassName
name|x
init|=
operator|new
name|TableCellClickableClassName
argument_list|(
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|,
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|nrMeetings
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|deptBalancingReport
operator|.
name|getFirstWorkDay
argument_list|()
init|;
name|j
operator|<=
name|deptBalancingReport
operator|.
name|getLastWorkDay
argument_list|()
condition|;
name|j
operator|++
control|)
if|if
condition|(
operator|(
name|Constants
operator|.
name|DAY_CODES
index|[
name|j
operator|%
literal|7
index|]
operator|&
name|ca
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|nrMeetings
operator|++
expr_stmt|;
name|u
operator|+=
name|nrMeetings
expr_stmt|;
if|if
condition|(
name|u
operator|>
name|limit
operator|&&
operator|!
name|over
condition|)
block|{
name|over
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|cell
operator|.
name|last
argument_list|()
operator|!=
literal|null
condition|)
name|cell
operator|.
name|last
argument_list|()
operator|.
name|setUnderlined
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|x
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cell
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
name|TableCellInterface
name|h
init|=
operator|new
name|TableCellInterface
argument_list|(
name|limit
operator|==
literal|0
condition|?
literal|""
else|:
name|usage
operator|+
literal|" / "
operator|+
name|limit
argument_list|)
decl_stmt|;
if|if
condition|(
name|usage
operator|>
name|limit
condition|)
name|h
operator|.
name|setColor
argument_list|(
literal|"red"
argument_list|)
expr_stmt|;
name|cell
operator|.
name|getChunks
argument_list|()
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|line
index|[
name|i
operator|+
literal|2
index|]
operator|=
name|cell
expr_stmt|;
block|}
name|line
index|[
literal|1
index|]
operator|=
operator|new
name|TableCellInterface
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|penalty
argument_list|)
expr_stmt|;
if|if
condition|(
name|penalty
operator|>
literal|0
condition|)
name|line
index|[
literal|1
index|]
operator|.
name|setColor
argument_list|(
literal|"red"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addRow
argument_list|(
operator|new
name|TableRowInterface
argument_list|(
name|line
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|table
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedToComputeReport
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|table
operator|.
name|getRows
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|TableInterface
operator|.
name|TableRowInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|TableRowInterface
name|r1
parameter_list|,
name|TableRowInterface
name|r2
parameter_list|)
block|{
return|return
name|r1
operator|.
name|compareTo
argument_list|(
name|r2
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|table
operator|.
name|setShowPrefLegend
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
specifier|public
specifier|static
name|TableInterface
name|getViolatedDistrPreferencesReportTable
parameter_list|(
name|ViolatedDistrPreferencesReport
name|report
parameter_list|)
block|{
name|TableInterface
name|table
init|=
operator|new
name|TableInterface
argument_list|(
literal|"dist-pref"
argument_list|,
name|MESSAGES
operator|.
name|reportViolatedDistributionPreferences
argument_list|()
argument_list|)
decl_stmt|;
name|table
operator|.
name|setHeader
argument_list|(
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colDistrubutionType
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colPreference
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colViolations
argument_list|()
argument_list|)
operator|.
name|setAlignment
argument_list|(
name|Alignment
operator|.
name|RIGHT
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colClass
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colDate
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colTime
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colRoom
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|report
operator|.
name|getGroups
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ViolatedDistrPreferencesReport
operator|.
name|ViolatedDistrPreference
name|g
init|=
operator|(
name|ViolatedDistrPreferencesReport
operator|.
name|ViolatedDistrPreference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|TableCellMultiLine
name|classes
init|=
operator|new
name|TableCellMultiLine
argument_list|()
decl_stmt|;
name|TableCellMultiLine
name|dates
init|=
operator|new
name|TableCellMultiLine
argument_list|()
decl_stmt|;
name|TableCellMultiLine
name|times
init|=
operator|new
name|TableCellMultiLine
argument_list|()
decl_stmt|;
name|TableCellMultiLine
name|rooms
init|=
operator|new
name|TableCellMultiLine
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|g
operator|.
name|getClasses
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ClassAssignmentDetails
name|ca
init|=
operator|(
name|ClassAssignmentDetails
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|TimeInfo
name|time
init|=
name|ca
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|TableInterface
operator|.
name|TableCellRooms
name|room
init|=
operator|new
name|TableInterface
operator|.
name|TableCellRooms
argument_list|()
decl_stmt|;
if|if
condition|(
name|ca
operator|.
name|getRoom
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|ca
operator|.
name|getRoom
argument_list|()
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|room
operator|.
name|add
argument_list|(
name|ca
operator|.
name|getRoom
argument_list|()
index|[
name|j
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|ca
operator|.
name|getRoom
argument_list|()
index|[
name|j
index|]
operator|.
name|getColor
argument_list|()
argument_list|,
name|ca
operator|.
name|getRoom
argument_list|()
index|[
name|j
index|]
operator|.
name|getId
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|int2string
argument_list|(
name|ca
operator|.
name|getRoom
argument_list|()
index|[
name|j
index|]
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|classes
operator|.
name|add
argument_list|(
operator|new
name|TableInterface
operator|.
name|TableCellClickableClassName
argument_list|(
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|,
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dates
operator|.
name|add
argument_list|(
operator|new
name|TableCellInterface
argument_list|(
name|time
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|time
operator|.
name|getDatePatternPreference
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|times
operator|.
name|add
argument_list|(
operator|new
name|TableInterface
operator|.
name|TableCellTime
argument_list|(
name|time
operator|.
name|getDaysName
argument_list|()
operator|+
literal|" "
operator|+
name|time
operator|.
name|getStartTime
argument_list|()
operator|+
literal|" - "
operator|+
name|time
operator|.
name|getEndTime
argument_list|()
argument_list|)
operator|.
name|setId
argument_list|(
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
operator|+
literal|","
operator|+
name|time
operator|.
name|getDays
argument_list|()
operator|+
literal|","
operator|+
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|time
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rooms
operator|.
name|add
argument_list|(
name|room
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|addRow
argument_list|(
operator|new
name|TableRowInterface
argument_list|(
operator|new
name|TableCellInterface
argument_list|<
name|String
argument_list|>
argument_list|(
name|g
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableCellInterface
argument_list|<
name|String
argument_list|>
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|int2prolog
argument_list|(
name|g
operator|.
name|getPreference
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getPrefName
argument_list|()
argument_list|)
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|g
operator|.
name|getPreference
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TableCellInterface
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|g
operator|.
name|getNrViolations
argument_list|()
argument_list|)
argument_list|,
name|classes
argument_list|,
name|dates
argument_list|,
name|times
argument_list|,
name|rooms
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|table
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedToComputeReport
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|table
operator|.
name|getRows
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|TableInterface
operator|.
name|TableRowInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|TableRowInterface
name|r1
parameter_list|,
name|TableRowInterface
name|r2
parameter_list|)
block|{
return|return
name|r1
operator|.
name|compareTo
argument_list|(
name|r2
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|table
operator|.
name|setShowPrefLegend
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
specifier|public
specifier|static
name|TableInterface
name|getDiscouragedInstructorBtbReportReportTable
parameter_list|(
name|DiscouragedInstructorBtbReport
name|report
parameter_list|)
block|{
name|TableInterface
name|table
init|=
operator|new
name|TableInterface
argument_list|(
literal|"instructor-btb"
argument_list|,
name|MESSAGES
operator|.
name|reportInstructorBackToBackPreferences
argument_list|()
argument_list|)
decl_stmt|;
name|table
operator|.
name|setHeader
argument_list|(
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colInstructor
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colPreference
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colDistance
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colClass
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colDate
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colTime
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colRoom
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|report
operator|.
name|getGroups
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DiscouragedInstructorBtbReport
operator|.
name|DiscouragedBtb
name|g
init|=
operator|(
name|DiscouragedInstructorBtbReport
operator|.
name|DiscouragedBtb
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|TableCellMultiLine
name|classes
init|=
operator|new
name|TableCellMultiLine
argument_list|()
decl_stmt|;
name|TableCellMultiLine
name|dates
init|=
operator|new
name|TableCellMultiLine
argument_list|()
decl_stmt|;
name|TableCellMultiLine
name|times
init|=
operator|new
name|TableCellMultiLine
argument_list|()
decl_stmt|;
name|TableCellMultiLine
name|rooms
init|=
operator|new
name|TableCellMultiLine
argument_list|()
decl_stmt|;
name|classes
operator|.
name|add
argument_list|(
operator|new
name|TableInterface
operator|.
name|TableCellClickableClassName
argument_list|(
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|,
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dates
operator|.
name|add
argument_list|(
operator|new
name|TableCellInterface
argument_list|(
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternPreference
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|times
operator|.
name|add
argument_list|(
operator|new
name|TableInterface
operator|.
name|TableCellTime
argument_list|(
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getDaysName
argument_list|()
operator|+
literal|" "
operator|+
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getStartTime
argument_list|()
operator|+
literal|" - "
operator|+
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getEndTime
argument_list|()
argument_list|)
operator|.
name|setId
argument_list|(
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
operator|+
literal|","
operator|+
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
operator|+
literal|","
operator|+
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TableInterface
operator|.
name|TableCellRooms
name|froom
init|=
operator|new
name|TableInterface
operator|.
name|TableCellRooms
argument_list|()
decl_stmt|;
if|if
condition|(
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getRoom
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getRoom
argument_list|()
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|froom
operator|.
name|add
argument_list|(
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getRoom
argument_list|()
index|[
name|j
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getRoom
argument_list|()
index|[
name|j
index|]
operator|.
name|getColor
argument_list|()
argument_list|,
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getRoom
argument_list|()
index|[
name|j
index|]
operator|.
name|getId
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|int2string
argument_list|(
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getRoom
argument_list|()
index|[
name|j
index|]
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|rooms
operator|.
name|add
argument_list|(
name|froom
argument_list|)
expr_stmt|;
name|classes
operator|.
name|add
argument_list|(
operator|new
name|TableInterface
operator|.
name|TableCellClickableClassName
argument_list|(
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|,
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dates
operator|.
name|add
argument_list|(
operator|new
name|TableCellInterface
argument_list|(
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternPreference
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|times
operator|.
name|add
argument_list|(
operator|new
name|TableInterface
operator|.
name|TableCellTime
argument_list|(
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getDaysName
argument_list|()
operator|+
literal|" "
operator|+
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getStartTime
argument_list|()
operator|+
literal|" - "
operator|+
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getEndTime
argument_list|()
argument_list|)
operator|.
name|setId
argument_list|(
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
operator|+
literal|","
operator|+
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
operator|+
literal|","
operator|+
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TableInterface
operator|.
name|TableCellRooms
name|sroom
init|=
operator|new
name|TableInterface
operator|.
name|TableCellRooms
argument_list|()
decl_stmt|;
if|if
condition|(
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getRoom
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getRoom
argument_list|()
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|sroom
operator|.
name|add
argument_list|(
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getRoom
argument_list|()
index|[
name|j
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getRoom
argument_list|()
index|[
name|j
index|]
operator|.
name|getColor
argument_list|()
argument_list|,
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getRoom
argument_list|()
index|[
name|j
index|]
operator|.
name|getId
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|int2string
argument_list|(
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getRoom
argument_list|()
index|[
name|j
index|]
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|rooms
operator|.
name|add
argument_list|(
name|sroom
argument_list|)
expr_stmt|;
name|table
operator|.
name|addRow
argument_list|(
operator|new
name|TableRowInterface
argument_list|(
operator|new
name|TableCellInterface
argument_list|<
name|String
argument_list|>
argument_list|(
name|g
operator|.
name|getInstructorName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableCellInterface
argument_list|<
name|String
argument_list|>
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|g
operator|.
name|getPreference
argument_list|()
argument_list|)
operator|.
name|getPrefName
argument_list|()
argument_list|)
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|g
operator|.
name|getPreference
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TableCellInterface
argument_list|<
name|Double
argument_list|>
argument_list|(
name|g
operator|.
name|getDistance
argument_list|()
argument_list|,
name|sDoubleFormat
operator|.
name|format
argument_list|(
name|g
operator|.
name|getDistance
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|classes
argument_list|,
name|dates
argument_list|,
name|times
argument_list|,
name|rooms
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|table
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedToComputeReport
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|table
operator|.
name|getRows
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|TableInterface
operator|.
name|TableRowInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|TableRowInterface
name|r1
parameter_list|,
name|TableRowInterface
name|r2
parameter_list|)
block|{
return|return
name|r1
operator|.
name|compareTo
argument_list|(
name|r2
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|table
operator|.
name|setShowPrefLegend
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
specifier|public
specifier|static
name|TableInterface
name|getStudentConflictsReportTable
parameter_list|(
name|StudentConflictsReport
name|report
parameter_list|)
block|{
name|boolean
name|hasHard
init|=
literal|false
decl_stmt|;
name|boolean
name|hasDistance
init|=
literal|false
decl_stmt|;
name|boolean
name|hasFixed
init|=
literal|false
decl_stmt|;
name|boolean
name|hasCommitted
init|=
literal|false
decl_stmt|;
name|boolean
name|hasImportant
init|=
literal|false
decl_stmt|;
name|boolean
name|hasInstructor
init|=
literal|false
decl_stmt|;
name|boolean
name|hasWorkday
init|=
literal|false
decl_stmt|;
for|for
control|(
name|JenrlInfo
name|g
range|:
operator|(
name|Set
argument_list|<
name|JenrlInfo
argument_list|>
operator|)
name|report
operator|.
name|getGroups
argument_list|()
control|)
block|{
if|if
condition|(
name|g
operator|.
name|isHard
argument_list|()
condition|)
name|hasHard
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|g
operator|.
name|isDistance
argument_list|()
condition|)
name|hasDistance
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|g
operator|.
name|isFixed
argument_list|()
condition|)
name|hasFixed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|g
operator|.
name|isCommited
argument_list|()
condition|)
name|hasCommitted
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|g
operator|.
name|isImportant
argument_list|()
condition|)
name|hasImportant
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|g
operator|.
name|isInstructor
argument_list|()
condition|)
name|hasInstructor
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|g
operator|.
name|isWorkDay
argument_list|()
condition|)
name|hasWorkday
operator|=
literal|true
expr_stmt|;
block|}
name|TableInterface
name|table
init|=
operator|new
name|TableInterface
argument_list|(
literal|"student-conf"
argument_list|,
name|MESSAGES
operator|.
name|reportStudentConflicts
argument_list|()
argument_list|)
decl_stmt|;
name|table
operator|.
name|setHeader
argument_list|(
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colNrConflicts
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colClass
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colDate
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colTime
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colRoom
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colStudentConflictHard
argument_list|()
argument_list|)
operator|.
name|setVisible
argument_list|(
name|hasHard
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colStudentConflictDistance
argument_list|()
argument_list|)
operator|.
name|setVisible
argument_list|(
name|hasDistance
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colStudentConflictFixed
argument_list|()
argument_list|)
operator|.
name|setVisible
argument_list|(
name|hasFixed
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colStudentConflictCommitted
argument_list|()
argument_list|)
operator|.
name|setVisible
argument_list|(
name|hasCommitted
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colStudentConflictImportant
argument_list|()
argument_list|)
operator|.
name|setVisible
argument_list|(
name|hasImportant
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colStudentConflictInstructor
argument_list|()
argument_list|)
operator|.
name|setVisible
argument_list|(
name|hasInstructor
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colStudentConflictWorkday
argument_list|()
argument_list|)
operator|.
name|setVisible
argument_list|(
name|hasWorkday
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colCurriculum
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|total
index|[]
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|report
operator|.
name|getGroups
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JenrlInfo
name|g
init|=
operator|(
name|JenrlInfo
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|Math
operator|.
name|round
argument_list|(
name|g
operator|.
name|getJenrl
argument_list|()
argument_list|)
operator|<=
literal|0
condition|)
continue|continue;
name|TableCellMultiLine
name|classes
init|=
operator|new
name|TableCellMultiLine
argument_list|()
decl_stmt|;
name|TableCellMultiLine
name|dates
init|=
operator|new
name|TableCellMultiLine
argument_list|()
decl_stmt|;
name|TableCellMultiLine
name|times
init|=
operator|new
name|TableCellMultiLine
argument_list|()
decl_stmt|;
name|TableCellMultiLine
name|rooms
init|=
operator|new
name|TableCellMultiLine
argument_list|()
decl_stmt|;
name|classes
operator|.
name|add
argument_list|(
operator|new
name|TableInterface
operator|.
name|TableCellClickableClassName
argument_list|(
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|,
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dates
operator|.
name|add
argument_list|(
operator|new
name|TableCellInterface
argument_list|(
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternPreference
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|times
operator|.
name|add
argument_list|(
operator|new
name|TableInterface
operator|.
name|TableCellTime
argument_list|(
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getDaysName
argument_list|()
operator|+
literal|" "
operator|+
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getStartTime
argument_list|()
operator|+
literal|" - "
operator|+
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getEndTime
argument_list|()
argument_list|)
operator|.
name|setId
argument_list|(
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
operator|+
literal|","
operator|+
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
operator|+
literal|","
operator|+
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TableInterface
operator|.
name|TableCellRooms
name|froom
init|=
operator|new
name|TableInterface
operator|.
name|TableCellRooms
argument_list|()
decl_stmt|;
if|if
condition|(
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getRoom
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getRoom
argument_list|()
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|froom
operator|.
name|add
argument_list|(
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getRoom
argument_list|()
index|[
name|j
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getRoom
argument_list|()
index|[
name|j
index|]
operator|.
name|getColor
argument_list|()
argument_list|,
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getRoom
argument_list|()
index|[
name|j
index|]
operator|.
name|getId
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|int2string
argument_list|(
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getRoom
argument_list|()
index|[
name|j
index|]
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|rooms
operator|.
name|add
argument_list|(
name|froom
argument_list|)
expr_stmt|;
name|classes
operator|.
name|add
argument_list|(
operator|new
name|TableInterface
operator|.
name|TableCellClickableClassName
argument_list|(
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|,
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dates
operator|.
name|add
argument_list|(
operator|new
name|TableCellInterface
argument_list|(
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternPreference
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|times
operator|.
name|add
argument_list|(
operator|new
name|TableInterface
operator|.
name|TableCellTime
argument_list|(
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getDaysName
argument_list|()
operator|+
literal|" "
operator|+
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getStartTime
argument_list|()
operator|+
literal|" - "
operator|+
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getEndTime
argument_list|()
argument_list|)
operator|.
name|setId
argument_list|(
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
operator|+
literal|","
operator|+
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
operator|+
literal|","
operator|+
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TableInterface
operator|.
name|TableCellRooms
name|sroom
init|=
operator|new
name|TableInterface
operator|.
name|TableCellRooms
argument_list|()
decl_stmt|;
if|if
condition|(
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getRoom
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getRoom
argument_list|()
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|sroom
operator|.
name|add
argument_list|(
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getRoom
argument_list|()
index|[
name|j
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getRoom
argument_list|()
index|[
name|j
index|]
operator|.
name|getColor
argument_list|()
argument_list|,
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getRoom
argument_list|()
index|[
name|j
index|]
operator|.
name|getId
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|int2string
argument_list|(
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getRoom
argument_list|()
index|[
name|j
index|]
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|rooms
operator|.
name|add
argument_list|(
name|sroom
argument_list|)
expr_stmt|;
name|table
operator|.
name|addRow
argument_list|(
operator|new
name|TableRowInterface
argument_list|(
operator|new
name|TableCellInterface
argument_list|<
name|Long
argument_list|>
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|g
operator|.
name|getJenrl
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|classes
argument_list|,
name|dates
argument_list|,
name|times
argument_list|,
name|rooms
argument_list|,
operator|new
name|TableCellBoolean
argument_list|(
name|g
operator|.
name|isHard
argument_list|()
argument_list|)
operator|.
name|setFormattedValue
argument_list|(
name|g
operator|.
name|isHard
argument_list|()
condition|?
name|MESSAGES
operator|.
name|exportTrue
argument_list|()
else|:
name|MESSAGES
operator|.
name|exportFalse
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableCellInterface
argument_list|<
name|Double
argument_list|>
argument_list|(
name|g
operator|.
name|isDistance
argument_list|()
condition|?
operator|new
name|Double
argument_list|(
name|g
operator|.
name|getDistance
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
operator|.
name|setFormattedValue
argument_list|(
name|g
operator|.
name|isDistance
argument_list|()
condition|?
name|MESSAGES
operator|.
name|reportDistanceInMeter
argument_list|(
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|g
operator|.
name|getDistance
argument_list|()
argument_list|)
argument_list|)
else|:
literal|""
argument_list|)
argument_list|,
operator|new
name|TableCellBoolean
argument_list|(
name|g
operator|.
name|isFixed
argument_list|()
argument_list|)
operator|.
name|setFormattedValue
argument_list|(
name|g
operator|.
name|isFixed
argument_list|()
condition|?
name|MESSAGES
operator|.
name|exportTrue
argument_list|()
else|:
name|MESSAGES
operator|.
name|exportFalse
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableCellBoolean
argument_list|(
name|g
operator|.
name|isCommited
argument_list|()
argument_list|)
operator|.
name|setFormattedValue
argument_list|(
name|g
operator|.
name|isCommited
argument_list|()
condition|?
name|MESSAGES
operator|.
name|exportTrue
argument_list|()
else|:
name|MESSAGES
operator|.
name|exportFalse
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableCellBoolean
argument_list|(
name|g
operator|.
name|isImportant
argument_list|()
argument_list|)
operator|.
name|setFormattedValue
argument_list|(
name|g
operator|.
name|isImportant
argument_list|()
condition|?
name|MESSAGES
operator|.
name|exportTrue
argument_list|()
else|:
name|MESSAGES
operator|.
name|exportFalse
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableCellBoolean
argument_list|(
name|g
operator|.
name|isInstructor
argument_list|()
argument_list|)
operator|.
name|setFormattedValue
argument_list|(
name|g
operator|.
name|isInstructor
argument_list|()
condition|?
name|MESSAGES
operator|.
name|exportTrue
argument_list|()
else|:
name|MESSAGES
operator|.
name|exportFalse
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableCellBoolean
argument_list|(
name|g
operator|.
name|isWorkDay
argument_list|()
argument_list|)
operator|.
name|setFormattedValue
argument_list|(
name|g
operator|.
name|isWorkDay
argument_list|()
condition|?
name|MESSAGES
operator|.
name|exportTrue
argument_list|()
else|:
name|MESSAGES
operator|.
name|exportFalse
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableCellText
argument_list|(
name|g
operator|.
name|getCurriculumText
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|total
index|[
literal|0
index|]
operator|+=
name|Math
operator|.
name|round
argument_list|(
name|g
operator|.
name|getJenrl
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|g
operator|.
name|isHard
argument_list|()
condition|)
name|total
index|[
literal|1
index|]
operator|+=
name|Math
operator|.
name|round
argument_list|(
name|g
operator|.
name|getJenrl
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|g
operator|.
name|isDistance
argument_list|()
condition|)
name|total
index|[
literal|2
index|]
operator|+=
name|Math
operator|.
name|round
argument_list|(
name|g
operator|.
name|getJenrl
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|g
operator|.
name|isFixed
argument_list|()
condition|)
name|total
index|[
literal|3
index|]
operator|+=
name|Math
operator|.
name|round
argument_list|(
name|g
operator|.
name|getJenrl
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|g
operator|.
name|isCommited
argument_list|()
condition|)
name|total
index|[
literal|4
index|]
operator|+=
name|Math
operator|.
name|round
argument_list|(
name|g
operator|.
name|getJenrl
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|g
operator|.
name|isImportant
argument_list|()
condition|)
name|total
index|[
literal|5
index|]
operator|+=
name|Math
operator|.
name|round
argument_list|(
name|g
operator|.
name|getJenrl
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|g
operator|.
name|isInstructor
argument_list|()
condition|)
name|total
index|[
literal|6
index|]
operator|+=
operator|(
name|g
operator|.
name|isInstructor
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
if|if
condition|(
name|g
operator|.
name|isWorkDay
argument_list|()
condition|)
name|total
index|[
literal|7
index|]
operator|+=
name|Math
operator|.
name|round
argument_list|(
name|g
operator|.
name|getJenrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|addRow
argument_list|(
operator|new
name|TableRowInterface
argument_list|(
operator|new
name|TableCellInterface
argument_list|<
name|Long
argument_list|>
argument_list|(
operator|(
name|long
operator|)
name|total
index|[
literal|0
index|]
argument_list|)
argument_list|,
operator|new
name|TableCellText
argument_list|(
name|MESSAGES
operator|.
name|reportTotal
argument_list|()
argument_list|)
operator|.
name|setStyleName
argument_list|(
literal|"italic"
argument_list|)
argument_list|,
operator|new
name|TableCellText
argument_list|(
literal|""
argument_list|)
argument_list|,
operator|new
name|TableCellText
argument_list|(
literal|""
argument_list|)
argument_list|,
operator|new
name|TableCellText
argument_list|(
literal|""
argument_list|)
argument_list|,
operator|new
name|TableCellBoolean
argument_list|(
literal|null
argument_list|)
operator|.
name|setFormattedValue
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|total
index|[
literal|1
index|]
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TableCellInterface
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|1000
operator|*
name|total
index|[
literal|2
index|]
argument_list|)
operator|.
name|setFormattedValue
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|total
index|[
literal|2
index|]
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TableCellBoolean
argument_list|(
literal|null
argument_list|)
operator|.
name|setFormattedValue
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|total
index|[
literal|3
index|]
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TableCellBoolean
argument_list|(
literal|null
argument_list|)
operator|.
name|setFormattedValue
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|total
index|[
literal|4
index|]
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TableCellBoolean
argument_list|(
literal|null
argument_list|)
operator|.
name|setFormattedValue
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|total
index|[
literal|5
index|]
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TableCellBoolean
argument_list|(
literal|null
argument_list|)
operator|.
name|setFormattedValue
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|total
index|[
literal|6
index|]
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TableCellBoolean
argument_list|(
literal|null
argument_list|)
operator|.
name|setFormattedValue
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|total
index|[
literal|7
index|]
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TableCellText
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|table
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedToComputeReport
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|table
operator|.
name|getRows
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|TableInterface
operator|.
name|TableRowInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|TableRowInterface
name|r1
parameter_list|,
name|TableRowInterface
name|r2
parameter_list|)
block|{
return|return
name|r1
operator|.
name|compareTo
argument_list|(
name|r2
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|table
operator|.
name|setShowPrefLegend
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
specifier|public
specifier|static
name|TableInterface
name|getSameSubpartBalancingReportTable
parameter_list|(
name|SameSubpartBalancingReport
name|report
parameter_list|)
block|{
name|TableInterface
name|table
init|=
operator|new
name|TableInterface
argument_list|(
literal|"section-balanc"
argument_list|,
name|MESSAGES
operator|.
name|reportSectionBalancing
argument_list|()
argument_list|)
decl_stmt|;
name|TableHeaderIterface
index|[]
name|header
init|=
operator|new
name|TableHeaderIterface
index|[
literal|2
operator|+
name|report
operator|.
name|getSlotsPerDayNoEvening
argument_list|()
operator|/
literal|6
index|]
decl_stmt|;
name|header
index|[
literal|0
index|]
operator|=
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|header
index|[
literal|1
index|]
operator|=
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colPenalty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|report
operator|.
name|getSlotsPerDayNoEvening
argument_list|()
operator|/
literal|6
condition|;
name|i
operator|++
control|)
name|header
index|[
literal|2
operator|+
name|i
index|]
operator|=
operator|new
name|TableHeaderIterface
argument_list|(
name|Constants
operator|.
name|slot2str
argument_list|(
name|report
operator|.
name|getFirstDaySlot
argument_list|()
operator|+
name|i
operator|*
literal|6
argument_list|)
argument_list|)
operator|.
name|setAlignment
argument_list|(
name|Alignment
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|table
operator|.
name|setHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|report
operator|.
name|getGroups
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SameSubpartBalancingReport
operator|.
name|SameSubpartBalancingGroup
name|g
init|=
operator|(
name|SameSubpartBalancingReport
operator|.
name|SameSubpartBalancingGroup
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|TableCellInterface
index|[]
name|line
init|=
operator|new
name|TableCellInterface
index|[
literal|2
operator|+
name|report
operator|.
name|getSlotsPerDayNoEvening
argument_list|()
operator|/
literal|6
index|]
decl_stmt|;
name|line
index|[
literal|0
index|]
operator|=
operator|new
name|TableCellInterface
argument_list|<
name|String
argument_list|>
argument_list|(
name|g
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|penalty
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|report
operator|.
name|getSlotsPerDayNoEvening
argument_list|()
operator|/
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|int
name|slot
init|=
name|report
operator|.
name|getFirstDaySlot
argument_list|()
operator|+
name|i
operator|*
literal|6
decl_stmt|;
name|int
name|usage
init|=
name|g
operator|.
name|getUsage
argument_list|(
name|slot
argument_list|)
decl_stmt|;
name|int
name|limit
init|=
name|g
operator|.
name|getLimit
argument_list|(
name|slot
argument_list|)
decl_stmt|;
if|if
condition|(
name|usage
operator|>
name|limit
condition|)
name|penalty
operator|+=
name|g
operator|.
name|getExcess
argument_list|(
name|slot
argument_list|)
expr_stmt|;
name|Vector
name|classes
init|=
operator|new
name|Vector
argument_list|(
name|g
operator|.
name|getClasses
argument_list|(
name|slot
argument_list|)
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|classes
argument_list|)
expr_stmt|;
name|TableCellMultiLine
name|cell
init|=
operator|new
name|TableCellMultiLine
argument_list|()
decl_stmt|;
name|int
name|u
init|=
literal|0
decl_stmt|;
name|boolean
name|over
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|classes
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ClassAssignmentDetails
name|ca
init|=
operator|(
name|ClassAssignmentDetails
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|TableCellClickableClassName
name|x
init|=
operator|new
name|TableCellClickableClassName
argument_list|(
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|,
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|nrMeetings
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|report
operator|.
name|getFirstWorkDay
argument_list|()
init|;
name|j
operator|<=
name|report
operator|.
name|getLastWorkDay
argument_list|()
condition|;
name|j
operator|++
control|)
if|if
condition|(
operator|(
name|Constants
operator|.
name|DAY_CODES
index|[
name|j
operator|%
literal|7
index|]
operator|&
name|ca
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|nrMeetings
operator|++
expr_stmt|;
name|u
operator|+=
name|nrMeetings
expr_stmt|;
if|if
condition|(
name|u
operator|>
name|limit
operator|&&
operator|!
name|over
condition|)
block|{
name|over
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|cell
operator|.
name|last
argument_list|()
operator|!=
literal|null
condition|)
name|cell
operator|.
name|last
argument_list|()
operator|.
name|setUnderlined
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|x
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cell
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
name|TableCellInterface
name|h
init|=
operator|new
name|TableCellInterface
argument_list|(
name|limit
operator|==
literal|0
condition|?
literal|""
else|:
name|usage
operator|+
literal|" / "
operator|+
name|limit
argument_list|)
decl_stmt|;
if|if
condition|(
name|usage
operator|>
name|limit
condition|)
name|h
operator|.
name|setColor
argument_list|(
literal|"red"
argument_list|)
expr_stmt|;
name|cell
operator|.
name|getChunks
argument_list|()
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|line
index|[
name|i
operator|+
literal|2
index|]
operator|=
name|cell
expr_stmt|;
block|}
name|line
index|[
literal|1
index|]
operator|=
operator|new
name|TableCellInterface
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|penalty
argument_list|)
expr_stmt|;
if|if
condition|(
name|penalty
operator|>
literal|0
condition|)
name|line
index|[
literal|1
index|]
operator|.
name|setColor
argument_list|(
literal|"red"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addRow
argument_list|(
operator|new
name|TableRowInterface
argument_list|(
name|line
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|table
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedToComputeReport
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|table
operator|.
name|getRows
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|TableInterface
operator|.
name|TableRowInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|TableRowInterface
name|r1
parameter_list|,
name|TableRowInterface
name|r2
parameter_list|)
block|{
return|return
name|r1
operator|.
name|compareTo
argument_list|(
name|r2
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|table
operator|.
name|setShowPrefLegend
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
specifier|public
specifier|static
name|TableCellInterface
name|dispNumber
parameter_list|(
name|int
name|value
parameter_list|)
block|{
return|return
operator|new
name|TableCellInterface
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|value
argument_list|,
name|value
operator|==
literal|0
condition|?
literal|""
else|:
name|value
operator|<=
literal|0
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
else|:
literal|"+"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
operator|.
name|setColor
argument_list|(
name|value
operator|<
literal|0
condition|?
literal|"green"
else|:
name|value
operator|>
literal|0
condition|?
literal|"red"
else|:
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TableCellInterface
name|dispNumber
parameter_list|(
name|double
name|value
parameter_list|)
block|{
return|return
operator|new
name|TableCellInterface
argument_list|<
name|Double
argument_list|>
argument_list|(
name|value
argument_list|,
name|Math
operator|.
name|round
argument_list|(
literal|1000.0
operator|*
name|value
argument_list|)
operator|==
literal|0.0
condition|?
literal|""
else|:
operator|(
name|value
operator|>=
literal|0.0005
condition|?
literal|"+"
else|:
literal|""
operator|)
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|value
argument_list|)
argument_list|)
operator|.
name|setColor
argument_list|(
name|value
operator|<
literal|0
condition|?
literal|"green"
else|:
name|value
operator|>
literal|0
condition|?
literal|"red"
else|:
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TableInterface
name|getPerturbationReportTable
parameter_list|(
name|PerturbationReport
name|report
parameter_list|)
block|{
name|TableInterface
name|table
init|=
operator|new
name|TableInterface
argument_list|(
literal|"perturbations"
argument_list|,
name|MESSAGES
operator|.
name|reportPerturbations
argument_list|()
argument_list|)
decl_stmt|;
name|table
operator|.
name|setHeader
argument_list|(
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colClass
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportPertClass
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colDate
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportPertDate
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colTime
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportPertTime
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colRoom
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportPertRoom
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colShortDist
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportPertDistance
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colPerturbationStudents
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportPertStudents
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colPerturbationStudentsTime
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportPertStudentsTime
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colPerturbationStudentsRoom
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportPertStudentsRoom
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colPerturbationStudentsBuilding
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportPertStudentsBuilding
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colPerturbationInstructor
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportPertInstructor
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colPerturbationInstructorTime
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportPertInstructorTime
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colPerturbationInstructorRoom
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportPertInstructorRoom
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colPerturbationInstructorBuilding
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportPertInstructorBuilding
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colPerturbationRoom
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportPertRoomChange
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colPerturbationBuilding
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportPertBuildingChange
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colPerturbationTime
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportPertTimeChange
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colPerturbationDay
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportPertDayChange
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colPerturbationHour
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportPertHourChange
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colPerturbationTooFarStudent
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportPertTooFarStudents
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colPerturbationTooFarInstructor
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportPertTooFarInstructor
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colPerturbationDeltaStudentConflicts
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportPertDeltaStudentConf
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colPerturbationNewStudentConflicts
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportPertNewStudentConf
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colPerturbationDeltaTimePref
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportPertDeltaTimePref
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colPerturbationDeltaRoomPref
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportPertDeltaRoomPref
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TableHeaderIterface
argument_list|(
name|MESSAGES
operator|.
name|colPerturbationDeltaInstructorBTB
argument_list|()
argument_list|)
operator|.
name|setDescription
argument_list|(
name|MESSAGES
operator|.
name|reportPertDeltaInstructorBTBPref
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|report
operator|.
name|getGroups
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PerturbationReport
operator|.
name|PerturbationGroup
name|g
init|=
operator|(
name|PerturbationReport
operator|.
name|PerturbationGroup
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ClassAssignmentDetails
name|ca
init|=
name|g
operator|.
name|getClazz
argument_list|()
decl_stmt|;
name|ClassAssignmentDetails
operator|.
name|ClassInfo
name|clazz
init|=
name|ca
operator|.
name|getClazz
argument_list|()
decl_stmt|;
name|ClassAssignmentDetails
operator|.
name|TimeInfo
name|timeBefore
init|=
name|ca
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|ClassAssignmentDetails
operator|.
name|TimeInfo
name|timeAfter
init|=
name|ca
operator|.
name|getAssignedTime
argument_list|()
decl_stmt|;
name|TableCellChange
name|date
init|=
operator|new
name|TableCellChange
argument_list|(
name|timeBefore
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|TableCellInterface
argument_list|(
name|timeBefore
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|timeBefore
operator|.
name|getDatePatternPreference
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|timeAfter
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|TableCellInterface
argument_list|(
name|timeAfter
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|timeAfter
operator|.
name|getDatePatternPreference
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TableCellChange
name|time
init|=
operator|new
name|TableCellChange
argument_list|(
name|timeBefore
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|TableInterface
operator|.
name|TableCellTime
argument_list|(
name|timeBefore
operator|.
name|getDaysName
argument_list|()
operator|+
literal|" "
operator|+
name|timeBefore
operator|.
name|getStartTime
argument_list|()
operator|+
literal|" - "
operator|+
name|timeBefore
operator|.
name|getEndTime
argument_list|()
argument_list|)
operator|.
name|setId
argument_list|(
name|clazz
operator|.
name|getClassId
argument_list|()
operator|+
literal|","
operator|+
name|timeBefore
operator|.
name|getDays
argument_list|()
operator|+
literal|","
operator|+
name|timeBefore
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|timeBefore
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|timeAfter
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|TableInterface
operator|.
name|TableCellTime
argument_list|(
name|timeAfter
operator|.
name|getDaysName
argument_list|()
operator|+
literal|" "
operator|+
name|timeAfter
operator|.
name|getStartTime
argument_list|()
operator|+
literal|" - "
operator|+
name|timeAfter
operator|.
name|getEndTime
argument_list|()
argument_list|)
operator|.
name|setId
argument_list|(
name|clazz
operator|.
name|getClassId
argument_list|()
operator|+
literal|","
operator|+
name|timeAfter
operator|.
name|getDays
argument_list|()
operator|+
literal|","
operator|+
name|timeAfter
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|timeAfter
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ClassAssignmentDetails
operator|.
name|RoomInfo
index|[]
name|roomBefore
init|=
name|ca
operator|.
name|getRoom
argument_list|()
decl_stmt|;
name|ClassAssignmentDetails
operator|.
name|RoomInfo
index|[]
name|roomAfter
init|=
name|ca
operator|.
name|getAssignedRoom
argument_list|()
decl_stmt|;
name|TableCellChange
name|room
init|=
operator|new
name|TableCellChange
argument_list|()
decl_stmt|;
if|if
condition|(
name|roomBefore
operator|!=
literal|null
condition|)
block|{
name|TableCellRooms
name|beforeRooms
init|=
operator|new
name|TableCellRooms
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|roomBefore
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|beforeRooms
operator|.
name|add
argument_list|(
name|roomBefore
index|[
name|j
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|roomBefore
index|[
name|j
index|]
operator|.
name|getColor
argument_list|()
argument_list|,
name|roomBefore
index|[
name|j
index|]
operator|.
name|getId
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|int2string
argument_list|(
name|roomBefore
index|[
name|j
index|]
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|room
operator|.
name|setFirst
argument_list|(
name|beforeRooms
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|roomAfter
operator|!=
literal|null
condition|)
block|{
name|TableCellRooms
name|afterRooms
init|=
operator|new
name|TableCellRooms
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|roomAfter
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|afterRooms
operator|.
name|add
argument_list|(
name|roomAfter
index|[
name|j
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|roomAfter
index|[
name|j
index|]
operator|.
name|getColor
argument_list|()
argument_list|,
name|roomAfter
index|[
name|j
index|]
operator|.
name|getId
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|int2string
argument_list|(
name|roomAfter
index|[
name|j
index|]
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|room
operator|.
name|setSecond
argument_list|(
name|afterRooms
argument_list|)
expr_stmt|;
if|if
condition|(
name|roomAfter
operator|.
name|length
operator|==
literal|0
operator|&&
name|roomBefore
operator|==
literal|null
condition|)
name|room
operator|.
name|setFirst
argument_list|(
operator|new
name|TableCellRooms
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|addRow
argument_list|(
operator|new
name|TableRowInterface
argument_list|(
name|g
operator|.
name|getClazz
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|,
literal|"gwt.jsp?page=suggestions&menu=hide&id="
operator|+
name|clazz
operator|.
name|getClassId
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|dialogSuggestions
argument_list|()
argument_list|,
operator|new
name|TableCellClickableClassName
argument_list|(
name|clazz
operator|.
name|getClassId
argument_list|()
argument_list|,
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|clazz
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|date
argument_list|,
name|time
argument_list|,
name|room
argument_list|,
operator|new
name|TableCellInterface
argument_list|<
name|Double
argument_list|>
argument_list|(
name|g
operator|.
name|distance
argument_list|)
operator|.
name|setFormattedValue
argument_list|(
operator|(
name|Math
operator|.
name|round
argument_list|(
name|g
operator|.
name|distance
argument_list|)
operator|>
literal|0
condition|?
name|MESSAGES
operator|.
name|reportDistanceInMeter
argument_list|(
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|g
operator|.
name|distance
argument_list|)
argument_list|)
else|:
literal|""
operator|)
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|g
operator|.
name|affectedStudents
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|g
operator|.
name|affectedStudentsByTime
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|g
operator|.
name|affectedStudentsByRoom
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|g
operator|.
name|affectedStudentsByBldg
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|g
operator|.
name|affectedInstructors
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|g
operator|.
name|affectedInstructorsByTime
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|g
operator|.
name|affectedInstructorsByRoom
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|g
operator|.
name|affectedInstructorsByBldg
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|g
operator|.
name|differentRoom
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|g
operator|.
name|differentBuilding
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|g
operator|.
name|differentTime
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|g
operator|.
name|differentDay
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|g
operator|.
name|differentHour
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|g
operator|.
name|tooFarForStudents
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|g
operator|.
name|tooFarForInstructors
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|g
operator|.
name|deltaStudentConflicts
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|g
operator|.
name|newStudentConflicts
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|g
operator|.
name|deltaTimePreferences
argument_list|)
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|g
operator|.
name|deltaRoomPreferences
argument_list|)
argument_list|,
name|dispNumber
argument_list|(
name|g
operator|.
name|deltaInstructorDistancePreferences
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|table
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedToComputeReport
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|table
operator|.
name|getRows
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|TableInterface
operator|.
name|TableRowInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|TableRowInterface
name|r1
parameter_list|,
name|TableRowInterface
name|r2
parameter_list|)
block|{
return|return
name|r1
operator|.
name|compareTo
argument_list|(
name|r2
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
block|}
end_class

end_unit

