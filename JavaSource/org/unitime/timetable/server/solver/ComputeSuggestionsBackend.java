begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|StudentOverlapConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|placement
operator|.
name|DeltaTimePreference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Lecture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimetableModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|criteria
operator|.
name|Criterion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solution
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|TimeSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|Query
operator|.
name|TermMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|ComputeSuggestionsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|SelectedAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|Suggestion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|Suggestions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|SolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|TimetableSolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|ComputeSuggestionsRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|ComputeSuggestionsBackend
implements|implements
name|GwtRpcImplementation
argument_list|<
name|ComputeSuggestionsRequest
argument_list|,
name|Suggestions
argument_list|>
block|{
specifier|protected
specifier|static
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|GwtConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
name|SolverService
argument_list|<
name|SolverProxy
argument_list|>
name|courseTimetablingSolverService
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Suggestions
name|execute
parameter_list|(
name|ComputeSuggestionsRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|Suggestions
argument_list|)
expr_stmt|;
name|SuggestionsContext
name|cx
init|=
operator|new
name|SuggestionsContext
argument_list|()
decl_stmt|;
name|String
name|instructorFormat
init|=
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
name|UserProperty
operator|.
name|NameFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructorFormat
operator|!=
literal|null
condition|)
name|cx
operator|.
name|setInstructorNameFormat
argument_list|(
name|instructorFormat
argument_list|)
expr_stmt|;
name|SolverProxy
name|solver
init|=
name|courseTimetablingSolverService
operator|.
name|getSolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|warnSolverNotLoaded
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|solver
operator|.
name|isWorking
argument_list|()
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|warnSolverIsWorking
argument_list|()
argument_list|)
throw|;
name|Suggestions
name|response
init|=
name|solver
operator|.
name|computeSuggestions
argument_list|(
name|cx
argument_list|,
name|request
argument_list|)
decl_stmt|;
return|return
name|response
return|;
block|}
specifier|public
specifier|static
name|Suggestions
name|computeSuggestions
parameter_list|(
name|SuggestionsContext
name|context
parameter_list|,
name|TimetableSolver
name|solver
parameter_list|,
name|ComputeSuggestionsRequest
name|request
parameter_list|)
block|{
name|Suggestions
name|suggestions
init|=
operator|new
name|Suggestions
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Solution
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|solution
init|=
name|solver
operator|.
name|currentSolution
argument_list|()
decl_stmt|;
name|TimetableModel
name|model
init|=
operator|(
name|TimetableModel
operator|)
name|solution
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|Assignment
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|assignment
init|=
name|solution
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Lecture
argument_list|>
name|unAssignedVariables
init|=
operator|new
name|ArrayList
argument_list|<
name|Lecture
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|initialAssignments
init|=
operator|new
name|HashMap
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Lecture
name|lec
range|:
name|assignment
operator|.
name|assignedVariables
argument_list|()
control|)
name|initialAssignments
operator|.
name|put
argument_list|(
name|lec
argument_list|,
name|assignment
operator|.
name|getValue
argument_list|(
name|lec
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|conflictsToResolve
init|=
operator|new
name|HashMap
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|resolvedLectures
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Placement
argument_list|>
name|hints
init|=
operator|new
name|ArrayList
argument_list|<
name|Placement
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|descriptions
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|canAssign
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasAssignments
argument_list|()
condition|)
block|{
for|for
control|(
name|SelectedAssignment
name|a
range|:
name|request
operator|.
name|getAssignments
argument_list|()
control|)
block|{
name|Placement
name|plac
init|=
name|SelectedAssignmentBackend
operator|.
name|getPlacement
argument_list|(
name|model
argument_list|,
name|a
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|plac
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|plac
operator|.
name|variable
argument_list|()
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getClassId
argument_list|()
argument_list|)
operator|&&
operator|(
name|request
operator|.
name|isPlacements
argument_list|()
operator|||
name|plac
operator|.
name|equals
argument_list|(
name|assignment
operator|.
name|getValue
argument_list|(
name|plac
operator|.
name|variable
argument_list|()
argument_list|)
argument_list|)
operator|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|plac
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|String
name|reason
init|=
name|plac
operator|.
name|getNotValidReason
argument_list|(
name|assignment
argument_list|,
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.UseAmPm"
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|reason
operator|==
literal|null
condition|?
literal|"room or instructor not avaiable"
else|:
name|reason
argument_list|)
throw|;
block|}
name|Lecture
name|lect
init|=
operator|(
name|Lecture
operator|)
name|plac
operator|.
name|variable
argument_list|()
decl_stmt|;
name|hints
operator|.
name|add
argument_list|(
name|plac
argument_list|)
expr_stmt|;
name|SelectedAssignmentBackend
operator|.
name|fillDescriptions
argument_list|(
name|assignment
argument_list|,
name|plac
argument_list|,
name|descriptions
argument_list|)
expr_stmt|;
name|Set
name|conflicts
init|=
name|model
operator|.
name|conflictValues
argument_list|(
name|assignment
argument_list|,
name|plac
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|conflicts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Placement
name|conflictPlacement
init|=
operator|(
name|Placement
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|conflictsToResolve
operator|.
name|put
argument_list|(
name|conflictPlacement
operator|.
name|variable
argument_list|()
argument_list|,
name|conflictPlacement
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|unassign
argument_list|(
literal|0
argument_list|,
name|conflictPlacement
operator|.
name|variable
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|conflicts
operator|.
name|contains
argument_list|(
name|plac
argument_list|)
condition|)
block|{
name|resolvedLectures
operator|.
name|add
argument_list|(
name|lect
operator|.
name|getClassId
argument_list|()
argument_list|)
expr_stmt|;
name|conflictsToResolve
operator|.
name|remove
argument_list|(
name|lect
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|plac
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|canAssign
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
name|Lecture
name|lecture
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Lecture
name|l
range|:
name|model
operator|.
name|variables
argument_list|()
control|)
if|if
condition|(
name|l
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
name|lecture
operator|=
name|l
expr_stmt|;
if|if
condition|(
name|lecture
operator|==
literal|null
condition|)
for|for
control|(
name|Lecture
name|l
range|:
name|model
operator|.
name|constantVariables
argument_list|()
control|)
if|if
condition|(
name|l
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
name|lecture
operator|=
name|l
expr_stmt|;
if|if
condition|(
name|canAssign
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|isPlacements
argument_list|()
condition|)
block|{
name|resolvedLectures
operator|.
name|remove
argument_list|(
name|request
operator|.
name|getClassId
argument_list|()
argument_list|)
expr_stmt|;
name|placements
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|suggestions
argument_list|,
operator|new
name|Query
argument_list|(
name|request
operator|.
name|getFilter
argument_list|()
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|lecture
argument_list|,
name|resolvedLectures
argument_list|,
name|conflictsToResolve
argument_list|,
name|initialAssignments
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|Lecture
argument_list|>
name|initialLectures
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|resolvedLectures
operator|.
name|contains
argument_list|(
name|request
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
block|{
name|initialLectures
operator|=
operator|new
name|ArrayList
argument_list|<
name|Lecture
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|initialLectures
operator|.
name|add
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
block|}
name|backtrack
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|suggestions
argument_list|,
operator|new
name|Query
argument_list|(
name|request
operator|.
name|getFilter
argument_list|()
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|initialLectures
argument_list|,
name|resolvedLectures
argument_list|,
name|conflictsToResolve
argument_list|,
name|initialAssignments
argument_list|,
name|request
operator|.
name|getDepth
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Placement
name|plac
range|:
name|hints
control|)
block|{
name|Lecture
name|lect
init|=
name|plac
operator|.
name|variable
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|.
name|getValue
argument_list|(
name|lect
argument_list|)
operator|!=
literal|null
condition|)
name|assignment
operator|.
name|unassign
argument_list|(
literal|0
argument_list|,
name|lect
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Lecture
name|lect
range|:
name|unAssignedVariables
control|)
block|{
if|if
condition|(
name|assignment
operator|.
name|getValue
argument_list|(
name|lect
argument_list|)
operator|!=
literal|null
condition|)
name|assignment
operator|.
name|unassign
argument_list|(
literal|0
argument_list|,
name|lect
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Placement
name|plac
range|:
name|initialAssignments
operator|.
name|values
argument_list|()
control|)
block|{
name|Lecture
name|lect
init|=
name|plac
operator|.
name|variable
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|plac
operator|.
name|equals
argument_list|(
name|assignment
operator|.
name|getValue
argument_list|(
name|lect
argument_list|)
argument_list|)
condition|)
name|assignment
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|plac
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Criterion
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|c
range|:
name|model
operator|.
name|getCriteria
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|instanceof
name|StudentOverlapConflict
condition|)
continue|continue;
if|if
condition|(
name|c
operator|instanceof
name|DeltaTimePreference
condition|)
continue|continue;
name|String
name|name
init|=
name|c
operator|.
name|getName
argument_list|()
decl_stmt|;
name|double
name|value
init|=
name|c
operator|.
name|getValue
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
for|for
control|(
name|Suggestion
name|suggestion
range|:
name|suggestions
operator|.
name|getSuggestions
argument_list|()
control|)
name|suggestion
operator|.
name|setBaseCriterion
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|double
name|total
init|=
name|model
operator|.
name|getTotalValue
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
name|int
name|unassigned
init|=
name|model
operator|.
name|nrUnassignedVariables
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
for|for
control|(
name|Suggestion
name|suggestion
range|:
name|suggestions
operator|.
name|getSuggestions
argument_list|()
control|)
block|{
name|suggestion
operator|.
name|setBaseValue
argument_list|(
name|total
argument_list|)
expr_stmt|;
name|suggestion
operator|.
name|setBaseUnassignedVariables
argument_list|(
name|unassigned
argument_list|)
expr_stmt|;
block|}
return|return
name|suggestions
return|;
block|}
specifier|protected
specifier|static
name|boolean
name|isBetter
parameter_list|(
name|Suggestion
name|suggestion
parameter_list|,
name|TimetableSolver
name|solver
parameter_list|)
block|{
return|return
name|suggestion
operator|.
name|getValue
argument_list|()
operator|<
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|getTotalValue
argument_list|(
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|backtrack
parameter_list|(
name|SuggestionsContext
name|context
parameter_list|,
name|TimetableSolver
name|solver
parameter_list|,
name|Suggestions
name|suggestions
parameter_list|,
name|Query
name|query
parameter_list|,
name|long
name|startTime
parameter_list|,
name|List
argument_list|<
name|Lecture
argument_list|>
name|initialLectures
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|resolvedLectures
parameter_list|,
name|Map
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|conflictsToResolve
parameter_list|,
name|Map
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|initialAssignments
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
name|suggestions
operator|.
name|setNrCombinationsConsidered
argument_list|(
literal|1
operator|+
name|suggestions
operator|.
name|getNrCombinationsConsidered
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|nrUnassigned
init|=
name|conflictsToResolve
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|initialLectures
operator|==
literal|null
operator|||
name|initialLectures
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
name|nrUnassigned
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|suggestions
operator|.
name|size
argument_list|()
operator|==
name|suggestions
operator|.
name|getLimit
argument_list|()
condition|)
block|{
if|if
condition|(
name|isBetter
argument_list|(
name|suggestions
operator|.
name|last
argument_list|()
argument_list|,
name|solver
argument_list|)
condition|)
return|return;
block|}
name|suggestions
operator|.
name|addSuggestion
argument_list|(
name|SelectedAssignmentBackend
operator|.
name|createSuggestion
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|initialAssignments
argument_list|,
name|resolvedLectures
argument_list|,
name|conflictsToResolve
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|depth
operator|<=
literal|0
condition|)
return|return;
if|if
condition|(
name|suggestions
operator|.
name|getTimeLimit
argument_list|()
operator|>
literal|0
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|>
name|suggestions
operator|.
name|getTimeLimit
argument_list|()
condition|)
block|{
name|suggestions
operator|.
name|setTimeoutReached
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|suggestions
operator|.
name|size
argument_list|()
operator|==
name|suggestions
operator|.
name|getLimit
argument_list|()
operator|&&
name|suggestions
operator|.
name|last
argument_list|()
operator|.
name|getValue
argument_list|()
operator|<
name|getBound
argument_list|(
name|query
argument_list|,
name|suggestions
argument_list|,
name|solver
argument_list|,
name|conflictsToResolve
argument_list|)
condition|)
block|{
return|return;
block|}
name|Assignment
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|assignment
init|=
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
name|TimetableModel
name|model
init|=
operator|(
name|TimetableModel
operator|)
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
decl_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
operator|new
name|ArrayList
argument_list|<
name|Lecture
argument_list|>
argument_list|(
operator|(
name|initialLectures
operator|!=
literal|null
operator|&&
operator|!
name|initialAssignments
operator|.
name|isEmpty
argument_list|()
condition|?
name|initialLectures
else|:
name|conflictsToResolve
operator|.
name|keySet
argument_list|()
operator|)
argument_list|)
control|)
block|{
if|if
condition|(
name|suggestions
operator|.
name|isTimeoutReached
argument_list|()
condition|)
break|break;
if|if
condition|(
name|resolvedLectures
operator|.
name|contains
argument_list|(
name|lecture
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|resolvedLectures
operator|.
name|add
argument_list|(
name|lecture
operator|.
name|getClassId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PlacementValue
name|placementValue
range|:
name|values
argument_list|(
name|query
argument_list|,
name|suggestions
argument_list|,
name|solver
argument_list|,
name|lecture
argument_list|)
control|)
block|{
if|if
condition|(
name|suggestions
operator|.
name|isTimeoutReached
argument_list|()
condition|)
break|break;
name|Placement
name|placement
init|=
name|placementValue
operator|.
name|getPlacement
argument_list|()
decl_stmt|;
name|Placement
name|current
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|lecture
argument_list|)
decl_stmt|;
if|if
condition|(
name|placement
operator|.
name|equals
argument_list|(
name|current
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|suggestions
operator|.
name|isAllowBreakHard
argument_list|()
operator|&&
name|placement
operator|.
name|isHard
argument_list|(
name|assignment
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|suggestions
operator|.
name|isSameTime
argument_list|()
operator|&&
name|current
operator|!=
literal|null
operator|&&
operator|!
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Placement
operator|)
name|current
operator|)
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|suggestions
operator|.
name|isSameRoom
argument_list|()
operator|&&
name|current
operator|!=
literal|null
operator|&&
operator|!
name|placement
operator|.
name|sameRooms
argument_list|(
operator|(
name|Placement
operator|)
name|current
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|suggestions
operator|.
name|isSameTime
argument_list|()
operator|&&
name|current
operator|==
literal|null
condition|)
block|{
name|Placement
name|ini
init|=
operator|(
name|Placement
operator|)
name|initialAssignments
operator|.
name|get
argument_list|(
name|lecture
argument_list|)
decl_stmt|;
if|if
condition|(
name|ini
operator|!=
literal|null
operator|&&
operator|!
name|placement
operator|.
name|sameTime
argument_list|(
name|ini
argument_list|)
condition|)
continue|continue;
block|}
if|if
condition|(
name|suggestions
operator|.
name|isSameRoom
argument_list|()
operator|&&
name|current
operator|==
literal|null
condition|)
block|{
name|Placement
name|ini
init|=
operator|(
name|Placement
operator|)
name|initialAssignments
operator|.
name|get
argument_list|(
name|lecture
argument_list|)
decl_stmt|;
if|if
condition|(
name|ini
operator|!=
literal|null
operator|&&
operator|!
name|placement
operator|.
name|sameRooms
argument_list|(
name|ini
argument_list|)
condition|)
continue|continue;
block|}
name|Set
argument_list|<
name|Placement
argument_list|>
name|conflicts
init|=
name|model
operator|.
name|conflictValues
argument_list|(
name|assignment
argument_list|,
name|placement
argument_list|)
decl_stmt|;
if|if
condition|(
name|conflicts
operator|!=
literal|null
operator|&&
operator|(
name|nrUnassigned
operator|+
name|conflicts
operator|.
name|size
argument_list|()
operator|>
name|depth
operator|)
condition|)
continue|continue;
if|if
condition|(
name|containsCommited
argument_list|(
name|model
argument_list|,
name|conflicts
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|conflicts
operator|.
name|contains
argument_list|(
name|placement
argument_list|)
condition|)
continue|continue;
name|boolean
name|containException
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|conflicts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Placement
argument_list|>
name|i
init|=
name|conflicts
operator|.
name|iterator
argument_list|()
init|;
operator|!
name|containException
operator|&&
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Placement
name|c
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|resolvedLectures
operator|.
name|contains
argument_list|(
name|c
operator|.
name|variable
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
name|containException
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|containException
condition|)
continue|continue;
if|if
condition|(
name|conflicts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Placement
argument_list|>
name|i
init|=
name|conflicts
operator|.
name|iterator
argument_list|()
init|;
operator|!
name|containException
operator|&&
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Placement
name|c
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|assignment
operator|.
name|unassign
argument_list|(
literal|0
argument_list|,
name|c
operator|.
name|variable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assignment
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|placement
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Placement
argument_list|>
name|i
init|=
name|conflicts
operator|.
name|iterator
argument_list|()
init|;
operator|!
name|containException
operator|&&
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Placement
name|c
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|conflictsToResolve
operator|.
name|put
argument_list|(
name|c
operator|.
name|variable
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
name|Placement
name|resolvedConf
init|=
operator|(
name|Placement
operator|)
name|conflictsToResolve
operator|.
name|remove
argument_list|(
name|lecture
argument_list|)
decl_stmt|;
name|backtrack
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|suggestions
argument_list|,
name|query
argument_list|,
name|startTime
argument_list|,
literal|null
argument_list|,
name|resolvedLectures
argument_list|,
name|conflictsToResolve
argument_list|,
name|initialAssignments
argument_list|,
name|depth
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|==
literal|null
condition|)
name|assignment
operator|.
name|unassign
argument_list|(
literal|0
argument_list|,
name|lecture
argument_list|)
expr_stmt|;
else|else
name|assignment
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|current
argument_list|)
expr_stmt|;
if|if
condition|(
name|conflicts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Placement
name|p
range|:
name|conflicts
control|)
block|{
name|assignment
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|conflictsToResolve
operator|.
name|remove
argument_list|(
name|p
operator|.
name|variable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|resolvedConf
operator|!=
literal|null
condition|)
name|conflictsToResolve
operator|.
name|put
argument_list|(
name|lecture
argument_list|,
name|resolvedConf
argument_list|)
expr_stmt|;
block|}
name|resolvedLectures
operator|.
name|remove
argument_list|(
name|lecture
operator|.
name|getClassId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|placements
parameter_list|(
name|SuggestionsContext
name|context
parameter_list|,
name|TimetableSolver
name|solver
parameter_list|,
name|Suggestions
name|suggestions
parameter_list|,
name|Query
name|query
parameter_list|,
name|long
name|startTime
parameter_list|,
name|Lecture
name|lecture
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|resolvedLectures
parameter_list|,
name|Map
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|conflictsToResolve
parameter_list|,
name|Map
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|initialAssignments
parameter_list|)
block|{
name|int
name|nrUnassigned
init|=
name|conflictsToResolve
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|conflictsToResolve
operator|.
name|containsKey
argument_list|(
name|lecture
argument_list|)
condition|)
name|nrUnassigned
operator|--
expr_stmt|;
name|Assignment
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|assignment
init|=
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
name|TimetableModel
name|model
init|=
operator|(
name|TimetableModel
operator|)
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
decl_stmt|;
for|for
control|(
name|PlacementValue
name|placementValue
range|:
name|values
argument_list|(
name|query
argument_list|,
name|suggestions
argument_list|,
name|solver
argument_list|,
name|lecture
argument_list|)
control|)
block|{
if|if
condition|(
name|suggestions
operator|.
name|isTimeoutReached
argument_list|()
condition|)
break|break;
name|suggestions
operator|.
name|setNrCombinationsConsidered
argument_list|(
literal|1
operator|+
name|suggestions
operator|.
name|getNrCombinationsConsidered
argument_list|()
argument_list|)
expr_stmt|;
name|Placement
name|placement
init|=
name|placementValue
operator|.
name|getPlacement
argument_list|()
decl_stmt|;
name|Placement
name|current
init|=
name|initialAssignments
operator|.
name|get
argument_list|(
name|lecture
argument_list|)
decl_stmt|;
if|if
condition|(
name|placement
operator|.
name|equals
argument_list|(
name|current
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|suggestions
operator|.
name|isAllowBreakHard
argument_list|()
operator|&&
name|placement
operator|.
name|isHard
argument_list|(
name|assignment
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|suggestions
operator|.
name|isSameTime
argument_list|()
operator|&&
name|current
operator|!=
literal|null
operator|&&
operator|!
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Placement
operator|)
name|current
operator|)
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|suggestions
operator|.
name|isSameRoom
argument_list|()
operator|&&
name|current
operator|!=
literal|null
operator|&&
operator|!
name|placement
operator|.
name|sameRooms
argument_list|(
operator|(
name|Placement
operator|)
name|current
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|suggestions
operator|.
name|isSameTime
argument_list|()
operator|&&
name|current
operator|==
literal|null
condition|)
block|{
name|Placement
name|ini
init|=
operator|(
name|Placement
operator|)
name|initialAssignments
operator|.
name|get
argument_list|(
name|lecture
argument_list|)
decl_stmt|;
if|if
condition|(
name|ini
operator|!=
literal|null
operator|&&
operator|!
name|placement
operator|.
name|sameTime
argument_list|(
name|ini
argument_list|)
condition|)
continue|continue;
block|}
if|if
condition|(
name|suggestions
operator|.
name|isSameRoom
argument_list|()
operator|&&
name|current
operator|==
literal|null
condition|)
block|{
name|Placement
name|ini
init|=
operator|(
name|Placement
operator|)
name|initialAssignments
operator|.
name|get
argument_list|(
name|lecture
argument_list|)
decl_stmt|;
if|if
condition|(
name|ini
operator|!=
literal|null
operator|&&
operator|!
name|placement
operator|.
name|sameRooms
argument_list|(
name|ini
argument_list|)
condition|)
continue|continue;
block|}
name|Set
argument_list|<
name|Placement
argument_list|>
name|conflicts
init|=
name|model
operator|.
name|conflictValues
argument_list|(
name|assignment
argument_list|,
name|placement
argument_list|)
decl_stmt|;
if|if
condition|(
name|conflicts
operator|!=
literal|null
operator|&&
operator|(
name|nrUnassigned
operator|+
name|conflicts
operator|.
name|size
argument_list|()
operator|>
name|suggestions
operator|.
name|getDepth
argument_list|()
operator|)
condition|)
continue|continue;
if|if
condition|(
name|containsCommited
argument_list|(
name|model
argument_list|,
name|conflicts
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|conflicts
operator|.
name|contains
argument_list|(
name|placement
argument_list|)
condition|)
continue|continue;
name|boolean
name|containException
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|conflicts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Placement
argument_list|>
name|i
init|=
name|conflicts
operator|.
name|iterator
argument_list|()
init|;
operator|!
name|containException
operator|&&
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Placement
name|c
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|resolvedLectures
operator|.
name|contains
argument_list|(
name|c
operator|.
name|variable
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
name|containException
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|containException
condition|)
continue|continue;
if|if
condition|(
name|conflicts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Placement
argument_list|>
name|i
init|=
name|conflicts
operator|.
name|iterator
argument_list|()
init|;
operator|!
name|containException
operator|&&
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Placement
name|c
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|assignment
operator|.
name|unassign
argument_list|(
literal|0
argument_list|,
name|c
operator|.
name|variable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assignment
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|placement
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Placement
argument_list|>
name|i
init|=
name|conflicts
operator|.
name|iterator
argument_list|()
init|;
operator|!
name|containException
operator|&&
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Placement
name|c
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|conflictsToResolve
operator|.
name|put
argument_list|(
name|c
operator|.
name|variable
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
name|Placement
name|resolvedConf
init|=
operator|(
name|Placement
operator|)
name|conflictsToResolve
operator|.
name|remove
argument_list|(
name|lecture
argument_list|)
decl_stmt|;
if|if
condition|(
name|suggestions
operator|.
name|size
argument_list|()
operator|<
name|suggestions
operator|.
name|getLimit
argument_list|()
operator|||
operator|!
name|isBetter
argument_list|(
name|suggestions
operator|.
name|last
argument_list|()
argument_list|,
name|solver
argument_list|)
condition|)
block|{
name|Suggestion
name|suggestion
init|=
name|SelectedAssignmentBackend
operator|.
name|createSuggestion
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|initialAssignments
argument_list|,
name|resolvedLectures
argument_list|,
name|conflictsToResolve
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|suggestion
operator|.
name|hasDifferentAssignments
argument_list|()
condition|)
name|suggestion
operator|.
name|addDifferentAssignment
argument_list|(
name|SelectedAssignmentBackend
operator|.
name|createClassAssignmentDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|lecture
argument_list|,
name|current
argument_list|,
name|placement
argument_list|)
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|addSuggestion
argument_list|(
name|suggestion
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|suggestions
operator|.
name|getTimeLimit
argument_list|()
operator|>
literal|0
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|>
name|suggestions
operator|.
name|getTimeLimit
argument_list|()
condition|)
name|suggestions
operator|.
name|setTimeoutReached
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|==
literal|null
condition|)
name|assignment
operator|.
name|unassign
argument_list|(
literal|0
argument_list|,
name|lecture
argument_list|)
expr_stmt|;
else|else
name|assignment
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|current
argument_list|)
expr_stmt|;
if|if
condition|(
name|conflicts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Placement
name|p
range|:
name|conflicts
control|)
block|{
name|assignment
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|conflictsToResolve
operator|.
name|remove
argument_list|(
name|p
operator|.
name|variable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|resolvedConf
operator|!=
literal|null
condition|)
name|conflictsToResolve
operator|.
name|put
argument_list|(
name|lecture
argument_list|,
name|resolvedConf
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|double
name|getBound
parameter_list|(
name|Query
name|query
parameter_list|,
name|Suggestions
name|suggestions
parameter_list|,
name|TimetableSolver
name|solver
parameter_list|,
name|Map
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|conflictsToResolve
parameter_list|)
block|{
name|double
name|value
init|=
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|getTotalValue
argument_list|(
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Lecture
name|lect
range|:
name|conflictsToResolve
operator|.
name|keySet
argument_list|()
control|)
block|{
name|TreeSet
argument_list|<
name|PlacementValue
argument_list|>
name|values
init|=
name|values
argument_list|(
name|query
argument_list|,
name|suggestions
argument_list|,
name|solver
argument_list|,
name|lect
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PlacementValue
name|val
init|=
name|values
operator|.
name|first
argument_list|()
decl_stmt|;
name|value
operator|+=
name|val
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|value
return|;
block|}
specifier|private
specifier|static
enum|enum
name|Size
block|{
name|eq
block|,
name|lt
block|,
name|gt
block|,
name|le
block|,
name|ge
block|}
empty_stmt|;
specifier|public
specifier|static
class|class
name|PlacementMatcher
implements|implements
name|TermMatcher
block|{
specifier|private
name|Placement
name|iPlacement
init|=
literal|null
decl_stmt|;
specifier|public
name|PlacementMatcher
parameter_list|(
name|Placement
name|placement
parameter_list|)
block|{
name|iPlacement
operator|=
name|placement
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|attr
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
literal|"time"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
name|SuggestionsFilterBackend
operator|.
name|getDaysName
argument_list|(
name|iPlacement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|iPlacement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getStartTimeHeader
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
literal|"date"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
name|iPlacement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
literal|"room"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|iPlacement
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|false
return|;
if|else if
condition|(
name|iPlacement
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|1
condition|)
return|return
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
name|iPlacement
operator|.
name|getRoomLocation
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
else|else
for|for
control|(
name|RoomLocation
name|r
range|:
name|iPlacement
operator|.
name|getRoomLocations
argument_list|()
control|)
if|if
condition|(
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
if|else if
condition|(
literal|"day"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
name|Constants
operator|.
name|DAY_NAMES_FULL
index|[
name|i
index|]
argument_list|)
operator|||
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
name|Constants
operator|.
name|DAY_NAME
index|[
name|i
index|]
argument_list|)
operator|||
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
name|Constants
operator|.
name|DAY_NAMES_SHORT
index|[
name|i
index|]
argument_list|)
condition|)
return|return
operator|(
name|iPlacement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDayCode
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|i
index|]
operator|)
operator|!=
literal|0
return|;
return|return
literal|false
return|;
block|}
if|else if
condition|(
literal|"after"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
name|Integer
name|after
init|=
name|TimeSelector
operator|.
name|TimeUtils
operator|.
name|parseTime2
argument_list|(
name|CONSTANTS
argument_list|,
name|term
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|after
operator|!=
literal|null
operator|&&
name|after
operator|<=
name|iPlacement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getStartSlot
argument_list|()
return|;
block|}
if|else if
condition|(
literal|"before"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
name|Integer
name|before
init|=
name|TimeSelector
operator|.
name|TimeUtils
operator|.
name|parseTime2
argument_list|(
name|CONSTANTS
argument_list|,
name|term
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|before
operator|!=
literal|null
operator|&&
name|before
operator|>=
name|iPlacement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getStartSlot
argument_list|()
operator|+
name|iPlacement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getLength
argument_list|()
return|;
block|}
if|else if
condition|(
literal|"size"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
name|int
name|min
init|=
literal|0
decl_stmt|,
name|max
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|Size
name|prefix
init|=
name|Size
operator|.
name|eq
decl_stmt|;
name|String
name|number
init|=
name|term
decl_stmt|;
if|if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|"<="
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Size
operator|.
name|le
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|">="
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Size
operator|.
name|ge
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|"<"
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Size
operator|.
name|lt
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|">"
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Size
operator|.
name|gt
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Size
operator|.
name|eq
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|int
name|a
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|prefix
condition|)
block|{
case|case
name|eq
case|:
name|min
operator|=
name|max
operator|=
name|a
expr_stmt|;
break|break;
comment|// = a
case|case
name|le
case|:
name|max
operator|=
name|a
expr_stmt|;
break|break;
comment|//<= a
case|case
name|ge
case|:
name|min
operator|=
name|a
expr_stmt|;
break|break;
comment|//>= a
case|case
name|lt
case|:
name|max
operator|=
name|a
operator|-
literal|1
expr_stmt|;
break|break;
comment|//< a
case|case
name|gt
case|:
name|min
operator|=
name|a
operator|+
literal|1
expr_stmt|;
break|break;
comment|//> a
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|term
operator|.
name|contains
argument_list|(
literal|".."
argument_list|)
condition|)
block|{
try|try
block|{
name|String
name|a
init|=
name|term
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|term
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|b
init|=
name|term
operator|.
name|substring
argument_list|(
name|term
operator|.
name|indexOf
argument_list|(
literal|".."
argument_list|)
operator|+
literal|2
argument_list|)
decl_stmt|;
name|min
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|max
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|iPlacement
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|false
return|;
if|else if
condition|(
name|iPlacement
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|1
condition|)
return|return
name|min
operator|<=
name|iPlacement
operator|.
name|getRoomLocation
argument_list|()
operator|.
name|getRoomSize
argument_list|()
operator|&&
name|iPlacement
operator|.
name|getRoomLocation
argument_list|()
operator|.
name|getRoomSize
argument_list|()
operator|<=
name|max
return|;
else|else
for|for
control|(
name|RoomLocation
name|r
range|:
name|iPlacement
operator|.
name|getRoomLocations
argument_list|()
control|)
if|if
condition|(
name|min
operator|<=
name|r
operator|.
name|getRoomSize
argument_list|()
operator|&&
name|r
operator|.
name|getRoomSize
argument_list|()
operator|<=
name|max
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
if|else if
condition|(
literal|"flag"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"depth"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"timeout"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"results"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"mode"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|attr
operator|==
literal|null
operator|||
name|attr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|iPlacement
operator|.
name|getName
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|.
name|indexOf
argument_list|(
name|term
argument_list|)
operator|>=
literal|0
return|;
block|}
else|else
block|{
return|return
name|iPlacement
operator|.
name|getName
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|.
name|indexOf
argument_list|(
name|attr
operator|+
literal|":"
operator|+
name|term
argument_list|)
operator|>=
literal|0
return|;
block|}
block|}
block|}
specifier|protected
specifier|static
name|boolean
name|match
parameter_list|(
name|Query
name|query
parameter_list|,
name|Suggestions
name|suggestions
parameter_list|,
name|Placement
name|placement
parameter_list|)
block|{
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
return|return
name|query
operator|.
name|match
argument_list|(
operator|new
name|PlacementMatcher
argument_list|(
name|placement
argument_list|)
argument_list|)
return|;
return|return
literal|true
return|;
block|}
specifier|protected
specifier|static
name|TreeSet
argument_list|<
name|PlacementValue
argument_list|>
name|values
parameter_list|(
name|Query
name|query
parameter_list|,
name|Suggestions
name|suggestions
parameter_list|,
name|TimetableSolver
name|solver
parameter_list|,
name|Lecture
name|lecture
parameter_list|)
block|{
name|TreeSet
argument_list|<
name|PlacementValue
argument_list|>
name|vals
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|Assignment
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|assignment
init|=
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|lecture
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|suggestions
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Placement
name|p
range|:
operator|(
name|lecture
operator|.
name|allowBreakHard
argument_list|()
operator|||
operator|!
name|suggestions
operator|.
name|isAllowBreakHard
argument_list|()
condition|?
name|lecture
operator|.
name|values
argument_list|(
name|assignment
argument_list|)
else|:
name|lecture
operator|.
name|computeValues
argument_list|(
name|assignment
argument_list|,
literal|true
argument_list|)
operator|)
control|)
block|{
if|if
condition|(
name|match
argument_list|(
name|query
argument_list|,
name|suggestions
argument_list|,
name|p
argument_list|)
condition|)
name|vals
operator|.
name|add
argument_list|(
operator|new
name|PlacementValue
argument_list|(
name|assignment
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|lecture
operator|.
name|allowBreakHard
argument_list|()
operator|||
operator|!
name|suggestions
operator|.
name|isAllowBreakHard
argument_list|()
condition|)
block|{
for|for
control|(
name|Placement
name|x
range|:
name|lecture
operator|.
name|values
argument_list|(
name|assignment
argument_list|)
control|)
block|{
name|vals
operator|.
name|add
argument_list|(
operator|new
name|PlacementValue
argument_list|(
name|assignment
argument_list|,
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Placement
name|x
range|:
name|lecture
operator|.
name|computeValues
argument_list|(
name|assignment
argument_list|,
literal|true
argument_list|)
control|)
block|{
name|vals
operator|.
name|add
argument_list|(
operator|new
name|PlacementValue
argument_list|(
name|assignment
argument_list|,
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|vals
return|;
block|}
specifier|protected
specifier|static
name|boolean
name|containsCommited
parameter_list|(
name|TimetableModel
name|model
parameter_list|,
name|Collection
name|values
parameter_list|)
block|{
if|if
condition|(
name|model
operator|.
name|hasConstantVariables
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|values
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Placement
name|placement
init|=
operator|(
name|Placement
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Lecture
name|lecture
init|=
operator|(
name|Lecture
operator|)
name|placement
operator|.
name|variable
argument_list|()
decl_stmt|;
if|if
condition|(
name|lecture
operator|.
name|isCommitted
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
class|class
name|PlacementValue
implements|implements
name|Comparable
argument_list|<
name|PlacementValue
argument_list|>
block|{
specifier|private
name|Placement
name|iPlacement
decl_stmt|;
specifier|private
name|double
name|iValue
decl_stmt|;
specifier|public
name|PlacementValue
parameter_list|(
name|Assignment
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|assignment
parameter_list|,
name|Placement
name|placement
parameter_list|)
block|{
name|iPlacement
operator|=
name|placement
expr_stmt|;
name|iValue
operator|=
name|placement
operator|.
name|toDouble
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Placement
name|getPlacement
parameter_list|()
block|{
return|return
name|iPlacement
return|;
block|}
specifier|public
name|double
name|getValue
parameter_list|()
block|{
return|return
name|iValue
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|PlacementValue
name|p
parameter_list|)
block|{
name|int
name|cmp
init|=
name|Double
operator|.
name|compare
argument_list|(
name|getValue
argument_list|()
argument_list|,
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|Double
operator|.
name|compare
argument_list|(
name|getPlacement
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|p
operator|.
name|getPlacement
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

