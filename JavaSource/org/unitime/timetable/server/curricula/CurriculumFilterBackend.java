begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 - 3.5 (University Timetabling Application)  * Copyright (C) 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|curricula
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|access
operator|.
name|prepost
operator|.
name|PreAuthorize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|CurriculumFilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|FilterRpcResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|FilterRpcResponse
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Curriculum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CurriculumDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|FilterBoxBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|CurriculumFilterRpcRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|CurriculumFilterBackend
extends|extends
name|FilterBoxBackend
argument_list|<
name|CurriculumFilterRpcRequest
argument_list|>
block|{
annotation|@
name|Override
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('CurriculumView')"
argument_list|)
specifier|public
name|void
name|load
parameter_list|(
name|CurriculumFilterRpcRequest
name|request
parameter_list|,
name|FilterRpcResponse
name|response
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|Set
argument_list|<
name|Department
argument_list|>
name|userDepts
init|=
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Entity
argument_list|>
name|areas
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Curriculum
name|curriculum
range|:
name|curricula
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|request
operator|.
name|getOptions
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
literal|"area"
argument_list|,
name|userDepts
argument_list|)
control|)
block|{
name|Entity
name|area
init|=
name|areas
operator|.
name|get
argument_list|(
name|curriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|area
operator|==
literal|null
condition|)
block|{
name|area
operator|=
operator|new
name|Entity
argument_list|(
name|curriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|curriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|curriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|areas
operator|.
name|put
argument_list|(
name|area
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|area
argument_list|)
expr_stmt|;
block|}
name|area
operator|.
name|incCount
argument_list|()
expr_stmt|;
block|}
name|response
operator|.
name|add
argument_list|(
literal|"area"
argument_list|,
operator|new
name|TreeSet
argument_list|<
name|Entity
argument_list|>
argument_list|(
name|areas
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"area"
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Entity
argument_list|>
name|majors
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Curriculum
name|curriculum
range|:
name|curricula
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|request
operator|.
name|getOptions
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
literal|"major"
argument_list|,
name|userDepts
argument_list|)
control|)
block|{
for|for
control|(
name|PosMajor
name|m
range|:
name|curriculum
operator|.
name|getMajors
argument_list|()
control|)
block|{
name|Entity
name|major
init|=
name|majors
operator|.
name|get
argument_list|(
name|m
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|major
operator|==
literal|null
condition|)
block|{
name|major
operator|=
operator|new
name|Entity
argument_list|(
name|m
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|m
operator|.
name|getCode
argument_list|()
argument_list|,
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|majors
operator|.
name|put
argument_list|(
name|major
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|major
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|response
operator|.
name|add
argument_list|(
literal|"major"
argument_list|,
operator|new
name|TreeSet
argument_list|<
name|Entity
argument_list|>
argument_list|(
name|majors
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|Long
argument_list|,
name|Entity
argument_list|>
name|classifications
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Curriculum
name|curriculum
range|:
name|curricula
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|request
operator|.
name|getOptions
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
literal|"classification"
argument_list|,
name|userDepts
argument_list|)
control|)
block|{
for|for
control|(
name|CurriculumClassification
name|cc
range|:
name|curriculum
operator|.
name|getClassifications
argument_list|()
control|)
block|{
name|Entity
name|classification
init|=
name|classifications
operator|.
name|get
argument_list|(
name|cc
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|classification
operator|==
literal|null
condition|)
block|{
name|classification
operator|=
operator|new
name|Entity
argument_list|(
name|cc
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|cc
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|,
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|cc
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|classifications
operator|.
name|put
argument_list|(
name|classification
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|classification
argument_list|)
expr_stmt|;
block|}
name|classification
operator|.
name|incCount
argument_list|()
expr_stmt|;
block|}
block|}
name|response
operator|.
name|add
argument_list|(
literal|"classification"
argument_list|,
operator|new
name|TreeSet
argument_list|<
name|Entity
argument_list|>
argument_list|(
name|classifications
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Entity
name|managed
init|=
operator|new
name|Entity
argument_list|(
operator|-
literal|1l
argument_list|,
literal|"Managed"
argument_list|,
literal|"Managed Curricula"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Entity
argument_list|>
name|departments
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Curriculum
name|curriculum
range|:
name|curricula
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|request
operator|.
name|getOptions
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
literal|"department"
argument_list|,
name|userDepts
argument_list|)
control|)
block|{
name|Entity
name|department
init|=
name|departments
operator|.
name|get
argument_list|(
name|curriculum
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|department
operator|==
literal|null
condition|)
block|{
name|department
operator|=
operator|new
name|Entity
argument_list|(
name|curriculum
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|curriculum
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|curriculum
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" - "
operator|+
name|curriculum
operator|.
name|getDepartment
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|curriculum
operator|.
name|getDepartment
argument_list|()
operator|.
name|isExternalManager
argument_list|()
condition|?
literal|" ("
operator|+
name|curriculum
operator|.
name|getDepartment
argument_list|()
operator|.
name|getExternalMgrLabel
argument_list|()
operator|+
literal|")"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|departments
operator|.
name|put
argument_list|(
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|department
argument_list|)
expr_stmt|;
block|}
name|department
operator|.
name|incCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|userDepts
operator|.
name|contains
argument_list|(
name|curriculum
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
name|managed
operator|.
name|incCount
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|managed
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
name|response
operator|.
name|add
argument_list|(
literal|"department"
argument_list|,
name|managed
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"department"
argument_list|,
operator|new
name|TreeSet
argument_list|<
name|Entity
argument_list|>
argument_list|(
name|departments
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|Curriculum
argument_list|>
name|curricula
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|options
parameter_list|,
name|Query
name|query
parameter_list|,
name|int
name|limit
parameter_list|,
name|String
name|ignoreCommand
parameter_list|,
name|Set
argument_list|<
name|Department
argument_list|>
name|userDepartments
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|area
init|=
operator|(
name|options
operator|==
literal|null
operator|||
literal|"area"
operator|.
name|equals
argument_list|(
name|ignoreCommand
argument_list|)
condition|?
literal|null
else|:
name|options
operator|.
name|get
argument_list|(
literal|"area"
argument_list|)
operator|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|major
init|=
operator|(
name|options
operator|==
literal|null
operator|||
literal|"major"
operator|.
name|equals
argument_list|(
name|ignoreCommand
argument_list|)
condition|?
literal|null
else|:
name|options
operator|.
name|get
argument_list|(
literal|"major"
argument_list|)
operator|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|department
init|=
operator|(
name|options
operator|==
literal|null
operator|||
literal|"department"
operator|.
name|equals
argument_list|(
name|ignoreCommand
argument_list|)
condition|?
literal|null
else|:
name|options
operator|.
name|get
argument_list|(
literal|"department"
argument_list|)
operator|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|classification
init|=
operator|(
name|options
operator|==
literal|null
operator|||
literal|"classification"
operator|.
name|equals
argument_list|(
name|ignoreCommand
argument_list|)
condition|?
literal|null
else|:
name|options
operator|.
name|get
argument_list|(
literal|"classification"
argument_list|)
operator|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|nameOrAbbv
init|=
operator|(
name|options
operator|==
literal|null
operator|||
literal|"curriculum"
operator|.
name|equals
argument_list|(
name|ignoreCommand
argument_list|)
condition|?
literal|null
else|:
name|options
operator|.
name|get
argument_list|(
literal|"curriculum"
argument_list|)
operator|)
decl_stmt|;
name|List
argument_list|<
name|Curriculum
argument_list|>
name|curricula
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct c from Curriculum c where c.department.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Curriculum
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|Curriculum
argument_list|>
argument_list|()
decl_stmt|;
name|curricula
label|:
for|for
control|(
name|Curriculum
name|curriculum
range|:
name|curricula
control|)
block|{
if|if
condition|(
name|nameOrAbbv
operator|!=
literal|null
operator|&&
operator|!
name|nameOrAbbv
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|fragment
range|:
name|nameOrAbbv
control|)
block|{
if|if
condition|(
name|fragment
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|fragment
operator|.
name|equalsIgnoreCase
argument_list|(
name|curriculum
operator|.
name|getAbbv
argument_list|()
argument_list|)
operator|||
name|fragment
operator|.
name|equalsIgnoreCase
argument_list|(
name|curriculum
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
name|words
label|:
for|for
control|(
name|String
name|word
range|:
name|fragment
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|term
range|:
name|curriculum
operator|.
name|getName
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
control|)
if|if
condition|(
name|word
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
continue|continue
name|words
continue|;
continue|continue
name|curricula
continue|;
block|}
block|}
block|}
if|if
condition|(
name|query
operator|!=
literal|null
operator|&&
operator|!
name|query
operator|.
name|match
argument_list|(
operator|new
name|CurriculumMatcher
argument_list|(
name|curriculum
argument_list|,
name|userDepartments
argument_list|)
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|area
operator|!=
literal|null
operator|&&
operator|!
name|area
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|area
operator|.
name|contains
argument_list|(
name|curriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
operator|&&
operator|!
name|area
operator|.
name|contains
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|curriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getTitle
argument_list|()
argument_list|)
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|department
operator|!=
literal|null
operator|&&
operator|!
name|department
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|department
operator|.
name|contains
argument_list|(
literal|"Managed"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|userDepartments
operator|.
name|contains
argument_list|(
name|curriculum
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
continue|continue;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|department
operator|.
name|contains
argument_list|(
name|curriculum
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|)
condition|)
continue|continue;
block|}
block|}
if|if
condition|(
name|major
operator|!=
literal|null
operator|&&
operator|!
name|major
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|PosMajor
name|m
range|:
name|curriculum
operator|.
name|getMajors
argument_list|()
control|)
block|{
if|if
condition|(
name|major
operator|.
name|contains
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|)
operator|||
name|major
operator|.
name|contains
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
continue|continue;
block|}
if|if
condition|(
name|classification
operator|!=
literal|null
operator|&&
operator|!
name|classification
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|CurriculumClassification
name|cc
range|:
name|curriculum
operator|.
name|getClassifications
argument_list|()
control|)
block|{
if|if
condition|(
name|classification
operator|.
name|contains
argument_list|(
name|cc
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|classification
operator|.
name|contains
argument_list|(
name|cc
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
operator|||
name|classification
operator|.
name|contains
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|cc
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
continue|continue;
block|}
name|ret
operator|.
name|add
argument_list|(
name|curriculum
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
class|class
name|CurriculumMatcher
implements|implements
name|Query
operator|.
name|TermMatcher
block|{
specifier|private
name|Curriculum
name|iCurriculum
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Department
argument_list|>
name|iManaged
decl_stmt|;
specifier|public
name|CurriculumMatcher
parameter_list|(
name|Curriculum
name|c
parameter_list|,
name|Set
argument_list|<
name|Department
argument_list|>
name|managed
parameter_list|)
block|{
name|iCurriculum
operator|=
name|c
expr_stmt|;
name|iManaged
operator|=
name|managed
expr_stmt|;
block|}
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|attr
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|term
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
literal|"dept"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"department"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
literal|"dept"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"department"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|)
operator|&&
literal|"managed"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
block|{
return|return
name|iManaged
operator|.
name|contains
argument_list|(
name|iCurriculum
operator|.
name|getDepartment
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|eq
argument_list|(
name|iCurriculum
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
name|iCurriculum
operator|.
name|getDepartment
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|has
argument_list|(
name|iCurriculum
operator|.
name|getDepartment
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
literal|"abbv"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"curriculum"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"abbreviation"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|eq
argument_list|(
name|iCurriculum
operator|.
name|getAbbv
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
literal|"name"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"curriculum"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|has
argument_list|(
name|iCurriculum
operator|.
name|getName
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
literal|"starts"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
name|iCurriculum
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|term
argument_list|)
operator|||
name|iCurriculum
operator|.
name|getAbbv
argument_list|()
operator|.
name|startsWith
argument_list|(
name|term
argument_list|)
return|;
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
literal|"area"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|eq
argument_list|(
name|iCurriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|has
argument_list|(
name|iCurriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getTitle
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
literal|"major"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|PosMajor
argument_list|>
name|i
init|=
name|iCurriculum
operator|.
name|getMajors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PosMajor
name|m
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|eq
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|has
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
literal|"clasf"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"classification"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|CurriculumClassification
name|cc
range|:
name|iCurriculum
operator|.
name|getClassifications
argument_list|()
control|)
block|{
if|if
condition|(
name|eq
argument_list|(
name|cc
operator|.
name|getName
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
name|cc
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|has
argument_list|(
name|cc
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|eq
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|name
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|has
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|eq
argument_list|(
name|name
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
for|for
control|(
name|String
name|t
range|:
name|name
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
control|)
if|if
condition|(
name|t
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|String
name|suggestionQuery
parameter_list|(
name|String
name|query
parameter_list|)
block|{
if|if
condition|(
name|query
operator|==
literal|null
operator|||
name|query
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|query
return|;
if|if
condition|(
operator|!
name|query
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
operator|&&
operator|!
name|query
operator|.
name|contains
argument_list|(
literal|"\""
argument_list|)
condition|)
return|return
name|query
operator|+
literal|" || starts:\""
operator|+
name|query
operator|+
literal|"\""
return|;
return|return
name|query
return|;
block|}
annotation|@
name|Override
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('CurriculumView')"
argument_list|)
specifier|public
name|void
name|suggestions
parameter_list|(
name|CurriculumFilterRpcRequest
name|request
parameter_list|,
name|FilterRpcResponse
name|response
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
for|for
control|(
name|Curriculum
name|curriculum
range|:
name|curricula
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|request
operator|.
name|getOptions
argument_list|()
argument_list|,
operator|new
name|Query
argument_list|(
name|suggestionQuery
argument_list|(
name|request
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|20
argument_list|,
literal|null
argument_list|,
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
control|)
name|response
operator|.
name|addSuggestion
argument_list|(
name|curriculum
operator|.
name|getAbbv
argument_list|()
argument_list|,
name|curriculum
operator|.
name|getAbbv
argument_list|()
argument_list|,
literal|"("
operator|+
name|curriculum
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('CurriculumView')"
argument_list|)
specifier|public
name|void
name|enumarate
parameter_list|(
name|CurriculumFilterRpcRequest
name|request
parameter_list|,
name|FilterRpcResponse
name|response
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
for|for
control|(
name|Curriculum
name|curriculum
range|:
name|curricula
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|request
operator|.
name|getOptions
argument_list|()
argument_list|,
operator|new
name|Query
argument_list|(
name|request
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
control|)
block|{
name|response
operator|.
name|addResult
argument_list|(
operator|new
name|Entity
argument_list|(
name|curriculum
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|curriculum
operator|.
name|getAbbv
argument_list|()
argument_list|,
name|curriculum
operator|.
name|getName
argument_list|()
argument_list|,
literal|"department"
argument_list|,
name|curriculum
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

