begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|lookup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|SearchControls
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|BeansException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ldap
operator|.
name|core
operator|.
name|AttributesMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ldap
operator|.
name|core
operator|.
name|LdapTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ldap
operator|.
name|core
operator|.
name|support
operator|.
name|LdapContextSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|PersonInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|PersonInterface
operator|.
name|LookupRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalUidLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalUidTranslation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalUidTranslation
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Advisor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|EventContact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Staff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|AdvisorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|EventContactDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StaffDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TimetableManagerDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|spring
operator|.
name|SpringApplicationContextHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|NameFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|NameInterface
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|PersonInterface
operator|.
name|LookupRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|PeopleLookupBackend
implements|implements
name|GwtRpcImplementation
argument_list|<
name|PersonInterface
operator|.
name|LookupRequest
argument_list|,
name|GwtRpcResponseList
argument_list|<
name|PersonInterface
argument_list|>
argument_list|>
implements|,
name|ExternalUidLookup
block|{
specifier|private
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|PeopleLookupBackend
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ExternalUidTranslation
name|iTranslation
decl_stmt|;
specifier|private
name|LdapTemplate
name|iLdapTemplate
decl_stmt|;
specifier|private
name|SearchControls
name|iSearchControls
decl_stmt|;
specifier|private
annotation|@
name|Autowired
name|ApplicationContext
name|applicationContext
decl_stmt|;
specifier|public
name|PeopleLookupBackend
parameter_list|()
block|{
if|if
condition|(
name|ApplicationProperty
operator|.
name|ExternalUserIdTranslation
operator|.
name|value
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|iTranslation
operator|=
operator|(
name|ExternalUidTranslation
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|ApplicationProperty
operator|.
name|ExternalUserIdTranslation
operator|.
name|value
argument_list|()
argument_list|)
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to instantiate external uid translation class, "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|Long
name|getAcademicSessionId
parameter_list|(
name|SessionContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|UserContext
name|user
init|=
name|context
operator|.
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
literal|"not authenticated"
argument_list|)
throw|;
if|if
condition|(
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
literal|"insufficient rights"
argument_list|)
throw|;
name|Long
name|sessionId
init|=
name|user
operator|.
name|getCurrentAcademicSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
literal|"academic session not selected"
argument_list|)
throw|;
return|return
name|sessionId
return|;
block|}
annotation|@
name|Override
specifier|public
name|GwtRpcResponseList
argument_list|<
name|PersonInterface
argument_list|>
name|execute
parameter_list|(
name|LookupRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|HasRole
argument_list|)
expr_stmt|;
name|SearchContext
name|cx
init|=
operator|new
name|SearchContext
argument_list|()
decl_stmt|;
name|cx
operator|.
name|setSessionId
argument_list|(
name|getAcademicSessionId
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|cx
operator|.
name|setLimit
argument_list|(
name|ApplicationProperty
operator|.
name|PeopleLookupLimit
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|cx
operator|.
name|setQuery
argument_list|(
name|request
operator|.
name|getQuery
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cx
operator|.
name|getQueryTokens
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|new
name|GwtRpcResponseList
argument_list|<
name|PersonInterface
argument_list|>
argument_list|()
return|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
name|cx
operator|.
name|setAdmin
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|IsAdmin
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|displayWithoutId
init|=
literal|true
decl_stmt|;
name|String
index|[]
name|sources
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|option
range|:
name|request
operator|.
name|getOptions
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|option
operator|=
name|option
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|option
operator|.
name|equals
argument_list|(
literal|"mustHaveExternalId"
argument_list|)
condition|)
name|displayWithoutId
operator|=
literal|false
expr_stmt|;
if|else if
condition|(
name|option
operator|.
name|equals
argument_list|(
literal|"allowNoExternalId"
argument_list|)
condition|)
name|displayWithoutId
operator|=
literal|true
expr_stmt|;
if|else if
condition|(
name|option
operator|.
name|startsWith
argument_list|(
literal|"mustHaveExternalId="
argument_list|)
condition|)
name|displayWithoutId
operator|=
operator|!
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|option
operator|.
name|substring
argument_list|(
literal|"mustHaveExternalId="
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|option
operator|.
name|startsWith
argument_list|(
literal|"maxResults="
argument_list|)
condition|)
name|cx
operator|.
name|setLimit
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|option
operator|.
name|substring
argument_list|(
literal|"maxResults="
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|option
operator|.
name|startsWith
argument_list|(
literal|"session="
argument_list|)
condition|)
name|cx
operator|.
name|setSessionId
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|option
operator|.
name|substring
argument_list|(
literal|"session="
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|option
operator|.
name|startsWith
argument_list|(
literal|"source="
argument_list|)
condition|)
block|{
name|sources
operator|=
name|option
operator|.
name|substring
argument_list|(
literal|"source="
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|cx
operator|.
name|isAdmin
argument_list|()
operator|&&
name|sources
operator|!=
literal|null
operator|&&
name|sources
operator|.
name|length
operator|==
literal|1
operator|&&
name|sources
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"students"
argument_list|)
condition|)
block|{
name|cx
operator|.
name|setAdmin
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|EnrollmentsShowExternalId
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sources
operator|==
literal|null
condition|)
block|{
name|String
name|src
init|=
name|ApplicationProperty
operator|.
name|PeopleLookupDefaultSources
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|src
operator|!=
literal|null
operator|&&
operator|!
name|src
operator|.
name|isEmpty
argument_list|()
condition|)
name|sources
operator|=
name|src
operator|.
name|split
argument_list|(
literal|"[:,\n]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sources
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|context
operator|==
literal|null
operator|||
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CanLookupLdap
argument_list|)
condition|)
name|findPeopleFromLdap
argument_list|(
name|cx
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
operator|||
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CanLookupStudents
argument_list|)
condition|)
name|findPeopleFromStudents
argument_list|(
name|cx
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
operator|||
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CanLookupInstructors
argument_list|)
condition|)
name|findPeopleFromInstructors
argument_list|(
name|cx
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
operator|||
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CanLookupStaff
argument_list|)
condition|)
name|findPeopleFromStaff
argument_list|(
name|cx
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
operator|||
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CanLookupManagers
argument_list|)
condition|)
name|findPeopleFromTimetableManagers
argument_list|(
name|cx
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
operator|||
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CanLookupEventContacts
argument_list|)
condition|)
name|findPeopleFromEventContact
argument_list|(
name|cx
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
operator|||
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CanLookupAdvisors
argument_list|)
condition|)
name|findPeopleFromAdvisors
argument_list|(
name|cx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|source
range|:
name|sources
control|)
block|{
if|if
condition|(
literal|"ldap"
operator|.
name|equals
argument_list|(
name|source
argument_list|)
operator|&&
operator|(
name|context
operator|==
literal|null
operator|||
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CanLookupLdap
argument_list|)
operator|)
condition|)
name|findPeopleFromLdap
argument_list|(
name|cx
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"students"
operator|.
name|equals
argument_list|(
name|source
argument_list|)
operator|&&
operator|(
name|context
operator|==
literal|null
operator|||
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CanLookupStudents
argument_list|)
operator|)
condition|)
name|findPeopleFromStudents
argument_list|(
name|cx
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"staff"
operator|.
name|equals
argument_list|(
name|source
argument_list|)
operator|&&
operator|(
name|context
operator|==
literal|null
operator|||
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CanLookupStaff
argument_list|)
operator|)
condition|)
name|findPeopleFromInstructors
argument_list|(
name|cx
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"managers"
operator|.
name|equals
argument_list|(
name|source
argument_list|)
operator|&&
operator|(
name|context
operator|==
literal|null
operator|||
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CanLookupManagers
argument_list|)
operator|)
condition|)
name|findPeopleFromStaff
argument_list|(
name|cx
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"events"
operator|.
name|equals
argument_list|(
name|source
argument_list|)
operator|&&
operator|(
name|context
operator|==
literal|null
operator|||
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CanLookupEventContacts
argument_list|)
operator|)
condition|)
name|findPeopleFromTimetableManagers
argument_list|(
name|cx
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"instructors"
operator|.
name|equals
argument_list|(
name|source
argument_list|)
operator|&&
operator|(
name|context
operator|==
literal|null
operator|||
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CanLookupInstructors
argument_list|)
operator|)
condition|)
name|findPeopleFromEventContact
argument_list|(
name|cx
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"advisors"
operator|.
name|equals
argument_list|(
name|source
argument_list|)
operator|&&
operator|(
name|context
operator|==
literal|null
operator|||
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CanLookupAdvisors
argument_list|)
operator|)
condition|)
name|findPeopleFromAdvisors
argument_list|(
name|cx
argument_list|)
expr_stmt|;
block|}
block|}
name|GwtRpcResponseList
argument_list|<
name|PersonInterface
argument_list|>
name|people
init|=
name|cx
operator|.
name|response
argument_list|(
name|displayWithoutId
argument_list|)
decl_stmt|;
name|NameFormat
name|nameFormat
init|=
name|NameFormat
operator|.
name|fromReference
argument_list|(
name|context
operator|!=
literal|null
condition|?
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
name|UserProperty
operator|.
name|NameFormat
argument_list|)
else|:
name|NameFormat
operator|.
name|LAST_FIRST_MIDDLE
operator|.
name|reference
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|showEmail
init|=
name|ApplicationProperty
operator|.
name|PeopleLookupShowEmail
operator|.
name|isTrue
argument_list|(
name|context
operator|==
literal|null
operator|||
name|context
operator|.
name|getUser
argument_list|()
operator|==
literal|null
operator|||
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|==
literal|null
condition|?
name|Roles
operator|.
name|ROLE_NONE
else|:
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|getRole
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|PersonInterface
name|person
range|:
name|people
control|)
block|{
name|person
operator|.
name|setFormattedName
argument_list|(
name|nameFormat
operator|.
name|format
argument_list|(
operator|new
name|NameInterface
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getMiddleName
parameter_list|()
block|{
return|return
name|person
operator|.
name|getMiddleName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getLastName
parameter_list|()
block|{
return|return
name|person
operator|.
name|getLastName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFirstName
parameter_list|()
block|{
return|return
name|person
operator|.
name|getFirstName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAcademicTitle
parameter_list|()
block|{
return|return
name|person
operator|.
name|getAcademicTitle
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|showEmail
condition|)
name|person
operator|.
name|setEmail
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|people
return|;
block|}
catch|catch
parameter_list|(
name|GwtRpcException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Lookup failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|GwtRpcException
argument_list|(
literal|"Lookup failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|String
name|translate
parameter_list|(
name|String
name|uid
parameter_list|,
name|Source
name|source
parameter_list|)
block|{
if|if
condition|(
name|iTranslation
operator|==
literal|null
operator|||
name|uid
operator|==
literal|null
operator|||
name|source
operator|.
name|equals
argument_list|(
name|Source
operator|.
name|User
argument_list|)
condition|)
return|return
name|uid
return|;
if|if
condition|(
name|uid
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
name|iTranslation
operator|.
name|translate
argument_list|(
name|uid
argument_list|,
name|source
argument_list|,
name|Source
operator|.
name|User
argument_list|)
return|;
block|}
specifier|protected
name|void
name|findPeopleFromStaff
parameter_list|(
name|SearchContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|q
init|=
literal|"select s from Staff s where "
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|context
operator|.
name|getQueryTokens
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
name|q
operator|+=
literal|" and "
expr_stmt|;
name|q
operator|+=
literal|"(lower(s.firstName) like :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.firstName) like '% ' || :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.middleName) like :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.middleName) like '% ' || :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.lastName) like :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.lastName) like '% ' || :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.email) like :t"
operator|+
name|idx
operator|+
literal|" || '%'"
operator|+
operator|(
name|context
operator|.
name|isAdmin
argument_list|()
condition|?
literal|"or s.externalUniqueId = :t"
operator|+
name|idx
else|:
literal|""
operator|)
operator|+
literal|")"
expr_stmt|;
block|}
name|q
operator|+=
literal|" order by s.lastName, s.firstName, s.middleName"
expr_stmt|;
name|Query
name|hq
init|=
name|StaffDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|q
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|context
operator|.
name|getQueryTokens
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
name|hq
operator|.
name|setString
argument_list|(
literal|"t"
operator|+
name|idx
argument_list|,
name|context
operator|.
name|getQueryTokens
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|getLimit
argument_list|()
operator|>
literal|0
condition|)
name|hq
operator|.
name|setMaxResults
argument_list|(
name|context
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Staff
name|staff
range|:
operator|(
name|List
argument_list|<
name|Staff
argument_list|>
operator|)
name|hq
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|context
operator|.
name|addPerson
argument_list|(
operator|new
name|PersonInterface
argument_list|(
name|translate
argument_list|(
name|staff
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|Source
operator|.
name|Staff
argument_list|)
argument_list|,
name|staff
operator|.
name|getFirstName
argument_list|()
argument_list|,
name|staff
operator|.
name|getMiddleName
argument_list|()
argument_list|,
name|staff
operator|.
name|getLastName
argument_list|()
argument_list|,
name|staff
operator|.
name|getAcademicTitle
argument_list|()
argument_list|,
name|staff
operator|.
name|getEmail
argument_list|()
argument_list|,
literal|null
argument_list|,
name|staff
operator|.
name|getDept
argument_list|()
argument_list|,
operator|(
name|staff
operator|.
name|getPositionType
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|staff
operator|.
name|getPositionType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|)
argument_list|,
literal|"Staff"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|findPeopleFromAdvisors
parameter_list|(
name|SearchContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|q
init|=
literal|"select s from Advisor s where s.lastName is not null and"
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|context
operator|.
name|getQueryTokens
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
name|q
operator|+=
literal|" and "
expr_stmt|;
name|q
operator|+=
literal|"(lower(s.firstName) like :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.firstName) like '% ' || :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.middleName) like :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.middleName) like '% ' || :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.lastName) like :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.lastName) like '% ' || :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.email) like :t"
operator|+
name|idx
operator|+
literal|" || '%'"
operator|+
operator|(
name|context
operator|.
name|isAdmin
argument_list|()
condition|?
literal|"or s.externalUniqueId = :t"
operator|+
name|idx
else|:
literal|""
operator|)
operator|+
literal|")"
expr_stmt|;
block|}
name|q
operator|+=
literal|" order by s.lastName, s.firstName, s.middleName"
expr_stmt|;
name|Query
name|hq
init|=
name|AdvisorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|q
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|context
operator|.
name|getQueryTokens
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
name|hq
operator|.
name|setString
argument_list|(
literal|"t"
operator|+
name|idx
argument_list|,
name|context
operator|.
name|getQueryTokens
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|getLimit
argument_list|()
operator|>
literal|0
condition|)
name|hq
operator|.
name|setMaxResults
argument_list|(
name|context
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Advisor
name|advisor
range|:
operator|(
name|List
argument_list|<
name|Advisor
argument_list|>
operator|)
name|hq
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|context
operator|.
name|addPerson
argument_list|(
operator|new
name|PersonInterface
argument_list|(
name|translate
argument_list|(
name|advisor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|Source
operator|.
name|Staff
argument_list|)
argument_list|,
name|advisor
operator|.
name|getFirstName
argument_list|()
argument_list|,
name|advisor
operator|.
name|getMiddleName
argument_list|()
argument_list|,
name|advisor
operator|.
name|getLastName
argument_list|()
argument_list|,
name|advisor
operator|.
name|getAcademicTitle
argument_list|()
argument_list|,
name|advisor
operator|.
name|getEmail
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"Advisors"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|findPeopleFromEventContact
parameter_list|(
name|SearchContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|q
init|=
literal|"select s from EventContact s where "
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|context
operator|.
name|getQueryTokens
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
name|q
operator|+=
literal|" and "
expr_stmt|;
name|q
operator|+=
literal|"(lower(s.firstName) like :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.firstName) like '% ' || :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.middleName) like :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.middleName) like '% ' || :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.lastName) like :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.lastName) like '% ' || :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.emailAddress) like :t"
operator|+
name|idx
operator|+
literal|" || '%'"
operator|+
operator|(
name|context
operator|.
name|isAdmin
argument_list|()
condition|?
literal|"or s.externalUniqueId = :t"
operator|+
name|idx
else|:
literal|""
operator|)
operator|+
literal|")"
expr_stmt|;
block|}
name|q
operator|+=
literal|" order by s.lastName, s.firstName, s.middleName"
expr_stmt|;
name|Query
name|hq
init|=
name|EventContactDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|q
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|context
operator|.
name|getQueryTokens
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
name|hq
operator|.
name|setString
argument_list|(
literal|"t"
operator|+
name|idx
argument_list|,
name|context
operator|.
name|getQueryTokens
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|getLimit
argument_list|()
operator|>
literal|0
condition|)
name|hq
operator|.
name|setMaxResults
argument_list|(
name|context
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|EventContact
name|contact
range|:
operator|(
name|List
argument_list|<
name|EventContact
argument_list|>
operator|)
name|hq
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|context
operator|.
name|addPerson
argument_list|(
operator|new
name|PersonInterface
argument_list|(
name|translate
argument_list|(
name|contact
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|Source
operator|.
name|User
argument_list|)
argument_list|,
name|contact
operator|.
name|getFirstName
argument_list|()
argument_list|,
name|contact
operator|.
name|getMiddleName
argument_list|()
argument_list|,
name|contact
operator|.
name|getLastName
argument_list|()
argument_list|,
name|contact
operator|.
name|getAcademicTitle
argument_list|()
argument_list|,
name|contact
operator|.
name|getEmailAddress
argument_list|()
argument_list|,
name|contact
operator|.
name|getPhone
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"Event Contacts"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|findPeopleFromInstructors
parameter_list|(
name|SearchContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|ApplicationProperty
operator|.
name|PeopleLookupInstructorsPreferStaffDept
operator|.
name|isTrue
argument_list|()
condition|)
if|if
condition|(
name|findPeopleFromInstructors
argument_list|(
name|context
argument_list|,
literal|true
argument_list|)
operator|>
literal|0
condition|)
return|return;
name|findPeopleFromInstructors
argument_list|(
name|context
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|int
name|findPeopleFromInstructors
parameter_list|(
name|SearchContext
name|context
parameter_list|,
name|boolean
name|checkStaffDepartment
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|q
init|=
operator|(
name|checkStaffDepartment
condition|?
literal|"select s from DepartmentalInstructor s, Staff f where s.department.session.uniqueId = :sessionId and f.externalUniqueId = s.externalUniqueId and s.department.deptCode = f.dept"
else|:
literal|"select s from DepartmentalInstructor s where s.department.session.uniqueId = :sessionId"
operator|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|context
operator|.
name|getQueryTokens
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|q
operator|+=
literal|" and (lower(s.firstName) like :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.firstName) like '% ' || :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.middleName) like :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.middleName) like '% ' || :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.lastName) like :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.lastName) like '% ' || :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.email) like :t"
operator|+
name|idx
operator|+
literal|" || '%'"
operator|+
operator|(
name|context
operator|.
name|isAdmin
argument_list|()
condition|?
literal|"or s.externalUniqueId = :t"
operator|+
name|idx
else|:
literal|""
operator|)
operator|+
literal|")"
expr_stmt|;
block|}
name|q
operator|+=
literal|" order by s.lastName, s.firstName, s.middleName"
expr_stmt|;
name|Query
name|hq
init|=
name|DepartmentalInstructorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|q
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|context
operator|.
name|getQueryTokens
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
name|hq
operator|.
name|setString
argument_list|(
literal|"t"
operator|+
name|idx
argument_list|,
name|context
operator|.
name|getQueryTokens
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
name|hq
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|context
operator|.
name|getSessionId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|getLimit
argument_list|()
operator|>
literal|0
condition|)
name|hq
operator|.
name|setMaxResults
argument_list|(
name|context
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DepartmentalInstructor
name|instructor
range|:
operator|(
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
operator|)
name|hq
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|context
operator|.
name|addPerson
argument_list|(
operator|new
name|PersonInterface
argument_list|(
name|translate
argument_list|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|Source
operator|.
name|Staff
argument_list|)
argument_list|,
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|instructor
operator|.
name|getFirstName
argument_list|()
argument_list|)
argument_list|,
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|instructor
operator|.
name|getMiddleName
argument_list|()
argument_list|)
argument_list|,
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|instructor
operator|.
name|getLastName
argument_list|()
argument_list|)
argument_list|,
name|instructor
operator|.
name|getAcademicTitle
argument_list|()
argument_list|,
name|instructor
operator|.
name|getEmail
argument_list|()
argument_list|,
literal|null
argument_list|,
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
operator|(
name|instructor
operator|.
name|getPositionType
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|instructor
operator|.
name|getPositionType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|)
argument_list|,
literal|"Instructors"
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|++
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|protected
name|void
name|findPeopleFromStudents
parameter_list|(
name|SearchContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|q
init|=
literal|"select s from Student s where s.session.uniqueId = :sessionId"
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|context
operator|.
name|getQueryTokens
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|q
operator|+=
literal|" and (lower(s.firstName) like :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.firstName) like '% ' || :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.middleName) like :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.middleName) like '% ' || :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.lastName) like :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.lastName) like '% ' || :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.email) like :t"
operator|+
name|idx
operator|+
literal|" || '%'"
operator|+
operator|(
name|context
operator|.
name|isAdmin
argument_list|()
condition|?
literal|"or s.externalUniqueId = :i"
operator|+
name|idx
else|:
literal|""
operator|)
operator|+
literal|")"
expr_stmt|;
block|}
name|q
operator|+=
literal|" order by s.lastName, s.firstName, s.middleName"
expr_stmt|;
name|Query
name|hq
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|q
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|context
operator|.
name|getQueryTokens
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|hq
operator|.
name|setString
argument_list|(
literal|"t"
operator|+
name|idx
argument_list|,
name|context
operator|.
name|getQueryTokens
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|isAdmin
argument_list|()
condition|)
block|{
if|if
condition|(
name|ApplicationProperty
operator|.
name|DataExchangeTrimLeadingZerosFromExternalIds
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|hq
operator|.
name|setString
argument_list|(
literal|"i"
operator|+
name|idx
argument_list|,
name|context
operator|.
name|getQueryTokens
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|replaceFirst
argument_list|(
literal|"^0+(?!$)"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hq
operator|.
name|setString
argument_list|(
literal|"i"
operator|+
name|idx
argument_list|,
name|context
operator|.
name|getQueryTokens
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|hq
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|context
operator|.
name|getSessionId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|getLimit
argument_list|()
operator|>
literal|0
condition|)
name|hq
operator|.
name|setMaxResults
argument_list|(
name|context
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Student
name|student
range|:
operator|(
name|List
argument_list|<
name|Student
argument_list|>
operator|)
name|hq
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|context
operator|.
name|addPerson
argument_list|(
operator|new
name|PersonInterface
argument_list|(
name|translate
argument_list|(
name|student
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|Source
operator|.
name|Student
argument_list|)
argument_list|,
name|student
operator|.
name|getFirstName
argument_list|()
argument_list|,
name|student
operator|.
name|getMiddleName
argument_list|()
argument_list|,
name|student
operator|.
name|getLastName
argument_list|()
argument_list|,
name|student
operator|.
name|getAcademicTitle
argument_list|()
argument_list|,
name|student
operator|.
name|getEmail
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"Student"
argument_list|,
literal|"Students"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|findPeopleFromTimetableManagers
parameter_list|(
name|SearchContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|q
init|=
literal|"select s from TimetableManager s where "
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|context
operator|.
name|getQueryTokens
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
name|q
operator|+=
literal|" and "
expr_stmt|;
name|q
operator|+=
literal|"(lower(s.firstName) like :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.firstName) like '% ' || :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.middleName) like :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.middleName) like '% ' || :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.lastName) like :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.lastName) like '% ' || :t"
operator|+
name|idx
operator|+
literal|" || '%' "
operator|+
literal|"or lower(s.emailAddress) like :t"
operator|+
name|idx
operator|+
literal|" || '%'"
operator|+
operator|(
name|context
operator|.
name|isAdmin
argument_list|()
condition|?
literal|"or s.externalUniqueId = :t"
operator|+
name|idx
else|:
literal|""
operator|)
operator|+
literal|")"
expr_stmt|;
block|}
name|q
operator|+=
literal|" order by s.lastName, s.firstName, s.middleName"
expr_stmt|;
name|Query
name|hq
init|=
name|TimetableManagerDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|q
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|context
operator|.
name|getQueryTokens
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
name|hq
operator|.
name|setString
argument_list|(
literal|"t"
operator|+
name|idx
argument_list|,
name|context
operator|.
name|getQueryTokens
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|getLimit
argument_list|()
operator|>
literal|0
condition|)
name|hq
operator|.
name|setMaxResults
argument_list|(
name|context
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TimetableManager
name|manager
range|:
operator|(
name|List
argument_list|<
name|TimetableManager
argument_list|>
operator|)
name|hq
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|context
operator|.
name|addPerson
argument_list|(
operator|new
name|PersonInterface
argument_list|(
name|translate
argument_list|(
name|manager
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|Source
operator|.
name|User
argument_list|)
argument_list|,
name|manager
operator|.
name|getFirstName
argument_list|()
argument_list|,
name|manager
operator|.
name|getMiddleName
argument_list|()
argument_list|,
name|manager
operator|.
name|getLastName
argument_list|()
argument_list|,
name|manager
operator|.
name|getAcademicTitle
argument_list|()
argument_list|,
name|manager
operator|.
name|getEmailAddress
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|(
name|manager
operator|.
name|getPrimaryRole
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|manager
operator|.
name|getPrimaryRole
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|)
argument_list|,
literal|"Timetable Managers"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|LdapTemplate
name|getLdapTemplate
parameter_list|()
block|{
if|if
condition|(
name|iLdapTemplate
operator|==
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|applicationContext
operator|!=
literal|null
condition|)
block|{
name|iLdapTemplate
operator|=
name|applicationContext
operator|.
name|getBean
argument_list|(
literal|"ldapPeopleLookupTemplate"
argument_list|,
name|LdapTemplate
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iLdapTemplate
operator|=
operator|(
name|LdapTemplate
operator|)
name|SpringApplicationContextHolder
operator|.
name|getBean
argument_list|(
literal|"ldapPeopleLookupTemplate"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iLdapTemplate
operator|!=
literal|null
condition|)
return|return
name|iLdapTemplate
return|;
block|}
catch|catch
parameter_list|(
name|BeansException
name|e
parameter_list|)
block|{
block|}
name|String
name|url
init|=
name|ApplicationProperty
operator|.
name|PeopleLookupLdapUrl
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|sLog
operator|.
name|warn
argument_list|(
literal|"Failed to locate bean ldapPeopleLookupTemplate, creating the template manually."
argument_list|)
expr_stmt|;
name|LdapContextSource
name|source
init|=
operator|new
name|LdapContextSource
argument_list|()
decl_stmt|;
name|source
operator|.
name|setUrl
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|source
operator|.
name|setBase
argument_list|(
name|ApplicationProperty
operator|.
name|PeopleLookupLdapBase
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|user
init|=
name|ApplicationProperty
operator|.
name|PeopleLookupLdapUser
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|source
operator|.
name|setUserDn
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|String
name|password
init|=
name|ApplicationProperty
operator|.
name|PeopleLookupLdapPassword
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|password
operator|!=
literal|null
condition|)
name|source
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|source
operator|.
name|setAnonymousReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|source
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to initialze LDAP context source: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|iLdapTemplate
operator|=
operator|new
name|LdapTemplate
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
return|return
name|iLdapTemplate
return|;
block|}
specifier|protected
name|SearchControls
name|getSearchControls
parameter_list|()
block|{
if|if
condition|(
name|iSearchControls
operator|==
literal|null
condition|)
block|{
name|iSearchControls
operator|=
operator|new
name|SearchControls
argument_list|()
expr_stmt|;
name|iSearchControls
operator|.
name|setCountLimit
argument_list|(
name|ApplicationProperty
operator|.
name|PeopleLookupLdapLimit
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|PeopleLookupLdapSearchSubtree
operator|.
name|isTrue
argument_list|()
condition|)
name|iSearchControls
operator|.
name|setSearchScope
argument_list|(
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|)
expr_stmt|;
block|}
return|return
name|iSearchControls
return|;
block|}
specifier|protected
name|void
name|findPeopleFromLdap
parameter_list|(
specifier|final
name|SearchContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|getLdapTemplate
argument_list|()
operator|==
literal|null
condition|)
return|return;
name|String
name|filter
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|token
range|:
name|context
operator|.
name|getQueryTokens
argument_list|()
control|)
block|{
name|String
name|t
init|=
name|token
operator|.
name|replace
argument_list|(
literal|'_'
argument_list|,
literal|'*'
argument_list|)
operator|.
name|replace
argument_list|(
literal|'%'
argument_list|,
literal|'*'
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|filter
operator|=
name|ApplicationProperty
operator|.
name|PeopleLookupLdapQuery
operator|.
name|value
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"%"
argument_list|,
name|t
argument_list|)
expr_stmt|;
else|else
name|filter
operator|=
literal|"(&"
operator|+
name|filter
operator|+
name|ApplicationProperty
operator|.
name|PeopleLookupLdapQuery
operator|.
name|value
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"%"
argument_list|,
name|t
argument_list|)
operator|+
literal|")"
expr_stmt|;
block|}
name|getLdapTemplate
argument_list|()
operator|.
name|search
argument_list|(
literal|""
argument_list|,
name|filter
argument_list|,
name|getSearchControls
argument_list|()
argument_list|,
operator|new
name|AttributesMapper
argument_list|()
block|{
specifier|protected
name|String
name|getAttribute
parameter_list|(
name|Attributes
name|attrs
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|attrs
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
for|for
control|(
name|StringTokenizer
name|stk
init|=
operator|new
name|StringTokenizer
argument_list|(
name|name
argument_list|,
literal|","
argument_list|)
init|;
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|Attribute
name|a
init|=
name|attrs
operator|.
name|get
argument_list|(
name|stk
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
name|a
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|a
operator|.
name|get
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|mapFromAttributes
parameter_list|(
name|Attributes
name|a
parameter_list|)
throws|throws
name|NamingException
block|{
name|PersonInterface
name|person
init|=
operator|new
name|PersonInterface
argument_list|(
name|translate
argument_list|(
name|getAttribute
argument_list|(
name|a
argument_list|,
literal|"uid"
argument_list|)
argument_list|,
name|Source
operator|.
name|LDAP
argument_list|)
argument_list|,
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|getAttribute
argument_list|(
name|a
argument_list|,
literal|"givenName"
argument_list|)
argument_list|)
argument_list|,
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|getAttribute
argument_list|(
name|a
argument_list|,
literal|"cn"
argument_list|)
argument_list|)
argument_list|,
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|getAttribute
argument_list|(
name|a
argument_list|,
literal|"sn"
argument_list|)
argument_list|)
argument_list|,
name|getAttribute
argument_list|(
name|a
argument_list|,
name|ApplicationProperty
operator|.
name|PeopleLookupLdapAcademicTitleAttribute
operator|.
name|value
argument_list|()
argument_list|)
argument_list|,
name|getAttribute
argument_list|(
name|a
argument_list|,
name|ApplicationProperty
operator|.
name|PeopleLookupLdapEmailAttribute
operator|.
name|value
argument_list|()
argument_list|)
argument_list|,
name|getAttribute
argument_list|(
name|a
argument_list|,
name|ApplicationProperty
operator|.
name|PeopleLookupLdapPhoneAttribute
operator|.
name|value
argument_list|()
argument_list|)
argument_list|,
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|getAttribute
argument_list|(
name|a
argument_list|,
name|ApplicationProperty
operator|.
name|PeopleLookupLdapDepartmentAttribute
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|getAttribute
argument_list|(
name|a
argument_list|,
name|ApplicationProperty
operator|.
name|PeopleLookupLdapPositionAttribute
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|"Directory"
argument_list|)
decl_stmt|;
name|context
operator|.
name|addPerson
argument_list|(
name|person
argument_list|)
expr_stmt|;
return|return
name|person
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
class|class
name|SearchContext
block|{
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PersonInterface
argument_list|>
name|iPeople
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PersonInterface
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|TreeSet
argument_list|<
name|PersonInterface
argument_list|>
name|iPeopleWithoutId
init|=
operator|new
name|TreeSet
argument_list|<
name|PersonInterface
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|iLimit
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|Long
name|iSessionId
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iQuery
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|iTokens
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iAdmin
init|=
literal|false
decl_stmt|;
name|SearchContext
parameter_list|()
block|{
block|}
specifier|public
name|void
name|setLimit
parameter_list|(
name|int
name|limit
parameter_list|)
block|{
name|iLimit
operator|=
name|limit
expr_stmt|;
block|}
specifier|public
name|int
name|getLimit
parameter_list|()
block|{
return|return
name|iLimit
return|;
block|}
specifier|public
name|void
name|setSessionId
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|iSessionId
operator|=
name|sessionId
expr_stmt|;
block|}
specifier|public
name|Long
name|getSessionId
parameter_list|()
block|{
return|return
name|iSessionId
return|;
block|}
specifier|public
name|void
name|setAdmin
parameter_list|(
name|boolean
name|admin
parameter_list|)
block|{
name|iAdmin
operator|=
name|admin
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAdmin
parameter_list|()
block|{
return|return
name|iAdmin
return|;
block|}
specifier|public
name|void
name|setQuery
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|iQuery
operator|=
name|query
expr_stmt|;
if|if
condition|(
name|iTokens
operator|==
literal|null
condition|)
name|iTokens
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
else|else
name|iTokens
operator|.
name|clear
argument_list|()
expr_stmt|;
name|boolean
name|stripLeadingZeroes
init|=
name|ApplicationProperty
operator|.
name|DataExchangeTrimLeadingZerosFromExternalIds
operator|.
name|isTrue
argument_list|()
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|stk
init|=
operator|new
name|StringTokenizer
argument_list|(
name|query
argument_list|,
literal|" ,"
argument_list|)
init|;
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|t
init|=
name|stk
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|stripLeadingZeroes
operator|&&
name|t
operator|.
name|matches
argument_list|(
literal|"\\d+"
argument_list|)
operator|&&
name|t
operator|.
name|startsWith
argument_list|(
literal|"0"
argument_list|)
condition|)
while|while
condition|(
name|t
operator|.
name|startsWith
argument_list|(
literal|"0"
argument_list|)
condition|)
name|t
operator|=
name|t
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iTokens
operator|.
name|add
argument_list|(
name|t
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getQuery
parameter_list|()
block|{
return|return
name|iQuery
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getQueryTokens
parameter_list|()
block|{
return|return
name|iTokens
return|;
block|}
specifier|public
name|void
name|addPerson
parameter_list|(
name|PersonInterface
name|person
parameter_list|)
block|{
if|if
condition|(
name|person
operator|.
name|getId
argument_list|()
operator|==
literal|null
operator|||
name|person
operator|.
name|getId
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
literal|"null"
operator|.
name|equals
argument_list|(
name|person
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|iPeopleWithoutId
operator|.
name|add
argument_list|(
name|person
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PersonInterface
name|old
init|=
name|iPeople
operator|.
name|get
argument_list|(
name|person
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|==
literal|null
condition|)
block|{
name|iPeople
operator|.
name|put
argument_list|(
name|person
operator|.
name|getId
argument_list|()
argument_list|,
name|person
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|old
operator|.
name|merge
argument_list|(
name|person
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|GwtRpcResponseList
argument_list|<
name|PersonInterface
argument_list|>
name|response
parameter_list|(
name|boolean
name|displayWithoutId
parameter_list|)
block|{
name|GwtRpcResponseList
argument_list|<
name|PersonInterface
argument_list|>
name|ret
init|=
operator|new
name|GwtRpcResponseList
argument_list|<
name|PersonInterface
argument_list|>
argument_list|(
name|iPeople
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|ret
argument_list|)
expr_stmt|;
if|if
condition|(
name|displayWithoutId
condition|)
name|ret
operator|.
name|addAll
argument_list|(
name|iPeopleWithoutId
argument_list|)
expr_stmt|;
if|if
condition|(
name|getLimit
argument_list|()
operator|>
literal|0
operator|&&
name|ret
operator|.
name|size
argument_list|()
operator|>
name|getLimit
argument_list|()
condition|)
block|{
return|return
operator|new
name|GwtRpcResponseList
argument_list|<
name|PersonInterface
argument_list|>
argument_list|(
name|ret
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|getLimit
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|ret
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|UserInfo
name|doLookup
parameter_list|(
name|String
name|uid
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|uid
operator|==
literal|null
operator|||
name|uid
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|getLdapTemplate
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|iTranslation
operator|!=
literal|null
condition|)
name|uid
operator|=
name|iTranslation
operator|.
name|translate
argument_list|(
name|uid
argument_list|,
name|Source
operator|.
name|User
argument_list|,
name|Source
operator|.
name|LDAP
argument_list|)
expr_stmt|;
return|return
operator|(
name|UserInfo
operator|)
name|getLdapTemplate
argument_list|()
operator|.
name|lookup
argument_list|(
literal|"uid="
operator|+
name|uid
argument_list|,
operator|new
name|AttributesMapper
argument_list|()
block|{
specifier|protected
name|String
name|getAttribute
parameter_list|(
name|Attributes
name|attrs
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|attrs
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
for|for
control|(
name|StringTokenizer
name|stk
init|=
operator|new
name|StringTokenizer
argument_list|(
name|name
argument_list|,
literal|","
argument_list|)
init|;
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|Attribute
name|a
init|=
name|attrs
operator|.
name|get
argument_list|(
name|stk
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
name|a
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|a
operator|.
name|get
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|mapFromAttributes
parameter_list|(
name|Attributes
name|a
parameter_list|)
throws|throws
name|NamingException
block|{
name|UserInfo
name|info
init|=
operator|new
name|UserInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setUserName
argument_list|(
name|getAttribute
argument_list|(
name|a
argument_list|,
literal|"uid"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTranslation
operator|==
literal|null
condition|)
name|info
operator|.
name|setExternalId
argument_list|(
name|info
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|info
operator|.
name|setExternalId
argument_list|(
name|iTranslation
operator|.
name|translate
argument_list|(
name|info
operator|.
name|getUserName
argument_list|()
argument_list|,
name|Source
operator|.
name|LDAP
argument_list|,
name|Source
operator|.
name|User
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setFirstName
argument_list|(
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|getAttribute
argument_list|(
name|a
argument_list|,
literal|"givenName"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|getAttribute
argument_list|(
name|a
argument_list|,
literal|"cn"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setLastName
argument_list|(
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|getAttribute
argument_list|(
name|a
argument_list|,
literal|"sn"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setEmail
argument_list|(
name|getAttribute
argument_list|(
name|a
argument_list|,
name|ApplicationProperty
operator|.
name|PeopleLookupLdapEmailAttribute
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setPhone
argument_list|(
name|getAttribute
argument_list|(
name|a
argument_list|,
name|ApplicationProperty
operator|.
name|PeopleLookupLdapPhoneAttribute
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setAcademicTitle
argument_list|(
name|getAttribute
argument_list|(
name|a
argument_list|,
name|ApplicationProperty
operator|.
name|PeopleLookupLdapAcademicTitleAttribute
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|middle
init|=
name|info
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getFirstName
argument_list|()
operator|!=
literal|null
operator|&&
name|middle
operator|.
name|indexOf
argument_list|(
name|info
operator|.
name|getFirstName
argument_list|()
argument_list|)
operator|>=
literal|0
condition|)
name|middle
operator|=
name|middle
operator|.
name|replaceAll
argument_list|(
name|info
operator|.
name|getFirstName
argument_list|()
operator|+
literal|" ?"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|getLastName
argument_list|()
operator|!=
literal|null
operator|&&
name|middle
operator|.
name|indexOf
argument_list|(
name|info
operator|.
name|getLastName
argument_list|()
argument_list|)
operator|>=
literal|0
condition|)
name|middle
operator|=
name|middle
operator|.
name|replaceAll
argument_list|(
literal|" ?"
operator|+
name|info
operator|.
name|getLastName
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|info
operator|.
name|setMiddleName
argument_list|(
name|middle
argument_list|)
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Failed to lookup a person: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

