begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.5 (University Timetabling Application)  * Copyright (C) 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|sectioning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|CSVFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|CSVFile
operator|.
name|CSVLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|CSVPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|ExportHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|Exporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|basic
operator|.
name|GenerateSectioningReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverServerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|studentsct
operator|.
name|StudentSolverProxy
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"org.unitime.timetable.export.Exporter:sct-report.csv"
argument_list|)
specifier|public
class|class
name|SectioningReportsExporter
implements|implements
name|Exporter
block|{
annotation|@
name|Autowired
name|SolverService
argument_list|<
name|StudentSolverProxy
argument_list|>
name|studentSectioningSolverService
decl_stmt|;
annotation|@
name|Autowired
name|SolverServerService
name|solverServerService
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|reference
parameter_list|()
block|{
return|return
literal|"sct-report.csv"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|export
parameter_list|(
name|ExportHelper
name|helper
parameter_list|)
throws|throws
name|IOException
block|{
name|DataProperties
name|parameters
init|=
operator|new
name|DataProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|String
argument_list|>
name|e
init|=
name|helper
operator|.
name|getParameterNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|helper
operator|.
name|getParameter
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CSVFile
name|csv
init|=
literal|null
decl_stmt|;
name|boolean
name|online
init|=
name|parameters
operator|.
name|getPropertyBoolean
argument_list|(
literal|"online"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SessionContext
name|context
init|=
name|helper
operator|.
name|getSessionContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|online
condition|)
block|{
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|SchedulingDashboard
argument_list|)
expr_stmt|;
name|OnlineSectioningServer
name|server
init|=
name|solverServerService
operator|.
name|getOnlineStudentSchedulingContainer
argument_list|()
operator|.
name|getSolver
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
literal|"Online student scheduling is not enabled for "
operator|+
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|getQualifiers
argument_list|(
literal|"Session"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getQualifierLabel
argument_list|()
operator|+
literal|"."
argument_list|)
throw|;
name|OnlineSectioningLog
operator|.
name|Entity
name|user
init|=
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setExternalId
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|?
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getUsername
argument_list|()
else|:
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|StudentSchedulingAdvisor
argument_list|)
condition|?
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|MANAGER
else|:
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|STUDENT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|csv
operator|=
name|server
operator|.
name|execute
argument_list|(
operator|new
name|GenerateSectioningReport
argument_list|(
name|parameters
argument_list|)
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|StudentSectioningSolver
argument_list|)
expr_stmt|;
name|StudentSolverProxy
name|solver
init|=
name|studentSectioningSolverService
operator|.
name|getSolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
literal|"No student solver is running."
argument_list|)
throw|;
name|csv
operator|=
name|solver
operator|.
name|getReport
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|csv
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
literal|"No report was created."
argument_list|)
throw|;
name|Printer
name|out
init|=
operator|new
name|CSVPrinter
argument_list|(
name|helper
operator|.
name|getWriter
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|helper
operator|.
name|setup
argument_list|(
name|out
operator|.
name|getContentType
argument_list|()
argument_list|,
name|helper
operator|.
name|getParameter
argument_list|(
literal|"name"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|replace
argument_list|(
literal|'_'
argument_list|,
literal|'-'
argument_list|)
operator|+
literal|".csv"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
index|[]
name|header
init|=
operator|new
name|String
index|[
name|csv
operator|.
name|getHeader
argument_list|()
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|csv
operator|.
name|getHeader
argument_list|()
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|header
index|[
name|i
index|]
operator|=
name|csv
operator|.
name|getHeader
argument_list|()
operator|.
name|getField
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|out
operator|.
name|printHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
if|if
condition|(
name|csv
operator|.
name|getLines
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|CSVLine
name|line
range|:
name|csv
operator|.
name|getLines
argument_list|()
control|)
block|{
name|String
index|[]
name|row
init|=
operator|new
name|String
index|[
name|line
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|line
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|row
index|[
name|i
index|]
operator|=
name|line
operator|.
name|getField
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|out
operator|.
name|printLine
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

