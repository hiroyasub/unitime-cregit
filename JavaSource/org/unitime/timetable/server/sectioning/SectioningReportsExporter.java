begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|sectioning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|CSVFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|CSVFile
operator|.
name|CSVLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|CSVPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|ExportHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|Exporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|basic
operator|.
name|GenerateSectioningReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverServerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|studentsct
operator|.
name|StudentSolverProxy
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"org.unitime.timetable.export.Exporter:sct-report.csv"
argument_list|)
specifier|public
class|class
name|SectioningReportsExporter
implements|implements
name|Exporter
block|{
specifier|protected
specifier|static
name|GwtConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
name|SolverService
argument_list|<
name|StudentSolverProxy
argument_list|>
name|studentSectioningSolverService
decl_stmt|;
annotation|@
name|Autowired
name|SolverServerService
name|solverServerService
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|reference
parameter_list|()
block|{
return|return
literal|"sct-report.csv"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|export
parameter_list|(
name|ExportHelper
name|helper
parameter_list|)
throws|throws
name|IOException
block|{
name|DataProperties
name|parameters
init|=
operator|new
name|DataProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|String
argument_list|>
name|e
init|=
name|helper
operator|.
name|getParameterNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|helper
operator|.
name|getParameter
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|parameters
operator|.
name|put
argument_list|(
literal|"useAmPm"
argument_list|,
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|Long
name|sessionId
init|=
name|helper
operator|.
name|getAcademicSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
operator|&&
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|isAuthenticated
argument_list|()
condition|)
name|sessionId
operator|=
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
expr_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
literal|"No academic session provided."
argument_list|)
throw|;
name|CSVFile
name|csv
init|=
literal|null
decl_stmt|;
name|boolean
name|online
init|=
name|parameters
operator|.
name|getPropertyBoolean
argument_list|(
literal|"online"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SessionContext
name|context
init|=
name|helper
operator|.
name|getSessionContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|online
condition|)
block|{
name|context
operator|.
name|checkPermissionAnyAuthority
argument_list|(
name|sessionId
argument_list|,
literal|"Session"
argument_list|,
name|Right
operator|.
name|SchedulingReports
argument_list|)
expr_stmt|;
name|OnlineSectioningServer
name|server
init|=
name|solverServerService
operator|.
name|getOnlineStudentSchedulingContainer
argument_list|()
operator|.
name|getSolver
argument_list|(
name|sessionId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
literal|"Online student scheduling is not enabled for session "
operator|+
name|sessionId
operator|+
literal|"."
argument_list|)
throw|;
name|OnlineSectioningLog
operator|.
name|Entity
name|user
init|=
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setExternalId
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|?
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getUsername
argument_list|()
else|:
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|StudentSchedulingAdvisor
argument_list|)
condition|?
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|MANAGER
else|:
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|STUDENT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|csv
operator|=
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|GenerateSectioningReport
operator|.
name|class
argument_list|)
operator|.
name|withParameters
argument_list|(
name|parameters
argument_list|)
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|StudentSectioningSolver
argument_list|)
expr_stmt|;
name|StudentSolverProxy
name|solver
init|=
name|studentSectioningSolverService
operator|.
name|getSolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
literal|"No student solver is running."
argument_list|)
throw|;
name|csv
operator|=
name|solver
operator|.
name|getReport
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|csv
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
literal|"No report was created."
argument_list|)
throw|;
name|Printer
name|out
init|=
operator|new
name|CSVPrinter
argument_list|(
name|helper
operator|.
name|getWriter
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|helper
operator|.
name|setup
argument_list|(
name|out
operator|.
name|getContentType
argument_list|()
argument_list|,
name|helper
operator|.
name|getParameter
argument_list|(
literal|"name"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|replace
argument_list|(
literal|'_'
argument_list|,
literal|'-'
argument_list|)
operator|+
literal|".csv"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
index|[]
name|header
init|=
operator|new
name|String
index|[
name|csv
operator|.
name|getHeader
argument_list|()
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|csv
operator|.
name|getHeader
argument_list|()
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|header
index|[
name|i
index|]
operator|=
name|csv
operator|.
name|getHeader
argument_list|()
operator|.
name|getField
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|out
operator|.
name|printHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|DecimalFormat
name|pf
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.00%"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Row
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<
name|Row
argument_list|>
argument_list|()
decl_stmt|;
name|Row
name|prev
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|csv
operator|.
name|getLines
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|CSVLine
name|line
range|:
name|csv
operator|.
name|getLines
argument_list|()
control|)
block|{
if|if
condition|(
name|line
operator|.
name|getFields
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|Row
name|data
init|=
operator|new
name|Row
argument_list|(
name|line
argument_list|)
decl_stmt|;
while|while
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|data
operator|.
name|getNrBlanks
argument_list|()
operator|>
name|prev
operator|.
name|getNrBlanks
argument_list|()
condition|)
break|break;
name|prev
operator|=
name|prev
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
name|data
operator|.
name|setParent
argument_list|(
name|prev
argument_list|)
expr_stmt|;
name|rows
operator|.
name|add
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|prev
operator|=
name|data
expr_stmt|;
block|}
name|String
name|sort
init|=
name|helper
operator|.
name|getParameter
argument_list|(
literal|"sort"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sort
operator|!=
literal|null
operator|&&
operator|!
literal|"0"
operator|.
name|equals
argument_list|(
name|sort
argument_list|)
condition|)
block|{
specifier|final
name|boolean
name|asc
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|sort
argument_list|)
operator|>
literal|0
decl_stmt|;
specifier|final
name|int
name|col
init|=
name|Math
operator|.
name|abs
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|sort
argument_list|)
argument_list|)
operator|-
literal|1
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|rows
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Row
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Row
name|o1
parameter_list|,
name|Row
name|o2
parameter_list|)
block|{
return|return
operator|(
name|asc
condition|?
name|o1
operator|.
name|compareTo
argument_list|(
name|o2
argument_list|,
name|col
argument_list|)
else|:
name|o2
operator|.
name|compareTo
argument_list|(
name|o1
argument_list|,
name|col
argument_list|)
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|prev
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|Row
name|row
range|:
name|rows
control|)
block|{
name|boolean
name|prevHide
init|=
literal|true
decl_stmt|;
name|String
index|[]
name|line
init|=
operator|new
name|String
index|[
name|csv
operator|.
name|getHeader
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|csv
operator|.
name|getHeader
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|boolean
name|hide
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|prev
operator|==
literal|null
operator|||
operator|!
name|prevHide
operator|||
operator|!
name|prev
operator|.
name|getCell
argument_list|(
name|x
argument_list|)
operator|.
name|equals
argument_list|(
name|row
operator|.
name|getCell
argument_list|(
name|x
argument_list|)
argument_list|)
condition|)
name|hide
operator|=
literal|false
expr_stmt|;
name|String
name|text
init|=
name|row
operator|.
name|getCell
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|boolean
name|number
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|csv
operator|.
name|getHeader
argument_list|()
operator|.
name|getField
argument_list|(
name|x
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"%"
argument_list|)
condition|)
block|{
if|if
condition|(
name|x
operator|>
literal|0
condition|)
try|try
block|{
name|Double
operator|.
name|parseDouble
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|number
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|number
condition|)
name|text
operator|=
name|pf
operator|.
name|format
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|line
index|[
name|x
index|]
operator|=
operator|(
name|hide
condition|?
literal|""
else|:
name|text
operator|)
expr_stmt|;
name|prevHide
operator|=
name|hide
expr_stmt|;
block|}
if|if
condition|(
name|prev
operator|!=
literal|null
operator|&&
operator|!
name|prev
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|row
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
name|out
operator|.
name|printLine
argument_list|()
expr_stmt|;
name|out
operator|.
name|printLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|prev
operator|=
name|row
expr_stmt|;
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|Row
block|{
name|CSVLine
name|iLine
decl_stmt|;
name|Row
name|iParent
decl_stmt|;
specifier|public
name|Row
parameter_list|(
name|CSVLine
name|line
parameter_list|)
block|{
name|iLine
operator|=
name|line
expr_stmt|;
block|}
specifier|public
name|Row
name|getParent
parameter_list|()
block|{
return|return
name|iParent
return|;
block|}
specifier|public
name|void
name|setParent
parameter_list|(
name|Row
name|parent
parameter_list|)
block|{
name|iParent
operator|=
name|parent
expr_stmt|;
block|}
specifier|public
name|boolean
name|isBlank
parameter_list|(
name|int
name|col
parameter_list|)
block|{
return|return
name|iLine
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
name|col
operator|||
name|iLine
operator|.
name|getField
argument_list|(
name|col
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getCell
parameter_list|(
name|int
name|col
parameter_list|)
block|{
if|if
condition|(
name|isBlank
argument_list|(
name|col
argument_list|)
condition|)
block|{
if|if
condition|(
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|getParent
argument_list|()
operator|.
name|getCell
argument_list|(
name|col
argument_list|)
return|;
else|else
return|return
literal|""
return|;
block|}
else|else
block|{
return|return
name|iLine
operator|.
name|getField
argument_list|(
name|col
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
name|int
name|getLevel
parameter_list|()
block|{
return|return
name|getParent
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|getParent
argument_list|()
operator|.
name|getLevel
argument_list|()
operator|+
literal|1
return|;
block|}
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|getParent
argument_list|()
operator|==
literal|null
condition|?
name|iLine
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
else|:
name|getParent
argument_list|()
operator|.
name|getLength
argument_list|()
return|;
block|}
specifier|public
name|int
name|getNrBlanks
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|!
name|isBlank
argument_list|(
name|i
argument_list|)
condition|)
return|return
name|i
return|;
return|return
name|getLength
argument_list|()
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Row
name|b
parameter_list|,
name|int
name|col
parameter_list|)
block|{
name|Row
name|a
init|=
name|this
decl_stmt|;
while|while
condition|(
name|a
operator|.
name|getLevel
argument_list|()
operator|>
name|b
operator|.
name|getLevel
argument_list|()
condition|)
name|a
operator|=
name|a
operator|.
name|getParent
argument_list|()
expr_stmt|;
while|while
condition|(
name|b
operator|.
name|getLevel
argument_list|()
operator|>
name|a
operator|.
name|getLevel
argument_list|()
condition|)
name|b
operator|=
name|b
operator|.
name|getParent
argument_list|()
expr_stmt|;
try|try
block|{
name|int
name|cmp
init|=
name|Double
operator|.
name|valueOf
argument_list|(
name|a
operator|.
name|getCell
argument_list|(
name|col
argument_list|)
operator|==
literal|null
condition|?
literal|"0"
else|:
name|a
operator|.
name|getCell
argument_list|(
name|col
argument_list|)
argument_list|)
operator|.
name|compareTo
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
name|b
operator|.
name|getCell
argument_list|(
name|col
argument_list|)
operator|==
literal|null
condition|?
literal|"0"
else|:
name|b
operator|.
name|getCell
argument_list|(
name|col
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|(
name|a
operator|.
name|getCell
argument_list|(
name|col
argument_list|)
operator|==
literal|null
condition|?
literal|""
else|:
name|a
operator|.
name|getCell
argument_list|(
name|col
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|getCell
argument_list|(
name|col
argument_list|)
operator|==
literal|null
condition|?
literal|""
else|:
name|b
operator|.
name|getCell
argument_list|(
name|col
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
block|}
end_class

end_unit

