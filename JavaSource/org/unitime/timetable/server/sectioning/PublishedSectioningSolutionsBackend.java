begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|sectioning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|SAXReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|SessionAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|PublishedSectioningSolutionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|PublishedSectioningSolutionInterface
operator|.
name|PublishedSectioningSolutionsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SectioningSolutionLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SectioningSolutionLogDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|StudentSectioningSolverService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|studentsct
operator|.
name|StudentSolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|NameFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|GsonBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonPrimitive
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializer
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|PublishedSectioningSolutionsRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|PublishedSectioningSolutionsBackend
implements|implements
name|GwtRpcImplementation
argument_list|<
name|PublishedSectioningSolutionsRequest
argument_list|,
name|GwtRpcResponseList
argument_list|<
name|PublishedSectioningSolutionInterface
argument_list|>
argument_list|>
block|{
specifier|protected
specifier|static
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
name|StudentSectioningSolverService
name|studentSectioningSolverService
decl_stmt|;
annotation|@
name|Override
specifier|public
name|GwtRpcResponseList
argument_list|<
name|PublishedSectioningSolutionInterface
argument_list|>
name|execute
parameter_list|(
name|PublishedSectioningSolutionsRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|StudentSectioningSolverPublish
argument_list|)
expr_stmt|;
name|SectioningSolutionLog
name|solution
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|solution
operator|=
name|SectioningSolutionLogDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|solution
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|errorSolutionDoesNotExist
argument_list|(
name|request
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|StudentSolverProxy
name|publishedSolver
init|=
name|studentSectioningSolverService
operator|.
name|getSolver
argument_list|(
literal|"PUBLISHED_"
operator|+
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
decl_stmt|;
name|DataProperties
name|publishedSolverProperties
init|=
operator|(
name|publishedSolver
operator|==
literal|null
condition|?
literal|null
else|:
name|publishedSolver
operator|.
name|getProperties
argument_list|()
operator|)
decl_stmt|;
name|Long
name|selectedId
init|=
operator|(
name|publishedSolverProperties
operator|==
literal|null
condition|?
literal|null
else|:
name|publishedSolverProperties
operator|.
name|getPropertyLong
argument_list|(
literal|"StudentSct.PublishId"
argument_list|,
literal|null
argument_list|)
operator|)
decl_stmt|;
name|StudentSolverProxy
name|mySolver
init|=
name|studentSectioningSolverService
operator|.
name|getSolver
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
decl_stmt|;
name|DataProperties
name|mySolverProperties
init|=
operator|(
name|mySolver
operator|==
literal|null
condition|?
literal|null
else|:
name|mySolver
operator|.
name|getProperties
argument_list|()
operator|)
decl_stmt|;
name|Long
name|mySolverId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mySolverProperties
operator|!=
literal|null
operator|&&
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
operator|.
name|equals
argument_list|(
name|mySolverProperties
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|)
argument_list|)
condition|)
block|{
name|mySolverId
operator|=
name|mySolverProperties
operator|.
name|getPropertyLong
argument_list|(
literal|"StudentSct.PublishId"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|request
operator|.
name|getOperation
argument_list|()
condition|)
block|{
case|case
name|LIST
case|:
break|break;
case|case
name|PUBLISH
case|:
name|publishedSolverProperties
operator|=
name|getConfig
argument_list|(
name|solution
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|selectedId
operator|=
name|solution
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|publishedSolver
operator|=
name|studentSectioningSolverService
operator|.
name|publishSolver
argument_list|(
name|solution
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|publishedSolverProperties
argument_list|,
name|solution
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|UNPUBLISH
case|:
if|if
condition|(
name|publishedSolver
operator|!=
literal|null
condition|)
block|{
name|publishedSolver
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|publishedSolver
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
name|context
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|StudentSectioningSolver
argument_list|)
expr_stmt|;
name|context
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|StudentSectioningUser
argument_list|)
expr_stmt|;
name|publishedSolver
operator|=
literal|null
expr_stmt|;
name|publishedSolverProperties
operator|=
literal|null
expr_stmt|;
name|selectedId
operator|=
literal|null
expr_stmt|;
break|break;
case|case
name|LOAD
case|:
if|if
condition|(
name|mySolver
operator|!=
literal|null
operator|&&
name|mySolver
operator|.
name|isWorking
argument_list|()
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|warnSolverIsWorking
argument_list|()
argument_list|)
throw|;
name|mySolverProperties
operator|=
name|getConfig
argument_list|(
name|solution
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|mySolverProperties
operator|.
name|setProperty
argument_list|(
literal|"StudentSct.PublishId"
argument_list|,
name|solution
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|mySolverProperties
operator|.
name|remove
argument_list|(
literal|"General.Host"
argument_list|)
expr_stmt|;
name|mySolver
operator|=
name|studentSectioningSolverService
operator|.
name|createSolver
argument_list|(
name|mySolverProperties
argument_list|,
name|solution
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|mySolverId
operator|=
name|solution
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
break|break;
case|case
name|UNLOAD
case|:
if|if
condition|(
name|mySolver
operator|!=
literal|null
condition|)
block|{
name|mySolver
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|mySolver
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
name|context
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|StudentSectioningUser
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|StudentSectioningSolver
argument_list|)
expr_stmt|;
name|mySolver
operator|=
literal|null
expr_stmt|;
name|mySolverProperties
operator|=
literal|null
expr_stmt|;
name|mySolverId
operator|=
literal|null
expr_stmt|;
break|break;
case|case
name|SELECT
case|:
name|context
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|StudentSectioningUser
argument_list|,
literal|"PUBLISHED_"
operator|+
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|StudentSectioningSolver
argument_list|)
expr_stmt|;
break|break;
case|case
name|DESELECT
case|:
name|context
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|StudentSectioningUser
argument_list|)
expr_stmt|;
name|context
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|StudentSectioningSolver
argument_list|)
expr_stmt|;
break|break;
case|case
name|REMOVE
case|:
name|SectioningSolutionLogDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|delete
argument_list|(
name|solution
argument_list|)
expr_stmt|;
break|break;
case|case
name|NOTE
case|:
name|solution
operator|.
name|setNote
argument_list|(
name|request
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|SectioningSolutionLogDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|update
argument_list|(
name|solution
argument_list|)
expr_stmt|;
break|break;
block|}
name|GwtRpcResponseList
argument_list|<
name|PublishedSectioningSolutionInterface
argument_list|>
name|ret
init|=
operator|new
name|GwtRpcResponseList
argument_list|<
name|PublishedSectioningSolutionInterface
argument_list|>
argument_list|()
decl_stmt|;
name|NameFormat
name|nf
init|=
name|NameFormat
operator|.
name|fromReference
argument_list|(
name|UserProperty
operator|.
name|NameFormat
operator|.
name|get
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Gson
name|gson
init|=
name|getGson
argument_list|()
decl_stmt|;
for|for
control|(
name|SectioningSolutionLog
name|log
range|:
operator|(
name|List
argument_list|<
name|SectioningSolutionLog
argument_list|>
operator|)
name|SectioningSolutionLogDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from SectioningSolutionLog where session = :sessionId order by timeStamp"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|PublishedSectioningSolutionInterface
name|pss
init|=
operator|new
name|PublishedSectioningSolutionInterface
argument_list|()
decl_stmt|;
name|pss
operator|.
name|setUniqueId
argument_list|(
name|log
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|pss
operator|.
name|setInfo
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|gson
operator|.
name|fromJson
argument_list|(
name|log
operator|.
name|getInfo
argument_list|()
argument_list|,
name|Map
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pss
operator|.
name|setOwner
argument_list|(
name|nf
operator|.
name|format
argument_list|(
name|log
operator|.
name|getOwner
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|pss
operator|.
name|setTimeStamp
argument_list|(
name|log
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
name|pss
operator|.
name|setLoaded
argument_list|(
name|log
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|selectedId
argument_list|)
argument_list|)
expr_stmt|;
name|pss
operator|.
name|setCanLoad
argument_list|(
operator|!
name|pss
operator|.
name|isLoaded
argument_list|()
argument_list|)
expr_stmt|;
name|pss
operator|.
name|setClonned
argument_list|(
name|log
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|mySolverId
argument_list|)
argument_list|)
expr_stmt|;
name|pss
operator|.
name|setCanClone
argument_list|(
name|mySolver
operator|==
literal|null
argument_list|)
expr_stmt|;
name|pss
operator|.
name|setConfig
argument_list|(
name|log
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|pss
operator|.
name|setNote
argument_list|(
name|log
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|pss
operator|.
name|setCanChangeNote
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|pss
operator|.
name|isLoaded
argument_list|()
condition|)
name|pss
operator|.
name|setSelected
argument_list|(
operator|(
literal|"PUBLISHED_"
operator|+
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
operator|)
operator|.
name|equals
argument_list|(
name|context
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|StudentSectioningUser
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|pss
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|pss
operator|.
name|setCanSelect
argument_list|(
name|mySolver
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|pss
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|protected
name|Gson
name|getGson
parameter_list|()
block|{
name|GsonBuilder
name|builder
init|=
operator|new
name|GsonBuilder
argument_list|()
operator|.
name|registerTypeAdapter
argument_list|(
name|DateTime
operator|.
name|class
argument_list|,
operator|new
name|JsonSerializer
argument_list|<
name|DateTime
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JsonElement
name|serialize
parameter_list|(
name|DateTime
name|src
parameter_list|,
name|Type
name|typeOfSrc
parameter_list|,
name|JsonSerializationContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|JsonPrimitive
argument_list|(
name|src
operator|.
name|toString
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss'Z'"
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|DateTime
operator|.
name|class
argument_list|,
operator|new
name|JsonDeserializer
argument_list|<
name|DateTime
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DateTime
name|deserialize
parameter_list|(
name|JsonElement
name|json
parameter_list|,
name|Type
name|typeOfT
parameter_list|,
name|JsonDeserializationContext
name|context
parameter_list|)
throws|throws
name|JsonParseException
block|{
return|return
operator|new
name|DateTime
argument_list|(
name|json
operator|.
name|getAsJsonPrimitive
argument_list|()
operator|.
name|getAsString
argument_list|()
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|Date
operator|.
name|class
argument_list|,
operator|new
name|JsonSerializer
argument_list|<
name|Date
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JsonElement
name|serialize
parameter_list|(
name|Date
name|src
parameter_list|,
name|Type
name|typeOfSrc
parameter_list|,
name|JsonSerializationContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|JsonPrimitive
argument_list|(
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss'Z'"
argument_list|)
operator|.
name|format
argument_list|(
name|src
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|Date
operator|.
name|class
argument_list|,
operator|new
name|JsonDeserializer
argument_list|<
name|Date
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Date
name|deserialize
parameter_list|(
name|JsonElement
name|json
parameter_list|,
name|Type
name|typeOfT
parameter_list|,
name|JsonDeserializationContext
name|context
parameter_list|)
throws|throws
name|JsonParseException
block|{
try|try
block|{
return|return
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
operator|.
name|parse
argument_list|(
name|json
operator|.
name|getAsJsonPrimitive
argument_list|()
operator|.
name|getAsString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JsonParseException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setPrettyPrinting
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|create
argument_list|()
return|;
block|}
specifier|protected
name|DataProperties
name|getConfig
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
try|try
block|{
name|Document
name|document
init|=
operator|(
operator|new
name|SAXReader
argument_list|()
operator|)
operator|.
name|read
argument_list|(
operator|new
name|GZIPInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|DataProperties
name|config
init|=
operator|new
name|DataProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|document
operator|.
name|getRootElement
argument_list|()
operator|.
name|element
argument_list|(
literal|"configuration"
argument_list|)
operator|.
name|elementIterator
argument_list|(
literal|"property"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
name|e
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|e
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|config
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|failedLoadData
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

