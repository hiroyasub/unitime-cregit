begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|sectioning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|CSVFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|CSVFile
operator|.
name|CSVField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|StudentSectioningModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|extension
operator|.
name|DistanceConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|extension
operator|.
name|TimeOverlapsCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|extension
operator|.
name|TimeOverlapsCounter
operator|.
name|Conflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|AcademicAreaCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|AreaClassificationMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Choice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|FreeTimeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Offering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|SctAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
operator|.
name|RequestPriority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Student
operator|.
name|StudentPriority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Subpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Unavailability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|report
operator|.
name|StudentSectioningReport
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|StudentSchedulingSolutionStatisticsReport
implements|implements
name|StudentSectioningReport
block|{
specifier|private
name|StudentSectioningModel
name|iModel
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|static
name|DecimalFormat
name|sIntFormat
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"#,##0"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|DecimalFormat
name|sPercentFormat
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.00"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|DecimalFormat
name|sDoubleFormat
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.00"
argument_list|)
decl_stmt|;
specifier|public
name|StudentSchedulingSolutionStatisticsReport
parameter_list|(
name|StudentSectioningModel
name|model
parameter_list|)
block|{
name|iModel
operator|=
name|model
expr_stmt|;
block|}
specifier|public
name|StudentSectioningModel
name|getModel
parameter_list|()
block|{
return|return
name|iModel
return|;
block|}
specifier|public
specifier|static
interface|interface
name|StudentFilter
block|{
specifier|public
name|boolean
name|matches
parameter_list|(
name|Student
name|student
parameter_list|)
function_decl|;
block|}
specifier|public
specifier|static
class|class
name|NotFilter
implements|implements
name|StudentFilter
block|{
name|StudentFilter
name|iFilter
decl_stmt|;
specifier|public
name|NotFilter
parameter_list|(
name|StudentFilter
name|filter
parameter_list|)
block|{
name|iFilter
operator|=
name|filter
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
return|return
operator|!
name|iFilter
operator|.
name|matches
argument_list|(
name|student
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|OrFilter
implements|implements
name|StudentFilter
block|{
name|StudentFilter
index|[]
name|iFilters
decl_stmt|;
specifier|public
name|OrFilter
parameter_list|(
name|StudentFilter
modifier|...
name|filters
parameter_list|)
block|{
name|iFilters
operator|=
name|filters
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
for|for
control|(
name|StudentFilter
name|filter
range|:
name|iFilters
control|)
if|if
condition|(
name|filter
operator|.
name|matches
argument_list|(
name|student
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|AndFilter
implements|implements
name|StudentFilter
block|{
name|StudentFilter
index|[]
name|iFilters
decl_stmt|;
specifier|public
name|AndFilter
parameter_list|(
name|StudentFilter
modifier|...
name|filters
parameter_list|)
block|{
name|iFilters
operator|=
name|filters
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
for|for
control|(
name|StudentFilter
name|filter
range|:
name|iFilters
control|)
if|if
condition|(
operator|!
name|filter
operator|.
name|matches
argument_list|(
name|student
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|GroupFilter
implements|implements
name|StudentFilter
block|{
specifier|private
name|String
name|iGroup
decl_stmt|;
specifier|public
name|GroupFilter
parameter_list|(
name|String
name|group
parameter_list|)
block|{
name|iGroup
operator|=
name|group
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
for|for
control|(
name|AcademicAreaCode
name|aac
range|:
name|student
operator|.
name|getMinors
argument_list|()
control|)
if|if
condition|(
name|iGroup
operator|.
name|equalsIgnoreCase
argument_list|(
name|aac
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|PriorityFilter
implements|implements
name|StudentFilter
block|{
specifier|private
name|StudentPriority
name|iPriority
decl_stmt|;
specifier|public
name|PriorityFilter
parameter_list|(
name|StudentPriority
name|p
parameter_list|)
block|{
name|iPriority
operator|=
name|p
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
return|return
name|student
operator|.
name|getPriority
argument_list|()
operator|==
name|iPriority
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DummyFilter
implements|implements
name|StudentFilter
block|{
specifier|public
name|DummyFilter
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
return|return
name|student
operator|.
name|isDummy
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DummyOrNoRequestsFilter
implements|implements
name|StudentFilter
block|{
specifier|public
name|DummyOrNoRequestsFilter
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
return|return
name|student
operator|.
name|isDummy
argument_list|()
operator|||
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|OnlineFilter
implements|implements
name|StudentFilter
block|{
specifier|public
name|OnlineFilter
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
for|for
control|(
name|AcademicAreaCode
name|aac
range|:
name|student
operator|.
name|getMinors
argument_list|()
control|)
block|{
if|if
condition|(
literal|"SCOVIDONL"
operator|.
name|equalsIgnoreCase
argument_list|(
name|aac
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
literal|"SCONTONL"
operator|.
name|equalsIgnoreCase
argument_list|(
name|aac
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
literal|"SCOVIDPMPE"
operator|.
name|equalsIgnoreCase
argument_list|(
name|aac
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|OnlineLateFilter
extends|extends
name|OnlineFilter
block|{
specifier|public
name|OnlineLateFilter
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
if|if
condition|(
operator|!
name|super
operator|.
name|matches
argument_list|(
name|student
argument_list|)
condition|)
return|return
literal|false
return|;
name|boolean
name|hasOL
init|=
literal|false
decl_stmt|;
name|boolean
name|hasRS
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|r
decl_stmt|;
for|for
control|(
name|Course
name|c
range|:
name|cr
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|".* [0-9]+I?OL(\\-[A-Za-z]+)?"
argument_list|)
condition|)
name|hasOL
operator|=
literal|true
expr_stmt|;
else|else
name|hasRS
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
return|return
name|hasRS
operator|&&
operator|!
name|hasOL
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|StarFilter
implements|implements
name|StudentFilter
block|{
specifier|public
name|StarFilter
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
for|for
control|(
name|AcademicAreaCode
name|aac
range|:
name|student
operator|.
name|getMinors
argument_list|()
control|)
block|{
if|if
condition|(
name|aac
operator|.
name|getCode
argument_list|()
operator|!=
literal|null
operator|&&
name|aac
operator|.
name|getCode
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"STAR"
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|aac
operator|.
name|getCode
argument_list|()
operator|!=
literal|null
operator|&&
name|aac
operator|.
name|getCode
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"VSTAR"
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
specifier|private
specifier|static
name|StudentFilter
name|FILTER_ALL
init|=
operator|new
name|AndFilter
argument_list|(
operator|new
name|NotFilter
argument_list|(
operator|new
name|DummyOrNoRequestsFilter
argument_list|()
argument_list|)
argument_list|,
operator|new
name|NotFilter
argument_list|(
operator|new
name|OnlineLateFilter
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|StudentFilter
name|FILTER_ALL_RES
init|=
operator|new
name|AndFilter
argument_list|(
operator|new
name|NotFilter
argument_list|(
operator|new
name|DummyOrNoRequestsFilter
argument_list|()
argument_list|)
argument_list|,
operator|new
name|NotFilter
argument_list|(
operator|new
name|OnlineFilter
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|StudentGroup
implements|implements
name|StudentFilter
block|{
name|ALL
argument_list|(
literal|"All Students"
argument_list|,
name|FILTER_ALL
argument_list|)
block|,
name|DUMMY
argument_list|(
literal|"Projected"
argument_list|,
operator|new
name|DummyFilter
argument_list|()
argument_list|)
block|,
comment|// ONLINE_LATE("Online-Late", new OnlineLateFilter()),
name|PRIORITY
argument_list|(
literal|"Priority"
argument_list|,
operator|new
name|AndFilter
argument_list|(
operator|new
name|PriorityFilter
argument_list|(
name|StudentPriority
operator|.
name|Priority
argument_list|)
argument_list|,
name|FILTER_ALL
argument_list|)
argument_list|)
block|,
name|SENIOR
argument_list|(
literal|"Seniors"
argument_list|,
operator|new
name|AndFilter
argument_list|(
operator|new
name|PriorityFilter
argument_list|(
name|StudentPriority
operator|.
name|Senior
argument_list|)
argument_list|,
name|FILTER_ALL
argument_list|)
argument_list|)
block|,
name|JUNIOR
argument_list|(
literal|"Juniors"
argument_list|,
operator|new
name|AndFilter
argument_list|(
operator|new
name|PriorityFilter
argument_list|(
name|StudentPriority
operator|.
name|Junior
argument_list|)
argument_list|,
name|FILTER_ALL
argument_list|)
argument_list|)
block|,
name|SOPHOMORE
argument_list|(
literal|"Sophomores"
argument_list|,
operator|new
name|AndFilter
argument_list|(
operator|new
name|PriorityFilter
argument_list|(
name|StudentPriority
operator|.
name|Sophomore
argument_list|)
argument_list|,
name|FILTER_ALL
argument_list|)
argument_list|)
block|,
name|RESHMEN
argument_list|(
literal|"Frehmen"
argument_list|,
operator|new
name|AndFilter
argument_list|(
operator|new
name|PriorityFilter
argument_list|(
name|StudentPriority
operator|.
name|Frehmen
argument_list|)
argument_list|,
name|FILTER_ALL
argument_list|)
argument_list|)
block|,
name|NORMAL
argument_list|(
literal|"Non-priority"
argument_list|,
operator|new
name|AndFilter
argument_list|(
operator|new
name|PriorityFilter
argument_list|(
name|StudentPriority
operator|.
name|Normal
argument_list|)
argument_list|,
name|FILTER_ALL
argument_list|)
argument_list|)
block|,
name|REBATCH
argument_list|(
literal|"RE-BATCH"
argument_list|,
operator|new
name|AndFilter
argument_list|(
operator|new
name|GroupFilter
argument_list|(
literal|"RE-BATCH"
argument_list|)
argument_list|,
name|FILTER_ALL_RES
argument_list|)
argument_list|)
block|,
name|ONLINE
argument_list|(
literal|"Online"
argument_list|,
operator|new
name|AndFilter
argument_list|(
operator|new
name|OnlineFilter
argument_list|()
argument_list|,
name|FILTER_ALL
argument_list|)
argument_list|)
block|,
name|GR_SCONTONL
argument_list|(
literal|"SCONTONL"
argument_list|,
operator|new
name|AndFilter
argument_list|(
operator|new
name|GroupFilter
argument_list|(
literal|"SCONTONL"
argument_list|)
argument_list|,
name|FILTER_ALL
argument_list|)
argument_list|)
block|,
name|GR_SCOVIDONL
argument_list|(
literal|"SCOVIDONL"
argument_list|,
operator|new
name|AndFilter
argument_list|(
operator|new
name|GroupFilter
argument_list|(
literal|"SCOVIDONL"
argument_list|)
argument_list|,
name|FILTER_ALL
argument_list|)
argument_list|)
block|,
name|GR_SCOVIDPMPE
argument_list|(
literal|"SCOVIDPMPE"
argument_list|,
operator|new
name|AndFilter
argument_list|(
operator|new
name|GroupFilter
argument_list|(
literal|"SCOVIDPMPE"
argument_list|)
argument_list|,
name|FILTER_ALL
argument_list|)
argument_list|)
block|,
name|PREREG
argument_list|(
literal|"PREREG"
argument_list|,
operator|new
name|AndFilter
argument_list|(
operator|new
name|GroupFilter
argument_list|(
literal|"PREREG"
argument_list|)
argument_list|,
name|FILTER_ALL_RES
argument_list|,
operator|new
name|NotFilter
argument_list|(
operator|new
name|StarFilter
argument_list|()
argument_list|)
argument_list|)
argument_list|)
block|,
name|STAR
argument_list|(
literal|"STAR"
argument_list|,
operator|new
name|AndFilter
argument_list|(
operator|new
name|StarFilter
argument_list|()
argument_list|,
name|FILTER_ALL_RES
argument_list|,
operator|new
name|NotFilter
argument_list|(
operator|new
name|GroupFilter
argument_list|(
literal|"RE-BATCH"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
block|,
name|GR_STAR
argument_list|(
literal|"On-campus STAR"
argument_list|,
operator|new
name|AndFilter
argument_list|(
operator|new
name|GroupFilter
argument_list|(
literal|"STAR"
argument_list|)
argument_list|,
name|FILTER_ALL_RES
argument_list|,
operator|new
name|NotFilter
argument_list|(
operator|new
name|GroupFilter
argument_list|(
literal|"RE-BATCH"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
block|,
name|GR_VSTAR
argument_list|(
literal|"Virtual STAR"
argument_list|,
operator|new
name|AndFilter
argument_list|(
operator|new
name|GroupFilter
argument_list|(
literal|"VSTAR"
argument_list|)
argument_list|,
name|FILTER_ALL_RES
argument_list|,
operator|new
name|NotFilter
argument_list|(
operator|new
name|GroupFilter
argument_list|(
literal|"RE-BATCH"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
block|,
name|OTHER
argument_list|(
literal|"Other"
argument_list|,
operator|new
name|AndFilter
argument_list|(
name|FILTER_ALL_RES
argument_list|,
operator|new
name|NotFilter
argument_list|(
operator|new
name|GroupFilter
argument_list|(
literal|"RE-BATCH"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|NotFilter
argument_list|(
operator|new
name|GroupFilter
argument_list|(
literal|"PREREG"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|NotFilter
argument_list|(
operator|new
name|StarFilter
argument_list|()
argument_list|)
argument_list|)
argument_list|)
block|,         ;
name|String
name|iName
decl_stmt|;
name|StudentFilter
name|iFilter
decl_stmt|;
name|StudentGroup
parameter_list|(
name|String
name|name
parameter_list|,
name|StudentFilter
name|filter
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
name|iFilter
operator|=
name|filter
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
return|return
name|iFilter
operator|.
name|matches
argument_list|(
name|student
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
interface|interface
name|Statistic
block|{
specifier|public
name|String
index|[]
name|getValues
parameter_list|(
name|StudentGroup
name|group
parameter_list|,
name|StudentSectioningModel
name|model
parameter_list|,
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|)
function_decl|;
block|}
specifier|public
specifier|static
enum|enum
name|Statistics
block|{
name|NBR_STUDENTS
argument_list|(
literal|"Number of Students"
argument_list|,
literal|"Number of students for which a schedule was computed"
argument_list|,
operator|new
name|Statistic
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getValues
parameter_list|(
name|StudentGroup
name|group
parameter_list|,
name|StudentSectioningModel
name|model
parameter_list|,
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Student
name|student
range|:
name|model
operator|.
name|getStudents
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|group
operator|.
name|matches
argument_list|(
name|student
argument_list|)
condition|)
continue|continue;
name|count
operator|++
expr_stmt|;
block|}
return|return
operator|new
name|String
index|[]
block|{
name|sIntFormat
operator|.
name|format
argument_list|(
name|count
argument_list|)
block|}
return|;
block|}
block|}
argument_list|)
block|,
name|COMPL_SCHEDULE
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Complete Schedule"
block|,
literal|"- missing one course"
block|,
literal|"- missing two courses"
block|,
literal|"- missing three courses"
block|,
literal|"- missing four or more courses"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Percentage of students with a complete schedule (all requested courses assigned or reaching max credit)"
block|,
literal|"Students that did not get a requested course"
block|,
literal|"Students that did not get two requested courses"
block|}
argument_list|,
operator|new
name|Statistic
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getValues
parameter_list|(
name|StudentGroup
name|group
parameter_list|,
name|StudentSectioningModel
name|model
parameter_list|,
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|)
block|{
name|int
name|total
init|=
literal|0
decl_stmt|;
name|int
index|[]
name|missing
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|int
name|complete
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Student
name|student
range|:
name|model
operator|.
name|getStudents
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|group
operator|.
name|matches
argument_list|(
name|student
argument_list|)
condition|)
continue|continue;
name|total
operator|++
expr_stmt|;
name|int
name|nrRequests
init|=
literal|0
decl_stmt|;
name|int
name|nrAssignedRequests
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|r
operator|instanceof
name|CourseRequest
operator|)
condition|)
continue|continue;
comment|// ignore free times
if|if
condition|(
operator|!
name|r
operator|.
name|isAlternative
argument_list|()
condition|)
name|nrRequests
operator|++
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|isAssigned
argument_list|(
name|assignment
argument_list|)
condition|)
name|nrAssignedRequests
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|nrAssignedRequests
operator|<
name|nrRequests
condition|)
block|{
name|missing
index|[
name|Math
operator|.
name|min
argument_list|(
name|nrRequests
operator|-
name|nrAssignedRequests
argument_list|,
name|missing
operator|.
name|length
argument_list|)
operator|-
literal|1
index|]
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|student
operator|.
name|isComplete
argument_list|(
name|assignment
argument_list|)
condition|)
name|complete
operator|++
expr_stmt|;
block|}
return|return
operator|new
name|String
index|[]
block|{
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|complete
operator|/
name|total
argument_list|)
operator|+
literal|"%"
block|,
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|missing
index|[
literal|0
index|]
operator|/
name|total
argument_list|)
operator|+
literal|"%"
block|,
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|missing
index|[
literal|1
index|]
operator|/
name|total
argument_list|)
operator|+
literal|"%"
block|,
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|missing
index|[
literal|2
index|]
operator|/
name|total
argument_list|)
operator|+
literal|"%"
block|,
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|missing
index|[
literal|3
index|]
operator|/
name|total
argument_list|)
operator|+
literal|"%"
block|}
return|;
block|}
block|}
argument_list|)
block|,
name|REQUESTED_COURSES
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Requested Courses"
block|,
literal|"- pre-enrolled"
block|,
literal|"Courses per Student"
block|,
literal|"Assigned Courses"
block|,
literal|"- 1st choice"
block|,
literal|"- 2nd choice"
block|,
literal|"- 3rd choice"
block|,
literal|"- 4th+ choice"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Total number of requested courses by all students (not counting substitutes or alternatives)"
block|,
literal|"Percentage of requested courses that were already enrolled (solver was not allowed to change)"
block|,
literal|"The average number of course requested per student"
block|,
literal|"Percentage of all course requests satisfied"
block|,
literal|"Out of the above, the percentage of cases where the 1st choice course was given"
block|}
argument_list|,
operator|new
name|Statistic
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getValues
parameter_list|(
name|StudentGroup
name|group
parameter_list|,
name|StudentSectioningModel
name|model
parameter_list|,
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|)
block|{
name|int
name|requests
init|=
literal|0
decl_stmt|,
name|students
init|=
literal|0
decl_stmt|,
name|assigned
init|=
literal|0
decl_stmt|;
name|int
name|fixed
init|=
literal|0
decl_stmt|,
name|initial
init|=
literal|0
decl_stmt|;
name|int
index|[]
name|assignedChoice
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|int
name|assignedChoiceTotal
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Student
name|student
range|:
name|model
operator|.
name|getStudents
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|group
operator|.
name|matches
argument_list|(
name|student
argument_list|)
condition|)
continue|continue;
name|students
operator|++
expr_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|r
operator|instanceof
name|CourseRequest
operator|)
condition|)
continue|continue;
comment|// ignore free times
if|if
condition|(
operator|!
name|r
operator|.
name|isAlternative
argument_list|()
condition|)
name|requests
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|isAlternative
argument_list|()
operator|&&
operator|(
operator|(
name|CourseRequest
operator|)
name|r
operator|)
operator|.
name|isFixed
argument_list|()
condition|)
name|fixed
operator|++
expr_stmt|;
name|Enrollment
name|e
init|=
name|r
operator|.
name|getAssignment
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|r
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|equals
argument_list|(
name|e
argument_list|)
condition|)
name|initial
operator|++
expr_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|assigned
operator|++
expr_stmt|;
name|assignedChoice
index|[
name|Math
operator|.
name|min
argument_list|(
name|e
operator|.
name|getTruePriority
argument_list|()
argument_list|,
name|assignedChoice
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
operator|++
expr_stmt|;
name|assignedChoiceTotal
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|fixed
operator|==
literal|0
operator|&&
name|initial
operator|>
literal|0
condition|)
name|fixed
operator|=
name|initial
expr_stmt|;
if|if
condition|(
name|requests
operator|==
literal|0
condition|)
return|return
operator|new
name|String
index|[]
block|{
name|sIntFormat
operator|.
name|format
argument_list|(
name|requests
argument_list|)
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,                             }
return|;
return|return
operator|new
name|String
index|[]
block|{
name|sIntFormat
operator|.
name|format
argument_list|(
name|requests
argument_list|)
block|,
operator|(
name|fixed
operator|==
literal|0
condition|?
literal|""
else|:
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|fixed
operator|/
name|requests
argument_list|)
operator|+
literal|"%"
operator|)
block|,
name|sDoubleFormat
operator|.
name|format
argument_list|(
operator|(
operator|(
name|double
operator|)
name|requests
operator|)
operator|/
name|students
argument_list|)
block|,
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|assigned
operator|/
name|requests
argument_list|)
operator|+
literal|"%"
block|,
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|assignedChoice
index|[
literal|0
index|]
operator|/
name|assignedChoiceTotal
argument_list|)
operator|+
literal|"%"
block|,
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|assignedChoice
index|[
literal|1
index|]
operator|/
name|assignedChoiceTotal
argument_list|)
operator|+
literal|"%"
block|,
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|assignedChoice
index|[
literal|2
index|]
operator|/
name|assignedChoiceTotal
argument_list|)
operator|+
literal|"%"
block|,
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|assignedChoice
index|[
literal|3
index|]
operator|/
name|assignedChoiceTotal
argument_list|)
operator|+
literal|"%"
block|,                         }
return|;
block|}
block|}
argument_list|)
block|,
name|NOT_ASSIGNED_PRIORITY
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Not-assigned priority"
block|,
literal|"- 1st priority not assigned"
block|,
literal|"- 2nd priority not assigned"
block|,
literal|"- 3rd priority not assigned"
block|,
literal|"- 4th priority not assigned"
block|,
literal|"- 5th priority not assigned"
block|,
literal|"- 6th or later priority not assigned"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"The average priority of the course requests that were not satisfied"
block|,
literal|"Number of cases where a student did not get a 1st priority course"
block|,
literal|"Number of cases where a student did not get a 2nd priority course"
block|}
argument_list|,
operator|new
name|Statistic
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getValues
parameter_list|(
name|StudentGroup
name|group
parameter_list|,
name|StudentSectioningModel
name|model
parameter_list|,
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|)
block|{
name|int
index|[]
name|notAssignedPriority
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|int
name|notAssignedTotal
init|=
literal|0
decl_stmt|;
name|int
name|avgPriority
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Student
name|student
range|:
name|model
operator|.
name|getStudents
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|group
operator|.
name|matches
argument_list|(
name|student
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|Request
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|r
operator|instanceof
name|CourseRequest
operator|)
condition|)
continue|continue;
comment|// ignore free times
name|Enrollment
name|e
init|=
name|r
operator|.
name|getAssignment
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|isAlternative
argument_list|()
condition|)
block|{
name|notAssignedPriority
index|[
name|Math
operator|.
name|min
argument_list|(
name|r
operator|.
name|getPriority
argument_list|()
argument_list|,
name|notAssignedPriority
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
operator|++
expr_stmt|;
name|notAssignedTotal
operator|++
expr_stmt|;
name|avgPriority
operator|+=
name|r
operator|.
name|getPriority
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|notAssignedTotal
operator|==
literal|0
condition|)
return|return
operator|new
name|String
index|[]
block|{
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
return|;
return|return
operator|new
name|String
index|[]
block|{
name|sDoubleFormat
operator|.
name|format
argument_list|(
literal|1.0
operator|+
operator|(
operator|(
name|double
operator|)
name|avgPriority
operator|)
operator|/
name|notAssignedTotal
argument_list|)
block|,
name|sIntFormat
operator|.
name|format
argument_list|(
name|notAssignedPriority
index|[
literal|0
index|]
argument_list|)
block|,
name|sIntFormat
operator|.
name|format
argument_list|(
name|notAssignedPriority
index|[
literal|1
index|]
argument_list|)
block|,
name|sIntFormat
operator|.
name|format
argument_list|(
name|notAssignedPriority
index|[
literal|2
index|]
argument_list|)
block|,
name|sIntFormat
operator|.
name|format
argument_list|(
name|notAssignedPriority
index|[
literal|3
index|]
argument_list|)
block|,
name|sIntFormat
operator|.
name|format
argument_list|(
name|notAssignedPriority
index|[
literal|4
index|]
argument_list|)
block|,
name|sIntFormat
operator|.
name|format
argument_list|(
name|notAssignedPriority
index|[
literal|5
index|]
argument_list|)
block|}
return|;
block|}
block|}
argument_list|,
literal|true
argument_list|)
block|,
name|ASSIGNED_COM
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Assigned WC/OC"
block|,
literal|"Missing space in WC/OC"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Number of students enrolled in a WC/OC course"
block|,
literal|"Number of unassigned course requests in written/oral communication courses"
block|}
argument_list|,
operator|new
name|Statistic
argument_list|()
block|{
name|String
index|[]
name|sComCourses
init|=
operator|new
name|String
index|[]
block|{
literal|"AMST 10100"
block|,
literal|"CLCS 23100"
block|,
literal|"CLCS 23700"
block|,
literal|"CLCS 33900"
block|,
literal|"COM 11400"
block|,
literal|"COM 20400"
block|,
literal|"COM 21700"
block|,
literal|"EDCI 20500"
block|,
literal|"EDPS 31500"
block|,
literal|"ENGL 10600"
block|,
literal|"ENGL 10800"
block|,
literal|"HONR 19903"
block|,
literal|"PHIL 26000"
block|,
literal|"SCLA 10100"
block|,
literal|"SCLA 10200"
block|,
literal|"SPAN 33000"
block|}
decl_stmt|;
specifier|private
name|boolean
name|isComCourse
parameter_list|(
name|Course
name|course
parameter_list|)
block|{
for|for
control|(
name|String
name|c
range|:
name|sComCourses
control|)
block|{
if|if
condition|(
name|course
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|c
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getValues
parameter_list|(
name|StudentGroup
name|group
parameter_list|,
name|StudentSectioningModel
name|model
parameter_list|,
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|)
block|{
name|int
name|assigned
init|=
literal|0
decl_stmt|,
name|notAssigned
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Student
name|student
range|:
name|model
operator|.
name|getStudents
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|group
operator|.
name|matches
argument_list|(
name|student
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|Request
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|r
operator|instanceof
name|CourseRequest
operator|)
condition|)
continue|continue;
comment|// ignore free times
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|r
decl_stmt|;
if|if
condition|(
name|isComCourse
argument_list|(
name|cr
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|r
operator|.
name|isAssigned
argument_list|(
name|assignment
argument_list|)
condition|)
name|assigned
operator|++
expr_stmt|;
if|else if
condition|(
name|student
operator|.
name|canAssign
argument_list|(
name|assignment
argument_list|,
name|r
argument_list|)
operator|&&
operator|!
name|r
operator|.
name|isAlternative
argument_list|()
condition|)
name|notAssigned
operator|++
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|String
index|[]
block|{
name|sIntFormat
operator|.
name|format
argument_list|(
name|assigned
argument_list|)
block|,
name|sIntFormat
operator|.
name|format
argument_list|(
name|notAssigned
argument_list|)
block|}
return|;
block|}
block|}
argument_list|,
literal|true
argument_list|)
block|,
name|CRITICAL
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Critical courses"
block|,
literal|"Assigned critical courses"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Number of course requests marked as critical (~ course/group/placeholder critical in degree plan)"
block|}
argument_list|,
operator|new
name|Statistic
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getValues
parameter_list|(
name|StudentGroup
name|group
parameter_list|,
name|StudentSectioningModel
name|model
parameter_list|,
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|)
block|{
name|int
name|assigned
init|=
literal|0
decl_stmt|,
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Student
name|student
range|:
name|model
operator|.
name|getStudents
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|group
operator|.
name|matches
argument_list|(
name|student
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|Request
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|r
operator|instanceof
name|CourseRequest
operator|)
condition|)
continue|continue;
comment|// ignore free times
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|r
decl_stmt|;
if|if
condition|(
operator|!
name|cr
operator|.
name|isAlternative
argument_list|()
operator|&&
name|cr
operator|.
name|getRequestPriority
argument_list|()
operator|==
name|RequestPriority
operator|.
name|Critical
condition|)
block|{
name|total
operator|++
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|isAssigned
argument_list|(
name|assignment
argument_list|)
condition|)
name|assigned
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|total
operator|==
literal|0
condition|)
return|return
operator|new
name|String
index|[]
block|{
literal|"N/A"
block|,
literal|""
block|}
return|;
return|return
operator|new
name|String
index|[]
block|{
name|sIntFormat
operator|.
name|format
argument_list|(
name|total
argument_list|)
block|,
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|assigned
operator|/
name|total
argument_list|)
operator|+
literal|"%"
block|}
return|;
block|}
block|}
argument_list|)
block|,
name|IMPORTANT
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Important courses"
block|,
literal|"Assigned important courses"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Number of course requests marked as important (~ course/group/placeholder critical in the first choice major)"
block|}
argument_list|,
operator|new
name|Statistic
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getValues
parameter_list|(
name|StudentGroup
name|group
parameter_list|,
name|StudentSectioningModel
name|model
parameter_list|,
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|)
block|{
name|int
name|assigned
init|=
literal|0
decl_stmt|,
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Student
name|student
range|:
name|model
operator|.
name|getStudents
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|group
operator|.
name|matches
argument_list|(
name|student
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|Request
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|r
operator|instanceof
name|CourseRequest
operator|)
condition|)
continue|continue;
comment|// ignore free times
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|r
decl_stmt|;
if|if
condition|(
operator|!
name|cr
operator|.
name|isAlternative
argument_list|()
operator|&&
name|cr
operator|.
name|getRequestPriority
argument_list|()
operator|==
name|RequestPriority
operator|.
name|Important
condition|)
block|{
name|total
operator|++
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|isAssigned
argument_list|(
name|assignment
argument_list|)
condition|)
name|assigned
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|total
operator|==
literal|0
condition|)
return|return
operator|new
name|String
index|[]
block|{
literal|"N/A"
block|,
literal|""
block|}
return|;
return|return
operator|new
name|String
index|[]
block|{
name|sIntFormat
operator|.
name|format
argument_list|(
name|total
argument_list|)
block|,
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|assigned
operator|/
name|total
argument_list|)
operator|+
literal|"%"
block|}
return|;
block|}
block|}
argument_list|,
literal|true
argument_list|)
block|,
name|PREFERENCES
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Course requests with preferences"
block|,
literal|"Satisfied preferences"
block|,
literal|"- instructional method"
block|,
literal|"- classes"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Course requests with IM or section preferences"
block|,
literal|"Percentage of satisfied preferences (both class and IM)"
block|,
literal|"Percentage of cases when the preferred instructional method was given to the student"
block|,
literal|"Percentage of cases when the preferred class was given to the student"
block|}
argument_list|,
operator|new
name|Statistic
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getValues
parameter_list|(
name|StudentGroup
name|group
parameter_list|,
name|StudentSectioningModel
name|model
parameter_list|,
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|)
block|{
name|int
name|prefs
init|=
literal|0
decl_stmt|,
name|configPrefs
init|=
literal|0
decl_stmt|,
name|sectionPrefs
init|=
literal|0
decl_stmt|;
name|double
name|sectionPref
init|=
literal|0.0
decl_stmt|,
name|configPref
init|=
literal|0.0
decl_stmt|;
name|double
name|satisfied
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|Student
name|student
range|:
name|model
operator|.
name|getStudents
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|group
operator|.
name|matches
argument_list|(
name|student
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|Request
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|r
operator|instanceof
name|CourseRequest
operator|)
condition|)
continue|continue;
comment|// ignore free times
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|r
decl_stmt|;
name|Enrollment
name|e
init|=
name|r
operator|.
name|getAssignment
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|r
operator|.
name|hasSelection
argument_list|()
condition|)
block|{
name|prefs
operator|++
expr_stmt|;
name|satisfied
operator|+=
comment|//0.3 * e.percentSelectedSameConfig() + 0.7 * e.percentSelectedSameSection();
name|e
operator|.
name|percentSelected
argument_list|()
expr_stmt|;
for|for
control|(
name|Choice
name|ch
range|:
name|cr
operator|.
name|getSelectedChoices
argument_list|()
control|)
block|{
if|if
condition|(
name|ch
operator|.
name|getConfigId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|configPrefs
operator|++
expr_stmt|;
name|configPref
operator|+=
name|e
operator|.
name|percentSelectedSameConfig
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
for|for
control|(
name|Choice
name|ch
range|:
name|cr
operator|.
name|getSelectedChoices
argument_list|()
control|)
block|{
if|if
condition|(
name|ch
operator|.
name|getSectionId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sectionPrefs
operator|++
expr_stmt|;
name|sectionPref
operator|+=
name|e
operator|.
name|percentSelectedSameSection
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|prefs
operator|==
literal|0
condition|)
return|return
operator|new
name|String
index|[]
block|{
literal|"N/A"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
return|;
return|return
operator|new
name|String
index|[]
block|{
name|sIntFormat
operator|.
name|format
argument_list|(
name|prefs
argument_list|)
block|,
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|satisfied
operator|/
name|prefs
argument_list|)
operator|+
literal|"%"
block|,
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|sectionPref
operator|/
name|sectionPrefs
argument_list|)
operator|+
literal|"%"
block|,
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|configPref
operator|/
name|configPrefs
argument_list|)
operator|+
literal|"%"
block|}
return|;
block|}
block|}
argument_list|,
literal|true
argument_list|)
block|,
name|BALANCING
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Unbalanced sections"
block|,
literal|"- average disbalance"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Classes dis-balanced by 10% or more"
block|,
literal|"Average difference between target and actual enrollment in the section"
block|}
argument_list|,
operator|new
name|Statistic
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getValues
parameter_list|(
name|StudentGroup
name|group
parameter_list|,
name|StudentSectioningModel
name|model
parameter_list|,
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|)
block|{
name|double
name|disbWeight
init|=
literal|0
decl_stmt|;
name|int
name|disb10Sections
init|=
literal|0
decl_stmt|;
name|int
name|totalSections
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Offering
name|offering
range|:
name|model
operator|.
name|getOfferings
argument_list|()
control|)
block|{
for|for
control|(
name|Config
name|config
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
block|{
name|double
name|enrl
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Enrollment
name|e
range|:
name|config
operator|.
name|getEnrollments
argument_list|(
name|assignment
argument_list|)
control|)
block|{
if|if
condition|(
name|group
operator|.
name|matches
argument_list|(
name|e
operator|.
name|getStudent
argument_list|()
argument_list|)
condition|)
name|enrl
operator|+=
name|e
operator|.
name|getRequest
argument_list|()
operator|.
name|getWeight
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Subpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
block|{
if|if
condition|(
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
continue|continue;
if|if
condition|(
name|subpart
operator|.
name|getLimit
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// sections have limits -> desired size is section limit x (total enrollment / total limit)
name|double
name|ratio
init|=
name|enrl
operator|/
name|subpart
operator|.
name|getLimit
argument_list|()
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
block|{
name|double
name|sectEnrl
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Enrollment
name|e
range|:
name|section
operator|.
name|getEnrollments
argument_list|(
name|assignment
argument_list|)
control|)
block|{
if|if
condition|(
name|group
operator|.
name|matches
argument_list|(
name|e
operator|.
name|getStudent
argument_list|()
argument_list|)
condition|)
name|sectEnrl
operator|+=
name|e
operator|.
name|getRequest
argument_list|()
operator|.
name|getWeight
argument_list|()
expr_stmt|;
block|}
name|double
name|desired
init|=
name|ratio
operator|*
name|section
operator|.
name|getLimit
argument_list|()
decl_stmt|;
name|disbWeight
operator|+=
name|Math
operator|.
name|abs
argument_list|(
name|sectEnrl
operator|-
name|desired
argument_list|)
expr_stmt|;
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|desired
operator|-
name|sectEnrl
argument_list|)
operator|>=
name|Math
operator|.
name|max
argument_list|(
literal|1.0
argument_list|,
literal|0.1
operator|*
name|section
operator|.
name|getLimit
argument_list|()
argument_list|)
condition|)
block|{
name|disb10Sections
operator|++
expr_stmt|;
block|}
name|totalSections
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// unlimited sections -> desired size is total enrollment / number of sections
for|for
control|(
name|Section
name|section
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
block|{
name|double
name|sectEnrl
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Enrollment
name|e
range|:
name|section
operator|.
name|getEnrollments
argument_list|(
name|assignment
argument_list|)
control|)
block|{
if|if
condition|(
name|group
operator|.
name|matches
argument_list|(
name|e
operator|.
name|getStudent
argument_list|()
argument_list|)
condition|)
name|sectEnrl
operator|+=
name|e
operator|.
name|getRequest
argument_list|()
operator|.
name|getWeight
argument_list|()
expr_stmt|;
block|}
name|double
name|desired
init|=
name|enrl
operator|/
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|disbWeight
operator|+=
name|Math
operator|.
name|abs
argument_list|(
name|sectEnrl
operator|-
name|desired
argument_list|)
expr_stmt|;
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|desired
operator|-
name|sectEnrl
argument_list|)
operator|>=
name|Math
operator|.
name|max
argument_list|(
literal|1.0
argument_list|,
literal|0.1
operator|*
name|desired
argument_list|)
condition|)
block|{
name|disb10Sections
operator|++
expr_stmt|;
block|}
name|totalSections
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
operator|new
name|String
index|[]
block|{
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|disb10Sections
operator|/
name|totalSections
argument_list|)
operator|+
literal|"%"
block|,
name|sDoubleFormat
operator|.
name|format
argument_list|(
name|disbWeight
operator|/
name|totalSections
argument_list|)
block|}
return|;
block|}
block|}
argument_list|,
literal|true
argument_list|)
block|,
name|DISTANCE
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Distance conflicts"
block|,
literal|"- students with distance conflicts"
block|,
literal|"- average distance in minutes"
block|,
literal|"Distance conflicts (SD)"
block|,
literal|"- students with distance conflicts"
block|,
literal|"- average distance in minutes"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Total number of distance conflicts"
block|,
literal|"Total number of students with one or more distance conflicts"
block|,
literal|"Average distance between two classes in minutes per conflict"
block|,
literal|"Total number of distance conflicts (students needed short distances)"
block|,
literal|"Total number of SD students with one or more distance conflicts"
block|,
literal|"Average distance between two classes in minutes per conflict"
block|}
argument_list|,
operator|new
name|Statistic
argument_list|()
block|{
specifier|protected
name|int
name|getDistanceInMinutes
parameter_list|(
name|StudentSectioningModel
name|model
parameter_list|,
name|RoomLocation
name|r1
parameter_list|,
name|RoomLocation
name|r2
parameter_list|)
block|{
if|if
condition|(
name|r1
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getId
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
return|return
name|getDistanceInMinutes
argument_list|(
name|model
argument_list|,
name|r2
argument_list|,
name|r1
argument_list|)
return|;
if|if
condition|(
name|r1
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|r2
operator|.
name|getId
argument_list|()
argument_list|)
operator|||
name|r1
operator|.
name|getIgnoreTooFar
argument_list|()
operator|||
name|r2
operator|.
name|getIgnoreTooFar
argument_list|()
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|r1
operator|.
name|getPosX
argument_list|()
operator|==
literal|null
operator|||
name|r1
operator|.
name|getPosY
argument_list|()
operator|==
literal|null
operator|||
name|r2
operator|.
name|getPosX
argument_list|()
operator|==
literal|null
operator|||
name|r2
operator|.
name|getPosY
argument_list|()
operator|==
literal|null
condition|)
return|return
name|model
operator|.
name|getDistanceMetric
argument_list|()
operator|.
name|getMaxTravelDistanceInMinutes
argument_list|()
return|;
return|return
name|model
operator|.
name|getDistanceMetric
argument_list|()
operator|.
name|getDistanceInMinutes
argument_list|(
name|r1
operator|.
name|getId
argument_list|()
argument_list|,
name|r1
operator|.
name|getPosX
argument_list|()
argument_list|,
name|r1
operator|.
name|getPosY
argument_list|()
argument_list|,
name|r2
operator|.
name|getId
argument_list|()
argument_list|,
name|r2
operator|.
name|getPosX
argument_list|()
argument_list|,
name|r2
operator|.
name|getPosY
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|int
name|getDistanceInMinutes
parameter_list|(
name|StudentSectioningModel
name|model
parameter_list|,
name|Placement
name|p1
parameter_list|,
name|Placement
name|p2
parameter_list|)
block|{
if|if
condition|(
name|p1
operator|.
name|isMultiRoom
argument_list|()
condition|)
block|{
if|if
condition|(
name|p2
operator|.
name|isMultiRoom
argument_list|()
condition|)
block|{
name|int
name|dist
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RoomLocation
name|r1
range|:
name|p1
operator|.
name|getRoomLocations
argument_list|()
control|)
block|{
for|for
control|(
name|RoomLocation
name|r2
range|:
name|p2
operator|.
name|getRoomLocations
argument_list|()
control|)
block|{
name|dist
operator|=
name|Math
operator|.
name|max
argument_list|(
name|dist
argument_list|,
name|getDistanceInMinutes
argument_list|(
name|model
argument_list|,
name|r1
argument_list|,
name|r2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dist
return|;
block|}
else|else
block|{
if|if
condition|(
name|p2
operator|.
name|getRoomLocation
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|0
return|;
name|int
name|dist
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RoomLocation
name|r1
range|:
name|p1
operator|.
name|getRoomLocations
argument_list|()
control|)
block|{
name|dist
operator|=
name|Math
operator|.
name|max
argument_list|(
name|dist
argument_list|,
name|getDistanceInMinutes
argument_list|(
name|model
argument_list|,
name|r1
argument_list|,
name|p2
operator|.
name|getRoomLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|dist
return|;
block|}
block|}
if|else if
condition|(
name|p2
operator|.
name|isMultiRoom
argument_list|()
condition|)
block|{
if|if
condition|(
name|p1
operator|.
name|getRoomLocation
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|0
return|;
name|int
name|dist
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RoomLocation
name|r2
range|:
name|p2
operator|.
name|getRoomLocations
argument_list|()
control|)
block|{
name|dist
operator|=
name|Math
operator|.
name|max
argument_list|(
name|dist
argument_list|,
name|getDistanceInMinutes
argument_list|(
name|model
argument_list|,
name|p1
operator|.
name|getRoomLocation
argument_list|()
argument_list|,
name|r2
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|dist
return|;
block|}
else|else
block|{
if|if
condition|(
name|p1
operator|.
name|getRoomLocation
argument_list|()
operator|==
literal|null
operator|||
name|p2
operator|.
name|getRoomLocation
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|0
return|;
return|return
name|getDistanceInMinutes
argument_list|(
name|model
argument_list|,
name|p1
operator|.
name|getRoomLocation
argument_list|()
argument_list|,
name|p2
operator|.
name|getRoomLocation
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
name|boolean
name|inConflict
parameter_list|(
name|StudentSectioningModel
name|model
parameter_list|,
name|Student
name|student
parameter_list|,
name|Section
name|s1
parameter_list|,
name|Section
name|s2
parameter_list|)
block|{
if|if
condition|(
name|s1
operator|.
name|getPlacement
argument_list|()
operator|==
literal|null
operator|||
name|s2
operator|.
name|getPlacement
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|TimeLocation
name|t1
init|=
name|s1
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|TimeLocation
name|t2
init|=
name|s2
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|t1
operator|.
name|shareDays
argument_list|(
name|t2
argument_list|)
operator|||
operator|!
name|t1
operator|.
name|shareWeeks
argument_list|(
name|t2
argument_list|)
condition|)
return|return
literal|false
return|;
name|int
name|a1
init|=
name|t1
operator|.
name|getStartSlot
argument_list|()
decl_stmt|,
name|a2
init|=
name|t2
operator|.
name|getStartSlot
argument_list|()
decl_stmt|;
if|if
condition|(
name|student
operator|.
name|isNeedShortDistances
argument_list|()
condition|)
block|{
if|if
condition|(
name|model
operator|.
name|getDistanceMetric
argument_list|()
operator|.
name|doComputeDistanceConflictsBetweenNonBTBClasses
argument_list|()
condition|)
block|{
if|if
condition|(
name|a1
operator|+
name|t1
operator|.
name|getNrSlotsPerMeeting
argument_list|()
operator|<=
name|a2
condition|)
block|{
name|int
name|dist
init|=
name|getDistanceInMinutes
argument_list|(
name|model
argument_list|,
name|s1
operator|.
name|getPlacement
argument_list|()
argument_list|,
name|s2
operator|.
name|getPlacement
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dist
operator|>
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
operator|(
name|a2
operator|-
name|a1
operator|-
name|t1
operator|.
name|getLength
argument_list|()
operator|)
condition|)
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|a2
operator|+
name|t2
operator|.
name|getNrSlotsPerMeeting
argument_list|()
operator|<=
name|a1
condition|)
block|{
name|int
name|dist
init|=
name|getDistanceInMinutes
argument_list|(
name|model
argument_list|,
name|s1
operator|.
name|getPlacement
argument_list|()
argument_list|,
name|s2
operator|.
name|getPlacement
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dist
operator|>
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
operator|(
name|a1
operator|-
name|a2
operator|-
name|t2
operator|.
name|getLength
argument_list|()
operator|)
condition|)
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|a1
operator|+
name|t1
operator|.
name|getNrSlotsPerMeeting
argument_list|()
operator|==
name|a2
condition|)
block|{
name|int
name|dist
init|=
name|getDistanceInMinutes
argument_list|(
name|model
argument_list|,
name|s1
operator|.
name|getPlacement
argument_list|()
argument_list|,
name|s2
operator|.
name|getPlacement
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dist
operator|>
literal|0
condition|)
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|a2
operator|+
name|t2
operator|.
name|getNrSlotsPerMeeting
argument_list|()
operator|==
name|a1
condition|)
block|{
name|int
name|dist
init|=
name|getDistanceInMinutes
argument_list|(
name|model
argument_list|,
name|s1
operator|.
name|getPlacement
argument_list|()
argument_list|,
name|s2
operator|.
name|getPlacement
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dist
operator|>
literal|0
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
if|if
condition|(
name|model
operator|.
name|getDistanceMetric
argument_list|()
operator|.
name|doComputeDistanceConflictsBetweenNonBTBClasses
argument_list|()
condition|)
block|{
if|if
condition|(
name|a1
operator|+
name|t1
operator|.
name|getNrSlotsPerMeeting
argument_list|()
operator|<=
name|a2
condition|)
block|{
name|int
name|dist
init|=
name|getDistanceInMinutes
argument_list|(
name|model
argument_list|,
name|s1
operator|.
name|getPlacement
argument_list|()
argument_list|,
name|s2
operator|.
name|getPlacement
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dist
operator|>
name|t1
operator|.
name|getBreakTime
argument_list|()
operator|+
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
operator|(
name|a2
operator|-
name|a1
operator|-
name|t1
operator|.
name|getLength
argument_list|()
operator|)
condition|)
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|a2
operator|+
name|t2
operator|.
name|getNrSlotsPerMeeting
argument_list|()
operator|<=
name|a1
condition|)
block|{
name|int
name|dist
init|=
name|getDistanceInMinutes
argument_list|(
name|model
argument_list|,
name|s1
operator|.
name|getPlacement
argument_list|()
argument_list|,
name|s2
operator|.
name|getPlacement
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dist
operator|>
name|t2
operator|.
name|getBreakTime
argument_list|()
operator|+
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
operator|(
name|a1
operator|-
name|a2
operator|-
name|t2
operator|.
name|getLength
argument_list|()
operator|)
condition|)
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|a1
operator|+
name|t1
operator|.
name|getNrSlotsPerMeeting
argument_list|()
operator|==
name|a2
condition|)
block|{
name|int
name|dist
init|=
name|getDistanceInMinutes
argument_list|(
name|model
argument_list|,
name|s1
operator|.
name|getPlacement
argument_list|()
argument_list|,
name|s2
operator|.
name|getPlacement
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dist
operator|>
name|t1
operator|.
name|getBreakTime
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|a2
operator|+
name|t2
operator|.
name|getNrSlotsPerMeeting
argument_list|()
operator|==
name|a1
condition|)
block|{
name|int
name|dist
init|=
name|getDistanceInMinutes
argument_list|(
name|model
argument_list|,
name|s1
operator|.
name|getPlacement
argument_list|()
argument_list|,
name|s2
operator|.
name|getPlacement
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dist
operator|>
name|t2
operator|.
name|getBreakTime
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|Set
argument_list|<
name|DistanceConflict
operator|.
name|Conflict
argument_list|>
name|conflicts
parameter_list|(
name|StudentSectioningModel
name|model
parameter_list|,
name|Enrollment
name|e1
parameter_list|)
block|{
name|Set
argument_list|<
name|DistanceConflict
operator|.
name|Conflict
argument_list|>
name|ret
init|=
operator|new
name|HashSet
argument_list|<
name|DistanceConflict
operator|.
name|Conflict
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|e1
operator|.
name|isCourseRequest
argument_list|()
condition|)
return|return
name|ret
return|;
for|for
control|(
name|Section
name|s1
range|:
name|e1
operator|.
name|getSections
argument_list|()
control|)
block|{
for|for
control|(
name|Section
name|s2
range|:
name|e1
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|s1
operator|.
name|getId
argument_list|()
operator|<
name|s2
operator|.
name|getId
argument_list|()
operator|&&
name|inConflict
argument_list|(
name|model
argument_list|,
name|e1
operator|.
name|getStudent
argument_list|()
argument_list|,
name|s1
argument_list|,
name|s2
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|DistanceConflict
operator|.
name|Conflict
argument_list|(
name|e1
operator|.
name|getStudent
argument_list|()
argument_list|,
name|e1
argument_list|,
name|s1
argument_list|,
name|e1
argument_list|,
name|s2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|Set
argument_list|<
name|DistanceConflict
operator|.
name|Conflict
argument_list|>
name|conflicts
parameter_list|(
name|StudentSectioningModel
name|model
parameter_list|,
name|Enrollment
name|e1
parameter_list|,
name|Enrollment
name|e2
parameter_list|)
block|{
name|Set
argument_list|<
name|DistanceConflict
operator|.
name|Conflict
argument_list|>
name|ret
init|=
operator|new
name|HashSet
argument_list|<
name|DistanceConflict
operator|.
name|Conflict
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|e1
operator|.
name|isCourseRequest
argument_list|()
operator|||
operator|!
name|e2
operator|.
name|isCourseRequest
argument_list|()
operator|||
operator|!
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|equals
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
argument_list|)
condition|)
return|return
name|ret
return|;
for|for
control|(
name|Section
name|s1
range|:
name|e1
operator|.
name|getSections
argument_list|()
control|)
block|{
for|for
control|(
name|Section
name|s2
range|:
name|e2
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|inConflict
argument_list|(
name|model
argument_list|,
name|e1
operator|.
name|getStudent
argument_list|()
argument_list|,
name|s1
argument_list|,
name|s2
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|DistanceConflict
operator|.
name|Conflict
argument_list|(
name|e1
operator|.
name|getStudent
argument_list|()
argument_list|,
name|e1
argument_list|,
name|s1
argument_list|,
name|e2
argument_list|,
name|s2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|Set
argument_list|<
name|DistanceConflict
operator|.
name|Conflict
argument_list|>
name|computeAllConflicts
parameter_list|(
name|StudentSectioningModel
name|model
parameter_list|,
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|)
block|{
name|Set
argument_list|<
name|DistanceConflict
operator|.
name|Conflict
argument_list|>
name|ret
init|=
operator|new
name|HashSet
argument_list|<
name|DistanceConflict
operator|.
name|Conflict
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Request
name|r1
range|:
name|model
operator|.
name|variables
argument_list|()
control|)
block|{
name|Enrollment
name|e1
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|r1
argument_list|)
decl_stmt|;
if|if
condition|(
name|e1
operator|==
literal|null
operator|||
operator|!
operator|(
name|r1
operator|instanceof
name|CourseRequest
operator|)
condition|)
continue|continue;
name|ret
operator|.
name|addAll
argument_list|(
name|conflicts
argument_list|(
name|model
argument_list|,
name|e1
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Request
name|r2
range|:
name|r1
operator|.
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|Enrollment
name|e2
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|r2
argument_list|)
decl_stmt|;
if|if
condition|(
name|e2
operator|==
literal|null
operator|||
name|r1
operator|.
name|getId
argument_list|()
operator|>=
name|r2
operator|.
name|getId
argument_list|()
operator|||
operator|!
operator|(
name|r2
operator|instanceof
name|CourseRequest
operator|)
condition|)
continue|continue;
name|ret
operator|.
name|addAll
argument_list|(
name|conflicts
argument_list|(
name|model
argument_list|,
name|e1
argument_list|,
name|e2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getValues
parameter_list|(
name|StudentGroup
name|group
parameter_list|,
name|StudentSectioningModel
name|model
parameter_list|,
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|)
block|{
if|if
condition|(
name|model
operator|.
name|getDistanceMetric
argument_list|()
operator|==
literal|null
condition|)
return|return
operator|new
name|String
index|[]
block|{
literal|"N/A"
block|,
literal|""
block|,
literal|""
block|}
return|;
name|Set
argument_list|<
name|DistanceConflict
operator|.
name|Conflict
argument_list|>
name|conflicts
init|=
name|computeAllConflicts
argument_list|(
name|model
argument_list|,
name|assignment
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Student
argument_list|>
name|students
init|=
operator|new
name|HashSet
argument_list|<
name|Student
argument_list|>
argument_list|()
decl_stmt|,
name|studentsSD
init|=
operator|new
name|HashSet
argument_list|<
name|Student
argument_list|>
argument_list|()
decl_stmt|;
name|double
name|distance
init|=
literal|0
decl_stmt|,
name|distanceSD
init|=
literal|0
decl_stmt|;
name|int
name|total
init|=
literal|0
decl_stmt|,
name|totalSD
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DistanceConflict
operator|.
name|Conflict
name|conflict
range|:
name|conflicts
control|)
block|{
if|if
condition|(
name|group
operator|.
name|matches
argument_list|(
name|conflict
operator|.
name|getStudent
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|conflict
operator|.
name|getStudent
argument_list|()
operator|.
name|isNeedShortDistances
argument_list|()
condition|)
block|{
name|totalSD
operator|++
expr_stmt|;
name|studentsSD
operator|.
name|add
argument_list|(
name|conflict
operator|.
name|getStudent
argument_list|()
argument_list|)
expr_stmt|;
name|distanceSD
operator|+=
name|Placement
operator|.
name|getDistanceInMinutes
argument_list|(
name|model
operator|.
name|getDistanceMetric
argument_list|()
argument_list|,
name|conflict
operator|.
name|getS1
argument_list|()
operator|.
name|getPlacement
argument_list|()
argument_list|,
name|conflict
operator|.
name|getS2
argument_list|()
operator|.
name|getPlacement
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|total
operator|++
expr_stmt|;
name|students
operator|.
name|add
argument_list|(
name|conflict
operator|.
name|getStudent
argument_list|()
argument_list|)
expr_stmt|;
name|distance
operator|+=
name|Placement
operator|.
name|getDistanceInMinutes
argument_list|(
name|model
operator|.
name|getDistanceMetric
argument_list|()
argument_list|,
name|conflict
operator|.
name|getS1
argument_list|()
operator|.
name|getPlacement
argument_list|()
argument_list|,
name|conflict
operator|.
name|getS2
argument_list|()
operator|.
name|getPlacement
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|String
index|[]
block|{
name|sIntFormat
operator|.
name|format
argument_list|(
name|total
argument_list|)
block|,
name|sIntFormat
operator|.
name|format
argument_list|(
name|students
operator|.
name|size
argument_list|()
argument_list|)
block|,
operator|(
name|total
operator|==
literal|0
condition|?
literal|""
else|:
name|sDoubleFormat
operator|.
name|format
argument_list|(
name|distance
operator|/
name|total
argument_list|)
operator|)
block|,
name|sIntFormat
operator|.
name|format
argument_list|(
name|totalSD
argument_list|)
block|,
name|sIntFormat
operator|.
name|format
argument_list|(
name|studentsSD
operator|.
name|size
argument_list|()
argument_list|)
block|,
operator|(
name|totalSD
operator|==
literal|0
condition|?
literal|""
else|:
name|sDoubleFormat
operator|.
name|format
argument_list|(
name|distanceSD
operator|/
name|totalSD
argument_list|)
operator|)
block|}
return|;
block|}
block|}
argument_list|,
literal|true
argument_list|)
block|,
name|OVERLAP
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Free time conflict"
block|,
literal|"- students in conflict"
block|,
literal|"- average minutes"
block|,
literal|"Course time conflict"
block|,
literal|"- students in conflict"
block|,
literal|"- average minutes"
block|,
literal|"Teaching conflicts"
block|,
literal|"- students in conflict"
block|,
literal|"- average minutes"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Total number of free time conflicts"
block|,
literal|"Total number of students with a free time conflict"
block|,
literal|"For students with a free time conflict, the average number of overlapping minutes per student"
block|,
literal|"Total number of course time conflicts"
block|,
literal|"Total number of students with a course time conflict"
block|,
literal|"For students with a course time conflict, the average number of overlapping minutes per student"
block|,
literal|"Total number of teaching time conflicts"
block|,
literal|"Total number of students with a teaching conflict"
block|,
literal|"For students with a teaching time conflict, the average number of overlapping minutes per student"
block|}
argument_list|,
operator|new
name|Statistic
argument_list|()
block|{
specifier|public
name|boolean
name|inConflict
parameter_list|(
name|SctAssignment
name|a1
parameter_list|,
name|SctAssignment
name|a2
parameter_list|)
block|{
if|if
condition|(
name|a1
operator|.
name|getTime
argument_list|()
operator|==
literal|null
operator|||
name|a2
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|a1
operator|instanceof
name|Section
operator|&&
name|a2
operator|instanceof
name|Section
operator|&&
operator|(
operator|(
name|Section
operator|)
name|a1
operator|)
operator|.
name|isToIgnoreStudentConflictsWith
argument_list|(
name|a2
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
name|a1
operator|.
name|getTime
argument_list|()
operator|.
name|hasIntersection
argument_list|(
name|a2
operator|.
name|getTime
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|share
parameter_list|(
name|SctAssignment
name|a1
parameter_list|,
name|SctAssignment
name|a2
parameter_list|)
block|{
if|if
condition|(
operator|!
name|inConflict
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|)
condition|)
return|return
literal|0
return|;
return|return
name|a1
operator|.
name|getTime
argument_list|()
operator|.
name|nrSharedDays
argument_list|(
name|a2
operator|.
name|getTime
argument_list|()
argument_list|)
operator|*
name|a1
operator|.
name|getTime
argument_list|()
operator|.
name|nrSharedHours
argument_list|(
name|a2
operator|.
name|getTime
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Set
argument_list|<
name|Conflict
argument_list|>
name|conflicts
parameter_list|(
name|Enrollment
name|e1
parameter_list|,
name|Enrollment
name|e2
parameter_list|)
block|{
name|Set
argument_list|<
name|Conflict
argument_list|>
name|ret
init|=
operator|new
name|HashSet
argument_list|<
name|Conflict
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|equals
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
argument_list|)
condition|)
return|return
name|ret
return|;
if|if
condition|(
name|e1
operator|.
name|getRequest
argument_list|()
operator|instanceof
name|FreeTimeRequest
operator|&&
name|e2
operator|.
name|getRequest
argument_list|()
operator|instanceof
name|FreeTimeRequest
condition|)
return|return
name|ret
return|;
for|for
control|(
name|SctAssignment
name|s1
range|:
name|e1
operator|.
name|getAssignments
argument_list|()
control|)
block|{
for|for
control|(
name|SctAssignment
name|s2
range|:
name|e2
operator|.
name|getAssignments
argument_list|()
control|)
block|{
if|if
condition|(
name|inConflict
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|Conflict
argument_list|(
name|e1
operator|.
name|getStudent
argument_list|()
argument_list|,
name|share
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
argument_list|,
name|e1
argument_list|,
name|s1
argument_list|,
name|e2
argument_list|,
name|s2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|Set
argument_list|<
name|Conflict
argument_list|>
name|computeAllConflicts
parameter_list|(
name|StudentSectioningModel
name|model
parameter_list|,
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|)
block|{
name|Set
argument_list|<
name|Conflict
argument_list|>
name|ret
init|=
operator|new
name|HashSet
argument_list|<
name|Conflict
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Request
name|r1
range|:
name|model
operator|.
name|variables
argument_list|()
control|)
block|{
name|Enrollment
name|e1
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|r1
argument_list|)
decl_stmt|;
if|if
condition|(
name|e1
operator|==
literal|null
operator|||
name|r1
operator|instanceof
name|FreeTimeRequest
condition|)
continue|continue;
for|for
control|(
name|Request
name|r2
range|:
name|r1
operator|.
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|Enrollment
name|e2
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|r2
argument_list|)
decl_stmt|;
if|if
condition|(
name|r2
operator|instanceof
name|FreeTimeRequest
condition|)
block|{
name|FreeTimeRequest
name|ft
init|=
operator|(
name|FreeTimeRequest
operator|)
name|r2
decl_stmt|;
name|ret
operator|.
name|addAll
argument_list|(
name|conflicts
argument_list|(
name|e1
argument_list|,
name|ft
operator|.
name|createEnrollment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|e2
operator|!=
literal|null
operator|&&
name|r1
operator|.
name|getId
argument_list|()
operator|<
name|r2
operator|.
name|getId
argument_list|()
condition|)
block|{
name|ret
operator|.
name|addAll
argument_list|(
name|conflicts
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Unavailability
name|unavailability
range|:
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getUnavailabilities
argument_list|()
control|)
for|for
control|(
name|SctAssignment
name|section
range|:
name|e1
operator|.
name|getAssignments
argument_list|()
control|)
if|if
condition|(
name|inConflict
argument_list|(
name|section
argument_list|,
name|unavailability
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|Conflict
argument_list|(
name|e1
operator|.
name|getStudent
argument_list|()
argument_list|,
name|share
argument_list|(
name|section
argument_list|,
name|unavailability
argument_list|)
argument_list|,
name|e1
argument_list|,
name|section
argument_list|,
name|unavailability
operator|.
name|createEnrollment
argument_list|()
argument_list|,
name|unavailability
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getValues
parameter_list|(
name|StudentGroup
name|group
parameter_list|,
name|StudentSectioningModel
name|model
parameter_list|,
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|)
block|{
name|Set
argument_list|<
name|Student
argument_list|>
name|timeFt
init|=
operator|new
name|HashSet
argument_list|<
name|Student
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Student
argument_list|>
name|timeCourse
init|=
operator|new
name|HashSet
argument_list|<
name|Student
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Student
argument_list|>
name|timeUnav
init|=
operator|new
name|HashSet
argument_list|<
name|Student
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|ftMin
init|=
literal|0
decl_stmt|,
name|courseMin
init|=
literal|0
decl_stmt|,
name|unavMin
init|=
literal|0
decl_stmt|;
name|int
name|totFt
init|=
literal|0
decl_stmt|,
name|totCourse
init|=
literal|0
decl_stmt|,
name|totUn
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|TimeOverlapsCounter
operator|.
name|Conflict
argument_list|>
name|conf
init|=
name|computeAllConflicts
argument_list|(
name|model
argument_list|,
name|assignment
argument_list|)
decl_stmt|;
for|for
control|(
name|TimeOverlapsCounter
operator|.
name|Conflict
name|c
range|:
name|conf
control|)
block|{
if|if
condition|(
name|group
operator|.
name|matches
argument_list|(
name|c
operator|.
name|getStudent
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|getR1
argument_list|()
operator|instanceof
name|CourseRequest
operator|&&
name|c
operator|.
name|getR2
argument_list|()
operator|instanceof
name|CourseRequest
condition|)
block|{
name|totCourse
operator|++
expr_stmt|;
name|courseMin
operator|+=
literal|5
operator|*
name|c
operator|.
name|getShare
argument_list|()
expr_stmt|;
name|timeCourse
operator|.
name|add
argument_list|(
name|c
operator|.
name|getStudent
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|c
operator|.
name|getS2
argument_list|()
operator|instanceof
name|Unavailability
condition|)
block|{
name|totUn
operator|++
expr_stmt|;
name|unavMin
operator|+=
literal|5
operator|*
name|c
operator|.
name|getShare
argument_list|()
expr_stmt|;
name|timeUnav
operator|.
name|add
argument_list|(
name|c
operator|.
name|getStudent
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|totFt
operator|++
expr_stmt|;
name|ftMin
operator|+=
literal|5
operator|*
name|c
operator|.
name|getShare
argument_list|()
expr_stmt|;
name|timeFt
operator|.
name|add
argument_list|(
name|c
operator|.
name|getStudent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|String
index|[]
block|{
name|sIntFormat
operator|.
name|format
argument_list|(
name|totFt
argument_list|)
block|,
name|sIntFormat
operator|.
name|format
argument_list|(
name|timeFt
operator|.
name|size
argument_list|()
argument_list|)
block|,
operator|(
name|timeFt
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|sDoubleFormat
operator|.
name|format
argument_list|(
operator|(
operator|(
name|double
operator|)
name|ftMin
operator|)
operator|/
name|timeFt
operator|.
name|size
argument_list|()
argument_list|)
operator|)
block|,
name|sIntFormat
operator|.
name|format
argument_list|(
name|totCourse
argument_list|)
block|,
name|sIntFormat
operator|.
name|format
argument_list|(
name|timeCourse
operator|.
name|size
argument_list|()
argument_list|)
block|,
operator|(
name|timeCourse
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|sDoubleFormat
operator|.
name|format
argument_list|(
operator|(
operator|(
name|double
operator|)
name|courseMin
operator|)
operator|/
name|timeCourse
operator|.
name|size
argument_list|()
argument_list|)
operator|)
block|,
name|sIntFormat
operator|.
name|format
argument_list|(
name|totUn
argument_list|)
block|,
name|sIntFormat
operator|.
name|format
argument_list|(
name|timeUnav
operator|.
name|size
argument_list|()
argument_list|)
block|,
operator|(
name|timeUnav
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|sDoubleFormat
operator|.
name|format
argument_list|(
operator|(
operator|(
name|double
operator|)
name|unavMin
operator|)
operator|/
name|timeUnav
operator|.
name|size
argument_list|()
argument_list|)
operator|)
block|}
return|;
block|}
block|}
argument_list|,
literal|true
argument_list|)
block|,
name|CREDITS
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Students requesting 12+ credits"
block|,
literal|"- 12+ credits assigned"
block|,
literal|"Students requesting 15+ credits"
block|,
literal|"- 15+ credits assigned"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Total number of students requesting 12 or more credit hours"
block|,
literal|"Out of these, the percentage of students having 12 or more credits assigned"
block|,
literal|"Total number of students requesting 15 or more credit hours"
block|,
literal|"Out of these, the percentage of students having 15 or more credits assigned"
block|,         		}
argument_list|,
operator|new
name|Statistic
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getValues
parameter_list|(
name|StudentGroup
name|group
parameter_list|,
name|StudentSectioningModel
name|model
parameter_list|,
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|)
block|{
name|int
name|total12
init|=
literal|0
decl_stmt|,
name|assigned12
init|=
literal|0
decl_stmt|;
name|int
name|total15
init|=
literal|0
decl_stmt|,
name|assigned15
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Student
name|student
range|:
name|model
operator|.
name|getStudents
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|group
operator|.
name|matches
argument_list|(
name|student
argument_list|)
condition|)
continue|continue;
name|float
name|credit
init|=
literal|0
decl_stmt|;
name|float
name|assignedCredit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|r
operator|instanceof
name|CourseRequest
operator|)
condition|)
continue|continue;
comment|// ignore free times
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|r
decl_stmt|;
if|if
condition|(
operator|!
name|cr
operator|.
name|isAlternative
argument_list|()
condition|)
block|{
name|Course
name|c
init|=
name|cr
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|hasCreditValue
argument_list|()
condition|)
name|credit
operator|+=
name|c
operator|.
name|getCreditValue
argument_list|()
expr_stmt|;
else|else
name|credit
operator|+=
name|cr
operator|.
name|getMinCredit
argument_list|()
expr_stmt|;
block|}
name|Enrollment
name|e
init|=
name|cr
operator|.
name|getAssignment
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|assignedCredit
operator|+=
name|e
operator|.
name|getCredit
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|credit
operator|>=
literal|12f
condition|)
block|{
name|total12
operator|++
expr_stmt|;
if|if
condition|(
name|assignedCredit
operator|>=
literal|12f
condition|)
name|assigned12
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|credit
operator|>=
literal|15f
condition|)
block|{
name|total15
operator|++
expr_stmt|;
if|if
condition|(
name|assignedCredit
operator|>=
literal|15f
condition|)
name|assigned15
operator|++
expr_stmt|;
block|}
block|}
return|return
operator|new
name|String
index|[]
block|{
name|sIntFormat
operator|.
name|format
argument_list|(
name|total12
argument_list|)
block|,
operator|(
name|total12
operator|==
literal|0
condition|?
literal|""
else|:
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|assigned12
operator|/
name|total12
argument_list|)
operator|+
literal|"%"
operator|)
block|,
name|sIntFormat
operator|.
name|format
argument_list|(
name|total15
argument_list|)
block|,
operator|(
name|total15
operator|==
literal|0
condition|?
literal|""
else|:
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|assigned15
operator|/
name|total15
argument_list|)
operator|+
literal|"%"
operator|)
block|,                 }
return|;
block|}
block|}
argument_list|,
literal|true
argument_list|)
block|,
name|F2F
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Residential Students"
block|,
literal|"Arranged Hours Assignments"
block|,
literal|"- percentage of all assignments"
block|,
literal|"Online Assignments"
block|,
literal|"- percentage of all assignments"
block|,
literal|"Students with no face-to-face classes"
block|,
literal|"- percentage of all undergrad students"
block|,
literal|"Students with<50% classes face-to-face"
block|,
literal|"- percentage of all undergrad students"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Number of students that are NOT online-only (only residential students are counted in the following numbers)"
block|,
literal|"Number of class assignments that are Arranged Hours"
block|,
literal|"Percentage of all class assignments"
block|,
literal|"Number of class assignments that are Online (no time, time with no room, or time with ONLINE room)"
block|,
literal|"Percentage of all class assignments"
block|,
literal|"Total number of undergraduate students with no face-to-face classes."
block|,
literal|"Percentage of all undergraduate students"
block|,
literal|"Total number of undergraduate students with less than half of their schedule face-to-face."
block|,
literal|"Percentage of all undergraduate students"
block|,         		}
argument_list|,
operator|new
name|Statistic
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getValues
parameter_list|(
name|StudentGroup
name|group
parameter_list|,
name|StudentSectioningModel
name|model
parameter_list|,
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|)
block|{
name|int
name|arrClass
init|=
literal|0
decl_stmt|,
name|onlineClass
init|=
literal|0
decl_stmt|,
name|allClass
init|=
literal|0
decl_stmt|;
name|int
name|residentialStudents
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Student
name|student
range|:
name|model
operator|.
name|getStudents
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|group
operator|.
name|matches
argument_list|(
name|student
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|FILTER_ALL_RES
operator|.
name|matches
argument_list|(
name|student
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|residentialStudents
operator|++
expr_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|Enrollment
name|e
init|=
name|r
operator|.
name|getAssignment
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
operator|&&
name|e
operator|.
name|isCourseRequest
argument_list|()
condition|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|e
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|isOnline
argument_list|()
condition|)
name|onlineClass
operator|++
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
name|arrClass
operator|++
expr_stmt|;
name|allClass
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|int
name|online
init|=
literal|0
decl_stmt|;
name|int
name|half
init|=
literal|0
decl_stmt|;
name|int
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Student
name|student
range|:
name|model
operator|.
name|getStudents
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|group
operator|.
name|matches
argument_list|(
name|student
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|FILTER_ALL_RES
operator|.
name|matches
argument_list|(
name|student
argument_list|)
condition|)
continue|continue;
name|boolean
name|gr
init|=
literal|false
decl_stmt|;
for|for
control|(
name|AreaClassificationMajor
name|acm
range|:
name|student
operator|.
name|getAreaClassificationMajors
argument_list|()
control|)
block|{
if|if
condition|(
name|acm
operator|.
name|getClassification
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"G"
argument_list|)
operator|||
name|acm
operator|.
name|getClassification
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"P"
argument_list|)
condition|)
name|gr
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|gr
condition|)
continue|continue;
name|int
name|sections
init|=
literal|0
decl_stmt|,
name|onlineSections
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|r
operator|instanceof
name|CourseRequest
operator|)
condition|)
continue|continue;
comment|// ignore free times
name|Enrollment
name|e
init|=
name|r
operator|.
name|getAssignment
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
for|for
control|(
name|Section
name|s
range|:
name|e
operator|.
name|getSections
argument_list|()
control|)
block|{
name|sections
operator|++
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|isOnline
argument_list|()
condition|)
name|onlineSections
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sections
operator|>
literal|0
condition|)
block|{
name|total
operator|++
expr_stmt|;
if|if
condition|(
name|onlineSections
operator|==
name|sections
condition|)
name|online
operator|++
expr_stmt|;
if|if
condition|(
name|onlineSections
operator|>
literal|0.5
operator|*
name|sections
condition|)
name|half
operator|++
expr_stmt|;
block|}
block|}
return|return
operator|new
name|String
index|[]
block|{
name|sIntFormat
operator|.
name|format
argument_list|(
name|residentialStudents
argument_list|)
block|,
operator|(
name|residentialStudents
operator|==
literal|0
condition|?
literal|""
else|:
name|sIntFormat
operator|.
name|format
argument_list|(
name|arrClass
argument_list|)
operator|)
block|,
operator|(
name|residentialStudents
operator|==
literal|0
condition|?
literal|""
else|:
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|arrClass
operator|/
name|allClass
argument_list|)
operator|+
literal|"%"
operator|)
block|,
operator|(
name|onlineClass
operator|==
literal|0
condition|?
literal|""
else|:
name|sIntFormat
operator|.
name|format
argument_list|(
name|onlineClass
argument_list|)
operator|)
block|,
operator|(
name|onlineClass
operator|==
literal|0
condition|?
literal|""
else|:
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|onlineClass
operator|/
name|allClass
argument_list|)
operator|+
literal|"%"
operator|)
block|,
operator|(
name|online
operator|==
literal|0
condition|?
literal|""
else|:
name|sIntFormat
operator|.
name|format
argument_list|(
name|online
argument_list|)
operator|)
block|,
operator|(
name|online
operator|==
literal|0
condition|?
literal|""
else|:
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|online
operator|/
name|total
argument_list|)
operator|+
literal|"%"
operator|)
block|,
operator|(
name|half
operator|==
literal|0
condition|?
literal|""
else|:
name|sIntFormat
operator|.
name|format
argument_list|(
name|half
argument_list|)
operator|)
block|,
operator|(
name|half
operator|==
literal|0
condition|?
literal|""
else|:
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|half
operator|/
name|total
argument_list|)
operator|+
literal|"%"
operator|)
block|}
return|;
block|}
block|}
argument_list|,
literal|true
argument_list|)
block|,
name|FULL_OFFERINGS
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Full Offerings"
block|,
literal|"- percentage of all requested offerings"
block|,
literal|"- percentage of all assignments"
block|,
literal|"Offerings with â¤ 2% available"
block|,
literal|"- percentage of all requested offerings"
block|,
literal|"- percentage of all assignments"
block|,
literal|"Offerings with â¤ 5% available"
block|,
literal|"- percentage of all requested offerings"
block|,
literal|"- percentage of all assignments"
block|,
literal|"Offerings with â¤ 10% available"
block|,
literal|"- percentage of all requested offerings"
block|,
literal|"- percentage of all assignments"
block|,
literal|"Full Sections"
block|,
literal|"- percentage of all sections"
block|,
literal|"- percentage of all assignments"
block|,
literal|"Disabled Sections"
block|,
literal|"- percentage of all sections"
block|,
literal|"- percentage of all assignments"
block|,
literal|"Sections with â¤ 2% available"
block|,
literal|"- percentage of all sections"
block|,
literal|"- percentage of all assignments"
block|,
literal|"Sections with â¤ 5% available"
block|,
literal|"- percentage of all sections"
block|,
literal|"- percentage of all assignments"
block|,
literal|"Sections with â¤ 10% available"
block|,
literal|"- percentage of all sections"
block|,
literal|"- percentage of all assignments"
block|,         				}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Number of instructional offerings that are completely full (only counting courses that are requested by the students)"
block|,
literal|"Percentage full offerings vs all requested offerings"
block|,
literal|"Percentage of all course assignments that are for courses that are full"
block|,
literal|"Number of instructional offerings that have 2% or less space available"
block|,
literal|""
block|,
literal|""
block|,
literal|"Number of instructional offerings that have 5% or less space available"
block|,
literal|""
block|,
literal|""
block|,
literal|"Number of instructional offerings that have 10% or less space available"
block|,
literal|""
block|,
literal|""
block|,
literal|"Number of sections that have no space available (only counting sections from courses that are requested by the students)"
block|,
literal|"Percentage full sections vs all sections of the requested courses"
block|,
literal|"Percentage of all class assignments that are in sections that are full"
block|,
literal|"Number of sections that are disabled"
block|,
literal|"Percentage disabled sections vs all sections of the requested courses"
block|,
literal|"Percentage of all class assignments that are in sections that are disabled"
block|,
literal|"Number of sections that have 2% or less space available"
block|,
literal|""
block|,
literal|""
block|,
literal|"Number of sections that have 5% or less space available"
block|,
literal|""
block|,
literal|""
block|,
literal|"Number of sections that have 10% or less space available"
block|,
literal|""
block|,
literal|""
block|,         				}
argument_list|,
operator|new
name|Statistic
argument_list|()
block|{
specifier|protected
name|int
name|getEnrollments
parameter_list|(
name|StudentGroup
name|group
parameter_list|,
name|Section
name|section
parameter_list|,
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|)
block|{
name|int
name|enrl
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Enrollment
name|e
range|:
name|section
operator|.
name|getEnrollments
argument_list|(
name|assignment
argument_list|)
control|)
block|{
if|if
condition|(
name|group
operator|.
name|matches
argument_list|(
name|e
operator|.
name|getStudent
argument_list|()
argument_list|)
condition|)
name|enrl
operator|++
expr_stmt|;
block|}
return|return
name|enrl
return|;
block|}
specifier|protected
name|int
name|getEnrollments
parameter_list|(
name|StudentGroup
name|group
parameter_list|,
name|Config
name|config
parameter_list|,
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|)
block|{
name|int
name|enrl
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Enrollment
name|e
range|:
name|config
operator|.
name|getEnrollments
argument_list|(
name|assignment
argument_list|)
control|)
block|{
if|if
condition|(
name|group
operator|.
name|matches
argument_list|(
name|e
operator|.
name|getStudent
argument_list|()
argument_list|)
condition|)
name|enrl
operator|++
expr_stmt|;
block|}
return|return
name|enrl
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getValues
parameter_list|(
name|StudentGroup
name|group
parameter_list|,
name|StudentSectioningModel
name|model
parameter_list|,
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|)
block|{
name|int
name|nbrSections
init|=
literal|0
decl_stmt|,
name|nbrFullSections
init|=
literal|0
decl_stmt|,
name|nbrSections98
init|=
literal|0
decl_stmt|,
name|nbrSections95
init|=
literal|0
decl_stmt|,
name|nbrSections90
init|=
literal|0
decl_stmt|,
name|nbrSectionsDis
init|=
literal|0
decl_stmt|;
name|int
name|enrlSections
init|=
literal|0
decl_stmt|,
name|enrlFullSections
init|=
literal|0
decl_stmt|,
name|enrlSections98
init|=
literal|0
decl_stmt|,
name|enrlSections95
init|=
literal|0
decl_stmt|,
name|enrlSections90
init|=
literal|0
decl_stmt|,
name|enrlSectionsDis
init|=
literal|0
decl_stmt|;
name|int
name|nbrOfferings
init|=
literal|0
decl_stmt|,
name|nbrFullOfferings
init|=
literal|0
decl_stmt|,
name|nbrOfferings98
init|=
literal|0
decl_stmt|,
name|nbrOfferings95
init|=
literal|0
decl_stmt|,
name|nbrOfferings90
init|=
literal|0
decl_stmt|;
name|int
name|enrlOfferings
init|=
literal|0
decl_stmt|,
name|enrlOfferingsFull
init|=
literal|0
decl_stmt|,
name|enrlOfferings98
init|=
literal|0
decl_stmt|,
name|enrlOfferings95
init|=
literal|0
decl_stmt|,
name|enrlOfferings90
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Offering
name|offering
range|:
name|model
operator|.
name|getOfferings
argument_list|()
control|)
block|{
if|if
condition|(
name|group
operator|!=
name|StudentGroup
operator|.
name|ALL
operator|||
literal|true
condition|)
block|{
name|int
name|crs
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Course
name|course
range|:
name|offering
operator|.
name|getCourses
argument_list|()
control|)
block|{
for|for
control|(
name|CourseRequest
name|cr
range|:
name|course
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|group
operator|.
name|matches
argument_list|(
name|cr
operator|.
name|getStudent
argument_list|()
argument_list|)
condition|)
name|crs
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|crs
operator|==
literal|0
condition|)
continue|continue;
block|}
name|int
name|offeringLimit
init|=
literal|0
decl_stmt|,
name|offeringEnrollment
init|=
literal|0
decl_stmt|,
name|offeringMatchingEnrollment
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Config
name|config
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
block|{
name|int
name|configLimit
init|=
name|config
operator|.
name|getLimit
argument_list|()
decl_stmt|;
for|for
control|(
name|Subpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
block|{
name|int
name|subpartLimit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|isCancelled
argument_list|()
condition|)
continue|continue;
name|int
name|enrl
init|=
name|section
operator|.
name|getEnrollments
argument_list|(
name|assignment
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|matchingEnrl
init|=
operator|(
name|group
operator|==
name|StudentGroup
operator|.
name|ALL
condition|?
name|section
operator|.
name|getEnrollments
argument_list|(
name|assignment
argument_list|)
operator|.
name|size
argument_list|()
else|:
name|getEnrollments
argument_list|(
name|group
argument_list|,
name|section
argument_list|,
name|assignment
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|<
literal|0
operator|||
name|subpartLimit
operator|<
literal|0
condition|)
name|subpartLimit
operator|=
operator|-
literal|1
expr_stmt|;
else|else
name|subpartLimit
operator|+=
operator|(
name|section
operator|.
name|isEnabled
argument_list|()
condition|?
name|section
operator|.
name|getLimit
argument_list|()
else|:
name|enrl
operator|)
expr_stmt|;
name|nbrSections
operator|++
expr_stmt|;
name|enrlSections
operator|+=
name|matchingEnrl
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
name|section
operator|.
name|getLimit
argument_list|()
operator|<=
name|enrl
condition|)
block|{
name|nbrFullSections
operator|++
expr_stmt|;
name|enrlFullSections
operator|+=
name|matchingEnrl
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|section
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
comment|//&& (enrl> 0 || section.getLimit()>= 0)) {
name|nbrSectionsDis
operator|++
expr_stmt|;
name|enrlSectionsDis
operator|+=
name|matchingEnrl
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
operator|(
name|section
operator|.
name|getLimit
argument_list|()
operator|-
name|enrl
operator|)
operator|<=
name|Math
operator|.
name|round
argument_list|(
literal|0.02
operator|*
name|section
operator|.
name|getLimit
argument_list|()
argument_list|)
condition|)
block|{
name|nbrSections98
operator|++
expr_stmt|;
name|enrlSections98
operator|+=
name|matchingEnrl
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
operator|(
name|section
operator|.
name|getLimit
argument_list|()
operator|-
name|enrl
operator|)
operator|<=
name|Math
operator|.
name|round
argument_list|(
literal|0.05
operator|*
name|section
operator|.
name|getLimit
argument_list|()
argument_list|)
condition|)
block|{
name|nbrSections95
operator|++
expr_stmt|;
name|enrlSections95
operator|+=
name|matchingEnrl
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
operator|(
name|section
operator|.
name|getLimit
argument_list|()
operator|-
name|enrl
operator|)
operator|<=
name|Math
operator|.
name|round
argument_list|(
literal|0.10
operator|*
name|section
operator|.
name|getLimit
argument_list|()
argument_list|)
condition|)
block|{
name|nbrSections90
operator|++
expr_stmt|;
name|enrlSections90
operator|+=
name|matchingEnrl
expr_stmt|;
block|}
block|}
if|if
condition|(
name|configLimit
operator|<
literal|0
operator|||
name|subpartLimit
operator|<
literal|0
condition|)
name|configLimit
operator|=
operator|-
literal|1
expr_stmt|;
else|else
name|configLimit
operator|=
name|Math
operator|.
name|min
argument_list|(
name|configLimit
argument_list|,
name|subpartLimit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|offeringLimit
operator|<
literal|0
operator|||
name|configLimit
operator|<
literal|0
condition|)
name|offeringLimit
operator|=
operator|-
literal|1
expr_stmt|;
else|else
name|offeringLimit
operator|+=
name|configLimit
expr_stmt|;
name|offeringEnrollment
operator|+=
name|config
operator|.
name|getEnrollments
argument_list|(
name|assignment
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|offeringMatchingEnrollment
operator|+=
operator|(
name|group
operator|==
name|StudentGroup
operator|.
name|ALL
condition|?
name|config
operator|.
name|getEnrollments
argument_list|(
name|assignment
argument_list|)
operator|.
name|size
argument_list|()
else|:
name|getEnrollments
argument_list|(
name|group
argument_list|,
name|config
argument_list|,
name|assignment
argument_list|)
operator|)
expr_stmt|;
block|}
name|nbrOfferings
operator|++
expr_stmt|;
name|enrlOfferings
operator|+=
name|offeringMatchingEnrollment
expr_stmt|;
if|if
condition|(
name|offeringLimit
operator|>=
literal|0
operator|&&
name|offeringEnrollment
operator|>=
name|offeringLimit
condition|)
block|{
name|nbrFullOfferings
operator|++
expr_stmt|;
name|enrlOfferingsFull
operator|+=
name|offeringMatchingEnrollment
expr_stmt|;
block|}
if|if
condition|(
name|offeringLimit
operator|>=
literal|0
operator|&&
operator|(
name|offeringLimit
operator|-
name|offeringEnrollment
operator|)
operator|<=
name|Math
operator|.
name|round
argument_list|(
literal|0.02
operator|*
name|offeringLimit
argument_list|)
condition|)
block|{
name|nbrOfferings98
operator|++
expr_stmt|;
name|enrlOfferings98
operator|+=
name|offeringMatchingEnrollment
expr_stmt|;
block|}
if|if
condition|(
name|offeringLimit
operator|>=
literal|0
operator|&&
operator|(
name|offeringLimit
operator|-
name|offeringEnrollment
operator|)
operator|<=
name|Math
operator|.
name|round
argument_list|(
literal|0.05
operator|*
name|offeringLimit
argument_list|)
condition|)
block|{
name|nbrOfferings95
operator|++
expr_stmt|;
name|enrlOfferings95
operator|+=
name|offeringMatchingEnrollment
expr_stmt|;
block|}
if|if
condition|(
name|offeringLimit
operator|>=
literal|0
operator|&&
operator|(
name|offeringLimit
operator|-
name|offeringEnrollment
operator|)
operator|<=
name|Math
operator|.
name|round
argument_list|(
literal|0.10
operator|*
name|offeringLimit
argument_list|)
condition|)
block|{
name|nbrOfferings90
operator|++
expr_stmt|;
name|enrlOfferings90
operator|+=
name|offeringMatchingEnrollment
expr_stmt|;
block|}
block|}
return|return
operator|new
name|String
index|[]
block|{
name|sIntFormat
operator|.
name|format
argument_list|(
name|nbrFullOfferings
argument_list|)
block|,
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|nbrFullOfferings
operator|/
name|nbrOfferings
argument_list|)
operator|+
literal|"%"
block|,
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|enrlOfferingsFull
operator|/
name|enrlOfferings
argument_list|)
operator|+
literal|"%"
block|,
name|sIntFormat
operator|.
name|format
argument_list|(
name|nbrOfferings98
argument_list|)
block|,
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|nbrOfferings98
operator|/
name|nbrOfferings
argument_list|)
operator|+
literal|"%"
block|,
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|enrlOfferings98
operator|/
name|enrlOfferings
argument_list|)
operator|+
literal|"%"
block|,
name|sIntFormat
operator|.
name|format
argument_list|(
name|nbrOfferings95
argument_list|)
block|,
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|nbrOfferings95
operator|/
name|nbrOfferings
argument_list|)
operator|+
literal|"%"
block|,
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|enrlOfferings95
operator|/
name|enrlOfferings
argument_list|)
operator|+
literal|"%"
block|,
name|sIntFormat
operator|.
name|format
argument_list|(
name|nbrOfferings90
argument_list|)
block|,
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|nbrOfferings90
operator|/
name|nbrOfferings
argument_list|)
operator|+
literal|"%"
block|,
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|enrlOfferings90
operator|/
name|enrlOfferings
argument_list|)
operator|+
literal|"%"
block|,
name|sIntFormat
operator|.
name|format
argument_list|(
name|nbrFullSections
argument_list|)
block|,
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|nbrFullSections
operator|/
name|nbrSections
argument_list|)
operator|+
literal|"%"
block|,
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|enrlFullSections
operator|/
name|enrlSections
argument_list|)
operator|+
literal|"%"
block|,
name|sIntFormat
operator|.
name|format
argument_list|(
name|nbrSectionsDis
argument_list|)
block|,
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|nbrSectionsDis
operator|/
name|nbrSections
argument_list|)
operator|+
literal|"%"
block|,
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|enrlSectionsDis
operator|/
name|enrlSections
argument_list|)
operator|+
literal|"%"
block|,
name|sIntFormat
operator|.
name|format
argument_list|(
name|nbrSections98
argument_list|)
block|,
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|nbrSections98
operator|/
name|nbrSections
argument_list|)
operator|+
literal|"%"
block|,
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|enrlSections98
operator|/
name|enrlSections
argument_list|)
operator|+
literal|"%"
block|,
name|sIntFormat
operator|.
name|format
argument_list|(
name|nbrSections95
argument_list|)
block|,
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|nbrSections95
operator|/
name|nbrSections
argument_list|)
operator|+
literal|"%"
block|,
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|enrlSections95
operator|/
name|enrlSections
argument_list|)
operator|+
literal|"%"
block|,
name|sIntFormat
operator|.
name|format
argument_list|(
name|nbrSections90
argument_list|)
block|,
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|nbrSections90
operator|/
name|nbrSections
argument_list|)
operator|+
literal|"%"
block|,
name|sPercentFormat
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|enrlSections90
operator|/
name|enrlSections
argument_list|)
operator|+
literal|"%"
block|, 		        }
return|;
block|}
block|}
argument_list|)
block|,         ;
name|String
index|[]
name|iNames
decl_stmt|;
name|String
index|[]
name|iNotes
decl_stmt|;
name|Statistic
name|iStatistic
decl_stmt|;
name|boolean
name|iNewLine
init|=
literal|false
decl_stmt|;
name|Statistics
parameter_list|(
name|String
index|[]
name|names
parameter_list|,
name|String
name|notes
index|[]
parameter_list|,
name|Statistic
name|stat
parameter_list|,
name|boolean
name|nl
parameter_list|)
block|{
name|iNames
operator|=
name|names
expr_stmt|;
name|iNotes
operator|=
name|notes
expr_stmt|;
name|iStatistic
operator|=
name|stat
expr_stmt|;
name|iNewLine
operator|=
name|nl
expr_stmt|;
block|}
name|Statistics
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|note
parameter_list|,
name|Statistic
name|stat
parameter_list|,
name|boolean
name|nl
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|String
index|[]
block|{
name|name
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|note
block|}
argument_list|,
name|stat
argument_list|,
name|nl
argument_list|)
expr_stmt|;
block|}
name|Statistics
parameter_list|(
name|String
index|[]
name|names
parameter_list|,
name|String
name|notes
index|[]
parameter_list|,
name|Statistic
name|stat
parameter_list|)
block|{
name|this
argument_list|(
name|names
argument_list|,
name|notes
argument_list|,
name|stat
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|Statistics
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|note
parameter_list|,
name|Statistic
name|stat
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|note
argument_list|,
name|stat
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
index|[]
name|getNames
parameter_list|()
block|{
return|return
name|iNames
return|;
block|}
specifier|public
name|String
index|[]
name|getNotes
parameter_list|()
block|{
return|return
name|iNotes
return|;
block|}
specifier|public
name|String
index|[]
name|getValues
parameter_list|(
name|StudentGroup
name|group
parameter_list|,
name|StudentSectioningModel
name|model
parameter_list|,
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|)
block|{
return|return
name|iStatistic
operator|.
name|getValues
argument_list|(
name|group
argument_list|,
name|model
argument_list|,
name|assignment
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isNewLine
parameter_list|()
block|{
return|return
name|iNewLine
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CSVFile
name|create
parameter_list|(
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|,
name|DataProperties
name|properties
parameter_list|)
block|{
name|CSVFile
name|csv
init|=
operator|new
name|CSVFile
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CSVField
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|CSVField
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|StudentGroup
argument_list|>
name|groups
init|=
operator|new
name|ArrayList
argument_list|<
name|StudentGroup
argument_list|>
argument_list|()
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|CSVField
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|StudentGroup
argument_list|>
name|counts
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|StudentGroup
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentGroup
name|g
range|:
name|StudentGroup
operator|.
name|values
argument_list|()
control|)
block|{
name|int
name|nrStudents
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Student
name|student
range|:
name|getModel
argument_list|()
operator|.
name|getStudents
argument_list|()
control|)
block|{
if|if
condition|(
name|g
operator|.
name|matches
argument_list|(
name|student
argument_list|)
condition|)
name|nrStudents
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|nrStudents
operator|>
literal|0
operator|&&
operator|!
name|counts
operator|.
name|containsKey
argument_list|(
name|nrStudents
argument_list|)
condition|)
block|{
name|groups
operator|.
name|add
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|CSVField
argument_list|(
name|g
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|counts
operator|.
name|put
argument_list|(
name|nrStudents
argument_list|,
name|g
argument_list|)
expr_stmt|;
block|}
block|}
name|header
operator|.
name|add
argument_list|(
operator|new
name|CSVField
argument_list|(
literal|"Note"
argument_list|)
argument_list|)
expr_stmt|;
name|csv
operator|.
name|setHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
for|for
control|(
name|Statistics
name|stat
range|:
name|Statistics
operator|.
name|values
argument_list|()
control|)
block|{
name|String
index|[]
name|names
init|=
name|stat
operator|.
name|getNames
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|CSVField
argument_list|>
argument_list|>
name|table
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|CSVField
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|List
argument_list|<
name|CSVField
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|CSVField
argument_list|>
argument_list|()
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVField
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StudentGroup
name|g
range|:
name|groups
control|)
block|{
name|String
index|[]
name|values
init|=
name|stat
operator|.
name|getValues
argument_list|(
name|g
argument_list|,
name|getModel
argument_list|()
argument_list|,
name|assignment
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|table
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|CSVField
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|String
index|[]
name|notes
init|=
name|stat
operator|.
name|getNotes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|notes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|table
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|CSVField
argument_list|(
name|notes
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|List
argument_list|<
name|CSVField
argument_list|>
name|line
range|:
name|table
control|)
block|{
name|csv
operator|.
name|addLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stat
operator|.
name|isNewLine
argument_list|()
condition|)
name|csv
operator|.
name|addLine
argument_list|(
operator|new
name|CSVField
index|[]
block|{
operator|new
name|CSVField
argument_list|(
literal|" "
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|csv
return|;
block|}
block|}
end_class

end_unit

