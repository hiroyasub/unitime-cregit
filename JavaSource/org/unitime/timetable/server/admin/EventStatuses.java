begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|access
operator|.
name|prepost
operator|.
name|PreAuthorize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|Flag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|ListItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|PageName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|Record
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|EventServiceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|NonUniversityLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomTypeOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|EventServiceProviderDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|LocationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"gwtAdminTable[type=eventStatus]"
argument_list|)
specifier|public
class|class
name|EventStatuses
implements|implements
name|AdminTable
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|PageName
name|name
parameter_list|()
block|{
return|return
operator|new
name|PageName
argument_list|(
name|MESSAGES
operator|.
name|pageEventStatus
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|pageEventStatuses
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('EventStatuses')"
argument_list|)
specifier|public
name|SimpleEditInterface
name|load
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|Session
name|hibSession
parameter_list|)
block|{
name|List
argument_list|<
name|ListItem
argument_list|>
name|states
init|=
operator|new
name|ArrayList
argument_list|<
name|ListItem
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RoomTypeOption
operator|.
name|Status
name|state
range|:
name|RoomTypeOption
operator|.
name|Status
operator|.
name|values
argument_list|()
control|)
block|{
name|states
operator|.
name|add
argument_list|(
operator|new
name|ListItem
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|state
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
name|CONSTANTS
operator|.
name|eventStatusName
argument_list|()
index|[
name|state
operator|.
name|ordinal
argument_list|()
index|]
operator|.
name|replace
argument_list|(
literal|"\\,"
argument_list|,
literal|","
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|EventServiceProvider
argument_list|>
name|providers
init|=
operator|new
name|ArrayList
argument_list|<
name|EventServiceProvider
argument_list|>
argument_list|(
name|EventServiceProvider
operator|.
name|getServiceProviders
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Field
argument_list|>
name|extra
init|=
operator|new
name|ArrayList
argument_list|<
name|Field
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|index2service
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|EventServiceProvider
argument_list|>
name|index2provider
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|EventServiceProvider
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|EventServiceProvider
name|provider
range|:
name|providers
control|)
block|{
if|if
condition|(
name|provider
operator|.
name|isAllRooms
argument_list|()
condition|)
continue|continue;
name|index2service
operator|.
name|put
argument_list|(
name|extra
operator|.
name|size
argument_list|()
argument_list|,
name|provider
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|index2provider
operator|.
name|put
argument_list|(
name|extra
operator|.
name|size
argument_list|()
argument_list|,
name|provider
argument_list|)
expr_stmt|;
name|extra
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|provider
operator|.
name|getReference
argument_list|()
argument_list|,
name|FieldType
operator|.
name|toggle
argument_list|,
literal|40
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|setAttribute
argument_list|(
literal|"EventStatuses.Services"
argument_list|,
name|index2service
argument_list|)
expr_stmt|;
name|Field
index|[]
name|fields
init|=
operator|new
name|Field
index|[
literal|7
operator|+
name|extra
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|fields
index|[
literal|0
index|]
operator|=
operator|new
name|Field
argument_list|(
literal|"&otimes;"
argument_list|,
name|FieldType
operator|.
name|parent
argument_list|,
literal|50
argument_list|,
name|Flag
operator|.
name|READ_ONLY
argument_list|)
expr_stmt|;
name|fields
index|[
literal|1
index|]
operator|=
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldDepartment
argument_list|()
operator|+
literal|"|"
operator|+
name|MESSAGES
operator|.
name|fieldType
argument_list|()
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|160
argument_list|,
name|Flag
operator|.
name|READ_ONLY
argument_list|)
expr_stmt|;
name|fields
index|[
literal|2
index|]
operator|=
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldRoomType
argument_list|()
operator|+
literal|"|"
operator|+
name|MESSAGES
operator|.
name|fieldRoom
argument_list|()
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|100
argument_list|,
name|Flag
operator|.
name|READ_ONLY
argument_list|)
expr_stmt|;
name|fields
index|[
literal|3
index|]
operator|=
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldEventStatus
argument_list|()
argument_list|,
name|FieldType
operator|.
name|list
argument_list|,
literal|300
argument_list|,
name|states
argument_list|,
name|Flag
operator|.
name|PARENT_NOT_EMPTY
argument_list|,
name|Flag
operator|.
name|SHOW_PARENT_IF_EMPTY
argument_list|)
expr_stmt|;
name|fields
index|[
literal|4
index|]
operator|=
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldRoomNote
argument_list|()
argument_list|,
name|FieldType
operator|.
name|textarea
argument_list|,
literal|50
argument_list|,
literal|3
argument_list|,
literal|2048
argument_list|,
name|Flag
operator|.
name|SHOW_PARENT_IF_EMPTY
argument_list|)
expr_stmt|;
name|fields
index|[
literal|5
index|]
operator|=
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldBreakTime
argument_list|()
argument_list|,
name|FieldType
operator|.
name|number
argument_list|,
literal|50
argument_list|,
literal|10
argument_list|,
name|Flag
operator|.
name|SHOW_PARENT_IF_EMPTY
argument_list|)
expr_stmt|;
name|fields
index|[
literal|6
index|]
operator|=
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldSortOrder
argument_list|()
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|80
argument_list|,
literal|10
argument_list|,
name|Flag
operator|.
name|READ_ONLY
argument_list|,
name|Flag
operator|.
name|HIDDEN
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|extra
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|fields
index|[
literal|7
operator|+
name|i
index|]
operator|=
name|extra
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|SimpleEditInterface
name|data
init|=
operator|new
name|SimpleEditInterface
argument_list|(
name|fields
argument_list|)
decl_stmt|;
name|data
operator|.
name|setSortBy
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|data
operator|.
name|setAddable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|long
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Department
name|department
range|:
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|department
operator|.
name|isAllowEvents
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|RoomType
name|roomType
range|:
operator|(
name|List
argument_list|<
name|RoomType
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct t from Room r inner join r.roomType t where r.eventDepartment.uniqueId = :departmentId order by t.ord, t.label"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"departmentId"
argument_list|,
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|RoomTypeOption
name|option
init|=
name|roomType
operator|.
name|getOption
argument_list|(
name|department
argument_list|)
decl_stmt|;
name|Record
name|r
init|=
name|data
operator|.
name|addRecord
argument_list|(
operator|--
name|id
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|0
argument_list|,
literal|"+"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|1
argument_list|,
name|department
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|2
argument_list|,
name|roomType
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|3
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|option
operator|.
name|getStatus
argument_list|()
operator|==
literal|null
condition|?
name|RoomTypeOption
operator|.
name|getDefaultStatus
argument_list|()
else|:
name|option
operator|.
name|getStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|4
argument_list|,
name|option
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|option
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|5
argument_list|,
name|option
operator|.
name|getBreakTime
argument_list|()
operator|==
literal|null
condition|?
literal|"0"
else|:
name|option
operator|.
name|getBreakTime
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|6
argument_list|,
name|department
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|":"
operator|+
name|roomType
operator|.
name|getOrd
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|extra
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|r
operator|.
name|setField
argument_list|(
literal|7
operator|+
name|i
argument_list|,
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|Room
name|room
range|:
operator|(
name|List
argument_list|<
name|Room
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select r from Room r where r.roomType.uniqueId = :roomTypeId and r.eventDepartment.uniqueId = :departmentId order by r.building.abbreviation, r.roomNumber"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"departmentId"
argument_list|,
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"roomTypeId"
argument_list|,
name|roomType
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|r
operator|=
name|data
operator|.
name|addRecord
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|0
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|1
argument_list|,
name|department
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" "
operator|+
name|roomType
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|2
argument_list|,
name|room
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|3
argument_list|,
name|room
operator|.
name|getEventStatus
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|room
operator|.
name|getEventStatus
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|4
argument_list|,
name|room
operator|.
name|getNote
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|room
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|5
argument_list|,
name|room
operator|.
name|getBreakTime
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|room
operator|.
name|getBreakTime
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|6
argument_list|,
name|department
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|":"
operator|+
name|roomType
operator|.
name|getOrd
argument_list|()
operator|+
literal|":"
operator|+
name|room
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|extra
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|EventServiceProvider
name|provider
init|=
name|index2provider
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|boolean
name|hasToggle
init|=
name|provider
operator|.
name|getDepartment
argument_list|()
operator|==
literal|null
operator|||
name|provider
operator|.
name|getDepartment
argument_list|()
operator|.
name|equals
argument_list|(
name|department
argument_list|)
decl_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|7
operator|+
name|i
argument_list|,
operator|!
name|hasToggle
condition|?
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
else|:
name|room
operator|.
name|getAllowedServices
argument_list|()
operator|.
name|contains
argument_list|(
name|provider
argument_list|)
condition|?
literal|"true"
else|:
literal|"false"
argument_list|,
name|hasToggle
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|RoomType
name|roomType
range|:
operator|(
name|List
argument_list|<
name|RoomType
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct t from NonUniversityLocation r inner join r.roomType t where r.eventDepartment.uniqueId = :departmentId order by t.ord, t.label"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"departmentId"
argument_list|,
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|RoomTypeOption
name|option
init|=
name|roomType
operator|.
name|getOption
argument_list|(
name|department
argument_list|)
decl_stmt|;
name|Record
name|r
init|=
name|data
operator|.
name|addRecord
argument_list|(
operator|--
name|id
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|0
argument_list|,
literal|"+"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|1
argument_list|,
name|department
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|2
argument_list|,
name|roomType
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|3
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|option
operator|.
name|getStatus
argument_list|()
operator|==
literal|null
condition|?
name|RoomTypeOption
operator|.
name|getDefaultStatus
argument_list|()
else|:
name|option
operator|.
name|getStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|4
argument_list|,
name|option
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|option
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|5
argument_list|,
name|option
operator|.
name|getBreakTime
argument_list|()
operator|==
literal|null
condition|?
literal|"0"
else|:
name|option
operator|.
name|getBreakTime
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|6
argument_list|,
name|department
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|":"
operator|+
name|roomType
operator|.
name|getOrd
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|extra
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|r
operator|.
name|setField
argument_list|(
literal|7
operator|+
name|i
argument_list|,
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|NonUniversityLocation
name|room
range|:
operator|(
name|List
argument_list|<
name|NonUniversityLocation
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select r from NonUniversityLocation r where r.roomType.uniqueId = :roomTypeId and r.eventDepartment.uniqueId = :departmentId order by r.name"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"departmentId"
argument_list|,
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"roomTypeId"
argument_list|,
name|roomType
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|r
operator|=
name|data
operator|.
name|addRecord
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|0
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|1
argument_list|,
name|department
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" "
operator|+
name|roomType
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|2
argument_list|,
name|room
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|3
argument_list|,
name|room
operator|.
name|getEventStatus
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|room
operator|.
name|getEventStatus
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|4
argument_list|,
name|room
operator|.
name|getNote
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|room
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|5
argument_list|,
name|room
operator|.
name|getBreakTime
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|room
operator|.
name|getBreakTime
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|6
argument_list|,
name|department
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|":"
operator|+
name|roomType
operator|.
name|getOrd
argument_list|()
operator|+
literal|":"
operator|+
name|room
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|extra
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|EventServiceProvider
name|provider
init|=
name|index2provider
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|boolean
name|hasToggle
init|=
name|provider
operator|.
name|getDepartment
argument_list|()
operator|==
literal|null
operator|||
name|provider
operator|.
name|getDepartment
argument_list|()
operator|.
name|equals
argument_list|(
name|department
argument_list|)
decl_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|7
operator|+
name|i
argument_list|,
operator|!
name|hasToggle
condition|?
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
else|:
name|room
operator|.
name|getAllowedServices
argument_list|()
operator|.
name|contains
argument_list|(
name|provider
argument_list|)
condition|?
literal|"true"
else|:
literal|"false"
argument_list|,
name|hasToggle
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|data
operator|.
name|setEditable
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|EventStatusEdit
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
annotation|@
name|Override
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('EventStatusEdit')"
argument_list|)
specifier|public
name|void
name|save
parameter_list|(
name|SimpleEditInterface
name|data
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|Session
name|hibSession
parameter_list|)
block|{
for|for
control|(
name|Department
name|department
range|:
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|department
operator|.
name|isAllowEvents
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|RoomType
name|roomType
range|:
operator|(
name|List
argument_list|<
name|RoomType
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct t from Room r inner join r.roomType t where r.eventDepartment.uniqueId = :departmentId order by t.ord, t.label"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"departmentId"
argument_list|,
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|RoomTypeOption
name|option
init|=
name|roomType
operator|.
name|getOption
argument_list|(
name|department
argument_list|)
decl_stmt|;
for|for
control|(
name|Record
name|r
range|:
name|data
operator|.
name|getRecords
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|department
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|&&
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
operator|.
name|equals
argument_list|(
name|roomType
operator|.
name|getLabel
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|optionChanged
init|=
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getStatus
argument_list|()
operator|==
literal|null
condition|?
name|RoomTypeOption
operator|.
name|getDefaultStatus
argument_list|()
else|:
name|option
operator|.
name|getStatus
argument_list|()
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getMessage
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getBreakTime
argument_list|()
operator|==
literal|null
condition|?
literal|"0"
else|:
name|option
operator|.
name|getBreakTime
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|option
operator|.
name|setStatus
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setMessage
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|option
operator|.
name|setBreakTime
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|option
operator|.
name|setBreakTime
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|option
argument_list|)
expr_stmt|;
if|if
condition|(
name|optionChanged
condition|)
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
name|option
operator|.
name|getRoomType
argument_list|()
argument_list|,
name|option
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" "
operator|+
name|option
operator|.
name|getRoomType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|": "
operator|+
name|option
operator|.
name|getEventStatus
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
name|option
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|RoomType
name|roomType
range|:
operator|(
name|List
argument_list|<
name|RoomType
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct t from NonUniversityLocation r inner join r.roomType t where r.eventDepartment.uniqueId = :departmentId order by t.ord, t.label"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"departmentId"
argument_list|,
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|RoomTypeOption
name|option
init|=
name|roomType
operator|.
name|getOption
argument_list|(
name|department
argument_list|)
decl_stmt|;
for|for
control|(
name|Record
name|r
range|:
name|data
operator|.
name|getRecords
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|department
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|&&
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
operator|.
name|equals
argument_list|(
name|roomType
operator|.
name|getLabel
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|optionChanged
init|=
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getStatus
argument_list|()
operator|==
literal|null
condition|?
name|RoomTypeOption
operator|.
name|getDefaultStatus
argument_list|()
else|:
name|option
operator|.
name|getStatus
argument_list|()
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getMessage
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getBreakTime
argument_list|()
operator|==
literal|null
condition|?
literal|"0"
else|:
name|option
operator|.
name|getBreakTime
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|option
operator|.
name|setStatus
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setMessage
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|option
operator|.
name|setBreakTime
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|option
operator|.
name|setBreakTime
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|option
argument_list|)
expr_stmt|;
if|if
condition|(
name|optionChanged
condition|)
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
name|option
operator|.
name|getRoomType
argument_list|()
argument_list|,
name|option
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" "
operator|+
name|option
operator|.
name|getRoomType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|": "
operator|+
name|option
operator|.
name|getEventStatus
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
name|option
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Location
name|location
range|:
operator|(
name|List
argument_list|<
name|Location
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from Location where eventDepartment.uniqueId = :departmentId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"departmentId"
argument_list|,
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|getRecord
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
name|update
argument_list|(
name|location
argument_list|,
name|r
argument_list|,
name|context
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('EventStatusEdit')"
argument_list|)
specifier|public
name|void
name|save
parameter_list|(
name|Record
name|record
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|Session
name|hibSession
parameter_list|)
block|{
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|errorOperationNotSupported
argument_list|()
argument_list|)
throw|;
block|}
specifier|protected
name|boolean
name|sameServiceProviders
parameter_list|(
name|Location
name|location
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|Record
name|record
parameter_list|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|services
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|location
operator|.
name|getAllowedServices
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|EventServiceProvider
name|service
range|:
name|location
operator|.
name|getAllowedServices
argument_list|()
control|)
name|services
operator|.
name|add
argument_list|(
name|service
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|index2service
init|=
operator|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
literal|"EventStatuses.Services"
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|e
range|:
name|index2service
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|7
operator|+
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|services
operator|.
name|contains
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
else|else
block|{
if|if
condition|(
name|services
operator|.
name|contains
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|void
name|setServiceProviders
parameter_list|(
name|Location
name|location
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|Record
name|record
parameter_list|)
block|{
if|if
condition|(
name|location
operator|.
name|getAllowedServices
argument_list|()
operator|==
literal|null
condition|)
name|location
operator|.
name|setAllowedServices
argument_list|(
operator|new
name|HashSet
argument_list|<
name|EventServiceProvider
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|index2service
init|=
operator|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
literal|"EventStatuses.Services"
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|e
range|:
name|index2service
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|7
operator|+
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
condition|)
name|location
operator|.
name|getAllowedServices
argument_list|()
operator|.
name|add
argument_list|(
name|EventServiceProviderDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|location
operator|.
name|getAllowedServices
argument_list|()
operator|.
name|remove
argument_list|(
name|EventServiceProviderDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|update
parameter_list|(
name|Location
name|location
parameter_list|,
name|Record
name|record
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|Session
name|hibSession
parameter_list|)
block|{
if|if
condition|(
name|location
operator|==
literal|null
condition|)
return|return;
name|Integer
name|status
init|=
name|record
operator|.
name|getField
argument_list|(
literal|3
argument_list|)
operator|==
literal|null
operator|||
name|record
operator|.
name|getField
argument_list|(
literal|3
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|note
init|=
operator|(
name|record
operator|.
name|getField
argument_list|(
literal|4
argument_list|)
operator|==
literal|null
operator|||
name|record
operator|.
name|getField
argument_list|(
literal|4
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|record
operator|.
name|getField
argument_list|(
literal|4
argument_list|)
operator|)
decl_stmt|;
name|Integer
name|breakTime
init|=
literal|null
decl_stmt|;
try|try
block|{
name|breakTime
operator|=
operator|(
name|record
operator|.
name|getField
argument_list|(
literal|5
argument_list|)
operator|==
literal|null
operator|||
name|record
operator|.
name|getField
argument_list|(
literal|5
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|ToolBox
operator|.
name|equals
argument_list|(
name|location
operator|.
name|getEventStatus
argument_list|()
argument_list|,
name|status
argument_list|)
operator|&&
name|ToolBox
operator|.
name|equals
argument_list|(
name|location
operator|.
name|getNote
argument_list|()
argument_list|,
name|note
argument_list|)
operator|&&
name|ToolBox
operator|.
name|equals
argument_list|(
name|location
operator|.
name|getBreakTime
argument_list|()
argument_list|,
name|breakTime
argument_list|)
operator|&&
name|sameServiceProviders
argument_list|(
name|location
argument_list|,
name|context
argument_list|,
name|record
argument_list|)
condition|)
return|return;
name|boolean
name|noteChanged
init|=
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|location
operator|.
name|getNote
argument_list|()
argument_list|,
name|note
argument_list|)
decl_stmt|;
name|location
operator|.
name|setEventStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|location
operator|.
name|setNote
argument_list|(
name|note
argument_list|)
expr_stmt|;
name|location
operator|.
name|setBreakTime
argument_list|(
name|breakTime
argument_list|)
expr_stmt|;
name|setServiceProviders
argument_list|(
name|location
argument_list|,
name|context
argument_list|,
name|record
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
name|location
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|": "
operator|+
name|location
operator|.
name|getEffectiveEventStatus
argument_list|()
operator|+
operator|(
name|location
operator|.
name|getEventStatus
argument_list|()
operator|==
literal|null
condition|?
literal|" (Default)"
else|:
literal|""
operator|)
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
name|location
operator|.
name|getEventDepartment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|noteChanged
condition|)
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
name|location
argument_list|,
operator|(
name|location
operator|.
name|getNote
argument_list|()
operator|==
literal|null
operator|||
name|location
operator|.
name|getNote
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"-"
else|:
name|location
operator|.
name|getNote
argument_list|()
operator|)
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|ROOM_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|NOTE
argument_list|,
literal|null
argument_list|,
name|location
operator|.
name|getControllingDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('EventStatusEdit')"
argument_list|)
specifier|public
name|void
name|update
parameter_list|(
name|Record
name|record
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|Session
name|hibSession
parameter_list|)
block|{
if|if
condition|(
name|record
operator|.
name|getUniqueId
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|update
argument_list|(
name|LocationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|record
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|,
name|record
argument_list|,
name|context
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|Department
name|department
range|:
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|department
operator|.
name|isAllowEvents
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|record
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|department
operator|.
name|getLabel
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|RoomType
name|roomType
range|:
operator|(
name|List
argument_list|<
name|RoomType
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct t from Room r inner join r.roomType t where r.eventDepartment.uniqueId = :departmentId order by t.ord, t.label"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"departmentId"
argument_list|,
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|record
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
operator|.
name|equals
argument_list|(
name|roomType
operator|.
name|getLabel
argument_list|()
argument_list|)
condition|)
block|{
name|RoomTypeOption
name|option
init|=
name|roomType
operator|.
name|getOption
argument_list|(
name|department
argument_list|)
decl_stmt|;
name|boolean
name|optionChanged
init|=
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getStatus
argument_list|()
operator|==
literal|null
condition|?
name|RoomTypeOption
operator|.
name|getDefaultStatus
argument_list|()
else|:
name|option
operator|.
name|getStatus
argument_list|()
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getMessage
argument_list|()
argument_list|,
name|record
operator|.
name|getField
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getBreakTime
argument_list|()
operator|==
literal|null
condition|?
literal|"0"
else|:
name|option
operator|.
name|getBreakTime
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|record
operator|.
name|getField
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|option
operator|.
name|setStatus
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setMessage
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|option
operator|.
name|setBreakTime
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|option
operator|.
name|setBreakTime
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|option
argument_list|)
expr_stmt|;
if|if
condition|(
name|optionChanged
condition|)
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
name|option
operator|.
name|getRoomType
argument_list|()
argument_list|,
name|option
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" "
operator|+
name|option
operator|.
name|getRoomType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|": "
operator|+
name|option
operator|.
name|getEventStatus
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
name|option
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
for|for
control|(
name|RoomType
name|roomType
range|:
operator|(
name|List
argument_list|<
name|RoomType
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct t from NonUniversityLocation r inner join r.roomType t where r.eventDepartment.uniqueId = :departmentId order by t.ord, t.label"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"departmentId"
argument_list|,
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|record
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
operator|.
name|equals
argument_list|(
name|roomType
operator|.
name|getLabel
argument_list|()
argument_list|)
condition|)
block|{
name|RoomTypeOption
name|option
init|=
name|roomType
operator|.
name|getOption
argument_list|(
name|department
argument_list|)
decl_stmt|;
name|boolean
name|optionChanged
init|=
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getStatus
argument_list|()
operator|==
literal|null
condition|?
name|RoomTypeOption
operator|.
name|getDefaultStatus
argument_list|()
else|:
name|option
operator|.
name|getStatus
argument_list|()
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getMessage
argument_list|()
argument_list|,
name|record
operator|.
name|getField
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getBreakTime
argument_list|()
operator|==
literal|null
condition|?
literal|"0"
else|:
name|option
operator|.
name|getBreakTime
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|record
operator|.
name|getField
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|option
operator|.
name|setStatus
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setMessage
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|option
operator|.
name|setBreakTime
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|option
operator|.
name|setBreakTime
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|option
argument_list|)
expr_stmt|;
if|if
condition|(
name|optionChanged
condition|)
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
name|option
operator|.
name|getRoomType
argument_list|()
argument_list|,
name|option
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" "
operator|+
name|option
operator|.
name|getRoomType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|": "
operator|+
name|option
operator|.
name|getEventStatus
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
name|option
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('EventStatusEdit')"
argument_list|)
specifier|public
name|void
name|delete
parameter_list|(
name|Record
name|record
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|Session
name|hibSession
parameter_list|)
block|{
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|errorOperationNotSupported
argument_list|()
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

