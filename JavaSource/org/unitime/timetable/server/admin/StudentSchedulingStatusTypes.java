begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|criterion
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|access
operator|.
name|prepost
operator|.
name|PreAuthorize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|Flag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|ListItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|PageName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|Record
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentSectioningStatusDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"gwtAdminTable[type=sectioning]"
argument_list|)
specifier|public
class|class
name|StudentSchedulingStatusTypes
implements|implements
name|AdminTable
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|PageName
name|name
parameter_list|()
block|{
return|return
operator|new
name|PageName
argument_list|(
name|MESSAGES
operator|.
name|pageStudentSchedulingStatusType
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|pageStudentSchedulingStatusTypes
argument_list|()
argument_list|)
return|;
block|}
enum|enum
name|StatusOption
block|{
name|Access
argument_list|(
name|MESSAGES
operator|.
name|toggleAccess
argument_list|()
argument_list|,
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|enabled
argument_list|)
block|,
name|Enrollment
argument_list|(
name|MESSAGES
operator|.
name|toggleEnrollment
argument_list|()
argument_list|,
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|enrollment
argument_list|)
block|,
name|Advisor
argument_list|(
name|MESSAGES
operator|.
name|toggleAdvisor
argument_list|()
argument_list|,
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|advisor
argument_list|)
block|,
name|Admin
argument_list|(
name|MESSAGES
operator|.
name|toggleAdmin
argument_list|()
argument_list|,
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|admin
argument_list|)
block|,
name|RegAccess
argument_list|(
name|MESSAGES
operator|.
name|toggleRegAccess
argument_list|()
argument_list|,
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|regenabled
argument_list|)
block|,
name|Registration
argument_list|(
name|MESSAGES
operator|.
name|toggleRegistration
argument_list|()
argument_list|,
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|registration
argument_list|)
block|,
name|RegAdvisor
argument_list|(
name|MESSAGES
operator|.
name|toggleRegAdvisor
argument_list|()
argument_list|,
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|regadvisor
argument_list|)
block|,
name|RegAdmin
argument_list|(
name|MESSAGES
operator|.
name|toggleRegAdmin
argument_list|()
argument_list|,
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|regadmin
argument_list|)
block|,
name|Email
argument_list|(
name|MESSAGES
operator|.
name|toggleEmail
argument_list|()
argument_list|,
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|email
argument_list|)
block|,
name|WaitListing
argument_list|(
name|MESSAGES
operator|.
name|toggleWaitList
argument_list|()
argument_list|,
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|waitlist
argument_list|)
block|,
name|NoBatch
argument_list|(
name|MESSAGES
operator|.
name|toggleNoBatch
argument_list|()
argument_list|,
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|nobatch
argument_list|)
block|,
name|AdvisorCanSet
argument_list|(
name|MESSAGES
operator|.
name|toggleAdvisorCanSetStatus
argument_list|()
argument_list|,
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|advcanset
argument_list|)
block|,
name|CReqValidation
argument_list|(
name|MESSAGES
operator|.
name|toggleCourseRequestValidation
argument_list|()
argument_list|,
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|reqval
argument_list|)
block|,
name|SpecReg
argument_list|(
name|MESSAGES
operator|.
name|toggleSpecialRequests
argument_list|()
argument_list|,
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|specreg
argument_list|)
block|,
name|CanReq
argument_list|(
name|MESSAGES
operator|.
name|toggleCanRequire
argument_list|()
argument_list|,
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|canreq
argument_list|)
block|,
name|NoSchedule
argument_list|(
name|MESSAGES
operator|.
name|toggleNoSchedule
argument_list|()
argument_list|,
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|noschedule
argument_list|)
block|, 		;
specifier|private
name|StudentSectioningStatus
operator|.
name|Option
name|iOption
decl_stmt|;
specifier|private
name|String
name|iLabel
decl_stmt|;
name|StatusOption
parameter_list|(
name|String
name|label
parameter_list|,
name|StudentSectioningStatus
operator|.
name|Option
name|option
parameter_list|)
block|{
name|iLabel
operator|=
name|label
expr_stmt|;
name|iOption
operator|=
name|option
expr_stmt|;
block|}
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
name|iLabel
return|;
block|}
specifier|public
name|StudentSectioningStatus
operator|.
name|Option
name|getOption
parameter_list|()
block|{
return|return
name|iOption
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('StudentSchedulingStatusTypes')"
argument_list|)
specifier|public
name|SimpleEditInterface
name|load
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|List
argument_list|<
name|CourseType
argument_list|>
name|courseTypes
init|=
name|CourseTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|(
name|Order
operator|.
name|asc
argument_list|(
literal|"reference"
argument_list|)
argument_list|)
decl_stmt|;
name|SimpleEditInterface
operator|.
name|Field
index|[]
name|fields
init|=
operator|new
name|SimpleEditInterface
operator|.
name|Field
index|[
name|courseTypes
operator|.
name|isEmpty
argument_list|()
condition|?
literal|9
operator|+
name|StatusOption
operator|.
name|values
argument_list|()
operator|.
name|length
else|:
literal|10
operator|+
name|StatusOption
operator|.
name|values
argument_list|()
operator|.
name|length
operator|+
name|courseTypes
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|fields
index|[
name|idx
operator|++
index|]
operator|=
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldAbbreviation
argument_list|()
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|160
argument_list|,
literal|20
argument_list|,
name|Flag
operator|.
name|UNIQUE
argument_list|)
expr_stmt|;
name|fields
index|[
name|idx
operator|++
index|]
operator|=
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldName
argument_list|()
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|300
argument_list|,
literal|60
argument_list|,
name|Flag
operator|.
name|UNIQUE
argument_list|)
expr_stmt|;
for|for
control|(
name|StatusOption
name|t
range|:
name|StatusOption
operator|.
name|values
argument_list|()
control|)
name|fields
index|[
name|idx
operator|++
index|]
operator|=
operator|new
name|Field
argument_list|(
name|t
operator|.
name|getLabel
argument_list|()
argument_list|,
name|FieldType
operator|.
name|toggle
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|fields
index|[
name|idx
operator|++
index|]
operator|=
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldMessage
argument_list|()
argument_list|,
name|FieldType
operator|.
name|textarea
argument_list|,
literal|40
argument_list|,
literal|500
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|courseTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|courseTypes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|fields
index|[
name|idx
operator|++
index|]
operator|=
operator|new
name|Field
argument_list|(
name|courseTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getReference
argument_list|()
argument_list|,
name|FieldType
operator|.
name|toggle
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|fields
index|[
name|idx
operator|++
index|]
operator|=
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|toggleNoCourseType
argument_list|()
argument_list|,
name|FieldType
operator|.
name|toggle
argument_list|,
literal|40
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ListItem
argument_list|>
name|fallbacks
init|=
operator|new
name|ArrayList
argument_list|<
name|ListItem
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|StudentSectioningStatus
argument_list|>
name|statuses
init|=
name|StudentSectioningStatus
operator|.
name|findAll
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
decl_stmt|;
name|fallbacks
operator|.
name|add
argument_list|(
operator|new
name|ListItem
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|StudentSectioningStatus
name|status
range|:
name|statuses
control|)
block|{
name|fallbacks
operator|.
name|add
argument_list|(
operator|new
name|ListItem
argument_list|(
name|status
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|status
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fields
index|[
name|idx
operator|++
index|]
operator|=
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldStudentStatusEffectiveStartDate
argument_list|()
argument_list|,
name|FieldType
operator|.
name|date
argument_list|,
literal|80
argument_list|)
expr_stmt|;
name|fields
index|[
name|idx
operator|++
index|]
operator|=
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldStudentStatusEffectiveStartTime
argument_list|()
argument_list|,
name|FieldType
operator|.
name|time
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|fields
index|[
name|idx
operator|++
index|]
operator|=
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldStudentStatusEffectiveEndDate
argument_list|()
argument_list|,
name|FieldType
operator|.
name|date
argument_list|,
literal|80
argument_list|)
expr_stmt|;
name|fields
index|[
name|idx
operator|++
index|]
operator|=
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldStudentStatusEffectiveEndTime
argument_list|()
argument_list|,
name|FieldType
operator|.
name|time
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|fields
index|[
name|idx
operator|++
index|]
operator|=
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldStudentStatusFallback
argument_list|()
argument_list|,
name|FieldType
operator|.
name|list
argument_list|,
literal|100
argument_list|,
name|fallbacks
argument_list|)
expr_stmt|;
name|fields
index|[
name|idx
operator|++
index|]
operator|=
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldSession
argument_list|()
argument_list|,
name|FieldType
operator|.
name|toggle
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|SimpleEditInterface
name|data
init|=
operator|new
name|SimpleEditInterface
argument_list|(
name|fields
argument_list|)
decl_stmt|;
name|data
operator|.
name|setSortBy
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|dateFormat
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_EVENT
argument_list|)
decl_stmt|;
for|for
control|(
name|StudentSectioningStatus
name|status
range|:
name|statuses
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|addRecord
argument_list|(
name|status
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|idx
operator|=
literal|0
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
name|idx
operator|++
argument_list|,
name|status
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
name|idx
operator|++
argument_list|,
name|status
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|StatusOption
name|t
range|:
name|StatusOption
operator|.
name|values
argument_list|()
control|)
name|r
operator|.
name|setField
argument_list|(
name|idx
operator|++
argument_list|,
name|status
operator|.
name|hasOption
argument_list|(
name|t
operator|.
name|getOption
argument_list|()
argument_list|)
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
name|idx
operator|++
argument_list|,
name|status
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|courseTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|courseTypes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|r
operator|.
name|setField
argument_list|(
name|idx
operator|++
argument_list|,
name|status
operator|.
name|getTypes
argument_list|()
operator|.
name|contains
argument_list|(
name|courseTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
name|idx
operator|++
argument_list|,
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|notype
argument_list|)
condition|?
literal|"false"
else|:
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|setField
argument_list|(
name|idx
operator|++
argument_list|,
name|status
operator|.
name|getEffectiveStartDate
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|dateFormat
operator|.
name|format
argument_list|(
name|status
operator|.
name|getEffectiveStartDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
name|idx
operator|++
argument_list|,
name|status
operator|.
name|getEffectiveStartPeriod
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|status
operator|.
name|getEffectiveStartPeriod
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
name|idx
operator|++
argument_list|,
name|status
operator|.
name|getEffectiveStopDate
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|dateFormat
operator|.
name|format
argument_list|(
name|status
operator|.
name|getEffectiveStopDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
name|idx
operator|++
argument_list|,
name|status
operator|.
name|getEffectiveStopPeriod
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|status
operator|.
name|getEffectiveStopPeriod
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
name|idx
operator|++
argument_list|,
name|status
operator|.
name|getFallBackStatus
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|status
operator|.
name|getFallBackStatus
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
name|idx
operator|++
argument_list|,
name|status
operator|.
name|getSession
argument_list|()
operator|==
literal|null
condition|?
literal|"false"
else|:
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|data
operator|.
name|setEditable
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|StudentSchedulingStatusTypeEdit
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
annotation|@
name|Override
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('StudentSchedulingStatusTypeEdit')"
argument_list|)
specifier|public
name|void
name|save
parameter_list|(
name|SimpleEditInterface
name|data
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
for|for
control|(
name|StudentSectioningStatus
name|status
range|:
name|StudentSectioningStatus
operator|.
name|findAll
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|getRecord
argument_list|(
name|status
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
name|delete
argument_list|(
name|status
argument_list|,
name|context
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
else|else
name|update
argument_list|(
name|status
argument_list|,
name|r
argument_list|,
name|context
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Record
name|r
range|:
name|data
operator|.
name|getNewRecords
argument_list|()
control|)
name|save
argument_list|(
name|r
argument_list|,
name|context
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('StudentSchedulingStatusTypeEdit')"
argument_list|)
specifier|public
name|void
name|save
parameter_list|(
name|Record
name|record
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|StudentSectioningStatus
name|status
init|=
operator|new
name|StudentSectioningStatus
argument_list|()
decl_stmt|;
name|int
name|value
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|StatusOption
operator|.
name|values
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|2
operator|+
name|i
argument_list|)
argument_list|)
condition|)
name|value
operator|+=
name|StatusOption
operator|.
name|values
argument_list|()
index|[
name|i
index|]
operator|.
name|getOption
argument_list|()
operator|.
name|toggle
argument_list|()
expr_stmt|;
name|status
operator|.
name|setTypes
argument_list|(
operator|new
name|HashSet
argument_list|<
name|CourseType
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CourseType
argument_list|>
name|courseTypes
init|=
name|CourseTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|(
name|Order
operator|.
name|asc
argument_list|(
literal|"reference"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|courseTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|courseTypes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|3
operator|+
name|StatusOption
operator|.
name|values
argument_list|()
operator|.
name|length
operator|+
name|i
argument_list|)
argument_list|)
condition|)
name|status
operator|.
name|getTypes
argument_list|()
operator|.
name|add
argument_list|(
name|courseTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
literal|"true"
operator|.
name|equals
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|3
operator|+
name|StatusOption
operator|.
name|values
argument_list|()
operator|.
name|length
operator|+
name|courseTypes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
condition|)
name|value
operator|+=
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|notype
operator|.
name|toggle
argument_list|()
expr_stmt|;
block|}
name|status
operator|.
name|setReference
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|.
name|setLabel
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|status
operator|.
name|setMessage
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|2
operator|+
name|StatusOption
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
operator|(
name|courseTypes
operator|.
name|isEmpty
argument_list|()
condition|?
literal|3
operator|+
name|StatusOption
operator|.
name|values
argument_list|()
operator|.
name|length
else|:
literal|4
operator|+
name|StatusOption
operator|.
name|values
argument_list|()
operator|.
name|length
operator|+
name|courseTypes
operator|.
name|size
argument_list|()
operator|)
decl_stmt|;
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|dateFormat
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_EVENT
argument_list|)
decl_stmt|;
name|Date
name|startDate
init|=
literal|null
decl_stmt|;
try|try
block|{
name|startDate
operator|=
operator|(
name|record
operator|.
name|getField
argument_list|(
name|idx
argument_list|)
operator|==
literal|null
operator|||
name|record
operator|.
name|getField
argument_list|(
name|idx
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|dateFormat
operator|.
name|parse
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|idx
argument_list|)
argument_list|)
operator|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
block|}
name|Integer
name|startTime
init|=
operator|(
name|record
operator|.
name|getField
argument_list|(
name|idx
argument_list|)
operator|==
literal|null
operator|||
name|record
operator|.
name|getField
argument_list|(
name|idx
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|Integer
operator|.
name|valueOf
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|idx
argument_list|)
argument_list|)
operator|)
decl_stmt|;
name|idx
operator|++
expr_stmt|;
name|Date
name|endDate
init|=
literal|null
decl_stmt|;
try|try
block|{
name|endDate
operator|=
operator|(
name|record
operator|.
name|getField
argument_list|(
name|idx
argument_list|)
operator|==
literal|null
operator|||
name|record
operator|.
name|getField
argument_list|(
name|idx
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|dateFormat
operator|.
name|parse
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|idx
argument_list|)
argument_list|)
operator|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
block|}
name|Integer
name|endTime
init|=
operator|(
name|record
operator|.
name|getField
argument_list|(
name|idx
argument_list|)
operator|==
literal|null
operator|||
name|record
operator|.
name|getField
argument_list|(
name|idx
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|Integer
operator|.
name|valueOf
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|idx
argument_list|)
argument_list|)
operator|)
decl_stmt|;
name|idx
operator|++
expr_stmt|;
name|Long
name|fallBackId
init|=
operator|(
name|record
operator|.
name|getField
argument_list|(
name|idx
argument_list|)
operator|==
literal|null
operator|||
name|record
operator|.
name|getField
argument_list|(
name|idx
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|Long
operator|.
name|valueOf
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|idx
argument_list|)
argument_list|)
operator|)
decl_stmt|;
name|idx
operator|++
expr_stmt|;
name|boolean
name|session
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|idx
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|++
expr_stmt|;
name|status
operator|.
name|setEffectiveStartDate
argument_list|(
name|startDate
argument_list|)
expr_stmt|;
name|status
operator|.
name|setEffectiveStartPeriod
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
name|status
operator|.
name|setEffectiveStopDate
argument_list|(
name|endDate
argument_list|)
expr_stmt|;
name|status
operator|.
name|setEffectiveStopPeriod
argument_list|(
name|endTime
argument_list|)
expr_stmt|;
name|status
operator|.
name|setFallBackStatus
argument_list|(
name|fallBackId
operator|==
literal|null
condition|?
literal|null
else|:
name|StudentSectioningStatusDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|fallBackId
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|.
name|setSession
argument_list|(
name|session
condition|?
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
name|record
operator|.
name|setUniqueId
argument_list|(
operator|(
name|Long
operator|)
name|hibSession
operator|.
name|save
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
name|status
argument_list|,
name|status
operator|.
name|getReference
argument_list|()
operator|+
literal|" "
operator|+
name|status
operator|.
name|getLabel
argument_list|()
operator|+
operator|(
name|status
operator|.
name|getSession
argument_list|()
operator|==
literal|null
condition|?
literal|" (global)"
else|:
literal|" ("
operator|+
name|status
operator|.
name|getSession
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|")"
operator|)
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|CREATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|update
parameter_list|(
name|StudentSectioningStatus
name|status
parameter_list|,
name|Record
name|record
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
if|if
condition|(
name|status
operator|==
literal|null
condition|)
return|return;
name|int
name|value
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|StatusOption
operator|.
name|values
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|2
operator|+
name|i
argument_list|)
argument_list|)
condition|)
name|value
operator|+=
name|StatusOption
operator|.
name|values
argument_list|()
index|[
name|i
index|]
operator|.
name|getOption
argument_list|()
operator|.
name|toggle
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|CourseType
argument_list|>
name|types
init|=
operator|new
name|HashSet
argument_list|<
name|CourseType
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CourseType
argument_list|>
name|courseTypes
init|=
name|CourseTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|(
name|Order
operator|.
name|asc
argument_list|(
literal|"reference"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|courseTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|courseTypes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|3
operator|+
name|StatusOption
operator|.
name|values
argument_list|()
operator|.
name|length
operator|+
name|i
argument_list|)
argument_list|)
condition|)
name|types
operator|.
name|add
argument_list|(
name|courseTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
literal|"true"
operator|.
name|equals
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|3
operator|+
name|StatusOption
operator|.
name|values
argument_list|()
operator|.
name|length
operator|+
name|courseTypes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
condition|)
name|value
operator|+=
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|notype
operator|.
name|toggle
argument_list|()
expr_stmt|;
block|}
name|int
name|idx
init|=
operator|(
name|courseTypes
operator|.
name|isEmpty
argument_list|()
condition|?
literal|3
operator|+
name|StatusOption
operator|.
name|values
argument_list|()
operator|.
name|length
else|:
literal|4
operator|+
name|StatusOption
operator|.
name|values
argument_list|()
operator|.
name|length
operator|+
name|courseTypes
operator|.
name|size
argument_list|()
operator|)
decl_stmt|;
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|dateFormat
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_EVENT
argument_list|)
decl_stmt|;
name|Date
name|startDate
init|=
literal|null
decl_stmt|;
try|try
block|{
name|startDate
operator|=
operator|(
name|record
operator|.
name|getField
argument_list|(
name|idx
argument_list|)
operator|==
literal|null
operator|||
name|record
operator|.
name|getField
argument_list|(
name|idx
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|dateFormat
operator|.
name|parse
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|idx
argument_list|)
argument_list|)
operator|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
block|}
name|Integer
name|startTime
init|=
operator|(
name|record
operator|.
name|getField
argument_list|(
name|idx
argument_list|)
operator|==
literal|null
operator|||
name|record
operator|.
name|getField
argument_list|(
name|idx
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|Integer
operator|.
name|valueOf
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|idx
argument_list|)
argument_list|)
operator|)
decl_stmt|;
name|idx
operator|++
expr_stmt|;
name|Date
name|endDate
init|=
literal|null
decl_stmt|;
try|try
block|{
name|endDate
operator|=
operator|(
name|record
operator|.
name|getField
argument_list|(
name|idx
argument_list|)
operator|==
literal|null
operator|||
name|record
operator|.
name|getField
argument_list|(
name|idx
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|dateFormat
operator|.
name|parse
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|idx
argument_list|)
argument_list|)
operator|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
block|}
name|Integer
name|endTime
init|=
operator|(
name|record
operator|.
name|getField
argument_list|(
name|idx
argument_list|)
operator|==
literal|null
operator|||
name|record
operator|.
name|getField
argument_list|(
name|idx
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|Integer
operator|.
name|valueOf
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|idx
argument_list|)
argument_list|)
operator|)
decl_stmt|;
name|idx
operator|++
expr_stmt|;
name|Long
name|fallBackId
init|=
operator|(
name|record
operator|.
name|getField
argument_list|(
name|idx
argument_list|)
operator|==
literal|null
operator|||
name|record
operator|.
name|getField
argument_list|(
name|idx
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|Long
operator|.
name|valueOf
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|idx
argument_list|)
argument_list|)
operator|)
decl_stmt|;
name|idx
operator|++
expr_stmt|;
name|boolean
name|session
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|idx
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|++
expr_stmt|;
name|boolean
name|changed
init|=
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|status
operator|.
name|getReference
argument_list|()
argument_list|,
name|record
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|status
operator|.
name|getLabel
argument_list|()
argument_list|,
name|record
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|status
operator|.
name|getStatus
argument_list|()
argument_list|,
name|value
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|status
operator|.
name|getTypes
argument_list|()
argument_list|,
name|types
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|status
operator|.
name|getMessage
argument_list|()
argument_list|,
name|record
operator|.
name|getField
argument_list|(
literal|2
operator|+
name|StatusOption
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|status
operator|.
name|getEffectiveStartDate
argument_list|()
argument_list|,
name|startDate
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|status
operator|.
name|getEffectiveStartPeriod
argument_list|()
argument_list|,
name|startTime
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|status
operator|.
name|getEffectiveStopDate
argument_list|()
argument_list|,
name|endDate
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|status
operator|.
name|getEffectiveStopPeriod
argument_list|()
argument_list|,
name|endTime
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|status
operator|.
name|getFallBackStatus
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|status
operator|.
name|getFallBackStatus
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|fallBackId
argument_list|)
operator|||
operator|(
name|session
operator|&&
name|status
operator|.
name|getSession
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
operator|!
name|session
operator|&&
name|status
operator|.
name|getSession
argument_list|()
operator|!=
literal|null
operator|)
decl_stmt|;
name|status
operator|.
name|setReference
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|.
name|setLabel
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|status
operator|.
name|setTypes
argument_list|(
name|types
argument_list|)
expr_stmt|;
name|status
operator|.
name|setMessage
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|2
operator|+
name|StatusOption
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|.
name|setEffectiveStartDate
argument_list|(
name|startDate
argument_list|)
expr_stmt|;
name|status
operator|.
name|setEffectiveStartPeriod
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
name|status
operator|.
name|setEffectiveStopDate
argument_list|(
name|endDate
argument_list|)
expr_stmt|;
name|status
operator|.
name|setEffectiveStopPeriod
argument_list|(
name|endTime
argument_list|)
expr_stmt|;
name|status
operator|.
name|setFallBackStatus
argument_list|(
name|fallBackId
operator|==
literal|null
condition|?
literal|null
else|:
name|StudentSectioningStatusDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|fallBackId
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|.
name|setSession
argument_list|(
name|session
condition|?
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
condition|)
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
name|status
argument_list|,
name|status
operator|.
name|getReference
argument_list|()
operator|+
literal|" "
operator|+
name|status
operator|.
name|getLabel
argument_list|()
operator|+
operator|(
name|status
operator|.
name|getSession
argument_list|()
operator|==
literal|null
condition|?
literal|" (global)"
else|:
literal|" ("
operator|+
name|status
operator|.
name|getSession
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|")"
operator|)
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|session
condition|)
block|{
comment|// session --> check other sessions with the same status, break it up if needed
name|Map
argument_list|<
name|Long
argument_list|,
name|StudentSectioningStatus
argument_list|>
name|others
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|StudentSectioningStatus
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Session
name|s
range|:
operator|(
name|List
argument_list|<
name|Session
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct s.session from Student s where s.sectioningStatus = :uniqueId and s.session != :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"uniqueId"
argument_list|,
name|status
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|status
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|StudentSectioningStatus
name|other
init|=
operator|(
name|StudentSectioningStatus
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from StudentSectioningStatus where session = :sessionId and reference = :reference"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"reference"
argument_list|,
name|status
operator|.
name|getReference
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|other
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Creating "
operator|+
name|status
operator|.
name|getReference
argument_list|()
operator|+
literal|" for "
operator|+
name|s
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|other
operator|=
operator|new
name|StudentSectioningStatus
argument_list|()
expr_stmt|;
name|other
operator|.
name|setSession
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|other
operator|.
name|setReference
argument_list|(
name|status
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|other
operator|.
name|setLabel
argument_list|(
name|status
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|other
operator|.
name|setMessage
argument_list|(
name|status
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|other
operator|.
name|setStatus
argument_list|(
name|status
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|other
operator|.
name|setEffectiveStartDate
argument_list|(
name|status
operator|.
name|getEffectiveStartDate
argument_list|()
argument_list|)
expr_stmt|;
name|other
operator|.
name|setEffectiveStartPeriod
argument_list|(
name|status
operator|.
name|getEffectiveStartPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|other
operator|.
name|setEffectiveStopDate
argument_list|(
name|status
operator|.
name|getEffectiveStopDate
argument_list|()
argument_list|)
expr_stmt|;
name|other
operator|.
name|setEffectiveStopPeriod
argument_list|(
name|status
operator|.
name|getEffectiveStopPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|other
operator|.
name|setFallBackStatus
argument_list|(
name|status
operator|.
name|getFallBackStatus
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|StudentSectioningStatus
operator|.
name|getStatus
argument_list|(
name|status
operator|.
name|getFallBackStatus
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|,
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|other
operator|.
name|setTypes
argument_list|(
operator|new
name|HashSet
argument_list|<
name|CourseType
argument_list|>
argument_list|(
name|status
operator|.
name|getTypes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|others
operator|.
name|put
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|other
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"update Student set sectioningStatus = :newId where sectioningStatus = :oldId and session = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"newId"
argument_list|,
name|other
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"oldId"
argument_list|,
name|status
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Session
name|s
range|:
operator|(
name|List
argument_list|<
name|Session
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from Session where defaultSectioningStatus = :uniqueId and uniqueId != :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"uniqueId"
argument_list|,
name|status
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|status
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|StudentSectioningStatus
name|other
init|=
name|others
operator|.
name|get
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|other
operator|==
literal|null
condition|)
name|other
operator|=
operator|(
name|StudentSectioningStatus
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from StudentSectioningStatus where session = :sessionId and reference = :reference"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"reference"
argument_list|,
name|status
operator|.
name|getReference
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
expr_stmt|;
if|if
condition|(
name|other
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Creating "
operator|+
name|status
operator|.
name|getReference
argument_list|()
operator|+
literal|" for "
operator|+
name|s
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|other
operator|=
operator|new
name|StudentSectioningStatus
argument_list|()
expr_stmt|;
name|other
operator|.
name|setSession
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|other
operator|.
name|setReference
argument_list|(
name|status
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|other
operator|.
name|setLabel
argument_list|(
name|status
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|other
operator|.
name|setMessage
argument_list|(
name|status
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|other
operator|.
name|setStatus
argument_list|(
name|status
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|other
operator|.
name|setEffectiveStartDate
argument_list|(
name|status
operator|.
name|getEffectiveStartDate
argument_list|()
argument_list|)
expr_stmt|;
name|other
operator|.
name|setEffectiveStartPeriod
argument_list|(
name|status
operator|.
name|getEffectiveStartPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|other
operator|.
name|setEffectiveStopDate
argument_list|(
name|status
operator|.
name|getEffectiveStopDate
argument_list|()
argument_list|)
expr_stmt|;
name|other
operator|.
name|setEffectiveStopPeriod
argument_list|(
name|status
operator|.
name|getEffectiveStopPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|other
operator|.
name|setFallBackStatus
argument_list|(
name|status
operator|.
name|getFallBackStatus
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|StudentSectioningStatus
operator|.
name|getStatus
argument_list|(
name|status
operator|.
name|getFallBackStatus
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|,
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|other
operator|.
name|setTypes
argument_list|(
operator|new
name|HashSet
argument_list|<
name|CourseType
argument_list|>
argument_list|(
name|status
operator|.
name|getTypes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|setDefaultSectioningStatus
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// global -> there should be only one status with this reference (merge others if needed)
for|for
control|(
name|StudentSectioningStatus
name|other
range|:
operator|(
name|List
argument_list|<
name|StudentSectioningStatus
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from StudentSectioningStatus where uniqueId != :uniqueId and reference = :reference"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"uniqueId"
argument_list|,
name|status
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"reference"
argument_list|,
name|status
operator|.
name|getReference
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Removing "
operator|+
name|other
operator|.
name|getReference
argument_list|()
operator|+
literal|" from "
operator|+
operator|(
name|other
operator|.
name|getSession
argument_list|()
operator|==
literal|null
condition|?
literal|"GLOBAL"
else|:
name|other
operator|.
name|getSession
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"update Student set sectioningStatus = :newId where sectioningStatus = :oldId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"newId"
argument_list|,
name|status
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"oldId"
argument_list|,
name|other
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"update Session set defaultSectioningStatus = :newId where defaultSectioningStatus = :oldId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"newId"
argument_list|,
name|status
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"oldId"
argument_list|,
name|other
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('StudentSchedulingStatusTypeEdit')"
argument_list|)
specifier|public
name|void
name|update
parameter_list|(
name|Record
name|record
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|update
argument_list|(
name|StudentSectioningStatusDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|record
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|,
name|record
argument_list|,
name|context
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|delete
parameter_list|(
name|StudentSectioningStatus
name|status
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
if|if
condition|(
name|status
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|StudentSectioningStatus
name|s
range|:
operator|(
name|List
argument_list|<
name|StudentSectioningStatus
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from StudentSectioningStatus s where s.fallBackStatus.uniqueId = :statusId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"statusId"
argument_list|,
name|status
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|s
operator|.
name|setFallBackStatus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
name|status
argument_list|,
name|status
operator|.
name|getReference
argument_list|()
operator|+
literal|" "
operator|+
name|status
operator|.
name|getLabel
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('StudentSchedulingStatusTypeEdit')"
argument_list|)
specifier|public
name|void
name|delete
parameter_list|(
name|Record
name|record
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|delete
argument_list|(
name|StudentSectioningStatusDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|record
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|,
name|context
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

