begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|access
operator|.
name|prepost
operator|.
name|PreAuthorize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|CommonValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|Flag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|ListItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|PageName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|Record
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalClassEditAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalCourseOfferingRemoveAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Building
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|BuildingPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentRoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomDept
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeaturePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroupPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SubjectAreaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_comment
comment|/**  * @author Sean Justice  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"gwtAdminTable[type=subjectArea]"
argument_list|)
specifier|public
class|class
name|SubjectAreas
implements|implements
name|AdminTable
block|{
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SubjectAreas
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|PageName
name|name
parameter_list|()
block|{
return|return
operator|new
name|PageName
argument_list|(
name|MESSAGES
operator|.
name|pageSubjectArea
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|pageSubjectAreas
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('SubjectAreas')"
argument_list|)
specifier|public
name|SimpleEditInterface
name|load
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|Session
name|hibSession
parameter_list|)
block|{
name|List
argument_list|<
name|Department
argument_list|>
name|deptList
init|=
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findBySession
argument_list|(
name|hibSession
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ListItem
argument_list|>
name|depts
init|=
operator|new
name|ArrayList
argument_list|<
name|ListItem
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ListItem
argument_list|>
name|fundDepts
init|=
operator|new
name|ArrayList
argument_list|<
name|ListItem
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Department
name|dept
range|:
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|dept
operator|.
name|isExternalManager
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|dept
operator|.
name|isExternalManager
argument_list|()
condition|)
block|{
name|depts
operator|.
name|add
argument_list|(
operator|new
name|ListItem
argument_list|(
name|dept
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|dept
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|fundDepts
operator|.
name|add
argument_list|(
operator|new
name|ListItem
argument_list|(
literal|"-1"
argument_list|,
name|MESSAGES
operator|.
name|noFundingDepartment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|deptList
argument_list|)
expr_stmt|;
for|for
control|(
name|Department
name|dept
range|:
name|deptList
control|)
block|{
if|if
condition|(
name|dept
operator|.
name|isExternalFundingDept
argument_list|()
operator|!=
literal|null
operator|&&
name|dept
operator|.
name|isExternalFundingDept
argument_list|()
condition|)
block|{
name|fundDepts
operator|.
name|add
argument_list|(
operator|new
name|ListItem
argument_list|(
name|dept
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|dept
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|dispLastChange
init|=
name|CommonValues
operator|.
name|Yes
operator|.
name|eq
argument_list|(
name|UserProperty
operator|.
name|DisplayLastChanges
operator|.
name|get
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|subjToChanges
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Field
name|lastChangeField
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dispLastChange
condition|)
block|{
name|lastChangeField
operator|=
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldLastChange
argument_list|()
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|50
argument_list|,
name|Flag
operator|.
name|READ_ONLY
argument_list|,
name|Flag
operator|.
name|NO_DETAIL
argument_list|)
expr_stmt|;
name|subjToChanges
operator|=
name|lastChangeForAllSubjects
argument_list|(
name|context
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lastChangeField
operator|=
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldLastChange
argument_list|()
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|50
argument_list|,
name|Flag
operator|.
name|READ_ONLY
argument_list|,
name|Flag
operator|.
name|HIDDEN
argument_list|)
expr_stmt|;
block|}
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|deptToManagers
init|=
name|managersForAllDepts
argument_list|(
name|context
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|SimpleEditInterface
name|data
init|=
operator|new
name|SimpleEditInterface
argument_list|(
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldAbbv
argument_list|()
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|100
argument_list|,
literal|40
argument_list|,
name|Flag
operator|.
name|UNIQUE
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldTitle
argument_list|()
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|120
argument_list|,
literal|40
argument_list|,
name|Flag
operator|.
name|UNIQUE
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldExternalId
argument_list|()
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|120
argument_list|,
literal|40
argument_list|,
name|Flag
operator|.
name|UNIQUE_IF_SET
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldDepartment
argument_list|()
argument_list|,
name|FieldType
operator|.
name|list
argument_list|,
literal|300
argument_list|,
name|depts
argument_list|,
name|Flag
operator|.
name|NOT_EMPTY
argument_list|)
argument_list|,
operator|(
name|ApplicationProperty
operator|.
name|CoursesFundingDepartmentsEnabled
operator|.
name|isTrue
argument_list|()
condition|?
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldFundingDepartment
argument_list|()
argument_list|,
name|FieldType
operator|.
name|list
argument_list|,
literal|300
argument_list|,
name|fundDepts
argument_list|)
else|:
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldFundingDepartment
argument_list|()
argument_list|,
name|FieldType
operator|.
name|list
argument_list|,
literal|300
argument_list|,
name|fundDepts
argument_list|,
name|Flag
operator|.
name|HIDDEN
argument_list|)
operator|)
argument_list|,
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldManagers
argument_list|()
argument_list|,
name|FieldType
operator|.
name|textarea
argument_list|,
literal|100
argument_list|,
name|Flag
operator|.
name|READ_ONLY
argument_list|,
name|Flag
operator|.
name|NO_DETAIL
argument_list|)
argument_list|,
name|lastChangeField
argument_list|)
decl_stmt|;
name|data
operator|.
name|setSortBy
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|SubjectArea
name|area
range|:
name|SubjectAreaDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findBySession
argument_list|(
name|hibSession
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|addRecord
argument_list|(
name|area
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|canEdit
init|=
name|context
operator|.
name|hasPermission
argument_list|(
name|area
argument_list|,
name|Right
operator|.
name|SubjectAreaEdit
argument_list|)
decl_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|0
argument_list|,
name|area
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|,
name|canEdit
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|1
argument_list|,
name|area
operator|.
name|getTitle
argument_list|()
argument_list|,
name|canEdit
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|2
argument_list|,
name|area
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|canEdit
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|3
argument_list|,
operator|(
name|canEdit
condition|?
name|area
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
else|:
name|area
operator|.
name|getDepartment
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|)
argument_list|,
name|canEdit
operator|&&
name|context
operator|.
name|hasPermission
argument_list|(
name|area
argument_list|,
name|Right
operator|.
name|SubjectAreaChangeDepartment
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|CoursesFundingDepartmentsEnabled
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|r
operator|.
name|setField
argument_list|(
literal|4
argument_list|,
name|area
operator|.
name|getFundingDept
argument_list|()
operator|==
literal|null
condition|?
literal|"-1"
else|:
name|area
operator|.
name|getFundingDept
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|canEdit
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|setDeletable
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|area
argument_list|,
name|Right
operator|.
name|SubjectAreaDelete
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|managers
init|=
name|deptToManagers
operator|.
name|get
argument_list|(
name|area
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|managers
operator|==
literal|null
condition|)
block|{
name|managers
operator|=
literal|""
expr_stmt|;
block|}
name|r
operator|.
name|setField
argument_list|(
literal|5
argument_list|,
name|managers
argument_list|)
expr_stmt|;
if|if
condition|(
name|dispLastChange
condition|)
block|{
name|String
name|changes
init|=
name|subjToChanges
operator|.
name|get
argument_list|(
name|area
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|changes
operator|!=
literal|null
operator|&&
operator|!
name|changes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|r
operator|.
name|setField
argument_list|(
literal|6
argument_list|,
name|changes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|data
operator|.
name|setAddable
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|SubjectAreaAdd
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|setEditable
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|SubjectAreaEdit
argument_list|)
operator|||
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|SubjectAreaAdd
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|managersForAllDepts
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|Session
name|hibSession
parameter_list|)
block|{
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|subjToManagers
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|instrNameFormat
init|=
name|UserProperty
operator|.
name|NameFormat
operator|.
name|get
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|"select d.uniqueId, tm from Department d inner join d.timetableManagers as tm where d.session.uniqueId = :sessionId"
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|result
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
name|query
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|long
name|deptId
init|=
operator|(
name|long
operator|)
name|result
index|[
literal|0
index|]
decl_stmt|;
name|TimetableManager
name|tm
init|=
operator|(
name|TimetableManager
operator|)
name|result
index|[
literal|1
index|]
decl_stmt|;
name|String
name|tmName
init|=
name|subjToManagers
operator|.
name|get
argument_list|(
name|deptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmName
operator|==
literal|null
condition|)
block|{
name|tmName
operator|=
name|tm
operator|.
name|getName
argument_list|(
name|instrNameFormat
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tmName
operator|+=
literal|"\n"
operator|+
name|tm
operator|.
name|getName
argument_list|(
name|instrNameFormat
argument_list|)
expr_stmt|;
block|}
name|subjToManagers
operator|.
name|put
argument_list|(
name|deptId
argument_list|,
name|tmName
argument_list|)
expr_stmt|;
block|}
return|return
name|subjToManagers
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|lastChangeForAllSubjects
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|Session
name|hibSession
parameter_list|)
block|{
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|subjToChanges
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|query
init|=
literal|"select cl from ChangeLog cl where cl.uniqueId in (select max(cl2.uniqueId) from ChangeLog cl2 where cl2.session.uniqueId = :sessionId and cl2.subjectArea.session.uniqueId = :sessionId group by cl2.subjectArea.uniqueId)"
decl_stmt|;
for|for
control|(
name|ChangeLog
name|cl
range|:
operator|(
name|List
argument_list|<
name|ChangeLog
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
name|query
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|cl
operator|.
name|getSubjectArea
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|String
name|changes
init|=
name|subjToChanges
operator|.
name|get
argument_list|(
name|cl
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|changes
operator|==
literal|null
condition|)
block|{
name|changes
operator|=
name|MESSAGES
operator|.
name|lastChange
argument_list|(
name|ChangeLog
operator|.
name|sDFdate
operator|.
name|format
argument_list|(
name|cl
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
argument_list|,
name|cl
operator|.
name|getManager
argument_list|()
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
name|subjToChanges
operator|.
name|put
argument_list|(
name|cl
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|changes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|changes
operator|+=
literal|"\n"
operator|+
name|MESSAGES
operator|.
name|lastChange
argument_list|(
name|ChangeLog
operator|.
name|sDFdate
operator|.
name|format
argument_list|(
name|cl
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
argument_list|,
name|cl
operator|.
name|getManager
argument_list|()
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|subjToChanges
return|;
block|}
annotation|@
name|Override
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('SubjectAreas')"
argument_list|)
specifier|public
name|void
name|save
parameter_list|(
name|SimpleEditInterface
name|data
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|Session
name|hibSession
parameter_list|)
block|{
for|for
control|(
name|SubjectArea
name|area
range|:
name|SubjectAreaDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findBySession
argument_list|(
name|hibSession
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|getRecord
argument_list|(
name|area
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|area
argument_list|,
name|Right
operator|.
name|SubjectAreaDelete
argument_list|)
condition|)
block|{
name|delete
argument_list|(
name|area
argument_list|,
name|context
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|area
argument_list|,
name|Right
operator|.
name|SubjectAreaEdit
argument_list|)
condition|)
block|{
name|update
argument_list|(
name|area
argument_list|,
name|r
argument_list|,
name|context
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|SubjectAreaAdd
argument_list|)
condition|)
block|{
for|for
control|(
name|Record
name|r
range|:
name|data
operator|.
name|getNewRecords
argument_list|()
control|)
name|save
argument_list|(
name|r
argument_list|,
name|context
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('SubjectAreaAdd')"
argument_list|)
specifier|public
name|void
name|save
parameter_list|(
name|Record
name|record
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|Session
name|hibSession
parameter_list|)
block|{
name|Department
name|dept
init|=
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|Department
name|fundDept
init|=
operator|(
name|record
operator|.
name|getField
argument_list|(
literal|4
argument_list|)
operator|==
literal|null
operator|||
literal|"-1"
operator|.
name|equals
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|4
argument_list|)
argument_list|)
condition|?
literal|null
else|:
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|,
name|hibSession
argument_list|)
operator|)
decl_stmt|;
name|SubjectArea
name|area
init|=
operator|new
name|SubjectArea
argument_list|()
decl_stmt|;
name|area
operator|.
name|setSession
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|area
operator|.
name|setSubjectAreaAbbreviation
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|area
operator|.
name|setTitle
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|area
operator|.
name|setExternalUniqueId
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|area
operator|.
name|setDepartment
argument_list|(
name|dept
argument_list|)
expr_stmt|;
name|dept
operator|.
name|getSubjectAreas
argument_list|()
operator|.
name|add
argument_list|(
name|area
argument_list|)
expr_stmt|;
name|area
operator|.
name|setFundingDept
argument_list|(
name|fundDept
argument_list|)
expr_stmt|;
name|record
operator|.
name|setUniqueId
argument_list|(
operator|(
name|Long
operator|)
name|hibSession
operator|.
name|save
argument_list|(
name|area
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fundDept
operator|==
literal|null
condition|)
name|record
operator|.
name|setField
argument_list|(
literal|4
argument_list|,
literal|"-1"
argument_list|)
expr_stmt|;
name|String
name|instrNameFormat
init|=
name|UserProperty
operator|.
name|NameFormat
operator|.
name|get
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|managers
init|=
literal|""
decl_stmt|;
for|for
control|(
name|TimetableManager
name|mgr
range|:
name|area
operator|.
name|getManagers
argument_list|()
control|)
name|managers
operator|+=
operator|(
name|managers
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"\n"
operator|)
operator|+
name|mgr
operator|.
name|getName
argument_list|(
name|instrNameFormat
argument_list|)
expr_stmt|;
name|record
operator|.
name|setField
argument_list|(
literal|5
argument_list|,
name|managers
argument_list|)
expr_stmt|;
name|record
operator|.
name|setField
argument_list|(
literal|6
argument_list|,
name|MESSAGES
operator|.
name|lastChange
argument_list|(
name|ChangeLog
operator|.
name|sDFdate
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
name|area
argument_list|,
name|area
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|area
operator|.
name|getTitle
argument_list|()
argument_list|,
name|Source
operator|.
name|SUBJECT_AREA_EDIT
argument_list|,
name|Operation
operator|.
name|CREATE
argument_list|,
name|area
argument_list|,
name|area
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|update
parameter_list|(
name|SubjectArea
name|area
parameter_list|,
name|Record
name|record
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|Session
name|hibSession
parameter_list|)
block|{
if|if
condition|(
name|area
operator|==
literal|null
condition|)
return|return;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|boolean
name|fundingEnabled
init|=
name|ApplicationProperty
operator|.
name|CoursesFundingDepartmentsEnabled
operator|.
name|isTrue
argument_list|()
decl_stmt|;
name|Department
name|dept
init|=
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|Department
name|fundDept
init|=
operator|(
name|record
operator|.
name|getField
argument_list|(
literal|4
argument_list|)
operator|==
literal|null
condition|?
literal|null
else|:
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|,
name|hibSession
argument_list|)
operator|)
decl_stmt|;
name|changed
operator|=
name|changed
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|area
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|,
name|record
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|area
operator|.
name|getTitle
argument_list|()
argument_list|,
name|record
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|area
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|record
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|dept
argument_list|,
name|area
operator|.
name|getDepartment
argument_list|()
argument_list|)
operator|||
operator|(
name|fundingEnabled
operator|&&
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|fundDept
argument_list|,
name|area
operator|.
name|getFundingDept
argument_list|()
argument_list|)
operator|)
expr_stmt|;
name|Set
argument_list|<
name|Class_
argument_list|>
name|updatedClasses
init|=
operator|new
name|HashSet
argument_list|<
name|Class_
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|changed
condition|)
block|{
name|area
operator|.
name|setSubjectAreaAbbreviation
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|area
operator|.
name|setTitle
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|area
operator|.
name|setExternalUniqueId
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dept
operator|.
name|equals
argument_list|(
name|area
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|Location
argument_list|>
name|availableRooms
init|=
operator|new
name|HashSet
argument_list|<
name|Location
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Building
argument_list|>
name|availableBuildings
init|=
operator|new
name|HashSet
argument_list|<
name|Building
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RoomDept
name|roomDept
range|:
name|dept
operator|.
name|getRoomDepts
argument_list|()
control|)
block|{
name|availableRooms
operator|.
name|add
argument_list|(
name|roomDept
operator|.
name|getRoom
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|roomDept
operator|.
name|getRoom
argument_list|()
operator|instanceof
name|Room
condition|)
name|availableBuildings
operator|.
name|add
argument_list|(
operator|(
operator|(
name|Room
operator|)
name|roomDept
operator|.
name|getRoom
argument_list|()
operator|)
operator|.
name|getBuilding
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CourseOffering
name|co
range|:
name|area
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|co
operator|.
name|getIsControl
argument_list|()
operator|||
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|InstrOfferingConfig
name|ioc
range|:
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
block|{
for|for
control|(
name|SchedulingSubpart
name|ss
range|:
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ss
operator|.
name|getManagingDept
argument_list|()
operator|.
name|isExternalManager
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Preference
argument_list|>
name|i
init|=
name|ss
operator|.
name|getPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|p
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|instanceof
name|TimePref
condition|)
continue|continue;
if|if
condition|(
name|p
operator|instanceof
name|RoomPref
condition|)
block|{
name|RoomPref
name|rp
init|=
operator|(
name|RoomPref
operator|)
name|p
decl_stmt|;
if|if
condition|(
operator|!
name|availableRooms
operator|.
name|contains
argument_list|(
name|rp
operator|.
name|getRoom
argument_list|()
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|p
operator|instanceof
name|BuildingPref
condition|)
block|{
name|BuildingPref
name|bp
init|=
operator|(
name|BuildingPref
operator|)
name|p
decl_stmt|;
if|if
condition|(
operator|!
name|availableBuildings
operator|.
name|contains
argument_list|(
name|bp
operator|.
name|getBuilding
argument_list|()
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|p
operator|instanceof
name|RoomFeaturePref
condition|)
block|{
name|RoomFeaturePref
name|rfp
init|=
operator|(
name|RoomFeaturePref
operator|)
name|p
decl_stmt|;
if|if
condition|(
name|rfp
operator|.
name|getRoomFeature
argument_list|()
operator|instanceof
name|DepartmentRoomFeature
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|p
operator|instanceof
name|RoomGroupPref
condition|)
block|{
name|RoomGroupPref
name|rgp
init|=
operator|(
name|RoomGroupPref
operator|)
name|p
decl_stmt|;
if|if
condition|(
operator|!
name|rgp
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|isGlobal
argument_list|()
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Class_
name|c
range|:
name|ss
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|c
operator|.
name|getManagingDept
argument_list|()
operator|.
name|isExternalManager
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Preference
argument_list|>
name|i
init|=
name|c
operator|.
name|getPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|p
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|instanceof
name|TimePref
condition|)
continue|continue;
if|if
condition|(
name|p
operator|instanceof
name|RoomPref
condition|)
block|{
name|RoomPref
name|rp
init|=
operator|(
name|RoomPref
operator|)
name|p
decl_stmt|;
if|if
condition|(
operator|!
name|availableRooms
operator|.
name|contains
argument_list|(
name|rp
operator|.
name|getRoom
argument_list|()
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|p
operator|instanceof
name|BuildingPref
condition|)
block|{
name|BuildingPref
name|bp
init|=
operator|(
name|BuildingPref
operator|)
name|p
decl_stmt|;
if|if
condition|(
operator|!
name|availableBuildings
operator|.
name|contains
argument_list|(
name|bp
operator|.
name|getBuilding
argument_list|()
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|p
operator|instanceof
name|RoomFeaturePref
condition|)
block|{
name|RoomFeaturePref
name|rfp
init|=
operator|(
name|RoomFeaturePref
operator|)
name|p
decl_stmt|;
if|if
condition|(
name|rfp
operator|.
name|getRoomFeature
argument_list|()
operator|instanceof
name|DepartmentRoomFeature
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|p
operator|instanceof
name|RoomGroupPref
condition|)
block|{
name|RoomGroupPref
name|rgp
init|=
operator|(
name|RoomGroupPref
operator|)
name|p
decl_stmt|;
if|if
condition|(
operator|!
name|rgp
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|isGlobal
argument_list|()
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|c
operator|.
name|setManagingDept
argument_list|(
name|dept
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|ClassInstructor
argument_list|>
name|i
init|=
name|c
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|DepartmentalInstructor
name|newInstructor
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|newInstructor
operator|=
name|DepartmentalInstructor
operator|.
name|findByPuidDepartmentId
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|dept
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getClasses
argument_list|()
operator|.
name|remove
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|newInstructor
operator|!=
literal|null
condition|)
block|{
name|ci
operator|.
name|setInstructor
argument_list|(
name|newInstructor
argument_list|)
expr_stmt|;
name|newInstructor
operator|.
name|getClasses
argument_list|()
operator|.
name|add
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|newInstructor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|updatedClasses
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|Preference
name|p
range|:
name|area
operator|.
name|getDepartment
argument_list|()
operator|.
name|getPreferences
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|instanceof
name|DistributionPref
condition|)
block|{
name|DistributionPref
name|dp
init|=
operator|(
name|DistributionPref
operator|)
name|p
decl_stmt|;
name|boolean
name|change
init|=
literal|true
decl_stmt|;
for|for
control|(
name|DistributionObject
name|dobj
range|:
name|dp
operator|.
name|getOrderedSetOfDistributionObjects
argument_list|()
control|)
block|{
if|if
condition|(
name|dobj
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|dobj
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ss
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|equals
argument_list|(
name|area
argument_list|)
condition|)
name|change
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|dobj
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|dobj
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|equals
argument_list|(
name|area
argument_list|)
condition|)
name|change
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|change
condition|)
block|{
name|dp
operator|.
name|setOwner
argument_list|(
name|dept
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|dp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|area
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSubjectAreas
argument_list|()
operator|.
name|remove
argument_list|(
name|area
argument_list|)
expr_stmt|;
name|area
operator|.
name|setDepartment
argument_list|(
name|dept
argument_list|)
expr_stmt|;
name|dept
operator|.
name|getSubjectAreas
argument_list|()
operator|.
name|add
argument_list|(
name|area
argument_list|)
expr_stmt|;
name|String
name|instrNameFormat
init|=
name|UserProperty
operator|.
name|NameFormat
operator|.
name|get
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|managers
init|=
literal|""
decl_stmt|;
for|for
control|(
name|TimetableManager
name|mgr
range|:
name|area
operator|.
name|getManagers
argument_list|()
control|)
name|managers
operator|+=
operator|(
name|managers
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"\n"
operator|)
operator|+
name|mgr
operator|.
name|getName
argument_list|(
name|instrNameFormat
argument_list|)
expr_stmt|;
name|record
operator|.
name|setField
argument_list|(
literal|5
argument_list|,
name|managers
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fundingEnabled
condition|)
block|{
name|area
operator|.
name|setFundingDept
argument_list|(
name|fundDept
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|area
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
name|area
argument_list|,
name|area
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|area
operator|.
name|getTitle
argument_list|()
argument_list|,
name|Source
operator|.
name|SUBJECT_AREA_EDIT
argument_list|,
name|Operation
operator|.
name|UPDATE
argument_list|,
name|area
argument_list|,
name|area
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|updatedClasses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|className
init|=
name|ApplicationProperty
operator|.
name|ExternalActionClassEdit
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
operator|!
name|className
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|ExternalClassEditAction
name|editAction
init|=
operator|(
name|ExternalClassEditAction
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
decl_stmt|;
for|for
control|(
name|Class_
name|c
range|:
name|updatedClasses
control|)
block|{
name|editAction
operator|.
name|performExternalClassEditAction
argument_list|(
name|c
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|record
operator|.
name|setField
argument_list|(
literal|6
argument_list|,
name|MESSAGES
operator|.
name|lastChange
argument_list|(
name|ChangeLog
operator|.
name|sDFdate
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission(#record.uniqueId, 'SubjectAreaEdit')"
argument_list|)
specifier|public
name|void
name|update
parameter_list|(
name|Record
name|record
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|Session
name|hibSession
parameter_list|)
block|{
name|update
argument_list|(
name|SubjectAreaDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|record
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|,
name|record
argument_list|,
name|context
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|delete
parameter_list|(
name|SubjectArea
name|area
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|Session
name|hibSession
parameter_list|)
block|{
if|if
condition|(
name|area
operator|==
literal|null
condition|)
return|return;
name|String
name|className
init|=
name|ApplicationProperty
operator|.
name|ExternalActionCourseOfferingRemove
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
operator|!
name|className
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|ExternalCourseOfferingRemoveAction
name|removeAction
init|=
operator|(
name|ExternalCourseOfferingRemoveAction
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseOffering
name|co
range|:
name|area
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
name|removeAction
operator|.
name|performExternalCourseOfferingRemoveAction
argument_list|(
name|co
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|InstructionalOffering
name|io
range|:
operator|new
name|ArrayList
argument_list|<
name|InstructionalOffering
argument_list|>
argument_list|(
name|area
operator|.
name|getInstructionalOfferings
argument_list|()
argument_list|)
control|)
block|{
name|io
operator|.
name|deleteAllDistributionPreferences
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|io
operator|.
name|deleteAllClasses
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|io
operator|.
name|deleteAllCourses
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CourseOffering
name|co
range|:
name|area
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
name|hibSession
operator|.
name|delete
argument_list|(
name|co
argument_list|)
expr_stmt|;
block|}
name|area
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSubjectAreas
argument_list|()
operator|.
name|remove
argument_list|(
name|area
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
name|area
argument_list|,
name|area
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|area
operator|.
name|getTitle
argument_list|()
argument_list|,
name|Source
operator|.
name|SUBJECT_AREA_EDIT
argument_list|,
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
name|area
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|area
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission(#record.uniqueId, 'SubjectAreaDelete')"
argument_list|)
specifier|public
name|void
name|delete
parameter_list|(
name|Record
name|record
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|Session
name|hibSession
parameter_list|)
block|{
name|delete
argument_list|(
name|SubjectAreaDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|record
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|,
name|context
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

