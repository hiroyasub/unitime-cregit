begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|ExportHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|PDFPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|PDFPrinter
operator|.
name|A
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|PDFPrinter
operator|.
name|F
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|Record
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"org.unitime.timetable.export.Exporter:admin-report.pdf"
argument_list|)
specifier|public
class|class
name|AdminExportToPDF
extends|extends
name|AdminExportToCSV
block|{
annotation|@
name|Override
specifier|public
name|String
name|reference
parameter_list|()
block|{
return|return
literal|"admin-report.pdf"
return|;
block|}
specifier|protected
name|void
name|export
parameter_list|(
name|SimpleEditInterface
name|data
parameter_list|,
name|ExportHelper
name|helper
parameter_list|,
name|String
name|hidden
parameter_list|)
throws|throws
name|IOException
block|{
name|PDFPrinter
name|out
init|=
operator|new
name|PDFPrinter
argument_list|(
name|helper
operator|.
name|getOutputStream
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|helper
operator|.
name|setup
argument_list|(
name|out
operator|.
name|getContentType
argument_list|()
argument_list|,
name|helper
operator|.
name|getParameter
argument_list|(
literal|"type"
argument_list|)
operator|+
literal|".pdf"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|boolean
name|hasDetails
init|=
name|hasDetails
argument_list|(
name|data
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|getFields
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|visible
init|=
name|data
operator|.
name|getFields
argument_list|()
index|[
name|i
index|]
operator|.
name|isVisible
argument_list|()
operator|&&
operator|(
name|hidden
operator|==
literal|null
operator|||
operator|!
name|hidden
operator|.
name|contains
argument_list|(
literal|"|"
operator|+
name|data
operator|.
name|getFields
argument_list|()
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|"|"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|hasDetails
operator|&&
name|i
operator|==
literal|0
condition|)
name|visible
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|visible
condition|)
name|out
operator|.
name|hideColumn
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|header
init|=
operator|new
name|String
index|[
name|data
operator|.
name|getFields
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|getFields
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|header
index|[
name|i
index|]
operator|=
name|header
argument_list|(
name|data
argument_list|,
name|data
operator|.
name|getFields
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|out
operator|.
name|printHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|boolean
name|visible
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Record
name|r
range|:
name|data
operator|.
name|getRecords
argument_list|()
control|)
block|{
if|if
condition|(
name|hasDetails
condition|)
block|{
if|if
condition|(
literal|"-"
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
name|visible
operator|=
literal|true
expr_stmt|;
if|else if
condition|(
literal|"+"
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
name|visible
operator|=
literal|false
expr_stmt|;
if|else if
condition|(
operator|!
name|visible
condition|)
continue|continue;
block|}
name|A
index|[]
name|line
init|=
operator|new
name|A
index|[
name|data
operator|.
name|getFields
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|getFields
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|line
index|[
name|i
index|]
operator|=
name|pdfCell
argument_list|(
name|data
operator|.
name|getFields
argument_list|()
index|[
name|i
index|]
argument_list|,
name|r
argument_list|,
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|isParent
argument_list|(
name|data
argument_list|,
name|r
argument_list|)
condition|)
block|{
for|for
control|(
name|A
name|cell
range|:
name|line
control|)
block|{
name|cell
operator|.
name|setBackground
argument_list|(
literal|"#f3f3f3"
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|cell
operator|.
name|setText
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|hasDetails
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|line
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|i
operator|>
literal|0
operator|&&
name|data
operator|.
name|getFields
argument_list|()
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"|"
argument_list|)
operator|&&
operator|!
name|isParent
argument_list|(
name|data
argument_list|,
name|r
argument_list|)
condition|)
name|line
index|[
name|i
index|]
operator|.
name|setText
argument_list|(
literal|"  "
operator|+
name|line
index|[
name|i
index|]
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|printLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|A
name|pdfCell
parameter_list|(
name|Field
name|field
parameter_list|,
name|Record
name|record
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|A
name|cell
init|=
operator|new
name|A
argument_list|(
name|cell
argument_list|(
name|field
argument_list|,
name|record
argument_list|,
name|index
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|==
name|FieldType
operator|.
name|number
condition|)
name|cell
operator|.
name|set
argument_list|(
name|F
operator|.
name|RIGHT
argument_list|)
expr_stmt|;
return|return
name|cell
return|;
block|}
block|}
end_class

end_unit

