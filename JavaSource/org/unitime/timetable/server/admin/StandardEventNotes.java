begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|access
operator|.
name|prepost
operator|.
name|PreAuthorize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|Flag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|ListItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|PageName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|Record
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StandardEventNote
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StandardEventNoteDepartment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StandardEventNoteGlobal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StandardEventNoteSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StandardEventNoteDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_class
annotation|@
name|Service
argument_list|(
literal|"gwtAdminTable[type=stdEvtNote]"
argument_list|)
specifier|public
class|class
name|StandardEventNotes
implements|implements
name|AdminTable
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|PageName
name|name
parameter_list|()
block|{
return|return
operator|new
name|PageName
argument_list|(
name|MESSAGES
operator|.
name|pageStandardEventNote
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|pageStandardEventNotes
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('StandardEventNotes')"
argument_list|)
specifier|public
name|SimpleEditInterface
name|load
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|Session
name|hibSession
parameter_list|)
block|{
name|Long
name|sessionId
init|=
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ListItem
argument_list|>
name|appliesTo
init|=
operator|new
name|ArrayList
argument_list|<
name|ListItem
argument_list|>
argument_list|()
decl_stmt|;
name|SimpleEditInterface
name|data
init|=
operator|new
name|SimpleEditInterface
argument_list|(
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldReference
argument_list|()
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|150
argument_list|,
literal|20
argument_list|,
name|Flag
operator|.
name|NOT_EMPTY
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldNote
argument_list|()
argument_list|,
name|FieldType
operator|.
name|textarea
argument_list|,
literal|50
argument_list|,
literal|3
argument_list|,
literal|1000
argument_list|,
name|Flag
operator|.
name|NOT_EMPTY
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldAppliesTo
argument_list|()
argument_list|,
name|FieldType
operator|.
name|list
argument_list|,
literal|300
argument_list|,
name|appliesTo
argument_list|,
name|Flag
operator|.
name|NOT_EMPTY
argument_list|)
argument_list|)
decl_stmt|;
name|data
operator|.
name|setSortBy
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|boolean
name|editGlobal
init|=
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|StandardEventNotesGlobalEdit
argument_list|)
decl_stmt|;
if|if
condition|(
name|editGlobal
condition|)
name|appliesTo
operator|.
name|add
argument_list|(
operator|new
name|ListItem
argument_list|(
literal|"_global"
argument_list|,
name|MESSAGES
operator|.
name|levelGlobal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|StandardEventNote
name|note
range|:
operator|(
name|List
argument_list|<
name|StandardEventNote
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from StandardEventNoteGlobal order by reference"
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|addRecord
argument_list|(
name|note
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|0
argument_list|,
name|note
operator|.
name|getReference
argument_list|()
argument_list|,
name|editGlobal
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|1
argument_list|,
name|note
operator|.
name|getNote
argument_list|()
argument_list|,
name|editGlobal
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|2
argument_list|,
name|editGlobal
condition|?
literal|"_global"
else|:
literal|"Global"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|r
operator|.
name|setDeletable
argument_list|(
name|editGlobal
argument_list|)
expr_stmt|;
block|}
name|data
operator|.
name|setSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
name|data
operator|.
name|setSessionName
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|editSession
init|=
name|context
operator|.
name|hasPermission
argument_list|(
name|sessionId
argument_list|,
literal|"Session"
argument_list|,
name|Right
operator|.
name|StandardEventNotesSessionEdit
argument_list|)
decl_stmt|;
if|if
condition|(
name|editSession
condition|)
name|appliesTo
operator|.
name|add
argument_list|(
operator|new
name|ListItem
argument_list|(
literal|"_session"
argument_list|,
name|data
operator|.
name|getSessionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|StandardEventNote
name|note
range|:
operator|(
name|List
argument_list|<
name|StandardEventNote
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from StandardEventNoteSession where session.uniqueId = :sessionId order by reference"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|addRecord
argument_list|(
name|note
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|0
argument_list|,
name|note
operator|.
name|getReference
argument_list|()
argument_list|,
name|editSession
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|1
argument_list|,
name|note
operator|.
name|getNote
argument_list|()
argument_list|,
name|editSession
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|2
argument_list|,
operator|(
name|editSession
condition|?
literal|"_session"
else|:
name|data
operator|.
name|getSessionName
argument_list|()
operator|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|r
operator|.
name|setDeletable
argument_list|(
name|editSession
argument_list|)
expr_stmt|;
block|}
name|data
operator|.
name|setEditable
argument_list|(
name|editGlobal
operator|||
name|editSession
argument_list|)
expr_stmt|;
for|for
control|(
name|Department
name|department
range|:
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|department
operator|.
name|isAllowEvents
argument_list|()
condition|)
continue|continue;
name|boolean
name|editDept
init|=
name|context
operator|.
name|hasPermission
argument_list|(
name|department
argument_list|,
name|Right
operator|.
name|StandardEventNotesDepartmentEdit
argument_list|)
decl_stmt|;
if|if
condition|(
name|editDept
condition|)
block|{
name|appliesTo
operator|.
name|add
argument_list|(
operator|new
name|ListItem
argument_list|(
name|department
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|department
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" - "
operator|+
name|department
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StandardEventNote
name|note
range|:
operator|(
name|List
argument_list|<
name|StandardEventNote
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from StandardEventNoteDepartment where department.uniqueId = :deptId order by reference"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"deptId"
argument_list|,
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|addRecord
argument_list|(
name|note
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|0
argument_list|,
name|note
operator|.
name|getReference
argument_list|()
argument_list|,
name|editDept
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|1
argument_list|,
name|note
operator|.
name|getNote
argument_list|()
argument_list|,
name|editDept
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|2
argument_list|,
name|editDept
condition|?
name|department
operator|.
name|getDeptCode
argument_list|()
else|:
name|department
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" - "
operator|+
name|department
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|r
operator|.
name|setDeletable
argument_list|(
name|editDept
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|data
return|;
block|}
annotation|@
name|Override
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('StandardEventNotes')"
argument_list|)
specifier|public
name|void
name|save
parameter_list|(
name|SimpleEditInterface
name|data
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|Session
name|hibSession
parameter_list|)
block|{
name|Long
name|sessionId
init|=
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|StandardEventNotesGlobalEdit
argument_list|)
condition|)
for|for
control|(
name|StandardEventNote
name|note
range|:
operator|(
name|List
argument_list|<
name|StandardEventNote
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from StandardEventNoteGlobal"
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|getRecord
argument_list|(
name|note
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
name|delete
argument_list|(
name|note
argument_list|,
name|context
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
else|else
name|update
argument_list|(
name|note
argument_list|,
name|r
argument_list|,
name|context
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|sessionId
argument_list|,
literal|"Session"
argument_list|,
name|Right
operator|.
name|StandardEventNotesSessionEdit
argument_list|)
condition|)
for|for
control|(
name|StandardEventNote
name|note
range|:
operator|(
name|List
argument_list|<
name|StandardEventNote
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from StandardEventNoteSession where session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|getRecord
argument_list|(
name|note
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
name|delete
argument_list|(
name|note
argument_list|,
name|context
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
else|else
name|update
argument_list|(
name|note
argument_list|,
name|r
argument_list|,
name|context
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Department
name|department
range|:
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|department
operator|.
name|isAllowEvents
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|department
argument_list|,
name|Right
operator|.
name|StandardEventNotesDepartmentEdit
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|StandardEventNote
name|note
range|:
operator|(
name|List
argument_list|<
name|StandardEventNote
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from StandardEventNoteDepartment where department.uniqueId = :deptId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"deptId"
argument_list|,
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|getRecord
argument_list|(
name|note
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
name|delete
argument_list|(
name|note
argument_list|,
name|context
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
else|else
name|update
argument_list|(
name|note
argument_list|,
name|r
argument_list|,
name|context
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Record
name|r
range|:
name|data
operator|.
name|getNewRecords
argument_list|()
control|)
name|save
argument_list|(
name|r
argument_list|,
name|context
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('StandardEventNotes')"
argument_list|)
specifier|public
name|void
name|save
parameter_list|(
name|Record
name|record
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|Session
name|hibSession
parameter_list|)
block|{
name|StandardEventNote
name|note
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|"_global"
operator|.
name|equals
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
condition|)
block|{
name|note
operator|=
operator|new
name|StandardEventNoteGlobal
argument_list|()
expr_stmt|;
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|StandardEventNotesGlobalEdit
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"_session"
operator|.
name|equals
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
condition|)
block|{
name|note
operator|=
operator|new
name|StandardEventNoteSession
argument_list|()
expr_stmt|;
operator|(
operator|(
name|StandardEventNoteSession
operator|)
name|note
operator|)
operator|.
name|setSession
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|checkPermission
argument_list|(
operator|(
operator|(
name|StandardEventNoteSession
operator|)
name|note
operator|)
operator|.
name|getSession
argument_list|()
argument_list|,
name|Right
operator|.
name|StandardEventNotesSessionEdit
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|note
operator|=
operator|new
name|StandardEventNoteDepartment
argument_list|()
expr_stmt|;
operator|(
operator|(
name|StandardEventNoteDepartment
operator|)
name|note
operator|)
operator|.
name|setDepartment
argument_list|(
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|checkPermission
argument_list|(
operator|(
operator|(
name|StandardEventNoteDepartment
operator|)
name|note
operator|)
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|Right
operator|.
name|StandardEventNotesDepartmentEdit
argument_list|)
expr_stmt|;
block|}
name|note
operator|.
name|setReference
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|note
operator|.
name|setNote
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|record
operator|.
name|setUniqueId
argument_list|(
operator|(
name|Long
operator|)
name|hibSession
operator|.
name|save
argument_list|(
name|note
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
name|note
argument_list|,
name|note
operator|.
name|getLabel
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|CREATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|update
parameter_list|(
name|StandardEventNote
name|note
parameter_list|,
name|Record
name|record
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|Session
name|hibSession
parameter_list|)
block|{
if|if
condition|(
name|note
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|ToolBox
operator|.
name|equals
argument_list|(
name|note
operator|.
name|getReference
argument_list|()
argument_list|,
name|record
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|&&
name|ToolBox
operator|.
name|equals
argument_list|(
name|note
operator|.
name|getNote
argument_list|()
argument_list|,
name|record
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
return|return;
name|note
operator|.
name|setReference
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|note
operator|.
name|setNote
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|note
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
name|note
argument_list|,
name|note
operator|.
name|getReference
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
name|note
operator|instanceof
name|StandardEventNoteDepartment
condition|?
operator|(
operator|(
name|StandardEventNoteDepartment
operator|)
name|note
operator|)
operator|.
name|getDepartment
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('StandardEventNotes')"
argument_list|)
specifier|public
name|void
name|update
parameter_list|(
name|Record
name|record
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|Session
name|hibSession
parameter_list|)
block|{
name|StandardEventNote
name|note
init|=
name|StandardEventNoteDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|record
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|note
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|note
operator|instanceof
name|StandardEventNoteGlobal
condition|)
block|{
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|StandardEventNotesGlobalEdit
argument_list|)
expr_stmt|;
name|update
argument_list|(
name|note
argument_list|,
name|record
argument_list|,
name|context
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|note
operator|instanceof
name|StandardEventNoteSession
condition|)
block|{
name|context
operator|.
name|checkPermission
argument_list|(
operator|(
operator|(
name|StandardEventNoteSession
operator|)
name|note
operator|)
operator|.
name|getSession
argument_list|()
argument_list|,
name|Right
operator|.
name|StandardEventNotesSessionEdit
argument_list|)
expr_stmt|;
name|update
argument_list|(
name|note
argument_list|,
name|record
argument_list|,
name|context
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|note
operator|instanceof
name|StandardEventNoteDepartment
condition|)
block|{
name|context
operator|.
name|checkPermission
argument_list|(
operator|(
operator|(
name|StandardEventNoteDepartment
operator|)
name|note
operator|)
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|Right
operator|.
name|StandardEventNotesDepartmentEdit
argument_list|)
expr_stmt|;
name|update
argument_list|(
name|note
argument_list|,
name|record
argument_list|,
name|context
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|delete
parameter_list|(
name|StandardEventNote
name|note
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|Session
name|hibSession
parameter_list|)
block|{
if|if
condition|(
name|note
operator|==
literal|null
condition|)
return|return;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
name|note
argument_list|,
name|note
operator|.
name|getLabel
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
name|note
operator|instanceof
name|StandardEventNoteDepartment
condition|?
operator|(
operator|(
name|StandardEventNoteDepartment
operator|)
name|note
operator|)
operator|.
name|getDepartment
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|note
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('StandardEventNotes')"
argument_list|)
specifier|public
name|void
name|delete
parameter_list|(
name|Record
name|record
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|Session
name|hibSession
parameter_list|)
block|{
name|StandardEventNote
name|note
init|=
name|StandardEventNoteDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|record
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|note
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|note
operator|instanceof
name|StandardEventNoteGlobal
condition|)
block|{
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|StandardEventNotesGlobalEdit
argument_list|)
expr_stmt|;
name|delete
argument_list|(
name|note
argument_list|,
name|context
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|note
operator|instanceof
name|StandardEventNoteSession
condition|)
block|{
name|context
operator|.
name|checkPermission
argument_list|(
operator|(
operator|(
name|StandardEventNoteSession
operator|)
name|note
operator|)
operator|.
name|getSession
argument_list|()
argument_list|,
name|Right
operator|.
name|StandardEventNotesSessionEdit
argument_list|)
expr_stmt|;
name|delete
argument_list|(
name|note
argument_list|,
name|context
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|note
operator|instanceof
name|StandardEventNoteDepartment
condition|)
block|{
name|context
operator|.
name|checkPermission
argument_list|(
operator|(
operator|(
name|StandardEventNoteDepartment
operator|)
name|note
operator|)
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|Right
operator|.
name|StandardEventNotesDepartmentEdit
argument_list|)
expr_stmt|;
name|delete
argument_list|(
name|note
argument_list|,
name|context
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

