begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|reservation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|util
operator|.
name|HtmlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|FilterRpcResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|FilterRpcResponse
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ReservationInterface
operator|.
name|OverrideType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ReservationInterface
operator|.
name|ReservationFilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|IndividualReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|LearningCommunityReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|OverrideReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Reservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroupReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ReservationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|FilterBoxBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|ReservationFilterRpcRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|ReservationFilterBackend
extends|extends
name|FilterBoxBackend
argument_list|<
name|ReservationFilterRpcRequest
argument_list|>
block|{
specifier|public
specifier|static
name|GwtConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|FilterRpcResponse
name|execute
parameter_list|(
name|ReservationFilterRpcRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|Reservations
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|execute
argument_list|(
name|request
argument_list|,
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|load
parameter_list|(
name|ReservationFilterRpcRequest
name|request
parameter_list|,
name|FilterRpcResponse
name|response
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|ReservationQuery
name|query
init|=
name|getQuery
argument_list|(
name|request
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Localization
operator|.
name|getJavaLocale
argument_list|()
argument_list|)
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Date
name|today
init|=
name|cal
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|ReservationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|type2count
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"r.class, count(distinct r)"
argument_list|)
operator|.
name|group
argument_list|(
literal|"r.class"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"type"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"override"
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Integer
name|type
init|=
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|0
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|count
init|=
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|type2count
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
name|Entity
name|individualType
init|=
operator|new
name|Entity
argument_list|(
operator|new
name|Long
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"Individual"
argument_list|,
name|MESSAGES
operator|.
name|reservationIndividualAbbv
argument_list|()
argument_list|,
literal|"translated-value"
argument_list|,
name|MESSAGES
operator|.
name|reservationIndividualAbbv
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|individualCnt
init|=
name|type2count
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|individualCnt
operator|!=
literal|null
condition|)
name|individualType
operator|.
name|setCount
argument_list|(
name|individualCnt
argument_list|)
expr_stmt|;
name|Integer
name|individualOverrideCnt
init|=
name|type2count
operator|.
name|get
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
name|individualOverrideCnt
operator|!=
literal|null
condition|)
name|individualType
operator|.
name|setCount
argument_list|(
name|individualType
operator|.
name|getCount
argument_list|()
operator|+
name|individualOverrideCnt
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"type"
argument_list|,
name|individualType
argument_list|)
expr_stmt|;
name|Entity
name|groupType
init|=
operator|new
name|Entity
argument_list|(
operator|new
name|Long
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"Group"
argument_list|,
name|MESSAGES
operator|.
name|reservationStudentGroupAbbv
argument_list|()
argument_list|,
literal|"translated-value"
argument_list|,
name|MESSAGES
operator|.
name|reservationStudentGroupAbbv
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|groupCnt
init|=
name|type2count
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupCnt
operator|!=
literal|null
condition|)
name|groupType
operator|.
name|setCount
argument_list|(
name|groupCnt
argument_list|)
expr_stmt|;
name|Integer
name|groupOverrideCnt
init|=
name|type2count
operator|.
name|get
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupOverrideCnt
operator|!=
literal|null
condition|)
name|groupType
operator|.
name|setCount
argument_list|(
name|groupType
operator|.
name|getCount
argument_list|()
operator|+
name|groupOverrideCnt
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"type"
argument_list|,
name|groupType
argument_list|)
expr_stmt|;
name|Entity
name|lcType
init|=
operator|new
name|Entity
argument_list|(
operator|new
name|Long
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"LC"
argument_list|,
name|MESSAGES
operator|.
name|reservationLearningCommunityAbbv
argument_list|()
argument_list|,
literal|"translated-value"
argument_list|,
name|MESSAGES
operator|.
name|reservationLearningCommunityAbbv
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|lcCnt
init|=
name|type2count
operator|.
name|get
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
name|lcCnt
operator|!=
literal|null
condition|)
name|lcType
operator|.
name|setCount
argument_list|(
name|lcCnt
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"type"
argument_list|,
name|lcType
argument_list|)
expr_stmt|;
name|Entity
name|curriculumType
init|=
operator|new
name|Entity
argument_list|(
operator|new
name|Long
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"Curriculum"
argument_list|,
name|MESSAGES
operator|.
name|reservationCurriculumAbbv
argument_list|()
argument_list|,
literal|"translated-value"
argument_list|,
name|MESSAGES
operator|.
name|reservationCurriculumAbbv
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|curriculumCnt
init|=
name|type2count
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|curriculumCnt
operator|!=
literal|null
condition|)
name|curriculumType
operator|.
name|setCount
argument_list|(
name|curriculumCnt
argument_list|)
expr_stmt|;
name|Integer
name|curriculumOverrideCnt
init|=
name|type2count
operator|.
name|get
argument_list|(
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
name|curriculumOverrideCnt
operator|!=
literal|null
condition|)
name|curriculumType
operator|.
name|setCount
argument_list|(
name|curriculumType
operator|.
name|getCount
argument_list|()
operator|+
name|curriculumOverrideCnt
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"type"
argument_list|,
name|curriculumType
argument_list|)
expr_stmt|;
name|Entity
name|courseType
init|=
operator|new
name|Entity
argument_list|(
operator|new
name|Long
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"Course"
argument_list|,
name|MESSAGES
operator|.
name|reservationCourseAbbv
argument_list|()
argument_list|,
literal|"translated-value"
argument_list|,
name|MESSAGES
operator|.
name|reservationCourseAbbv
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|courseCnt
init|=
name|type2count
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|courseCnt
operator|!=
literal|null
condition|)
name|courseType
operator|.
name|setCount
argument_list|(
name|courseCnt
argument_list|)
expr_stmt|;
name|Entity
name|overrideType
init|=
operator|new
name|Entity
argument_list|(
operator|new
name|Long
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"Override"
argument_list|,
name|MESSAGES
operator|.
name|reservationOverrideAbbv
argument_list|()
argument_list|,
literal|"translated-value"
argument_list|,
name|MESSAGES
operator|.
name|reservationOverrideAbbv
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|overrideCnt
init|=
name|type2count
operator|.
name|get
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
name|overrideCnt
operator|!=
literal|null
condition|)
name|overrideType
operator|.
name|setCount
argument_list|(
name|overrideCnt
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"type"
argument_list|,
name|overrideType
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|dept2count
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"co.subjectArea.department.uniqueId, count(distinct r)"
argument_list|)
operator|.
name|group
argument_list|(
literal|"co.subjectArea.department.uniqueId"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"department"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"subject"
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|type
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|int
name|count
init|=
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|dept2count
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
name|TreeSet
argument_list|<
name|Entity
argument_list|>
name|depts
init|=
operator|new
name|TreeSet
argument_list|<
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Department
name|department
range|:
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
control|)
block|{
name|Integer
name|count
init|=
name|dept2count
operator|.
name|get
argument_list|(
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|null
condition|)
continue|continue;
name|Entity
name|dept
init|=
operator|new
name|Entity
argument_list|(
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|department
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|department
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" - "
operator|+
name|department
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|department
operator|.
name|isExternalManager
argument_list|()
condition|?
literal|" ("
operator|+
name|department
operator|.
name|getExternalMgrLabel
argument_list|()
operator|+
literal|")"
else|:
literal|""
operator|)
argument_list|)
decl_stmt|;
name|dept
operator|.
name|setCount
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|depts
operator|.
name|add
argument_list|(
name|dept
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|add
argument_list|(
literal|"department"
argument_list|,
name|depts
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|subject2count
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"co.subjectArea.uniqueId, count(distinct r)"
argument_list|)
operator|.
name|group
argument_list|(
literal|"co.subjectArea.uniqueId"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"department"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"subject"
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|type
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|int
name|count
init|=
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|subject2count
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
name|TreeSet
argument_list|<
name|Entity
argument_list|>
name|subjects
init|=
operator|new
name|TreeSet
argument_list|<
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SubjectArea
name|area
range|:
name|SubjectArea
operator|.
name|getUserSubjectAreas
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
control|)
block|{
name|Integer
name|count
init|=
name|subject2count
operator|.
name|get
argument_list|(
name|area
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|null
condition|)
continue|continue;
name|Entity
name|subject
init|=
operator|new
name|Entity
argument_list|(
name|area
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|area
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|,
name|area
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|" - "
operator|+
name|HtmlUtils
operator|.
name|htmlUnescape
argument_list|(
name|area
operator|.
name|getTitle
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|subject
operator|.
name|setCount
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|subjects
operator|.
name|add
argument_list|(
name|subject
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|add
argument_list|(
literal|"subject"
argument_list|,
name|subjects
argument_list|)
expr_stmt|;
name|Entity
name|all
init|=
operator|new
name|Entity
argument_list|(
literal|0l
argument_list|,
literal|"All"
argument_list|,
name|CONSTANTS
operator|.
name|reservationModeLabel
argument_list|()
index|[
literal|0
index|]
argument_list|,
literal|"translated-value"
argument_list|,
name|CONSTANTS
operator|.
name|reservationModeAbbv
argument_list|()
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|all
operator|.
name|setCount
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"count(distinct r)"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"mode"
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"mode"
argument_list|,
name|all
argument_list|)
expr_stmt|;
name|Entity
name|expired
init|=
operator|new
name|Entity
argument_list|(
literal|1l
argument_list|,
literal|"Expired"
argument_list|,
name|CONSTANTS
operator|.
name|reservationModeLabel
argument_list|()
index|[
literal|1
index|]
argument_list|,
literal|"translated-value"
argument_list|,
name|CONSTANTS
operator|.
name|reservationModeAbbv
argument_list|()
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|expired
operator|.
name|setCount
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"count(distinct r)"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"mode"
argument_list|)
operator|.
name|where
argument_list|(
literal|"r.expirationDate< :today or :today< r.startDate"
argument_list|)
operator|.
name|set
argument_list|(
literal|"today"
argument_list|,
name|today
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"mode"
argument_list|,
name|expired
argument_list|)
expr_stmt|;
name|Entity
name|notExpired
init|=
operator|new
name|Entity
argument_list|(
literal|2l
argument_list|,
literal|"Not Expired"
argument_list|,
name|CONSTANTS
operator|.
name|reservationModeLabel
argument_list|()
index|[
literal|2
index|]
argument_list|,
literal|"translated-value"
argument_list|,
name|CONSTANTS
operator|.
name|reservationModeAbbv
argument_list|()
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|notExpired
operator|.
name|setCount
argument_list|(
name|all
operator|.
name|getCount
argument_list|()
operator|-
name|expired
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"mode"
argument_list|,
name|notExpired
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"type"
argument_list|)
operator|&&
name|request
operator|.
name|getOptions
argument_list|(
literal|"type"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Curriculum"
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Entity
argument_list|>
name|areas
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Reservation
name|reservation
range|:
operator|(
name|List
argument_list|<
name|Reservation
argument_list|>
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"distinct r"
argument_list|)
operator|.
name|where
argument_list|(
literal|"r.class in (CurriculumReservation, CurriculumOverrideReservation)"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"area"
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|AcademicArea
name|acedmicArea
init|=
operator|(
operator|(
name|CurriculumReservation
operator|)
name|reservation
operator|)
operator|.
name|getArea
argument_list|()
decl_stmt|;
name|Entity
name|area
init|=
name|areas
operator|.
name|get
argument_list|(
name|acedmicArea
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|area
operator|==
literal|null
condition|)
block|{
name|area
operator|=
operator|new
name|Entity
argument_list|(
name|acedmicArea
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|acedmicArea
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|acedmicArea
operator|.
name|getTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|areas
operator|.
name|put
argument_list|(
name|area
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|area
argument_list|)
expr_stmt|;
block|}
name|area
operator|.
name|incCount
argument_list|()
expr_stmt|;
block|}
name|response
operator|.
name|add
argument_list|(
literal|"area"
argument_list|,
operator|new
name|TreeSet
argument_list|<
name|Entity
argument_list|>
argument_list|(
name|areas
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"type"
argument_list|)
operator|&&
name|request
operator|.
name|getOptions
argument_list|(
literal|"type"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Override"
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Entity
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|typeAndCount
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"r.type, count(distinct r)"
argument_list|)
operator|.
name|where
argument_list|(
literal|"r.class = OverrideReservation"
argument_list|)
operator|.
name|group
argument_list|(
literal|"r.type"
argument_list|)
operator|.
name|order
argument_list|(
literal|"r.type"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"override"
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|OverrideType
name|type
init|=
name|OverrideType
operator|.
name|values
argument_list|()
index|[
operator|(
operator|(
name|Number
operator|)
name|typeAndCount
index|[
literal|0
index|]
operator|)
operator|.
name|intValue
argument_list|()
index|]
decl_stmt|;
name|Entity
name|e
init|=
operator|new
name|Entity
argument_list|(
operator|new
name|Long
argument_list|(
name|type
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
name|type
operator|.
name|getReference
argument_list|()
argument_list|,
name|CONSTANTS
operator|.
name|reservationOverrideTypeAbbv
argument_list|()
index|[
name|type
operator|.
name|ordinal
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|e
operator|.
name|setCount
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|typeAndCount
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|add
argument_list|(
literal|"override"
argument_list|,
name|types
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"type"
argument_list|)
operator|&&
operator|(
name|request
operator|.
name|getOptions
argument_list|(
literal|"type"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Group"
argument_list|)
operator|||
name|request
operator|.
name|getOptions
argument_list|(
literal|"type"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"LC"
argument_list|)
operator|)
condition|)
block|{
name|boolean
name|gr
init|=
name|request
operator|.
name|getOptions
argument_list|(
literal|"type"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Group"
argument_list|)
decl_stmt|;
name|boolean
name|lc
init|=
name|request
operator|.
name|getOptions
argument_list|(
literal|"type"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"LC"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Entity
argument_list|>
name|groups
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Reservation
name|reservation
range|:
operator|(
name|List
argument_list|<
name|Reservation
argument_list|>
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"distinct r"
argument_list|)
operator|.
name|where
argument_list|(
name|lc
condition|?
operator|(
name|gr
condition|?
literal|"r.class in (StudentGroupReservation, LearningCommunityReservation)"
else|:
literal|"r.class = LearningCommunityReservation"
operator|)
else|:
literal|"r.class = StudentGroupReservation"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"group"
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|StudentGroup
name|studentGroup
init|=
operator|(
operator|(
name|StudentGroupReservation
operator|)
name|reservation
operator|)
operator|.
name|getGroup
argument_list|()
decl_stmt|;
name|Entity
name|group
init|=
name|groups
operator|.
name|get
argument_list|(
name|studentGroup
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
name|group
operator|=
operator|new
name|Entity
argument_list|(
name|studentGroup
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|studentGroup
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|,
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|studentGroup
operator|.
name|getGroupName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|groups
operator|.
name|put
argument_list|(
name|group
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
name|group
operator|.
name|incCount
argument_list|()
expr_stmt|;
block|}
name|response
operator|.
name|add
argument_list|(
literal|"group"
argument_list|,
operator|new
name|TreeSet
argument_list|<
name|Entity
argument_list|>
argument_list|(
name|groups
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|suggestions
parameter_list|(
name|ReservationFilterRpcRequest
name|request
parameter_list|,
name|FilterRpcResponse
name|response
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|ReservationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|ReservationQuery
name|query
init|=
name|getQuery
argument_list|(
name|request
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasText
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseOffering
name|course
range|:
operator|(
name|List
argument_list|<
name|CourseOffering
argument_list|>
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"distinct co"
argument_list|)
comment|//.where("r.class != CourseReservation or co = r.course")
operator|.
name|where
argument_list|(
literal|"lower(co.subjectAreaAbbv || ' ' || co.courseNbr) like :x"
argument_list|)
operator|.
name|set
argument_list|(
literal|"x"
argument_list|,
name|request
operator|.
name|getText
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|order
argument_list|(
literal|"co.subjectAreaAbbv, co.courseNbr"
argument_list|)
operator|.
name|limit
argument_list|(
literal|20
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|response
operator|.
name|addSuggestion
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|course
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|reservationCourseAbbv
argument_list|()
else|:
name|course
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|response
operator|.
name|hasSuggestions
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|SubjectArea
argument_list|>
name|subjects
init|=
name|SubjectArea
operator|.
name|getUserSubjectAreas
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|Query
name|q
init|=
operator|new
name|Query
argument_list|(
name|request
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|Entity
argument_list|>
name|suggestions
init|=
operator|new
name|TreeSet
argument_list|<
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Reservation
name|reservation
range|:
operator|(
name|List
argument_list|<
name|Reservation
argument_list|>
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"distinct r"
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|q
operator|.
name|match
argument_list|(
operator|new
name|ReservationMatcher
argument_list|(
name|reservation
argument_list|)
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|CourseOffering
name|course
range|:
name|reservation
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
if|if
condition|(
name|subjects
operator|.
name|contains
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
condition|)
block|{
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|Entity
argument_list|(
literal|0l
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"hint"
argument_list|,
name|course
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|reservationCourseAbbv
argument_list|()
else|:
name|course
operator|.
name|getTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Entity
name|suggestion
range|:
name|suggestions
control|)
block|{
name|response
operator|.
name|addSuggestion
argument_list|(
name|suggestion
operator|.
name|getName
argument_list|()
argument_list|,
name|suggestion
operator|.
name|getName
argument_list|()
argument_list|,
name|suggestion
operator|.
name|getProperty
argument_list|(
literal|"hint"
argument_list|,
name|MESSAGES
operator|.
name|reservationCourseAbbv
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|getSuggestions
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|20
condition|)
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|request
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|response
operator|.
name|getSuggestions
argument_list|()
operator|==
literal|null
operator|||
name|response
operator|.
name|getSuggestions
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|20
operator|)
operator|&&
name|request
operator|.
name|hasOptions
argument_list|(
literal|"type"
argument_list|)
operator|&&
operator|(
name|request
operator|.
name|getOptions
argument_list|(
literal|"type"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Individual"
argument_list|)
operator|||
name|request
operator|.
name|getOptions
argument_list|(
literal|"type"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Override"
argument_list|)
operator|)
condition|)
block|{
name|ReservationQuery
operator|.
name|ReservationQueryInstance
name|instance
init|=
name|query
operator|.
name|select
argument_list|(
literal|"distinct s"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join r.instructionalOffering.courseOfferings co inner join r.students s"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"student"
argument_list|)
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|request
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
literal|", "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|token
init|=
name|s
operator|.
name|nextToken
argument_list|()
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|instance
operator|.
name|where
argument_list|(
literal|"upper(s.firstName) like :cn"
operator|+
name|id
operator|+
literal|" || '%' or upper(s.middleName) like :cn"
operator|+
name|id
operator|+
literal|" || '%' or upper(s.lastName) like :cn"
operator|+
name|id
operator|+
literal|" || '%' or s.externalUniqueId = :cn"
operator|+
name|id
argument_list|)
operator|.
name|set
argument_list|(
literal|"cn"
operator|+
name|id
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Student
name|student
range|:
operator|(
name|List
argument_list|<
name|Student
argument_list|>
operator|)
name|instance
operator|.
name|limit
argument_list|(
literal|20
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
control|)
name|response
operator|.
name|addSuggestion
argument_list|(
name|student
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFirstMiddle
argument_list|)
argument_list|,
name|student
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
literal|"Student"
argument_list|,
literal|"student"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|enumarate
parameter_list|(
name|ReservationFilterRpcRequest
name|request
parameter_list|,
name|FilterRpcResponse
name|response
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
for|for
control|(
name|Reservation
name|reservation
range|:
name|reservations
argument_list|(
name|request
argument_list|,
name|context
argument_list|)
control|)
block|{
name|CourseOffering
name|course
init|=
name|reservation
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
decl_stmt|;
if|if
condition|(
name|reservation
operator|instanceof
name|CourseReservation
condition|)
name|course
operator|=
operator|(
operator|(
name|CourseReservation
operator|)
name|reservation
operator|)
operator|.
name|getCourse
argument_list|()
expr_stmt|;
name|response
operator|.
name|addResult
argument_list|(
operator|new
name|Entity
argument_list|(
name|reservation
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNameWithTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|Reservation
argument_list|>
name|reservations
parameter_list|(
name|ReservationFilterRpcRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|List
argument_list|<
name|Reservation
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|Reservation
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getSessionId
argument_list|()
operator|==
literal|null
condition|)
name|request
operator|.
name|setSessionId
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|ReservationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasText
argument_list|()
condition|)
name|request
operator|.
name|setOption
argument_list|(
literal|"course"
argument_list|,
name|request
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|fetch
init|=
literal|"inner join fetch r.instructionalOffering io inner join io.courseOfferings co "
operator|+
literal|"left join fetch r.classes xclz left join fetch r.configurations xcfg "
operator|+
literal|"left join fetch r.area xarea left join fetch r.majors xmjr left join fetch r.classifications xclf "
operator|+
literal|"left join fetch r.course xcrs left join fetch r.students xstd left join fetch r.group xgrp"
decl_stmt|;
for|for
control|(
name|Reservation
name|reservation
range|:
operator|(
name|List
argument_list|<
name|Reservation
argument_list|>
operator|)
name|getQuery
argument_list|(
name|request
argument_list|,
name|context
argument_list|)
operator|.
name|select
argument_list|(
literal|"distinct r"
argument_list|)
operator|.
name|from
argument_list|(
name|fetch
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
control|)
name|ret
operator|.
name|add
argument_list|(
name|reservation
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|.
name|isEmpty
argument_list|()
operator|&&
name|request
operator|.
name|hasText
argument_list|()
condition|)
block|{
name|Query
name|query
init|=
operator|new
name|Query
argument_list|(
name|request
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Reservation
name|reservation
range|:
operator|(
name|List
argument_list|<
name|Reservation
argument_list|>
operator|)
name|getQuery
argument_list|(
name|request
argument_list|,
name|context
argument_list|)
operator|.
name|select
argument_list|(
literal|"distinct r"
argument_list|)
operator|.
name|from
argument_list|(
name|fetch
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"course"
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|query
operator|.
name|match
argument_list|(
operator|new
name|ReservationMatcher
argument_list|(
name|reservation
argument_list|)
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|reservation
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|ReservationQuery
name|getQuery
parameter_list|(
name|ReservationFilterRpcRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|ReservationQuery
name|query
init|=
operator|new
name|ReservationQuery
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"type"
argument_list|)
condition|)
block|{
name|String
name|type
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|t
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"type"
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|type
operator|.
name|isEmpty
argument_list|()
condition|)
name|type
operator|+=
literal|","
expr_stmt|;
if|if
condition|(
literal|"individual"
operator|.
name|equalsIgnoreCase
argument_list|(
name|t
argument_list|)
condition|)
name|type
operator|+=
literal|"IndividualReservation,IndividualOverrideReservation"
expr_stmt|;
if|if
condition|(
literal|"group"
operator|.
name|equalsIgnoreCase
argument_list|(
name|t
argument_list|)
condition|)
name|type
operator|+=
literal|"StudentGroupReservation,GroupOverrideReservation"
expr_stmt|;
if|if
condition|(
literal|"course"
operator|.
name|equalsIgnoreCase
argument_list|(
name|t
argument_list|)
condition|)
name|type
operator|+=
literal|"CourseReservation"
expr_stmt|;
if|if
condition|(
literal|"curriculum"
operator|.
name|equalsIgnoreCase
argument_list|(
name|t
argument_list|)
condition|)
name|type
operator|+=
literal|"CurriculumReservation,CurriculumOverrideReservation"
expr_stmt|;
if|if
condition|(
literal|"override"
operator|.
name|equalsIgnoreCase
argument_list|(
name|t
argument_list|)
condition|)
name|type
operator|+=
literal|"OverrideReservation"
expr_stmt|;
if|if
condition|(
literal|"lc"
operator|.
name|equalsIgnoreCase
argument_list|(
name|t
argument_list|)
condition|)
name|type
operator|+=
literal|"LearningCommunityReservation"
expr_stmt|;
block|}
name|query
operator|.
name|addWhere
argument_list|(
literal|"type"
argument_list|,
literal|"r.class "
operator|+
operator|(
name|type
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
operator|<
literal|0
condition|?
literal|"= "
operator|+
name|type
else|:
literal|"in ("
operator|+
name|type
operator|+
literal|")"
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"override"
argument_list|)
condition|)
block|{
name|String
name|override
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|o
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"override"
argument_list|)
control|)
block|{
name|OverrideType
name|type
init|=
literal|null
decl_stmt|;
for|for
control|(
name|OverrideType
name|t
range|:
name|OverrideType
operator|.
name|values
argument_list|()
control|)
if|if
condition|(
name|t
operator|.
name|getReference
argument_list|()
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|type
operator|=
name|t
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|type
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
operator|!
name|override
operator|.
name|isEmpty
argument_list|()
condition|)
name|override
operator|+=
literal|","
expr_stmt|;
name|override
operator|+=
name|type
operator|.
name|ordinal
argument_list|()
expr_stmt|;
block|}
name|query
operator|.
name|addWhere
argument_list|(
literal|"override"
argument_list|,
literal|"r.type "
operator|+
operator|(
name|override
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
operator|<
literal|0
condition|?
literal|"= "
operator|+
name|override
else|:
literal|"in ("
operator|+
name|override
operator|+
literal|")"
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"department"
argument_list|)
condition|)
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"department"
argument_list|,
literal|"co.subjectArea.department.deptCode = :deptCode"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"department"
argument_list|,
literal|"deptCode"
argument_list|,
name|request
operator|.
name|getOption
argument_list|(
literal|"department"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
condition|)
block|{
name|boolean
name|external
init|=
literal|false
decl_stmt|;
name|Set
argument_list|<
name|Department
argument_list|>
name|departments
init|=
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Department
name|department
range|:
name|departments
control|)
block|{
if|if
condition|(
name|department
operator|.
name|isExternalManager
argument_list|()
condition|)
block|{
name|external
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|external
condition|)
block|{
name|String
name|deptIds
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Department
name|department
range|:
name|departments
control|)
block|{
name|deptIds
operator|+=
operator|(
name|deptIds
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":deptId"
operator|+
name|id
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"department"
argument_list|,
literal|"deptId"
operator|+
name|id
argument_list|,
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deptIds
operator|.
name|isEmpty
argument_list|()
condition|)
name|query
operator|.
name|addWhere
argument_list|(
literal|"department"
argument_list|,
literal|"1 = 0"
argument_list|)
expr_stmt|;
else|else
name|query
operator|.
name|addWhere
argument_list|(
literal|"department"
argument_list|,
literal|"co.subjectArea.department.uniqueId "
operator|+
operator|(
name|id
operator|==
literal|1
condition|?
literal|"= "
operator|+
name|deptIds
else|:
literal|"in ("
operator|+
name|deptIds
operator|+
literal|")"
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"subject"
argument_list|)
condition|)
block|{
name|String
name|subjects
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|t
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"subject"
argument_list|)
control|)
block|{
name|subjects
operator|+=
operator|(
name|subjects
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":subject"
operator|+
name|id
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"subject"
argument_list|,
literal|"subject"
operator|+
name|id
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
name|query
operator|.
name|addWhere
argument_list|(
literal|"subject"
argument_list|,
literal|"co.subjectArea.subjectAreaAbbreviation "
operator|+
operator|(
name|id
operator|==
literal|1
condition|?
literal|"= "
operator|+
name|subjects
else|:
literal|"in ("
operator|+
name|subjects
operator|+
literal|")"
operator|)
argument_list|)
expr_stmt|;
block|}
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Localization
operator|.
name|getJavaLocale
argument_list|()
argument_list|)
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Date
name|today
init|=
name|cal
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"before"
argument_list|)
condition|)
block|{
name|Date
name|date
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|"today"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"before"
argument_list|)
argument_list|)
condition|)
block|{
name|date
operator|=
name|today
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|int
name|dayOfYear
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"before"
argument_list|)
argument_list|)
decl_stmt|;
name|date
operator|=
name|DateUtils
operator|.
name|getDate
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|getSessionStartYear
argument_list|()
argument_list|,
name|dayOfYear
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|f
parameter_list|)
block|{
try|try
block|{
name|date
operator|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|FILTER_DATE
argument_list|)
operator|.
name|parse
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"before"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|p
parameter_list|)
block|{
block|}
block|}
block|}
if|if
condition|(
name|date
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|addParameter
argument_list|(
literal|"before"
argument_list|,
literal|"before"
argument_list|,
name|date
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"before"
argument_list|,
literal|"r.expirationDate< :before"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"after"
argument_list|)
condition|)
block|{
name|Date
name|date
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|"today"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"after"
argument_list|)
argument_list|)
condition|)
block|{
name|date
operator|=
name|today
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|int
name|dayOfYear
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"after"
argument_list|)
argument_list|)
decl_stmt|;
name|date
operator|=
name|DateUtils
operator|.
name|getDate
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|getSessionStartYear
argument_list|()
argument_list|,
name|dayOfYear
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|f
parameter_list|)
block|{
try|try
block|{
name|date
operator|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|FILTER_DATE
argument_list|)
operator|.
name|parse
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"after"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|p
parameter_list|)
block|{
block|}
block|}
block|}
if|if
condition|(
name|date
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|addParameter
argument_list|(
literal|"after"
argument_list|,
literal|"after"
argument_list|,
name|date
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"after"
argument_list|,
literal|"r.expirationDate is null or r.expirationDate>= :after"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"mode"
argument_list|)
condition|)
block|{
name|String
name|mode
init|=
name|request
operator|.
name|getOption
argument_list|(
literal|"mode"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"Expired"
operator|.
name|equalsIgnoreCase
argument_list|(
name|mode
argument_list|)
condition|)
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"mode"
argument_list|,
literal|"r.expirationDate< :today or :today< r.startDate"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"mode"
argument_list|,
literal|"today"
argument_list|,
name|today
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"Not Expired"
operator|.
name|equalsIgnoreCase
argument_list|(
name|mode
argument_list|)
condition|)
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"mode"
argument_list|,
literal|"(r.expirationDate is null or r.expirationDate>= :today) and (r.startDate is null or r.startDate<= :today)"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"mode"
argument_list|,
literal|"today"
argument_list|,
name|today
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"area"
argument_list|)
condition|)
block|{
name|String
name|areas
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|t
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"area"
argument_list|)
control|)
block|{
name|areas
operator|+=
operator|(
name|areas
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":area"
operator|+
name|id
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"area"
argument_list|,
literal|"area"
operator|+
name|id
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
name|query
operator|.
name|addWhere
argument_list|(
literal|"area"
argument_list|,
literal|"r.area.academicAreaAbbreviation "
operator|+
operator|(
name|id
operator|==
literal|1
condition|?
literal|"= "
operator|+
name|areas
else|:
literal|"in ("
operator|+
name|areas
operator|+
literal|")"
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"group"
argument_list|)
condition|)
block|{
name|String
name|groups
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|t
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"group"
argument_list|)
control|)
block|{
name|groups
operator|+=
operator|(
name|groups
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":group"
operator|+
name|id
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"group"
argument_list|,
literal|"group"
operator|+
name|id
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
name|query
operator|.
name|addWhere
argument_list|(
literal|"group"
argument_list|,
literal|"r.group.groupAbbreviation "
operator|+
operator|(
name|id
operator|==
literal|1
condition|?
literal|"= "
operator|+
name|groups
else|:
literal|"in ("
operator|+
name|groups
operator|+
literal|")"
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"student"
argument_list|)
condition|)
block|{
name|query
operator|.
name|addJoin
argument_list|(
literal|"student"
argument_list|,
literal|"r.students s"
argument_list|)
expr_stmt|;
name|String
name|student
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"student"
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|,
literal|", "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|token
init|=
name|s
operator|.
name|nextToken
argument_list|()
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|student
operator|+=
operator|(
name|student
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|" and "
operator|)
operator|+
literal|"(upper(s.firstName) like :std"
operator|+
name|id
operator|+
literal|" || '%' or "
operator|+
literal|"upper(s.middleName) like :std"
operator|+
name|id
operator|+
literal|" || '%' or upper(s.lastName) like :std"
operator|+
name|id
operator|+
literal|" || '%' or s.externalUniqueId = :std"
operator|+
name|id
operator|+
literal|")"
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"student"
argument_list|,
literal|"std"
operator|+
name|id
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
name|query
operator|.
name|addWhere
argument_list|(
literal|"student"
argument_list|,
name|student
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"course"
argument_list|)
condition|)
block|{
name|String
name|courses
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|t
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"course"
argument_list|)
control|)
block|{
name|courses
operator|+=
operator|(
name|courses
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":course"
operator|+
name|id
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"course"
argument_list|,
literal|"course"
operator|+
name|id
argument_list|,
name|t
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
name|query
operator|.
name|addWhere
argument_list|(
literal|"course"
argument_list|,
literal|"lower(co.subjectArea.subjectAreaAbbreviation || ' ' || co.courseNbr) "
operator|+
operator|(
name|id
operator|==
literal|1
condition|?
literal|"= "
operator|+
name|courses
else|:
literal|"in ("
operator|+
name|courses
operator|+
literal|")"
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
specifier|public
specifier|static
class|class
name|ReservationQuery
block|{
specifier|private
name|Long
name|iSessionId
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|iJoin
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|iFrom
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|iWhere
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|iParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|ReservationQuery
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|iSessionId
operator|=
name|sessionId
expr_stmt|;
block|}
specifier|public
name|void
name|addFrom
parameter_list|(
name|String
name|option
parameter_list|,
name|String
name|from
parameter_list|)
block|{
name|iFrom
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|from
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addWhere
parameter_list|(
name|String
name|option
parameter_list|,
name|String
name|where
parameter_list|)
block|{
name|iWhere
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|where
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addJoin
parameter_list|(
name|String
name|option
parameter_list|,
name|String
name|from
parameter_list|)
block|{
name|iJoin
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|from
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addParameter
parameter_list|(
name|String
name|option
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
name|iParams
operator|.
name|get
argument_list|(
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
name|params
operator|==
literal|null
condition|)
block|{
name|params
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|iParams
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getFrom
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|excludeOption
parameter_list|)
block|{
name|String
name|from
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|iFrom
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|excludeOption
operator|!=
literal|null
operator|&&
name|excludeOption
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
continue|continue;
name|from
operator|+=
literal|", "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
return|return
name|from
return|;
block|}
specifier|public
name|String
name|getJoin
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|excludeOption
parameter_list|)
block|{
name|String
name|join
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|iJoin
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|excludeOption
operator|!=
literal|null
operator|&&
name|excludeOption
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
continue|continue;
name|join
operator|+=
literal|" inner join "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
return|return
name|join
return|;
block|}
specifier|public
name|String
name|getWhere
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|excludeOption
parameter_list|)
block|{
name|String
name|where
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|iWhere
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|excludeOption
operator|!=
literal|null
operator|&&
name|excludeOption
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
continue|continue;
name|where
operator|+=
literal|" and ("
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
return|return
name|where
return|;
block|}
specifier|public
name|org
operator|.
name|hibernate
operator|.
name|Query
name|setParams
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Query
name|query
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|excludeOption
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entry
range|:
name|iParams
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|excludeOption
operator|!=
literal|null
operator|&&
name|excludeOption
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|param
range|:
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Integer
condition|)
block|{
name|query
operator|.
name|setInteger
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Integer
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Long
condition|)
block|{
name|query
operator|.
name|setLong
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Long
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|String
condition|)
block|{
name|query
operator|.
name|setString
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Boolean
condition|)
block|{
name|query
operator|.
name|setBoolean
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Boolean
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Date
condition|)
block|{
name|query
operator|.
name|setDate
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Date
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|setString
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
name|param
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|query
return|;
block|}
specifier|public
name|ReservationQueryInstance
name|select
parameter_list|(
name|String
name|select
parameter_list|)
block|{
return|return
operator|new
name|ReservationQueryInstance
argument_list|(
name|select
argument_list|)
return|;
block|}
specifier|public
class|class
name|ReservationQueryInstance
block|{
specifier|private
name|String
name|iSelect
init|=
literal|null
decl_stmt|,
name|iFrom
init|=
literal|"inner join r.instructionalOffering.courseOfferings co"
decl_stmt|,
name|iWhere
init|=
literal|null
decl_stmt|,
name|iOrderBy
init|=
literal|null
decl_stmt|,
name|iGroupBy
init|=
literal|null
decl_stmt|,
name|iType
init|=
literal|"Reservation"
decl_stmt|;
specifier|private
name|Integer
name|iLimit
init|=
literal|null
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|iExclude
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|iParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ReservationQueryInstance
parameter_list|(
name|String
name|select
parameter_list|)
block|{
name|iSelect
operator|=
name|select
expr_stmt|;
block|}
specifier|public
name|ReservationQueryInstance
name|from
parameter_list|(
name|String
name|from
parameter_list|)
block|{
name|iFrom
operator|=
name|from
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ReservationQueryInstance
name|where
parameter_list|(
name|String
name|where
parameter_list|)
block|{
if|if
condition|(
name|iWhere
operator|==
literal|null
condition|)
name|iWhere
operator|=
literal|"("
operator|+
name|where
operator|+
literal|")"
expr_stmt|;
else|else
name|iWhere
operator|+=
literal|" and ("
operator|+
name|where
operator|+
literal|")"
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ReservationQueryInstance
name|type
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|iType
operator|=
name|type
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ReservationQueryInstance
name|order
parameter_list|(
name|String
name|orderBy
parameter_list|)
block|{
name|iOrderBy
operator|=
name|orderBy
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ReservationQueryInstance
name|group
parameter_list|(
name|String
name|groupBy
parameter_list|)
block|{
name|iGroupBy
operator|=
name|groupBy
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ReservationQueryInstance
name|exclude
parameter_list|(
name|String
name|excludeOption
parameter_list|)
block|{
name|iExclude
operator|.
name|add
argument_list|(
name|excludeOption
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ReservationQueryInstance
name|set
parameter_list|(
name|String
name|param
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|iParams
operator|.
name|put
argument_list|(
name|param
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ReservationQueryInstance
name|limit
parameter_list|(
name|Integer
name|limit
parameter_list|)
block|{
name|iLimit
operator|=
operator|(
name|limit
operator|==
literal|null
operator|||
name|limit
operator|<=
literal|0
condition|?
literal|null
else|:
name|limit
operator|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|String
name|query
parameter_list|()
block|{
return|return
literal|"select "
operator|+
operator|(
name|iSelect
operator|==
literal|null
condition|?
literal|"distinct r"
else|:
name|iSelect
operator|)
operator|+
literal|" from "
operator|+
name|iType
operator|+
literal|" r "
operator|+
name|getJoin
argument_list|(
name|iExclude
argument_list|)
operator|+
operator|(
name|iFrom
operator|==
literal|null
condition|?
literal|""
else|:
name|iFrom
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"inner join"
argument_list|)
condition|?
literal|" "
operator|+
name|iFrom
else|:
literal|", "
operator|+
name|iFrom
operator|)
operator|+
name|getFrom
argument_list|(
name|iExclude
argument_list|)
operator|+
literal|" where r.instructionalOffering.session.uniqueId = :sessionId"
operator|+
name|getWhere
argument_list|(
name|iExclude
argument_list|)
operator|+
operator|(
name|iWhere
operator|==
literal|null
condition|?
literal|""
else|:
literal|" and ("
operator|+
name|iWhere
operator|+
literal|")"
operator|)
operator|+
operator|(
name|iGroupBy
operator|==
literal|null
condition|?
literal|""
else|:
literal|" group by "
operator|+
name|iGroupBy
operator|)
operator|+
operator|(
name|iOrderBy
operator|==
literal|null
condition|?
literal|""
else|:
literal|" order by "
operator|+
name|iOrderBy
operator|)
return|;
block|}
specifier|public
name|org
operator|.
name|hibernate
operator|.
name|Query
name|query
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Query
name|query
init|=
name|setParams
argument_list|(
name|hibSession
operator|.
name|createQuery
argument_list|(
name|query
argument_list|()
argument_list|)
argument_list|,
name|iExclude
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|param
range|:
name|iParams
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Integer
condition|)
block|{
name|query
operator|.
name|setInteger
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Integer
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Long
condition|)
block|{
name|query
operator|.
name|setLong
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Long
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|String
condition|)
block|{
name|query
operator|.
name|setString
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Boolean
condition|)
block|{
name|query
operator|.
name|setBoolean
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Boolean
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Date
condition|)
block|{
name|query
operator|.
name|setDate
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Date
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|setString
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
name|param
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iLimit
operator|!=
literal|null
condition|)
name|query
operator|.
name|setMaxResults
argument_list|(
name|iLimit
argument_list|)
expr_stmt|;
return|return
name|query
return|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|ReservationMatcher
implements|implements
name|Query
operator|.
name|TermMatcher
block|{
specifier|private
name|Reservation
name|iReservation
decl_stmt|;
specifier|private
name|Date
name|iExpDate
decl_stmt|;
specifier|private
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|iDateFormat
init|=
literal|null
decl_stmt|;
specifier|private
name|ReservationMatcher
parameter_list|(
name|Reservation
name|r
parameter_list|)
block|{
name|iReservation
operator|=
name|r
expr_stmt|;
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|iExpDate
operator|=
name|c
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|format
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
if|if
condition|(
name|iDateFormat
operator|==
literal|null
condition|)
name|iDateFormat
operator|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|FILTER_DATE
argument_list|)
expr_stmt|;
return|return
name|iDateFormat
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
specifier|private
name|Date
name|parse
parameter_list|(
name|String
name|date
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|iDateFormat
operator|==
literal|null
condition|)
name|iDateFormat
operator|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|FILTER_DATE
argument_list|)
expr_stmt|;
return|return
name|iDateFormat
operator|.
name|parse
argument_list|(
name|date
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|attr
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|term
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
literal|"course"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|CourseOffering
name|co
range|:
name|iReservation
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
if|if
condition|(
name|eq
argument_list|(
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|has
argument_list|(
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
literal|"dept"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"department"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
name|Department
name|d
init|=
name|iReservation
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getDepartment
argument_list|()
decl_stmt|;
if|if
condition|(
name|eq
argument_list|(
name|d
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
name|d
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|has
argument_list|(
name|d
operator|.
name|getName
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
literal|"subject"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"subj"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|CourseOffering
name|co
range|:
name|iReservation
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
if|if
condition|(
name|eq
argument_list|(
name|co
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|has
argument_list|(
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getTitle
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
literal|"type"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|iReservation
operator|instanceof
name|OverrideReservation
operator|&&
literal|"override"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|iReservation
operator|instanceof
name|IndividualReservation
operator|&&
operator|!
operator|(
name|iReservation
operator|instanceof
name|OverrideReservation
operator|)
operator|&&
literal|"individual"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|iReservation
operator|instanceof
name|StudentGroupReservation
operator|&&
operator|!
operator|(
name|iReservation
operator|instanceof
name|LearningCommunityReservation
operator|)
operator|&&
literal|"group"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|iReservation
operator|instanceof
name|LearningCommunityReservation
operator|&&
literal|"lc"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|iReservation
operator|instanceof
name|CourseReservation
operator|&&
literal|"course"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|iReservation
operator|instanceof
name|CurriculumReservation
operator|&&
literal|"curriculum"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
literal|"override"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|iReservation
operator|instanceof
name|OverrideReservation
operator|&&
name|OverrideType
operator|.
name|values
argument_list|()
index|[
operator|(
operator|(
name|OverrideReservation
operator|)
name|iReservation
operator|)
operator|.
name|getType
argument_list|()
index|]
operator|.
name|getReference
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
literal|"group"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|iReservation
operator|instanceof
name|StudentGroupReservation
condition|)
block|{
name|StudentGroupReservation
name|gr
init|=
operator|(
name|StudentGroupReservation
operator|)
name|iReservation
decl_stmt|;
if|if
condition|(
name|eq
argument_list|(
name|gr
operator|.
name|getGroup
argument_list|()
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|has
argument_list|(
name|gr
operator|.
name|getGroup
argument_list|()
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
literal|"student"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|iReservation
operator|instanceof
name|IndividualReservation
condition|)
block|{
name|IndividualReservation
name|ir
init|=
operator|(
name|IndividualReservation
operator|)
name|iReservation
decl_stmt|;
for|for
control|(
name|Student
name|s
range|:
name|ir
operator|.
name|getStudents
argument_list|()
control|)
block|{
if|if
condition|(
name|has
argument_list|(
name|s
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatFirstMiddleLast
argument_list|)
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
name|s
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
if|if
condition|(
literal|"area"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|iReservation
operator|instanceof
name|CurriculumReservation
condition|)
block|{
name|CurriculumReservation
name|cr
init|=
operator|(
name|CurriculumReservation
operator|)
name|iReservation
decl_stmt|;
if|if
condition|(
name|eq
argument_list|(
name|cr
operator|.
name|getArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|has
argument_list|(
name|cr
operator|.
name|getArea
argument_list|()
operator|.
name|getTitle
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
literal|"class"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|Class_
name|c
range|:
name|iReservation
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|eq
argument_list|(
name|c
operator|.
name|getClassLabel
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|has
argument_list|(
name|c
operator|.
name|getClassLabel
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
name|c
operator|.
name|getClassSuffix
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
literal|"config"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|InstrOfferingConfig
name|c
range|:
name|iReservation
operator|.
name|getConfigurations
argument_list|()
control|)
block|{
if|if
condition|(
name|eq
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|has
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|&&
literal|"expired"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
block|{
if|if
condition|(
name|iReservation
operator|.
name|getExpirationDate
argument_list|()
operator|!=
literal|null
operator|&&
name|iReservation
operator|.
name|getExpirationDate
argument_list|()
operator|.
name|before
argument_list|(
name|iExpDate
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|iReservation
operator|.
name|getStartDate
argument_list|()
operator|!=
literal|null
operator|&&
name|iExpDate
operator|.
name|before
argument_list|(
name|iReservation
operator|.
name|getStartDate
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
literal|"expiration"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"exp"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|iReservation
operator|.
name|getExpirationDate
argument_list|()
operator|!=
literal|null
operator|&&
name|eq
argument_list|(
name|format
argument_list|(
name|iReservation
operator|.
name|getExpirationDate
argument_list|()
argument_list|)
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
literal|"start"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|iReservation
operator|.
name|getStartDate
argument_list|()
operator|!=
literal|null
operator|&&
name|eq
argument_list|(
name|format
argument_list|(
name|iReservation
operator|.
name|getStartDate
argument_list|()
argument_list|)
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
literal|"before"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
try|try
block|{
name|Date
name|x
init|=
operator|(
literal|"today"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|?
name|iExpDate
else|:
name|parse
argument_list|(
name|term
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|iReservation
operator|.
name|getExpirationDate
argument_list|()
operator|!=
literal|null
operator|&&
name|iReservation
operator|.
name|getExpirationDate
argument_list|()
operator|.
name|before
argument_list|(
name|x
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
literal|"after"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
try|try
block|{
name|Date
name|x
init|=
operator|(
literal|"today"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|?
name|iExpDate
else|:
name|parse
argument_list|(
name|term
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|iReservation
operator|.
name|getExpirationDate
argument_list|()
operator|==
literal|null
operator|||
name|iReservation
operator|.
name|getExpirationDate
argument_list|()
operator|.
name|after
argument_list|(
name|x
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|eq
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|name
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|has
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|String
name|t
range|:
name|name
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
control|)
if|if
condition|(
name|t
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

