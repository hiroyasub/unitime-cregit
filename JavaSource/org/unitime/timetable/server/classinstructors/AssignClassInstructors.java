begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|classinstructors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|CommonValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AssignClassInstructorsInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AssignClassInstructorsInterface
operator|.
name|DataColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AssignClassInstructorsInterface
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AssignClassInstructorsInterface
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AssignClassInstructorsInterface
operator|.
name|Flag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AssignClassInstructorsInterface
operator|.
name|ListItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AssignClassInstructorsInterface
operator|.
name|PageName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AssignClassInstructorsInterface
operator|.
name|Record
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalInstrOfferingConfigAssignInstructorsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|OfferingCoordinator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TeachingResponsibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TeachingResponsibility
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassCourseComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|DepartmentalInstructorComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|InstructorComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|SchedulingSubpartComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstrOfferingConfigDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TeachingResponsibilityDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|permissions
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ClassAssignmentProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|AssignmentService
import|;
end_import

begin_comment
comment|/**  * @author Stephanie Schluttenhofer  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"gwtAssignClassInstrs"
argument_list|)
specifier|public
class|class
name|AssignClassInstructors
implements|implements
name|AssignClassInstructorsTable
block|{
annotation|@
name|Autowired
name|AssignmentService
argument_list|<
name|ClassAssignmentProxy
argument_list|>
name|classAssignmentService
decl_stmt|;
annotation|@
name|Autowired
name|Permission
argument_list|<
name|InstructionalOffering
argument_list|>
name|permissionOfferingLockNeeded
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|defaultTeachingResponsibilityId
decl_stmt|;
specifier|public
name|String
name|getDefaultTeachingResponsibilityId
parameter_list|()
block|{
if|if
condition|(
name|defaultTeachingResponsibilityId
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|""
operator|)
return|;
block|}
return|return
name|defaultTeachingResponsibilityId
return|;
block|}
specifier|public
name|void
name|setDefaultTeachingResponsibilityId
parameter_list|(
name|String
name|defaultTeachingResponsibilityId
parameter_list|)
block|{
name|this
operator|.
name|defaultTeachingResponsibilityId
operator|=
name|defaultTeachingResponsibilityId
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PageName
name|name
parameter_list|()
block|{
return|return
operator|new
name|PageName
argument_list|(
name|MESSAGES
operator|.
name|pageAssignInstructors
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|pageAssignInstructors
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|Field
name|getFieldForColumn
parameter_list|(
name|DataColumn
name|dataColumn
parameter_list|,
name|InstrOfferingConfig
name|ioc
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
switch|switch
condition|(
name|dataColumn
condition|)
block|{
case|case
name|CLASS_UID
case|:
return|return
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldClassUid
argument_list|()
argument_list|,
name|FieldType
operator|.
name|number
argument_list|,
literal|40
argument_list|,
name|Flag
operator|.
name|HIDDEN
argument_list|)
return|;
case|case
name|IS_FIRST_RECORD_FOR_CLASS
case|:
return|return
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldFirstRecordForClassUid
argument_list|()
argument_list|,
name|FieldType
operator|.
name|toggle
argument_list|,
literal|40
argument_list|,
name|Flag
operator|.
name|HIDDEN
argument_list|)
return|;
case|case
name|HAS_ERROR
case|:
return|return
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldError
argument_list|()
argument_list|,
name|FieldType
operator|.
name|hasError
argument_list|,
literal|40
argument_list|,
name|Flag
operator|.
name|HIDE_LABEL
argument_list|)
return|;
case|case
name|CLASS_NAME
case|:
return|return
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldClassName
argument_list|()
argument_list|,
name|FieldType
operator|.
name|textarea
argument_list|,
literal|120
argument_list|,
name|Flag
operator|.
name|READ_ONLY
argument_list|,
name|Flag
operator|.
name|HIDE_LABEL
argument_list|)
return|;
case|case
name|CLASS_EXTERNAL_UID
case|:
return|return
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldExternalId
argument_list|()
argument_list|,
name|FieldType
operator|.
name|textarea
argument_list|,
literal|120
argument_list|,
name|Flag
operator|.
name|READ_ONLY
argument_list|)
return|;
case|case
name|ADD
case|:
return|return
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldAdd
argument_list|()
argument_list|,
name|FieldType
operator|.
name|add
argument_list|,
literal|40
argument_list|,
name|Flag
operator|.
name|HIDE_LABEL
argument_list|)
return|;
case|case
name|DELETE
case|:
return|return
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldDelete
argument_list|()
argument_list|,
name|FieldType
operator|.
name|delete
argument_list|,
literal|40
argument_list|,
name|Flag
operator|.
name|HIDE_LABEL
argument_list|)
return|;
case|case
name|INSTR_NAME
case|:
name|ArrayList
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|instructorList
init|=
operator|new
name|ArrayList
argument_list|<
name|DepartmentalInstructor
argument_list|>
argument_list|(
name|ioc
operator|.
name|getDepartment
argument_list|()
operator|.
name|getInstructors
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|instructorList
argument_list|,
operator|new
name|DepartmentalInstructorComparator
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ListItem
argument_list|>
name|instructors
init|=
operator|new
name|ArrayList
argument_list|<
name|ListItem
argument_list|>
argument_list|()
decl_stmt|;
name|instructors
operator|.
name|add
argument_list|(
operator|new
name|ListItem
argument_list|(
literal|"-1"
argument_list|,
name|MESSAGES
operator|.
name|itemSelect
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|DepartmentalInstructor
name|di
range|:
name|instructorList
control|)
block|{
name|instructors
operator|.
name|add
argument_list|(
operator|new
name|ListItem
argument_list|(
name|di
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|di
operator|.
name|getName
argument_list|(
name|UserProperty
operator|.
name|NameFormat
operator|.
name|get
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldName
argument_list|()
argument_list|,
name|FieldType
operator|.
name|list
argument_list|,
literal|300
argument_list|,
name|instructors
argument_list|)
return|;
case|case
name|PCT_SHARE
case|:
return|return
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldPercentShare
argument_list|()
argument_list|,
name|FieldType
operator|.
name|number
argument_list|,
literal|60
argument_list|,
literal|40
argument_list|)
return|;
case|case
name|CHECK_CONFICTS
case|:
return|return
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldCheckConflicts
argument_list|()
argument_list|,
name|FieldType
operator|.
name|toggle
argument_list|,
literal|120
argument_list|,
literal|40
argument_list|)
return|;
case|case
name|RESPONSIBILITY
case|:
name|List
argument_list|<
name|ListItem
argument_list|>
name|responsibilities
init|=
operator|new
name|ArrayList
argument_list|<
name|ListItem
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TeachingResponsibility
name|tr
range|:
name|TeachingResponsibility
operator|.
name|getInstructorTeachingResponsibilities
argument_list|()
control|)
block|{
name|responsibilities
operator|.
name|add
argument_list|(
operator|new
name|ListItem
argument_list|(
name|tr
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|tr
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|tr
operator|.
name|hasOption
argument_list|(
name|Option
operator|.
name|isdefault
argument_list|)
condition|)
block|{
name|setDefaultTeachingResponsibilityId
argument_list|(
name|tr
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Flag
name|respFlag
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|responsibilities
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|respFlag
operator|=
name|Flag
operator|.
name|HIDDEN
expr_stmt|;
block|}
return|return
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldResponsibility
argument_list|()
argument_list|,
name|FieldType
operator|.
name|list
argument_list|,
literal|100
argument_list|,
name|responsibilities
argument_list|,
name|respFlag
argument_list|)
return|;
case|case
name|DISPLAY
case|:
return|return
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldDisplay
argument_list|(
literal|"&otimes;"
argument_list|)
argument_list|,
name|FieldType
operator|.
name|toggle
argument_list|,
literal|120
argument_list|)
return|;
case|case
name|FUNDING_DEPT
case|:
name|List
argument_list|<
name|ListItem
argument_list|>
name|fundingDepts
init|=
operator|new
name|ArrayList
argument_list|<
name|ListItem
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|fundingDeptsUsed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Department
name|d
range|:
name|ioc
operator|.
name|findPossibleFundingDepts
argument_list|(
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|d
operator|.
name|isExternalFundingDept
argument_list|()
operator|!=
literal|null
operator|&&
name|d
operator|.
name|isExternalFundingDept
argument_list|()
condition|)
block|{
name|fundingDeptsUsed
operator|=
literal|true
expr_stmt|;
block|}
name|fundingDepts
operator|.
name|add
argument_list|(
operator|new
name|ListItem
argument_list|(
name|d
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|d
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Flag
name|fdFlag
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|fundingDeptsUsed
condition|)
block|{
name|fdFlag
operator|=
name|Flag
operator|.
name|HIDDEN
expr_stmt|;
block|}
return|return
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|fieldFundingDepartment
argument_list|()
argument_list|,
name|FieldType
operator|.
name|list
argument_list|,
literal|100
argument_list|,
name|fundingDepts
argument_list|,
name|fdFlag
argument_list|)
return|;
case|case
name|TIME
case|:
return|return
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|colTime
argument_list|()
argument_list|,
name|FieldType
operator|.
name|textarea
argument_list|,
literal|120
argument_list|,
name|Flag
operator|.
name|READ_ONLY
argument_list|)
return|;
case|case
name|ROOM
case|:
return|return
operator|new
name|Field
argument_list|(
name|MESSAGES
operator|.
name|colRoom
argument_list|()
argument_list|,
name|FieldType
operator|.
name|textarea
argument_list|,
literal|120
argument_list|,
name|Flag
operator|.
name|READ_ONLY
argument_list|)
return|;
default|default:
return|return
operator|new
name|Field
argument_list|(
name|dataColumn
operator|.
name|name
argument_list|()
argument_list|,
name|FieldType
operator|.
name|textarea
argument_list|,
literal|120
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|AssignClassInstructorsInterface
name|load
parameter_list|(
name|String
name|cfgIdStr
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|Session
name|hibSession
parameter_list|)
throws|throws
name|Exception
block|{
name|Long
name|cfgId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cfgIdStr
operator|!=
literal|null
operator|&&
operator|!
name|cfgIdStr
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|cfgId
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|cfgIdStr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|MESSAGES
operator|.
name|errorConfigurationIdNotFound
argument_list|()
argument_list|)
throw|;
block|}
name|InstrOfferingConfig
name|ioc
init|=
name|InstrOfferingConfigDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|cfgId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|Field
index|[]
name|fields
init|=
operator|new
name|Field
index|[
name|DataColumn
operator|.
name|values
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|DataColumn
name|dc
range|:
name|DataColumn
operator|.
name|values
argument_list|()
control|)
block|{
name|fields
index|[
name|dc
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|getFieldForColumn
argument_list|(
name|dc
argument_list|,
name|ioc
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
name|AssignClassInstructorsInterface
name|data
init|=
operator|new
name|AssignClassInstructorsInterface
argument_list|(
name|fields
argument_list|)
decl_stmt|;
name|data
operator|.
name|setConfigId
argument_list|(
name|ioc
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|setOfferingId
argument_list|(
name|ioc
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|setCourseName
argument_list|(
name|ioc
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseNameWithTitle
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|coordinators
init|=
literal|""
decl_stmt|;
name|String
name|instructorNameFormat
init|=
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
name|UserProperty
operator|.
name|NameFormat
argument_list|)
decl_stmt|;
for|for
control|(
name|OfferingCoordinator
name|coordinator
range|:
operator|new
name|TreeSet
argument_list|<
name|OfferingCoordinator
argument_list|>
argument_list|(
name|ioc
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getOfferingCoordinators
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|coordinators
operator|.
name|isEmpty
argument_list|()
condition|)
name|coordinators
operator|+=
literal|"\n"
expr_stmt|;
name|coordinators
operator|+=
name|coordinator
operator|.
name|getInstructor
argument_list|()
operator|.
name|getName
argument_list|(
name|instructorNameFormat
argument_list|)
operator|+
operator|(
name|coordinator
operator|.
name|getResponsibility
argument_list|()
operator|==
literal|null
condition|?
operator|(
name|coordinator
operator|.
name|getPercentShare
argument_list|()
operator|!=
literal|0
condition|?
literal|" ("
operator|+
name|coordinator
operator|.
name|getPercentShare
argument_list|()
operator|+
literal|"%)"
else|:
literal|""
operator|)
else|:
literal|" ("
operator|+
name|coordinator
operator|.
name|getResponsibility
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
operator|(
name|coordinator
operator|.
name|getPercentShare
argument_list|()
operator|>
literal|0
condition|?
literal|", "
operator|+
name|coordinator
operator|.
name|getPercentShare
argument_list|()
operator|+
literal|"%"
else|:
literal|""
operator|)
operator|+
literal|")"
operator|)
expr_stmt|;
block|}
name|data
operator|.
name|setCourseCoordinators
argument_list|(
name|coordinators
argument_list|)
expr_stmt|;
name|InstrOfferingConfig
name|next
init|=
name|ioc
operator|.
name|getNextInstrOfferingConfig
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|data
operator|.
name|setNextConfigId
argument_list|(
name|next
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|InstrOfferingConfig
name|prev
init|=
name|ioc
operator|.
name|getPreviousInstrOfferingConfig
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
name|data
operator|.
name|setPreviousConfigId
argument_list|(
name|prev
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|addRecordsForConfig
argument_list|(
name|ioc
argument_list|,
name|data
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|data
operator|.
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|addRecordsForConfig
parameter_list|(
name|InstrOfferingConfig
name|ioc
parameter_list|,
name|AssignClassInstructorsInterface
name|data
parameter_list|,
name|SessionContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|Debug
operator|.
name|info
argument_list|(
literal|"In addRecordsForConfig"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|SchedulingSubpart
argument_list|>
name|subpartList
init|=
operator|new
name|ArrayList
argument_list|<
name|SchedulingSubpart
argument_list|>
argument_list|(
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|subpartList
argument_list|,
operator|new
name|SchedulingSubpartComparator
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SchedulingSubpart
name|ss
range|:
name|subpartList
control|)
block|{
if|if
condition|(
name|ss
operator|.
name|getClasses
argument_list|()
operator|==
literal|null
operator|||
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
name|MESSAGES
operator|.
name|exceptionInitialIOSetupIncomplete
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|==
literal|null
condition|)
block|{
name|loadClasses
argument_list|(
name|data
argument_list|,
name|ss
operator|.
name|getClasses
argument_list|()
argument_list|,
operator|new
name|String
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|loadClasses
parameter_list|(
name|AssignClassInstructorsInterface
name|data
parameter_list|,
name|Set
argument_list|<
name|Class_
argument_list|>
name|classes
parameter_list|,
name|String
name|indent
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|classes
operator|!=
literal|null
operator|&&
name|classes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ArrayList
argument_list|<
name|Class_
argument_list|>
name|classesList
init|=
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|(
name|classes
argument_list|)
decl_stmt|;
if|if
condition|(
name|CommonValues
operator|.
name|Yes
operator|.
name|eq
argument_list|(
name|UserProperty
operator|.
name|ClassesKeepSort
operator|.
name|get
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|classesList
argument_list|,
operator|new
name|ClassCourseComparator
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"InstructionalOfferingList.sortBy"
argument_list|,
name|ClassCourseComparator
operator|.
name|getName
argument_list|(
name|ClassCourseComparator
operator|.
name|SortBy
operator|.
name|NAME
argument_list|)
argument_list|)
argument_list|,
name|classAssignmentService
operator|.
name|getAssignment
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|classesList
argument_list|,
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_ITYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Class_
name|cls
range|:
name|classesList
control|)
block|{
name|addClassRecords
argument_list|(
name|data
argument_list|,
name|cls
argument_list|,
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|cls
argument_list|,
name|Right
operator|.
name|AssignInstructorsClass
argument_list|)
argument_list|,
name|indent
argument_list|)
expr_stmt|;
name|loadClasses
argument_list|(
name|data
argument_list|,
name|cls
operator|.
name|getChildClasses
argument_list|()
argument_list|,
name|indent
operator|+
literal|"&nbsp;&nbsp;&nbsp;&nbsp;"
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|addClassRecords
parameter_list|(
name|AssignClassInstructorsInterface
name|data
parameter_list|,
name|Class_
name|cls
parameter_list|,
name|Boolean
name|isReadOnly
parameter_list|,
name|String
name|indent
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ClassInstructor
argument_list|>
name|instructors
init|=
operator|new
name|ArrayList
argument_list|<
name|ClassInstructor
argument_list|>
argument_list|(
name|cls
operator|.
name|getClassInstructors
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|instructors
argument_list|,
operator|new
name|InstructorComparator
argument_list|()
argument_list|)
expr_stmt|;
name|ClassInstructor
name|instructor
init|=
literal|null
decl_stmt|;
name|boolean
name|isEditable
init|=
operator|!
name|isReadOnly
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
do|do
block|{
name|int
name|recId
init|=
name|data
operator|.
name|getRecords
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|Record
name|rec
init|=
name|data
operator|.
name|addRecord
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|recId
argument_list|)
argument_list|)
decl_stmt|;
name|rec
operator|.
name|setDeletable
argument_list|(
name|isEditable
argument_list|)
expr_stmt|;
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|CLASS_UID
operator|.
name|ordinal
argument_list|()
argument_list|,
name|cls
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|IS_FIRST_RECORD_FOR_CLASS
operator|.
name|ordinal
argument_list|()
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|i
operator|==
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|HAS_ERROR
operator|.
name|ordinal
argument_list|()
argument_list|,
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructors
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
block|{
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|DELETE
operator|.
name|ordinal
argument_list|()
argument_list|,
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|DELETE
operator|.
name|ordinal
argument_list|()
argument_list|,
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isEditable
condition|)
block|{
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|ADD
operator|.
name|ordinal
argument_list|()
argument_list|,
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|ADD
operator|.
name|ordinal
argument_list|()
argument_list|,
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|instructors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|instructor
operator|=
operator|(
name|ClassInstructor
operator|)
name|instructors
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
comment|// Only display the class name, time, room, display flag, and funding department on the first instructor row
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|CLASS_NAME
operator|.
name|ordinal
argument_list|()
argument_list|,
name|indent
operator|+
name|cls
operator|.
name|htmlLabel
argument_list|()
argument_list|,
literal|false
argument_list|,
name|i
operator|==
literal|0
argument_list|)
expr_stmt|;
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|CLASS_EXTERNAL_UID
operator|.
name|ordinal
argument_list|()
argument_list|,
name|cls
operator|.
name|getClassSuffix
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|cls
operator|.
name|getClassSuffix
argument_list|()
argument_list|,
literal|false
argument_list|,
name|i
operator|==
literal|0
argument_list|)
expr_stmt|;
name|String
name|time
init|=
name|cls
operator|.
name|buildAssignedTimeHtml
argument_list|(
name|classAssignmentService
operator|.
name|getAssignment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|time
operator|!=
literal|null
operator|&&
operator|!
name|time
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|data
operator|.
name|setShowTimeAndRoom
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|TIME
operator|.
name|ordinal
argument_list|()
argument_list|,
name|time
argument_list|,
literal|false
argument_list|,
name|i
operator|==
literal|0
argument_list|)
expr_stmt|;
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|ROOM
operator|.
name|ordinal
argument_list|()
argument_list|,
name|cls
operator|.
name|buildAssignedRoomHtml
argument_list|(
name|classAssignmentService
operator|.
name|getAssignment
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
name|i
operator|==
literal|0
argument_list|)
expr_stmt|;
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|DISPLAY
operator|.
name|ordinal
argument_list|()
argument_list|,
name|cls
operator|.
name|isDisplayInstructor
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|isEditable
argument_list|,
name|i
operator|==
literal|0
argument_list|)
expr_stmt|;
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|FUNDING_DEPT
operator|.
name|ordinal
argument_list|()
argument_list|,
name|cls
operator|.
name|getEffectiveFundingDept
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|cls
operator|.
name|getEffectiveFundingDept
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|isEditable
argument_list|,
name|i
operator|==
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|INSTR_NAME
operator|.
name|ordinal
argument_list|()
argument_list|,
name|instructor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|isEditable
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|PCT_SHARE
operator|.
name|ordinal
argument_list|()
argument_list|,
name|instructor
operator|.
name|getPercentShare
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|isEditable
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|CHECK_CONFICTS
operator|.
name|ordinal
argument_list|()
argument_list|,
name|instructor
operator|.
name|isLead
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|isEditable
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|RESPONSIBILITY
operator|.
name|ordinal
argument_list|()
argument_list|,
name|instructor
operator|.
name|getResponsibility
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|instructor
operator|.
name|getResponsibility
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|isEditable
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|INSTR_NAME
operator|.
name|ordinal
argument_list|()
argument_list|,
literal|""
argument_list|,
name|isEditable
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|PCT_SHARE
operator|.
name|ordinal
argument_list|()
argument_list|,
literal|"100"
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|CHECK_CONFICTS
operator|.
name|ordinal
argument_list|()
argument_list|,
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|,
name|isEditable
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|RESPONSIBILITY
operator|.
name|ordinal
argument_list|()
argument_list|,
name|getDefaultTeachingResponsibilityId
argument_list|()
argument_list|,
name|isEditable
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
operator|++
name|i
operator|<
name|instructors
operator|.
name|size
argument_list|()
condition|)
do|;
block|}
specifier|private
name|boolean
name|matchesInstructorIncludingResponsibility
parameter_list|(
name|Record
name|record
parameter_list|,
name|ClassInstructor
name|classInstructor
parameter_list|)
block|{
if|if
condition|(
name|matchesInstructor
argument_list|(
name|record
argument_list|,
name|classInstructor
argument_list|)
condition|)
block|{
if|if
condition|(
name|record
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|RESPONSIBILITY
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|&&
name|classInstructor
operator|.
name|getResponsibility
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|record
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|RESPONSIBILITY
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|&&
name|classInstructor
operator|.
name|getResponsibility
argument_list|()
operator|!=
literal|null
operator|&&
name|record
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|RESPONSIBILITY
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|classInstructor
operator|.
name|getResponsibility
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|matchesInstructor
parameter_list|(
name|Record
name|record
parameter_list|,
name|ClassInstructor
name|classInstructor
parameter_list|)
block|{
return|return
operator|(
name|record
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|CLASS_UID
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|!=
literal|null
operator|&&
name|record
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|CLASS_UID
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|classInstructor
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|&&
name|record
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|INSTR_NAME
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|!=
literal|null
operator|&&
name|record
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|INSTR_NAME
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|classInstructor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|private
name|ClassInstructor
name|findMatchingInstructorForRecord
parameter_list|(
name|Record
name|record
parameter_list|,
name|HashSet
argument_list|<
name|ClassInstructor
argument_list|>
name|classInstructors
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ClassInstructor
argument_list|>
name|possibleMatches
init|=
operator|new
name|ArrayList
argument_list|<
name|ClassInstructor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|classInstructors
control|)
block|{
if|if
condition|(
name|matchesInstructor
argument_list|(
name|record
argument_list|,
name|ci
argument_list|)
condition|)
block|{
name|possibleMatches
operator|.
name|add
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|possibleMatches
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|possibleMatches
control|)
block|{
if|if
condition|(
name|matchesInstructorIncludingResponsibility
argument_list|(
name|record
argument_list|,
name|ci
argument_list|)
condition|)
block|{
return|return
name|ci
return|;
block|}
block|}
block|}
if|else if
condition|(
name|possibleMatches
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
operator|(
name|possibleMatches
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|ClassInstructor
name|findMatchingInstructorIncludingResponsibilityForRecord
parameter_list|(
name|Record
name|record
parameter_list|,
name|HashSet
argument_list|<
name|ClassInstructor
argument_list|>
name|classInstructors
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ClassInstructor
argument_list|>
name|possibleMatches
init|=
operator|new
name|ArrayList
argument_list|<
name|ClassInstructor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|classInstructors
control|)
block|{
if|if
condition|(
name|matchesInstructor
argument_list|(
name|record
argument_list|,
name|ci
argument_list|)
condition|)
block|{
name|possibleMatches
operator|.
name|add
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|possibleMatches
control|)
block|{
if|if
condition|(
name|matchesInstructorIncludingResponsibility
argument_list|(
name|record
argument_list|,
name|ci
argument_list|)
condition|)
block|{
return|return
name|ci
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|save
parameter_list|(
name|AssignClassInstructorsInterface
name|data
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|boolean
name|somethingChanged
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|getConfigId
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
name|MESSAGES
operator|.
name|errorConfigurationIdNotProvided
argument_list|()
argument_list|)
throw|;
block|}
name|InstrOfferingConfig
name|ioc
init|=
name|InstrOfferingConfigDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|data
operator|.
name|getConfigId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ioc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
name|MESSAGES
operator|.
name|errorConfigurationIdNotFound
argument_list|()
argument_list|)
throw|;
block|}
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|Record
argument_list|>
argument_list|>
name|classIdRecordMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|Record
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Record
name|r
range|:
name|data
operator|.
name|getRecords
argument_list|()
control|)
block|{
name|ArrayList
argument_list|<
name|Record
argument_list|>
name|records
init|=
name|classIdRecordMap
operator|.
name|get
argument_list|(
name|r
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|CLASS_UID
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|records
operator|==
literal|null
condition|)
block|{
name|records
operator|=
operator|new
name|ArrayList
argument_list|<
name|Record
argument_list|>
argument_list|()
expr_stmt|;
name|classIdRecordMap
operator|.
name|put
argument_list|(
name|r
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|CLASS_UID
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
name|records
argument_list|)
expr_stmt|;
block|}
name|records
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|StringBuffer
name|sbErrorsFound
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|boolean
name|errorsFound
init|=
literal|false
decl_stmt|;
for|for
control|(
name|SchedulingSubpart
name|ss
range|:
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
block|{
for|for
control|(
name|Class_
name|c
range|:
name|ss
operator|.
name|getClasses
argument_list|()
control|)
block|{
name|ArrayList
argument_list|<
name|Record
argument_list|>
name|records
init|=
name|classIdRecordMap
operator|.
name|get
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|records
operator|==
literal|null
condition|)
block|{
name|errorsFound
operator|=
literal|true
expr_stmt|;
name|sbErrorsFound
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|errorInstructorInputDataNotFoundForClass
argument_list|(
name|c
operator|.
name|getClassLabel
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n<br>"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|HashSet
argument_list|<
name|ClassInstructor
argument_list|>
name|origInstrs
init|=
operator|new
name|HashSet
argument_list|<
name|ClassInstructor
argument_list|>
argument_list|()
decl_stmt|;
name|origInstrs
operator|.
name|addAll
argument_list|(
name|c
operator|.
name|getClassInstructors
argument_list|()
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|ClassInstructor
argument_list|>
name|newInstrs
init|=
operator|new
name|HashSet
argument_list|<
name|ClassInstructor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Record
name|r
range|:
name|records
control|)
block|{
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|r
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|HAS_ERROR
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|r
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|HAS_ERROR
operator|.
name|ordinal
argument_list|()
argument_list|,
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|IS_FIRST_RECORD_FOR_CLASS
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|DISPLAY
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|c
operator|.
name|isDisplayInstructor
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|c
operator|.
name|setDisplayInstructor
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|r
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|DISPLAY
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|somethingChanged
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|r
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|FUNDING_DEPT
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getEffectiveFundingDept
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|c
operator|.
name|getEffectiveFundingDept
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|FUNDING_DEPT
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|c
operator|.
name|setFundingDept
argument_list|(
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|FUNDING_DEPT
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|c
operator|.
name|setFundingDept
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|update
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|somethingChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|ClassInstructor
name|ci
init|=
name|findMatchingInstructorForRecord
argument_list|(
name|r
argument_list|,
name|origInstrs
argument_list|)
decl_stmt|;
if|if
condition|(
name|ci
operator|!=
literal|null
condition|)
block|{
name|origInstrs
operator|.
name|remove
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|newInstrs
operator|.
name|add
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|CHECK_CONFICTS
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|ci
operator|.
name|getLead
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|ci
operator|.
name|setLead
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|r
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|CHECK_CONFICTS
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|r
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|PCT_SHARE
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|ci
operator|.
name|getPercentShare
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|ci
operator|.
name|setPercentShare
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|r
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|PCT_SHARE
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|r
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|RESPONSIBILITY
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|ci
operator|.
name|getResponsibility
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|r
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|RESPONSIBILITY
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
if|if
condition|(
name|TeachingResponsibility
operator|.
name|getDefaultInstructorTeachingResponsibility
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ci
operator|.
name|setResponsibility
argument_list|(
name|TeachingResponsibility
operator|.
name|getDefaultInstructorTeachingResponsibility
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ci
operator|.
name|setResponsibility
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ci
operator|.
name|setResponsibility
argument_list|(
name|TeachingResponsibilityDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|r
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|RESPONSIBILITY
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|hibSession
operator|.
name|update
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|somethingChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|ClassInstructor
name|dupCi
init|=
name|findMatchingInstructorIncludingResponsibilityForRecord
argument_list|(
name|r
argument_list|,
name|newInstrs
argument_list|)
decl_stmt|;
if|if
condition|(
name|dupCi
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|HAS_ERROR
operator|.
name|ordinal
argument_list|()
argument_list|,
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|sbErrorsFound
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|errorDuplicateInstructorData
argument_list|(
name|dupCi
operator|.
name|getInstructor
argument_list|()
operator|.
name|getName
argument_list|(
name|UserProperty
operator|.
name|NameFormat
operator|.
name|get
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|(
name|dupCi
operator|.
name|getResponsibility
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|dupCi
operator|.
name|getResponsibility
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|)
argument_list|,
name|c
operator|.
name|getClassLabel
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n<br>"
argument_list|)
expr_stmt|;
name|errorsFound
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|r
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|HAS_ERROR
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|r
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|HAS_ERROR
operator|.
name|ordinal
argument_list|()
argument_list|,
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|String
name|instrIdStr
init|=
name|r
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|INSTR_NAME
operator|.
name|ordinal
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|instrIdStr
operator|==
literal|null
operator|||
name|instrIdStr
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|||
name|instrIdStr
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|"-1"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|IS_FIRST_RECORD_FOR_CLASS
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|data
operator|.
name|getRecords
argument_list|()
operator|.
name|remove
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|records
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
operator|(
name|records
operator|.
name|indexOf
argument_list|(
name|r
argument_list|)
operator|+
literal|1
operator|)
operator|<
name|records
operator|.
name|size
argument_list|()
condition|)
block|{
name|Record
name|newFirst
init|=
name|records
operator|.
name|get
argument_list|(
name|records
operator|.
name|indexOf
argument_list|(
name|r
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|newFirst
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|IS_FIRST_RECORD_FOR_CLASS
operator|.
name|ordinal
argument_list|()
argument_list|,
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|newFirst
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|CLASS_NAME
operator|.
name|ordinal
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|CLASS_NAME
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|newFirst
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|CLASS_EXTERNAL_UID
operator|.
name|ordinal
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|CLASS_EXTERNAL_UID
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|newFirst
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|TIME
operator|.
name|ordinal
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|TIME
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|newFirst
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|ROOM
operator|.
name|ordinal
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|ROOM
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|newFirst
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|DISPLAY
operator|.
name|ordinal
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|DISPLAY
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
name|r
operator|.
name|isEditable
argument_list|(
name|DataColumn
operator|.
name|DISPLAY
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|newFirst
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|DELETE
operator|.
name|ordinal
argument_list|()
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|records
operator|.
name|size
argument_list|()
operator|>
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|data
operator|.
name|getRecords
argument_list|()
operator|.
name|remove
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|INSTR_NAME
operator|.
name|ordinal
argument_list|()
argument_list|,
literal|""
argument_list|,
name|r
operator|.
name|isEditable
argument_list|(
name|DataColumn
operator|.
name|INSTR_NAME
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
name|r
operator|.
name|isVisible
argument_list|(
name|DataColumn
operator|.
name|INSTR_NAME
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|RESPONSIBILITY
operator|.
name|ordinal
argument_list|()
argument_list|,
name|getDefaultTeachingResponsibilityId
argument_list|()
argument_list|,
name|r
operator|.
name|isEditable
argument_list|(
name|DataColumn
operator|.
name|RESPONSIBILITY
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
name|r
operator|.
name|isVisible
argument_list|(
name|DataColumn
operator|.
name|RESPONSIBILITY
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|PCT_SHARE
operator|.
name|ordinal
argument_list|()
argument_list|,
literal|"100"
argument_list|,
name|r
operator|.
name|isEditable
argument_list|(
name|DataColumn
operator|.
name|PCT_SHARE
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
name|r
operator|.
name|isVisible
argument_list|(
name|DataColumn
operator|.
name|PCT_SHARE
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|CHECK_CONFICTS
operator|.
name|ordinal
argument_list|()
argument_list|,
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|,
name|r
operator|.
name|isEditable
argument_list|(
name|DataColumn
operator|.
name|CHECK_CONFICTS
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
name|r
operator|.
name|isVisible
argument_list|(
name|DataColumn
operator|.
name|CHECK_CONFICTS
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
continue|continue;
block|}
name|ci
operator|=
operator|new
name|ClassInstructor
argument_list|()
expr_stmt|;
name|ci
operator|.
name|setClassInstructing
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|.
name|addToclassInstructors
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|DepartmentalInstructor
name|di
init|=
name|DepartmentalInstructorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|instrIdStr
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|di
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|ci
operator|.
name|setInstructor
argument_list|(
name|di
argument_list|)
expr_stmt|;
name|di
operator|.
name|addToclasses
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setLead
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|r
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|CHECK_CONFICTS
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|pctShareStr
init|=
name|r
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|PCT_SHARE
operator|.
name|ordinal
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pctShareStr
operator|==
literal|null
operator|||
name|pctShareStr
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|pctShareStr
operator|=
literal|"0"
expr_stmt|;
block|}
name|ci
operator|.
name|setPercentShare
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|pctShareStr
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|RESPONSIBILITY
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
if|if
condition|(
name|TeachingResponsibility
operator|.
name|getDefaultInstructorTeachingResponsibility
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ci
operator|.
name|setResponsibility
argument_list|(
name|TeachingResponsibility
operator|.
name|getDefaultInstructorTeachingResponsibility
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ci
operator|.
name|setResponsibility
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ci
operator|.
name|setResponsibility
argument_list|(
name|TeachingResponsibilityDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|r
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|RESPONSIBILITY
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ci
operator|.
name|setUniqueId
argument_list|(
operator|(
name|Long
operator|)
name|hibSession
operator|.
name|save
argument_list|(
name|ci
argument_list|)
argument_list|)
expr_stmt|;
name|newInstrs
operator|.
name|add
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|somethingChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|origInstrs
control|)
block|{
name|c
operator|.
name|removeClassInstructor
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|removeClassInstructor
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|somethingChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|errorsFound
operator|&&
name|somethingChanged
condition|)
block|{
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
name|ioc
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|CLASS_INSTR_ASSIGN
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|,
name|ioc
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|permissionOfferingLockNeeded
operator|.
name|check
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
name|ioc
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|)
condition|)
block|{
name|StudentSectioningQueue
operator|.
name|offeringChanged
argument_list|(
name|hibSession
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
name|ioc
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|ioc
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|String
name|className
init|=
name|ApplicationProperty
operator|.
name|ExternalActionInstrOfferingConfigAssignInstructors
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExternalInstrOfferingConfigAssignInstructorsAction
name|assignAction
init|=
literal|null
decl_stmt|;
try|try
block|{
name|assignAction
operator|=
operator|(
name|ExternalInstrOfferingConfigAssignInstructorsAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
operator|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|info
argument_list|(
name|MESSAGES
operator|.
name|exceptionExternalSystemUpdateFailure
argument_list|(
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|className
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|info
argument_list|(
name|MESSAGES
operator|.
name|exceptionExternalSystemUpdateFailure
argument_list|(
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|className
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|info
argument_list|(
name|MESSAGES
operator|.
name|exceptionExternalSystemUpdateFailure
argument_list|(
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|className
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|info
argument_list|(
name|MESSAGES
operator|.
name|exceptionExternalSystemUpdateFailure
argument_list|(
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|className
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|info
argument_list|(
name|MESSAGES
operator|.
name|exceptionExternalSystemUpdateFailure
argument_list|(
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|className
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|info
argument_list|(
name|MESSAGES
operator|.
name|exceptionExternalSystemUpdateFailure
argument_list|(
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|className
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|info
argument_list|(
name|MESSAGES
operator|.
name|exceptionExternalSystemUpdateFailure
argument_list|(
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|className
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|assignAction
operator|!=
literal|null
condition|)
block|{
name|assignAction
operator|.
name|performExternalInstrOfferingConfigAssignInstructorsAction
argument_list|(
name|ioc
argument_list|,
name|InstrOfferingConfigDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|data
operator|.
name|setErrors
argument_list|(
name|sbErrorsFound
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|setSaveSuccessful
argument_list|(
operator|!
name|errorsFound
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeAllInstructors
parameter_list|(
name|AssignClassInstructorsInterface
name|data
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|Session
name|hibSession
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|data
operator|.
name|getConfigId
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|MESSAGES
operator|.
name|errorConfigurationIdNotProvided
argument_list|()
argument_list|)
throw|;
block|}
name|InstrOfferingConfig
name|ioc
init|=
name|InstrOfferingConfigDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|data
operator|.
name|getConfigId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ioc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|MESSAGES
operator|.
name|errorConfigurationIdNotFound
argument_list|()
argument_list|)
throw|;
block|}
for|for
control|(
name|SchedulingSubpart
name|ss
range|:
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
block|{
for|for
control|(
name|Class_
name|c
range|:
name|ss
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|c
argument_list|,
name|Right
operator|.
name|AssignInstructorsClass
argument_list|)
condition|)
block|{
throw|throw
operator|(
operator|new
name|Exception
argument_list|(
name|MESSAGES
operator|.
name|errorDeleteAllInstructorsPermission
argument_list|()
argument_list|)
operator|)
throw|;
block|}
block|}
block|}
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|SchedulingSubpart
name|ss
range|:
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
block|{
for|for
control|(
name|Class_
name|c
range|:
name|ss
operator|.
name|getClasses
argument_list|()
control|)
block|{
name|HashSet
argument_list|<
name|ClassInstructor
argument_list|>
name|origInstrs
init|=
operator|new
name|HashSet
argument_list|<
name|ClassInstructor
argument_list|>
argument_list|()
decl_stmt|;
name|origInstrs
operator|.
name|addAll
argument_list|(
name|c
operator|.
name|getClassInstructors
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|origInstrs
control|)
block|{
name|c
operator|.
name|removeClassInstructor
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|removeClassInstructor
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|ArrayList
argument_list|<
name|Record
argument_list|>
name|records
init|=
operator|new
name|ArrayList
argument_list|<
name|Record
argument_list|>
argument_list|()
decl_stmt|;
name|records
operator|.
name|addAll
argument_list|(
name|data
operator|.
name|getRecords
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Record
name|r
range|:
name|records
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|IS_FIRST_RECORD_FOR_CLASS
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|r
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|DELETE
operator|.
name|ordinal
argument_list|()
argument_list|,
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|INSTR_NAME
operator|.
name|ordinal
argument_list|()
argument_list|,
literal|""
argument_list|,
name|r
operator|.
name|isEditable
argument_list|(
name|DataColumn
operator|.
name|INSTR_NAME
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
name|r
operator|.
name|isVisible
argument_list|(
name|DataColumn
operator|.
name|INSTR_NAME
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|RESPONSIBILITY
operator|.
name|ordinal
argument_list|()
argument_list|,
name|getDefaultTeachingResponsibilityId
argument_list|()
argument_list|,
name|r
operator|.
name|isEditable
argument_list|(
name|DataColumn
operator|.
name|RESPONSIBILITY
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
name|r
operator|.
name|isVisible
argument_list|(
name|DataColumn
operator|.
name|RESPONSIBILITY
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|PCT_SHARE
operator|.
name|ordinal
argument_list|()
argument_list|,
literal|"100"
argument_list|,
name|r
operator|.
name|isEditable
argument_list|(
name|DataColumn
operator|.
name|PCT_SHARE
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
name|r
operator|.
name|isVisible
argument_list|(
name|DataColumn
operator|.
name|PCT_SHARE
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|CHECK_CONFICTS
operator|.
name|ordinal
argument_list|()
argument_list|,
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|,
name|r
operator|.
name|isEditable
argument_list|(
name|DataColumn
operator|.
name|CHECK_CONFICTS
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
name|r
operator|.
name|isVisible
argument_list|(
name|DataColumn
operator|.
name|CHECK_CONFICTS
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|data
operator|.
name|getRecords
argument_list|()
operator|.
name|remove
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
name|ioc
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|CLASS_INSTR_ASSIGN
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|DELETE
argument_list|,
name|ioc
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|permissionOfferingLockNeeded
operator|.
name|check
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
name|ioc
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|)
condition|)
block|{
name|StudentSectioningQueue
operator|.
name|offeringChanged
argument_list|(
name|hibSession
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
name|ioc
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|ioc
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|String
name|className
init|=
name|ApplicationProperty
operator|.
name|ExternalActionInstrOfferingConfigAssignInstructors
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExternalInstrOfferingConfigAssignInstructorsAction
name|assignAction
init|=
literal|null
decl_stmt|;
try|try
block|{
name|assignAction
operator|=
operator|(
name|ExternalInstrOfferingConfigAssignInstructorsAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
operator|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|info
argument_list|(
literal|"Failed to Send Update to External System:  InstantiationException = "
operator|+
name|className
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|info
argument_list|(
literal|"Failed to Send Update to External System:  IllegalAccessException = "
operator|+
name|className
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|info
argument_list|(
literal|"Failed to Send Update to External System:  IllegalArgumentException = "
operator|+
name|className
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|info
argument_list|(
literal|"Failed to Send Update to External System:  InvocationTargetException = "
operator|+
name|className
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|info
argument_list|(
literal|"Failed to Send Update to External System:  NoSuchMethodException = "
operator|+
name|className
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|info
argument_list|(
literal|"Failed to Send Update to External System:  SecurityException = "
operator|+
name|className
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|info
argument_list|(
literal|"Failed to Send Update to External System:  ClassNotFoundException = "
operator|+
name|className
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|assignAction
operator|!=
literal|null
condition|)
block|{
name|assignAction
operator|.
name|performExternalInstrOfferingConfigAssignInstructorsAction
argument_list|(
name|ioc
argument_list|,
name|InstrOfferingConfigDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

