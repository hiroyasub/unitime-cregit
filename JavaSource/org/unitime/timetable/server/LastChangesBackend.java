begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 - 3.5 (University Timetabling Application)  * Copyright (C) 2012 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|LastChangesInterface
operator|.
name|ChangeLogInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|LastChangesInterface
operator|.
name|LastChangesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|NonUniversityLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ChangeLogDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|LastChangesRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|LastChangesBackend
implements|implements
name|GwtRpcImplementation
argument_list|<
name|LastChangesRequest
argument_list|,
name|GwtRpcResponseList
argument_list|<
name|ChangeLogInterface
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|GwtRpcResponseList
argument_list|<
name|ChangeLogInterface
argument_list|>
name|execute
parameter_list|(
name|LastChangesRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|GwtRpcResponseList
argument_list|<
name|ChangeLogInterface
argument_list|>
name|response
init|=
operator|new
name|GwtRpcResponseList
argument_list|<
name|ChangeLogInterface
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ChangeLog
name|cl
range|:
name|findChangeLog
argument_list|(
name|request
argument_list|)
control|)
block|{
name|ChangeLogInterface
name|log
init|=
operator|new
name|ChangeLogInterface
argument_list|()
decl_stmt|;
if|if
condition|(
name|cl
operator|.
name|getDepartment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|setDepartment
argument_list|(
name|cl
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|setDepartmentId
argument_list|(
name|cl
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cl
operator|.
name|getSubjectArea
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|setSubject
argument_list|(
name|cl
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|setSubjectId
argument_list|(
name|cl
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cl
operator|.
name|getSession
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|setSession
argument_list|(
name|cl
operator|.
name|getSession
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|setSessionId
argument_list|(
name|cl
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|setSessionDate
argument_list|(
name|cl
operator|.
name|getSession
argument_list|()
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|setSessionInitiative
argument_list|(
name|cl
operator|.
name|getSession
argument_list|()
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cl
operator|.
name|getManager
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|setManager
argument_list|(
name|cl
operator|.
name|getManager
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cl
operator|.
name|getTimeStamp
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|setDate
argument_list|(
name|cl
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cl
operator|.
name|getOperation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|setOperation
argument_list|(
name|cl
operator|.
name|getOperation
argument_list|()
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cl
operator|.
name|getObjectTitle
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|setObject
argument_list|(
name|cl
operator|.
name|getObjectTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cl
operator|.
name|getSource
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|setPage
argument_list|(
name|cl
operator|.
name|getSource
argument_list|()
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|setId
argument_list|(
name|cl
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
specifier|private
name|List
argument_list|<
name|ChangeLog
argument_list|>
name|findChangeLog
parameter_list|(
name|LastChangesRequest
name|request
parameter_list|)
block|{
name|String
name|from
init|=
literal|"ChangeLog l"
decl_stmt|;
name|String
name|where
init|=
literal|"l.objectType = :type and l.objectUniqueId = :id"
decl_stmt|;
name|String
name|groupBy
init|=
literal|null
decl_stmt|;
name|String
name|orderBy
init|=
literal|"l.timeStamp desc"
decl_stmt|;
if|if
condition|(
name|Location
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getObjectType
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"multi-session"
argument_list|)
argument_list|)
condition|)
block|{
name|from
operator|=
literal|"ChangeLog l, Location r1, Location r2"
expr_stmt|;
name|where
operator|=
literal|"l.objectType in (:type, :roomType, :locType) and r1.uniqueId = :id and r2.permanentId = r1.permanentId and r2.uniqueId = l.objectUniqueId"
expr_stmt|;
block|}
else|else
block|{
name|where
operator|=
literal|"l.objectType in (:type, :roomType, :locType) and l.objectUniqueId = :id"
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"operation"
argument_list|)
condition|)
block|{
name|where
operator|+=
literal|" and l.operationString = :operation"
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"page"
argument_list|)
condition|)
block|{
name|where
operator|+=
literal|" and l.sourceString = :source"
expr_stmt|;
block|}
name|String
name|query
init|=
literal|"select l from "
operator|+
name|from
operator|+
literal|" where "
operator|+
name|where
operator|+
operator|(
name|groupBy
operator|==
literal|null
condition|?
literal|""
else|:
literal|" group by "
operator|+
name|groupBy
operator|)
operator|+
literal|" order by "
operator|+
name|orderBy
decl_stmt|;
name|Query
name|q
init|=
name|ChangeLogDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"limit"
argument_list|)
condition|)
name|q
operator|.
name|setMaxResults
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"limit"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|q
operator|.
name|setMaxResults
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.changelog.limit"
argument_list|,
literal|"1000"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"operation"
argument_list|)
condition|)
block|{
name|q
operator|.
name|setString
argument_list|(
literal|"operation"
argument_list|,
name|request
operator|.
name|getOption
argument_list|(
literal|"operation"
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"page"
argument_list|)
condition|)
block|{
name|q
operator|.
name|setString
argument_list|(
literal|"source"
argument_list|,
name|request
operator|.
name|getOption
argument_list|(
literal|"page"
argument_list|)
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'_'
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Location
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getObjectType
argument_list|()
argument_list|)
condition|)
block|{
name|q
operator|.
name|setString
argument_list|(
literal|"roomType"
argument_list|,
name|Room
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setString
argument_list|(
literal|"locType"
argument_list|,
name|NonUniversityLocation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|q
operator|.
name|setString
argument_list|(
literal|"type"
argument_list|,
name|request
operator|.
name|getObjectType
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"id"
argument_list|,
name|request
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
block|}
end_class

end_unit

