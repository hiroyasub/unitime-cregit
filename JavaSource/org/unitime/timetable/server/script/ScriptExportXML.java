begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|script
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|DocumentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|dom
operator|.
name|DOMCDATA
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|XMLWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|ExportHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|Exporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ScriptParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ScriptDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_class
annotation|@
name|Service
argument_list|(
literal|"org.unitime.timetable.export.Exporter:script.xml"
argument_list|)
specifier|public
class|class
name|ScriptExportXML
implements|implements
name|Exporter
block|{
annotation|@
name|Override
specifier|public
name|String
name|reference
parameter_list|()
block|{
return|return
literal|"script.xml"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|export
parameter_list|(
name|ExportHelper
name|helper
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|s
init|=
name|helper
operator|.
name|getParameter
argument_list|(
literal|"script"
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No script provided, please set the script parameter."
argument_list|)
throw|;
name|Script
name|script
init|=
name|ScriptDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|script
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Stript "
operator|+
name|s
operator|+
literal|" does not exist."
argument_list|)
throw|;
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|ScriptEdit
argument_list|)
expr_stmt|;
name|helper
operator|.
name|setup
argument_list|(
literal|"text/xml"
argument_list|,
name|script
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'-'
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'-'
argument_list|)
operator|.
name|replace
argument_list|(
literal|':'
argument_list|,
literal|'-'
argument_list|)
operator|+
literal|".xml"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Document
name|document
init|=
name|DocumentHelper
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|Element
name|scriptEl
init|=
name|document
operator|.
name|addElement
argument_list|(
literal|"script"
argument_list|)
decl_stmt|;
name|scriptEl
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|script
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|script
operator|.
name|getPermission
argument_list|()
operator|!=
literal|null
condition|)
name|scriptEl
operator|.
name|addAttribute
argument_list|(
literal|"permission"
argument_list|,
name|script
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|scriptEl
operator|.
name|addAttribute
argument_list|(
literal|"engine"
argument_list|,
name|script
operator|.
name|getEngine
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|script
operator|.
name|getDescription
argument_list|()
operator|!=
literal|null
condition|)
name|scriptEl
operator|.
name|addElement
argument_list|(
literal|"description"
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|DOMCDATA
argument_list|(
name|script
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ScriptParameter
name|parameter
range|:
name|script
operator|.
name|getParameters
argument_list|()
control|)
block|{
name|Element
name|paramEl
init|=
name|scriptEl
operator|.
name|addElement
argument_list|(
literal|"parameter"
argument_list|)
decl_stmt|;
name|paramEl
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|parameter
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|parameter
operator|.
name|getLabel
argument_list|()
operator|!=
literal|null
condition|)
name|paramEl
operator|.
name|addAttribute
argument_list|(
literal|"label"
argument_list|,
name|parameter
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|paramEl
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|parameter
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|parameter
operator|.
name|getDefaultValue
argument_list|()
operator|!=
literal|null
condition|)
name|paramEl
operator|.
name|addAttribute
argument_list|(
literal|"default"
argument_list|,
name|parameter
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|script
operator|.
name|getScript
argument_list|()
operator|!=
literal|null
condition|)
name|scriptEl
operator|.
name|addElement
argument_list|(
literal|"body"
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|DOMCDATA
argument_list|(
name|script
operator|.
name|getScript
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|scriptEl
operator|.
name|addAttribute
argument_list|(
literal|"created"
argument_list|,
operator|new
name|Date
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|OutputStream
name|out
init|=
name|helper
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
operator|new
name|XMLWriter
argument_list|(
name|out
argument_list|,
name|OutputFormat
operator|.
name|createPrettyPrint
argument_list|()
argument_list|)
operator|.
name|write
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

