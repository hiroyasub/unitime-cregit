begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|script
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TaskInterface
operator|.
name|ExecutionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TaskInterface
operator|.
name|GetTaskExecutionLogRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TaskInterface
operator|.
name|TaskExecutionLogInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TaskExecution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TaskExecutionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverServerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|queue
operator|.
name|QueueItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|queue
operator|.
name|QueueMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|reflect
operator|.
name|TypeToken
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|GetTaskExecutionLogRpcRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|GetTaskExecutionLogBackend
implements|implements
name|GwtRpcImplementation
argument_list|<
name|GetTaskExecutionLogRpcRequest
argument_list|,
name|TaskExecutionLogInterface
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|Type
name|TYPE_LOG
init|=
operator|new
name|TypeToken
argument_list|<
name|ArrayList
argument_list|<
name|QueueMessage
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
decl_stmt|;
annotation|@
name|Autowired
name|SolverServerService
name|solverServerService
decl_stmt|;
annotation|@
name|Override
specifier|public
name|TaskExecutionLogInterface
name|execute
parameter_list|(
name|GetTaskExecutionLogRpcRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|TaskDetail
argument_list|)
expr_stmt|;
name|TaskExecution
name|e
init|=
name|TaskExecutionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getTaskExecutionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|QueueMessage
argument_list|>
name|log
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getExecutionStatus
argument_list|()
operator|==
name|ExecutionStatus
operator|.
name|QUEUED
operator|.
name|ordinal
argument_list|()
operator|||
name|e
operator|.
name|getExecutionStatus
argument_list|()
operator|==
name|ExecutionStatus
operator|.
name|RUNNING
operator|.
name|ordinal
argument_list|()
condition|)
block|{
name|QueueItem
name|item
init|=
name|solverServerService
operator|.
name|getQueueProcessor
argument_list|()
operator|.
name|getByExecutionId
argument_list|(
name|request
operator|.
name|getTaskExecutionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|!=
literal|null
condition|)
name|log
operator|=
name|item
operator|.
name|getLog
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|.
name|getLogFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|log
operator|=
name|TaskExecutionItem
operator|.
name|createGson
argument_list|()
operator|.
name|fromJson
argument_list|(
name|e
operator|.
name|getLogFile
argument_list|()
argument_list|,
name|TYPE_LOG
argument_list|)
expr_stmt|;
block|}
name|TaskExecutionLogInterface
name|ret
init|=
operator|new
name|TaskExecutionLogInterface
argument_list|()
decl_stmt|;
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
block|{
name|String
name|html
init|=
literal|""
decl_stmt|;
for|for
control|(
name|QueueMessage
name|m
range|:
name|log
control|)
block|{
if|if
condition|(
operator|!
name|html
operator|.
name|isEmpty
argument_list|()
condition|)
name|html
operator|+=
literal|"<br>"
expr_stmt|;
name|html
operator|+=
name|m
operator|.
name|toHTML
argument_list|()
expr_stmt|;
block|}
name|ret
operator|.
name|setLog
argument_list|(
name|html
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

