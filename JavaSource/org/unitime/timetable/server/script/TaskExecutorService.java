begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|script
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|DisposableBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|InitializingBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|DependsOn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TaskInterface
operator|.
name|ExecutionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TaskExecution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|PeriodicTaskDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|evaluation
operator|.
name|PermissionCheck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverServerService
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"periodicTaskExecutor"
argument_list|)
annotation|@
name|DependsOn
argument_list|(
block|{
literal|"startupService"
block|,
literal|"solverServerService"
block|}
argument_list|)
specifier|public
class|class
name|TaskExecutorService
implements|implements
name|InitializingBean
implements|,
name|DisposableBean
block|{
specifier|private
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|TaskExecutorService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|TaskExecutor
name|iExecutor
init|=
literal|null
decl_stmt|;
annotation|@
name|Autowired
name|SolverServerService
name|solverServerService
decl_stmt|;
annotation|@
name|Autowired
name|PermissionCheck
name|unitimePermissionCheck
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|destroy
parameter_list|()
throws|throws
name|Exception
block|{
name|iExecutor
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterPropertiesSet
parameter_list|()
throws|throws
name|Exception
block|{
name|iExecutor
operator|=
operator|new
name|TaskExecutor
argument_list|()
expr_stmt|;
name|iExecutor
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|checkForQueuedTasks
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|TaskExecutionItem
argument_list|>
name|items
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskExecutionItem
argument_list|>
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|PeriodicTaskDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|TaskExecution
argument_list|>
name|executions
init|=
operator|(
name|List
argument_list|<
name|TaskExecution
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from TaskExecution e where e.executionStatus = :status and e.scheduledDate<= :now"
argument_list|)
operator|.
name|setTimestamp
argument_list|(
literal|"now"
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"status"
argument_list|,
name|ExecutionStatus
operator|.
name|QUEUED
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|TaskExecution
name|execution
range|:
name|executions
control|)
block|{
if|if
condition|(
name|solverServerService
operator|.
name|getQueueProcessor
argument_list|()
operator|.
name|getByExecutionId
argument_list|(
name|execution
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
continue|continue;
try|try
block|{
name|TaskExecutionItem
name|item
init|=
operator|new
name|TaskExecutionItem
argument_list|(
name|execution
argument_list|,
name|unitimePermissionCheck
argument_list|)
decl_stmt|;
name|item
operator|.
name|setTaskExecutionId
argument_list|(
name|execution
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|items
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|execution
operator|.
name|setExecutionStatus
argument_list|(
name|ExecutionStatus
operator|.
name|QUEUED
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|execution
operator|.
name|setQueuedDate
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|execution
operator|.
name|setExecutionStatus
argument_list|(
name|ExecutionStatus
operator|.
name|FAILED
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|execution
operator|.
name|setStatusMessageCheckLength
argument_list|(
literal|"Failed to execute: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|warn
argument_list|(
literal|"Failed to execute "
operator|+
name|execution
operator|.
name|getTask
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|update
argument_list|(
name|execution
argument_list|)
expr_stmt|;
block|}
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|_RootDAO
operator|.
name|closeCurrentThreadSessions
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|TaskExecutionItem
name|item
range|:
name|items
control|)
name|solverServerService
operator|.
name|getQueueProcessor
argument_list|()
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkForTasks
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|TaskExecutionItem
argument_list|>
name|items
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskExecutionItem
argument_list|>
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|PeriodicTaskDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|TaskExecution
argument_list|>
name|executions
init|=
operator|(
name|List
argument_list|<
name|TaskExecution
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from TaskExecution e where e.executionStatus = :status and e.scheduledDate<= :now"
argument_list|)
operator|.
name|setTimestamp
argument_list|(
literal|"now"
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"status"
argument_list|,
name|ExecutionStatus
operator|.
name|CREATED
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|TaskExecution
name|execution
range|:
name|executions
control|)
block|{
try|try
block|{
name|TaskExecutionItem
name|item
init|=
operator|new
name|TaskExecutionItem
argument_list|(
name|execution
argument_list|,
name|unitimePermissionCheck
argument_list|)
decl_stmt|;
name|item
operator|.
name|setTaskExecutionId
argument_list|(
name|execution
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|items
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|execution
operator|.
name|setExecutionStatus
argument_list|(
name|ExecutionStatus
operator|.
name|QUEUED
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|execution
operator|.
name|setQueuedDate
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|execution
operator|.
name|setExecutionStatus
argument_list|(
name|ExecutionStatus
operator|.
name|FAILED
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|execution
operator|.
name|setStatusMessageCheckLength
argument_list|(
literal|"Failed to execute: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|warn
argument_list|(
literal|"Failed to execute "
operator|+
name|execution
operator|.
name|getTask
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|update
argument_list|(
name|execution
argument_list|)
expr_stmt|;
block|}
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|_RootDAO
operator|.
name|closeCurrentThreadSessions
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|TaskExecutionItem
name|item
range|:
name|items
control|)
name|solverServerService
operator|.
name|getQueueProcessor
argument_list|()
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
specifier|public
class|class
name|TaskExecutor
extends|extends
name|Thread
block|{
specifier|private
name|int
name|iSleepTimeInMinutes
decl_stmt|;
specifier|private
name|boolean
name|iActive
init|=
literal|true
decl_stmt|;
specifier|public
name|TaskExecutor
parameter_list|()
block|{
name|setName
argument_list|(
literal|"TaskExecutorService"
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iSleepTimeInMinutes
operator|=
name|ApplicationProperty
operator|.
name|TaskSchedulerCheckIntervalInMinutes
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|iActive
operator|&&
name|solverServerService
operator|.
name|getLocalServer
argument_list|()
operator|!=
literal|null
operator|&&
name|solverServerService
operator|.
name|getLocalServer
argument_list|()
operator|.
name|isActive
argument_list|()
operator|&&
name|solverServerService
operator|.
name|getLocalServer
argument_list|()
operator|.
name|isLocalCoordinator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Task executor service started."
argument_list|)
expr_stmt|;
name|long
name|iteration
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iActive
condition|)
block|{
try|try
block|{
name|sleep
argument_list|(
name|iSleepTimeInMinutes
operator|*
literal|60000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
try|try
block|{
if|if
condition|(
name|isEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|iteration
operator|==
literal|0
condition|)
name|checkForQueuedTasks
argument_list|()
expr_stmt|;
else|else
name|checkForTasks
argument_list|()
expr_stmt|;
name|iteration
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to check for tasks: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"Task executor service stopped."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Task executor service failed, "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|interrupt
parameter_list|()
block|{
name|iActive
operator|=
literal|false
expr_stmt|;
name|super
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
block|}
end_class

end_unit

