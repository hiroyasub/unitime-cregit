begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|courses
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|engine
operator|.
name|spi
operator|.
name|SessionImplementor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|CourseMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseOfferingInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseOfferingInterface
operator|.
name|CoordinatorInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseOfferingInterface
operator|.
name|UpdateCourseOfferingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalCourseOfferingEditAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalInstructionalOfferingAddAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|FixedCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|LastLikeCourseDemand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|OfferingCoordinator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|OverrideType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TeachingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TeachingResponsibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|VariableFixedCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|VariableRangeCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|OfferingConsentTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|OverrideTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SubjectAreaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TeachingResponsibilityDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|permissions
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|InstrOfferingPermIdGenerator
import|;
end_import

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|UpdateCourseOfferingRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|UpdateCourseOfferingBackend
implements|implements
name|GwtRpcImplementation
argument_list|<
name|UpdateCourseOfferingRequest
argument_list|,
name|CourseOfferingInterface
argument_list|>
block|{
annotation|@
name|Autowired
name|Permission
argument_list|<
name|InstructionalOffering
argument_list|>
name|permissionOfferingLockNeeded
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|CourseMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|CourseMessages
operator|.
name|class
argument_list|)
decl_stmt|;
name|Logger
name|logger
init|=
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"UpdateCourseOfferingBackend"
argument_list|)
decl_stmt|;
name|boolean
name|limitedEdit
init|=
literal|false
decl_stmt|,
name|updateNote
init|=
literal|false
decl_stmt|,
name|updateCoordinators
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|CourseOfferingInterface
name|execute
parameter_list|(
name|UpdateCourseOfferingRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|CourseOffering
name|courseOffering
decl_stmt|;
name|Boolean
name|hasErrors
init|=
literal|false
decl_stmt|;
name|OverrideType
name|prohibitedOverride
init|=
name|OverrideType
operator|.
name|findByReference
argument_list|(
name|ApplicationProperty
operator|.
name|OfferingWaitListProhibitedOverride
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|hasErrors
operator|=
name|isWaitlistingProhibited
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
argument_list|,
name|prohibitedOverride
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasErrors
condition|)
block|{
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|setErrorMessage
argument_list|(
name|MSG
operator|.
name|errorWaitListingOverrideMustBeProhibited
argument_list|(
name|prohibitedOverride
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|request
operator|.
name|getCourseOffering
argument_list|()
return|;
block|}
switch|switch
condition|(
name|request
operator|.
name|getAction
argument_list|()
condition|)
block|{
case|case
name|CREATE
case|:
name|context
operator|.
name|checkPermission
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getSubjectAreaId
argument_list|()
argument_list|,
literal|"SubjectArea"
argument_list|,
name|Right
operator|.
name|AddCourseOffering
argument_list|)
expr_stmt|;
name|courseOffering
operator|=
name|save
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|setInstrOfferingId
argument_list|(
name|courseOffering
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|UPDATE
case|:
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
literal|"CourseOffering"
argument_list|,
name|Right
operator|.
name|EditCourseOfferingNote
argument_list|)
condition|)
block|{
name|updateNote
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
literal|"CourseOffering"
argument_list|,
name|Right
operator|.
name|EditCourseOfferingCoordinators
argument_list|)
condition|)
block|{
name|updateCoordinators
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|updateNote
operator|||
name|updateCoordinators
condition|)
block|{
name|limitedEdit
operator|=
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
literal|"CourseOffering"
argument_list|,
name|Right
operator|.
name|EditCourseOffering
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|checkPermission
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
literal|"CourseOffering"
argument_list|,
name|Right
operator|.
name|EditCourseOffering
argument_list|)
expr_stmt|;
block|}
name|courseOffering
operator|=
name|update
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|setInstrOfferingId
argument_list|(
name|courseOffering
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|request
operator|.
name|getCourseOffering
argument_list|()
return|;
block|}
specifier|private
name|Boolean
name|isWaitlistingProhibited
parameter_list|(
name|CourseOfferingInterface
name|courseOfferingInterface
parameter_list|,
name|OverrideType
name|prohibitedOverride
parameter_list|)
block|{
if|if
condition|(
name|prohibitedOverride
operator|!=
literal|null
operator|&&
operator|(
name|courseOfferingInterface
operator|.
name|getWaitList
argument_list|()
operator|==
literal|null
condition|?
name|ApplicationProperty
operator|.
name|OfferingWaitListDefault
operator|.
name|isTrue
argument_list|()
else|:
name|courseOfferingInterface
operator|.
name|getWaitList
argument_list|()
operator|==
literal|true
operator|)
operator|&&
operator|!
name|courseOfferingInterface
operator|.
name|getCourseOverrides
argument_list|()
operator|.
name|contains
argument_list|(
name|prohibitedOverride
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|protected
name|CourseOffering
name|update
parameter_list|(
name|CourseOfferingInterface
name|courseOfferingInterface
parameter_list|,
name|SessionContext
name|context
parameter_list|)
throws|throws
name|GwtRpcException
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
name|String
name|title
init|=
name|courseOfferingInterface
operator|.
name|getTitle
argument_list|()
decl_stmt|;
name|String
name|note
init|=
name|courseOfferingInterface
operator|.
name|getScheduleBookNote
argument_list|()
decl_stmt|;
name|String
name|crsNbr
init|=
name|courseOfferingInterface
operator|.
name|getCourseNbr
argument_list|()
decl_stmt|;
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|CourseOffering
name|courseOffering
init|=
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|courseOfferingInterface
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|InstructionalOffering
name|io
init|=
name|courseOffering
operator|.
name|getInstructionalOffering
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|limitedEdit
operator|||
name|updateNote
condition|)
block|{
name|courseOffering
operator|.
name|setScheduleBookNote
argument_list|(
name|note
argument_list|)
expr_stmt|;
block|}
name|courseOffering
operator|.
name|getDisabledOverrides
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|courseOfferingInterface
operator|.
name|getCourseOverrides
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|override
range|:
name|courseOfferingInterface
operator|.
name|getCourseOverrides
argument_list|()
control|)
block|{
name|courseOffering
operator|.
name|getDisabledOverrides
argument_list|()
operator|.
name|add
argument_list|(
name|OverrideTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|override
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|courseOffering
operator|.
name|isIsControl
argument_list|()
condition|)
block|{
if|if
condition|(
name|courseOfferingInterface
operator|.
name|getWaitList
argument_list|()
operator|==
literal|null
condition|)
name|io
operator|.
name|setWaitlist
argument_list|(
literal|null
argument_list|)
expr_stmt|;
else|else
name|io
operator|.
name|setWaitlist
argument_list|(
name|courseOfferingInterface
operator|.
name|getWaitList
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limitedEdit
condition|)
name|hibSession
operator|.
name|update
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|!
name|limitedEdit
operator|||
name|updateCoordinators
operator|)
operator|&&
name|courseOffering
operator|.
name|isIsControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|boolean
name|assignTeachingRequest
init|=
name|Department
operator|.
name|isInstructorSchedulingCommitted
argument_list|(
name|courseOffering
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|io
operator|.
name|getOfferingCoordinators
argument_list|()
operator|==
literal|null
condition|)
name|io
operator|.
name|setOfferingCoordinators
argument_list|(
operator|new
name|HashSet
argument_list|<
name|OfferingCoordinator
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OfferingCoordinator
argument_list|>
name|coordinators
init|=
operator|new
name|ArrayList
argument_list|<
name|OfferingCoordinator
argument_list|>
argument_list|(
name|io
operator|.
name|getOfferingCoordinators
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|courseOfferingInterface
operator|.
name|getSendCoordinators
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CoordinatorInterface
name|coordinatorObject
init|=
name|courseOfferingInterface
operator|.
name|getSendCoordinators
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|instructorId
init|=
name|coordinatorObject
operator|.
name|getInstructorId
argument_list|()
decl_stmt|;
name|String
name|responsibilityId
init|=
name|coordinatorObject
operator|.
name|getResponsibilityId
argument_list|()
decl_stmt|;
name|String
name|percShare
init|=
name|coordinatorObject
operator|.
name|getPercShare
argument_list|()
decl_stmt|;
name|DepartmentalInstructor
name|instructor
init|=
operator|new
name|DepartmentalInstructorDAO
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|instructorId
argument_list|)
argument_list|)
decl_stmt|;
name|TeachingResponsibility
name|responsibility
init|=
operator|(
name|Constants
operator|.
name|BLANK_OPTION_VALUE
operator|.
name|equals
argument_list|(
name|responsibilityId
argument_list|)
operator|||
name|Preference
operator|.
name|BLANK_PREF_VALUE
operator|.
name|equals
argument_list|(
name|responsibilityId
argument_list|)
condition|?
literal|null
else|:
name|TeachingResponsibilityDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|responsibilityId
argument_list|)
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|instructor
operator|!=
literal|null
condition|)
block|{
name|OfferingCoordinator
name|coordinator
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|OfferingCoordinator
argument_list|>
name|j
init|=
name|coordinators
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|OfferingCoordinator
name|c
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|instructor
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getInstructor
argument_list|()
argument_list|)
condition|)
block|{
name|coordinator
operator|=
name|c
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|coordinator
operator|==
literal|null
condition|)
block|{
name|coordinator
operator|=
operator|new
name|OfferingCoordinator
argument_list|()
expr_stmt|;
name|coordinator
operator|.
name|setInstructor
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|coordinator
operator|.
name|setOffering
argument_list|(
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignTeachingRequest
condition|)
block|{
for|for
control|(
name|TeachingRequest
name|tr
range|:
name|io
operator|.
name|getTeachingRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|tr
operator|.
name|getAssignCoordinator
argument_list|()
operator|&&
name|tr
operator|.
name|getAssignedInstructors
argument_list|()
operator|.
name|contains
argument_list|(
name|instructor
argument_list|)
condition|)
block|{
name|coordinator
operator|.
name|setTeachingRequest
argument_list|(
name|tr
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
name|coordinator
operator|.
name|setResponsibility
argument_list|(
name|responsibility
argument_list|)
expr_stmt|;
try|try
block|{
name|coordinator
operator|.
name|setPercentShare
argument_list|(
name|percShare
operator|==
literal|null
condition|?
literal|0
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|percShare
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|coordinator
operator|.
name|setPercentShare
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|io
operator|.
name|getOfferingCoordinators
argument_list|()
operator|.
name|add
argument_list|(
name|coordinator
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|getOfferingCoordinators
argument_list|()
operator|.
name|add
argument_list|(
name|coordinator
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|coordinator
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|OfferingCoordinator
name|coordinator
range|:
name|coordinators
control|)
block|{
name|coordinator
operator|.
name|getInstructor
argument_list|()
operator|.
name|getOfferingCoordinators
argument_list|()
operator|.
name|remove
argument_list|(
name|coordinator
argument_list|)
expr_stmt|;
name|io
operator|.
name|getOfferingCoordinators
argument_list|()
operator|.
name|remove
argument_list|(
name|coordinator
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|coordinator
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|coursesFundingDepartmentsEnabled
init|=
name|ApplicationProperty
operator|.
name|CoursesFundingDepartmentsEnabled
operator|.
name|isTrue
argument_list|()
decl_stmt|;
if|if
condition|(
name|coursesFundingDepartmentsEnabled
condition|)
block|{
if|if
condition|(
name|courseOfferingInterface
operator|.
name|getFundingDepartmentId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|courseOffering
operator|.
name|setFundingDept
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Department
name|dept
init|=
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|courseOfferingInterface
operator|.
name|getFundingDepartmentId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|dept
operator|.
name|equals
argument_list|(
name|courseOffering
operator|.
name|getEffectiveFundingDept
argument_list|()
argument_list|)
condition|)
block|{
name|courseOffering
operator|.
name|setFundingDept
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|courseOffering
operator|.
name|setFundingDept
argument_list|(
name|dept
operator|==
literal|null
condition|?
literal|null
else|:
name|dept
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|limitedEdit
condition|)
name|hibSession
operator|.
name|update
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|limitedEdit
condition|)
block|{
if|if
condition|(
name|courseOffering
operator|.
name|getCourseNbr
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|courseOffering
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|equals
argument_list|(
name|crsNbr
argument_list|)
operator|&&
name|courseOffering
operator|.
name|getPermId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LastLikeCourseDemand
name|llcd
init|=
literal|null
decl_stmt|;
name|String
name|permId
init|=
name|InstrOfferingPermIdGenerator
operator|.
name|getGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|(
name|SessionImplementor
operator|)
operator|new
name|CourseOfferingDAO
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|,
name|courseOffering
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|courseOffering
operator|.
name|getCourseOfferingDemands
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|llcd
operator|=
operator|(
name|LastLikeCourseDemand
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|llcd
operator|.
name|getCoursePermId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|llcd
operator|.
name|setCoursePermId
argument_list|(
name|permId
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|llcd
argument_list|)
expr_stmt|;
block|}
block|}
name|courseOffering
operator|.
name|setPermId
argument_list|(
name|permId
argument_list|)
expr_stmt|;
block|}
name|courseOffering
operator|.
name|setCourseNbr
argument_list|(
name|crsNbr
argument_list|)
expr_stmt|;
name|courseOffering
operator|.
name|setTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
if|if
condition|(
name|courseOfferingInterface
operator|.
name|getDemandOfferingId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|courseOffering
operator|.
name|setDemandOffering
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CourseOffering
name|dco
init|=
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|courseOfferingInterface
operator|.
name|getDemandOfferingId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|courseOffering
operator|.
name|setDemandOffering
argument_list|(
name|dco
operator|==
literal|null
condition|?
literal|null
else|:
name|dco
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|allowAlternativeCourseOfferings
init|=
name|ApplicationProperty
operator|.
name|StudentSchedulingAlternativeCourse
operator|.
name|isTrue
argument_list|()
decl_stmt|;
if|if
condition|(
name|allowAlternativeCourseOfferings
condition|)
block|{
if|if
condition|(
name|courseOfferingInterface
operator|.
name|getAlternativeCourseOfferingId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|courseOffering
operator|.
name|setAlternativeOffering
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CourseOffering
name|dco
init|=
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|courseOfferingInterface
operator|.
name|getAlternativeCourseOfferingId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|courseOffering
operator|.
name|setAlternativeOffering
argument_list|(
name|dco
operator|==
literal|null
condition|?
literal|null
else|:
name|dco
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|courseOfferingInterface
operator|.
name|getCourseTypeId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|courseOffering
operator|.
name|setCourseType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CourseType
name|courseType
init|=
name|CourseTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|courseOfferingInterface
operator|.
name|getCourseTypeId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|courseOffering
operator|.
name|setCourseType
argument_list|(
name|courseType
operator|==
literal|null
condition|?
literal|null
else|:
name|courseType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|courseOfferingInterface
operator|.
name|getConsent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|courseOffering
operator|.
name|setConsentType
argument_list|(
name|OfferingConsentTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|courseOfferingInterface
operator|.
name|getConsent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Update credit
if|if
condition|(
name|courseOfferingInterface
operator|.
name|getCreditFormat
argument_list|()
operator|==
literal|null
operator|||
name|courseOfferingInterface
operator|.
name|getCreditFormat
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|courseOfferingInterface
operator|.
name|getCreditFormat
argument_list|()
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|BLANK_OPTION_VALUE
argument_list|)
condition|)
block|{
name|CourseCreditUnitConfig
name|origConfig
init|=
name|courseOffering
operator|.
name|getCredit
argument_list|()
decl_stmt|;
if|if
condition|(
name|origConfig
operator|!=
literal|null
condition|)
block|{
name|courseOffering
operator|.
name|setCredit
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|origConfig
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|courseOffering
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|CourseCreditUnitConfig
name|ccuc
init|=
name|courseOffering
operator|.
name|getCredit
argument_list|()
decl_stmt|;
if|if
condition|(
name|ccuc
operator|.
name|getCreditFormat
argument_list|()
operator|.
name|equals
argument_list|(
name|courseOfferingInterface
operator|.
name|getCreditFormat
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|ccuc
operator|.
name|getCreditType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|courseOfferingInterface
operator|.
name|getCreditType
argument_list|()
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ccuc
operator|.
name|getCreditUnitType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|courseOfferingInterface
operator|.
name|getCreditUnitType
argument_list|()
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|ccuc
operator|instanceof
name|FixedCreditUnitConfig
condition|)
block|{
name|FixedCreditUnitConfig
name|fcuc
init|=
operator|(
name|FixedCreditUnitConfig
operator|)
name|ccuc
decl_stmt|;
if|if
condition|(
operator|!
name|fcuc
operator|.
name|getFixedUnits
argument_list|()
operator|.
name|equals
argument_list|(
name|courseOfferingInterface
operator|.
name|getUnits
argument_list|()
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|ccuc
operator|instanceof
name|VariableFixedCreditUnitConfig
condition|)
block|{
name|VariableFixedCreditUnitConfig
name|vfcuc
init|=
operator|(
name|VariableFixedCreditUnitConfig
operator|)
name|ccuc
decl_stmt|;
if|if
condition|(
operator|!
name|vfcuc
operator|.
name|getMinUnits
argument_list|()
operator|.
name|equals
argument_list|(
name|courseOfferingInterface
operator|.
name|getUnits
argument_list|()
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|vfcuc
operator|.
name|getMaxUnits
argument_list|()
operator|.
name|equals
argument_list|(
name|courseOfferingInterface
operator|.
name|getMaxUnits
argument_list|()
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|vfcuc
operator|instanceof
name|VariableRangeCreditUnitConfig
condition|)
block|{
name|VariableRangeCreditUnitConfig
name|vrcuc
init|=
operator|(
name|VariableRangeCreditUnitConfig
operator|)
name|vfcuc
decl_stmt|;
if|if
condition|(
name|vrcuc
operator|.
name|isFractionalIncrementsAllowed
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|vrcuc
operator|.
name|isFractionalIncrementsAllowed
argument_list|()
operator|.
name|equals
argument_list|(
name|courseOfferingInterface
operator|.
name|getFractionalIncrementsAllowed
argument_list|()
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|CourseCreditUnitConfig
name|origConfig
init|=
name|courseOffering
operator|.
name|getCredit
argument_list|()
decl_stmt|;
name|courseOffering
operator|.
name|setCredit
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|origConfig
argument_list|)
expr_stmt|;
name|courseOffering
operator|.
name|setCredit
argument_list|(
name|CourseCreditUnitConfig
operator|.
name|createCreditUnitConfigOfFormat
argument_list|(
name|courseOfferingInterface
operator|.
name|getCreditFormat
argument_list|()
argument_list|,
name|courseOfferingInterface
operator|.
name|getCreditType
argument_list|()
argument_list|,
name|courseOfferingInterface
operator|.
name|getCreditUnitType
argument_list|()
argument_list|,
name|courseOfferingInterface
operator|.
name|getUnits
argument_list|()
argument_list|,
name|courseOfferingInterface
operator|.
name|getMaxUnits
argument_list|()
argument_list|,
name|courseOfferingInterface
operator|.
name|getFractionalIncrementsAllowed
argument_list|()
argument_list|,
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|courseOffering
operator|.
name|getCredit
argument_list|()
operator|.
name|setOwner
argument_list|(
name|courseOffering
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|CourseCreditUnitConfig
name|origConfig
init|=
name|courseOffering
operator|.
name|getCredit
argument_list|()
decl_stmt|;
name|courseOffering
operator|.
name|setCredit
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|origConfig
argument_list|)
expr_stmt|;
name|courseOffering
operator|.
name|setCredit
argument_list|(
name|CourseCreditUnitConfig
operator|.
name|createCreditUnitConfigOfFormat
argument_list|(
name|courseOfferingInterface
operator|.
name|getCreditFormat
argument_list|()
argument_list|,
name|courseOfferingInterface
operator|.
name|getCreditType
argument_list|()
argument_list|,
name|courseOfferingInterface
operator|.
name|getCreditUnitType
argument_list|()
argument_list|,
name|courseOfferingInterface
operator|.
name|getUnits
argument_list|()
argument_list|,
name|courseOfferingInterface
operator|.
name|getMaxUnits
argument_list|()
argument_list|,
name|courseOfferingInterface
operator|.
name|getFractionalIncrementsAllowed
argument_list|()
argument_list|,
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|courseOffering
operator|.
name|getCredit
argument_list|()
operator|.
name|setOwner
argument_list|(
name|courseOffering
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|courseOffering
operator|.
name|setCredit
argument_list|(
name|CourseCreditUnitConfig
operator|.
name|createCreditUnitConfigOfFormat
argument_list|(
name|courseOfferingInterface
operator|.
name|getCreditFormat
argument_list|()
argument_list|,
name|courseOfferingInterface
operator|.
name|getCreditType
argument_list|()
argument_list|,
name|courseOfferingInterface
operator|.
name|getCreditUnitType
argument_list|()
argument_list|,
name|courseOfferingInterface
operator|.
name|getUnits
argument_list|()
argument_list|,
name|courseOfferingInterface
operator|.
name|getMaxUnits
argument_list|()
argument_list|,
name|courseOfferingInterface
operator|.
name|getFractionalIncrementsAllowed
argument_list|()
argument_list|,
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|courseOffering
operator|.
name|getCredit
argument_list|()
operator|.
name|setOwner
argument_list|(
name|courseOffering
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|courseOffering
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|courseOffering
operator|.
name|getCredit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|courseOffering
operator|.
name|isIsControl
argument_list|()
condition|)
block|{
name|io
operator|.
name|setByReservationOnly
argument_list|(
name|courseOfferingInterface
operator|.
name|getByReservationOnly
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|io
operator|.
name|setLastWeekToEnroll
argument_list|(
name|courseOfferingInterface
operator|.
name|getLastWeekToEnroll
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|io
operator|.
name|setLastWeekToEnroll
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|io
operator|.
name|setLastWeekToChange
argument_list|(
name|courseOfferingInterface
operator|.
name|getLastWeekToChange
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|io
operator|.
name|setLastWeekToChange
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|io
operator|.
name|setLastWeekToDrop
argument_list|(
name|courseOfferingInterface
operator|.
name|getLastWeekToDrop
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|io
operator|.
name|setLastWeekToDrop
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|io
operator|.
name|setNotes
argument_list|(
name|courseOfferingInterface
operator|.
name|getNotes
argument_list|()
operator|==
literal|null
operator|||
name|courseOfferingInterface
operator|.
name|getNotes
argument_list|()
operator|.
name|length
argument_list|()
operator|<=
literal|2000
condition|?
name|courseOfferingInterface
operator|.
name|getNotes
argument_list|()
else|:
name|courseOfferingInterface
operator|.
name|getNotes
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ApplicationProperty
operator|.
name|CourseOfferingEditExternalIds
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|courseOffering
operator|.
name|setExternalUniqueId
argument_list|(
name|courseOfferingInterface
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
operator|||
name|courseOfferingInterface
operator|.
name|getExternalId
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|courseOfferingInterface
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|courseOffering
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
name|courseOffering
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|COURSE_OFFERING_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|,
name|courseOffering
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|courseOffering
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limitedEdit
operator|&&
name|permissionOfferingLockNeeded
operator|.
name|check
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
name|io
argument_list|)
condition|)
block|{
name|StudentSectioningQueue
operator|.
name|offeringChanged
argument_list|(
name|hibSession
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
name|io
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|io
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|courseOffering
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|String
name|className
init|=
name|ApplicationProperty
operator|.
name|ExternalActionCourseOfferingEdit
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|io
operator|==
literal|null
condition|)
block|{
name|io
operator|=
name|courseOffering
operator|.
name|getInstructionalOffering
argument_list|()
expr_stmt|;
block|}
name|ExternalCourseOfferingEditAction
name|editAction
init|=
operator|(
name|ExternalCourseOfferingEditAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|editAction
operator|.
name|performExternalCourseOfferingEditAction
argument_list|(
name|io
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
return|return
name|courseOffering
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
block|}
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|CourseOffering
name|save
parameter_list|(
name|CourseOfferingInterface
name|courseOfferingInterface
parameter_list|,
name|SessionContext
name|context
parameter_list|)
throws|throws
name|GwtRpcException
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
name|InstructionalOffering
name|io
init|=
operator|new
name|InstructionalOffering
argument_list|()
decl_stmt|;
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|CourseOffering
name|courseOffering
init|=
operator|new
name|CourseOffering
argument_list|()
decl_stmt|;
name|courseOffering
operator|.
name|setCourseNbr
argument_list|(
name|courseOfferingInterface
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|courseOffering
operator|.
name|setTitle
argument_list|(
name|courseOfferingInterface
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|courseOffering
operator|.
name|setScheduleBookNote
argument_list|(
name|courseOfferingInterface
operator|.
name|getScheduleBookNote
argument_list|()
argument_list|)
expr_stmt|;
name|SubjectArea
name|subjArea
init|=
name|SubjectAreaDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|courseOfferingInterface
operator|.
name|getSubjectAreaId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|courseOffering
operator|.
name|setSubjectArea
argument_list|(
name|subjArea
argument_list|)
expr_stmt|;
name|courseOffering
operator|.
name|setSubjectAreaAbbv
argument_list|(
name|subjArea
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|courseOffering
operator|.
name|setProjectedDemand
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|courseOffering
operator|.
name|setDemand
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|courseOffering
operator|.
name|setNbrExpectedStudents
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|courseOffering
operator|.
name|setIsControl
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|courseOffering
operator|.
name|setPermId
argument_list|(
name|InstrOfferingPermIdGenerator
operator|.
name|getGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|(
name|SessionImplementor
operator|)
operator|new
name|CourseOfferingDAO
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|,
name|courseOffering
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|subjArea
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|add
argument_list|(
name|courseOffering
argument_list|)
expr_stmt|;
name|io
operator|.
name|setNotOffered
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|io
operator|.
name|setSession
argument_list|(
name|subjArea
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|io
operator|.
name|generateInstrOfferingPermId
argument_list|()
expr_stmt|;
name|io
operator|.
name|setLimit
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|io
operator|.
name|setWaitlist
argument_list|(
name|courseOfferingInterface
operator|.
name|getWaitList
argument_list|()
argument_list|)
expr_stmt|;
name|courseOffering
operator|.
name|setInstructionalOffering
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|io
operator|.
name|addTocourseOfferings
argument_list|(
name|courseOffering
argument_list|)
expr_stmt|;
name|courseOffering
operator|.
name|setDisabledOverrides
argument_list|(
operator|new
name|HashSet
argument_list|<
name|OverrideType
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|courseOfferingInterface
operator|.
name|getCourseOverrides
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|override
range|:
name|courseOfferingInterface
operator|.
name|getCourseOverrides
argument_list|()
control|)
block|{
name|courseOffering
operator|.
name|getDisabledOverrides
argument_list|()
operator|.
name|add
argument_list|(
name|OverrideTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|override
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|io
operator|.
name|setByReservationOnly
argument_list|(
name|courseOfferingInterface
operator|.
name|getByReservationOnly
argument_list|()
argument_list|)
expr_stmt|;
name|io
operator|.
name|setLastWeekToChange
argument_list|(
name|courseOfferingInterface
operator|.
name|getLastWeekToChange
argument_list|()
argument_list|)
expr_stmt|;
name|io
operator|.
name|setLastWeekToEnroll
argument_list|(
name|courseOfferingInterface
operator|.
name|getLastWeekToEnroll
argument_list|()
argument_list|)
expr_stmt|;
name|io
operator|.
name|setLastWeekToDrop
argument_list|(
name|courseOfferingInterface
operator|.
name|getLastWeekToDrop
argument_list|()
argument_list|)
expr_stmt|;
name|io
operator|.
name|setNotes
argument_list|(
name|courseOfferingInterface
operator|.
name|getNotes
argument_list|()
operator|==
literal|null
operator|||
name|courseOfferingInterface
operator|.
name|getNotes
argument_list|()
operator|.
name|length
argument_list|()
operator|<=
literal|2000
condition|?
name|courseOfferingInterface
operator|.
name|getNotes
argument_list|()
else|:
name|courseOfferingInterface
operator|.
name|getNotes
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|io
operator|.
name|setOfferingCoordinators
argument_list|(
operator|new
name|HashSet
argument_list|<
name|OfferingCoordinator
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|courseOfferingInterface
operator|.
name|getSendCoordinators
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CoordinatorInterface
name|coordinatorObject
init|=
name|courseOfferingInterface
operator|.
name|getSendCoordinators
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|instructorId
init|=
name|coordinatorObject
operator|.
name|getInstructorId
argument_list|()
decl_stmt|;
name|String
name|responsibilityId
init|=
name|coordinatorObject
operator|.
name|getResponsibilityId
argument_list|()
decl_stmt|;
name|String
name|percShare
init|=
name|coordinatorObject
operator|.
name|getPercShare
argument_list|()
decl_stmt|;
name|DepartmentalInstructor
name|instructor
init|=
operator|new
name|DepartmentalInstructorDAO
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|instructorId
argument_list|)
argument_list|)
decl_stmt|;
name|TeachingResponsibility
name|responsibility
init|=
operator|(
name|Constants
operator|.
name|BLANK_OPTION_VALUE
operator|.
name|equals
argument_list|(
name|responsibilityId
argument_list|)
operator|||
name|Preference
operator|.
name|BLANK_PREF_VALUE
operator|.
name|equals
argument_list|(
name|responsibilityId
argument_list|)
condition|?
literal|null
else|:
name|TeachingResponsibilityDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|responsibilityId
argument_list|)
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|instructor
operator|!=
literal|null
condition|)
block|{
name|OfferingCoordinator
name|coordinator
init|=
operator|new
name|OfferingCoordinator
argument_list|()
decl_stmt|;
name|coordinator
operator|.
name|setInstructor
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|coordinator
operator|.
name|setOffering
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|coordinator
operator|.
name|setResponsibility
argument_list|(
name|responsibility
argument_list|)
expr_stmt|;
try|try
block|{
name|coordinator
operator|.
name|setPercentShare
argument_list|(
name|percShare
operator|==
literal|null
condition|?
literal|0
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|percShare
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|coordinator
operator|.
name|setPercentShare
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|io
operator|.
name|getOfferingCoordinators
argument_list|()
operator|.
name|add
argument_list|(
name|coordinator
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|getOfferingCoordinators
argument_list|()
operator|.
name|add
argument_list|(
name|coordinator
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|courseOfferingInterface
operator|.
name|getDemandOfferingId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|courseOffering
operator|.
name|setDemandOffering
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CourseOffering
name|dco
init|=
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|courseOfferingInterface
operator|.
name|getDemandOfferingId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|courseOffering
operator|.
name|setDemandOffering
argument_list|(
name|dco
operator|==
literal|null
condition|?
literal|null
else|:
name|dco
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|allowAlternativeCourseOfferings
init|=
name|ApplicationProperty
operator|.
name|StudentSchedulingAlternativeCourse
operator|.
name|isTrue
argument_list|()
decl_stmt|;
if|if
condition|(
name|allowAlternativeCourseOfferings
condition|)
block|{
if|if
condition|(
name|courseOfferingInterface
operator|.
name|getAlternativeCourseOfferingId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|courseOffering
operator|.
name|setAlternativeOffering
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CourseOffering
name|dco
init|=
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|courseOfferingInterface
operator|.
name|getAlternativeCourseOfferingId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|courseOffering
operator|.
name|setAlternativeOffering
argument_list|(
name|dco
operator|==
literal|null
condition|?
literal|null
else|:
name|dco
argument_list|)
expr_stmt|;
block|}
block|}
name|Boolean
name|coursesFundingDepartmentsEnabled
init|=
name|ApplicationProperty
operator|.
name|CoursesFundingDepartmentsEnabled
operator|.
name|isTrue
argument_list|()
decl_stmt|;
if|if
condition|(
name|coursesFundingDepartmentsEnabled
condition|)
block|{
if|if
condition|(
name|courseOfferingInterface
operator|.
name|getFundingDepartmentId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|courseOffering
operator|.
name|setFundingDept
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Department
name|dept
init|=
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|courseOfferingInterface
operator|.
name|getFundingDepartmentId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|dept
operator|.
name|equals
argument_list|(
name|courseOffering
operator|.
name|getEffectiveFundingDept
argument_list|()
argument_list|)
condition|)
block|{
name|courseOffering
operator|.
name|setFundingDept
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|courseOffering
operator|.
name|setFundingDept
argument_list|(
name|dept
operator|==
literal|null
condition|?
literal|null
else|:
name|dept
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Boolean
name|canEditExternalIds
init|=
name|ApplicationProperty
operator|.
name|CourseOfferingEditExternalIds
operator|.
name|isTrue
argument_list|()
decl_stmt|;
if|if
condition|(
name|canEditExternalIds
condition|)
block|{
if|if
condition|(
name|courseOfferingInterface
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
operator|||
name|courseOfferingInterface
operator|.
name|getExternalId
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|courseOffering
operator|.
name|setExternalUniqueId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|courseOffering
operator|.
name|setExternalUniqueId
argument_list|(
name|courseOfferingInterface
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|courseOfferingInterface
operator|.
name|getCourseTypeId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|courseOffering
operator|.
name|setCourseType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CourseType
name|courseType
init|=
name|CourseTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|courseOfferingInterface
operator|.
name|getCourseTypeId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|courseOffering
operator|.
name|setCourseType
argument_list|(
name|courseType
operator|==
literal|null
condition|?
literal|null
else|:
name|courseType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|courseOfferingInterface
operator|.
name|getConsent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|courseOffering
operator|.
name|setConsentType
argument_list|(
name|OfferingConsentTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|courseOfferingInterface
operator|.
name|getConsent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|courseOffering
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|courseOffering
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|hibSession
operator|.
name|save
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
name|courseOfferingInterface
operator|.
name|setId
argument_list|(
operator|(
name|Long
operator|)
name|hibSession
operator|.
name|save
argument_list|(
name|courseOffering
argument_list|)
argument_list|)
expr_stmt|;
name|courseOffering
operator|.
name|setCredit
argument_list|(
name|CourseCreditUnitConfig
operator|.
name|createCreditUnitConfigOfFormat
argument_list|(
name|courseOfferingInterface
operator|.
name|getCreditFormat
argument_list|()
argument_list|,
name|courseOfferingInterface
operator|.
name|getCreditType
argument_list|()
argument_list|,
name|courseOfferingInterface
operator|.
name|getCreditUnitType
argument_list|()
argument_list|,
name|courseOfferingInterface
operator|.
name|getUnits
argument_list|()
argument_list|,
name|courseOfferingInterface
operator|.
name|getMaxUnits
argument_list|()
argument_list|,
name|courseOfferingInterface
operator|.
name|getFractionalIncrementsAllowed
argument_list|()
argument_list|,
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|courseOffering
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|courseOffering
operator|.
name|getCredit
argument_list|()
operator|.
name|setOwner
argument_list|(
name|courseOffering
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|courseOffering
operator|.
name|getCredit
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|OfferingCoordinator
name|coordinator
range|:
name|io
operator|.
name|getOfferingCoordinators
argument_list|()
control|)
block|{
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|coordinator
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|hibSession
operator|.
name|update
argument_list|(
name|courseOffering
argument_list|)
expr_stmt|;
block|}
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
name|courseOffering
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|COURSE_OFFERING_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|CREATE
argument_list|,
name|courseOffering
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|courseOffering
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|HibernateUtil
operator|.
name|clearCache
argument_list|()
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|io
argument_list|,
name|Right
operator|.
name|OfferingCanLock
argument_list|)
condition|)
block|{
name|io
operator|.
name|getSession
argument_list|()
operator|.
name|lockOffering
argument_list|(
name|io
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|permissionOfferingLockNeeded
operator|.
name|check
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
name|io
argument_list|)
condition|)
block|{
name|StudentSectioningQueue
operator|.
name|offeringChanged
argument_list|(
name|hibSession
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
name|io
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|io
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|className1
init|=
name|ApplicationProperty
operator|.
name|ExternalActionInstructionalOfferingAdd
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|className1
operator|!=
literal|null
operator|&&
name|className1
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExternalInstructionalOfferingAddAction
name|addAction
init|=
operator|(
name|ExternalInstructionalOfferingAddAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className1
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|addAction
operator|.
name|performExternalInstructionalOfferingAddAction
argument_list|(
name|io
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
name|String
name|className2
init|=
name|ApplicationProperty
operator|.
name|ExternalActionCourseOfferingEdit
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|className2
operator|!=
literal|null
operator|&&
name|className2
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExternalCourseOfferingEditAction
name|editAction
init|=
operator|(
name|ExternalCourseOfferingEditAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className2
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|editAction
operator|.
name|performExternalCourseOfferingEditAction
argument_list|(
name|io
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
return|return
name|courseOffering
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
block|}
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

