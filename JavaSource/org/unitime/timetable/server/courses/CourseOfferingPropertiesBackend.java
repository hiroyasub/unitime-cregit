begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|courses
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|criterion
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|CourseMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
operator|.
name|EventAction
operator|.
name|EventContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseOfferingInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseOfferingInterface
operator|.
name|AcademicSessionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseOfferingInterface
operator|.
name|CourseCreditFormatInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseOfferingInterface
operator|.
name|CourseCreditTypeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseOfferingInterface
operator|.
name|CourseCreditUnitTypeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseOfferingInterface
operator|.
name|CourseOfferingPropertiesInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseOfferingInterface
operator|.
name|CourseOfferingPropertiesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseOfferingInterface
operator|.
name|CourseTypeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseOfferingInterface
operator|.
name|DepartmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseOfferingInterface
operator|.
name|InstructorInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseOfferingInterface
operator|.
name|OfferingConsentTypeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseOfferingInterface
operator|.
name|OverrideTypeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseOfferingInterface
operator|.
name|ResponsibilityInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseOfferingInterface
operator|.
name|SubjectAreaInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseOfferingInterface
operator|.
name|WaitListInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCreditFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCreditType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCreditUnitType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|OfferingConsentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|OverrideType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TeachingResponsibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|CourseOfferingComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|OverrideTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SubjectAreaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserAuthority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * @author Alec Macleod  */
end_comment

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|CourseOfferingPropertiesRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|CourseOfferingPropertiesBackend
implements|implements
name|GwtRpcImplementation
argument_list|<
name|CourseOfferingPropertiesRequest
argument_list|,
name|CourseOfferingPropertiesInterface
argument_list|>
block|{
specifier|protected
specifier|final
specifier|static
name|CourseMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|CourseMessages
operator|.
name|class
argument_list|)
decl_stmt|;
name|Logger
name|logger
init|=
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"UpdateCourseOfferingBackend"
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|CourseOfferingPropertiesInterface
name|execute
parameter_list|(
name|CourseOfferingPropertiesRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|hasSessionId
argument_list|()
condition|)
name|context
operator|=
operator|new
name|EventContext
argument_list|(
name|context
argument_list|,
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|AddCourseOffering
argument_list|)
operator|&&
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|EditCourseOffering
argument_list|)
operator|&&
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|EditCourseOfferingCoordinators
argument_list|)
operator|&&
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|EditCourseOfferingNote
argument_list|)
condition|)
block|{
comment|//If they don't have any of the permissions, reject based on any of them.
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|AddCourseOffering
argument_list|)
expr_stmt|;
block|}
name|CourseOfferingPropertiesInterface
name|response
init|=
operator|new
name|CourseOfferingPropertiesInterface
argument_list|()
decl_stmt|;
name|UserAuthority
name|authority
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getUser
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|hasSessionId
argument_list|()
condition|?
name|request
operator|.
name|getSessionId
argument_list|()
else|:
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
decl_stmt|;
name|response
operator|.
name|setAcademicSession
argument_list|(
operator|new
name|AcademicSessionInterface
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
literal|" "
operator|+
name|session
operator|.
name|getAcademicYear
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|authority
operator|=
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
expr_stmt|;
name|response
operator|.
name|setWkEnrollDefault
argument_list|(
name|session
operator|.
name|getLastWeekToEnroll
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setWkChangeDefault
argument_list|(
name|session
operator|.
name|getLastWeekToChange
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setWkDropDefault
argument_list|(
name|session
operator|.
name|getLastWeekToDrop
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setWeekStartDayOfWeek
argument_list|(
name|Localization
operator|.
name|getDateFormat
argument_list|(
literal|"EEEE"
argument_list|)
operator|.
name|format
argument_list|(
name|session
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|CourseOffering
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|CourseOffering
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
name|Long
name|tempSubjId
init|=
operator|new
name|Long
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|//Does this still work?
for|for
control|(
name|SubjectArea
name|subject
range|:
name|SubjectArea
operator|.
name|getUserSubjectAreas
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|subject
argument_list|,
name|Right
operator|.
name|AddCourseOffering
argument_list|)
condition|)
block|{
name|SubjectAreaInterface
name|subjectArea
init|=
operator|new
name|SubjectAreaInterface
argument_list|()
decl_stmt|;
name|subjectArea
operator|.
name|setId
argument_list|(
name|subject
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|subjectArea
operator|.
name|setAbbreviation
argument_list|(
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|subjectArea
operator|.
name|setLabel
argument_list|(
name|subject
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addSubjectArea
argument_list|(
name|subjectArea
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|==
literal|0
condition|)
block|{
name|tempSubjId
operator|=
name|subject
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
block|}
name|j
operator|++
expr_stmt|;
block|}
block|}
name|response
operator|.
name|setPrefRowsAdded
argument_list|(
name|Constants
operator|.
name|PREF_ROWS_ADDED
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseCreditFormat
name|courseCreditFormat
range|:
name|CourseCreditFormat
operator|.
name|getCourseCreditFormatList
argument_list|()
control|)
block|{
name|CourseCreditFormatInterface
name|courseCreditFormatObject
init|=
operator|new
name|CourseCreditFormatInterface
argument_list|()
decl_stmt|;
name|courseCreditFormatObject
operator|.
name|setId
argument_list|(
name|courseCreditFormat
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|courseCreditFormatObject
operator|.
name|setReference
argument_list|(
name|courseCreditFormat
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|courseCreditFormatObject
operator|.
name|setLabel
argument_list|(
name|courseCreditFormat
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addCourseCreditFormat
argument_list|(
name|courseCreditFormatObject
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CourseCreditType
name|courseCreditType
range|:
name|CourseCreditType
operator|.
name|getCourseCreditTypeList
argument_list|()
control|)
block|{
name|CourseCreditTypeInterface
name|courseCreditTypeObject
init|=
operator|new
name|CourseCreditTypeInterface
argument_list|()
decl_stmt|;
name|courseCreditTypeObject
operator|.
name|setId
argument_list|(
name|courseCreditType
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|courseCreditTypeObject
operator|.
name|setLabel
argument_list|(
name|courseCreditType
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addCourseCreditType
argument_list|(
name|courseCreditTypeObject
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CourseCreditUnitType
name|courseCreditUnitType
range|:
name|CourseCreditUnitType
operator|.
name|getCourseCreditUnitTypeList
argument_list|()
control|)
block|{
name|CourseCreditUnitTypeInterface
name|courseCreditUnitTypeObject
init|=
operator|new
name|CourseCreditUnitTypeInterface
argument_list|()
decl_stmt|;
name|courseCreditUnitTypeObject
operator|.
name|setId
argument_list|(
name|courseCreditUnitType
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|courseCreditUnitTypeObject
operator|.
name|setLabel
argument_list|(
name|courseCreditUnitType
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addCourseCreditUnitType
argument_list|(
name|courseCreditUnitTypeObject
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|OfferingConsentType
name|offeringConsentType
range|:
name|OfferingConsentType
operator|.
name|getConsentTypeList
argument_list|()
control|)
block|{
name|OfferingConsentTypeInterface
name|offeringConsentTypeObject
init|=
operator|new
name|OfferingConsentTypeInterface
argument_list|()
decl_stmt|;
name|offeringConsentTypeObject
operator|.
name|setId
argument_list|(
name|offeringConsentType
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|offeringConsentTypeObject
operator|.
name|setLabel
argument_list|(
name|offeringConsentType
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addOfferingConsentType
argument_list|(
name|offeringConsentTypeObject
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TeachingResponsibility
name|teachingResponsibility
range|:
name|TeachingResponsibility
operator|.
name|getCoordinatorTeachingResponsibilities
argument_list|()
control|)
block|{
name|ResponsibilityInterface
name|responsibility
init|=
operator|new
name|ResponsibilityInterface
argument_list|()
decl_stmt|;
name|responsibility
operator|.
name|setId
argument_list|(
name|teachingResponsibility
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|responsibility
operator|.
name|setLabel
argument_list|(
name|teachingResponsibility
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addResponsibility
argument_list|(
name|responsibility
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getSubjAreaId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|request
operator|.
name|setSubjAreaId
argument_list|(
name|tempSubjId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getSubjAreaId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SubjectArea
name|subjectArea
init|=
name|SubjectAreaDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getSubjAreaId
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuffer
name|queryClause
init|=
operator|new
name|StringBuffer
argument_list|(
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|subjectArea
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|queryClause
operator|.
name|append
argument_list|(
literal|" and i.department.uniqueId = "
operator|+
name|subjectArea
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|instructorNameFormat
init|=
name|UserProperty
operator|.
name|NameFormat
operator|.
name|get
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|acadSessionId
init|=
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
decl_stmt|;
name|StringBuffer
name|query
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"select distinct i from DepartmentalInstructor i "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" where i.department.session.uniqueId = :acadSessionId "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
name|queryClause
argument_list|)
expr_stmt|;
name|DepartmentalInstructorDAO
name|idao
init|=
operator|new
name|DepartmentalInstructorDAO
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|idao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|q
operator|.
name|setFetchSize
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"acadSessionId"
argument_list|,
name|acadSessionId
argument_list|)
expr_stmt|;
name|List
name|result
init|=
name|q
operator|.
name|list
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|result
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|result
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|di
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|di
operator|.
name|getName
argument_list|(
name|instructorNameFormat
argument_list|)
decl_stmt|;
name|InstructorInterface
name|instructorObject
init|=
operator|new
name|InstructorInterface
argument_list|()
decl_stmt|;
name|instructorObject
operator|.
name|setId
argument_list|(
name|di
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|instructorObject
operator|.
name|setLabel
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|response
operator|.
name|addInstructor
argument_list|(
name|instructorObject
argument_list|)
expr_stmt|;
block|}
comment|//Funding department stuff
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|fundingDeptMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Department
name|subjectFundingDepartment
init|=
name|subjectArea
operator|.
name|getFundingDept
argument_list|()
decl_stmt|;
name|Department
name|subjectDepartment
init|=
name|subjectArea
operator|.
name|getDepartment
argument_list|()
decl_stmt|;
if|if
condition|(
name|subjectFundingDepartment
operator|!=
literal|null
condition|)
block|{
name|fundingDeptMap
operator|.
name|put
argument_list|(
name|subjectFundingDepartment
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|subjectFundingDepartment
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|subjectFundingDepartment
operator|.
name|getUniqueId
argument_list|()
operator|!=
name|subjectDepartment
operator|.
name|getUniqueId
argument_list|()
condition|)
block|{
name|fundingDeptMap
operator|.
name|put
argument_list|(
name|subjectDepartment
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|subjectDepartment
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fundingDeptMap
operator|.
name|put
argument_list|(
name|subjectDepartment
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|subjectDepartment
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getIsEdit
argument_list|()
condition|)
block|{
name|Long
name|courseOfferingId
init|=
name|request
operator|.
name|getCourseOfferingId
argument_list|()
decl_stmt|;
name|CourseOffering
name|courseOffering
init|=
name|CourseOffering
operator|.
name|findByUniqueId
argument_list|(
name|courseOfferingId
argument_list|)
decl_stmt|;
name|InstructionalOffering
name|instructionalOffering
init|=
name|courseOffering
operator|.
name|getInstructionalOffering
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|CourseOffering
argument_list|>
name|courseOfferings
init|=
operator|new
name|HashSet
argument_list|<
name|CourseOffering
argument_list|>
argument_list|()
decl_stmt|;
name|courseOfferings
operator|=
name|instructionalOffering
operator|.
name|getCourseOfferings
argument_list|()
expr_stmt|;
name|Iterator
name|iterator
init|=
name|courseOfferings
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CourseOffering
name|childCourseOffering
init|=
operator|(
name|CourseOffering
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|Department
name|fundingDept
init|=
name|childCourseOffering
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getFundingDept
argument_list|()
decl_stmt|;
comment|//TODO do we need to get effective if this is null?
if|if
condition|(
name|fundingDept
operator|!=
literal|null
condition|)
block|{
name|fundingDeptMap
operator|.
name|put
argument_list|(
name|fundingDept
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|fundingDept
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//Get depts where funding dept flag is true
name|StringBuffer
name|queryClause2
init|=
operator|new
name|StringBuffer
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|queryClause2
operator|.
name|append
argument_list|(
literal|" and i.externalFundingDept = 'true'"
argument_list|)
expr_stmt|;
name|StringBuffer
name|query2
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|query2
operator|.
name|append
argument_list|(
literal|"select distinct i from Department i "
argument_list|)
expr_stmt|;
name|query2
operator|.
name|append
argument_list|(
literal|" where i.session.uniqueId = :acadSessionId "
argument_list|)
expr_stmt|;
name|query2
operator|.
name|append
argument_list|(
name|queryClause2
argument_list|)
expr_stmt|;
name|DepartmentDAO
name|departmentDao
init|=
operator|new
name|DepartmentDAO
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession2
init|=
name|departmentDao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Query
name|q2
init|=
name|hibSession2
operator|.
name|createQuery
argument_list|(
name|query2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|q2
operator|.
name|setFetchSize
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|q2
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|q2
operator|.
name|setLong
argument_list|(
literal|"acadSessionId"
argument_list|,
name|acadSessionId
argument_list|)
expr_stmt|;
name|List
name|result2
init|=
name|q2
operator|.
name|list
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|result2
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|result2
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|dept
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|fundingDeptMap
operator|.
name|put
argument_list|(
name|dept
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|dept
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fundingDeptMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|fundingDeptMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|DepartmentInterface
name|fundingDepartmentObject
init|=
operator|new
name|DepartmentInterface
argument_list|()
decl_stmt|;
name|fundingDepartmentObject
operator|.
name|setId
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|fundingDepartmentObject
operator|.
name|setLabel
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addFundingDepartment
argument_list|(
name|fundingDepartmentObject
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Boolean
name|courseOfferingNumberUpperCase
decl_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|CourseOfferingNumberUpperCase
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|courseOfferingNumberUpperCase
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|courseOfferingNumberUpperCase
operator|=
literal|false
expr_stmt|;
block|}
name|String
name|courseNbrRegex
init|=
name|ApplicationProperty
operator|.
name|CourseOfferingNumberPattern
operator|.
name|value
argument_list|()
decl_stmt|;
name|String
name|courseNbrInfo
init|=
name|ApplicationProperty
operator|.
name|CourseOfferingNumberPatternInfo
operator|.
name|value
argument_list|()
decl_stmt|;
name|Boolean
name|courseOfferingNumberMustBeUnique
decl_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|CourseOfferingNumberMustBeUnique
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|courseOfferingNumberMustBeUnique
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getCourseNumber
argument_list|()
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getSubjAreaId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|CourseOffering
name|course
init|=
name|CourseOffering
operator|.
name|findBySessionSubjAreaIdCourseNbr
argument_list|(
name|response
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|request
operator|.
name|getSubjAreaId
argument_list|()
argument_list|,
name|request
operator|.
name|getCourseNumber
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|!=
literal|null
condition|)
block|{
name|response
operator|.
name|setInstructionalOfferingId
argument_list|(
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|setInstructionalOfferingId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|courseOfferingNumberMustBeUnique
operator|=
literal|false
expr_stmt|;
block|}
name|response
operator|.
name|setCourseNbrRegex
argument_list|(
name|courseNbrRegex
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCourseNbrInfo
argument_list|(
name|courseNbrInfo
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCourseOfferingMustBeUnique
argument_list|(
name|courseOfferingNumberMustBeUnique
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCourseOfferingNumberUpperCase
argument_list|(
name|courseOfferingNumberUpperCase
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCoursesFundingDepartmentsEnabled
argument_list|(
name|ApplicationProperty
operator|.
name|CoursesFundingDepartmentsEnabled
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|Boolean
name|allowAlternativeCourseOfferings
init|=
name|ApplicationProperty
operator|.
name|StudentSchedulingAlternativeCourse
operator|.
name|isTrue
argument_list|()
decl_stmt|;
comment|//true;
name|response
operator|.
name|setAllowAlternativeCourseOfferings
argument_list|(
name|allowAlternativeCourseOfferings
argument_list|)
expr_stmt|;
name|String
name|courseUrlProvider
init|=
name|ApplicationProperty
operator|.
name|CustomizationCourseLink
operator|.
name|value
argument_list|()
decl_stmt|;
name|response
operator|.
name|setCourseUrlProvider
argument_list|(
name|courseUrlProvider
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCanEditExternalIds
argument_list|(
name|ApplicationProperty
operator|.
name|CourseOfferingEditExternalIds
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCanShowExternalIds
argument_list|(
name|ApplicationProperty
operator|.
name|CourseOfferingShowExternalIds
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CourseOffering
argument_list|>
name|courseOfferingsDemand
init|=
name|setupCourseOfferings
argument_list|(
name|context
argument_list|,
operator|new
name|CourseFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|CourseOffering
name|course
parameter_list|)
block|{
return|return
name|course
operator|.
name|getDemand
argument_list|()
operator|!=
literal|null
operator|&&
name|course
operator|.
name|getDemand
argument_list|()
operator|>
literal|0
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|CourseOffering
name|co
range|:
name|courseOfferingsDemand
control|)
block|{
comment|//TODO
name|CourseOfferingInterface
name|courseOffering
init|=
operator|new
name|CourseOfferingInterface
argument_list|()
decl_stmt|;
name|courseOffering
operator|.
name|setId
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|courseOffering
operator|.
name|setLabel
argument_list|(
name|co
operator|.
name|getCourseNameWithTitle
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addCourseDemands
argument_list|(
name|courseOffering
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allowAlternativeCourseOfferings
condition|)
block|{
name|List
argument_list|<
name|CourseOffering
argument_list|>
name|altCourseOfferings
init|=
name|setupCourseOfferings
argument_list|(
name|context
argument_list|,
operator|new
name|CourseFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|CourseOffering
name|course
parameter_list|)
block|{
return|return
operator|!
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|isNotOffered
argument_list|()
return|;
comment|//&& !course.equals(co); TODO
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|CourseOffering
name|co
range|:
name|altCourseOfferings
control|)
block|{
comment|//TODO
name|CourseOfferingInterface
name|courseOffering
init|=
operator|new
name|CourseOfferingInterface
argument_list|()
decl_stmt|;
name|courseOffering
operator|.
name|setId
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
comment|//courseOffering.setAbbreviation(co.get);
name|courseOffering
operator|.
name|setLabel
argument_list|(
name|co
operator|.
name|getCourseNameWithTitle
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAltCourseOffering
argument_list|(
name|courseOffering
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|CourseType
name|courseType
range|:
name|CourseTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|(
name|Order
operator|.
name|asc
argument_list|(
literal|"reference"
argument_list|)
argument_list|)
control|)
block|{
name|CourseTypeInterface
name|courseTypeObject
init|=
operator|new
name|CourseTypeInterface
argument_list|()
decl_stmt|;
name|courseTypeObject
operator|.
name|setId
argument_list|(
name|courseType
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|courseTypeObject
operator|.
name|setLabel
argument_list|(
name|courseType
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addCourseType
argument_list|(
name|courseTypeObject
argument_list|)
expr_stmt|;
block|}
comment|//Override Types
for|for
control|(
name|OverrideType
name|overrideType
range|:
name|OverrideTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
control|)
block|{
name|OverrideTypeInterface
name|overrideTypeObject
init|=
operator|new
name|OverrideTypeInterface
argument_list|()
decl_stmt|;
name|overrideTypeObject
operator|.
name|setId
argument_list|(
name|overrideType
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|overrideTypeObject
operator|.
name|setName
argument_list|(
name|overrideType
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|overrideTypeObject
operator|.
name|setReference
argument_list|(
name|overrideType
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addOverrideType
argument_list|(
name|overrideTypeObject
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|setWaitListDefault
argument_list|(
name|ApplicationProperty
operator|.
name|OfferingWaitListDefault
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|WaitListInterface
name|waitListDefault
init|=
operator|new
name|WaitListInterface
argument_list|()
decl_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|OfferingWaitListDefault
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|waitListDefault
operator|.
name|setLabel
argument_list|(
name|MSG
operator|.
name|waitListDefaultEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|waitListDefault
operator|.
name|setValue
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|response
operator|.
name|addWaitList
argument_list|(
name|waitListDefault
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|waitListDefault
operator|.
name|setLabel
argument_list|(
name|MSG
operator|.
name|waitListDefaultDisabled
argument_list|()
argument_list|)
expr_stmt|;
name|waitListDefault
operator|.
name|setValue
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|response
operator|.
name|addWaitList
argument_list|(
name|waitListDefault
argument_list|)
expr_stmt|;
block|}
name|WaitListInterface
name|waitListEnabled
init|=
operator|new
name|WaitListInterface
argument_list|()
decl_stmt|;
name|waitListEnabled
operator|.
name|setLabel
argument_list|(
name|MSG
operator|.
name|waitListEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|waitListEnabled
operator|.
name|setValue
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
name|response
operator|.
name|addWaitList
argument_list|(
name|waitListEnabled
argument_list|)
expr_stmt|;
name|WaitListInterface
name|waitListDisabled
init|=
operator|new
name|WaitListInterface
argument_list|()
decl_stmt|;
name|waitListDisabled
operator|.
name|setLabel
argument_list|(
name|MSG
operator|.
name|waitListDisabled
argument_list|()
argument_list|)
expr_stmt|;
name|waitListDisabled
operator|.
name|setValue
argument_list|(
literal|"false"
argument_list|)
expr_stmt|;
name|response
operator|.
name|addWaitList
argument_list|(
name|waitListDisabled
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
specifier|private
name|List
argument_list|<
name|CourseOffering
argument_list|>
name|setupCourseOfferings
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|CourseFilter
name|filter
parameter_list|)
block|{
name|List
argument_list|<
name|CourseOffering
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|CourseOffering
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SubjectArea
name|subject
range|:
name|SubjectArea
operator|.
name|getUserSubjectAreas
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
control|)
block|{
for|for
control|(
name|CourseOffering
name|co
range|:
name|subject
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
if|if
condition|(
name|filter
operator|==
literal|null
operator|||
name|filter
operator|.
name|accept
argument_list|(
name|co
argument_list|)
condition|)
name|list
operator|.
name|add
argument_list|(
name|co
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|,
operator|new
name|CourseOfferingComparator
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
specifier|private
specifier|static
interface|interface
name|CourseFilter
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|CourseOffering
name|course
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

