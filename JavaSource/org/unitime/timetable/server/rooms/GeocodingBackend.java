begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|rooms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|data
operator|.
name|Protocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|resource
operator|.
name|ClientResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|DisposableBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|InitializingBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|GeocodeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|GeocodeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|GsonRepresentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|reflect
operator|.
name|TypeToken
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|GeocodeRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|GeocodingBackend
implements|implements
name|GwtRpcImplementation
argument_list|<
name|GeocodeRequest
argument_list|,
name|GeocodeResponse
argument_list|>
implements|,
name|InitializingBean
implements|,
name|DisposableBean
block|{
specifier|private
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|GeocodingBackend
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Client
name|iClient
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|afterPropertiesSet
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Protocol
argument_list|>
name|protocols
init|=
operator|new
name|ArrayList
argument_list|<
name|Protocol
argument_list|>
argument_list|()
decl_stmt|;
name|protocols
operator|.
name|add
argument_list|(
name|Protocol
operator|.
name|HTTP
argument_list|)
expr_stmt|;
name|protocols
operator|.
name|add
argument_list|(
name|Protocol
operator|.
name|HTTPS
argument_list|)
expr_stmt|;
name|iClient
operator|=
operator|new
name|Client
argument_list|(
name|protocols
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|destroy
parameter_list|()
throws|throws
name|Exception
block|{
name|iClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|GeocodeResponse
name|execute
parameter_list|(
name|GeocodeRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|ClientResource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|request
operator|.
name|isReverse
argument_list|()
condition|)
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
literal|"https://nominatim.openstreetmap.org/reverse"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resource
operator|=
operator|new
name|ClientResource
argument_list|(
literal|"https://nominatim.openstreetmap.org/search"
argument_list|)
expr_stmt|;
block|}
name|resource
operator|.
name|setNext
argument_list|(
name|iClient
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"format"
argument_list|,
literal|"json"
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"limit"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasQuery
argument_list|()
condition|)
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"q"
argument_list|,
name|request
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasViewBox
argument_list|()
condition|)
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"viewbox"
argument_list|,
name|request
operator|.
name|getViewBox
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasCoordinates
argument_list|()
condition|)
block|{
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"lat"
argument_list|,
name|request
operator|.
name|getLat
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addQueryParameter
argument_list|(
literal|"lon"
argument_list|,
name|request
operator|.
name|getLon
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|resource
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|GeocodeResponseMessage
name|message
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|isReverse
argument_list|()
condition|)
block|{
name|message
operator|=
operator|new
name|GsonRepresentation
argument_list|<
name|GeocodeResponseMessage
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|GeocodeResponseMessage
operator|.
name|class
argument_list|)
operator|.
name|getObject
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|GeocodeResponseMessage
argument_list|>
name|messages
init|=
operator|new
name|GsonRepresentation
argument_list|<
name|List
argument_list|<
name|GeocodeResponseMessage
argument_list|>
argument_list|>
argument_list|(
name|resource
operator|.
name|getResponseEntity
argument_list|()
argument_list|,
name|GeocodeResponseMessage
operator|.
name|TYPE_LIST
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|messages
operator|!=
literal|null
operator|&&
operator|!
name|messages
operator|.
name|isEmpty
argument_list|()
condition|)
name|message
operator|=
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|GeocodeResponse
name|response
init|=
operator|new
name|GeocodeResponse
argument_list|()
decl_stmt|;
name|response
operator|.
name|setQuery
argument_list|(
name|message
operator|.
name|display_name
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCoordinates
argument_list|(
name|message
operator|.
name|lat
argument_list|,
name|message
operator|.
name|lon
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
throw|throw
operator|new
name|GwtRpcException
argument_list|(
literal|"No match."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to geocode: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|GwtRpcException
argument_list|(
literal|"Failed to geocode: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResponse
argument_list|()
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getResponse
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
name|resource
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|static
class|class
name|GeocodeResponseMessage
block|{
specifier|public
specifier|static
specifier|final
name|Type
name|TYPE_LIST
init|=
operator|new
name|TypeToken
argument_list|<
name|ArrayList
argument_list|<
name|GeocodeResponseMessage
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|display_name
decl_stmt|;
name|Double
name|lat
decl_stmt|,
name|lon
decl_stmt|;
block|}
block|}
end_class

end_unit

