begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|rooms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|BuildingInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|UpdateBuildingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Building
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|BuildingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|UpdateBuildingRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|UpdateBuildingBackend
implements|implements
name|GwtRpcImplementation
argument_list|<
name|UpdateBuildingRequest
argument_list|,
name|BuildingInterface
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|BuildingInterface
name|execute
parameter_list|(
name|UpdateBuildingRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
switch|switch
condition|(
name|request
operator|.
name|getAction
argument_list|()
condition|)
block|{
case|case
name|CREATE
case|:
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|BuildingAdd
argument_list|)
expr_stmt|;
name|saveOrUpdate
argument_list|(
name|request
operator|.
name|getBuilding
argument_list|()
argument_list|,
literal|false
argument_list|,
name|context
argument_list|)
expr_stmt|;
break|break;
case|case
name|UPDATE
case|:
name|context
operator|.
name|checkPermission
argument_list|(
name|request
operator|.
name|getBuilding
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
literal|"Building"
argument_list|,
name|Right
operator|.
name|BuildingEdit
argument_list|)
expr_stmt|;
name|saveOrUpdate
argument_list|(
name|request
operator|.
name|getBuilding
argument_list|()
argument_list|,
name|request
operator|.
name|getUpdateRoomCoordinates
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|context
operator|.
name|checkPermission
argument_list|(
name|request
operator|.
name|getBuilding
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
literal|"Building"
argument_list|,
name|Right
operator|.
name|BuildingDelete
argument_list|)
expr_stmt|;
name|delete
argument_list|(
name|request
operator|.
name|getBuilding
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
break|break;
case|case
name|UPDATE_DATA
case|:
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|BuildingUpdateData
argument_list|)
expr_stmt|;
name|updateRooms
argument_list|(
name|context
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|request
operator|.
name|getBuilding
argument_list|()
return|;
block|}
specifier|protected
name|void
name|saveOrUpdate
parameter_list|(
name|BuildingInterface
name|buildingInterface
parameter_list|,
name|boolean
name|updateRoomCoordinates
parameter_list|,
name|SessionContext
name|context
parameter_list|)
throws|throws
name|GwtRpcException
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|BuildingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Building
name|building
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|buildingInterface
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|building
operator|=
name|BuildingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|buildingInterface
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|building
operator|==
literal|null
condition|)
block|{
name|building
operator|=
operator|new
name|Building
argument_list|()
expr_stmt|;
name|building
operator|.
name|setSession
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|building
operator|.
name|setName
argument_list|(
name|buildingInterface
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|building
operator|.
name|setAbbreviation
argument_list|(
name|buildingInterface
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|building
operator|.
name|setExternalUniqueId
argument_list|(
name|buildingInterface
operator|.
name|getExternalId
argument_list|()
operator|!=
literal|null
operator|&&
name|buildingInterface
operator|.
name|getExternalId
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|buildingInterface
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|building
operator|.
name|setCoordinateX
argument_list|(
name|buildingInterface
operator|.
name|getX
argument_list|()
argument_list|)
expr_stmt|;
name|building
operator|.
name|setCoordinateY
argument_list|(
name|buildingInterface
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|building
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|buildingInterface
operator|.
name|setId
argument_list|(
operator|(
name|Long
operator|)
name|hibSession
operator|.
name|save
argument_list|(
name|building
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hibSession
operator|.
name|update
argument_list|(
name|building
argument_list|)
expr_stmt|;
block|}
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
name|building
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|BUILDING_EDIT
argument_list|,
operator|(
name|building
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
name|ChangeLog
operator|.
name|Operation
operator|.
name|CREATE
else|:
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
operator|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|updateRoomCoordinates
condition|)
block|{
for|for
control|(
name|Room
name|room
range|:
operator|(
name|List
argument_list|<
name|Room
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from Room r where r.building.uniqueId = :buildingId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"buildingId"
argument_list|,
name|building
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|room
operator|.
name|getCoordinateX
argument_list|()
argument_list|,
name|building
operator|.
name|getCoordinateX
argument_list|()
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|room
operator|.
name|getCoordinateY
argument_list|()
argument_list|,
name|building
operator|.
name|getCoordinateY
argument_list|()
argument_list|)
condition|)
block|{
name|room
operator|.
name|setCoordinateX
argument_list|(
name|building
operator|.
name|getCoordinateX
argument_list|()
argument_list|)
expr_stmt|;
name|room
operator|.
name|setCoordinateY
argument_list|(
name|building
operator|.
name|getCoordinateY
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|room
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
name|room
argument_list|,
name|room
operator|.
name|getLabel
argument_list|()
operator|+
literal|" moved to "
operator|+
name|room
operator|.
name|getCoordinateX
argument_list|()
operator|+
literal|","
operator|+
name|room
operator|.
name|getCoordinateY
argument_list|()
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|BUILDING_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|HibernateUtil
operator|.
name|clearCache
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|delete
parameter_list|(
name|BuildingInterface
name|buildingInterface
parameter_list|,
name|SessionContext
name|context
parameter_list|)
throws|throws
name|GwtRpcException
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|BuildingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Building
name|building
init|=
name|BuildingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|buildingInterface
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|building
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select r from Room r where r.building.uniqueId=:buildingId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"buildingId"
argument_list|,
name|building
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Room
name|r
init|=
operator|(
name|Room
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"delete RoomPref p where p.room.uniqueId=:roomId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"roomId"
argument_list|,
name|r
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|r
operator|.
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Assignment
name|a
init|=
operator|(
name|Assignment
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|a
operator|.
name|getRooms
argument_list|()
operator|.
name|remove
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|hibSession
operator|.
name|delete
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
name|building
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|BUILDING_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|building
argument_list|)
expr_stmt|;
block|}
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|HibernateUtil
operator|.
name|clearCache
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|updateRooms
parameter_list|(
name|SessionContext
name|context
parameter_list|)
throws|throws
name|GwtRpcException
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|BuildingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Room
operator|.
name|addNewExternalRoomsToSession
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|HibernateUtil
operator|.
name|clearCache
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

