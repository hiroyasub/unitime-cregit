begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|rooms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|criterion
operator|.
name|Restrictions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
operator|.
name|EventAction
operator|.
name|EventContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|BuildingInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|DepartmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|FeatureInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|FutureOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|GroupInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|PeriodPreferenceModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|PreferenceInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomDetailInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomPictureInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomSharingOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomTypeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomUpdateRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Building
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentRoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamLocationPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|GlobalRoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|LocationPicture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|NonUniversityLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|NonUniversityLocationPicture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomDept
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPicture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|AttachmentTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|BuildingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|LocationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|NonUniversityLocationPictureDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|PreferenceLevelDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomFeatureDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomGroupDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomPictureDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|LocationPermIdGenerator
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|RoomUpdateRpcRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|RoomUpdateBackend
implements|implements
name|GwtRpcImplementation
argument_list|<
name|RoomUpdateRpcRequest
argument_list|,
name|RoomDetailInterface
argument_list|>
block|{
specifier|protected
specifier|static
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|RoomUpdateBackend
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|RoomDetailInterface
name|execute
parameter_list|(
name|RoomUpdateRpcRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|hasSessionId
argument_list|()
condition|)
name|context
operator|=
operator|new
name|EventContext
argument_list|(
name|context
argument_list|,
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|Location
name|location
init|=
literal|null
decl_stmt|;
name|RoomException
name|exception
init|=
literal|null
decl_stmt|;
try|try
block|{
switch|switch
condition|(
name|request
operator|.
name|getOperation
argument_list|()
condition|)
block|{
case|case
name|DELETE
case|:
name|Collection
argument_list|<
name|Location
argument_list|>
name|futureLocations
init|=
operator|(
name|request
operator|.
name|hasFutureFlags
argument_list|()
condition|?
name|Location
operator|.
name|getFutureLocations
argument_list|(
name|request
operator|.
name|getLocationId
argument_list|()
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
name|delete
argument_list|(
name|request
operator|.
name|getLocationId
argument_list|()
argument_list|,
name|context
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|futureLocations
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Location
name|loc
range|:
name|futureLocations
control|)
if|if
condition|(
name|request
operator|.
name|getFutureFlag
argument_list|(
name|loc
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
name|delete
argument_list|(
name|loc
operator|.
name|getUniqueId
argument_list|()
argument_list|,
operator|new
name|EventContext
argument_list|(
name|context
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
name|loc
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|UPDATE
case|:
name|futureLocations
operator|=
operator|(
name|request
operator|.
name|hasFutureFlags
argument_list|()
condition|?
name|Location
operator|.
name|getFutureLocations
argument_list|(
name|request
operator|.
name|getRoom
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
else|:
literal|null
operator|)
expr_stmt|;
name|List
argument_list|<
name|ExamType
argument_list|>
name|examTypes
init|=
name|ExamType
operator|.
name|findAllApplicable
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ExamView
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ExamTimetable
argument_list|)
decl_stmt|;
name|location
operator|=
name|update
argument_list|(
name|request
operator|.
name|getRoom
argument_list|()
argument_list|,
name|context
argument_list|,
literal|false
argument_list|,
name|request
operator|.
name|getFutureFlag
argument_list|(
literal|0l
argument_list|,
name|FutureOperation
operator|.
name|getFlagAllEnabled
argument_list|()
argument_list|)
argument_list|,
name|examTypes
argument_list|)
expr_stmt|;
if|if
condition|(
name|futureLocations
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Location
name|loc
range|:
name|futureLocations
control|)
block|{
name|Integer
name|flags
init|=
name|request
operator|.
name|getFutureFlag
argument_list|(
name|loc
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|flags
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|getRoom
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|loc
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|update
argument_list|(
name|request
operator|.
name|getRoom
argument_list|()
argument_list|,
operator|new
name|EventContext
argument_list|(
name|context
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
name|loc
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
name|flags
argument_list|,
name|examTypes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|CREATE
case|:
name|location
operator|=
name|create
argument_list|(
name|request
operator|.
name|getRoom
argument_list|()
argument_list|,
name|context
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|request
operator|.
name|getFutureFlag
argument_list|(
literal|0l
argument_list|,
name|FutureOperation
operator|.
name|getFlagAllEnabled
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
operator|&&
name|request
operator|.
name|hasFutureFlags
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|futureSessionIds
init|=
name|LocationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select f.uniqueId from Session f, Session s where "
operator|+
literal|"s.uniqueId = :sessionId and s.sessionBeginDateTime< f.sessionBeginDateTime and s.academicInitiative = f.academicInitiative "
operator|+
literal|"order by f.sessionBeginDateTime"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|id
range|:
name|futureSessionIds
control|)
block|{
name|Integer
name|flags
init|=
name|request
operator|.
name|getFutureFlag
argument_list|(
operator|-
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|flags
operator|!=
literal|null
condition|)
name|create
argument_list|(
name|request
operator|.
name|getRoom
argument_list|()
argument_list|,
operator|new
name|EventContext
argument_list|(
name|context
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
name|id
argument_list|)
argument_list|,
name|id
argument_list|,
name|location
operator|.
name|getPermanentId
argument_list|()
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|RoomException
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|exception
operator|=
name|e
expr_stmt|;
block|}
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|ExamType
argument_list|>
name|types
init|=
name|ExamType
operator|.
name|findAllApplicable
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ExamView
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ExamTimetable
argument_list|)
decl_stmt|;
name|RoomDetailInterface
name|detail
init|=
operator|new
name|RoomDetailsBackend
argument_list|()
operator|.
name|load
argument_list|(
name|location
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|context
argument_list|,
operator|!
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
argument_list|,
name|types
argument_list|,
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|InstructionalOfferings
argument_list|)
operator|||
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|Classes
argument_list|)
argument_list|,
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|Examinations
argument_list|)
argument_list|,
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|Events
argument_list|)
operator|||
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditChangeEventProperties
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|RoomSharingBackend
name|rsb
init|=
operator|new
name|RoomSharingBackend
argument_list|()
decl_stmt|;
if|if
condition|(
name|detail
operator|.
name|isCanSeeEventAvailability
argument_list|()
condition|)
name|detail
operator|.
name|setEventAvailabilityModel
argument_list|(
name|rsb
operator|.
name|loadEventAvailability
argument_list|(
name|location
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|detail
operator|.
name|isCanSeeAvailability
argument_list|()
condition|)
name|detail
operator|.
name|setRoomSharingModel
argument_list|(
name|rsb
operator|.
name|loadRoomSharing
argument_list|(
name|location
argument_list|,
literal|true
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|detail
operator|.
name|isCanSeePeriodPreferences
argument_list|()
condition|)
block|{
name|PeriodPreferencesBackend
name|ppb
init|=
operator|new
name|PeriodPreferencesBackend
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamType
name|type
range|:
name|types
control|)
block|{
name|detail
operator|.
name|setPeriodPreferenceModel
argument_list|(
name|ppb
operator|.
name|loadPeriodPreferences
argument_list|(
name|location
argument_list|,
name|type
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|context
operator|.
name|setAttribute
argument_list|(
name|RoomPictureServlet
operator|.
name|TEMP_ROOM_PICTURES
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
throw|throw
name|exception
operator|.
name|withRoom
argument_list|(
name|detail
argument_list|)
throw|;
return|return
name|detail
return|;
block|}
else|else
block|{
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
throw|throw
name|exception
throw|;
return|return
literal|null
return|;
block|}
block|}
specifier|protected
name|Long
name|delete
parameter_list|(
name|Long
name|locationId
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|boolean
name|future
parameter_list|)
block|{
if|if
condition|(
name|locationId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
name|Long
name|permId
init|=
literal|null
decl_stmt|;
name|String
name|roomName
init|=
literal|null
decl_stmt|,
name|sessionLabel
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|LocationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Location
name|location
init|=
name|LocationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|locationId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|location
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|roomName
operator|=
name|location
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|sessionLabel
operator|=
name|location
operator|.
name|getSession
argument_list|()
operator|.
name|getLabel
argument_list|()
expr_stmt|;
if|if
condition|(
name|future
condition|)
block|{
if|if
condition|(
name|location
operator|instanceof
name|Room
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
operator|(
name|Room
operator|)
name|location
argument_list|,
name|Right
operator|.
name|RoomDelete
argument_list|)
condition|)
return|return
literal|null
return|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
operator|(
name|NonUniversityLocation
operator|)
name|location
argument_list|,
name|Right
operator|.
name|NonUniversityLocationDelete
argument_list|)
condition|)
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|location
operator|instanceof
name|Room
condition|)
name|context
operator|.
name|checkPermission
argument_list|(
operator|(
name|Room
operator|)
name|location
argument_list|,
name|Right
operator|.
name|RoomDelete
argument_list|)
expr_stmt|;
else|else
name|context
operator|.
name|checkPermission
argument_list|(
operator|(
name|NonUniversityLocation
operator|)
name|location
argument_list|,
name|Right
operator|.
name|NonUniversityLocationDelete
argument_list|)
expr_stmt|;
block|}
name|permId
operator|=
name|location
operator|.
name|getPermanentId
argument_list|()
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
name|location
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|ROOM_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
name|location
operator|.
name|getControllingDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|List
name|roomPrefs
init|=
name|hibSession
operator|.
name|createCriteria
argument_list|(
name|RoomPref
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
name|Restrictions
operator|.
name|eq
argument_list|(
literal|"room.uniqueId"
argument_list|,
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|location
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Department
name|d
init|=
name|rd
operator|.
name|getDepartment
argument_list|()
decl_stmt|;
name|d
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|remove
argument_list|(
name|rd
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|rd
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|roomPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomPref
name|rp
init|=
operator|(
name|RoomPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|rp
operator|.
name|getOwner
argument_list|()
operator|.
name|getPreferences
argument_list|()
operator|.
name|remove
argument_list|(
name|rp
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|rp
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|rp
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|location
operator|.
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Assignment
name|a
init|=
operator|(
name|Assignment
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|a
operator|.
name|getRooms
argument_list|()
operator|.
name|remove
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|hibSession
operator|.
name|delete
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|tx
operator|=
literal|null
expr_stmt|;
return|return
name|permId
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|future
condition|)
throw|throw
operator|new
name|RoomException
argument_list|(
name|MESSAGES
operator|.
name|failedDeleteLocation
argument_list|(
name|roomName
argument_list|,
name|sessionLabel
argument_list|,
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|t
argument_list|)
throw|;
else|else
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|Location
name|update
parameter_list|(
name|RoomDetailInterface
name|room
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|boolean
name|future
parameter_list|,
name|int
name|flags
parameter_list|,
name|List
argument_list|<
name|ExamType
argument_list|>
name|examTypes
parameter_list|)
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
name|String
name|roomName
init|=
literal|null
decl_stmt|,
name|sessionLabel
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|LocationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Location
name|location
init|=
name|LocationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|location
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|sessionLabel
operator|=
name|location
operator|.
name|getSession
argument_list|()
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|boolean
name|canEdit
init|=
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|location
operator|instanceof
name|Room
condition|?
name|Right
operator|.
name|RoomEdit
else|:
name|Right
operator|.
name|NonUniversityLocationEdit
argument_list|)
decl_stmt|;
if|if
condition|(
name|canEdit
operator|&&
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditChangeRoomProperties
argument_list|)
operator|&&
name|FutureOperation
operator|.
name|ROOM_PROPERTIES
operator|.
name|in
argument_list|(
name|flags
argument_list|)
condition|)
block|{
if|if
condition|(
name|location
operator|instanceof
name|Room
condition|)
block|{
name|Building
name|building
init|=
name|lookupBuilding
argument_list|(
name|hibSession
argument_list|,
name|room
operator|.
name|getBuilding
argument_list|()
argument_list|,
name|future
argument_list|,
name|location
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|future
operator|&&
name|room
operator|.
name|getBuilding
argument_list|()
operator|!=
literal|null
operator|&&
name|building
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RoomException
argument_list|(
name|MESSAGES
operator|.
name|errorBuildingNotExist
argument_list|(
name|room
operator|.
name|getBuilding
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
argument_list|)
throw|;
name|Room
name|other
init|=
name|Room
operator|.
name|findByBldgIdRoomNbr
argument_list|(
name|building
operator|!=
literal|null
condition|?
name|building
operator|.
name|getUniqueId
argument_list|()
else|:
operator|(
operator|(
name|Room
operator|)
name|location
operator|)
operator|.
name|getBuilding
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|room
operator|.
name|getName
argument_list|()
argument_list|,
name|location
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|other
operator|!=
literal|null
operator|&&
operator|!
name|location
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|RoomException
argument_list|(
name|MESSAGES
operator|.
name|errorRoomAlreadyExists
argument_list|(
name|roomName
argument_list|)
argument_list|)
throw|;
if|if
condition|(
name|building
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|Room
operator|)
name|location
operator|)
operator|.
name|setBuilding
argument_list|(
name|building
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Room
operator|)
name|location
operator|)
operator|.
name|setBuildingAbbv
argument_list|(
name|building
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|Room
operator|)
name|location
operator|)
operator|.
name|setRoomNumber
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|room
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|nonUniversityLocationRegex
init|=
name|ApplicationProperty
operator|.
name|NonUniversityLocationPattern
operator|.
name|value
argument_list|()
decl_stmt|;
name|String
name|nonUniversityLocationInfo
init|=
name|ApplicationProperty
operator|.
name|NonUniversityLocationPatternInfo
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|nonUniversityLocationRegex
operator|!=
literal|null
operator|&&
name|nonUniversityLocationRegex
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|nonUniversityLocationRegex
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RoomException
argument_list|(
name|nonUniversityLocationInfo
operator|==
literal|null
operator|||
name|nonUniversityLocationInfo
operator|.
name|isEmpty
argument_list|()
condition|?
name|MESSAGES
operator|.
name|errorLocationNameDoesNotMeetRequiredPattern
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
name|nonUniversityLocationRegex
argument_list|)
else|:
name|nonUniversityLocationInfo
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|RoomException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RoomException
argument_list|(
name|MESSAGES
operator|.
name|errorLocationNameDoesNotMeetRequiredPatternWithReason
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
name|nonUniversityLocationRegex
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
operator|(
operator|(
name|NonUniversityLocation
operator|)
name|location
operator|)
operator|.
name|setName
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|location
operator|.
name|setIgnoreTooFar
argument_list|(
name|room
operator|.
name|isIgnoreTooFar
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setIgnoreRoomCheck
argument_list|(
name|room
operator|.
name|isIgnoreRoomCheck
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setCoordinateX
argument_list|(
name|room
operator|.
name|getX
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setCoordinateY
argument_list|(
name|room
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setArea
argument_list|(
name|room
operator|.
name|getArea
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setDisplayName
argument_list|(
name|room
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|canEdit
operator|&&
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditChangeCapacity
argument_list|)
operator|&&
name|FutureOperation
operator|.
name|ROOM_PROPERTIES
operator|.
name|in
argument_list|(
name|flags
argument_list|)
condition|)
block|{
name|location
operator|.
name|setCapacity
argument_list|(
name|room
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|canEdit
operator|&&
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditChangeExternalId
argument_list|)
operator|&&
name|FutureOperation
operator|.
name|ROOM_PROPERTIES
operator|.
name|in
argument_list|(
name|flags
argument_list|)
condition|)
block|{
name|location
operator|.
name|setExternalUniqueId
argument_list|(
name|room
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|canEdit
operator|&&
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditChangeType
argument_list|)
operator|&&
name|FutureOperation
operator|.
name|ROOM_PROPERTIES
operator|.
name|in
argument_list|(
name|flags
argument_list|)
condition|)
block|{
name|RoomType
name|type
init|=
name|lookupRoomType
argument_list|(
name|hibSession
argument_list|,
name|room
operator|.
name|getRoomType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|type
operator|.
name|isRoom
argument_list|()
operator|&&
name|location
operator|instanceof
name|Room
operator|)
operator|||
operator|!
operator|(
name|type
operator|.
name|isRoom
argument_list|()
operator|&&
name|location
operator|instanceof
name|NonUniversityLocation
operator|)
operator|)
condition|)
name|location
operator|.
name|setRoomType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
name|String
name|oldNote
init|=
name|location
operator|.
name|getNote
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditChangeEventProperties
argument_list|)
operator|&&
name|FutureOperation
operator|.
name|EVENT_PROPERTIES
operator|.
name|in
argument_list|(
name|flags
argument_list|)
condition|)
block|{
name|Department
name|eventDepartment
init|=
name|lookuDepartment
argument_list|(
name|hibSession
argument_list|,
name|room
operator|.
name|getEventDepartment
argument_list|()
argument_list|,
name|future
argument_list|,
name|location
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|future
operator|||
name|room
operator|.
name|getEventDepartment
argument_list|()
operator|==
literal|null
operator|||
name|eventDepartment
operator|!=
literal|null
condition|)
block|{
name|location
operator|.
name|setEventDepartment
argument_list|(
name|eventDepartment
argument_list|)
expr_stmt|;
block|}
name|location
operator|.
name|setBreakTime
argument_list|(
name|room
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|future
condition|)
name|location
operator|.
name|setEventStatus
argument_list|(
name|room
operator|.
name|getEventStatus
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setNote
argument_list|(
name|room
operator|.
name|getEventNote
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|room
operator|.
name|getEventNote
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|2048
condition|?
name|room
operator|.
name|getEventNote
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2048
argument_list|)
else|:
name|room
operator|.
name|getEventNote
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|canEdit
operator|&&
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditChangeExaminationStatus
argument_list|)
operator|&&
name|FutureOperation
operator|.
name|EXAM_PROPERTIES
operator|.
name|in
argument_list|(
name|flags
argument_list|)
condition|)
block|{
name|location
operator|.
name|setExamCapacity
argument_list|(
name|room
operator|.
name|getExamCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|examTypesChanged
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|ExamType
argument_list|>
name|types
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|future
condition|)
block|{
name|types
operator|=
name|ExamType
operator|.
name|findAllApplicable
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ExamView
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ExamTimetable
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ExamType
argument_list|>
name|i
init|=
name|types
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
if|if
condition|(
operator|!
name|examTypes
operator|.
name|contains
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|types
operator|=
name|examTypes
expr_stmt|;
block|}
for|for
control|(
name|ExamType
name|type
range|:
name|types
control|)
block|{
if|if
condition|(
operator|(
name|room
operator|.
name|getExamType
argument_list|(
name|type
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|type
operator|.
name|getReference
argument_list|()
argument_list|)
operator|!=
literal|null
operator|)
operator|!=
name|location
operator|.
name|getExamTypes
argument_list|()
operator|.
name|contains
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|examTypesChanged
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|examTypesChanged
condition|)
block|{
name|List
argument_list|<
name|ExamType
argument_list|>
name|readOnlyTypes
init|=
operator|new
name|ArrayList
argument_list|<
name|ExamType
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamType
name|t
range|:
name|location
operator|.
name|getExamTypes
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|types
operator|.
name|contains
argument_list|(
name|t
argument_list|)
condition|)
name|readOnlyTypes
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
comment|// Examination types has changed -- apply brute force to avoid unique constraint (PK_ROOM_EXAM_TYPE) violation
if|if
condition|(
operator|!
name|location
operator|.
name|getExamTypes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|location
operator|.
name|getExamTypes
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|ExamType
name|type
range|:
name|types
control|)
block|{
if|if
condition|(
name|room
operator|.
name|getExamType
argument_list|(
name|type
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|type
operator|.
name|getReference
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
name|location
operator|.
name|getExamTypes
argument_list|()
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ExamType
name|type
range|:
name|readOnlyTypes
control|)
name|location
operator|.
name|getExamTypes
argument_list|()
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|EditRoomDepartmentsExams
argument_list|)
operator|&&
name|FutureOperation
operator|.
name|EXAM_PREFS
operator|.
name|in
argument_list|(
name|flags
argument_list|)
condition|)
block|{
for|for
control|(
name|ExamType
name|type
range|:
name|location
operator|.
name|getExamTypes
argument_list|()
control|)
block|{
name|PeriodPreferenceModel
name|model
init|=
name|room
operator|.
name|getPeriodPreferenceModel
argument_list|(
name|type
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|model
operator|!=
literal|null
operator|&&
name|examTypes
operator|.
name|contains
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|location
operator|.
name|clearExamPreferences
argument_list|(
name|type
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ExamPeriod
name|period
range|:
operator|(
name|List
argument_list|<
name|ExamPeriod
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from ExamPeriod ep where ep.session.uniqueId=:sessionId and ep.examType.uniqueId=:typeId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|location
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"typeId"
argument_list|,
name|type
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|PreferenceInterface
name|pref
init|=
name|model
operator|.
name|getPreference
argument_list|(
name|period
operator|.
name|getDateOffset
argument_list|()
argument_list|,
name|period
operator|.
name|getStartSlot
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|!=
literal|null
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
name|location
operator|.
name|addExamPreference
argument_list|(
name|period
argument_list|,
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|pref
operator|.
name|getCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditAvailability
argument_list|)
operator|&&
name|FutureOperation
operator|.
name|ROOM_SHARING
operator|.
name|in
argument_list|(
name|flags
argument_list|)
condition|)
block|{
if|if
condition|(
name|room
operator|.
name|hasRoomSharingModel
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Character
argument_list|>
name|dept2char
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Character
argument_list|>
argument_list|()
decl_stmt|;
name|dept2char
operator|.
name|put
argument_list|(
operator|-
literal|1l
argument_list|,
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomSharingModel
operator|.
name|sFreeForAllPrefChar
argument_list|)
expr_stmt|;
name|dept2char
operator|.
name|put
argument_list|(
operator|-
literal|2l
argument_list|,
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomSharingModel
operator|.
name|sNotAvailablePrefChar
argument_list|)
expr_stmt|;
name|String
name|managerIds
init|=
literal|""
decl_stmt|;
name|char
name|pref
init|=
literal|'0'
decl_stmt|;
name|Set
argument_list|<
name|Department
argument_list|>
name|add
init|=
operator|new
name|HashSet
argument_list|<
name|Department
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Department
argument_list|>
name|id2dept
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Department
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RoomSharingOption
name|option
range|:
name|room
operator|.
name|getRoomSharingModel
argument_list|()
operator|.
name|getOptions
argument_list|()
control|)
block|{
if|if
condition|(
name|option
operator|.
name|getId
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|Department
name|d
init|=
name|lookuDepartment
argument_list|(
name|hibSession
argument_list|,
name|option
operator|.
name|getId
argument_list|()
argument_list|,
name|future
argument_list|,
name|location
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
name|id2dept
operator|.
name|put
argument_list|(
name|option
operator|.
name|getId
argument_list|()
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|managerIds
operator|+=
operator|(
name|managerIds
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
name|d
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|dept2char
operator|.
name|put
argument_list|(
name|option
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|Character
argument_list|(
name|pref
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|add
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dept2char
operator|.
name|put
argument_list|(
name|option
operator|.
name|getId
argument_list|()
argument_list|,
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomSharingModel
operator|.
name|sFreeForAllPrefChar
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|pattern
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
literal|7
condition|;
name|d
operator|++
control|)
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
literal|288
condition|;
name|s
operator|++
control|)
block|{
name|RoomSharingOption
name|option
init|=
name|room
operator|.
name|getRoomSharingModel
argument_list|()
operator|.
name|getOption
argument_list|(
name|d
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|pattern
operator|+=
name|dept2char
operator|.
name|get
argument_list|(
name|option
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|location
operator|.
name|setManagerIds
argument_list|(
name|managerIds
argument_list|)
expr_stmt|;
name|location
operator|.
name|setPattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|RoomDept
argument_list|>
name|i
init|=
name|location
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|add
operator|.
name|remove
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
block|{
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|remove
argument_list|(
name|rd
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|rd
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Department
name|d
range|:
name|add
control|)
block|{
name|RoomDept
name|rd
init|=
operator|new
name|RoomDept
argument_list|()
decl_stmt|;
name|rd
operator|.
name|setControl
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|rd
operator|.
name|setDepartment
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|add
argument_list|(
name|rd
argument_list|)
expr_stmt|;
name|rd
operator|.
name|setRoom
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|location
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|add
argument_list|(
name|rd
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|rd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|room
operator|.
name|getRoomSharingModel
argument_list|()
operator|.
name|isNoteEditable
argument_list|()
condition|)
block|{
if|if
condition|(
name|room
operator|.
name|getRoomSharingModel
argument_list|()
operator|.
name|hasNote
argument_list|()
condition|)
name|location
operator|.
name|setShareNote
argument_list|(
name|room
operator|.
name|getRoomSharingModel
argument_list|()
operator|.
name|getNote
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|2048
condition|?
name|room
operator|.
name|getRoomSharingModel
argument_list|()
operator|.
name|getNote
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2048
argument_list|)
else|:
name|room
operator|.
name|getRoomSharingModel
argument_list|()
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|location
operator|.
name|setShareNote
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|room
operator|.
name|hasDepartments
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|RoomDept
argument_list|>
name|rds
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|RoomDept
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RoomDept
name|rd
range|:
name|location
operator|.
name|getRoomDepts
argument_list|()
control|)
name|rds
operator|.
name|put
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|rd
argument_list|)
expr_stmt|;
for|for
control|(
name|DepartmentInterface
name|department
range|:
name|room
operator|.
name|getDepartments
argument_list|()
control|)
block|{
name|Department
name|d
init|=
name|lookuDepartment
argument_list|(
name|hibSession
argument_list|,
name|department
argument_list|,
name|future
argument_list|,
name|location
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
operator|&&
name|rds
operator|.
name|remove
argument_list|(
name|d
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|RoomDept
name|rd
init|=
operator|new
name|RoomDept
argument_list|()
decl_stmt|;
name|rd
operator|.
name|setControl
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|rd
operator|.
name|setDepartment
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|add
argument_list|(
name|rd
argument_list|)
expr_stmt|;
name|rd
operator|.
name|setRoom
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|location
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|add
argument_list|(
name|rd
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|rd
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|RoomDept
name|rd
range|:
name|rds
operator|.
name|values
argument_list|()
control|)
block|{
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|remove
argument_list|(
name|rd
argument_list|)
expr_stmt|;
name|location
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|remove
argument_list|(
name|rd
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|rd
argument_list|)
expr_stmt|;
block|}
name|location
operator|.
name|setShareNote
argument_list|(
name|room
operator|.
name|getRoomSharingNote
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditPreference
argument_list|)
operator|&&
name|FutureOperation
operator|.
name|ROOM_SHARING
operator|.
name|in
argument_list|(
name|flags
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|PreferenceLevel
argument_list|>
name|dept2pref
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|room
operator|.
name|hasRoomSharingModel
argument_list|()
condition|)
block|{
name|dept2pref
operator|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|PreferenceLevel
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|RoomSharingOption
name|option
range|:
name|room
operator|.
name|getRoomSharingModel
argument_list|()
operator|.
name|getOptions
argument_list|()
control|)
block|{
if|if
condition|(
name|option
operator|.
name|getId
argument_list|()
operator|>=
literal|0
operator|&&
name|option
operator|.
name|isEditable
argument_list|()
operator|&&
name|option
operator|.
name|hasPreference
argument_list|()
condition|)
block|{
name|Department
name|d
init|=
name|lookuDepartment
argument_list|(
name|hibSession
argument_list|,
name|option
operator|.
name|getId
argument_list|()
argument_list|,
name|future
argument_list|,
name|location
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
name|dept2pref
operator|.
name|put
argument_list|(
name|d
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|PreferenceLevelDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|option
operator|.
name|getPreference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|room
operator|.
name|hasDepartments
argument_list|()
condition|)
block|{
name|dept2pref
operator|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|PreferenceLevel
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|DepartmentInterface
name|department
range|:
name|room
operator|.
name|getDepartments
argument_list|()
control|)
block|{
if|if
condition|(
name|department
operator|.
name|getPreference
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|Department
name|d
init|=
name|lookuDepartment
argument_list|(
name|hibSession
argument_list|,
name|department
argument_list|,
name|future
argument_list|,
name|location
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
name|dept2pref
operator|.
name|put
argument_list|(
name|d
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|lookupPreferenceLevel
argument_list|(
name|hibSession
argument_list|,
name|department
operator|.
name|getPreference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|dept2pref
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RoomDept
name|rd
range|:
name|location
operator|.
name|getRoomDepts
argument_list|()
control|)
block|{
name|PreferenceLevel
name|pref
init|=
name|dept2pref
operator|.
name|get
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|RoomPref
name|rp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RoomPref
name|x
range|:
operator|(
name|Set
argument_list|<
name|RoomPref
argument_list|>
operator|)
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|getRoomPreferences
argument_list|()
control|)
block|{
if|if
condition|(
name|x
operator|.
name|getRoom
argument_list|()
operator|.
name|equals
argument_list|(
name|location
argument_list|)
condition|)
block|{
name|rp
operator|=
name|x
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|rp
operator|==
literal|null
operator|&&
name|pref
operator|!=
literal|null
operator|&&
operator|!
name|pref
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
condition|)
block|{
name|rp
operator|=
operator|new
name|RoomPref
argument_list|()
expr_stmt|;
name|rp
operator|.
name|setRoom
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setPrefLevel
argument_list|(
name|pref
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setOwner
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|rp
argument_list|)
expr_stmt|;
name|rd
operator|.
name|setPreference
argument_list|(
name|pref
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|rp
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|rp
operator|!=
literal|null
operator|&&
operator|(
name|pref
operator|==
literal|null
operator|||
name|pref
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
operator|)
condition|)
block|{
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|getPreferences
argument_list|()
operator|.
name|remove
argument_list|(
name|rp
argument_list|)
expr_stmt|;
name|rd
operator|.
name|setPreference
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|rp
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|rp
operator|!=
literal|null
operator|&&
operator|!
name|rp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
block|{
name|rp
operator|.
name|setPrefLevel
argument_list|(
name|pref
argument_list|)
expr_stmt|;
name|rd
operator|.
name|setPreference
argument_list|(
name|pref
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|rp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditFeatures
argument_list|)
operator|&&
name|FutureOperation
operator|.
name|FEATURES
operator|.
name|in
argument_list|(
name|flags
argument_list|)
condition|)
block|{
name|boolean
name|editGlobalFeatures
init|=
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditGlobalFeatures
argument_list|)
decl_stmt|;
name|boolean
name|deptIndependent
init|=
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|RoomFeature
argument_list|>
name|features
init|=
operator|new
name|HashSet
argument_list|<
name|RoomFeature
argument_list|>
argument_list|(
name|location
operator|.
name|getFeatures
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FeatureInterface
name|f
range|:
name|room
operator|.
name|getFeatures
argument_list|()
control|)
block|{
name|RoomFeature
name|feature
init|=
name|lookupFeature
argument_list|(
name|hibSession
argument_list|,
name|f
argument_list|,
name|future
argument_list|,
name|location
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|feature
operator|!=
literal|null
operator|&&
operator|!
name|features
operator|.
name|remove
argument_list|(
name|feature
argument_list|)
condition|)
block|{
if|if
condition|(
name|feature
operator|instanceof
name|GlobalRoomFeature
operator|&&
operator|!
name|editGlobalFeatures
condition|)
continue|continue;
if|if
condition|(
name|feature
operator|instanceof
name|DepartmentRoomFeature
operator|&&
operator|!
name|deptIndependent
operator|&&
operator|!
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasQualifier
argument_list|(
operator|(
operator|(
name|DepartmentRoomFeature
operator|)
name|feature
operator|)
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
continue|continue;
name|location
operator|.
name|getFeatures
argument_list|()
operator|.
name|add
argument_list|(
name|feature
argument_list|)
expr_stmt|;
name|feature
operator|.
name|getRooms
argument_list|()
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|feature
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|RoomFeature
name|feature
range|:
name|features
control|)
block|{
if|if
condition|(
name|feature
operator|instanceof
name|GlobalRoomFeature
operator|&&
operator|!
name|editGlobalFeatures
condition|)
continue|continue;
if|if
condition|(
name|feature
operator|instanceof
name|DepartmentRoomFeature
operator|&&
operator|!
name|deptIndependent
operator|&&
operator|!
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasQualifier
argument_list|(
operator|(
operator|(
name|DepartmentRoomFeature
operator|)
name|feature
operator|)
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|future
condition|)
block|{
name|FeatureInterface
name|f
init|=
operator|new
name|FeatureInterface
argument_list|(
name|feature
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|feature
operator|.
name|getAbbv
argument_list|()
argument_list|,
name|feature
operator|.
name|getLabel
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|feature
operator|instanceof
name|DepartmentRoomFeature
condition|)
name|f
operator|.
name|setDepartment
argument_list|(
operator|new
name|DepartmentInterface
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lookupFeature
argument_list|(
name|hibSession
argument_list|,
name|f
argument_list|,
name|future
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
continue|continue;
block|}
name|location
operator|.
name|getFeatures
argument_list|()
operator|.
name|remove
argument_list|(
name|feature
argument_list|)
expr_stmt|;
name|feature
operator|.
name|getRooms
argument_list|()
operator|.
name|remove
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|feature
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditGroups
argument_list|)
operator|&&
name|FutureOperation
operator|.
name|GROUPS
operator|.
name|in
argument_list|(
name|flags
argument_list|)
condition|)
block|{
name|boolean
name|editGlobalGroups
init|=
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditGlobalGroups
argument_list|)
decl_stmt|;
name|boolean
name|deptIndependent
init|=
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|RoomGroup
argument_list|>
name|groups
init|=
operator|new
name|HashSet
argument_list|<
name|RoomGroup
argument_list|>
argument_list|(
name|location
operator|.
name|getRoomGroups
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|GroupInterface
name|g
range|:
name|room
operator|.
name|getGroups
argument_list|()
control|)
block|{
name|RoomGroup
name|group
init|=
name|lookupGroup
argument_list|(
name|hibSession
argument_list|,
name|g
argument_list|,
name|future
argument_list|,
name|location
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
operator|&&
operator|!
name|groups
operator|.
name|remove
argument_list|(
name|group
argument_list|)
condition|)
block|{
if|if
condition|(
name|group
operator|.
name|isGlobal
argument_list|()
operator|&&
operator|!
name|editGlobalGroups
condition|)
continue|continue;
if|if
condition|(
operator|!
name|group
operator|.
name|isGlobal
argument_list|()
operator|&&
operator|!
name|deptIndependent
operator|&&
operator|!
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasQualifier
argument_list|(
name|group
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
continue|continue;
name|location
operator|.
name|getRoomGroups
argument_list|()
operator|.
name|add
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|group
operator|.
name|getRooms
argument_list|()
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|RoomGroup
name|group
range|:
name|groups
control|)
block|{
if|if
condition|(
name|group
operator|.
name|isGlobal
argument_list|()
operator|&&
operator|!
name|editGlobalGroups
condition|)
continue|continue;
if|if
condition|(
operator|!
name|group
operator|.
name|isGlobal
argument_list|()
operator|&&
operator|!
name|deptIndependent
operator|&&
operator|!
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasQualifier
argument_list|(
name|group
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|future
condition|)
block|{
name|GroupInterface
name|g
init|=
operator|new
name|GroupInterface
argument_list|(
name|group
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|group
operator|.
name|getAbbv
argument_list|()
argument_list|,
name|group
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|group
operator|.
name|isGlobal
argument_list|()
condition|)
name|g
operator|.
name|setDepartment
argument_list|(
operator|new
name|DepartmentInterface
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lookupGroup
argument_list|(
name|hibSession
argument_list|,
name|g
argument_list|,
name|future
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
continue|continue;
block|}
name|location
operator|.
name|getRoomGroups
argument_list|()
operator|.
name|remove
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|group
operator|.
name|getRooms
argument_list|()
operator|.
name|remove
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditChangeControll
argument_list|)
operator|&&
name|FutureOperation
operator|.
name|ROOM_PROPERTIES
operator|.
name|in
argument_list|(
name|flags
argument_list|)
condition|)
block|{
name|Department
name|d
init|=
name|lookuDepartment
argument_list|(
name|hibSession
argument_list|,
name|room
operator|.
name|getControlDepartment
argument_list|()
argument_list|,
name|future
argument_list|,
name|location
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|future
operator|||
name|room
operator|.
name|getControlDepartment
argument_list|()
operator|==
literal|null
operator|||
name|d
operator|!=
literal|null
condition|)
for|for
control|(
name|RoomDept
name|rd
range|:
name|location
operator|.
name|getRoomDepts
argument_list|()
control|)
name|rd
operator|.
name|setControl
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|equals
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditEventAvailability
argument_list|)
operator|&&
name|room
operator|.
name|hasEventAvailabilityModel
argument_list|()
operator|&&
name|FutureOperation
operator|.
name|EVENT_AVAILABILITY
operator|.
name|in
argument_list|(
name|flags
argument_list|)
condition|)
block|{
name|String
name|availability
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
literal|7
condition|;
name|d
operator|++
control|)
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
literal|288
condition|;
name|s
operator|++
control|)
block|{
name|RoomSharingOption
name|option
init|=
name|room
operator|.
name|getEventAvailabilityModel
argument_list|()
operator|.
name|getOption
argument_list|(
name|d
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|availability
operator|+=
operator|(
name|option
operator|.
name|getId
argument_list|()
operator|==
operator|-
literal|1l
condition|?
literal|'0'
else|:
literal|'1'
operator|)
expr_stmt|;
block|}
name|location
operator|.
name|setEventAvailability
argument_list|(
name|availability
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|location
argument_list|)
expr_stmt|;
for|for
control|(
name|RoomDept
name|rd
range|:
name|location
operator|.
name|getRoomDepts
argument_list|()
control|)
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|rd
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditChangeEventProperties
argument_list|)
operator|&&
operator|!
operator|(
name|oldNote
operator|==
literal|null
condition|?
literal|""
else|:
name|oldNote
operator|)
operator|.
name|equals
argument_list|(
name|location
operator|.
name|getNote
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|location
operator|.
name|getNote
argument_list|()
argument_list|)
operator|&&
name|FutureOperation
operator|.
name|EVENT_PROPERTIES
operator|.
name|in
argument_list|(
name|flags
argument_list|)
condition|)
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
name|location
argument_list|,
operator|(
name|location
operator|.
name|getNote
argument_list|()
operator|==
literal|null
operator|||
name|location
operator|.
name|getNote
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"-"
else|:
name|location
operator|.
name|getNote
argument_list|()
operator|)
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|ROOM_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|NOTE
argument_list|,
literal|null
argument_list|,
name|location
operator|.
name|getControllingDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
operator|(
name|Location
operator|)
name|location
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|ROOM_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
name|location
operator|.
name|getControllingDepartment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditChangePicture
argument_list|)
operator|&&
name|FutureOperation
operator|.
name|PICTURES
operator|.
name|in
argument_list|(
name|flags
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|LocationPicture
argument_list|>
name|temp
init|=
operator|(
name|Map
argument_list|<
name|Long
argument_list|,
name|LocationPicture
argument_list|>
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
name|RoomPictureServlet
operator|.
name|TEMP_ROOM_PICTURES
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|LocationPicture
argument_list|>
name|pictures
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|LocationPicture
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|future
condition|)
block|{
name|Set
argument_list|<
name|LocationPicture
argument_list|>
name|otherPictures
init|=
operator|new
name|HashSet
argument_list|<
name|LocationPicture
argument_list|>
argument_list|(
name|location
operator|.
name|getPictures
argument_list|()
argument_list|)
decl_stmt|;
name|p1
label|:
for|for
control|(
name|RoomPictureInterface
name|p1
range|:
name|room
operator|.
name|getPictures
argument_list|()
control|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|LocationPicture
argument_list|>
name|i
init|=
name|otherPictures
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|LocationPicture
name|p2
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|samePicture
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|sameType
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
condition|)
block|{
name|p2
operator|.
name|setType
argument_list|(
name|p1
operator|.
name|getPictureType
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|AttachmentTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|p1
operator|.
name|getPictureType
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|p2
argument_list|)
expr_stmt|;
block|}
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue
name|p1
continue|;
block|}
block|}
if|if
condition|(
name|location
operator|instanceof
name|Room
condition|)
block|{
name|RoomPicture
name|original
init|=
name|RoomPictureDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|p1
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|original
operator|!=
literal|null
condition|)
block|{
name|RoomPicture
name|p2
init|=
name|original
operator|.
name|clonePicture
argument_list|()
decl_stmt|;
name|p2
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Room
operator|)
name|location
operator|)
operator|.
name|getPictures
argument_list|()
operator|.
name|add
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|p2
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|NonUniversityLocationPicture
name|original
init|=
name|NonUniversityLocationPictureDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|p1
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|original
operator|!=
literal|null
condition|)
block|{
name|NonUniversityLocationPicture
name|p2
init|=
name|original
operator|.
name|clonePicture
argument_list|()
decl_stmt|;
name|p2
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
operator|(
operator|(
name|NonUniversityLocation
operator|)
name|location
operator|)
operator|.
name|getPictures
argument_list|()
operator|.
name|add
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|p2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|LocationPicture
name|picture
range|:
name|otherPictures
control|)
block|{
name|location
operator|.
name|getPictures
argument_list|()
operator|.
name|remove
argument_list|(
name|picture
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|picture
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|LocationPicture
name|p
range|:
name|location
operator|.
name|getPictures
argument_list|()
control|)
name|pictures
operator|.
name|put
argument_list|(
name|p
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
for|for
control|(
name|RoomPictureInterface
name|p
range|:
name|room
operator|.
name|getPictures
argument_list|()
control|)
block|{
name|LocationPicture
name|picture
init|=
name|pictures
operator|.
name|remove
argument_list|(
name|p
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|picture
operator|==
literal|null
operator|&&
name|temp
operator|!=
literal|null
condition|)
block|{
name|picture
operator|=
name|temp
operator|.
name|get
argument_list|(
name|p
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|picture
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|location
operator|instanceof
name|Room
condition|)
block|{
operator|(
operator|(
name|RoomPicture
operator|)
name|picture
operator|)
operator|.
name|setLocation
argument_list|(
operator|(
name|Room
operator|)
name|location
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Room
operator|)
name|location
operator|)
operator|.
name|getPictures
argument_list|()
operator|.
name|add
argument_list|(
operator|(
name|RoomPicture
operator|)
name|picture
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|NonUniversityLocationPicture
operator|)
name|picture
operator|)
operator|.
name|setLocation
argument_list|(
operator|(
name|NonUniversityLocation
operator|)
name|location
argument_list|)
expr_stmt|;
operator|(
operator|(
name|NonUniversityLocation
operator|)
name|location
operator|)
operator|.
name|getPictures
argument_list|()
operator|.
name|add
argument_list|(
operator|(
name|NonUniversityLocationPicture
operator|)
name|picture
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|.
name|getPictureType
argument_list|()
operator|!=
literal|null
condition|)
name|picture
operator|.
name|setType
argument_list|(
name|AttachmentTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|p
operator|.
name|getPictureType
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|picture
argument_list|)
expr_stmt|;
name|p
operator|.
name|setUniqueId
argument_list|(
name|picture
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|picture
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|getPictureType
argument_list|()
operator|!=
literal|null
condition|)
name|picture
operator|.
name|setType
argument_list|(
name|AttachmentTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|p
operator|.
name|getPictureType
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|picture
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|LocationPicture
name|picture
range|:
name|pictures
operator|.
name|values
argument_list|()
control|)
block|{
name|location
operator|.
name|getPictures
argument_list|()
operator|.
name|remove
argument_list|(
name|picture
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|picture
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|tx
operator|=
literal|null
expr_stmt|;
return|return
name|location
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|future
condition|)
throw|throw
operator|new
name|RoomException
argument_list|(
name|MESSAGES
operator|.
name|failedUpdateLocation
argument_list|(
name|roomName
argument_list|,
name|sessionLabel
argument_list|,
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|t
argument_list|)
throw|;
else|else
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|Location
name|create
parameter_list|(
name|RoomDetailInterface
name|room
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|Long
name|sessionId
parameter_list|,
name|Long
name|permId
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
name|String
name|roomName
init|=
name|room
operator|.
name|getLabel
argument_list|()
decl_stmt|,
name|sessionLabel
init|=
literal|null
decl_stmt|;
name|boolean
name|future
init|=
operator|(
name|sessionId
operator|!=
literal|null
operator|)
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|LocationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
operator|==
literal|null
condition|?
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
else|:
name|sessionId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|sessionLabel
operator|=
name|session
operator|.
name|getLabel
argument_list|()
expr_stmt|;
if|if
condition|(
name|future
condition|)
block|{
if|if
condition|(
name|room
operator|.
name|getRoomType
argument_list|()
operator|.
name|isRoom
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|AddRoom
argument_list|)
condition|)
return|return
literal|null
return|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|AddNonUnivLocation
argument_list|)
condition|)
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|room
operator|.
name|getRoomType
argument_list|()
operator|.
name|isRoom
argument_list|()
condition|)
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|AddRoom
argument_list|)
expr_stmt|;
else|else
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|AddNonUnivLocation
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|room
operator|.
name|getRoomType
argument_list|()
operator|.
name|isRoom
argument_list|()
condition|)
block|{
block|}
name|Location
name|location
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|room
operator|.
name|getRoomType
argument_list|()
operator|.
name|isRoom
argument_list|()
condition|)
block|{
name|Room
name|r
init|=
operator|new
name|Room
argument_list|()
decl_stmt|;
name|Building
name|b
init|=
name|lookupBuilding
argument_list|(
name|hibSession
argument_list|,
name|room
operator|.
name|getBuilding
argument_list|()
argument_list|,
name|future
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RoomException
argument_list|(
name|MESSAGES
operator|.
name|errorBuildingNotExist
argument_list|(
name|room
operator|.
name|getBuilding
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
argument_list|)
throw|;
name|Room
name|other
init|=
name|Room
operator|.
name|findByBldgIdRoomNbr
argument_list|(
name|b
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|room
operator|.
name|getName
argument_list|()
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|other
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|RoomException
argument_list|(
name|MESSAGES
operator|.
name|errorRoomAlreadyExists
argument_list|(
name|roomName
argument_list|)
argument_list|)
throw|;
name|r
operator|.
name|setBuilding
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|r
operator|.
name|setBuildingAbbv
argument_list|(
name|b
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setRoomNumber
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setPictures
argument_list|(
operator|new
name|HashSet
argument_list|<
name|RoomPicture
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|=
name|r
expr_stmt|;
block|}
else|else
block|{
name|String
name|nonUniversityLocationRegex
init|=
name|ApplicationProperty
operator|.
name|NonUniversityLocationPattern
operator|.
name|value
argument_list|()
decl_stmt|;
name|String
name|nonUniversityLocationInfo
init|=
name|ApplicationProperty
operator|.
name|NonUniversityLocationPatternInfo
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|nonUniversityLocationRegex
operator|!=
literal|null
operator|&&
name|nonUniversityLocationRegex
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|nonUniversityLocationRegex
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RoomException
argument_list|(
name|nonUniversityLocationInfo
operator|==
literal|null
operator|||
name|nonUniversityLocationInfo
operator|.
name|isEmpty
argument_list|()
condition|?
name|MESSAGES
operator|.
name|errorLocationNameDoesNotMeetRequiredPattern
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
name|nonUniversityLocationRegex
argument_list|)
else|:
name|nonUniversityLocationInfo
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|RoomException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RoomException
argument_list|(
name|MESSAGES
operator|.
name|errorLocationNameDoesNotMeetRequiredPatternWithReason
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
name|nonUniversityLocationRegex
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|NonUniversityLocation
name|r
init|=
operator|new
name|NonUniversityLocation
argument_list|()
decl_stmt|;
name|r
operator|.
name|setPictures
argument_list|(
operator|new
name|HashSet
argument_list|<
name|NonUniversityLocationPicture
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setName
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|=
name|r
expr_stmt|;
block|}
name|location
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|location
operator|.
name|setIgnoreTooFar
argument_list|(
name|room
operator|.
name|isIgnoreTooFar
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setIgnoreRoomCheck
argument_list|(
name|room
operator|.
name|isIgnoreRoomCheck
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setCoordinateX
argument_list|(
name|room
operator|.
name|getX
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setCoordinateY
argument_list|(
name|room
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setArea
argument_list|(
name|room
operator|.
name|getArea
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setDisplayName
argument_list|(
name|room
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setCapacity
argument_list|(
name|room
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setRoomDepts
argument_list|(
operator|new
name|HashSet
argument_list|<
name|RoomDept
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setExamPreferences
argument_list|(
operator|new
name|HashSet
argument_list|<
name|ExamLocationPref
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setExamTypes
argument_list|(
operator|new
name|HashSet
argument_list|<
name|ExamType
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setRoomDepts
argument_list|(
operator|new
name|HashSet
argument_list|<
name|RoomDept
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setRoomGroups
argument_list|(
operator|new
name|HashSet
argument_list|<
name|RoomGroup
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setFeatures
argument_list|(
operator|new
name|HashSet
argument_list|<
name|RoomFeature
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setRoomType
argument_list|(
name|lookupRoomType
argument_list|(
name|hibSession
argument_list|,
name|room
operator|.
name|getRoomType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|permId
operator|==
literal|null
condition|)
name|LocationPermIdGenerator
operator|.
name|setPermanentId
argument_list|(
name|location
argument_list|)
expr_stmt|;
else|else
name|location
operator|.
name|setPermanentId
argument_list|(
name|permId
argument_list|)
expr_stmt|;
if|if
condition|(
name|room
operator|.
name|hasRoomSharingModel
argument_list|()
operator|&&
name|FutureOperation
operator|.
name|ROOM_SHARING
operator|.
name|in
argument_list|(
name|flags
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Character
argument_list|>
name|dept2char
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Character
argument_list|>
argument_list|()
decl_stmt|;
name|dept2char
operator|.
name|put
argument_list|(
operator|-
literal|1l
argument_list|,
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomSharingModel
operator|.
name|sFreeForAllPrefChar
argument_list|)
expr_stmt|;
name|dept2char
operator|.
name|put
argument_list|(
operator|-
literal|2l
argument_list|,
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomSharingModel
operator|.
name|sNotAvailablePrefChar
argument_list|)
expr_stmt|;
name|String
name|managerIds
init|=
literal|""
decl_stmt|;
name|char
name|pref
init|=
literal|'0'
decl_stmt|;
name|Set
argument_list|<
name|Department
argument_list|>
name|add
init|=
operator|new
name|HashSet
argument_list|<
name|Department
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Department
argument_list|>
name|id2dept
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Department
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RoomSharingOption
name|option
range|:
name|room
operator|.
name|getRoomSharingModel
argument_list|()
operator|.
name|getOptions
argument_list|()
control|)
block|{
if|if
condition|(
name|option
operator|.
name|getId
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|Department
name|d
init|=
name|lookuDepartment
argument_list|(
name|hibSession
argument_list|,
name|option
operator|.
name|getId
argument_list|()
argument_list|,
name|future
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
name|id2dept
operator|.
name|put
argument_list|(
name|option
operator|.
name|getId
argument_list|()
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|managerIds
operator|+=
operator|(
name|managerIds
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
name|d
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|dept2char
operator|.
name|put
argument_list|(
name|option
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|Character
argument_list|(
name|pref
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|add
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dept2char
operator|.
name|put
argument_list|(
name|option
operator|.
name|getId
argument_list|()
argument_list|,
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomSharingModel
operator|.
name|sFreeForAllPrefChar
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|pattern
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
literal|7
condition|;
name|d
operator|++
control|)
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
literal|288
condition|;
name|s
operator|++
control|)
block|{
name|RoomSharingOption
name|option
init|=
name|room
operator|.
name|getRoomSharingModel
argument_list|()
operator|.
name|getOption
argument_list|(
name|d
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|pattern
operator|+=
name|dept2char
operator|.
name|get
argument_list|(
name|option
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|location
operator|.
name|setManagerIds
argument_list|(
name|managerIds
argument_list|)
expr_stmt|;
name|location
operator|.
name|setPattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|Department
name|control
init|=
name|lookuDepartment
argument_list|(
name|hibSession
argument_list|,
name|room
operator|.
name|getControlDepartment
argument_list|()
argument_list|,
name|future
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Department
name|d
range|:
name|add
control|)
block|{
name|RoomDept
name|rd
init|=
operator|new
name|RoomDept
argument_list|()
decl_stmt|;
name|rd
operator|.
name|setControl
argument_list|(
name|d
operator|.
name|equals
argument_list|(
name|control
argument_list|)
argument_list|)
expr_stmt|;
name|rd
operator|.
name|setDepartment
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|add
argument_list|(
name|rd
argument_list|)
expr_stmt|;
name|rd
operator|.
name|setRoom
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|location
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|add
argument_list|(
name|rd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|room
operator|.
name|getRoomSharingModel
argument_list|()
operator|.
name|isNoteEditable
argument_list|()
condition|)
block|{
if|if
condition|(
name|room
operator|.
name|getRoomSharingModel
argument_list|()
operator|.
name|hasNote
argument_list|()
condition|)
name|location
operator|.
name|setShareNote
argument_list|(
name|room
operator|.
name|getRoomSharingModel
argument_list|()
operator|.
name|getNote
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|2048
condition|?
name|room
operator|.
name|getRoomSharingModel
argument_list|()
operator|.
name|getNote
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2048
argument_list|)
else|:
name|room
operator|.
name|getRoomSharingModel
argument_list|()
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|location
operator|.
name|setShareNote
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|room
operator|.
name|hasDepartments
argument_list|()
condition|)
block|{
name|Department
name|control
init|=
operator|(
name|room
operator|.
name|getControlDepartment
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|lookuDepartment
argument_list|(
name|hibSession
argument_list|,
name|room
operator|.
name|getControlDepartment
argument_list|()
argument_list|,
name|future
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
for|for
control|(
name|DepartmentInterface
name|department
range|:
name|room
operator|.
name|getDepartments
argument_list|()
control|)
block|{
name|Department
name|d
init|=
name|lookuDepartment
argument_list|(
name|hibSession
argument_list|,
name|department
argument_list|,
name|future
argument_list|,
name|location
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
name|RoomDept
name|rd
init|=
operator|new
name|RoomDept
argument_list|()
decl_stmt|;
name|rd
operator|.
name|setControl
argument_list|(
name|d
operator|.
name|equals
argument_list|(
name|control
argument_list|)
argument_list|)
expr_stmt|;
name|rd
operator|.
name|setDepartment
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|add
argument_list|(
name|rd
argument_list|)
expr_stmt|;
name|rd
operator|.
name|setRoom
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|location
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|add
argument_list|(
name|rd
argument_list|)
expr_stmt|;
block|}
block|}
name|location
operator|.
name|setShareNote
argument_list|(
name|room
operator|.
name|getRoomSharingNote
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|room
operator|.
name|getControlDepartment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Department
name|dept
init|=
name|lookuDepartment
argument_list|(
name|hibSession
argument_list|,
name|room
operator|.
name|getControlDepartment
argument_list|()
argument_list|,
name|future
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dept
operator|!=
literal|null
condition|)
block|{
name|RoomDept
name|rd
init|=
operator|new
name|RoomDept
argument_list|()
decl_stmt|;
name|rd
operator|.
name|setControl
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rd
operator|.
name|setDepartment
argument_list|(
name|dept
argument_list|)
expr_stmt|;
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|add
argument_list|(
name|rd
argument_list|)
expr_stmt|;
name|rd
operator|.
name|setRoom
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|location
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|add
argument_list|(
name|rd
argument_list|)
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|save
argument_list|(
name|location
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditChangeExternalId
argument_list|)
operator|&&
name|FutureOperation
operator|.
name|ROOM_PROPERTIES
operator|.
name|in
argument_list|(
name|flags
argument_list|)
condition|)
block|{
name|location
operator|.
name|setExternalUniqueId
argument_list|(
name|room
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditChangeEventProperties
argument_list|)
operator|&&
name|FutureOperation
operator|.
name|EVENT_PROPERTIES
operator|.
name|in
argument_list|(
name|flags
argument_list|)
condition|)
block|{
name|Department
name|eventDepartment
init|=
name|lookuDepartment
argument_list|(
name|hibSession
argument_list|,
name|room
operator|.
name|getEventDepartment
argument_list|()
argument_list|,
name|future
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|future
operator|||
name|room
operator|.
name|getEventDepartment
argument_list|()
operator|==
literal|null
operator|||
name|eventDepartment
operator|!=
literal|null
condition|)
block|{
name|location
operator|.
name|setEventDepartment
argument_list|(
name|eventDepartment
argument_list|)
expr_stmt|;
block|}
name|location
operator|.
name|setBreakTime
argument_list|(
name|room
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|future
condition|)
name|location
operator|.
name|setEventStatus
argument_list|(
name|room
operator|.
name|getEventStatus
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setNote
argument_list|(
name|room
operator|.
name|getEventNote
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|room
operator|.
name|getEventNote
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|2048
condition|?
name|room
operator|.
name|getEventNote
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2048
argument_list|)
else|:
name|room
operator|.
name|getEventNote
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditChangeExaminationStatus
argument_list|)
operator|&&
name|FutureOperation
operator|.
name|EXAM_PROPERTIES
operator|.
name|in
argument_list|(
name|flags
argument_list|)
condition|)
block|{
name|location
operator|.
name|setExamCapacity
argument_list|(
name|room
operator|.
name|getExamCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExamType
argument_list|>
name|types
init|=
name|ExamType
operator|.
name|findAll
argument_list|(
name|hibSession
argument_list|)
decl_stmt|;
for|for
control|(
name|ExamType
name|type
range|:
name|types
control|)
block|{
if|if
condition|(
name|room
operator|.
name|getExamType
argument_list|(
name|type
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|type
operator|.
name|getReference
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
name|location
operator|.
name|getExamTypes
argument_list|()
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|EditRoomDepartmentsExams
argument_list|)
operator|&&
name|FutureOperation
operator|.
name|EXAM_PREFS
operator|.
name|in
argument_list|(
name|flags
argument_list|)
condition|)
block|{
for|for
control|(
name|ExamType
name|type
range|:
name|location
operator|.
name|getExamTypes
argument_list|()
control|)
block|{
name|PeriodPreferenceModel
name|model
init|=
name|room
operator|.
name|getPeriodPreferenceModel
argument_list|(
name|type
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|model
operator|!=
literal|null
condition|)
block|{
name|location
operator|.
name|clearExamPreferences
argument_list|(
name|type
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ExamPeriod
name|period
range|:
operator|(
name|List
argument_list|<
name|ExamPeriod
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from ExamPeriod ep where ep.session.uniqueId=:sessionId and ep.examType.uniqueId=:typeId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"typeId"
argument_list|,
name|type
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|PreferenceInterface
name|pref
init|=
name|model
operator|.
name|getPreference
argument_list|(
name|period
operator|.
name|getDateOffset
argument_list|()
argument_list|,
name|period
operator|.
name|getStartSlot
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|!=
literal|null
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
name|location
operator|.
name|addExamPreference
argument_list|(
name|period
argument_list|,
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|pref
operator|.
name|getCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditPreference
argument_list|)
operator|&&
name|FutureOperation
operator|.
name|ROOM_SHARING
operator|.
name|in
argument_list|(
name|flags
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|PreferenceLevel
argument_list|>
name|dept2pref
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|room
operator|.
name|hasRoomSharingModel
argument_list|()
condition|)
block|{
name|dept2pref
operator|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|PreferenceLevel
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|RoomSharingOption
name|option
range|:
name|room
operator|.
name|getRoomSharingModel
argument_list|()
operator|.
name|getOptions
argument_list|()
control|)
block|{
if|if
condition|(
name|option
operator|.
name|getId
argument_list|()
operator|>=
literal|0
operator|&&
name|option
operator|.
name|isEditable
argument_list|()
operator|&&
name|option
operator|.
name|hasPreference
argument_list|()
condition|)
block|{
name|Department
name|d
init|=
name|lookuDepartment
argument_list|(
name|hibSession
argument_list|,
name|option
operator|.
name|getId
argument_list|()
argument_list|,
name|future
argument_list|,
name|location
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
name|dept2pref
operator|.
name|put
argument_list|(
name|d
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|PreferenceLevelDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|option
operator|.
name|getPreference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|room
operator|.
name|hasDepartments
argument_list|()
condition|)
block|{
name|dept2pref
operator|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|PreferenceLevel
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|DepartmentInterface
name|department
range|:
name|room
operator|.
name|getDepartments
argument_list|()
control|)
block|{
if|if
condition|(
name|department
operator|.
name|getPreference
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|Department
name|d
init|=
name|lookuDepartment
argument_list|(
name|hibSession
argument_list|,
name|department
argument_list|,
name|future
argument_list|,
name|location
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
name|dept2pref
operator|.
name|put
argument_list|(
name|d
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|lookupPreferenceLevel
argument_list|(
name|hibSession
argument_list|,
name|department
operator|.
name|getPreference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|dept2pref
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RoomDept
name|rd
range|:
name|location
operator|.
name|getRoomDepts
argument_list|()
control|)
block|{
name|PreferenceLevel
name|pref
init|=
name|dept2pref
operator|.
name|get
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|!=
literal|null
operator|&&
operator|!
name|pref
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
condition|)
block|{
name|RoomPref
name|rp
init|=
operator|new
name|RoomPref
argument_list|()
decl_stmt|;
name|rp
operator|.
name|setRoom
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setPrefLevel
argument_list|(
name|pref
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setOwner
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|rp
argument_list|)
expr_stmt|;
name|rd
operator|.
name|setPreference
argument_list|(
name|pref
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|rp
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditFeatures
argument_list|)
operator|&&
name|FutureOperation
operator|.
name|FEATURES
operator|.
name|in
argument_list|(
name|flags
argument_list|)
condition|)
block|{
name|boolean
name|editGlobalFeatures
init|=
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditGlobalFeatures
argument_list|)
decl_stmt|;
name|boolean
name|deptIndependent
init|=
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|RoomFeature
argument_list|>
name|features
init|=
operator|new
name|HashSet
argument_list|<
name|RoomFeature
argument_list|>
argument_list|(
name|location
operator|.
name|getFeatures
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FeatureInterface
name|f
range|:
name|room
operator|.
name|getFeatures
argument_list|()
control|)
block|{
name|RoomFeature
name|feature
init|=
name|lookupFeature
argument_list|(
name|hibSession
argument_list|,
name|f
argument_list|,
name|future
argument_list|,
name|location
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|feature
operator|!=
literal|null
operator|&&
operator|!
name|features
operator|.
name|remove
argument_list|(
name|feature
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|feature
operator|instanceof
name|GlobalRoomFeature
operator|&&
operator|!
name|editGlobalFeatures
condition|)
continue|continue;
if|if
condition|(
name|feature
operator|instanceof
name|DepartmentRoomFeature
operator|&&
operator|!
name|deptIndependent
operator|&&
operator|!
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasQualifier
argument_list|(
operator|(
operator|(
name|DepartmentRoomFeature
operator|)
name|feature
operator|)
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
continue|continue;
name|location
operator|.
name|getFeatures
argument_list|()
operator|.
name|add
argument_list|(
name|feature
argument_list|)
expr_stmt|;
name|feature
operator|.
name|getRooms
argument_list|()
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|feature
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|RoomFeature
name|feature
range|:
name|features
control|)
block|{
if|if
condition|(
name|feature
operator|instanceof
name|GlobalRoomFeature
operator|&&
operator|!
name|editGlobalFeatures
condition|)
continue|continue;
if|if
condition|(
name|feature
operator|instanceof
name|DepartmentRoomFeature
operator|&&
operator|!
name|deptIndependent
operator|&&
operator|!
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasQualifier
argument_list|(
operator|(
operator|(
name|DepartmentRoomFeature
operator|)
name|feature
operator|)
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|future
operator|&&
name|lookupFeature
argument_list|(
name|hibSession
argument_list|,
operator|new
name|FeatureInterface
argument_list|(
name|feature
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|feature
operator|.
name|getAbbv
argument_list|()
argument_list|,
name|feature
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|,
name|future
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
continue|continue;
name|location
operator|.
name|getFeatures
argument_list|()
operator|.
name|remove
argument_list|(
name|feature
argument_list|)
expr_stmt|;
name|feature
operator|.
name|getRooms
argument_list|()
operator|.
name|remove
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|feature
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditGroups
argument_list|)
operator|&&
name|FutureOperation
operator|.
name|GROUPS
operator|.
name|in
argument_list|(
name|flags
argument_list|)
condition|)
block|{
name|boolean
name|editGlobalGroups
init|=
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditGlobalGroups
argument_list|)
decl_stmt|;
name|boolean
name|deptIndependent
init|=
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|RoomGroup
argument_list|>
name|groups
init|=
operator|new
name|HashSet
argument_list|<
name|RoomGroup
argument_list|>
argument_list|(
name|location
operator|.
name|getRoomGroups
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|GroupInterface
name|g
range|:
name|room
operator|.
name|getGroups
argument_list|()
control|)
block|{
name|RoomGroup
name|group
init|=
name|lookupGroup
argument_list|(
name|hibSession
argument_list|,
name|g
argument_list|,
name|future
argument_list|,
name|location
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
operator|&&
operator|!
name|groups
operator|.
name|remove
argument_list|(
name|group
argument_list|)
condition|)
block|{
if|if
condition|(
name|group
operator|.
name|isGlobal
argument_list|()
operator|&&
operator|!
name|editGlobalGroups
condition|)
continue|continue;
if|if
condition|(
operator|!
name|group
operator|.
name|isGlobal
argument_list|()
operator|&&
operator|!
name|deptIndependent
operator|&&
operator|!
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasQualifier
argument_list|(
name|group
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
continue|continue;
name|location
operator|.
name|getRoomGroups
argument_list|()
operator|.
name|add
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|group
operator|.
name|getRooms
argument_list|()
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|RoomGroup
name|group
range|:
name|groups
control|)
block|{
if|if
condition|(
name|group
operator|.
name|isGlobal
argument_list|()
operator|&&
operator|!
name|editGlobalGroups
condition|)
continue|continue;
if|if
condition|(
operator|!
name|group
operator|.
name|isGlobal
argument_list|()
operator|&&
operator|!
name|deptIndependent
operator|&&
operator|!
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasQualifier
argument_list|(
name|group
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|future
operator|&&
name|lookupGroup
argument_list|(
name|hibSession
argument_list|,
operator|new
name|GroupInterface
argument_list|(
name|group
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|group
operator|.
name|getAbbv
argument_list|()
argument_list|,
name|group
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|future
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
continue|continue;
name|location
operator|.
name|getRoomGroups
argument_list|()
operator|.
name|remove
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|group
operator|.
name|getRooms
argument_list|()
operator|.
name|remove
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditEventAvailability
argument_list|)
operator|&&
name|room
operator|.
name|hasEventAvailabilityModel
argument_list|()
operator|&&
name|FutureOperation
operator|.
name|EVENT_AVAILABILITY
operator|.
name|in
argument_list|(
name|flags
argument_list|)
condition|)
block|{
name|String
name|availability
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
literal|7
condition|;
name|d
operator|++
control|)
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
literal|288
condition|;
name|s
operator|++
control|)
block|{
name|RoomSharingOption
name|option
init|=
name|room
operator|.
name|getEventAvailabilityModel
argument_list|()
operator|.
name|getOption
argument_list|(
name|d
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|availability
operator|+=
operator|(
name|option
operator|.
name|getId
argument_list|()
operator|==
operator|-
literal|1l
condition|?
literal|'0'
else|:
literal|'1'
operator|)
expr_stmt|;
block|}
name|location
operator|.
name|setEventAvailability
argument_list|(
name|availability
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|location
argument_list|)
expr_stmt|;
for|for
control|(
name|RoomDept
name|rd
range|:
name|location
operator|.
name|getRoomDepts
argument_list|()
control|)
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|rd
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditChangeEventProperties
argument_list|)
operator|&&
name|location
operator|.
name|getNote
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|location
operator|.
name|getNote
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|FutureOperation
operator|.
name|EVENT_PROPERTIES
operator|.
name|in
argument_list|(
name|flags
argument_list|)
condition|)
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
name|location
argument_list|,
operator|(
name|location
operator|.
name|getNote
argument_list|()
operator|==
literal|null
operator|||
name|location
operator|.
name|getNote
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"-"
else|:
name|location
operator|.
name|getNote
argument_list|()
operator|)
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|ROOM_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|NOTE
argument_list|,
literal|null
argument_list|,
name|location
operator|.
name|getControllingDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
operator|(
name|Location
operator|)
name|location
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|ROOM_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|CREATE
argument_list|,
literal|null
argument_list|,
name|location
operator|.
name|getControllingDepartment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditChangePicture
argument_list|)
operator|&&
name|FutureOperation
operator|.
name|PICTURES
operator|.
name|in
argument_list|(
name|flags
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|LocationPicture
argument_list|>
name|temp
init|=
operator|(
name|Map
argument_list|<
name|Long
argument_list|,
name|LocationPicture
argument_list|>
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
name|RoomPictureServlet
operator|.
name|TEMP_ROOM_PICTURES
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|LocationPicture
argument_list|>
name|pictures
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|LocationPicture
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|future
condition|)
block|{
name|Set
argument_list|<
name|LocationPicture
argument_list|>
name|otherPictures
init|=
operator|new
name|HashSet
argument_list|<
name|LocationPicture
argument_list|>
argument_list|(
name|location
operator|.
name|getPictures
argument_list|()
argument_list|)
decl_stmt|;
name|p1
label|:
for|for
control|(
name|RoomPictureInterface
name|p1
range|:
name|room
operator|.
name|getPictures
argument_list|()
control|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|LocationPicture
argument_list|>
name|i
init|=
name|otherPictures
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|LocationPicture
name|p2
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|samePicture
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|sameType
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
condition|)
block|{
name|p2
operator|.
name|setType
argument_list|(
name|p1
operator|.
name|getPictureType
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|AttachmentTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|p1
operator|.
name|getPictureType
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|p2
argument_list|)
expr_stmt|;
block|}
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue
name|p1
continue|;
block|}
block|}
if|if
condition|(
name|location
operator|instanceof
name|Room
condition|)
block|{
name|RoomPicture
name|original
init|=
name|RoomPictureDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|p1
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|original
operator|!=
literal|null
condition|)
block|{
name|RoomPicture
name|p2
init|=
name|original
operator|.
name|clonePicture
argument_list|()
decl_stmt|;
name|p2
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Room
operator|)
name|location
operator|)
operator|.
name|getPictures
argument_list|()
operator|.
name|add
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|p2
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|NonUniversityLocationPicture
name|original
init|=
name|NonUniversityLocationPictureDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|p1
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|original
operator|!=
literal|null
condition|)
block|{
name|NonUniversityLocationPicture
name|p2
init|=
name|original
operator|.
name|clonePicture
argument_list|()
decl_stmt|;
name|p2
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
operator|(
operator|(
name|NonUniversityLocation
operator|)
name|location
operator|)
operator|.
name|getPictures
argument_list|()
operator|.
name|add
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|p2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|LocationPicture
name|picture
range|:
name|otherPictures
control|)
block|{
name|location
operator|.
name|getPictures
argument_list|()
operator|.
name|remove
argument_list|(
name|picture
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|picture
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|LocationPicture
name|p
range|:
name|location
operator|.
name|getPictures
argument_list|()
control|)
name|pictures
operator|.
name|put
argument_list|(
name|p
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
for|for
control|(
name|RoomPictureInterface
name|p
range|:
name|room
operator|.
name|getPictures
argument_list|()
control|)
block|{
name|LocationPicture
name|picture
init|=
name|pictures
operator|.
name|remove
argument_list|(
name|p
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|picture
operator|==
literal|null
operator|&&
name|temp
operator|!=
literal|null
condition|)
block|{
name|picture
operator|=
name|temp
operator|.
name|get
argument_list|(
name|p
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|picture
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|location
operator|instanceof
name|Room
condition|)
block|{
operator|(
operator|(
name|RoomPicture
operator|)
name|picture
operator|)
operator|.
name|setLocation
argument_list|(
operator|(
name|Room
operator|)
name|location
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Room
operator|)
name|location
operator|)
operator|.
name|getPictures
argument_list|()
operator|.
name|add
argument_list|(
operator|(
name|RoomPicture
operator|)
name|picture
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|getPictureType
argument_list|()
operator|!=
literal|null
condition|)
name|picture
operator|.
name|setType
argument_list|(
name|AttachmentTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|p
operator|.
name|getPictureType
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|picture
argument_list|)
expr_stmt|;
name|p
operator|.
name|setUniqueId
argument_list|(
name|picture
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|NonUniversityLocationPicture
name|np
init|=
operator|new
name|NonUniversityLocationPicture
argument_list|()
decl_stmt|;
name|np
operator|.
name|setDataFile
argument_list|(
name|picture
operator|.
name|getDataFile
argument_list|()
argument_list|)
expr_stmt|;
name|np
operator|.
name|setFileName
argument_list|(
name|picture
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
name|np
operator|.
name|setContentType
argument_list|(
name|picture
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|np
operator|.
name|setTimeStamp
argument_list|(
name|picture
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
name|np
operator|.
name|setLocation
argument_list|(
operator|(
name|NonUniversityLocation
operator|)
name|location
argument_list|)
expr_stmt|;
operator|(
operator|(
name|NonUniversityLocation
operator|)
name|location
operator|)
operator|.
name|getPictures
argument_list|()
operator|.
name|add
argument_list|(
name|np
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|getPictureType
argument_list|()
operator|!=
literal|null
condition|)
name|np
operator|.
name|setType
argument_list|(
name|AttachmentTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|p
operator|.
name|getPictureType
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|np
argument_list|)
expr_stmt|;
name|p
operator|.
name|setUniqueId
argument_list|(
name|np
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|picture
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|getPictureType
argument_list|()
operator|!=
literal|null
condition|)
name|picture
operator|.
name|setType
argument_list|(
name|AttachmentTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|p
operator|.
name|getPictureType
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|picture
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|LocationPicture
name|picture
range|:
name|pictures
operator|.
name|values
argument_list|()
control|)
block|{
name|location
operator|.
name|getPictures
argument_list|()
operator|.
name|remove
argument_list|(
name|picture
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|picture
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|tx
operator|=
literal|null
expr_stmt|;
return|return
name|location
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|future
condition|)
throw|throw
operator|new
name|RoomException
argument_list|(
name|MESSAGES
operator|.
name|failedCreateLocation
argument_list|(
name|roomName
argument_list|,
name|sessionLabel
argument_list|,
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|t
argument_list|)
throw|;
else|else
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|boolean
name|samePicture
parameter_list|(
name|RoomPictureInterface
name|p1
parameter_list|,
name|LocationPicture
name|p2
parameter_list|)
block|{
return|return
name|p1
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|p2
operator|.
name|getFileName
argument_list|()
argument_list|)
operator|&&
name|Math
operator|.
name|abs
argument_list|(
name|p1
operator|.
name|getTimeStamp
argument_list|()
operator|-
name|p2
operator|.
name|getTimeStamp
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
operator|<
literal|1000
operator|&&
name|p1
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|p2
operator|.
name|getContentType
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|sameType
parameter_list|(
name|RoomPictureInterface
name|p1
parameter_list|,
name|LocationPicture
name|p2
parameter_list|)
block|{
if|if
condition|(
name|p1
operator|.
name|getPictureType
argument_list|()
operator|==
literal|null
condition|)
return|return
name|p2
operator|.
name|getType
argument_list|()
operator|==
literal|null
return|;
else|else
return|return
name|p2
operator|.
name|getType
argument_list|()
operator|!=
literal|null
operator|&&
name|p1
operator|.
name|getPictureType
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|p2
operator|.
name|getType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|RoomType
name|lookupRoomType
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|RoomTypeInterface
name|original
parameter_list|)
block|{
if|if
condition|(
name|original
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|original
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|RoomTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|original
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
return|;
else|else
return|return
operator|(
name|RoomType
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select t from RoomType t where t.reference = :reference"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"reference"
argument_list|,
name|original
operator|.
name|getReference
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|protected
name|PreferenceLevel
name|lookupPreferenceLevel
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|PreferenceInterface
name|original
parameter_list|)
block|{
if|if
condition|(
name|original
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|original
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|PreferenceLevelDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|original
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
return|;
else|else
return|return
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|original
operator|.
name|getCode
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|Building
name|lookupBuilding
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|BuildingInterface
name|original
parameter_list|,
name|boolean
name|future
parameter_list|,
name|Long
name|sessionId
parameter_list|)
block|{
if|if
condition|(
name|original
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|future
operator|||
name|original
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
operator|(
name|Building
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select b from Building b where b.abbreviation = :abbreviation and b.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setString
argument_list|(
literal|"abbreviation"
argument_list|,
name|original
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|BuildingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|original
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
return|;
block|}
block|}
specifier|protected
name|Department
name|lookuDepartment
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|DepartmentInterface
name|original
parameter_list|,
name|boolean
name|future
parameter_list|,
name|Long
name|sessionId
parameter_list|)
block|{
if|if
condition|(
name|original
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|future
operator|||
name|original
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|original
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|sessionId
argument_list|,
name|hibSession
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|original
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
return|;
block|}
block|}
specifier|protected
name|RoomFeature
name|lookupFeature
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|FeatureInterface
name|original
parameter_list|,
name|boolean
name|future
parameter_list|,
name|Long
name|sessionId
parameter_list|)
block|{
if|if
condition|(
name|original
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|original
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|original
operator|.
name|isDepartmental
argument_list|()
condition|)
return|return
operator|(
name|DepartmentRoomFeature
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select f from DepartmentRoomFeature f where f.department.session.uniqueId = :sessionId and f.abbv = :abbv and f.department.deptCode = :deptCode"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setString
argument_list|(
literal|"abbv"
argument_list|,
name|original
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"deptCode"
argument_list|,
name|original
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
else|else
return|return
operator|(
name|GlobalRoomFeature
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select f from GlobalRoomFeature f where f.session.uniqueId = :sessionId and f.abbv = :abbv"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setString
argument_list|(
literal|"abbv"
argument_list|,
name|original
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
if|else if
condition|(
name|future
condition|)
block|{
if|if
condition|(
name|original
operator|.
name|isDepartmental
argument_list|()
condition|)
return|return
operator|(
name|DepartmentRoomFeature
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select f from DepartmentRoomFeature f, DepartmentRoomFeature o where o.uniqueId = :originalId and f.department.session.uniqueId = :sessionId "
operator|+
literal|"and f.abbv = o.abbv and f.department.deptCode = o.department.deptCode"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"originalId"
argument_list|,
name|original
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
else|else
return|return
operator|(
name|GlobalRoomFeature
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select f from GlobalRoomFeature f, GlobalRoomFeature o where o.uniqueId = :originalId and f.session.uniqueId = :sessionId "
operator|+
literal|"and f.abbv = o.abbv"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"originalId"
argument_list|,
name|original
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|RoomFeatureDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|original
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
return|;
block|}
block|}
specifier|protected
name|RoomGroup
name|lookupGroup
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|GroupInterface
name|original
parameter_list|,
name|boolean
name|future
parameter_list|,
name|Long
name|sessionId
parameter_list|)
block|{
if|if
condition|(
name|original
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|original
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|original
operator|.
name|isDepartmental
argument_list|()
condition|)
return|return
operator|(
name|RoomGroup
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select g from RoomGroup g where g.department.session.uniqueId = :sessionId and g.abbv = :abbv and g.department.deptCode = :deptCode and g.global = false"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setString
argument_list|(
literal|"abbv"
argument_list|,
name|original
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"deptCode"
argument_list|,
name|original
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
else|else
return|return
operator|(
name|RoomGroup
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select g from RoomGroup g where g.session.uniqueId = :sessionId and g.abbv = :abbv and g.global = true"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setString
argument_list|(
literal|"abbv"
argument_list|,
name|original
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
if|else if
condition|(
name|future
condition|)
block|{
if|if
condition|(
name|original
operator|.
name|isDepartmental
argument_list|()
condition|)
return|return
operator|(
name|RoomGroup
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select g from RoomGroup g, RoomGroup o where o.uniqueId = :originalId and g.department.session.uniqueId = :sessionId "
operator|+
literal|"and g.abbv = o.abbv and g.department.deptCode = o.department.deptCode and g.global = false"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"originalId"
argument_list|,
name|original
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
else|else
return|return
operator|(
name|RoomGroup
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select g from RoomGroup g, RoomGroup o where o.uniqueId = :originalId and g.session.uniqueId = :sessionId "
operator|+
literal|"and g.abbv = o.abbv and g.global = true"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"originalId"
argument_list|,
name|original
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|RoomGroupDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|original
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
return|;
block|}
block|}
specifier|protected
name|Department
name|lookuDepartment
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Department
name|original
parameter_list|,
name|boolean
name|future
parameter_list|,
name|Long
name|sessionId
parameter_list|)
block|{
if|if
condition|(
name|original
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|future
condition|)
block|{
return|return
operator|(
name|Department
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select d from Department d, Department o where d.deptCode = o.deptCode and d.session.uniqueId = :sessionId and o.uniqueId = :originalId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"originalId"
argument_list|,
name|original
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|original
return|;
block|}
block|}
specifier|protected
name|Department
name|lookuDepartment
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Long
name|originalId
parameter_list|,
name|boolean
name|future
parameter_list|,
name|Long
name|sessionId
parameter_list|)
block|{
if|if
condition|(
name|originalId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|future
condition|)
block|{
return|return
operator|(
name|Department
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct d from Department d, Department o where d.deptCode = o.deptCode and d.session.uniqueId = :sessionId and o.uniqueId = :originalId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"originalId"
argument_list|,
name|originalId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|originalId
argument_list|,
name|hibSession
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

