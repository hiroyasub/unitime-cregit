begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|rooms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|CourseMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|CommonValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
operator|.
name|RoomFilterBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|FilterRpcResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|AcademicSessionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|BuildingInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|DepartmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|ExamTypeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|FeatureInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|FeatureTypeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|FutureRoomInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|GroupInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|PreferenceInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomDetailInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomFilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomPictureInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomTypeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Building
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentRoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|LocationPicture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomDept
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeatureType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomTypeOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|qualifiers
operator|.
name|SimpleQualifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|RoomFilterRpcRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|RoomDetailsBackend
extends|extends
name|RoomFilterBackend
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|CourseMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|CourseMessages
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|FilterRpcResponse
name|execute
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|RoomFilterRpcRequest
name|request
parameter_list|,
name|EventContext
name|context
parameter_list|)
block|{
return|return
name|super
operator|.
name|execute
argument_list|(
name|request
argument_list|,
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|checkPermission
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|RoomFilterRpcRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|context
operator|.
name|checkPermissionAnyAuthority
argument_list|(
name|Right
operator|.
name|Rooms
argument_list|,
operator|new
name|SimpleQualifier
argument_list|(
literal|"Session"
argument_list|,
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|checkEventStatus
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|showRoomFeature
parameter_list|(
name|RoomFeatureType
name|type
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|RoomQuery
name|getQuery
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|options
parameter_list|,
name|EventContext
name|context
parameter_list|)
block|{
name|RoomQuery
name|query
init|=
name|super
operator|.
name|getQuery
argument_list|(
name|sessionId
argument_list|,
name|options
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|flags
init|=
operator|(
name|options
operator|==
literal|null
condition|?
literal|null
else|:
name|options
operator|.
name|get
argument_list|(
literal|"flag"
argument_list|)
operator|)
decl_stmt|;
name|boolean
name|fetch
init|=
operator|(
name|flags
operator|!=
literal|null
operator|&&
name|flags
operator|.
name|contains
argument_list|(
literal|"fetch"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|fetch
condition|)
block|{
name|query
operator|.
name|addFrom
argument_list|(
literal|"fetch"
argument_list|,
literal|"left join fetch l.roomDepts Frd "
operator|+
literal|" left join fetch l.examTypes Fxt"
operator|+
literal|" left join fetch l.features Ff"
operator|+
literal|" left join fetch l.roomGroups Fg"
operator|+
literal|" left join fetch l.roomType Ft"
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|enumarate
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|RoomFilterRpcRequest
name|request
parameter_list|,
name|FilterRpcResponse
name|response
parameter_list|,
name|EventContext
name|context
parameter_list|)
block|{
name|fixRoomFeatureTypes
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|request
operator|.
name|addOption
argument_list|(
literal|"flag"
argument_list|,
literal|"fetch"
argument_list|)
expr_stmt|;
name|String
name|department
init|=
name|request
operator|.
name|getOption
argument_list|(
literal|"department"
argument_list|)
decl_stmt|;
name|boolean
name|filterDepartments
init|=
operator|!
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExamType
argument_list|>
name|types
init|=
name|ExamType
operator|.
name|findAllApplicable
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ExamView
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ExamTimetable
argument_list|)
decl_stmt|;
name|boolean
name|html
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"flag"
argument_list|)
operator|&&
name|request
operator|.
name|getOptions
argument_list|(
literal|"flag"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"plain"
argument_list|)
condition|)
block|{
name|html
operator|=
literal|false
expr_stmt|;
block|}
name|boolean
name|courses
init|=
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|InstructionalOfferings
argument_list|)
operator|||
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|Classes
argument_list|)
decl_stmt|;
name|boolean
name|exams
init|=
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|Examinations
argument_list|)
decl_stmt|;
name|boolean
name|events
init|=
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|Events
argument_list|)
operator|||
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|RoomEditChangeEventProperties
argument_list|)
decl_stmt|;
name|boolean
name|editPermissions
init|=
name|request
operator|.
name|hasOption
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Double
argument_list|>
name|distances
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Double
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Location
name|location
range|:
name|locations
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|request
operator|.
name|getOptions
argument_list|()
argument_list|,
operator|new
name|Query
argument_list|(
name|request
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
name|distances
argument_list|,
literal|null
argument_list|,
name|context
argument_list|)
control|)
block|{
name|Double
name|dist
init|=
name|distances
operator|.
name|get
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|RoomDetailInterface
name|e
init|=
name|load
argument_list|(
name|location
argument_list|,
name|department
argument_list|,
name|html
argument_list|,
name|context
argument_list|,
name|filterDepartments
argument_list|,
name|types
argument_list|,
name|courses
argument_list|,
name|exams
argument_list|,
name|events
argument_list|,
name|editPermissions
argument_list|)
decl_stmt|;
if|if
condition|(
name|editPermissions
condition|)
block|{
name|RoomSharingBackend
name|rsb
init|=
operator|new
name|RoomSharingBackend
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|isCanSeeEventAvailability
argument_list|()
condition|)
name|e
operator|.
name|setEventAvailabilityModel
argument_list|(
name|rsb
operator|.
name|loadEventAvailability
argument_list|(
name|location
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|isCanSeeAvailability
argument_list|()
condition|)
name|e
operator|.
name|setRoomSharingModel
argument_list|(
name|rsb
operator|.
name|loadRoomSharing
argument_list|(
name|location
argument_list|,
literal|true
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|isCanSeePeriodPreferences
argument_list|()
condition|)
block|{
name|PeriodPreferencesBackend
name|ppb
init|=
operator|new
name|PeriodPreferencesBackend
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamType
name|type
range|:
name|types
control|)
block|{
name|e
operator|.
name|setPeriodPreferenceModel
argument_list|(
name|ppb
operator|.
name|loadPeriodPreferences
argument_list|(
name|location
argument_list|,
name|type
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|e
operator|.
name|setProperty
argument_list|(
literal|"permId"
argument_list|,
name|location
operator|.
name|getPermanentId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dist
operator|!=
literal|null
condition|)
name|e
operator|.
name|setProperty
argument_list|(
literal|"distance"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|dist
operator|==
literal|null
condition|?
literal|0l
else|:
name|Math
operator|.
name|round
argument_list|(
name|dist
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|setProperty
argument_list|(
literal|"overbook"
argument_list|,
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|EventLocationOverbook
argument_list|)
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
expr_stmt|;
name|response
operator|.
name|addResult
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|DepartmentInterface
name|wrap
parameter_list|(
name|Department
name|d
parameter_list|,
name|Location
name|location
parameter_list|,
name|PreferenceLevel
name|pref
parameter_list|)
block|{
if|if
condition|(
name|d
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|DepartmentInterface
name|department
init|=
operator|new
name|DepartmentInterface
argument_list|()
decl_stmt|;
name|department
operator|.
name|setId
argument_list|(
name|d
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|department
operator|.
name|setDeptCode
argument_list|(
name|d
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
name|department
operator|.
name|setAbbreviation
argument_list|(
name|d
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|department
operator|.
name|setLabel
argument_list|(
name|d
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|department
operator|.
name|setExternal
argument_list|(
name|d
operator|.
name|isExternalManager
argument_list|()
argument_list|)
expr_stmt|;
name|department
operator|.
name|setEvent
argument_list|(
name|d
operator|.
name|isAllowEvents
argument_list|()
argument_list|)
expr_stmt|;
name|department
operator|.
name|setExtAbbreviation
argument_list|(
name|d
operator|.
name|getExternalMgrAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|department
operator|.
name|setExtLabel
argument_list|(
name|d
operator|.
name|getExternalMgrLabel
argument_list|()
argument_list|)
expr_stmt|;
name|department
operator|.
name|setTitle
argument_list|(
name|d
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|pref
operator|!=
literal|null
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
name|department
operator|.
name|setPreference
argument_list|(
operator|new
name|PreferenceInterface
argument_list|(
name|pref
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|pref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
argument_list|,
name|pref
operator|.
name|getPrefProlog
argument_list|()
argument_list|,
name|pref
operator|.
name|getPrefName
argument_list|()
argument_list|,
name|pref
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
name|department
operator|.
name|setColor
argument_list|(
literal|"#"
operator|+
name|d
operator|.
name|getRoomSharingColor
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|department
return|;
block|}
specifier|protected
name|RoomDetailInterface
name|load
parameter_list|(
name|Location
name|location
parameter_list|,
name|String
name|department
parameter_list|,
name|boolean
name|html
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|boolean
name|filterDepartments
parameter_list|,
name|List
argument_list|<
name|ExamType
argument_list|>
name|types
parameter_list|,
name|boolean
name|courses
parameter_list|,
name|boolean
name|exams
parameter_list|,
name|boolean
name|events
parameter_list|,
name|boolean
name|editPermissions
parameter_list|)
block|{
name|RoomDetailInterface
name|response
init|=
operator|new
name|RoomDetailInterface
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|location
operator|.
name|getDisplayName
argument_list|()
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
decl_stmt|;
name|response
operator|.
name|setCanShowDetail
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomDetail
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCanSeeAvailability
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomDetailAvailability
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCanSeeEventAvailability
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomDetailEventAvailability
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCanSeePeriodPreferences
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomDetailPeriodPreferences
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|instanceof
name|Room
condition|)
block|{
name|response
operator|.
name|setCanChange
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEdit
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|setCanChange
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|NonUniversityLocationEdit
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|setCanChangeFeatures
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditFeatures
argument_list|)
operator|||
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditGlobalFeatures
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCanChangeGroups
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditGroups
argument_list|)
operator|||
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditGlobalGroups
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCanChangeEventAvailability
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditEventAvailability
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCanChangeAvailability
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditAvailability
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCanChangePicture
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditChangePicture
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCanChangePreferences
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditPreference
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|editPermissions
condition|)
block|{
name|response
operator|.
name|setCanChangeEventProperties
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditChangeEventProperties
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|isCanChange
argument_list|()
condition|)
block|{
name|response
operator|.
name|setCanChangeCapacity
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditChangeCapacity
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCanChangeControll
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditChangeControll
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCanChangeExamStatus
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditChangeExaminationStatus
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCanChangeExternalId
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditChangeExternalId
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCanChangeRoomProperties
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditChangeRoomProperties
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCanChangeType
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditChangeType
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|response
operator|.
name|isCanChangeAvailability
argument_list|()
condition|)
block|{
name|response
operator|.
name|setCanChangeControll
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditChangeControll
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|location
operator|instanceof
name|Room
condition|)
block|{
name|response
operator|.
name|setCanDelete
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomDelete
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|setCanDelete
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|NonUniversityLocationDelete
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Location
name|loc
range|:
name|location
operator|.
name|getFutureLocations
argument_list|()
control|)
block|{
name|FutureRoomInterface
name|f
init|=
operator|new
name|FutureRoomInterface
argument_list|(
name|loc
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|loc
operator|.
name|getLabel
argument_list|()
argument_list|)
decl_stmt|;
name|f
operator|.
name|setSession
argument_list|(
operator|new
name|AcademicSessionInterface
argument_list|(
name|loc
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|loc
operator|.
name|getSession
argument_list|()
operator|.
name|getAcademicTerm
argument_list|()
operator|+
literal|" "
operator|+
name|loc
operator|.
name|getSession
argument_list|()
operator|.
name|getAcademicYear
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|setDisplayName
argument_list|(
name|loc
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|.
name|setExternalId
argument_list|(
name|loc
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|.
name|setCapacity
argument_list|(
name|loc
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|.
name|setType
argument_list|(
name|loc
operator|.
name|getRoomTypeLabel
argument_list|()
argument_list|)
expr_stmt|;
name|EventContext
name|cx
init|=
operator|new
name|EventContext
argument_list|(
name|context
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
name|loc
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|loc
operator|instanceof
name|Room
condition|)
block|{
name|f
operator|.
name|setCanDelete
argument_list|(
name|cx
operator|.
name|hasPermission
argument_list|(
name|loc
argument_list|,
name|Right
operator|.
name|RoomDelete
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|setCanChange
argument_list|(
name|cx
operator|.
name|hasPermission
argument_list|(
name|loc
argument_list|,
name|Right
operator|.
name|RoomEdit
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|f
operator|.
name|setCanDelete
argument_list|(
name|cx
operator|.
name|hasPermission
argument_list|(
name|loc
argument_list|,
name|Right
operator|.
name|NonUniversityLocationDelete
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|setCanChange
argument_list|(
name|cx
operator|.
name|hasPermission
argument_list|(
name|loc
argument_list|,
name|Right
operator|.
name|NonUniversityLocationEdit
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|.
name|isCanChange
argument_list|()
operator|||
name|f
operator|.
name|isCanDelete
argument_list|()
condition|)
name|response
operator|.
name|addFutureRoom
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|location
operator|instanceof
name|Room
condition|)
block|{
name|Room
name|room
init|=
operator|(
name|Room
operator|)
name|location
decl_stmt|;
name|Building
name|b
init|=
name|room
operator|.
name|getBuilding
argument_list|()
decl_stmt|;
name|BuildingInterface
name|building
init|=
operator|new
name|BuildingInterface
argument_list|(
name|b
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|b
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
name|b
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|building
operator|.
name|setX
argument_list|(
name|b
operator|.
name|getCoordinateX
argument_list|()
argument_list|)
expr_stmt|;
name|building
operator|.
name|setY
argument_list|(
name|b
operator|.
name|getCoordinateY
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setBuilding
argument_list|(
name|building
argument_list|)
expr_stmt|;
name|response
operator|.
name|setName
argument_list|(
name|room
operator|.
name|getRoomNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|setSessionId
argument_list|(
name|location
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setSessionName
argument_list|(
name|location
operator|.
name|getSession
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setExternalId
argument_list|(
name|location
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setRoomType
argument_list|(
operator|new
name|RoomTypeInterface
argument_list|(
name|location
operator|.
name|getRoomType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|location
operator|.
name|getRoomType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|,
name|location
operator|.
name|getRoomType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|,
name|location
operator|.
name|getRoomType
argument_list|()
operator|.
name|isRoom
argument_list|()
argument_list|,
name|location
operator|.
name|getRoomType
argument_list|()
operator|.
name|getOrd
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setX
argument_list|(
name|location
operator|.
name|getCoordinateX
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setY
argument_list|(
name|location
operator|.
name|getCoordinateY
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setArea
argument_list|(
name|location
operator|.
name|getArea
argument_list|()
argument_list|)
expr_stmt|;
empty_stmt|;
name|response
operator|.
name|setCapacity
argument_list|(
name|location
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setExamCapacity
argument_list|(
name|location
operator|.
name|getExamCapacity
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|RoomFeature
name|f
range|:
name|location
operator|.
name|getFeatures
argument_list|()
control|)
block|{
name|FeatureInterface
name|feature
init|=
operator|new
name|FeatureInterface
argument_list|(
name|f
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|f
operator|.
name|getAbbv
argument_list|()
argument_list|,
name|f
operator|.
name|getLabel
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|getFeatureType
argument_list|()
operator|!=
literal|null
condition|)
name|feature
operator|.
name|setType
argument_list|(
operator|new
name|FeatureTypeInterface
argument_list|(
name|f
operator|.
name|getFeatureType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|f
operator|.
name|getFeatureType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|,
name|f
operator|.
name|getFeatureType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|,
name|f
operator|.
name|getFeatureType
argument_list|()
operator|.
name|isShowInEventManagement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|instanceof
name|DepartmentRoomFeature
condition|)
block|{
if|if
condition|(
operator|!
name|courses
condition|)
continue|continue;
name|Department
name|d
init|=
operator|(
operator|(
name|DepartmentRoomFeature
operator|)
name|f
operator|)
operator|.
name|getDepartment
argument_list|()
decl_stmt|;
if|if
condition|(
name|filterDepartments
operator|&&
operator|!
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasQualifier
argument_list|(
name|d
argument_list|)
condition|)
continue|continue;
name|feature
operator|.
name|setDepartment
argument_list|(
name|wrap
argument_list|(
name|d
argument_list|,
name|location
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|feature
operator|.
name|setTitle
argument_list|(
name|f
operator|.
name|getLabel
argument_list|()
operator|+
literal|" ("
operator|+
name|d
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|f
operator|.
name|getFeatureType
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|", "
operator|+
name|f
operator|.
name|getFeatureType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|feature
operator|.
name|setTitle
argument_list|(
name|f
operator|.
name|getLabel
argument_list|()
operator|+
operator|(
name|f
operator|.
name|getFeatureType
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|f
operator|.
name|getFeatureType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|")"
operator|)
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|addFeature
argument_list|(
name|feature
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RoomGroup
name|g
range|:
name|location
operator|.
name|getRoomGroups
argument_list|()
control|)
block|{
name|GroupInterface
name|group
init|=
operator|new
name|GroupInterface
argument_list|(
name|g
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|g
operator|.
name|getAbbv
argument_list|()
argument_list|,
name|g
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|g
operator|.
name|getDepartment
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|courses
condition|)
continue|continue;
if|if
condition|(
name|filterDepartments
operator|&&
operator|!
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasQualifier
argument_list|(
name|g
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
continue|continue;
name|group
operator|.
name|setDepartment
argument_list|(
name|wrap
argument_list|(
name|g
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|location
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|.
name|setTitle
argument_list|(
operator|(
name|g
operator|.
name|getDescription
argument_list|()
operator|==
literal|null
operator|||
name|g
operator|.
name|getDescription
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|g
operator|.
name|getName
argument_list|()
else|:
name|g
operator|.
name|getDescription
argument_list|()
operator|)
operator|+
literal|" ("
operator|+
name|g
operator|.
name|getDepartment
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|addGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|courses
condition|)
block|{
name|response
operator|.
name|setIgnoreRoomCheck
argument_list|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setIgnoreTooFar
argument_list|(
name|location
operator|.
name|isIgnoreTooFar
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|RoomDept
name|rd
range|:
name|location
operator|.
name|getRoomDepts
argument_list|()
control|)
block|{
name|DepartmentInterface
name|d
init|=
name|wrap
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|location
argument_list|,
name|rd
operator|.
name|getPreference
argument_list|()
argument_list|)
decl_stmt|;
name|response
operator|.
name|addDepartment
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|rd
operator|.
name|isControl
argument_list|()
condition|)
name|response
operator|.
name|setControlDepartment
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|isCanSeeAvailability
argument_list|()
condition|)
block|{
if|if
condition|(
name|html
condition|)
name|response
operator|.
name|setAvailability
argument_list|(
name|location
operator|.
name|getRoomSharingTable
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|", "
argument_list|,
literal|"<br>"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|response
operator|.
name|setAvailability
argument_list|(
name|location
operator|.
name|getRoomSharingTable
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|", "
argument_list|,
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setRoomSharingNote
argument_list|(
name|location
operator|.
name|getShareNote
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|events
condition|)
block|{
if|if
condition|(
name|response
operator|.
name|isCanSeeEventAvailability
argument_list|()
condition|)
block|{
if|if
condition|(
name|html
condition|)
name|response
operator|.
name|setEventAvailability
argument_list|(
name|location
operator|.
name|getEventAvailabilityTable
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|", "
argument_list|,
literal|"<br>"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|response
operator|.
name|setEventAvailability
argument_list|(
name|location
operator|.
name|getEventAvailabilityTable
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|", "
argument_list|,
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|location
operator|.
name|getEventDepartment
argument_list|()
operator|!=
literal|null
condition|)
name|response
operator|.
name|setEventDepartment
argument_list|(
name|wrap
argument_list|(
name|location
operator|.
name|getEventDepartment
argument_list|()
argument_list|,
name|location
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setEventNote
argument_list|(
name|location
operator|.
name|getEventMessage
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setBreakTime
argument_list|(
name|location
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|.
name|getEventDepartment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|response
operator|.
name|setEventStatus
argument_list|(
name|location
operator|.
name|getEventStatus
argument_list|()
argument_list|)
expr_stmt|;
name|RoomTypeOption
name|rto
init|=
name|location
operator|.
name|getRoomType
argument_list|()
operator|.
name|getOption
argument_list|(
name|location
operator|.
name|getEventDepartment
argument_list|()
argument_list|)
decl_stmt|;
name|response
operator|.
name|setDefaultEventStatus
argument_list|(
name|rto
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setDefaultBreakTime
argument_list|(
name|rto
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setDefaultEventNote
argument_list|(
name|rto
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|setDefaultEventStatus
argument_list|(
name|RoomTypeOption
operator|.
name|Status
operator|.
name|NoEventManagement
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|exams
condition|)
block|{
for|for
control|(
name|ExamType
name|xt
range|:
name|location
operator|.
name|getExamTypes
argument_list|()
control|)
block|{
if|if
condition|(
name|types
operator|!=
literal|null
operator|&&
operator|!
name|types
operator|.
name|contains
argument_list|(
name|xt
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|xt
operator|.
name|getReference
argument_list|()
operator|.
name|equals
argument_list|(
name|department
argument_list|)
operator|&&
name|response
operator|.
name|isCanSeePeriodPreferences
argument_list|()
condition|)
block|{
if|if
condition|(
name|html
condition|)
name|response
operator|.
name|setPeriodPreference
argument_list|(
name|location
operator|.
name|getExamPreferencesAbbreviationHtml
argument_list|(
name|xt
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|response
operator|.
name|setPeriodPreference
argument_list|(
name|location
operator|.
name|getExamPreferencesAbbreviation
argument_list|(
name|xt
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|addExamType
argument_list|(
operator|new
name|ExamTypeInterface
argument_list|(
name|xt
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|xt
operator|.
name|getReference
argument_list|()
argument_list|,
name|xt
operator|.
name|getLabel
argument_list|()
argument_list|,
name|xt
operator|.
name|getType
argument_list|()
operator|==
name|ExamType
operator|.
name|sExamTypeFinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|minimap
init|=
name|ApplicationProperty
operator|.
name|RoomHintMinimapUrl
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|minimap
operator|!=
literal|null
operator|&&
name|location
operator|.
name|getCoordinateX
argument_list|()
operator|!=
literal|null
operator|&&
name|location
operator|.
name|getCoordinateY
argument_list|()
operator|!=
literal|null
condition|)
name|response
operator|.
name|setMiniMapUrl
argument_list|(
name|minimap
operator|.
name|replace
argument_list|(
literal|"%x"
argument_list|,
name|location
operator|.
name|getCoordinateX
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
literal|"%y"
argument_list|,
name|location
operator|.
name|getCoordinateY
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
literal|"%n"
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
literal|"%i"
argument_list|,
name|location
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|location
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|map
init|=
name|ApplicationProperty
operator|.
name|RoomMapStatic
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
operator|&&
name|location
operator|.
name|getCoordinateX
argument_list|()
operator|!=
literal|null
operator|&&
name|location
operator|.
name|getCoordinateY
argument_list|()
operator|!=
literal|null
condition|)
name|response
operator|.
name|setMapUrl
argument_list|(
name|map
operator|.
name|replace
argument_list|(
literal|"%x"
argument_list|,
name|location
operator|.
name|getCoordinateX
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
literal|"%y"
argument_list|,
name|location
operator|.
name|getCoordinateY
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
literal|"%n"
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
literal|"%i"
argument_list|,
name|location
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|location
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|LocationPicture
name|picture
range|:
operator|new
name|TreeSet
argument_list|<
name|LocationPicture
argument_list|>
argument_list|(
name|location
operator|.
name|getPictures
argument_list|()
argument_list|)
control|)
name|response
operator|.
name|addPicture
argument_list|(
operator|new
name|RoomPictureInterface
argument_list|(
name|picture
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|picture
operator|.
name|getFileName
argument_list|()
argument_list|,
name|picture
operator|.
name|getContentType
argument_list|()
argument_list|,
name|picture
operator|.
name|getTimeStamp
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|,
name|RoomPicturesBackend
operator|.
name|getPictureType
argument_list|(
name|picture
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|HasRole
argument_list|)
operator|&&
name|CommonValues
operator|.
name|Yes
operator|.
name|eq
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
name|UserProperty
operator|.
name|DisplayLastChanges
argument_list|)
argument_list|)
condition|)
block|{
name|ChangeLog
name|lch
init|=
name|ChangeLog
operator|.
name|findLastChange
argument_list|(
name|location
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|lch
operator|!=
literal|null
condition|)
name|response
operator|.
name|setLastChange
argument_list|(
name|lch
operator|.
name|getShortLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
block|}
end_class

end_unit

