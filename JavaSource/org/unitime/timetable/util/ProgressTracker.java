begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_class
specifier|public
class|class
name|ProgressTracker
block|{
specifier|private
name|String
name|label
decl_stmt|;
specifier|private
name|int
name|total
decl_stmt|;
specifier|private
name|int
name|count
decl_stmt|;
specifier|private
name|int
name|percentInterval
init|=
literal|5
decl_stmt|;
specifier|private
name|int
name|lastPrintedPercent
decl_stmt|;
specifier|private
name|Date
name|timeOfLastPrint
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|cls
decl_stmt|;
specifier|private
name|long
name|previousElapsedTime
decl_stmt|;
specifier|private
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|elapseTimeLog
init|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|ProgressTracker
parameter_list|(
name|String
name|label
parameter_list|,
name|int
name|total
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|label
operator|=
name|label
expr_stmt|;
name|this
operator|.
name|total
operator|=
name|total
expr_stmt|;
name|this
operator|.
name|cls
operator|=
name|cls
expr_stmt|;
name|this
operator|.
name|count
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|timeOfLastPrint
operator|=
operator|new
name|Date
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ProgressTracker
parameter_list|(
name|String
name|label
parameter_list|,
name|int
name|total
parameter_list|,
name|int
name|percentInterval
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|label
operator|=
name|label
expr_stmt|;
name|this
operator|.
name|total
operator|=
name|total
expr_stmt|;
name|this
operator|.
name|cls
operator|=
name|cls
expr_stmt|;
name|this
operator|.
name|percentInterval
operator|=
name|percentInterval
expr_stmt|;
name|this
operator|.
name|count
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|timeOfLastPrint
operator|=
operator|new
name|Date
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|elapsedTimeString
parameter_list|(
name|long
name|millisecondsElapsed
parameter_list|)
block|{
name|long
name|ms
init|=
name|millisecondsElapsed
operator|%
literal|1000
decl_stmt|;
name|long
name|totalSeconds
init|=
name|millisecondsElapsed
operator|/
literal|1000
decl_stmt|;
name|long
name|seconds
init|=
name|totalSeconds
operator|%
literal|60
decl_stmt|;
name|long
name|totalMinutes
init|=
name|totalSeconds
operator|/
literal|60
decl_stmt|;
name|long
name|minutes
init|=
name|totalMinutes
operator|%
literal|60
decl_stmt|;
name|long
name|hours
init|=
name|totalMinutes
operator|/
literal|60
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|comma
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|millisecondsElapsed
operator|==
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"0 Milliseconds"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hours
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|hours
argument_list|)
operator|.
name|append
argument_list|(
literal|" Hours"
argument_list|)
expr_stmt|;
name|comma
operator|=
literal|", "
expr_stmt|;
block|}
if|if
condition|(
name|minutes
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|comma
argument_list|)
operator|.
name|append
argument_list|(
name|minutes
argument_list|)
operator|.
name|append
argument_list|(
literal|" Minutes"
argument_list|)
expr_stmt|;
name|comma
operator|=
literal|", "
expr_stmt|;
block|}
if|if
condition|(
name|seconds
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|comma
argument_list|)
operator|.
name|append
argument_list|(
name|seconds
argument_list|)
operator|.
name|append
argument_list|(
literal|" Seconds"
argument_list|)
expr_stmt|;
name|comma
operator|=
literal|", "
expr_stmt|;
block|}
if|if
condition|(
name|ms
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|comma
argument_list|)
operator|.
name|append
argument_list|(
name|ms
argument_list|)
operator|.
name|append
argument_list|(
literal|" Milliseconds"
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|private
name|String
name|calculateElapsedTimeSinceLastProgressPrint
parameter_list|(
name|Date
name|timeNow
parameter_list|)
block|{
name|long
name|millisecondsElapsed
init|=
name|timeNow
operator|.
name|getTime
argument_list|()
operator|-
name|timeOfLastPrint
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Time Since Last Message:  "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|elapsedTimeString
argument_list|(
name|millisecondsElapsed
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|";  Time Between Reports has "
argument_list|)
expr_stmt|;
if|if
condition|(
name|previousElapsedTime
operator|<
name|millisecondsElapsed
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"increased."
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|previousElapsedTime
operator|==
name|millisecondsElapsed
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"not changed."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"decreased."
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|public
name|void
name|logProgressIfNeeded
parameter_list|()
block|{
name|String
name|progressString
init|=
name|getProgressStringIfNeeded
argument_list|()
decl_stmt|;
if|if
condition|(
name|progressString
operator|!=
literal|null
condition|)
block|{
name|Logger
operator|.
name|getLogger
argument_list|(
name|cls
argument_list|)
operator|.
name|info
argument_list|(
name|progressString
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getProgressStringIfNeeded
parameter_list|()
block|{
name|String
name|progressString
init|=
literal|null
decl_stmt|;
name|count
operator|++
expr_stmt|;
name|int
name|printPct
init|=
name|count
operator|*
literal|100
operator|/
name|this
operator|.
name|total
decl_stmt|;
name|Date
name|timeNow
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|printPct
operator|%
name|percentInterval
operator|==
literal|0
operator|&&
name|this
operator|.
name|lastPrintedPercent
operator|<
name|printPct
operator|)
operator|||
name|count
operator|==
name|this
operator|.
name|total
condition|)
block|{
name|progressString
operator|=
operator|(
name|timeNow
operator|.
name|toString
argument_list|()
operator|+
literal|"  Processing "
operator|+
name|this
operator|.
name|label
operator|+
literal|" - progress:  "
operator|+
name|printPct
operator|+
literal|"% ("
operator|+
name|count
operator|+
literal|" of "
operator|+
name|this
operator|.
name|total
operator|+
literal|"), "
operator|+
name|calculateElapsedTimeSinceLastProgressPrint
argument_list|(
name|timeNow
argument_list|)
operator|)
expr_stmt|;
name|this
operator|.
name|lastPrintedPercent
operator|=
name|printPct
expr_stmt|;
name|this
operator|.
name|previousElapsedTime
operator|=
name|timeNow
operator|.
name|getTime
argument_list|()
operator|-
name|timeOfLastPrint
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|this
operator|.
name|timeOfLastPrint
operator|=
name|timeNow
expr_stmt|;
name|this
operator|.
name|elapseTimeLog
operator|.
name|put
argument_list|(
operator|new
name|Integer
argument_list|(
name|printPct
argument_list|)
argument_list|,
operator|new
name|Long
argument_list|(
name|previousElapsedTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|progressString
operator|)
return|;
block|}
specifier|public
name|String
name|totalTimeToProcess
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|long
name|totalTime
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|pct
range|:
name|this
operator|.
name|elapseTimeLog
operator|.
name|keySet
argument_list|()
control|)
block|{
name|totalTime
operator|+=
name|this
operator|.
name|elapseTimeLog
operator|.
name|get
argument_list|(
name|pct
argument_list|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"Total Time to Process "
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|label
argument_list|)
operator|.
name|append
argument_list|(
literal|":  "
argument_list|)
operator|.
name|append
argument_list|(
name|elapsedTimeString
argument_list|(
name|totalTime
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|public
name|String
name|totalTimeToProcessInMilliseconds
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|long
name|totalTime
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|pct
range|:
name|this
operator|.
name|elapseTimeLog
operator|.
name|keySet
argument_list|()
control|)
block|{
name|totalTime
operator|+=
name|this
operator|.
name|elapseTimeLog
operator|.
name|get
argument_list|(
name|pct
argument_list|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"Total Time to Process in Milliseconds "
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|label
argument_list|)
operator|.
name|append
argument_list|(
literal|":  "
argument_list|)
operator|.
name|append
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|totalTime
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|public
name|String
name|getElapsedTimeAnalysisString
parameter_list|()
block|{
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|long
name|lastElapsed
init|=
literal|0
decl_stmt|;
name|boolean
name|prevIncreased
init|=
literal|true
decl_stmt|;
name|boolean
name|prevDecreased
init|=
literal|false
decl_stmt|;
name|boolean
name|prevSame
init|=
literal|false
decl_stmt|;
name|long
name|totalIncreases
init|=
literal|0
decl_stmt|;
name|long
name|totalDecreases
init|=
literal|0
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n\n\n"
argument_list|)
operator|.
name|append
argument_list|(
name|totalTimeToProcess
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"Summary of Time Between Status Reports\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
literal|"0% - "
argument_list|)
expr_stmt|;
name|long
name|cnt
init|=
literal|0
decl_stmt|;
name|long
name|sumOfElapsedDifferences
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|pct
range|:
name|this
operator|.
name|elapseTimeLog
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|lastElapsed
operator|<
name|this
operator|.
name|elapseTimeLog
operator|.
name|get
argument_list|(
name|pct
argument_list|)
operator|.
name|longValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|prevDecreased
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|pct
argument_list|)
operator|.
name|append
argument_list|(
literal|"% elapsed time decreased.  Average change = "
argument_list|)
operator|.
name|append
argument_list|(
name|elapsedTimeString
argument_list|(
name|sumOfElapsedDifferences
operator|/
name|cnt
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|".\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|pct
argument_list|)
operator|.
name|append
argument_list|(
literal|"% - "
argument_list|)
expr_stmt|;
name|prevIncreased
operator|=
literal|true
expr_stmt|;
name|prevDecreased
operator|=
literal|false
expr_stmt|;
name|cnt
operator|=
literal|0
expr_stmt|;
name|sumOfElapsedDifferences
operator|=
name|this
operator|.
name|elapseTimeLog
operator|.
name|get
argument_list|(
name|pct
argument_list|)
operator|.
name|longValue
argument_list|()
operator|-
name|lastElapsed
expr_stmt|;
block|}
if|else if
condition|(
name|prevSame
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|pct
argument_list|)
operator|.
name|append
argument_list|(
literal|"% elapsed time stayed the same.\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|pct
argument_list|)
operator|.
name|append
argument_list|(
literal|"% - "
argument_list|)
expr_stmt|;
name|prevIncreased
operator|=
literal|true
expr_stmt|;
name|prevSame
operator|=
literal|false
expr_stmt|;
name|cnt
operator|=
literal|0
expr_stmt|;
name|sumOfElapsedDifferences
operator|=
name|this
operator|.
name|elapseTimeLog
operator|.
name|get
argument_list|(
name|pct
argument_list|)
operator|.
name|longValue
argument_list|()
operator|-
name|lastElapsed
expr_stmt|;
block|}
else|else
block|{
name|sumOfElapsedDifferences
operator|+=
operator|(
name|this
operator|.
name|elapseTimeLog
operator|.
name|get
argument_list|(
name|pct
argument_list|)
operator|.
name|longValue
argument_list|()
operator|-
name|lastElapsed
operator|)
expr_stmt|;
block|}
name|totalIncreases
operator|+=
operator|(
name|this
operator|.
name|elapseTimeLog
operator|.
name|get
argument_list|(
name|pct
argument_list|)
operator|.
name|longValue
argument_list|()
operator|-
name|lastElapsed
operator|)
expr_stmt|;
block|}
if|else if
condition|(
name|lastElapsed
operator|>
name|this
operator|.
name|elapseTimeLog
operator|.
name|get
argument_list|(
name|pct
argument_list|)
operator|.
name|longValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|prevIncreased
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|pct
argument_list|)
operator|.
name|append
argument_list|(
literal|"% elapsed time increased.  Average change = "
argument_list|)
operator|.
name|append
argument_list|(
name|elapsedTimeString
argument_list|(
name|sumOfElapsedDifferences
operator|/
name|cnt
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|".\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|pct
argument_list|)
operator|.
name|append
argument_list|(
literal|"% - "
argument_list|)
expr_stmt|;
name|prevIncreased
operator|=
literal|false
expr_stmt|;
name|prevDecreased
operator|=
literal|true
expr_stmt|;
name|cnt
operator|=
literal|0
expr_stmt|;
name|sumOfElapsedDifferences
operator|=
name|lastElapsed
operator|-
name|this
operator|.
name|elapseTimeLog
operator|.
name|get
argument_list|(
name|pct
argument_list|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|prevSame
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|pct
argument_list|)
operator|.
name|append
argument_list|(
literal|"% elapsed time stayed the same.\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|pct
argument_list|)
operator|.
name|append
argument_list|(
literal|"% - "
argument_list|)
expr_stmt|;
name|prevDecreased
operator|=
literal|true
expr_stmt|;
name|prevSame
operator|=
literal|false
expr_stmt|;
name|cnt
operator|=
literal|0
expr_stmt|;
name|sumOfElapsedDifferences
operator|=
name|lastElapsed
operator|-
name|this
operator|.
name|elapseTimeLog
operator|.
name|get
argument_list|(
name|pct
argument_list|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sumOfElapsedDifferences
operator|+=
operator|(
name|lastElapsed
operator|-
name|this
operator|.
name|elapseTimeLog
operator|.
name|get
argument_list|(
name|pct
argument_list|)
operator|.
name|longValue
argument_list|()
operator|)
expr_stmt|;
block|}
name|totalDecreases
operator|+=
operator|(
name|lastElapsed
operator|-
name|this
operator|.
name|elapseTimeLog
operator|.
name|get
argument_list|(
name|pct
argument_list|)
operator|.
name|longValue
argument_list|()
operator|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|prevIncreased
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|pct
argument_list|)
operator|.
name|append
argument_list|(
literal|"% elapsed time increased.  Average change = "
argument_list|)
operator|.
name|append
argument_list|(
name|elapsedTimeString
argument_list|(
name|sumOfElapsedDifferences
operator|/
name|cnt
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|".\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|pct
argument_list|)
operator|.
name|append
argument_list|(
literal|"% - "
argument_list|)
expr_stmt|;
name|prevIncreased
operator|=
literal|false
expr_stmt|;
name|prevSame
operator|=
literal|true
expr_stmt|;
name|cnt
operator|=
literal|0
expr_stmt|;
name|sumOfElapsedDifferences
operator|=
literal|0
expr_stmt|;
block|}
if|else if
condition|(
name|prevDecreased
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|pct
argument_list|)
operator|.
name|append
argument_list|(
literal|"% elapsed time decreased.  Average change = "
argument_list|)
operator|.
name|append
argument_list|(
name|elapsedTimeString
argument_list|(
name|sumOfElapsedDifferences
operator|/
name|cnt
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|".\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|pct
argument_list|)
operator|.
name|append
argument_list|(
literal|"% - "
argument_list|)
expr_stmt|;
name|prevSame
operator|=
literal|true
expr_stmt|;
name|prevDecreased
operator|=
literal|false
expr_stmt|;
name|cnt
operator|=
literal|0
expr_stmt|;
name|sumOfElapsedDifferences
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|sumOfElapsedDifferences
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|cnt
operator|++
expr_stmt|;
name|lastElapsed
operator|=
name|this
operator|.
name|elapseTimeLog
operator|.
name|get
argument_list|(
name|pct
argument_list|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|prevIncreased
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|100
argument_list|)
operator|.
name|append
argument_list|(
literal|"% elapsed time increased.  Average change = "
argument_list|)
operator|.
name|append
argument_list|(
name|elapsedTimeString
argument_list|(
name|sumOfElapsedDifferences
operator|/
name|cnt
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|".\n"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|prevDecreased
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|100
argument_list|)
operator|.
name|append
argument_list|(
literal|"% elapsed time decreased.  Average change = "
argument_list|)
operator|.
name|append
argument_list|(
name|elapsedTimeString
argument_list|(
name|sumOfElapsedDifferences
operator|/
name|cnt
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|".\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|100
argument_list|)
operator|.
name|append
argument_list|(
literal|"% elapsed time stayed the same.\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"Total increased time:"
argument_list|)
operator|.
name|append
argument_list|(
name|elapsedTimeString
argument_list|(
name|totalIncreases
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"Total decreased time:"
argument_list|)
operator|.
name|append
argument_list|(
name|elapsedTimeString
argument_list|(
name|totalDecreases
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|".\n\n"
argument_list|)
expr_stmt|;
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|public
name|void
name|logElapsedTimeAnalysis
parameter_list|()
block|{
name|String
name|analysis
init|=
name|getElapsedTimeAnalysisString
argument_list|()
decl_stmt|;
if|if
condition|(
name|analysis
operator|!=
literal|null
condition|)
block|{
name|Logger
operator|.
name|getLogger
argument_list|(
name|cls
argument_list|)
operator|.
name|info
argument_list|(
name|analysis
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

