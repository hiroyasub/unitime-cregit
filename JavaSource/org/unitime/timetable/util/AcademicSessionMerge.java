begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ArrangeCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Building
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|BuildingPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseSubpartCredit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePatternPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentRoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|EventServiceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExternalBuilding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExternalRoom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExternalRoomDepartment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExternalRoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|FixedCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|GlobalRoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|LearningManagementSystemInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|NonUniversityLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|NonUniversityLocationPicture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|OverrideType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomDept
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeaturePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeatureType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroupPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPicture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomTypeOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SessionConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StandardEventNoteDepartment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StandardEventNoteSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TravelTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|VariableFixedCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|VariableRangeCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|InstrOfferingConfigComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|SchedulingSubpartComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|BuildingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseCatalogDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DatePatternDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentRoomFeatureDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DistributionPrefDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DistributionTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|EventServiceProviderDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|GlobalRoomFeatureDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstrOfferingConfigDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructorAttributeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|LearningManagementSystemInfoDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|LocationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|NonUniversityLocationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|NonUniversityLocationPictureDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomDeptDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomFeatureDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomFeatureTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomGroupDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomPictureDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomTypeOptionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SchedulingSubpartDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionConfigDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolverGroupDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StandardEventNoteDepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StandardEventNoteSessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SubjectAreaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TimePatternDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TimetableManagerDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TravelTimeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|SessionRollForward
operator|.
name|CancelledClassAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|SessionRollForward
operator|.
name|DistributionMode
import|;
end_import

begin_class
specifier|public
class|class
name|AcademicSessionMerge
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|SessionRollForward
name|iSessionRollForward
decl_stmt|;
specifier|private
name|Log
name|iLog
decl_stmt|;
specifier|private
name|RoomFeatureType
name|iCampusRoomFeatureType
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|GlobalRoomFeature
argument_list|>
name|iPrefixRoomFeatureMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|GlobalRoomFeature
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Set
argument_list|<
name|Location
argument_list|>
argument_list|>
name|iRoomList
decl_stmt|;
specifier|private
name|Session
name|iMergedSession
decl_stmt|;
specifier|private
name|boolean
name|iUseCampusPrefixForDepartments
decl_stmt|;
specifier|private
name|boolean
name|iUseCampusPrefixForSubjectAreas
decl_stmt|;
specifier|private
name|String
name|iPrefixSeparator
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|iDepartmentCodesWithDifferentPrefix
decl_stmt|;
specifier|private
name|boolean
name|iResetClassSuffix
decl_stmt|;
specifier|public
name|AcademicSessionMerge
parameter_list|(
name|Long
name|mergedSessionId
parameter_list|,
name|Long
name|primarySessionId
parameter_list|,
name|Long
name|secondarySessionId
parameter_list|,
name|boolean
name|useCampusPrefixForDepartments
parameter_list|,
name|boolean
name|useCampusPrefixForSubjectAreas
parameter_list|,
name|String
name|prefixSeparator
parameter_list|,
name|String
name|primarySessionDefaultPrefix
parameter_list|,
name|String
name|secondarySessionDefaultPrefix
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|departmentCodesWithDifferentPrefix
parameter_list|,
name|String
name|classPrefsAction
parameter_list|,
name|String
name|subpartLocationPrefsAction
parameter_list|,
name|String
name|subpartTimePrefsAction
parameter_list|,
name|boolean
name|mergeWaitListsProhibitedOverrides
parameter_list|,
name|DistributionMode
name|distributionPrefMode
parameter_list|,
name|CancelledClassAction
name|cancelledClassAction
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Log
name|log
parameter_list|)
block|{
if|if
condition|(
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|!=
literal|null
operator|&&
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
name|iMergedSession
operator|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|mergedSessionId
argument_list|)
expr_stmt|;
name|Session
name|primarySession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|primarySessionId
argument_list|)
decl_stmt|;
name|Session
name|secondarySession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|secondarySessionId
argument_list|)
decl_stmt|;
name|iUseCampusPrefixForDepartments
operator|=
name|useCampusPrefixForDepartments
expr_stmt|;
name|iUseCampusPrefixForSubjectAreas
operator|=
name|useCampusPrefixForSubjectAreas
expr_stmt|;
name|iPrefixSeparator
operator|=
name|prefixSeparator
expr_stmt|;
name|iDepartmentCodesWithDifferentPrefix
operator|=
name|departmentCodesWithDifferentPrefix
expr_stmt|;
name|iLog
operator|=
name|log
expr_stmt|;
name|iResetClassSuffix
operator|=
name|ApplicationProperty
operator|.
name|RollForwardResetClassSuffix
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|iSessionRollForward
operator|=
operator|new
name|SessionRollForward
argument_list|(
name|log
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Pull the departments from both sessions together into set of departments
name|log
operator|.
name|info
argument_list|(
literal|"Pull the departments from both sessions together into set of departments"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Copying Primary Session Departments: "
operator|+
name|primarySession
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|copyMergeDepartmentsToSession
argument_list|(
name|primarySession
argument_list|,
name|primarySessionDefaultPrefix
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Copying Secondary Session Departments: "
operator|+
name|secondarySession
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|copyMergeDepartmentsToSession
argument_list|(
name|secondarySession
argument_list|,
name|secondarySessionDefaultPrefix
argument_list|)
expr_stmt|;
comment|//Use the session roll forward to roll use the session configuration from the primary session
name|log
operator|.
name|info
argument_list|(
literal|"Use the session roll forward to roll use the session configuration from the primary session"
argument_list|)
expr_stmt|;
name|copyMergeConfigurationToSession
argument_list|(
name|primarySession
argument_list|,
name|primarySessionDefaultPrefix
argument_list|)
expr_stmt|;
comment|// Pull the timetable managers from both sessions together
name|log
operator|.
name|info
argument_list|(
literal|"Pull the timetable managers from both sessions together"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Copying Primary Session Managers: "
operator|+
name|primarySession
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|copyMergeTimetableManagersToSession
argument_list|(
name|primarySession
argument_list|,
name|primarySessionDefaultPrefix
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Copying Secondary Session Managers: "
operator|+
name|secondarySession
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|copyMergeTimetableManagersToSession
argument_list|(
name|secondarySession
argument_list|,
name|secondarySessionDefaultPrefix
argument_list|)
expr_stmt|;
comment|// Pull the room features from both sessions together
name|log
operator|.
name|info
argument_list|(
literal|"Pull the room features from both sessions together"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Copying Primary Session Room Features: "
operator|+
name|primarySession
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|copyMergeRoomFeaturesToSession
argument_list|(
name|primarySession
argument_list|,
name|primarySessionDefaultPrefix
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Copying Secondary Session Room Features: "
operator|+
name|secondarySession
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|copyMergeRoomFeaturesToSession
argument_list|(
name|secondarySession
argument_list|,
name|secondarySessionDefaultPrefix
argument_list|)
expr_stmt|;
comment|// Pull the room groups from both sessions together
name|log
operator|.
name|info
argument_list|(
literal|"Pull the room groups from both sessions together"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Copying Primary Session Room Groups: "
operator|+
name|primarySession
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|copyMergeRoomGroupsToSession
argument_list|(
name|primarySession
argument_list|,
name|primarySessionDefaultPrefix
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Copying Secondary Session Room Groups: "
operator|+
name|secondarySession
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|copyMergeRoomGroupsToSession
argument_list|(
name|secondarySession
argument_list|,
name|secondarySessionDefaultPrefix
argument_list|)
expr_stmt|;
comment|// Pull the buildings from both sessions together
name|log
operator|.
name|info
argument_list|(
literal|"Pull the buildings from both sessions together"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Copying Primary Session Buildings: "
operator|+
name|primarySession
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|copyMergeBuildingsToSession
argument_list|(
name|primarySession
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Copying Secondary Session Buildings: "
operator|+
name|secondarySession
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|copyMergeBuildingsToSession
argument_list|(
name|secondarySession
argument_list|)
expr_stmt|;
comment|// Pull the locations from both sessions together
name|log
operator|.
name|info
argument_list|(
literal|"Pull the locations from both sessions together"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Copying Primary Session Locations: "
operator|+
name|primarySession
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|copyMergeLocationsToSession
argument_list|(
name|primarySession
argument_list|,
name|primarySessionDefaultPrefix
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Copying Secondary Session Locations: "
operator|+
name|secondarySession
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|copyMergeLocationsToSession
argument_list|(
name|secondarySession
argument_list|,
name|secondarySessionDefaultPrefix
argument_list|)
expr_stmt|;
comment|// Pull the travel times from both sessions together
name|log
operator|.
name|info
argument_list|(
literal|"Pull the travel times from both sessions together"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Copying Primary Session Travel Times: "
operator|+
name|primarySession
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|copyMergeTravelTimesToSession
argument_list|(
name|primarySession
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Copying Secondary Session Travel Times: "
operator|+
name|secondarySession
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|copyMergeTravelTimesToSession
argument_list|(
name|secondarySession
argument_list|)
expr_stmt|;
comment|// Pull the date patterns from the primary session into the session
name|log
operator|.
name|info
argument_list|(
literal|"Pull the date patterns from the primary session into the session"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Copying Primary Session Date Patterns: "
operator|+
name|primarySession
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|copyMergeDatePatternsToSession
argument_list|(
name|primarySession
argument_list|,
name|primarySessionDefaultPrefix
argument_list|)
expr_stmt|;
comment|// Pull the time patterns from the primary session into the session
name|log
operator|.
name|info
argument_list|(
literal|"Pull the time patterns from the primary session into the session"
argument_list|)
expr_stmt|;
name|copyMergeTimePatternsToSession
argument_list|(
name|primarySession
argument_list|,
name|primarySessionDefaultPrefix
argument_list|)
expr_stmt|;
comment|// Pull the learning management system info from both sessions together
name|log
operator|.
name|info
argument_list|(
literal|"Pull the learning management system info from both sessions together"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Copying Primary Session Learning Management System Info: "
operator|+
name|primarySession
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|copyMergeLearningManagementSystemInfoToSession
argument_list|(
name|primarySession
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Copying Secondary Session Learning Management System Info: "
operator|+
name|secondarySession
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|copyMergeLearningManagementSystemInfoToSession
argument_list|(
name|secondarySession
argument_list|)
expr_stmt|;
comment|// Pull the subjectAreas from both sessions together
name|log
operator|.
name|info
argument_list|(
literal|"Pull the subjectAreas from both sessions together"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Copying Primary Session Subject Areas: "
operator|+
name|primarySession
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|copyMergeSubjectAreasToSession
argument_list|(
name|primarySession
argument_list|,
name|primarySessionDefaultPrefix
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Copying Secondary Session Subject Areas: "
operator|+
name|secondarySession
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|copyMergeSubjectAreasToSession
argument_list|(
name|secondarySession
argument_list|,
name|secondarySessionDefaultPrefix
argument_list|)
expr_stmt|;
comment|// Pull the departmental instructors from both sessions together
name|log
operator|.
name|info
argument_list|(
literal|"Pull the departmental instructors from both sessions together"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Copying Primary Session Departmental Instructors: "
operator|+
name|primarySession
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|copyMergeInstructorDataToSession
argument_list|(
name|primarySession
argument_list|,
name|primarySessionDefaultPrefix
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Copying Secondary Session Departmental Instructors: "
operator|+
name|secondarySession
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|copyMergeInstructorDataToSession
argument_list|(
name|secondarySession
argument_list|,
name|secondarySessionDefaultPrefix
argument_list|)
expr_stmt|;
comment|// Pull the courses from both sessions together
name|log
operator|.
name|info
argument_list|(
literal|"Pull the courses from both sessions together"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Copying Primary Session Course Offerings: "
operator|+
name|primarySession
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|copyMergeCourseOfferingsToSession
argument_list|(
name|primarySession
argument_list|,
name|classPrefsAction
argument_list|,
name|subpartLocationPrefsAction
argument_list|,
name|subpartTimePrefsAction
argument_list|,
name|mergeWaitListsProhibitedOverrides
argument_list|,
name|distributionPrefMode
argument_list|,
name|cancelledClassAction
argument_list|,
name|primarySessionDefaultPrefix
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Copying Secondary Session Course Offerings: "
operator|+
name|secondarySession
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|copyMergeCourseOfferingsToSession
argument_list|(
name|secondarySession
argument_list|,
name|classPrefsAction
argument_list|,
name|subpartLocationPrefsAction
argument_list|,
name|subpartTimePrefsAction
argument_list|,
name|mergeWaitListsProhibitedOverrides
argument_list|,
name|distributionPrefMode
argument_list|,
name|cancelledClassAction
argument_list|,
name|secondarySessionDefaultPrefix
argument_list|)
expr_stmt|;
comment|// Pull the instructors onto their classes for each session
name|log
operator|.
name|info
argument_list|(
literal|"Copying Primary Session Instructors onto Classes: "
operator|+
name|primarySession
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|copyMergeClassInstructorsToSession
argument_list|(
name|primarySession
argument_list|,
name|primarySessionDefaultPrefix
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Copying Secondary Session Instructors onto Classes: "
operator|+
name|secondarySession
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|copyMergeClassInstructorsToSession
argument_list|(
name|secondarySession
argument_list|,
name|secondarySessionDefaultPrefix
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addPrefixToDeptFields
parameter_list|(
name|Department
name|department
parameter_list|,
name|String
name|suffix
parameter_list|)
block|{
name|department
operator|.
name|setDeptCode
argument_list|(
name|suffix
operator|+
name|iPrefixSeparator
operator|+
name|department
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
name|department
operator|.
name|setAbbreviation
argument_list|(
name|suffix
operator|+
name|iPrefixSeparator
operator|+
name|department
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|department
operator|.
name|setName
argument_list|(
name|suffix
operator|+
name|iPrefixSeparator
operator|+
name|department
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|department
operator|.
name|isExternalManager
argument_list|()
condition|)
block|{
name|department
operator|.
name|setExternalMgrAbbv
argument_list|(
name|suffix
operator|+
name|iPrefixSeparator
operator|+
name|department
operator|.
name|getExternalMgrAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|department
operator|.
name|setExternalMgrLabel
argument_list|(
name|suffix
operator|+
name|iPrefixSeparator
operator|+
name|department
operator|.
name|getExternalMgrLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|findPrefix
parameter_list|(
name|String
name|deptCode
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
name|String
name|prefix
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|defaultPrefix
operator|!=
literal|null
operator|&&
name|iPrefixSeparator
operator|!=
literal|null
condition|)
block|{
name|prefix
operator|=
name|defaultPrefix
expr_stmt|;
if|if
condition|(
name|iDepartmentCodesWithDifferentPrefix
operator|!=
literal|null
operator|&&
name|iDepartmentCodesWithDifferentPrefix
operator|.
name|containsKey
argument_list|(
name|deptCode
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|iDepartmentCodesWithDifferentPrefix
operator|.
name|get
argument_list|(
name|deptCode
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|prefix
return|;
block|}
specifier|private
name|void
name|mergeGlobalInstructorAttributesToSession
parameter_list|(
name|Session
name|fromSession
parameter_list|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|InstructorAttribute
argument_list|>
name|attributes
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|InstructorAttribute
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|InstructorAttribute
name|oldAttribute
range|:
name|InstructorAttribute
operator|.
name|getAllGlobalAttributes
argument_list|(
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
control|)
block|{
name|InstructorAttributeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|delete
argument_list|(
name|oldAttribute
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|InstructorAttribute
argument_list|>
name|globalAttributes
init|=
name|InstructorAttribute
operator|.
name|getAllGlobalAttributes
argument_list|(
name|fromSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|InstructorAttribute
name|fromAttribute
range|:
name|globalAttributes
control|)
block|{
name|InstructorAttribute
name|toAttribute
init|=
operator|new
name|InstructorAttribute
argument_list|()
decl_stmt|;
name|toAttribute
operator|.
name|setSession
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
name|toAttribute
operator|.
name|setCode
argument_list|(
name|fromAttribute
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|toAttribute
operator|.
name|setName
argument_list|(
name|fromAttribute
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|toAttribute
operator|.
name|setType
argument_list|(
name|fromAttribute
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|toAttribute
operator|.
name|setInstructors
argument_list|(
operator|new
name|HashSet
argument_list|<
name|DepartmentalInstructor
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|toAttribute
operator|.
name|setChildAttributes
argument_list|(
operator|new
name|HashSet
argument_list|<
name|InstructorAttribute
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|fromAttribute
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|toAttribute
argument_list|)
expr_stmt|;
name|InstructorAttributeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|save
argument_list|(
name|toAttribute
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|InstructorAttribute
name|fromChildAttribute
range|:
name|globalAttributes
control|)
block|{
if|if
condition|(
name|fromChildAttribute
operator|.
name|getParentAttribute
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|InstructorAttribute
name|toChildAttribute
init|=
name|attributes
operator|.
name|get
argument_list|(
name|fromChildAttribute
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|InstructorAttribute
name|toParentAttribute
init|=
name|attributes
operator|.
name|get
argument_list|(
name|fromChildAttribute
operator|.
name|getParentAttribute
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|toParentAttribute
operator|!=
literal|null
condition|)
block|{
name|toChildAttribute
operator|.
name|setParentAttribute
argument_list|(
name|toParentAttribute
argument_list|)
expr_stmt|;
name|toParentAttribute
operator|.
name|getChildAttributes
argument_list|()
operator|.
name|add
argument_list|(
name|toChildAttribute
argument_list|)
expr_stmt|;
name|InstructorAttributeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|toChildAttribute
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|copyMergeConfigurationToSession
parameter_list|(
name|Session
name|fromSession
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
name|SessionConfigDAO
name|scDao
init|=
name|SessionConfigDAO
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|// remove old configuration
for|for
control|(
name|SessionConfig
name|config
range|:
operator|(
name|List
argument_list|<
name|SessionConfig
argument_list|>
operator|)
name|scDao
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from SessionConfig where session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|scDao
operator|.
name|delete
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
comment|// create new configuration
for|for
control|(
name|SessionConfig
name|config
range|:
operator|(
name|List
argument_list|<
name|SessionConfig
argument_list|>
operator|)
name|scDao
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from SessionConfig where session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|fromSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|SessionConfig
name|newConfig
init|=
operator|new
name|SessionConfig
argument_list|()
decl_stmt|;
name|newConfig
operator|.
name|setKey
argument_list|(
name|config
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|newConfig
operator|.
name|setDescription
argument_list|(
name|config
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|newConfig
operator|.
name|setValue
argument_list|(
name|config
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|newConfig
operator|.
name|setSession
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
name|scDao
operator|.
name|save
argument_list|(
name|newConfig
argument_list|)
expr_stmt|;
block|}
name|StandardEventNoteSessionDAO
name|sensDao
init|=
name|StandardEventNoteSessionDAO
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|// remove old notes
for|for
control|(
name|StandardEventNoteSession
name|note
range|:
operator|(
name|List
argument_list|<
name|StandardEventNoteSession
argument_list|>
operator|)
name|sensDao
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from StandardEventNoteSession where session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|sensDao
operator|.
name|delete
argument_list|(
name|note
argument_list|)
expr_stmt|;
block|}
name|StandardEventNoteDepartmentDAO
name|sendDao
init|=
name|StandardEventNoteDepartmentDAO
operator|.
name|getInstance
argument_list|()
decl_stmt|;
for|for
control|(
name|StandardEventNoteDepartment
name|note
range|:
operator|(
name|List
argument_list|<
name|StandardEventNoteDepartment
argument_list|>
operator|)
name|sendDao
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from StandardEventNoteDepartment where department.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|sendDao
operator|.
name|delete
argument_list|(
name|note
argument_list|)
expr_stmt|;
block|}
comment|// create new notes
for|for
control|(
name|StandardEventNoteSession
name|note
range|:
operator|(
name|List
argument_list|<
name|StandardEventNoteSession
argument_list|>
operator|)
name|sensDao
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from StandardEventNoteSession where session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|fromSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|StandardEventNoteSession
name|newNote
init|=
operator|new
name|StandardEventNoteSession
argument_list|()
decl_stmt|;
name|newNote
operator|.
name|setNote
argument_list|(
name|note
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|newNote
operator|.
name|setReference
argument_list|(
name|note
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|newNote
operator|.
name|setSession
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
name|newNote
operator|.
name|setUniqueId
argument_list|(
name|sensDao
operator|.
name|save
argument_list|(
name|newNote
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StandardEventNoteDepartment
name|note
range|:
operator|(
name|List
argument_list|<
name|StandardEventNoteDepartment
argument_list|>
operator|)
name|sendDao
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from StandardEventNoteDepartment where department.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|fromSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Department
name|newDepartment
init|=
name|findToDepartment
argument_list|(
name|note
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|defaultPrefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|newDepartment
operator|!=
literal|null
condition|)
block|{
name|StandardEventNoteDepartment
name|newNote
init|=
operator|new
name|StandardEventNoteDepartment
argument_list|()
decl_stmt|;
name|newNote
operator|.
name|setNote
argument_list|(
name|note
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|newNote
operator|.
name|setReference
argument_list|(
name|note
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|newNote
operator|.
name|setDepartment
argument_list|(
name|newDepartment
argument_list|)
expr_stmt|;
name|newNote
operator|.
name|setUniqueId
argument_list|(
name|sendDao
operator|.
name|save
argument_list|(
name|newNote
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|RoomTypeOptionDAO
name|rtoDao
init|=
name|RoomTypeOptionDAO
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|// remove room type options
for|for
control|(
name|RoomTypeOption
name|option
range|:
operator|(
name|List
argument_list|<
name|RoomTypeOption
argument_list|>
operator|)
name|rtoDao
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from RoomTypeOption where department.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|rtoDao
operator|.
name|delete
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
comment|// create new room type options
for|for
control|(
name|RoomTypeOption
name|option
range|:
operator|(
name|List
argument_list|<
name|RoomTypeOption
argument_list|>
operator|)
name|rtoDao
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from RoomTypeOption where department.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|fromSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Department
name|newDepartment
init|=
name|findToDepartment
argument_list|(
name|option
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|defaultPrefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|newDepartment
operator|!=
literal|null
condition|)
block|{
name|RoomTypeOption
name|newOption
init|=
operator|new
name|RoomTypeOption
argument_list|()
decl_stmt|;
name|newOption
operator|.
name|setBreakTime
argument_list|(
name|option
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|newOption
operator|.
name|setDepartment
argument_list|(
name|newDepartment
argument_list|)
expr_stmt|;
name|newOption
operator|.
name|setMessage
argument_list|(
name|option
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|newOption
operator|.
name|setRoomType
argument_list|(
name|option
operator|.
name|getRoomType
argument_list|()
argument_list|)
expr_stmt|;
name|newOption
operator|.
name|setStatus
argument_list|(
name|RoomTypeOption
operator|.
name|getDefaultStatus
argument_list|()
argument_list|)
expr_stmt|;
name|rtoDao
operator|.
name|save
argument_list|(
name|newOption
argument_list|)
expr_stmt|;
block|}
block|}
name|EventServiceProviderDAO
name|espDao
init|=
name|EventServiceProviderDAO
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|// remove old service providers
for|for
control|(
name|EventServiceProvider
name|provider
range|:
operator|(
name|List
argument_list|<
name|EventServiceProvider
argument_list|>
operator|)
name|espDao
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from EventServiceProvider where session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|espDao
operator|.
name|delete
argument_list|(
name|provider
argument_list|)
expr_stmt|;
block|}
comment|// create new service providers
for|for
control|(
name|EventServiceProvider
name|provider
range|:
operator|(
name|List
argument_list|<
name|EventServiceProvider
argument_list|>
operator|)
name|espDao
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from EventServiceProvider where session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|fromSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|provider
operator|.
name|isVisible
argument_list|()
condition|)
continue|continue;
comment|// do not roll-forward providers that are marked as not visible
name|EventServiceProvider
name|newProvider
init|=
operator|new
name|EventServiceProvider
argument_list|()
decl_stmt|;
name|newProvider
operator|.
name|setReference
argument_list|(
name|provider
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|newProvider
operator|.
name|setLabel
argument_list|(
name|provider
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|newProvider
operator|.
name|setEmail
argument_list|(
name|provider
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|newProvider
operator|.
name|setNote
argument_list|(
name|provider
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|newProvider
operator|.
name|setAllRooms
argument_list|(
name|provider
operator|.
name|getAllRooms
argument_list|()
argument_list|)
expr_stmt|;
name|newProvider
operator|.
name|setVisible
argument_list|(
name|provider
operator|.
name|getVisible
argument_list|()
argument_list|)
expr_stmt|;
name|newProvider
operator|.
name|setSession
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|provider
operator|.
name|getDepartment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Department
name|newDepartment
init|=
name|findToDepartment
argument_list|(
name|provider
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|defaultPrefix
argument_list|)
decl_stmt|;
comment|//provider.getDepartment().findSameDepartmentInSession(toSession);
if|if
condition|(
name|newDepartment
operator|==
literal|null
condition|)
continue|continue;
name|newProvider
operator|.
name|setDepartment
argument_list|(
name|newDepartment
argument_list|)
expr_stmt|;
block|}
name|newProvider
operator|.
name|setUniqueId
argument_list|(
name|espDao
operator|.
name|save
argument_list|(
name|newProvider
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// merge global instructor attributes to session
name|mergeGlobalInstructorAttributesToSession
argument_list|(
name|fromSession
argument_list|)
expr_stmt|;
name|ApplicationProperties
operator|.
name|clearSessionProperties
argument_list|(
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|scDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|copyMergeDepartmentsToSession
parameter_list|(
name|Session
name|fromSession
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
throws|throws
name|Exception
block|{
name|Department
name|toDepartment
init|=
literal|null
decl_stmt|;
name|DepartmentDAO
name|dDao
init|=
operator|new
name|DepartmentDAO
argument_list|()
decl_stmt|;
name|SolverGroup
name|sg
init|=
literal|null
decl_stmt|;
name|String
name|prefix
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Department
argument_list|>
name|departments
init|=
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findBySession
argument_list|(
name|dDao
operator|.
name|getSession
argument_list|()
argument_list|,
name|fromSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|dDao
operator|.
name|getSession
argument_list|()
operator|.
name|refresh
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
for|for
control|(
name|Department
name|fromDepartment
range|:
name|departments
control|)
block|{
if|if
condition|(
name|fromDepartment
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|iUseCampusPrefixForDepartments
condition|)
block|{
name|toDepartment
operator|=
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|fromDepartment
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|dDao
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|prefix
operator|=
name|findPrefix
argument_list|(
name|fromDepartment
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|toDepartment
operator|==
literal|null
condition|)
block|{
name|toDepartment
operator|=
operator|(
name|Department
operator|)
name|fromDepartment
operator|.
name|clone
argument_list|()
expr_stmt|;
name|toDepartment
operator|.
name|setStatusType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|iUseCampusPrefixForDepartments
operator|&&
name|prefix
operator|!=
literal|null
condition|)
block|{
name|addPrefixToDeptFields
argument_list|(
name|toDepartment
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
name|toDepartment
operator|.
name|setSession
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
name|iMergedSession
operator|.
name|addTodepartments
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setUniqueId
argument_list|(
name|dDao
operator|.
name|save
argument_list|(
name|toDepartment
argument_list|,
name|dDao
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fromDepartment
operator|.
name|getSolverGroup
argument_list|()
operator|!=
literal|null
operator|&&
name|toDepartment
operator|.
name|getSolverGroup
argument_list|()
operator|==
literal|null
condition|)
block|{
name|sg
operator|=
name|findToSolverGroup
argument_list|(
name|fromDepartment
operator|.
name|getSolverGroup
argument_list|()
argument_list|,
name|fromDepartment
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|sg
operator|==
literal|null
condition|)
block|{
name|sg
operator|=
operator|(
name|SolverGroup
operator|)
name|fromDepartment
operator|.
name|getSolverGroup
argument_list|()
operator|.
name|clone
argument_list|()
expr_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
name|sg
operator|.
name|setAbbv
argument_list|(
name|prefix
operator|+
name|iPrefixSeparator
operator|+
name|sg
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|sg
operator|.
name|setName
argument_list|(
name|prefix
operator|+
name|iPrefixSeparator
operator|+
name|sg
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sg
operator|.
name|setSession
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sg
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|null
operator|==
name|sg
operator|.
name|getDepartments
argument_list|()
condition|)
block|{
name|sg
operator|.
name|setDepartments
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|<
name|Department
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sg
operator|.
name|getDepartments
argument_list|()
operator|.
name|add
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setSolverGroup
argument_list|(
name|sg
argument_list|)
expr_stmt|;
name|SolverGroupDAO
name|sgDao
init|=
operator|new
name|SolverGroupDAO
argument_list|()
decl_stmt|;
name|sgDao
operator|.
name|saveOrUpdate
argument_list|(
name|sg
argument_list|)
expr_stmt|;
block|}
block|}
name|dDao
operator|.
name|saveOrUpdate
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|DistributionTypeDAO
name|dtDao
init|=
operator|new
name|DistributionTypeDAO
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|DistributionType
argument_list|>
name|l
init|=
name|dtDao
operator|.
name|getQuery
argument_list|(
literal|"select dt from DistributionType dt inner join dt.departments as d where d.uniqueId = "
operator|+
name|fromDepartment
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
operator|!
name|l
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|DistributionType
name|distributionType
range|:
name|l
control|)
block|{
name|distributionType
operator|.
name|getDepartments
argument_list|()
operator|.
name|add
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|dtDao
operator|.
name|saveOrUpdate
argument_list|(
name|distributionType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|dDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|dDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|dDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|fromDepartment
argument_list|)
expr_stmt|;
block|}
name|dDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|dDao
operator|.
name|getSession
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Department
name|findToDepartment
parameter_list|(
name|Department
name|fromDepartment
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
name|String
name|prefix
init|=
literal|null
decl_stmt|;
name|Department
name|toDepartment
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|iUseCampusPrefixForDepartments
condition|)
block|{
name|toDepartment
operator|=
name|fromDepartment
operator|.
name|findSameDepartmentInSession
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|prefix
operator|=
name|findPrefix
argument_list|(
name|fromDepartment
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
name|toDepartment
operator|=
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|prefix
operator|+
name|iPrefixSeparator
operator|+
name|fromDepartment
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|toDepartment
return|;
block|}
specifier|private
name|SolverGroup
name|findToSolverGroup
parameter_list|(
name|SolverGroup
name|fromSolverGroup
parameter_list|,
name|Department
name|fromDepartment
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
name|String
name|prefix
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iUseCampusPrefixForDepartments
condition|)
block|{
name|prefix
operator|=
name|findPrefix
argument_list|(
name|fromDepartment
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
block|}
return|return
name|SolverGroup
operator|.
name|findBySessionIdAbbv
argument_list|(
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
operator|(
name|prefix
operator|==
literal|null
condition|?
name|fromSolverGroup
operator|.
name|getAbbv
argument_list|()
else|:
name|prefix
operator|+
name|iPrefixSeparator
operator|+
name|fromSolverGroup
operator|.
name|getAbbv
argument_list|()
operator|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|copyMergeTimetableManagersToSession
parameter_list|(
name|Session
name|fromSession
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
name|Department
name|toDepartment
init|=
literal|null
decl_stmt|;
name|TimetableManagerDAO
name|tmDao
init|=
operator|new
name|TimetableManagerDAO
argument_list|()
decl_stmt|;
name|SolverGroupDAO
name|sgDao
init|=
operator|new
name|SolverGroupDAO
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Department
argument_list|>
name|departments
init|=
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findBySession
argument_list|(
name|tmDao
operator|.
name|getSession
argument_list|()
argument_list|,
name|fromSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Department
name|fromDepartment
range|:
name|departments
control|)
block|{
name|tmDao
operator|.
name|getSession
argument_list|()
operator|.
name|refresh
argument_list|(
name|fromDepartment
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromDepartment
operator|!=
literal|null
operator|&&
name|fromDepartment
operator|.
name|getTimetableManagers
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|toDepartment
operator|=
name|findToDepartment
argument_list|(
name|fromDepartment
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDepartment
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|toDepartment
operator|.
name|getTimetableManagers
argument_list|()
operator|==
literal|null
condition|)
block|{
name|toDepartment
operator|.
name|setTimetableManagers
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|<
name|TimetableManager
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TimetableManager
name|tm
range|:
name|fromDepartment
operator|.
name|getTimetableManagers
argument_list|()
control|)
block|{
if|if
condition|(
name|tm
operator|!=
literal|null
condition|)
block|{
name|tmDao
operator|.
name|refresh
argument_list|(
name|tm
argument_list|,
name|tmDao
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|getTimetableManagers
argument_list|()
operator|.
name|add
argument_list|(
name|tm
argument_list|)
expr_stmt|;
name|tm
operator|.
name|getDepartments
argument_list|()
operator|.
name|add
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|tmDao
operator|.
name|saveOrUpdate
argument_list|(
name|tm
argument_list|)
expr_stmt|;
if|if
condition|(
name|tm
operator|.
name|getSolverGroups
argument_list|(
name|iMergedSession
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|sgIt
init|=
name|tm
operator|.
name|getSolverGroups
argument_list|(
name|fromSession
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|sgIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SolverGroup
name|fromSg
init|=
operator|(
name|SolverGroup
operator|)
name|sgIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|SolverGroup
name|toSg
init|=
name|findToSolverGroup
argument_list|(
name|fromSg
argument_list|,
name|fromDepartment
argument_list|,
name|defaultPrefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|toSg
operator|!=
literal|null
operator|&&
operator|!
name|tm
operator|.
name|getSolverGroups
argument_list|()
operator|.
name|contains
argument_list|(
name|toSg
argument_list|)
condition|)
block|{
name|toSg
operator|.
name|addTotimetableManagers
argument_list|(
name|tm
argument_list|)
expr_stmt|;
name|tm
operator|.
name|addTosolverGroups
argument_list|(
name|toSg
argument_list|)
expr_stmt|;
name|sgDao
operator|.
name|update
argument_list|(
name|toSg
argument_list|)
expr_stmt|;
block|}
block|}
name|tmDao
operator|.
name|update
argument_list|(
name|tm
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|tmDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tmDao
operator|.
name|getSession
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//TODO: handle errors
name|iLog
operator|.
name|error
argument_list|(
literal|"Failed to merge all timetable managers to session."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|DepartmentRoomFeature
name|findToDeptRoomFeature
parameter_list|(
name|DepartmentRoomFeature
name|fromDeptRoomFeature
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
name|Department
name|toDepartment
init|=
name|findToDepartment
argument_list|(
name|fromDeptRoomFeature
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|defaultPrefix
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|"from RoomFeature rf where rf.department.uniqueId = :deptId and rf.label = :label"
decl_stmt|;
return|return
operator|(
name|DepartmentRoomFeature
operator|)
name|DepartmentRoomFeatureDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|query
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"deptId"
argument_list|,
name|toDepartment
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"label"
argument_list|,
name|fromDeptRoomFeature
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|private
name|RoomGroup
name|findToDeptRoomGroup
parameter_list|(
name|RoomGroup
name|fromDeptRoomGroup
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
name|Department
name|toDepartment
init|=
name|findToDepartment
argument_list|(
name|fromDeptRoomGroup
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|defaultPrefix
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|"from RoomGroup rg where rg.global = false and rg.department.uniqueId = :deptId and rg.name = :name"
decl_stmt|;
return|return
operator|(
name|RoomGroup
operator|)
name|DepartmentRoomFeatureDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|query
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"deptId"
argument_list|,
name|toDepartment
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|fromDeptRoomGroup
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|private
name|RoomFeatureType
name|getCampusRoomFeatureType
parameter_list|()
block|{
if|if
condition|(
name|iCampusRoomFeatureType
operator|==
literal|null
condition|)
block|{
name|RoomFeatureTypeDAO
name|rftDao
init|=
name|RoomFeatureTypeDAO
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|iCampusRoomFeatureType
operator|=
operator|(
name|RoomFeatureType
operator|)
name|rftDao
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from RoomFeatureType rft where rft.reference = 'campus'"
argument_list|)
operator|.
name|uniqueResult
argument_list|()
expr_stmt|;
if|if
condition|(
name|iCampusRoomFeatureType
operator|==
literal|null
condition|)
block|{
name|iCampusRoomFeatureType
operator|=
operator|new
name|RoomFeatureType
argument_list|()
expr_stmt|;
name|iCampusRoomFeatureType
operator|.
name|setReference
argument_list|(
literal|"campus"
argument_list|)
expr_stmt|;
name|iCampusRoomFeatureType
operator|.
name|setLabel
argument_list|(
name|MESSAGES
operator|.
name|labelCampus
argument_list|()
argument_list|)
expr_stmt|;
name|iCampusRoomFeatureType
operator|.
name|setShowInEventManagement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iCampusRoomFeatureType
operator|.
name|setUniqueId
argument_list|(
name|rftDao
operator|.
name|save
argument_list|(
name|iCampusRoomFeatureType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|iCampusRoomFeatureType
return|;
block|}
specifier|private
name|GlobalRoomFeature
name|getCampusRoomFeature
parameter_list|(
name|String
name|campusPrefix
parameter_list|)
block|{
if|if
condition|(
name|campusPrefix
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|GlobalRoomFeature
name|rf
init|=
name|iPrefixRoomFeatureMap
operator|.
name|get
argument_list|(
name|campusPrefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|rf
operator|==
literal|null
condition|)
block|{
name|rf
operator|=
name|GlobalRoomFeature
operator|.
name|findGlobalRoomFeatureForAbbv
argument_list|(
name|iMergedSession
argument_list|,
name|campusPrefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|rf
operator|==
literal|null
condition|)
block|{
name|rf
operator|=
operator|new
name|GlobalRoomFeature
argument_list|()
expr_stmt|;
name|rf
operator|.
name|setAbbv
argument_list|(
name|campusPrefix
argument_list|)
expr_stmt|;
name|rf
operator|.
name|setLabel
argument_list|(
name|campusPrefix
argument_list|)
expr_stmt|;
name|rf
operator|.
name|setFeatureType
argument_list|(
name|getCampusRoomFeatureType
argument_list|()
argument_list|)
expr_stmt|;
name|rf
operator|.
name|setSession
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
name|rf
operator|.
name|setUniqueId
argument_list|(
name|GlobalRoomFeatureDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|save
argument_list|(
name|rf
argument_list|)
argument_list|)
expr_stmt|;
name|iPrefixRoomFeatureMap
operator|.
name|put
argument_list|(
name|campusPrefix
argument_list|,
name|rf
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rf
return|;
block|}
specifier|public
name|void
name|copyMergeRoomFeaturesToSession
parameter_list|(
name|Session
name|fromSession
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
name|DepartmentRoomFeature
name|fromRoomFeature
init|=
literal|null
decl_stmt|;
name|DepartmentRoomFeature
name|toRoomFeature
init|=
literal|null
decl_stmt|;
name|RoomFeatureDAO
name|rfDao
init|=
operator|new
name|RoomFeatureDAO
argument_list|()
decl_stmt|;
name|Collection
name|fromRoomFeatures
init|=
name|DepartmentRoomFeature
operator|.
name|getAllRoomFeaturesForSession
argument_list|(
name|fromSession
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|fromRoomFeatures
operator|!=
literal|null
operator|&&
operator|!
name|fromRoomFeatures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|fromRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromRoomFeature
operator|=
operator|(
name|DepartmentRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromRoomFeature
operator|!=
literal|null
condition|)
block|{
name|toRoomFeature
operator|=
name|findToDeptRoomFeature
argument_list|(
name|fromRoomFeature
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|toRoomFeature
operator|==
literal|null
condition|)
block|{
name|toRoomFeature
operator|=
operator|(
name|DepartmentRoomFeature
operator|)
name|fromRoomFeature
operator|.
name|clone
argument_list|()
expr_stmt|;
name|toRoomFeature
operator|.
name|setDepartment
argument_list|(
name|findToDepartment
argument_list|(
name|fromRoomFeature
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|defaultPrefix
argument_list|)
argument_list|)
expr_stmt|;
name|toRoomFeature
operator|.
name|setUniqueId
argument_list|(
name|rfDao
operator|.
name|save
argument_list|(
name|toRoomFeature
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|rfDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|GlobalRoomFeature
name|fromRoomFeatureGlobal
range|:
name|GlobalRoomFeature
operator|.
name|getAllGlobalRoomFeatures
argument_list|(
name|fromSession
argument_list|)
control|)
block|{
name|GlobalRoomFeature
name|toRoomFeatureGlobal
init|=
name|GlobalRoomFeature
operator|.
name|findGlobalRoomFeatureForLabel
argument_list|(
name|iMergedSession
argument_list|,
name|fromRoomFeatureGlobal
operator|.
name|getLabel
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|toRoomFeatureGlobal
operator|==
literal|null
condition|)
block|{
name|toRoomFeatureGlobal
operator|=
operator|(
name|GlobalRoomFeature
operator|)
name|fromRoomFeatureGlobal
operator|.
name|clone
argument_list|()
expr_stmt|;
name|toRoomFeatureGlobal
operator|.
name|setSession
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
name|toRoomFeatureGlobal
operator|.
name|setUniqueId
argument_list|(
name|rfDao
operator|.
name|save
argument_list|(
name|toRoomFeatureGlobal
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|rfDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iLog
operator|.
name|error
argument_list|(
literal|"Failed to merge all room features to session."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|copyMergeRoomGroupsToSession
parameter_list|(
name|Session
name|fromSession
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
name|RoomGroup
name|toRoomGroup
init|=
literal|null
decl_stmt|;
name|RoomGroupDAO
name|rgDao
init|=
operator|new
name|RoomGroupDAO
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|RoomGroup
argument_list|>
name|fromRoomGroups
init|=
name|RoomGroup
operator|.
name|getAllRoomGroupsForSession
argument_list|(
name|fromSession
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|fromRoomGroups
operator|!=
literal|null
operator|&&
operator|!
name|fromRoomGroups
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|RoomGroup
name|fromRoomGroup
range|:
name|fromRoomGroups
control|)
block|{
if|if
condition|(
name|fromRoomGroup
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fromRoomGroup
operator|.
name|isGlobal
argument_list|()
condition|)
block|{
name|toRoomGroup
operator|=
name|RoomGroup
operator|.
name|findGlobalRoomGroupForName
argument_list|(
name|iMergedSession
argument_list|,
name|fromRoomGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|toRoomGroup
operator|=
name|findToDeptRoomGroup
argument_list|(
name|fromRoomGroup
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|toRoomGroup
operator|==
literal|null
condition|)
block|{
name|toRoomGroup
operator|=
operator|(
name|RoomGroup
operator|)
name|fromRoomGroup
operator|.
name|clone
argument_list|()
expr_stmt|;
name|toRoomGroup
operator|.
name|setSession
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromRoomGroup
operator|.
name|getDepartment
argument_list|()
operator|!=
literal|null
condition|)
name|toRoomGroup
operator|.
name|setDepartment
argument_list|(
name|findToDepartment
argument_list|(
name|fromRoomGroup
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|defaultPrefix
argument_list|)
argument_list|)
expr_stmt|;
name|toRoomGroup
operator|.
name|setUniqueId
argument_list|(
name|rgDao
operator|.
name|save
argument_list|(
name|toRoomGroup
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|rgDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//TODO: handle errors
name|iLog
operator|.
name|error
argument_list|(
literal|"Failed to merge all room groups to session."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|copyMergeBuildingsToSession
parameter_list|(
name|Session
name|fromSession
parameter_list|)
block|{
name|BuildingDAO
name|bDao
init|=
operator|new
name|BuildingDAO
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Building
argument_list|>
name|fromBuildings
init|=
name|bDao
operator|.
name|findBySession
argument_list|(
name|bDao
operator|.
name|getSession
argument_list|()
argument_list|,
name|fromSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|bDao
operator|.
name|getSession
argument_list|()
operator|.
name|refresh
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromBuildings
operator|!=
literal|null
operator|&&
operator|!
name|fromBuildings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|ExternalBuilding
name|toExternalBuilding
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Building
name|fromBldg
range|:
name|fromBuildings
control|)
block|{
name|Building
name|toBldg
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fromBldg
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|toBldg
operator|=
name|Building
operator|.
name|findByExternalIdAndSession
argument_list|(
name|fromBldg
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|iMergedSession
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|toBldg
operator|==
literal|null
condition|)
block|{
name|toBldg
operator|=
name|Building
operator|.
name|findByBldgAbbv
argument_list|(
name|fromBldg
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
if|if
condition|(
name|toBldg
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|fromBldg
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|iSessionRollForward
operator|.
name|sessionHasExternalBuildingList
argument_list|(
name|iMergedSession
argument_list|)
condition|)
block|{
name|toExternalBuilding
operator|=
name|ExternalBuilding
operator|.
name|findExternalBuildingForSession
argument_list|(
name|fromBldg
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|iMergedSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|toExternalBuilding
operator|!=
literal|null
condition|)
block|{
name|toBldg
operator|=
operator|new
name|Building
argument_list|()
expr_stmt|;
name|toBldg
operator|.
name|setAbbreviation
argument_list|(
name|toExternalBuilding
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|toBldg
operator|.
name|setCoordinateX
argument_list|(
name|toExternalBuilding
operator|.
name|getCoordinateX
argument_list|()
argument_list|)
expr_stmt|;
name|toBldg
operator|.
name|setCoordinateY
argument_list|(
name|toExternalBuilding
operator|.
name|getCoordinateY
argument_list|()
argument_list|)
expr_stmt|;
name|toBldg
operator|.
name|setExternalUniqueId
argument_list|(
name|toExternalBuilding
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|toBldg
operator|.
name|setName
argument_list|(
name|toExternalBuilding
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
block|}
else|else
block|{
name|toBldg
operator|=
operator|(
name|Building
operator|)
name|fromBldg
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
name|toBldg
operator|.
name|setSession
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
name|iMergedSession
operator|.
name|addTobuildings
argument_list|(
name|toBldg
argument_list|)
expr_stmt|;
name|toBldg
operator|.
name|setUniqueId
argument_list|(
name|bDao
operator|.
name|save
argument_list|(
name|toBldg
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|bDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|bDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|toBldg
argument_list|)
expr_stmt|;
comment|// -- Previously commented out to prevent NonUniqueObjectException
name|bDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|fromBldg
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//TODO: handle errors
name|iLog
operator|.
name|error
argument_list|(
literal|"Failed to merge all buildings to session."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|copyMergeRoomFeaturesForLocation
parameter_list|(
name|Location
name|fromLocation
parameter_list|,
name|Location
name|toLocation
parameter_list|,
name|HashMap
argument_list|<
name|RoomFeature
argument_list|,
name|RoomFeature
argument_list|>
name|roomFeatureCache
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
if|if
condition|(
name|fromLocation
operator|.
name|getFeatures
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromLocation
operator|.
name|getFeatures
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|GlobalRoomFeature
name|toGlobalFeature
init|=
literal|null
decl_stmt|;
name|RoomFeature
name|toFeature
init|=
literal|null
decl_stmt|;
name|boolean
name|mergeGlobalFeaturesFromFromLocationToSession
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|toLocation
operator|instanceof
name|Room
condition|)
block|{
name|Room
name|toRoom
init|=
operator|(
name|Room
operator|)
name|toLocation
decl_stmt|;
if|if
condition|(
name|toRoom
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ExternalRoom
name|er
init|=
name|ExternalRoom
operator|.
name|findExternalRoomForSession
argument_list|(
name|toRoom
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|iMergedSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|er
operator|!=
literal|null
condition|)
block|{
name|mergeGlobalFeaturesFromFromLocationToSession
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|er
operator|.
name|getRoomFeatures
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExternalRoomFeature
name|erf
range|:
name|er
operator|.
name|getRoomFeatures
argument_list|()
control|)
block|{
name|toGlobalFeature
operator|=
name|GlobalRoomFeature
operator|.
name|findGlobalRoomFeatureForLabel
argument_list|(
name|iMergedSession
argument_list|,
name|erf
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|toLocation
operator|.
name|addTofeatures
argument_list|(
name|toGlobalFeature
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
for|for
control|(
name|RoomFeature
name|fromFeature
range|:
name|fromLocation
operator|.
name|getFeatures
argument_list|()
control|)
block|{
if|if
condition|(
name|fromFeature
operator|instanceof
name|GlobalRoomFeature
operator|&&
operator|!
name|mergeGlobalFeaturesFromFromLocationToSession
condition|)
continue|continue;
name|toFeature
operator|=
operator|(
name|RoomFeature
operator|)
name|roomFeatureCache
operator|.
name|get
argument_list|(
name|fromFeature
argument_list|)
expr_stmt|;
if|if
condition|(
name|toFeature
operator|==
literal|null
condition|)
block|{
name|toFeature
operator|=
name|fromFeature
operator|.
name|findSameFeatureInSession
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|toFeature
operator|!=
literal|null
condition|)
block|{
name|roomFeatureCache
operator|.
name|put
argument_list|(
name|fromFeature
argument_list|,
name|toFeature
argument_list|)
expr_stmt|;
name|toLocation
operator|.
name|addTofeatures
argument_list|(
name|toFeature
argument_list|)
expr_stmt|;
if|if
condition|(
name|toFeature
operator|.
name|getRooms
argument_list|()
operator|==
literal|null
condition|)
block|{
name|toFeature
operator|.
name|setRooms
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|<
name|Location
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|toFeature
operator|.
name|getRooms
argument_list|()
operator|.
name|add
argument_list|(
name|toLocation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|defaultPrefix
operator|!=
literal|null
condition|)
block|{
name|HashSet
argument_list|<
name|GlobalRoomFeature
argument_list|>
name|features
init|=
operator|new
name|HashSet
argument_list|<
name|GlobalRoomFeature
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RoomDept
name|rd
range|:
name|fromLocation
operator|.
name|getRoomDepts
argument_list|()
control|)
block|{
name|String
name|prefix
init|=
name|findPrefix
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|defaultPrefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
name|toLocation
operator|.
name|addTofeatures
argument_list|(
name|getCampusRoomFeature
argument_list|(
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|copyMergeRoomGroupsForLocation
parameter_list|(
name|Location
name|fromLocation
parameter_list|,
name|Location
name|toLocation
parameter_list|,
name|HashMap
argument_list|<
name|RoomGroup
argument_list|,
name|RoomGroup
argument_list|>
name|roomGroupCache
parameter_list|)
block|{
if|if
condition|(
name|fromLocation
operator|.
name|getRoomGroups
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromLocation
operator|.
name|getRoomGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RoomGroup
name|toRoomGroup
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RoomGroup
name|fromRoomGroup
range|:
name|fromLocation
operator|.
name|getRoomGroups
argument_list|()
control|)
block|{
name|toRoomGroup
operator|=
operator|(
name|RoomGroup
operator|)
name|roomGroupCache
operator|.
name|get
argument_list|(
name|fromRoomGroup
argument_list|)
expr_stmt|;
if|if
condition|(
name|toRoomGroup
operator|==
literal|null
condition|)
name|toRoomGroup
operator|=
name|fromRoomGroup
operator|.
name|findSameRoomGroupInSession
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|toRoomGroup
operator|!=
literal|null
condition|)
block|{
name|roomGroupCache
operator|.
name|put
argument_list|(
name|fromRoomGroup
argument_list|,
name|toRoomGroup
argument_list|)
expr_stmt|;
if|if
condition|(
name|toLocation
operator|.
name|getRoomGroups
argument_list|()
operator|==
literal|null
condition|)
name|toLocation
operator|.
name|setRoomGroups
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|<
name|RoomGroup
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|toLocation
operator|.
name|getRoomGroups
argument_list|()
operator|.
name|add
argument_list|(
name|toRoomGroup
argument_list|)
expr_stmt|;
if|if
condition|(
name|toRoomGroup
operator|.
name|getRooms
argument_list|()
operator|==
literal|null
condition|)
name|toRoomGroup
operator|.
name|setRooms
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|<
name|Location
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|toRoomGroup
operator|.
name|getRooms
argument_list|()
operator|.
name|add
argument_list|(
name|toLocation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|copyMergeLocationsToSession
parameter_list|(
name|Session
name|fromSession
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
name|LocationDAO
name|lDao
init|=
name|LocationDAO
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Location
argument_list|>
name|fromLocations
init|=
name|lDao
operator|.
name|findBySession
argument_list|(
name|lDao
operator|.
name|getSession
argument_list|()
argument_list|,
name|fromSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromLocations
operator|!=
literal|null
operator|&&
operator|!
name|fromLocations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Location
name|location
range|:
name|fromLocations
control|)
block|{
if|if
condition|(
name|location
operator|instanceof
name|Room
condition|)
block|{
name|copyMergeRoomToSession
argument_list|(
name|location
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|location
operator|instanceof
name|NonUniversityLocation
condition|)
block|{
name|copyMergeNonUniversityLocationToSession
argument_list|(
name|location
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
block|}
name|LocationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iSessionRollForward
operator|.
name|sessionHasExternalRoomList
argument_list|(
name|iMergedSession
argument_list|)
condition|)
block|{
name|Room
operator|.
name|addNewExternalRoomsToSession
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Room
name|findRoomInMergeSession
parameter_list|(
name|Room
name|fromRoom
parameter_list|)
block|{
name|Room
name|toRoom
init|=
literal|null
decl_stmt|;
try|try
block|{
name|toRoom
operator|=
name|fromRoom
operator|.
name|findSameRoomInSession
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
comment|// treat as room not found leave value null
block|}
if|if
condition|(
name|toRoom
operator|==
literal|null
condition|)
block|{
name|Building
name|b
init|=
literal|null
decl_stmt|;
try|try
block|{
name|b
operator|=
name|fromRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|findSameBuildingInSession
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// treat as building not found leave value null
block|}
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|toRoom
operator|=
name|Room
operator|.
name|findByBldgIdRoomNbr
argument_list|(
name|b
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|fromRoom
operator|.
name|getRoomNumber
argument_list|()
argument_list|,
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|toRoom
return|;
block|}
specifier|private
name|NonUniversityLocation
name|findNonUniversityLocationInMergeSession
parameter_list|(
name|NonUniversityLocation
name|fromNonUniversityLocation
parameter_list|)
block|{
name|NonUniversityLocation
name|toNonUniversityLocation
init|=
literal|null
decl_stmt|;
try|try
block|{
name|toNonUniversityLocation
operator|=
name|fromNonUniversityLocation
operator|.
name|findSameNonUniversityLocationInSession
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
comment|// treat as room not found leave value null
block|}
if|if
condition|(
name|toNonUniversityLocation
operator|==
literal|null
condition|)
block|{
name|Location
name|location
init|=
name|NonUniversityLocation
operator|.
name|findByName
argument_list|(
name|NonUniversityLocationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|,
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|fromNonUniversityLocation
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|location
operator|instanceof
name|NonUniversityLocation
condition|)
block|{
name|toNonUniversityLocation
operator|=
operator|(
name|NonUniversityLocation
operator|)
name|location
expr_stmt|;
block|}
block|}
return|return
name|toNonUniversityLocation
return|;
block|}
specifier|private
name|void
name|copyMergeRoomDept
parameter_list|(
name|RoomDept
name|fromRoomDept
parameter_list|,
name|Location
name|toLocation
parameter_list|,
name|Location
name|fromLocation
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
name|Department
name|toDept
init|=
name|findToDepartment
argument_list|(
name|fromRoomDept
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|defaultPrefix
argument_list|)
decl_stmt|;
name|RoomDept
name|toRoomDept
init|=
literal|null
decl_stmt|;
name|RoomDeptDAO
name|rdDao
init|=
operator|new
name|RoomDeptDAO
argument_list|()
decl_stmt|;
if|if
condition|(
name|toDept
operator|!=
literal|null
condition|)
block|{
name|toRoomDept
operator|=
operator|new
name|RoomDept
argument_list|()
expr_stmt|;
name|toRoomDept
operator|.
name|setRoom
argument_list|(
name|toLocation
argument_list|)
expr_stmt|;
name|toRoomDept
operator|.
name|setControl
argument_list|(
name|fromRoomDept
operator|.
name|isControl
argument_list|()
argument_list|)
expr_stmt|;
name|toRoomDept
operator|.
name|setDepartment
argument_list|(
name|toDept
argument_list|)
expr_stmt|;
name|toLocation
operator|.
name|addToroomDepts
argument_list|(
name|toRoomDept
argument_list|)
expr_stmt|;
name|toDept
operator|.
name|addToroomDepts
argument_list|(
name|toRoomDept
argument_list|)
expr_stmt|;
name|toRoomDept
operator|.
name|setUniqueId
argument_list|(
name|rdDao
operator|.
name|save
argument_list|(
name|toRoomDept
argument_list|)
argument_list|)
expr_stmt|;
name|PreferenceLevel
name|fromRoomPrefLevel
init|=
name|fromLocation
operator|.
name|getRoomPreferenceLevel
argument_list|(
name|fromRoomDept
operator|.
name|getDepartment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fromRoomPrefLevel
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
condition|)
block|{
name|RoomPref
name|toRoomPref
init|=
operator|new
name|RoomPref
argument_list|()
decl_stmt|;
name|toRoomPref
operator|.
name|setOwner
argument_list|(
name|toDept
argument_list|)
expr_stmt|;
name|toRoomPref
operator|.
name|setPrefLevel
argument_list|(
name|fromRoomPrefLevel
argument_list|)
expr_stmt|;
name|toRoomPref
operator|.
name|setRoom
argument_list|(
name|toLocation
argument_list|)
expr_stmt|;
name|toDept
operator|.
name|addTopreferences
argument_list|(
name|toRoomPref
argument_list|)
expr_stmt|;
name|rdDao
operator|.
name|getSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|toDept
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|copyMergeRoomToSession
parameter_list|(
name|Location
name|location
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
name|Room
name|fromRoom
init|=
literal|null
decl_stmt|;
name|Room
name|toRoom
init|=
literal|null
decl_stmt|;
name|RoomDAO
name|rDao
init|=
operator|new
name|RoomDAO
argument_list|()
decl_stmt|;
name|DepartmentDAO
name|dDao
init|=
operator|new
name|DepartmentDAO
argument_list|()
decl_stmt|;
name|Building
name|toBuilding
init|=
literal|null
decl_stmt|;
name|Department
name|toDept
init|=
literal|null
decl_stmt|;
name|Department
name|fromDept
init|=
literal|null
decl_stmt|;
name|HashMap
argument_list|<
name|RoomFeature
argument_list|,
name|RoomFeature
argument_list|>
name|roomFeatureCache
init|=
operator|new
name|HashMap
argument_list|<
name|RoomFeature
argument_list|,
name|RoomFeature
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|RoomGroup
argument_list|,
name|RoomGroup
argument_list|>
name|roomGroupCache
init|=
operator|new
name|HashMap
argument_list|<
name|RoomGroup
argument_list|,
name|RoomGroup
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|fromRoom
operator|=
operator|(
name|Room
operator|)
name|location
expr_stmt|;
name|toRoom
operator|=
name|findRoomInMergeSession
argument_list|(
name|fromRoom
argument_list|)
expr_stmt|;
if|if
condition|(
name|toRoom
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|fromRoom
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|iSessionRollForward
operator|.
name|sessionHasExternalRoomList
argument_list|(
name|iMergedSession
argument_list|)
condition|)
block|{
name|ExternalRoom
name|toExternalRoom
init|=
name|ExternalRoom
operator|.
name|findExternalRoomForSession
argument_list|(
name|fromRoom
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|iMergedSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|toExternalRoom
operator|!=
literal|null
condition|)
block|{
name|toRoom
operator|=
operator|new
name|Room
argument_list|()
expr_stmt|;
name|toRoom
operator|.
name|setCapacity
argument_list|(
name|toExternalRoom
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setExamCapacity
argument_list|(
name|toExternalRoom
operator|.
name|getExamCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setClassification
argument_list|(
name|toExternalRoom
operator|.
name|getClassification
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setCoordinateX
argument_list|(
name|toExternalRoom
operator|.
name|getCoordinateX
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setCoordinateY
argument_list|(
name|toExternalRoom
operator|.
name|getCoordinateY
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setArea
argument_list|(
name|toExternalRoom
operator|.
name|getArea
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setDisplayName
argument_list|(
name|toExternalRoom
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setExternalUniqueId
argument_list|(
name|toExternalRoom
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setIgnoreRoomCheck
argument_list|(
name|fromRoom
operator|.
name|isIgnoreRoomCheck
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setIgnoreTooFar
argument_list|(
name|fromRoom
operator|.
name|isIgnoreTooFar
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setPattern
argument_list|(
name|fromRoom
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setRoomNumber
argument_list|(
name|toExternalRoom
operator|.
name|getRoomNumber
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setRoomType
argument_list|(
name|toExternalRoom
operator|.
name|getRoomType
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setExamTypes
argument_list|(
operator|new
name|HashSet
argument_list|<
name|ExamType
argument_list|>
argument_list|(
name|fromRoom
operator|.
name|getExamTypes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setEventStatus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setBreakTime
argument_list|(
name|fromRoom
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setNote
argument_list|(
name|fromRoom
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setEventAvailability
argument_list|(
name|fromRoom
operator|.
name|getEventAvailability
argument_list|()
argument_list|)
expr_stmt|;
name|LocationPermIdGenerator
operator|.
name|setPermanentId
argument_list|(
name|toRoom
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return;
block|}
block|}
else|else
block|{
name|toRoom
operator|=
operator|(
name|Room
operator|)
name|fromRoom
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
name|toRoom
operator|.
name|setSession
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromRoom
operator|.
name|getEventDepartment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|toRoom
operator|.
name|setEventDepartment
argument_list|(
name|findToDepartment
argument_list|(
name|fromRoom
operator|.
name|getEventDepartment
argument_list|()
argument_list|,
name|defaultPrefix
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|toBuilding
operator|=
name|Building
operator|.
name|findByBldgAbbv
argument_list|(
name|rDao
operator|.
name|getSession
argument_list|()
argument_list|,
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|fromRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|toBuilding
operator|!=
literal|null
condition|)
block|{
name|toRoom
operator|.
name|setBuilding
argument_list|(
name|toBuilding
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromRoom
operator|.
name|getManagerIds
argument_list|()
operator|!=
literal|null
operator|&&
name|fromRoom
operator|.
name|getManagerIds
argument_list|()
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|String
name|toManagerStr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|stk
init|=
operator|new
name|StringTokenizer
argument_list|(
name|fromRoom
operator|.
name|getManagerIds
argument_list|()
argument_list|,
literal|","
argument_list|)
init|;
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|Long
name|fromDeptId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|stk
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromDeptId
operator|!=
literal|null
condition|)
block|{
name|fromDept
operator|=
name|dDao
operator|.
name|get
argument_list|(
name|fromDeptId
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromDept
operator|!=
literal|null
condition|)
block|{
name|toDept
operator|=
name|findToDepartment
argument_list|(
name|fromDept
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDept
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|toManagerStr
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|toManagerStr
operator|+=
literal|","
expr_stmt|;
block|}
name|toManagerStr
operator|+=
name|toDept
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
name|toRoom
operator|.
name|setManagerIds
argument_list|(
name|toManagerStr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|toRoom
operator|.
name|setPattern
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|copyMergeRoomFeaturesForLocation
argument_list|(
name|fromRoom
argument_list|,
name|toRoom
argument_list|,
name|roomFeatureCache
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
name|copyMergeRoomGroupsForLocation
argument_list|(
name|fromRoom
argument_list|,
name|toRoom
argument_list|,
name|roomGroupCache
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setUniqueId
argument_list|(
name|rDao
operator|.
name|save
argument_list|(
name|toRoom
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|mergeExistingRoomDepts
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|fromRoom
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|iSessionRollForward
operator|.
name|sessionHasExternalRoomDeptList
argument_list|(
name|iMergedSession
argument_list|)
condition|)
block|{
name|ExternalRoom
name|toExternalRoom
init|=
name|ExternalRoom
operator|.
name|findExternalRoomForSession
argument_list|(
name|fromRoom
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|iMergedSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|toExternalRoom
operator|.
name|getRoomDepartments
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|toExternalRoom
operator|.
name|getRoomDepartments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ExternalRoomDepartment
name|toExternalRoomDept
range|:
name|toExternalRoom
operator|.
name|getRoomDepartments
argument_list|()
control|)
block|{
name|boolean
name|foundDept
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RoomDept
name|fromRoomDept
range|:
name|fromRoom
operator|.
name|getRoomDepts
argument_list|()
control|)
block|{
if|if
condition|(
name|fromRoomDept
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
operator|.
name|equals
argument_list|(
name|toExternalRoomDept
operator|.
name|getDepartmentCode
argument_list|()
argument_list|)
condition|)
block|{
name|foundDept
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|foundDept
condition|)
block|{
name|mergeExistingRoomDepts
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|mergeExistingRoomDepts
condition|)
block|{
if|if
condition|(
name|fromRoom
operator|.
name|getRoomDepts
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromRoom
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|RoomDept
name|fromRoomDept
range|:
name|fromRoom
operator|.
name|getRoomDepts
argument_list|()
control|)
block|{
name|copyMergeRoomDept
argument_list|(
name|fromRoomDept
argument_list|,
name|toRoom
argument_list|,
name|fromRoom
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// resetting department sharing related fields
name|toRoom
operator|.
name|setPattern
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setManagerIds
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ExternalRoom
name|toExternalRoom
init|=
name|ExternalRoom
operator|.
name|findExternalRoomForSession
argument_list|(
name|fromRoom
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|iMergedSession
argument_list|)
decl_stmt|;
for|for
control|(
name|ExternalRoomDepartment
name|toExternalRoomDept
range|:
name|toExternalRoom
operator|.
name|getRoomDepartments
argument_list|()
control|)
block|{
name|boolean
name|foundDept
init|=
literal|false
decl_stmt|;
name|RoomDept
name|foundFromRoomDept
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RoomDept
name|fromRoomDept
range|:
name|fromRoom
operator|.
name|getRoomDepts
argument_list|()
control|)
block|{
if|if
condition|(
name|fromRoomDept
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
operator|.
name|equals
argument_list|(
name|toExternalRoomDept
operator|.
name|getDepartmentCode
argument_list|()
argument_list|)
condition|)
block|{
name|foundDept
operator|=
literal|true
expr_stmt|;
name|foundFromRoomDept
operator|=
name|fromRoomDept
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|foundDept
condition|)
block|{
name|copyMergeRoomDept
argument_list|(
name|foundFromRoomDept
argument_list|,
name|toRoom
argument_list|,
name|fromRoom
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|toRoom
operator|.
name|addExternalRoomDept
argument_list|(
name|toExternalRoomDept
argument_list|,
name|toExternalRoom
operator|.
name|getRoomDepartments
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|rDao
operator|.
name|saveOrUpdate
argument_list|(
name|toRoom
argument_list|)
expr_stmt|;
name|RoomPictureDAO
name|rpDao
init|=
operator|new
name|RoomPictureDAO
argument_list|()
decl_stmt|;
for|for
control|(
name|RoomPicture
name|fromPicture
range|:
name|fromRoom
operator|.
name|getPictures
argument_list|()
control|)
block|{
name|RoomPicture
name|toPicture
init|=
name|fromPicture
operator|.
name|clonePicture
argument_list|()
decl_stmt|;
name|toPicture
operator|.
name|setLocation
argument_list|(
name|toRoom
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|addTopictures
argument_list|(
name|toPicture
argument_list|)
expr_stmt|;
name|toPicture
operator|.
name|setUniqueId
argument_list|(
name|rpDao
operator|.
name|save
argument_list|(
name|toPicture
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|EventServiceProvider
name|fromProvider
range|:
name|fromRoom
operator|.
name|getAllowedServices
argument_list|()
control|)
block|{
name|EventServiceProvider
name|toProvider
init|=
name|fromProvider
operator|.
name|findInSession
argument_list|(
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|toProvider
operator|!=
literal|null
condition|)
name|toRoom
operator|.
name|addToallowedServices
argument_list|(
name|toProvider
argument_list|)
expr_stmt|;
block|}
name|rDao
operator|.
name|saveOrUpdate
argument_list|(
name|toRoom
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|fromRoom
operator|.
name|getRoomDepts
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromRoom
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|RoomDept
name|fromRoomDept
range|:
name|fromRoom
operator|.
name|getRoomDepts
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|toRoom
operator|.
name|hasRoomDept
argument_list|(
name|findToDepartment
argument_list|(
name|fromRoomDept
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|defaultPrefix
argument_list|)
argument_list|)
condition|)
block|{
name|copyMergeRoomDept
argument_list|(
name|fromRoomDept
argument_list|,
name|toRoom
argument_list|,
name|fromRoom
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
block|}
block|}
name|rDao
operator|.
name|update
argument_list|(
name|toRoom
argument_list|)
expr_stmt|;
block|}
name|copyMergeRoomFeaturesForLocation
argument_list|(
name|fromRoom
argument_list|,
name|toRoom
argument_list|,
name|roomFeatureCache
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
name|copyMergeRoomGroupsForLocation
argument_list|(
name|fromRoom
argument_list|,
name|toRoom
argument_list|,
name|roomGroupCache
argument_list|)
expr_stmt|;
name|rDao
operator|.
name|update
argument_list|(
name|toRoom
argument_list|)
expr_stmt|;
block|}
name|rDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|rDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|toRoom
argument_list|)
expr_stmt|;
comment|// --  Previously commented out to prevent NonUniqueObjectException
name|rDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|fromRoom
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//TODO: log errors
name|iLog
operator|.
name|error
argument_list|(
literal|"Failed to merge all rooms to session."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|copyMergeNonUniversityLocationToSession
parameter_list|(
name|Location
name|location
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
name|NonUniversityLocation
name|fromNonUniversityLocation
init|=
literal|null
decl_stmt|;
name|NonUniversityLocation
name|toNonUniversityLocation
init|=
literal|null
decl_stmt|;
name|NonUniversityLocationDAO
name|nulDao
init|=
operator|new
name|NonUniversityLocationDAO
argument_list|()
decl_stmt|;
name|DepartmentDAO
name|dDao
init|=
operator|new
name|DepartmentDAO
argument_list|()
decl_stmt|;
name|Department
name|toDept
init|=
literal|null
decl_stmt|;
name|Department
name|fromDept
init|=
literal|null
decl_stmt|;
name|HashMap
argument_list|<
name|RoomFeature
argument_list|,
name|RoomFeature
argument_list|>
name|roomFeatureCache
init|=
operator|new
name|HashMap
argument_list|<
name|RoomFeature
argument_list|,
name|RoomFeature
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|RoomGroup
argument_list|,
name|RoomGroup
argument_list|>
name|roomGroupCache
init|=
operator|new
name|HashMap
argument_list|<
name|RoomGroup
argument_list|,
name|RoomGroup
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|fromNonUniversityLocation
operator|=
operator|(
name|NonUniversityLocation
operator|)
name|location
expr_stmt|;
name|toNonUniversityLocation
operator|=
name|findNonUniversityLocationInMergeSession
argument_list|(
name|fromNonUniversityLocation
argument_list|)
expr_stmt|;
if|if
condition|(
name|toNonUniversityLocation
operator|==
literal|null
condition|)
block|{
name|toNonUniversityLocation
operator|=
operator|(
name|NonUniversityLocation
operator|)
name|fromNonUniversityLocation
operator|.
name|clone
argument_list|()
expr_stmt|;
name|toNonUniversityLocation
operator|.
name|setSession
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromNonUniversityLocation
operator|.
name|getEventDepartment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|toNonUniversityLocation
operator|.
name|setEventDepartment
argument_list|(
name|findToDepartment
argument_list|(
name|fromNonUniversityLocation
operator|.
name|getEventDepartment
argument_list|()
argument_list|,
name|defaultPrefix
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fromNonUniversityLocation
operator|.
name|getManagerIds
argument_list|()
operator|!=
literal|null
operator|&&
name|fromNonUniversityLocation
operator|.
name|getManagerIds
argument_list|()
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|String
name|toManagerStr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|stk
init|=
operator|new
name|StringTokenizer
argument_list|(
name|fromNonUniversityLocation
operator|.
name|getManagerIds
argument_list|()
argument_list|,
literal|","
argument_list|)
init|;
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|Long
name|fromDeptId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|stk
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromDeptId
operator|!=
literal|null
condition|)
block|{
name|fromDept
operator|=
name|dDao
operator|.
name|get
argument_list|(
name|fromDeptId
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromDept
operator|!=
literal|null
condition|)
block|{
name|toDept
operator|=
name|findToDepartment
argument_list|(
name|fromDept
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDept
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|toManagerStr
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|toManagerStr
operator|+=
literal|","
expr_stmt|;
block|}
name|toManagerStr
operator|+=
name|toDept
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
name|toNonUniversityLocation
operator|.
name|setManagerIds
argument_list|(
name|toManagerStr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|toNonUniversityLocation
operator|.
name|setPattern
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|copyMergeRoomFeaturesForLocation
argument_list|(
name|fromNonUniversityLocation
argument_list|,
name|toNonUniversityLocation
argument_list|,
name|roomFeatureCache
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
name|copyMergeRoomGroupsForLocation
argument_list|(
name|fromNonUniversityLocation
argument_list|,
name|toNonUniversityLocation
argument_list|,
name|roomGroupCache
argument_list|)
expr_stmt|;
name|toNonUniversityLocation
operator|.
name|setUniqueId
argument_list|(
name|nulDao
operator|.
name|save
argument_list|(
name|toNonUniversityLocation
argument_list|)
argument_list|)
expr_stmt|;
name|NonUniversityLocationPictureDAO
name|nulpDao
init|=
operator|new
name|NonUniversityLocationPictureDAO
argument_list|()
decl_stmt|;
for|for
control|(
name|NonUniversityLocationPicture
name|fromPicture
range|:
name|fromNonUniversityLocation
operator|.
name|getPictures
argument_list|()
control|)
block|{
name|NonUniversityLocationPicture
name|toPicture
init|=
name|fromPicture
operator|.
name|clonePicture
argument_list|()
decl_stmt|;
name|toPicture
operator|.
name|setLocation
argument_list|(
name|toNonUniversityLocation
argument_list|)
expr_stmt|;
name|toNonUniversityLocation
operator|.
name|addTopictures
argument_list|(
name|toPicture
argument_list|)
expr_stmt|;
name|toPicture
operator|.
name|setUniqueId
argument_list|(
name|nulpDao
operator|.
name|save
argument_list|(
name|toPicture
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|EventServiceProvider
name|fromProvider
range|:
name|fromNonUniversityLocation
operator|.
name|getAllowedServices
argument_list|()
control|)
block|{
name|EventServiceProvider
name|toProvider
init|=
name|fromProvider
operator|.
name|findInSession
argument_list|(
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|toProvider
operator|!=
literal|null
condition|)
name|toNonUniversityLocation
operator|.
name|addToallowedServices
argument_list|(
name|toProvider
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fromNonUniversityLocation
operator|.
name|getRoomDepts
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromNonUniversityLocation
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|RoomDept
name|fromRoomDept
range|:
name|fromNonUniversityLocation
operator|.
name|getRoomDepts
argument_list|()
control|)
block|{
name|copyMergeRoomDept
argument_list|(
name|fromRoomDept
argument_list|,
name|toNonUniversityLocation
argument_list|,
name|fromNonUniversityLocation
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
block|}
name|nulDao
operator|.
name|update
argument_list|(
name|toNonUniversityLocation
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|fromNonUniversityLocation
operator|.
name|getRoomDepts
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromNonUniversityLocation
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|RoomDept
name|fromRoomDept
range|:
name|fromNonUniversityLocation
operator|.
name|getRoomDepts
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|toNonUniversityLocation
operator|.
name|hasRoomDept
argument_list|(
name|findToDepartment
argument_list|(
name|fromRoomDept
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|defaultPrefix
argument_list|)
argument_list|)
condition|)
block|{
name|copyMergeRoomDept
argument_list|(
name|fromRoomDept
argument_list|,
name|toNonUniversityLocation
argument_list|,
name|fromNonUniversityLocation
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
block|}
block|}
name|nulDao
operator|.
name|update
argument_list|(
name|toNonUniversityLocation
argument_list|)
expr_stmt|;
block|}
name|copyMergeRoomFeaturesForLocation
argument_list|(
name|fromNonUniversityLocation
argument_list|,
name|toNonUniversityLocation
argument_list|,
name|roomFeatureCache
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
name|copyMergeRoomGroupsForLocation
argument_list|(
name|fromNonUniversityLocation
argument_list|,
name|toNonUniversityLocation
argument_list|,
name|roomGroupCache
argument_list|)
expr_stmt|;
name|nulDao
operator|.
name|update
argument_list|(
name|toNonUniversityLocation
argument_list|)
expr_stmt|;
block|}
name|nulDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|nulDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|toNonUniversityLocation
argument_list|)
expr_stmt|;
name|nulDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|fromNonUniversityLocation
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iLog
operator|.
name|error
argument_list|(
literal|"Failed to merge all non university locations to session."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Location
name|findLocation
parameter_list|(
name|Long
name|locationId
parameter_list|,
name|Long
name|sessionId
parameter_list|)
block|{
name|TravelTimeDAO
name|dao
init|=
operator|new
name|TravelTimeDAO
argument_list|()
decl_stmt|;
name|Room
name|room
init|=
operator|(
name|Room
operator|)
name|dao
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select r2 from Room r1, Room r2 where r1.uniqueId = :locationId and r2.building.session.uniqueId=:sessionId and "
operator|+
literal|"((r1.externalUniqueId is not null and r1.externalUniqueId = r2.externalUniqueId) or "
operator|+
literal|"(r1.externalUniqueId is null and r1.building.abbreviation = r2.building.abbreviation and r1.roomNumber = r2.roomNumber))"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"locationId"
argument_list|,
name|locationId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|room
operator|!=
literal|null
condition|)
return|return
name|room
return|;
return|return
operator|(
name|NonUniversityLocation
operator|)
name|dao
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select r2 from NonUniversityLocation r1, NonUniversityLocation r2 where r1.uniqueId = :locationId and r2.session.uniqueId=:sessionId "
operator|+
literal|"and r1.name = r2.name"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"locationId"
argument_list|,
name|locationId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|private
name|void
name|copyMergeTravelTimesToSession
parameter_list|(
name|Session
name|fromSession
parameter_list|)
block|{
name|TravelTimeDAO
name|dao
init|=
operator|new
name|TravelTimeDAO
argument_list|()
decl_stmt|;
for|for
control|(
name|TravelTime
name|travel
range|:
operator|(
name|List
argument_list|<
name|TravelTime
argument_list|>
operator|)
name|dao
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from TravelTime where session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|fromSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Location
name|from
init|=
name|findLocation
argument_list|(
name|travel
operator|.
name|getLocation1Id
argument_list|()
argument_list|,
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|from
operator|==
literal|null
condition|)
continue|continue;
name|Location
name|to
init|=
name|findLocation
argument_list|(
name|travel
operator|.
name|getLocation2Id
argument_list|()
argument_list|,
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|to
operator|==
literal|null
condition|)
continue|continue;
name|TravelTime
name|time
init|=
literal|null
decl_stmt|;
name|String
name|query
init|=
literal|"from TravelTime where session.uniqueId = :sessionId and location1Id = :loc1Id and location2Id = :loc2Id"
decl_stmt|;
name|time
operator|=
operator|(
name|TravelTime
operator|)
name|dao
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|query
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"loc1Id"
argument_list|,
name|from
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"loc2Id"
argument_list|,
name|to
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
expr_stmt|;
if|if
condition|(
name|time
operator|==
literal|null
condition|)
block|{
name|time
operator|=
operator|new
name|TravelTime
argument_list|()
expr_stmt|;
name|time
operator|.
name|setSession
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
name|time
operator|.
name|setLocation1Id
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|from
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|to
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|time
operator|.
name|setLocation2Id
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|from
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|to
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|time
operator|.
name|setDistance
argument_list|(
name|travel
operator|.
name|getDistance
argument_list|()
argument_list|)
expr_stmt|;
name|time
operator|.
name|setUniqueId
argument_list|(
name|dao
operator|.
name|save
argument_list|(
name|time
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|dao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|mergeDatePatternOntoDepartmentsToSession
parameter_list|(
name|DatePattern
name|fromDatePattern
parameter_list|,
name|DatePattern
name|toDatePattern
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
if|if
condition|(
name|fromDatePattern
operator|.
name|getDepartments
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromDatePattern
operator|.
name|getDepartments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Department
name|fromDept
range|:
name|fromDatePattern
operator|.
name|getDepartments
argument_list|()
control|)
block|{
name|Department
name|toDepartment
init|=
name|findToDepartment
argument_list|(
name|fromDept
argument_list|,
name|defaultPrefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|toDepartment
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|null
operator|==
name|toDepartment
operator|.
name|getDatePatterns
argument_list|()
condition|)
block|{
name|toDepartment
operator|.
name|setDatePatterns
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|<
name|DatePattern
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|toDepartment
operator|.
name|getDatePatterns
argument_list|()
operator|.
name|add
argument_list|(
name|toDatePattern
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|toDatePattern
operator|.
name|getDepartments
argument_list|()
condition|)
block|{
name|toDatePattern
operator|.
name|addTodepartments
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
block|}
name|toDatePattern
operator|.
name|addTodepartments
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|copyMergeDatePatternsToSession
parameter_list|(
name|Session
name|fromSession
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
name|List
argument_list|<
name|DatePattern
argument_list|>
name|fromDatePatterns
init|=
name|DatePattern
operator|.
name|findAll
argument_list|(
name|fromSession
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DatePattern
name|toDatePattern
init|=
literal|null
decl_stmt|;
name|DatePatternDAO
name|dpDao
init|=
operator|new
name|DatePatternDAO
argument_list|()
decl_stmt|;
name|dpDao
operator|.
name|getSession
argument_list|()
operator|.
name|refresh
argument_list|(
name|fromSession
argument_list|)
expr_stmt|;
name|dpDao
operator|.
name|getSession
argument_list|()
operator|.
name|refresh
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|DatePattern
argument_list|,
name|DatePattern
argument_list|>
name|fromToDatePatternMap
init|=
operator|new
name|HashMap
argument_list|<
name|DatePattern
argument_list|,
name|DatePattern
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|DatePattern
name|fromDatePattern
range|:
name|fromDatePatterns
control|)
block|{
if|if
condition|(
name|fromDatePattern
operator|!=
literal|null
condition|)
block|{
name|toDatePattern
operator|=
name|DatePattern
operator|.
name|findByName
argument_list|(
name|iMergedSession
argument_list|,
name|fromDatePattern
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDatePattern
operator|==
literal|null
condition|)
block|{
name|toDatePattern
operator|=
operator|(
name|DatePattern
operator|)
name|fromDatePattern
operator|.
name|clone
argument_list|()
expr_stmt|;
name|toDatePattern
operator|.
name|setSession
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
name|mergeDatePatternOntoDepartmentsToSession
argument_list|(
name|fromDatePattern
argument_list|,
name|toDatePattern
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
name|toDatePattern
operator|.
name|setUniqueId
argument_list|(
name|dpDao
operator|.
name|save
argument_list|(
name|toDatePattern
argument_list|)
argument_list|)
expr_stmt|;
name|dpDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|fromToDatePatternMap
operator|.
name|put
argument_list|(
name|fromDatePattern
argument_list|,
name|toDatePattern
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|DatePattern
name|fromDp
range|:
name|fromToDatePatternMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|DatePattern
name|toDp
init|=
name|fromToDatePatternMap
operator|.
name|get
argument_list|(
name|fromDp
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromDp
operator|.
name|getParents
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromDp
operator|.
name|getParents
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|DatePattern
name|fromParent
range|:
name|fromDp
operator|.
name|getParents
argument_list|()
control|)
block|{
name|toDp
operator|.
name|addToparents
argument_list|(
name|fromToDatePatternMap
operator|.
name|get
argument_list|(
name|fromParent
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dpDao
operator|.
name|update
argument_list|(
name|toDp
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fromSession
operator|.
name|getDefaultDatePattern
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|DatePattern
name|defDp
init|=
name|DatePattern
operator|.
name|findByName
argument_list|(
name|iMergedSession
argument_list|,
name|fromSession
operator|.
name|getDefaultDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|defDp
operator|!=
literal|null
condition|)
block|{
name|iMergedSession
operator|.
name|setDefaultDatePattern
argument_list|(
name|defDp
argument_list|)
expr_stmt|;
name|SessionDAO
name|sDao
init|=
operator|new
name|SessionDAO
argument_list|()
decl_stmt|;
name|sDao
operator|.
name|update
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
block|}
block|}
name|dpDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|dpDao
operator|.
name|getSession
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iLog
operator|.
name|error
argument_list|(
literal|"Failed to merge all date patterns to session."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|mergeTimePatternOntoDepartmentsToSession
parameter_list|(
name|TimePattern
name|fromTimePattern
parameter_list|,
name|TimePattern
name|toTimePattern
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
if|if
condition|(
name|fromTimePattern
operator|.
name|getDepartments
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromTimePattern
operator|.
name|getDepartments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Department
name|fromDept
range|:
name|fromTimePattern
operator|.
name|getDepartments
argument_list|()
control|)
block|{
name|Department
name|toDepartment
init|=
name|findToDepartment
argument_list|(
name|fromDept
argument_list|,
name|defaultPrefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|toDepartment
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|null
operator|==
name|toDepartment
operator|.
name|getTimePatterns
argument_list|()
condition|)
block|{
name|toDepartment
operator|.
name|setTimePatterns
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|<
name|TimePattern
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|toDepartment
operator|.
name|getTimePatterns
argument_list|()
operator|.
name|add
argument_list|(
name|toTimePattern
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|toTimePattern
operator|.
name|getDepartments
argument_list|()
condition|)
block|{
name|toTimePattern
operator|.
name|setDepartments
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|<
name|Department
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|toTimePattern
operator|.
name|addTodepartments
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|copyMergeTimePatternsToSession
parameter_list|(
name|Session
name|fromSession
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
name|List
argument_list|<
name|TimePattern
argument_list|>
name|fromDatePatterns
init|=
name|TimePattern
operator|.
name|findAll
argument_list|(
name|fromSession
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|TimePattern
name|toTimePattern
init|=
literal|null
decl_stmt|;
name|TimePatternDAO
name|tpDao
init|=
operator|new
name|TimePatternDAO
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|TimePattern
name|fromTimePattern
range|:
name|fromDatePatterns
control|)
block|{
if|if
condition|(
name|fromTimePattern
operator|!=
literal|null
condition|)
block|{
name|toTimePattern
operator|=
name|TimePattern
operator|.
name|findByName
argument_list|(
name|iMergedSession
argument_list|,
name|fromTimePattern
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|toTimePattern
operator|==
literal|null
condition|)
block|{
name|toTimePattern
operator|=
operator|(
name|TimePattern
operator|)
name|fromTimePattern
operator|.
name|clone
argument_list|()
expr_stmt|;
name|toTimePattern
operator|.
name|setSession
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
name|mergeTimePatternOntoDepartmentsToSession
argument_list|(
name|fromTimePattern
argument_list|,
name|toTimePattern
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
name|toTimePattern
operator|.
name|setUniqueId
argument_list|(
name|tpDao
operator|.
name|save
argument_list|(
name|toTimePattern
argument_list|)
argument_list|)
expr_stmt|;
name|tpDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|tpDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tpDao
operator|.
name|getSession
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iLog
operator|.
name|error
argument_list|(
literal|"Failed to merge all time patterns to session."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|copyMergeLearningManagementSystemInfoToSession
parameter_list|(
name|Session
name|fromSession
parameter_list|)
block|{
name|List
argument_list|<
name|LearningManagementSystemInfo
argument_list|>
name|fromLearningManagementSystems
init|=
name|LearningManagementSystemInfo
operator|.
name|findAll
argument_list|(
name|fromSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|LearningManagementSystemInfo
name|toLms
init|=
literal|null
decl_stmt|;
name|LearningManagementSystemInfoDAO
name|lmsDao
init|=
operator|new
name|LearningManagementSystemInfoDAO
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|LearningManagementSystemInfo
name|fromLms
range|:
name|fromLearningManagementSystems
control|)
block|{
if|if
condition|(
name|fromLms
operator|!=
literal|null
condition|)
block|{
name|toLms
operator|=
name|LearningManagementSystemInfo
operator|.
name|findBySessionIdAndReference
argument_list|(
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|fromLms
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|toLms
operator|==
literal|null
condition|)
block|{
name|toLms
operator|=
operator|(
name|LearningManagementSystemInfo
operator|)
name|fromLms
operator|.
name|clone
argument_list|()
expr_stmt|;
name|toLms
operator|.
name|setSession
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
name|toLms
operator|.
name|setUniqueId
argument_list|(
name|lmsDao
operator|.
name|save
argument_list|(
name|toLms
argument_list|)
argument_list|)
expr_stmt|;
name|lmsDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|lmsDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iLog
operator|.
name|error
argument_list|(
literal|"Failed to merge all learning management system infos to session."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|HashSet
argument_list|<
name|String
argument_list|>
name|findSubjectPrefixes
parameter_list|(
name|SubjectArea
name|fromSubjectArea
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|prefixes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|iUseCampusPrefixForSubjectAreas
operator|&&
name|iPrefixSeparator
operator|!=
literal|null
condition|)
block|{
name|StringBuffer
name|query
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"select distinct c.managingDept"
argument_list|)
operator|.
name|append
argument_list|(
literal|" from Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings as co"
argument_list|)
operator|.
name|append
argument_list|(
literal|" where co.subjectArea.uniqueId = :subjId"
argument_list|)
expr_stmt|;
for|for
control|(
name|Department
name|managingDept
range|:
operator|(
name|ArrayList
argument_list|<
name|Department
argument_list|>
operator|)
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"subjId"
argument_list|,
name|fromSubjectArea
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|String
name|prefix
init|=
name|defaultPrefix
decl_stmt|;
if|if
condition|(
name|iDepartmentCodesWithDifferentPrefix
operator|!=
literal|null
operator|&&
name|iDepartmentCodesWithDifferentPrefix
operator|.
name|containsKey
argument_list|(
name|managingDept
operator|.
name|getDeptCode
argument_list|()
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|iDepartmentCodesWithDifferentPrefix
operator|.
name|get
argument_list|(
name|managingDept
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|prefixes
operator|.
name|add
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prefixes
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|prefixes
operator|.
name|add
argument_list|(
name|defaultPrefix
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|prefixes
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|prefixes
return|;
block|}
specifier|private
name|SubjectArea
name|findToSubjectArea
parameter_list|(
name|SubjectArea
name|fromSubjectArea
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|SubjectArea
name|toSubjectArea
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|iUseCampusPrefixForSubjectAreas
operator|||
name|prefix
operator|==
literal|null
operator|||
name|prefix
operator|.
name|isBlank
argument_list|()
condition|)
block|{
name|toSubjectArea
operator|=
name|fromSubjectArea
operator|.
name|findSameSubjectAreaInSession
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|iPrefixSeparator
operator|!=
literal|null
condition|)
block|{
name|toSubjectArea
operator|=
name|SubjectArea
operator|.
name|findByAbbv
argument_list|(
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|prefix
operator|+
name|iPrefixSeparator
operator|+
name|fromSubjectArea
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|toSubjectArea
return|;
block|}
specifier|private
name|void
name|addPrefixToSubjectFields
parameter_list|(
name|SubjectArea
name|subjectArea
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
if|if
condition|(
name|prefix
operator|!=
literal|null
operator|&&
operator|!
name|prefix
operator|.
name|isBlank
argument_list|()
operator|&&
operator|!
name|iPrefixSeparator
operator|.
name|isBlank
argument_list|()
condition|)
block|{
name|subjectArea
operator|.
name|setSubjectAreaAbbreviation
argument_list|(
name|prefix
operator|+
name|iPrefixSeparator
operator|+
name|subjectArea
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|subjectArea
operator|.
name|setTitle
argument_list|(
name|prefix
operator|+
name|iPrefixSeparator
operator|+
name|subjectArea
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|copyMergeSubjectAreasToSession
parameter_list|(
name|Session
name|fromSession
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|SubjectArea
name|toSubjectArea
init|=
literal|null
decl_stmt|;
name|Department
name|toDepartment
init|=
literal|null
decl_stmt|;
name|SubjectAreaDAO
name|sDao
init|=
operator|new
name|SubjectAreaDAO
argument_list|()
decl_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|refresh
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|iSessionRollForward
operator|.
name|sessionHasCourseCatalog
argument_list|(
name|iMergedSession
argument_list|)
condition|)
block|{
name|SubjectArea
name|fromSubjectArea
init|=
literal|null
decl_stmt|;
name|CourseCatalogDAO
name|ccDao
init|=
operator|new
name|CourseCatalogDAO
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|subjects
init|=
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|ccDao
operator|.
name|getQuery
argument_list|(
literal|"select distinct cc.subject, cc.previousSubject from CourseCatalog cc where cc.session.uniqueId=:sessionId and cc.previousSubject != null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|subjects
operator|!=
literal|null
condition|)
block|{
name|String
name|toSubject
init|=
literal|null
decl_stmt|;
name|String
name|fromSubject
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|subjectInfo
range|:
name|subjects
control|)
block|{
if|if
condition|(
name|subjectInfo
operator|!=
literal|null
operator|&&
name|subjectInfo
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|toSubject
operator|=
operator|(
name|String
operator|)
name|subjectInfo
index|[
literal|0
index|]
expr_stmt|;
name|fromSubject
operator|=
operator|(
name|String
operator|)
name|subjectInfo
index|[
literal|1
index|]
expr_stmt|;
name|fromSubjectArea
operator|=
name|SubjectArea
operator|.
name|findByAbbv
argument_list|(
name|fromSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|fromSubject
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromSubjectArea
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|HashSet
argument_list|<
name|String
argument_list|>
name|subjectAreaPrefixes
init|=
name|findSubjectPrefixes
argument_list|(
name|fromSubjectArea
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|subjectPrefix
range|:
name|subjectAreaPrefixes
control|)
block|{
name|toSubjectArea
operator|=
name|findToSubjectArea
argument_list|(
name|fromSubjectArea
argument_list|,
name|subjectPrefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|toSubjectArea
operator|!=
literal|null
condition|)
block|{
continue|continue;
block|}
name|toSubjectArea
operator|=
operator|(
name|SubjectArea
operator|)
name|fromSubjectArea
operator|.
name|clone
argument_list|()
expr_stmt|;
name|toSubjectArea
operator|.
name|setDepartment
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|toSubjectArea
operator|.
name|setSubjectAreaAbbreviation
argument_list|(
name|toSubject
argument_list|)
expr_stmt|;
if|if
condition|(
name|subjectPrefix
operator|!=
literal|null
condition|)
block|{
name|addPrefixToSubjectFields
argument_list|(
name|toSubjectArea
argument_list|,
name|subjectPrefix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fromSubjectArea
operator|.
name|getFundingDept
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Department
name|toFundingDept
init|=
name|findToDepartment
argument_list|(
name|fromSubjectArea
operator|.
name|getFundingDept
argument_list|()
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
name|toSubjectArea
operator|.
name|setFundingDept
argument_list|(
name|toFundingDept
argument_list|)
expr_stmt|;
block|}
name|toSubjectArea
operator|.
name|setSession
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
name|iMergedSession
operator|.
name|addTosubjectAreas
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromSubjectArea
operator|.
name|getDepartment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|toDepartment
operator|=
name|findToDepartment
argument_list|(
name|fromSubjectArea
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDepartment
operator|!=
literal|null
condition|)
block|{
name|toSubjectArea
operator|.
name|setDepartment
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|addTosubjectAreas
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
name|toSubjectArea
operator|.
name|setUniqueId
argument_list|(
name|sDao
operator|.
name|save
argument_list|(
name|toSubjectArea
argument_list|)
argument_list|)
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|fromSubjectArea
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|newSubjects
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|ccDao
operator|.
name|getQuery
argument_list|(
literal|"select distinct subject from CourseCatalog cc where cc.session.uniqueId=:sessionId and cc.previousSubject = null and cc.subject not in (select sa.subjectAreaAbbreviation from SubjectArea sa where sa.session.uniqueId=:sessionId)"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|toDepartment
operator|=
name|Department
operator|.
name|findByDeptCode
argument_list|(
literal|"TEMP"
argument_list|,
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDepartment
operator|==
literal|null
condition|)
block|{
name|toDepartment
operator|=
operator|new
name|Department
argument_list|()
expr_stmt|;
name|toDepartment
operator|.
name|setAbbreviation
argument_list|(
literal|"TEMP"
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setAllowReqRoom
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setAllowReqTime
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setAllowReqDistribution
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setDeptCode
argument_list|(
literal|"TEMP"
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setExternalManager
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setExternalUniqueId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setName
argument_list|(
literal|"Temp Department For New Subjects"
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setSession
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setDistributionPrefPriority
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setInheritInstructorPreferences
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setAllowEvents
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setAllowStudentScheduling
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iMergedSession
operator|.
name|addTodepartments
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setUniqueId
argument_list|(
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|save
argument_list|(
name|toDepartment
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|toSubject
range|:
name|newSubjects
control|)
block|{
if|if
condition|(
name|toSubject
operator|!=
literal|null
condition|)
block|{
name|toSubjectArea
operator|=
operator|new
name|SubjectArea
argument_list|()
expr_stmt|;
name|toSubjectArea
operator|.
name|setDepartment
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|toSubjectArea
operator|.
name|setTitle
argument_list|(
literal|"New Subject"
argument_list|)
expr_stmt|;
name|toSubjectArea
operator|.
name|setSession
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
name|toSubjectArea
operator|.
name|setSubjectAreaAbbreviation
argument_list|(
name|toSubject
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|addTosubjectAreas
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
name|iMergedSession
operator|.
name|addTosubjectAreas
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
name|toSubjectArea
operator|.
name|setUniqueId
argument_list|(
name|sDao
operator|.
name|save
argument_list|(
name|toSubjectArea
argument_list|)
argument_list|)
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|fromSubjectArea
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|SubjectArea
argument_list|>
name|fromSubjects
init|=
name|sDao
operator|.
name|findBySession
argument_list|(
name|sDao
operator|.
name|getSession
argument_list|()
argument_list|,
name|fromSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|refresh
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromSubjects
operator|!=
literal|null
operator|&&
operator|!
name|fromSubjects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|SubjectArea
name|fromSubjectArea
range|:
name|fromSubjects
control|)
block|{
if|if
condition|(
name|fromSubjectArea
operator|!=
literal|null
condition|)
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|subjectAreaPrefixes
init|=
name|findSubjectPrefixes
argument_list|(
name|fromSubjectArea
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|subjectPrefix
range|:
name|subjectAreaPrefixes
control|)
block|{
name|toSubjectArea
operator|=
name|findToSubjectArea
argument_list|(
name|fromSubjectArea
argument_list|,
name|subjectPrefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|toSubjectArea
operator|!=
literal|null
condition|)
block|{
continue|continue;
block|}
name|toSubjectArea
operator|=
operator|(
name|SubjectArea
operator|)
name|fromSubjectArea
operator|.
name|clone
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromSubjectArea
operator|.
name|getFundingDept
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Department
name|toFundingDept
init|=
name|findToDepartment
argument_list|(
name|fromSubjectArea
operator|.
name|getFundingDept
argument_list|()
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
name|toSubjectArea
operator|.
name|setFundingDept
argument_list|(
name|toFundingDept
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|subjectPrefix
operator|!=
literal|null
condition|)
block|{
name|addPrefixToSubjectFields
argument_list|(
name|toSubjectArea
argument_list|,
name|subjectPrefix
argument_list|)
expr_stmt|;
block|}
name|toSubjectArea
operator|.
name|setDepartment
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|toSubjectArea
operator|.
name|setSession
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
name|iMergedSession
operator|.
name|addTosubjectAreas
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromSubjectArea
operator|.
name|getDepartment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|toDepartment
operator|=
name|findToDepartment
argument_list|(
name|fromSubjectArea
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDepartment
operator|!=
literal|null
condition|)
block|{
name|toSubjectArea
operator|.
name|setDepartment
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|addTosubjectAreas
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
name|toSubjectArea
operator|.
name|setUniqueId
argument_list|(
name|sDao
operator|.
name|save
argument_list|(
name|toSubjectArea
argument_list|)
argument_list|)
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|fromSubjectArea
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iLog
operator|.
name|error
argument_list|(
literal|"Failed to merge all subject areas to session."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Set
argument_list|<
name|Location
argument_list|>
argument_list|>
name|getRoomList
parameter_list|()
block|{
if|if
condition|(
name|iRoomList
operator|==
literal|null
condition|)
block|{
name|iRoomList
operator|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Set
argument_list|<
name|Location
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
return|return
name|iRoomList
return|;
block|}
specifier|private
name|Department
name|findManagingDepartmentForPrefGroup
parameter_list|(
name|PreferenceGroup
name|prefGroup
parameter_list|)
block|{
name|Department
name|toDepartment
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|prefGroup
operator|instanceof
name|DepartmentalInstructor
condition|)
block|{
name|DepartmentalInstructor
name|toInstructor
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|prefGroup
decl_stmt|;
name|toDepartment
operator|=
name|toInstructor
operator|.
name|getDepartment
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|prefGroup
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
name|SchedulingSubpart
name|toSchedSubpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|prefGroup
decl_stmt|;
if|if
condition|(
name|toSchedSubpart
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|toDepartment
operator|=
name|toSchedSubpart
operator|.
name|getManagingDept
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|toClass_
init|=
operator|(
name|Class_
operator|)
name|prefGroup
decl_stmt|;
name|toDepartment
operator|=
name|toClass_
operator|.
name|getManagingDept
argument_list|()
expr_stmt|;
if|if
condition|(
name|toDepartment
operator|==
literal|null
condition|)
block|{
name|toDepartment
operator|=
name|toClass_
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingDept
argument_list|()
expr_stmt|;
block|}
block|}
return|return
operator|(
name|toDepartment
operator|)
return|;
block|}
specifier|private
name|Department
name|findToManagingDepartmentForPrefGroup
parameter_list|(
name|PreferenceGroup
name|toPrefGroup
parameter_list|,
name|PreferenceGroup
name|fromPrefGroup
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
name|Department
name|toDepartment
init|=
name|findManagingDepartmentForPrefGroup
argument_list|(
name|toPrefGroup
argument_list|)
decl_stmt|;
if|if
condition|(
name|toDepartment
operator|==
literal|null
condition|)
block|{
name|Department
name|fromDepartment
init|=
name|findManagingDepartmentForPrefGroup
argument_list|(
name|fromPrefGroup
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromDepartment
operator|!=
literal|null
condition|)
block|{
name|toDepartment
operator|=
name|findToDepartment
argument_list|(
name|fromDepartment
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
return|return
operator|(
name|toDepartment
operator|)
return|;
block|}
block|}
return|return
operator|(
name|toDepartment
operator|)
return|;
block|}
specifier|private
specifier|static
name|String
name|buildRoomQueryForDepartment
parameter_list|(
name|Department
name|dept
parameter_list|,
name|Session
name|sess
parameter_list|,
name|String
name|locType
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"select l from "
operator|+
name|locType
operator|+
literal|" as l inner join l.roomDepts as rd where l.session.uniqueId = "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|sess
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" and rd.department.uniqueId = "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|dept
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|Location
argument_list|>
name|buildRoomListForDepartment
parameter_list|(
name|Department
name|department
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|TreeSet
argument_list|<
name|Location
argument_list|>
name|ts
init|=
operator|new
name|TreeSet
argument_list|<
name|Location
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
name|RoomDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getQuery
argument_list|(
name|buildRoomQueryForDepartment
argument_list|(
name|department
argument_list|,
name|session
argument_list|,
literal|"Room"
argument_list|)
argument_list|)
operator|.
name|iterate
argument_list|()
decl_stmt|;
name|Room
name|r
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|r
operator|=
operator|(
name|Room
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
for|for
control|(
name|RoomDept
name|rd
range|:
name|r
operator|.
name|getRoomDepts
argument_list|()
control|)
block|{
name|rd
operator|.
name|getDepartment
argument_list|()
expr_stmt|;
block|}
name|ts
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|it
operator|=
name|NonUniversityLocationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getQuery
argument_list|(
name|buildRoomQueryForDepartment
argument_list|(
name|department
argument_list|,
name|session
argument_list|,
literal|"NonUniversityLocation"
argument_list|)
argument_list|)
operator|.
name|iterate
argument_list|()
expr_stmt|;
name|NonUniversityLocation
name|l
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|l
operator|=
operator|(
name|NonUniversityLocation
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
for|for
control|(
name|RoomDept
name|rd
range|:
name|l
operator|.
name|getRoomDepts
argument_list|()
control|)
block|{
name|rd
operator|.
name|getDepartment
argument_list|()
expr_stmt|;
block|}
name|ts
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|ts
operator|)
return|;
block|}
specifier|private
name|Set
argument_list|<
name|Location
argument_list|>
name|getLocationsFor
parameter_list|(
name|PreferenceGroup
name|fromPrefGroup
parameter_list|,
name|PreferenceGroup
name|toPrefGroup
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
if|if
condition|(
name|fromPrefGroup
operator|instanceof
name|Exam
condition|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|fromPrefGroup
decl_stmt|;
if|if
condition|(
operator|!
name|getRoomList
argument_list|()
operator|.
name|containsKey
argument_list|(
name|exam
operator|.
name|getExamType
argument_list|()
argument_list|)
condition|)
name|getRoomList
argument_list|()
operator|.
name|put
argument_list|(
name|exam
operator|.
name|getExamType
argument_list|()
argument_list|,
name|Location
operator|.
name|findAllExamLocations
argument_list|(
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|exam
operator|.
name|getExamType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|getRoomList
argument_list|()
operator|.
name|get
argument_list|(
name|exam
operator|.
name|getExamType
argument_list|()
argument_list|)
return|;
block|}
name|Department
name|toDepartment
init|=
name|findToManagingDepartmentForPrefGroup
argument_list|(
name|toPrefGroup
argument_list|,
name|fromPrefGroup
argument_list|,
name|defaultPrefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|toDepartment
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
if|if
condition|(
operator|!
name|getRoomList
argument_list|()
operator|.
name|containsKey
argument_list|(
name|toDepartment
argument_list|)
condition|)
block|{
name|getRoomList
argument_list|()
operator|.
name|put
argument_list|(
name|toDepartment
argument_list|,
name|buildRoomListForDepartment
argument_list|(
name|toDepartment
argument_list|,
name|iMergedSession
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
operator|(
name|Set
argument_list|<
name|Location
argument_list|>
operator|)
name|getRoomList
argument_list|()
operator|.
name|get
argument_list|(
name|toDepartment
argument_list|)
operator|)
return|;
block|}
specifier|private
name|void
name|createToBuildingPref
parameter_list|(
name|BuildingPref
name|fromBuildingPref
parameter_list|,
name|PreferenceGroup
name|fromPrefGroup
parameter_list|,
name|PreferenceGroup
name|toPrefGroup
parameter_list|,
name|Set
argument_list|<
name|Location
argument_list|>
name|locations
parameter_list|,
name|boolean
name|isExamPref
parameter_list|,
name|boolean
name|isClassMerge
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|fromPrefGroup
operator|instanceof
name|Class_
operator|&&
operator|!
name|isClassMerge
condition|)
return|return;
name|BuildingPref
name|toBuildingPref
init|=
literal|null
decl_stmt|;
name|Building
name|toBuilding
init|=
name|fromBuildingPref
operator|.
name|getBuilding
argument_list|()
operator|.
name|findSameBuildingInSession
argument_list|(
name|iMergedSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|toBuilding
operator|!=
literal|null
condition|)
block|{
name|boolean
name|deptHasRoomInBuilding
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|isExamPref
condition|)
block|{
for|for
control|(
name|Location
name|loc
range|:
name|locations
control|)
block|{
if|if
condition|(
name|loc
operator|instanceof
name|Room
condition|)
block|{
name|Room
name|r
init|=
operator|(
name|Room
operator|)
name|loc
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|getBuilding
argument_list|()
operator|!=
literal|null
operator|&&
name|r
operator|.
name|getBuilding
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|toBuilding
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|deptHasRoomInBuilding
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|isExamPref
operator|||
name|deptHasRoomInBuilding
condition|)
block|{
name|toBuildingPref
operator|=
operator|new
name|BuildingPref
argument_list|()
expr_stmt|;
name|toBuildingPref
operator|.
name|setBuilding
argument_list|(
name|toBuilding
argument_list|)
expr_stmt|;
name|toBuildingPref
operator|.
name|setPrefLevel
argument_list|(
name|fromBuildingPref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|toBuildingPref
operator|.
name|setDistanceFrom
argument_list|(
name|fromBuildingPref
operator|.
name|getDistanceFrom
argument_list|()
argument_list|)
expr_stmt|;
name|toBuildingPref
operator|.
name|setOwner
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTopreferences
argument_list|(
name|toBuildingPref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|mergeBuildingPrefs
parameter_list|(
name|PreferenceGroup
name|fromPrefGroup
parameter_list|,
name|PreferenceGroup
name|toPrefGroup
parameter_list|,
name|boolean
name|isClassMerge
parameter_list|,
name|boolean
name|isSubpartMerge
parameter_list|,
name|boolean
name|isClassPrefsPushUp
parameter_list|,
name|CancelledClassAction
name|cancelledClassAction
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|Location
argument_list|>
name|locations
init|=
literal|null
decl_stmt|;
name|boolean
name|isExamPref
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|fromPrefGroup
operator|instanceof
name|Exam
condition|)
block|{
name|isExamPref
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|fromPrefGroup
operator|.
name|getBuildingPreferences
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromPrefGroup
operator|.
name|getBuildingPreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
operator|!
operator|(
name|fromPrefGroup
operator|instanceof
name|Class_
operator|)
operator|||
name|isClassMerge
operator|)
operator|&&
operator|(
operator|!
operator|(
name|fromPrefGroup
operator|instanceof
name|SchedulingSubpart
operator|)
operator|||
name|isSubpartMerge
operator|)
condition|)
block|{
name|locations
operator|=
name|getLocationsFor
argument_list|(
name|fromPrefGroup
argument_list|,
name|toPrefGroup
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isExamPref
operator|&&
name|locations
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|fromPrefGroup
operator|.
name|getBuildingPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|createToBuildingPref
argument_list|(
operator|(
name|BuildingPref
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|fromPrefGroup
argument_list|,
name|toPrefGroup
argument_list|,
name|locations
argument_list|,
name|isExamPref
argument_list|,
name|isClassMerge
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fromPrefGroup
operator|instanceof
name|SchedulingSubpart
operator|&&
name|isClassPrefsPushUp
operator|&&
operator|(
name|toPrefGroup
operator|.
name|getBuildingPreferences
argument_list|()
operator|==
literal|null
operator|||
name|toPrefGroup
operator|.
name|getBuildingPreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|fromPrefGroup
decl_stmt|;
if|if
condition|(
name|locations
operator|==
literal|null
condition|)
block|{
name|locations
operator|=
name|getLocationsFor
argument_list|(
name|fromPrefGroup
argument_list|,
name|toPrefGroup
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|locations
operator|!=
literal|null
operator|&&
name|locations
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|ss
operator|.
name|getClasses
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|BuildingPref
argument_list|>
name|prefMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|BuildingPref
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|prefCount
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|key
decl_stmt|;
name|int
name|clsCnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Class_
name|c
range|:
name|ss
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|CancelledClassAction
operator|.
name|SKIP
operator|==
name|cancelledClassAction
operator|&&
name|c
operator|.
name|isCancelled
argument_list|()
condition|)
continue|continue;
name|clsCnt
operator|++
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getBuildingPreferences
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|c
operator|.
name|getBuildingPreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|rfpIt
init|=
name|c
operator|.
name|getBuildingPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|rfpIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BuildingPref
name|rfp
init|=
operator|(
name|BuildingPref
operator|)
name|rfpIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|key
operator|=
name|rfp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefName
argument_list|()
operator|+
name|rfp
operator|.
name|getBuilding
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|prefMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|rfp
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|prefCount
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|cnt
operator|=
name|prefCount
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|cnt
operator|++
expr_stmt|;
name|prefCount
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|cnt
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|pref
range|:
name|prefCount
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|prefCount
operator|.
name|get
argument_list|(
name|pref
argument_list|)
operator|.
name|intValue
argument_list|()
operator|==
name|clsCnt
condition|)
block|{
name|createToBuildingPref
argument_list|(
name|prefMap
operator|.
name|get
argument_list|(
name|pref
argument_list|)
argument_list|,
name|fromPrefGroup
argument_list|,
name|toPrefGroup
argument_list|,
name|locations
argument_list|,
name|isExamPref
argument_list|,
name|isClassMerge
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|mergeDepartmentalInstructorAttributesToSession
parameter_list|(
name|Department
name|fromDepartment
parameter_list|,
name|Department
name|toDepartment
parameter_list|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|InstructorAttribute
argument_list|>
name|attributes
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|InstructorAttribute
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|InstructorAttribute
argument_list|>
name|departmentalAttributes
init|=
name|InstructorAttribute
operator|.
name|getAllDepartmentalAttributes
argument_list|(
name|fromDepartment
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|InstructorAttribute
argument_list|>
name|existingToDepartmentalAttributes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|InstructorAttribute
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|InstructorAttribute
name|ia
range|:
name|InstructorAttribute
operator|.
name|getAllDepartmentalAttributes
argument_list|(
name|toDepartment
operator|.
name|getUniqueId
argument_list|()
argument_list|)
control|)
block|{
name|existingToDepartmentalAttributes
operator|.
name|put
argument_list|(
name|ia
operator|.
name|getNameWithType
argument_list|()
argument_list|,
name|ia
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|InstructorAttribute
name|fromAttribute
range|:
name|departmentalAttributes
control|)
block|{
name|InstructorAttribute
name|toAttribute
init|=
name|existingToDepartmentalAttributes
operator|.
name|get
argument_list|(
name|fromAttribute
operator|.
name|getNameWithType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|toAttribute
operator|==
literal|null
condition|)
block|{
name|toAttribute
operator|=
operator|new
name|InstructorAttribute
argument_list|()
expr_stmt|;
name|toAttribute
operator|.
name|setSession
argument_list|(
name|toDepartment
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|toAttribute
operator|.
name|setDepartment
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|toAttribute
operator|.
name|setCode
argument_list|(
name|fromAttribute
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|toAttribute
operator|.
name|setName
argument_list|(
name|fromAttribute
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|toAttribute
operator|.
name|setType
argument_list|(
name|fromAttribute
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|toAttribute
operator|.
name|setInstructors
argument_list|(
operator|new
name|HashSet
argument_list|<
name|DepartmentalInstructor
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|toAttribute
operator|.
name|setChildAttributes
argument_list|(
operator|new
name|HashSet
argument_list|<
name|InstructorAttribute
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|fromAttribute
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|toAttribute
argument_list|)
expr_stmt|;
name|toAttribute
operator|.
name|setUniqueId
argument_list|(
name|InstructorAttributeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|save
argument_list|(
name|toAttribute
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|attributes
operator|.
name|put
argument_list|(
name|fromAttribute
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|toAttribute
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|InstructorAttribute
name|fromChildAttribute
range|:
name|departmentalAttributes
control|)
block|{
if|if
condition|(
name|fromChildAttribute
operator|.
name|getParentAttribute
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|InstructorAttribute
name|toChildAttribute
init|=
name|attributes
operator|.
name|get
argument_list|(
name|fromChildAttribute
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|InstructorAttribute
name|toParentAttribute
init|=
name|attributes
operator|.
name|get
argument_list|(
name|fromChildAttribute
operator|.
name|getParentAttribute
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|toParentAttribute
operator|!=
literal|null
condition|)
block|{
name|toChildAttribute
operator|.
name|setParentAttribute
argument_list|(
name|toParentAttribute
argument_list|)
expr_stmt|;
name|toParentAttribute
operator|.
name|getChildAttributes
argument_list|()
operator|.
name|add
argument_list|(
name|toChildAttribute
argument_list|)
expr_stmt|;
name|InstructorAttributeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|toChildAttribute
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|HashSet
argument_list|<
name|Department
argument_list|>
name|findToDepartmentsForInstructor
parameter_list|(
name|DepartmentalInstructor
name|fromDepartmentalInstructor
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
name|HashSet
argument_list|<
name|Department
argument_list|>
name|departments
init|=
operator|new
name|HashSet
argument_list|<
name|Department
argument_list|>
argument_list|()
decl_stmt|;
name|Department
name|d
init|=
literal|null
decl_stmt|;
name|d
operator|=
name|findToDepartment
argument_list|(
name|fromDepartmentalInstructor
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
name|departments
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|fromDepartmentalInstructor
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getManagingDept
argument_list|()
operator|!=
literal|null
operator|&&
name|iDepartmentCodesWithDifferentPrefix
operator|.
name|containsKey
argument_list|(
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|)
condition|)
block|{
name|d
operator|=
name|findToDepartment
argument_list|(
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getManagingDept
argument_list|()
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
name|departments
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|departments
return|;
block|}
specifier|private
name|void
name|createToRoomPref
parameter_list|(
name|RoomPref
name|fromRoomPref
parameter_list|,
name|PreferenceGroup
name|fromPrefGroup
parameter_list|,
name|PreferenceGroup
name|toPrefGroup
parameter_list|,
name|Set
argument_list|<
name|Location
argument_list|>
name|locations
parameter_list|,
name|boolean
name|isClassMerge
parameter_list|)
block|{
if|if
condition|(
name|fromPrefGroup
operator|instanceof
name|Class_
operator|&&
operator|!
name|isClassMerge
condition|)
return|return;
name|RoomPref
name|toRoomPref
init|=
operator|new
name|RoomPref
argument_list|()
decl_stmt|;
if|if
condition|(
name|fromRoomPref
operator|.
name|getRoom
argument_list|()
operator|instanceof
name|Room
condition|)
block|{
name|Room
name|fromRoom
init|=
operator|(
name|Room
operator|)
name|fromRoomPref
operator|.
name|getRoom
argument_list|()
decl_stmt|;
name|Room
name|toRoom
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Location
name|loc
range|:
name|locations
control|)
block|{
if|if
condition|(
name|loc
operator|instanceof
name|Room
condition|)
block|{
name|toRoom
operator|=
operator|(
name|Room
operator|)
name|loc
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|toRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|fromRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|toRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|fromRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
operator|)
operator|||
operator|(
operator|(
name|toRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
operator|||
name|fromRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
operator|)
operator|&&
name|toRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|.
name|equals
argument_list|(
name|fromRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
operator|)
operator|)
operator|&&
name|toRoom
operator|.
name|getRoomNumber
argument_list|()
operator|.
name|equals
argument_list|(
name|fromRoom
operator|.
name|getRoomNumber
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
name|toRoom
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|toRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|fromRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|toRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|fromRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
operator|)
operator|||
operator|(
operator|(
name|toRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
operator|||
name|fromRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
operator|)
operator|&&
name|toRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|.
name|equals
argument_list|(
name|fromRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
operator|)
operator|)
operator|&&
name|toRoom
operator|.
name|getRoomNumber
argument_list|()
operator|.
name|equals
argument_list|(
name|fromRoom
operator|.
name|getRoomNumber
argument_list|()
argument_list|)
condition|)
block|{
name|toRoomPref
operator|.
name|setRoom
argument_list|(
name|toRoom
argument_list|)
expr_stmt|;
name|toRoomPref
operator|.
name|setPrefLevel
argument_list|(
name|fromRoomPref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|toRoomPref
operator|.
name|setOwner
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTopreferences
argument_list|(
name|toRoomPref
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|fromRoomPref
operator|.
name|getRoom
argument_list|()
operator|instanceof
name|NonUniversityLocation
condition|)
block|{
name|NonUniversityLocation
name|fromNonUniversityLocation
init|=
operator|(
name|NonUniversityLocation
operator|)
name|fromRoomPref
operator|.
name|getRoom
argument_list|()
decl_stmt|;
name|NonUniversityLocation
name|toNonUniversityLocation
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Location
name|loc
range|:
name|locations
control|)
block|{
if|if
condition|(
name|loc
operator|instanceof
name|NonUniversityLocation
condition|)
block|{
name|toNonUniversityLocation
operator|=
operator|(
name|NonUniversityLocation
operator|)
name|loc
expr_stmt|;
if|if
condition|(
name|toNonUniversityLocation
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|fromNonUniversityLocation
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
name|toNonUniversityLocation
operator|!=
literal|null
operator|&&
name|toNonUniversityLocation
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|fromNonUniversityLocation
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|toRoomPref
operator|.
name|setRoom
argument_list|(
name|toNonUniversityLocation
argument_list|)
expr_stmt|;
name|toRoomPref
operator|.
name|setPrefLevel
argument_list|(
name|fromRoomPref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|toRoomPref
operator|.
name|setOwner
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTopreferences
argument_list|(
name|toRoomPref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|mergeRoomPrefsToSession
parameter_list|(
name|PreferenceGroup
name|fromPrefGroup
parameter_list|,
name|PreferenceGroup
name|toPrefGroup
parameter_list|,
name|boolean
name|isClassMerge
parameter_list|,
name|boolean
name|isSubpartMerge
parameter_list|,
name|boolean
name|isClassPrefsPushUp
parameter_list|,
name|CancelledClassAction
name|cancelledClassAction
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
name|Set
argument_list|<
name|Location
argument_list|>
name|locations
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fromPrefGroup
operator|.
name|getRoomPreferences
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromPrefGroup
operator|.
name|getRoomPreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
operator|!
operator|(
name|fromPrefGroup
operator|instanceof
name|Class_
operator|)
operator|||
name|isClassMerge
operator|)
operator|&&
operator|(
operator|!
operator|(
name|fromPrefGroup
operator|instanceof
name|SchedulingSubpart
operator|)
operator|||
name|isSubpartMerge
operator|)
condition|)
block|{
name|locations
operator|=
name|getLocationsFor
argument_list|(
name|fromPrefGroup
argument_list|,
name|toPrefGroup
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|locations
operator|!=
literal|null
operator|&&
name|locations
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|fromPrefGroup
operator|.
name|getRoomPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|createToRoomPref
argument_list|(
operator|(
name|RoomPref
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|fromPrefGroup
argument_list|,
name|toPrefGroup
argument_list|,
name|locations
argument_list|,
name|isClassMerge
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|fromPrefGroup
operator|instanceof
name|SchedulingSubpart
operator|&&
name|isClassPrefsPushUp
operator|&&
operator|(
name|toPrefGroup
operator|.
name|getRoomPreferences
argument_list|()
operator|==
literal|null
operator|||
name|toPrefGroup
operator|.
name|getRoomPreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|fromPrefGroup
decl_stmt|;
if|if
condition|(
name|locations
operator|==
literal|null
condition|)
block|{
name|locations
operator|=
name|getLocationsFor
argument_list|(
name|fromPrefGroup
argument_list|,
name|toPrefGroup
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|locations
operator|!=
literal|null
operator|&&
name|locations
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|ss
operator|.
name|getClasses
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|RoomPref
argument_list|>
name|prefMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RoomPref
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|prefCount
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|key
decl_stmt|;
name|int
name|clsCnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Class_
name|c
range|:
name|ss
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|CancelledClassAction
operator|.
name|SKIP
operator|==
name|cancelledClassAction
operator|&&
name|c
operator|.
name|isCancelled
argument_list|()
condition|)
continue|continue;
name|clsCnt
operator|++
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getRoomPreferences
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|c
operator|.
name|getRoomPreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|rfpIt
init|=
name|c
operator|.
name|getRoomPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|rfpIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomPref
name|rfp
init|=
operator|(
name|RoomPref
operator|)
name|rfpIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|key
operator|=
name|rfp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefName
argument_list|()
operator|+
name|rfp
operator|.
name|getRoom
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|prefMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|rfp
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|prefCount
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|cnt
operator|=
name|prefCount
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|cnt
operator|++
expr_stmt|;
name|prefCount
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|cnt
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|pref
range|:
name|prefCount
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|prefCount
operator|.
name|get
argument_list|(
name|pref
argument_list|)
operator|.
name|intValue
argument_list|()
operator|==
name|clsCnt
condition|)
block|{
name|createToRoomPref
argument_list|(
name|prefMap
operator|.
name|get
argument_list|(
name|pref
argument_list|)
argument_list|,
name|fromPrefGroup
argument_list|,
name|toPrefGroup
argument_list|,
name|locations
argument_list|,
name|isClassMerge
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|createToRoomFeaturePref
parameter_list|(
name|RoomFeaturePref
name|fromRoomFeaturePref
parameter_list|,
name|PreferenceGroup
name|fromPrefGroup
parameter_list|,
name|PreferenceGroup
name|toPrefGroup
parameter_list|,
name|boolean
name|isClassMerge
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
if|if
condition|(
name|fromPrefGroup
operator|instanceof
name|Class_
operator|&&
operator|!
name|isClassMerge
condition|)
return|return;
name|RoomFeaturePref
name|toRoomFeaturePref
init|=
operator|new
name|RoomFeaturePref
argument_list|()
decl_stmt|;
if|if
condition|(
name|fromRoomFeaturePref
operator|.
name|getRoomFeature
argument_list|()
operator|instanceof
name|GlobalRoomFeature
condition|)
block|{
name|GlobalRoomFeature
name|grf
init|=
name|GlobalRoomFeature
operator|.
name|findGlobalRoomFeatureForLabel
argument_list|(
name|iMergedSession
argument_list|,
name|fromRoomFeaturePref
operator|.
name|getRoomFeature
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|grf
operator|!=
literal|null
condition|)
block|{
name|toRoomFeaturePref
operator|.
name|setRoomFeature
argument_list|(
name|grf
argument_list|)
expr_stmt|;
name|toRoomFeaturePref
operator|.
name|setPrefLevel
argument_list|(
name|fromRoomFeaturePref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|toRoomFeaturePref
operator|.
name|setOwner
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTopreferences
argument_list|(
name|toRoomFeaturePref
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Department
name|toDepartment
init|=
name|findToManagingDepartmentForPrefGroup
argument_list|(
name|toPrefGroup
argument_list|,
name|fromPrefGroup
argument_list|,
name|defaultPrefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|toDepartment
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Collection
argument_list|<
name|DepartmentRoomFeature
argument_list|>
name|l
init|=
name|DepartmentRoomFeature
operator|.
name|getAllDepartmentRoomFeatures
argument_list|(
name|toDepartment
argument_list|)
decl_stmt|;
name|DepartmentRoomFeature
name|fromDepartmentRoomFeature
init|=
operator|(
name|DepartmentRoomFeature
operator|)
name|fromRoomFeaturePref
operator|.
name|getRoomFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
name|l
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|DepartmentRoomFeature
name|toDepartmentRoomFeature
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|DepartmentRoomFeature
argument_list|>
name|rfIt
init|=
name|l
operator|.
name|iterator
argument_list|()
init|;
name|rfIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|toDepartmentRoomFeature
operator|=
operator|(
name|DepartmentRoomFeature
operator|)
name|rfIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|toDepartmentRoomFeature
operator|.
name|getLabel
argument_list|()
operator|.
name|equals
argument_list|(
name|fromDepartmentRoomFeature
operator|.
name|getLabel
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|toDepartmentRoomFeature
operator|.
name|getLabel
argument_list|()
operator|.
name|equals
argument_list|(
name|fromDepartmentRoomFeature
operator|.
name|getLabel
argument_list|()
argument_list|)
condition|)
block|{
name|toRoomFeaturePref
operator|.
name|setRoomFeature
argument_list|(
name|toDepartmentRoomFeature
argument_list|)
expr_stmt|;
name|toRoomFeaturePref
operator|.
name|setPrefLevel
argument_list|(
name|fromRoomFeaturePref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|toRoomFeaturePref
operator|.
name|setOwner
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTopreferences
argument_list|(
name|toRoomFeaturePref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|mergeRoomFeaturePrefsToSession
parameter_list|(
name|PreferenceGroup
name|fromPrefGroup
parameter_list|,
name|PreferenceGroup
name|toPrefGroup
parameter_list|,
name|boolean
name|isClassMerge
parameter_list|,
name|boolean
name|isSubpartMerge
parameter_list|,
name|boolean
name|isClassPrefsPushUp
parameter_list|,
name|CancelledClassAction
name|cancelledClassAction
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
if|if
condition|(
name|fromPrefGroup
operator|.
name|getRoomFeaturePreferences
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromPrefGroup
operator|.
name|getRoomFeaturePreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
operator|!
operator|(
name|fromPrefGroup
operator|instanceof
name|Class_
operator|)
operator|||
name|isClassMerge
operator|)
operator|&&
operator|(
operator|!
operator|(
name|fromPrefGroup
operator|instanceof
name|SchedulingSubpart
operator|)
operator|||
name|isSubpartMerge
operator|)
condition|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|fromPrefGroup
operator|.
name|getRoomFeaturePreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|createToRoomFeaturePref
argument_list|(
operator|(
name|RoomFeaturePref
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|fromPrefGroup
argument_list|,
name|toPrefGroup
argument_list|,
name|isClassMerge
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fromPrefGroup
operator|instanceof
name|SchedulingSubpart
operator|&&
name|isClassPrefsPushUp
operator|&&
operator|(
name|toPrefGroup
operator|.
name|getRoomFeaturePreferences
argument_list|()
operator|==
literal|null
operator|||
name|toPrefGroup
operator|.
name|getRoomFeaturePreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|fromPrefGroup
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getClasses
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|RoomFeaturePref
argument_list|>
name|prefMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RoomFeaturePref
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|prefCount
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|key
decl_stmt|;
name|int
name|clsCnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Class_
name|c
range|:
name|ss
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|CancelledClassAction
operator|.
name|SKIP
operator|==
name|cancelledClassAction
operator|&&
name|c
operator|.
name|isCancelled
argument_list|()
condition|)
continue|continue;
name|clsCnt
operator|++
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getRoomFeaturePreferences
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|c
operator|.
name|getRoomFeaturePreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|rfpIt
init|=
name|c
operator|.
name|getRoomFeaturePreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|rfpIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomFeaturePref
name|rfp
init|=
operator|(
name|RoomFeaturePref
operator|)
name|rfpIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|key
operator|=
name|rfp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefName
argument_list|()
operator|+
name|rfp
operator|.
name|getRoomFeature
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|prefMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|rfp
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|prefCount
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|cnt
operator|=
name|prefCount
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|cnt
operator|++
expr_stmt|;
name|prefCount
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|cnt
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|pref
range|:
name|prefCount
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|prefCount
operator|.
name|get
argument_list|(
name|pref
argument_list|)
operator|.
name|intValue
argument_list|()
operator|==
name|clsCnt
condition|)
block|{
name|createToRoomFeaturePref
argument_list|(
name|prefMap
operator|.
name|get
argument_list|(
name|pref
argument_list|)
argument_list|,
name|fromPrefGroup
argument_list|,
name|toPrefGroup
argument_list|,
name|isClassMerge
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|createToRoomGroupPref
parameter_list|(
name|RoomGroupPref
name|fromRoomGroupPref
parameter_list|,
name|PreferenceGroup
name|fromPrefGroup
parameter_list|,
name|PreferenceGroup
name|toPrefGroup
parameter_list|,
name|boolean
name|isClassMerge
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
if|if
condition|(
name|fromPrefGroup
operator|instanceof
name|Class_
operator|&&
operator|!
name|isClassMerge
condition|)
return|return;
name|RoomGroupPref
name|toRoomGroupPref
init|=
operator|new
name|RoomGroupPref
argument_list|()
decl_stmt|;
name|RoomGroup
name|toDefaultRoomGroup
init|=
name|RoomGroup
operator|.
name|getGlobalDefaultRoomGroup
argument_list|(
name|iMergedSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromRoomGroupPref
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|isDefaultGroup
argument_list|()
operator|&&
name|toDefaultRoomGroup
operator|!=
literal|null
condition|)
block|{
name|toRoomGroupPref
operator|.
name|setRoomGroup
argument_list|(
name|toDefaultRoomGroup
argument_list|)
expr_stmt|;
name|toRoomGroupPref
operator|.
name|setPrefLevel
argument_list|(
name|fromRoomGroupPref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|toRoomGroupPref
operator|.
name|setOwner
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTopreferences
argument_list|(
name|toRoomGroupPref
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|fromRoomGroupPref
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|isGlobal
argument_list|()
condition|)
block|{
name|RoomGroup
name|toRoomGroup
init|=
name|RoomGroup
operator|.
name|findGlobalRoomGroupForName
argument_list|(
name|iMergedSession
argument_list|,
name|fromRoomGroupPref
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|toRoomGroup
operator|!=
literal|null
condition|)
block|{
name|toRoomGroupPref
operator|.
name|setRoomGroup
argument_list|(
name|toRoomGroup
argument_list|)
expr_stmt|;
name|toRoomGroupPref
operator|.
name|setPrefLevel
argument_list|(
name|fromRoomGroupPref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|toRoomGroupPref
operator|.
name|setOwner
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTopreferences
argument_list|(
name|toRoomGroupPref
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Department
name|toDepartment
init|=
name|findToManagingDepartmentForPrefGroup
argument_list|(
name|toPrefGroup
argument_list|,
name|fromPrefGroup
argument_list|,
name|defaultPrefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|toDepartment
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Collection
argument_list|<
name|RoomGroup
argument_list|>
name|l
init|=
name|RoomGroup
operator|.
name|getAllDepartmentRoomGroups
argument_list|(
name|toDepartment
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
name|l
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|RoomGroup
name|toRoomGroup
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|RoomGroup
argument_list|>
name|itRg
init|=
name|l
operator|.
name|iterator
argument_list|()
init|;
name|itRg
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|toRoomGroup
operator|=
operator|(
name|RoomGroup
operator|)
name|itRg
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|toRoomGroup
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|fromRoomGroupPref
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|toRoomGroup
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|fromRoomGroupPref
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|toRoomGroupPref
operator|.
name|setRoomGroup
argument_list|(
name|toRoomGroup
argument_list|)
expr_stmt|;
name|toRoomGroupPref
operator|.
name|setPrefLevel
argument_list|(
name|fromRoomGroupPref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|toRoomGroupPref
operator|.
name|setOwner
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTopreferences
argument_list|(
name|toRoomGroupPref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|mergeRoomGroupPrefsToSession
parameter_list|(
name|PreferenceGroup
name|fromPrefGroup
parameter_list|,
name|PreferenceGroup
name|toPrefGroup
parameter_list|,
name|boolean
name|isClassMerge
parameter_list|,
name|boolean
name|isSubpartMerge
parameter_list|,
name|boolean
name|isClassPrefsPushUp
parameter_list|,
name|CancelledClassAction
name|cancelledClassAction
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
if|if
condition|(
name|fromPrefGroup
operator|.
name|getRoomGroupPreferences
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromPrefGroup
operator|.
name|getRoomGroupPreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
operator|!
operator|(
name|fromPrefGroup
operator|instanceof
name|Class_
operator|)
operator|||
name|isClassMerge
operator|)
operator|&&
operator|(
operator|!
operator|(
name|fromPrefGroup
operator|instanceof
name|SchedulingSubpart
operator|)
operator|||
name|isSubpartMerge
operator|)
condition|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|fromPrefGroup
operator|.
name|getRoomGroupPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|createToRoomGroupPref
argument_list|(
operator|(
name|RoomGroupPref
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|fromPrefGroup
argument_list|,
name|toPrefGroup
argument_list|,
name|isClassMerge
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fromPrefGroup
operator|instanceof
name|SchedulingSubpart
operator|&&
name|isClassPrefsPushUp
operator|&&
operator|(
name|toPrefGroup
operator|.
name|getRoomGroupPreferences
argument_list|()
operator|==
literal|null
operator|||
name|toPrefGroup
operator|.
name|getRoomGroupPreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|fromPrefGroup
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getClasses
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|RoomGroupPref
argument_list|>
name|prefMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RoomGroupPref
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|prefCount
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|key
decl_stmt|;
name|int
name|clsCnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Class_
name|c
range|:
name|ss
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|CancelledClassAction
operator|.
name|SKIP
operator|==
name|cancelledClassAction
operator|&&
name|c
operator|.
name|isCancelled
argument_list|()
condition|)
continue|continue;
name|clsCnt
operator|++
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getRoomGroupPreferences
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|c
operator|.
name|getRoomGroupPreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|rfpIt
init|=
name|c
operator|.
name|getRoomGroupPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|rfpIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomGroupPref
name|rfp
init|=
operator|(
name|RoomGroupPref
operator|)
name|rfpIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|key
operator|=
name|rfp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefName
argument_list|()
operator|+
name|rfp
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|prefMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|rfp
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|prefCount
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|cnt
operator|=
name|prefCount
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|cnt
operator|++
expr_stmt|;
name|prefCount
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|cnt
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|pref
range|:
name|prefCount
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|prefCount
operator|.
name|get
argument_list|(
name|pref
argument_list|)
operator|.
name|intValue
argument_list|()
operator|==
name|clsCnt
condition|)
block|{
name|createToRoomGroupPref
argument_list|(
name|prefMap
operator|.
name|get
argument_list|(
name|pref
argument_list|)
argument_list|,
name|fromPrefGroup
argument_list|,
name|toPrefGroup
argument_list|,
name|isClassMerge
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|mergeTimePrefsToSession
parameter_list|(
name|PreferenceGroup
name|fromPrefGroup
parameter_list|,
name|PreferenceGroup
name|toPrefGroup
parameter_list|,
name|boolean
name|isClassMerge
parameter_list|,
name|boolean
name|isSubpartMerge
parameter_list|,
name|boolean
name|isClassPrefsPushUp
parameter_list|,
name|CancelledClassAction
name|cancelledClassAction
parameter_list|)
block|{
if|if
condition|(
name|fromPrefGroup
operator|.
name|getTimePreferences
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromPrefGroup
operator|.
name|getTimePreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
operator|!
operator|(
name|fromPrefGroup
operator|instanceof
name|Class_
operator|)
operator|||
name|isClassMerge
operator|)
operator|&&
operator|(
operator|!
operator|(
name|fromPrefGroup
operator|instanceof
name|SchedulingSubpart
operator|)
operator|||
name|isSubpartMerge
operator|)
condition|)
block|{
name|TimePref
name|fromTimePref
init|=
literal|null
decl_stmt|;
name|TimePref
name|toTimePref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|fromPrefGroup
operator|.
name|getTimePreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromTimePref
operator|=
operator|(
name|TimePref
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromTimePref
operator|.
name|getTimePattern
argument_list|()
operator|==
literal|null
condition|)
block|{
name|toTimePref
operator|=
operator|(
name|TimePref
operator|)
name|fromTimePref
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|toTimePref
operator|=
name|TimePattern
operator|.
name|getMatchingTimePreference
argument_list|(
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|fromTimePref
argument_list|)
expr_stmt|;
if|if
condition|(
name|toTimePref
operator|==
literal|null
condition|)
block|{
name|iLog
operator|.
name|warn
argument_list|(
literal|"To Time Pattern not found:  "
operator|+
name|fromTimePref
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" for "
operator|+
name|fromPrefGroup
operator|.
name|htmlLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|toTimePref
operator|!=
literal|null
condition|)
block|{
name|toTimePref
operator|.
name|setOwner
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTopreferences
argument_list|(
name|toTimePref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// If subpart time preferences are not to be merged, make sure any subpart time patterns are merged without their time preferences.
if|if
condition|(
name|fromPrefGroup
operator|instanceof
name|SchedulingSubpart
operator|&&
operator|!
name|isSubpartMerge
condition|)
block|{
name|TimePref
name|fromTimePref
init|=
literal|null
decl_stmt|;
name|TimePref
name|toTimePref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|fromPrefGroup
operator|.
name|getTimePreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromTimePref
operator|=
operator|(
name|TimePref
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromTimePref
operator|.
name|getTimePattern
argument_list|()
operator|==
literal|null
condition|)
block|{
name|toTimePref
operator|=
operator|(
name|TimePref
operator|)
name|fromTimePref
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|toTimePref
operator|=
name|TimePattern
operator|.
name|getMatchingTimePreference
argument_list|(
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|fromTimePref
argument_list|)
expr_stmt|;
if|if
condition|(
name|toTimePref
operator|==
literal|null
condition|)
block|{
name|iLog
operator|.
name|warn
argument_list|(
literal|"To Time Pattern not found:  "
operator|+
name|fromTimePref
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" for "
operator|+
name|fromPrefGroup
operator|.
name|htmlLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|toTimePref
operator|!=
literal|null
condition|)
block|{
name|toTimePref
operator|.
name|setPreference
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|toTimePref
operator|.
name|setOwner
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTopreferences
argument_list|(
name|toTimePref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|fromPrefGroup
operator|instanceof
name|SchedulingSubpart
operator|&&
name|isClassPrefsPushUp
condition|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|fromPrefGroup
decl_stmt|;
if|if
condition|(
operator|(
name|ss
operator|.
name|getTimePreferences
argument_list|()
operator|==
literal|null
operator|||
name|ss
operator|.
name|getTimePreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
name|ss
operator|.
name|getClasses
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|TimePref
argument_list|>
name|prefMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TimePref
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|prefCount
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|TimePattern
argument_list|>
name|timePatterns
init|=
operator|new
name|HashSet
argument_list|<
name|TimePattern
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|key
decl_stmt|;
name|int
name|clsCnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Class_
name|c
range|:
name|ss
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|CancelledClassAction
operator|.
name|SKIP
operator|==
name|cancelledClassAction
operator|&&
name|c
operator|.
name|isCancelled
argument_list|()
condition|)
continue|continue;
name|clsCnt
operator|++
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getTimePreferences
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|c
operator|.
name|getTimePreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|tpIt
init|=
name|c
operator|.
name|getTimePreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|tpIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|tp
init|=
operator|(
name|TimePref
operator|)
name|tpIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|key
operator|=
name|tp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefName
argument_list|()
operator|+
name|tp
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|tp
operator|.
name|getPreference
argument_list|()
expr_stmt|;
name|prefMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|tp
argument_list|)
expr_stmt|;
name|timePatterns
operator|.
name|add
argument_list|(
name|tp
operator|.
name|getTimePattern
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|prefCount
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|cnt
operator|=
name|prefCount
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|cnt
operator|++
expr_stmt|;
name|prefCount
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|cnt
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|pref
range|:
name|prefCount
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|prefCount
operator|.
name|get
argument_list|(
name|pref
argument_list|)
operator|.
name|intValue
argument_list|()
operator|==
name|clsCnt
condition|)
block|{
name|TimePref
name|fromTimePref
init|=
name|prefMap
operator|.
name|get
argument_list|(
name|pref
argument_list|)
decl_stmt|;
name|TimePref
name|toTimePref
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fromTimePref
operator|.
name|getTimePattern
argument_list|()
operator|==
literal|null
condition|)
block|{
name|toTimePref
operator|=
operator|(
name|TimePref
operator|)
name|fromTimePref
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|fromTimePref
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getType
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
operator|(
name|TimePattern
operator|.
name|sTypeExactTime
operator|)
condition|)
block|{
continue|continue;
block|}
name|toTimePref
operator|=
name|TimePattern
operator|.
name|getMatchingTimePreference
argument_list|(
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|fromTimePref
argument_list|)
expr_stmt|;
if|if
condition|(
name|toTimePref
operator|==
literal|null
condition|)
block|{
name|iLog
operator|.
name|warn
argument_list|(
literal|"To Time Pattern not found:  "
operator|+
name|fromTimePref
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" for "
operator|+
name|fromPrefGroup
operator|.
name|htmlLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|toTimePref
operator|!=
literal|null
condition|)
block|{
name|toTimePref
operator|.
name|setOwner
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTopreferences
argument_list|(
name|toTimePref
argument_list|)
expr_stmt|;
if|if
condition|(
name|toTimePref
operator|.
name|getPreference
argument_list|()
operator|.
name|contains
argument_list|(
literal|""
operator|+
name|PreferenceLevel
operator|.
name|sCharLevelRequired
argument_list|)
operator|||
name|toTimePref
operator|.
name|getPreference
argument_list|()
operator|.
name|contains
argument_list|(
literal|""
operator|+
name|PreferenceLevel
operator|.
name|sCharLevelProhibited
argument_list|)
condition|)
block|{
name|toTimePref
operator|.
name|setPreference
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|timePatterns
operator|.
name|remove
argument_list|(
name|fromTimePref
operator|.
name|getTimePattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|TimePattern
name|fromTp
range|:
name|timePatterns
control|)
block|{
if|if
condition|(
name|fromTp
operator|.
name|getType
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
operator|(
name|TimePattern
operator|.
name|sTypeExactTime
operator|)
condition|)
block|{
continue|continue;
block|}
name|TimePattern
name|toTp
init|=
name|TimePattern
operator|.
name|getMatchingTimePattern
argument_list|(
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|fromTp
argument_list|)
decl_stmt|;
name|TimePref
name|toTimePref
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|toTp
operator|!=
literal|null
condition|)
block|{
name|toTimePref
operator|=
operator|new
name|TimePref
argument_list|()
expr_stmt|;
name|toTimePref
operator|.
name|setOwner
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toTimePref
operator|.
name|setTimePattern
argument_list|(
name|toTp
argument_list|)
expr_stmt|;
name|toTimePref
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
literal|""
operator|+
name|PreferenceLevel
operator|.
name|sCharLevelRequired
argument_list|)
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTopreferences
argument_list|(
name|toTimePref
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iLog
operator|.
name|warn
argument_list|(
literal|"To Time Pattern not found:  "
operator|+
name|fromTp
operator|.
name|getName
argument_list|()
operator|+
literal|" for "
operator|+
name|fromPrefGroup
operator|.
name|htmlLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|mergeInstructorDistributionPrefsToSession
parameter_list|(
name|DepartmentalInstructor
name|fromInstructor
parameter_list|,
name|DepartmentalInstructor
name|toInstructor
parameter_list|)
block|{
if|if
condition|(
name|fromInstructor
operator|.
name|getDistributionPreferences
argument_list|()
operator|!=
literal|null
operator|&&
name|fromInstructor
operator|.
name|getDistributionPreferences
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|DistributionPref
name|fromDistributionPref
init|=
literal|null
decl_stmt|;
name|DistributionPref
name|toDistributionPref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|fromInstructor
operator|.
name|getDistributionPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromDistributionPref
operator|=
operator|(
name|DistributionPref
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|toDistributionPref
operator|=
operator|new
name|DistributionPref
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromDistributionPref
operator|.
name|getDistributionType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|toDistributionPref
operator|.
name|setDistributionType
argument_list|(
name|fromDistributionPref
operator|.
name|getDistributionType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fromDistributionPref
operator|.
name|getGrouping
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|toDistributionPref
operator|.
name|setGrouping
argument_list|(
name|fromDistributionPref
operator|.
name|getGrouping
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|toDistributionPref
operator|.
name|setPrefLevel
argument_list|(
name|fromDistributionPref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|toDistributionPref
operator|.
name|setOwner
argument_list|(
name|toInstructor
argument_list|)
expr_stmt|;
name|toInstructor
operator|.
name|addTopreferences
argument_list|(
name|toDistributionPref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|copyMergeInstructorDataToSession
parameter_list|(
name|Session
name|fromSession
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
name|DepartmentalInstructor
name|toInstructor
init|=
literal|null
decl_stmt|;
name|DepartmentalInstructorDAO
name|iDao
init|=
operator|new
name|DepartmentalInstructorDAO
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|fromSession
operator|.
name|getDepartments
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Department
name|primaryToDepartment
init|=
literal|null
decl_stmt|;
name|String
name|existingQuery
init|=
literal|"select di.department.deptCode || di.externalUniqueId from DepartmentalInstructor di where di.department.session.uniqueId = :sessionId and di.externalUniqueId is not null"
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|existingInstructors
init|=
operator|(
name|ArrayList
argument_list|<
name|String
argument_list|>
operator|)
name|iDao
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|existingQuery
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|String
name|existingNoExtIdQuery
init|=
literal|"select di.department.deptCode || di.lastName || ',' || di.firstName || ',' || di.middleName from DepartmentalInstructor di where di.department.session.uniqueId = :sessionId and di.externalUniqueId is null"
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|existingNoExtIdInstructors
init|=
operator|(
name|ArrayList
argument_list|<
name|String
argument_list|>
operator|)
name|iDao
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|existingNoExtIdQuery
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Department
argument_list|>
name|departments
init|=
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findBySession
argument_list|(
name|iDao
operator|.
name|getSession
argument_list|()
argument_list|,
name|fromSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|iDao
operator|.
name|getSession
argument_list|()
operator|.
name|refresh
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
for|for
control|(
name|Department
name|fromDepartment
range|:
name|departments
control|)
block|{
if|if
condition|(
name|fromDepartment
operator|!=
literal|null
operator|&&
name|fromDepartment
operator|.
name|getInstructors
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromDepartment
operator|.
name|getInstructors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|primaryToDepartment
operator|=
name|findToDepartment
argument_list|(
name|fromDepartment
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|primaryToDepartment
operator|!=
literal|null
condition|)
block|{
name|mergeDepartmentalInstructorAttributesToSession
argument_list|(
name|fromDepartment
argument_list|,
name|primaryToDepartment
argument_list|)
expr_stmt|;
for|for
control|(
name|DepartmentalInstructor
name|fromInstructor
range|:
name|fromDepartment
operator|.
name|getInstructors
argument_list|()
control|)
block|{
for|for
control|(
name|Department
name|toDepartment
range|:
name|findToDepartmentsForInstructor
argument_list|(
name|fromInstructor
argument_list|,
name|defaultPrefix
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|fromInstructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
operator|)
operator|&&
operator|!
name|fromInstructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|existingInstructors
operator|.
name|contains
argument_list|(
name|toDepartment
operator|.
name|getDeptCode
argument_list|()
operator|+
name|fromInstructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|iLog
operator|.
name|info
argument_list|(
name|fromInstructor
operator|.
name|toString
argument_list|()
operator|+
literal|": already exists in term, not merging"
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|(
name|fromInstructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
operator|||
name|fromInstructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
name|existingNoExtIdInstructors
operator|.
name|contains
argument_list|(
name|toDepartment
operator|.
name|getDeptCode
argument_list|()
operator|+
name|fromInstructor
operator|.
name|getLastName
argument_list|()
operator|+
literal|","
operator|+
name|fromInstructor
operator|.
name|getFirstName
argument_list|()
operator|+
literal|","
operator|+
name|fromInstructor
operator|.
name|getMiddleName
argument_list|()
argument_list|)
condition|)
block|{
name|iLog
operator|.
name|info
argument_list|(
name|fromInstructor
operator|.
name|toString
argument_list|()
operator|+
literal|": already exists in term, not merging"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|toInstructor
operator|=
operator|(
name|DepartmentalInstructor
operator|)
name|fromInstructor
operator|.
name|clone
argument_list|()
expr_stmt|;
name|toInstructor
operator|.
name|setDepartment
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|toInstructor
operator|.
name|setAttributes
argument_list|(
operator|new
name|HashSet
argument_list|<
name|InstructorAttribute
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|InstructorAttribute
name|fromAttribute
range|:
name|fromInstructor
operator|.
name|getAttributes
argument_list|()
control|)
block|{
name|InstructorAttribute
name|toAttribute
init|=
name|fromAttribute
operator|.
name|findSameAttributeInSession
argument_list|(
name|iMergedSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|toAttribute
operator|!=
literal|null
condition|)
block|{
name|toAttribute
operator|.
name|addToinstructors
argument_list|(
name|toInstructor
argument_list|)
expr_stmt|;
name|toInstructor
operator|.
name|addToattributes
argument_list|(
name|toAttribute
argument_list|)
expr_stmt|;
block|}
block|}
name|mergeBuildingPrefs
argument_list|(
name|fromInstructor
argument_list|,
name|toInstructor
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
name|mergeRoomPrefsToSession
argument_list|(
name|fromInstructor
argument_list|,
name|toInstructor
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
name|mergeRoomFeaturePrefsToSession
argument_list|(
name|fromInstructor
argument_list|,
name|toInstructor
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
name|mergeRoomGroupPrefsToSession
argument_list|(
name|fromInstructor
argument_list|,
name|toInstructor
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
name|mergeTimePrefsToSession
argument_list|(
name|fromInstructor
argument_list|,
name|toInstructor
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mergeInstructorDistributionPrefsToSession
argument_list|(
name|fromInstructor
argument_list|,
name|toInstructor
argument_list|)
expr_stmt|;
name|toInstructor
operator|.
name|setUniqueId
argument_list|(
name|iDao
operator|.
name|save
argument_list|(
name|toInstructor
argument_list|)
argument_list|)
expr_stmt|;
name|iDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|iDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|toInstructor
argument_list|)
expr_stmt|;
name|iDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|fromInstructor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|iLog
operator|.
name|info
argument_list|(
literal|"Primary To Department Not Found For:  "
operator|+
name|fromDepartment
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|iDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|iDao
operator|.
name|getSession
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iLog
operator|.
name|error
argument_list|(
literal|"Failed to merge all instructors to session."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|HashMap
argument_list|<
name|Long
argument_list|,
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|iOfferingPrefixesCache
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashSet
argument_list|<
name|String
argument_list|>
name|getPrefixesForOffering
parameter_list|(
name|InstructionalOffering
name|instructionalOffering
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|prefixList
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|iOfferingPrefixesCache
operator|.
name|containsKey
argument_list|(
name|instructionalOffering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|iOfferingPrefixesCache
operator|.
name|get
argument_list|(
name|instructionalOffering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|iUseCampusPrefixForSubjectAreas
condition|)
block|{
for|for
control|(
name|InstrOfferingConfig
name|ioc
range|:
name|instructionalOffering
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
block|{
name|prefixList
operator|.
name|add
argument_list|(
name|getPrefixForInstrOfferingConfig
argument_list|(
name|ioc
argument_list|,
name|defaultPrefix
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prefixList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|prefixList
operator|.
name|add
argument_list|(
name|defaultPrefix
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|prefixList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|prefixList
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|iOfferingPrefixesCache
operator|.
name|put
argument_list|(
name|instructionalOffering
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|prefixList
argument_list|)
expr_stmt|;
return|return
name|prefixList
return|;
block|}
specifier|private
name|String
name|getPrefixForInstrOfferingConfig
parameter_list|(
name|InstrOfferingConfig
name|instrOfferingConfig
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
name|String
name|iocPrefix
init|=
literal|null
decl_stmt|;
for|for
control|(
name|SchedulingSubpart
name|ss
range|:
name|instrOfferingConfig
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
block|{
name|Department
name|managingDept
init|=
name|ss
operator|.
name|getManagingDept
argument_list|()
decl_stmt|;
if|if
condition|(
name|iDepartmentCodesWithDifferentPrefix
operator|.
name|containsKey
argument_list|(
name|managingDept
operator|.
name|getDeptCode
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|iocPrefix
operator|==
literal|null
condition|)
block|{
name|iocPrefix
operator|=
name|iDepartmentCodesWithDifferentPrefix
operator|.
name|get
argument_list|(
name|managingDept
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|iocPrefix
operator|.
name|equals
argument_list|(
name|iDepartmentCodesWithDifferentPrefix
operator|.
name|get
argument_list|(
name|managingDept
operator|.
name|getDeptCode
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|iocPrefix
operator|=
name|defaultPrefix
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
if|if
condition|(
name|iocPrefix
operator|==
literal|null
condition|)
block|{
name|iocPrefix
operator|=
name|defaultPrefix
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|iocPrefix
return|;
block|}
comment|//	private InstructionalOffering createToInstructionalOfferingFromCourseCatalog(CourseCatalog courseCatalogEntry, Session session){
comment|//		if (courseCatalogEntry == null || session == null){
comment|//			return(null);
comment|//		}
comment|//		InstructionalOffering toInstructionalOffering = new InstructionalOffering();
comment|//		toInstructionalOffering.setNotOffered(Boolean.valueOf(false));
comment|//		toInstructionalOffering.setSession(session);
comment|//		toInstructionalOffering.setByReservationOnly(false);
comment|//		return(toInstructionalOffering);
comment|//	}
comment|//	private CourseOffering createToCourseOfferingFromCourseCatalog(CourseCatalog courseCatalogEntry, Session session, String prefix){
comment|//		if (courseCatalogEntry == null || session == null){
comment|//			return(null);
comment|//		}
comment|//		CourseOffering toCourseOffering = new CourseOffering();
comment|//		toCourseOffering.setSubjectArea(SubjectArea.findByAbbv(session.getUniqueId(), ((prefix != null? prefix + iPrefixSeparator : "") + courseCatalogEntry.getSubject())));
comment|//		toCourseOffering.setCourseNbr(courseCatalogEntry.getCourseNumber());
comment|//		toCourseOffering.setIsControl(Boolean.valueOf(true));
comment|//		toCourseOffering.setExternalUniqueId(courseCatalogEntry.getExternalUniqueId());
comment|//		toCourseOffering.setPermId(courseCatalogEntry.getPermanentId());
comment|//		toCourseOffering.setTitle(courseCatalogEntry.getTitle());
comment|//		toCourseOffering.setNbrExpectedStudents(Integer.valueOf(0));
comment|//		toCourseOffering.setDemand(Integer.valueOf(0));
comment|//		toCourseOffering.setConsentType(OfferingConsentType.getOfferingConsentTypeForReference(courseCatalogEntry.getApprovalType()));
comment|//		if (courseCatalogEntry.getCreditFormat() != null) {
comment|//			CourseCreditUnitConfig ccuc = CourseCreditUnitConfig.createCreditUnitConfigOfFormat(courseCatalogEntry.getCreditFormat(), courseCatalogEntry.getCreditType(), courseCatalogEntry.getCreditUnitType(), courseCatalogEntry.getFixedMinimumCredit(), courseCatalogEntry.getMaximumCredit(), courseCatalogEntry.isFractionalCreditAllowed(), Boolean.valueOf(true));
comment|//			if (ccuc instanceof ArrangeCreditUnitConfig) {
comment|//				ArrangeCreditUnitConfig toAcuc = (ArrangeCreditUnitConfig)ccuc;
comment|//				toAcuc.setOwner(toCourseOffering);
comment|//				toCourseOffering.addTocreditConfigs(toAcuc);
comment|//			} else if (ccuc instanceof FixedCreditUnitConfig) {
comment|//				FixedCreditUnitConfig toFcuc = (FixedCreditUnitConfig) ccuc;
comment|//				toFcuc.setOwner(toCourseOffering);
comment|//				toCourseOffering.addTocreditConfigs(toFcuc);
comment|//			} else if (ccuc instanceof VariableRangeCreditUnitConfig) {
comment|//				VariableRangeCreditUnitConfig toVrcuc = (VariableRangeCreditUnitConfig) ccuc;
comment|//				toVrcuc.setOwner(toCourseOffering);
comment|//				toCourseOffering.addTocreditConfigs(toVrcuc);
comment|//			} else if (ccuc instanceof VariableFixedCreditUnitConfig) {
comment|//				VariableFixedCreditUnitConfig toVfcuc = (VariableFixedCreditUnitConfig) ccuc;
comment|//				toVfcuc.setOwner(toCourseOffering);
comment|//				toCourseOffering.addTocreditConfigs(toVfcuc);
comment|//			}
comment|//		}
comment|//
comment|//		return(toCourseOffering);
comment|//	}
comment|//	private HashMap<String, InstructionalOffering> createToInstructionalOfferingsBasedOnCourseCatalog(InstructionalOffering fromInstructionalOffering,
comment|//			String defaultPrefix) {
comment|//		HashMap<String, InstructionalOffering> offeringMap = new HashMap<String, InstructionalOffering>();
comment|//
comment|//		for (String prefix : getPrefixesForOffering(fromInstructionalOffering, defaultPrefix)) {
comment|//			offeringMap.put(prefix, createToInstructionalOfferingBasedOnCourseCatalog(fromInstructionalOffering, prefix));
comment|//		}
comment|//
comment|//		return offeringMap;
comment|//	}
comment|//	private InstructionalOffering createToInstructionalOfferingBasedOnCourseCatalog(InstructionalOffering fromInstructionalOffering, String prefix){
comment|//		if (fromInstructionalOffering == null) {
comment|//			return(null);
comment|//		}
comment|//
comment|//		CourseCatalog controllingCourseCatalogEntry = CourseCatalog.findCourseFromPreviousSessionInCatalogForSession(fromInstructionalOffering.getControllingCourseOffering(), iMergedSession);
comment|//
comment|//		if (controllingCourseCatalogEntry == null){
comment|//			return(null);
comment|//		}
comment|//		InstructionalOffering toInstructionalOffering = createToInstructionalOfferingFromCourseCatalog(controllingCourseCatalogEntry, iMergedSession);
comment|//		toInstructionalOffering.setUniqueIdRolledForwardFrom(fromInstructionalOffering.getUniqueId());
comment|//		toInstructionalOffering.setInstrOfferingPermId(fromInstructionalOffering.getInstrOfferingPermId());
comment|//		CourseOffering fromCourseOffering = null;
comment|//		CourseOffering toCourseOffering = null;
comment|//		CourseCatalog courseCatalogEntry = null;
comment|//		for(Iterator<CourseOffering> coIt = fromInstructionalOffering.getCourseOfferings().iterator(); coIt.hasNext();){
comment|//			fromCourseOffering = (CourseOffering) coIt.next();
comment|//			courseCatalogEntry = CourseCatalog.findCourseFromPreviousSessionInCatalogForSession(fromCourseOffering, iMergedSession);
comment|//			if (courseCatalogEntry != null){
comment|//				toCourseOffering = createToCourseOfferingFromCourseCatalog(courseCatalogEntry, iMergedSession, prefix);
comment|//				toCourseOffering.setIsControl(fromCourseOffering.isIsControl());
comment|//				toCourseOffering.setScheduleBookNote(fromCourseOffering.getScheduleBookNote());
comment|//				toCourseOffering.setUniqueIdRolledForwardFrom(fromCourseOffering.getUniqueId());
comment|//				toCourseOffering.setNbrExpectedStudents(fromCourseOffering.getNbrExpectedStudents());
comment|//				toCourseOffering.setDemand(fromCourseOffering.getDemand());
comment|//				toCourseOffering.setInstructionalOffering(toInstructionalOffering);
comment|//				toCourseOffering.setUniqueIdRolledForwardFrom(fromCourseOffering.getUniqueId());
comment|//				toInstructionalOffering.addTocourseOfferings(toCourseOffering);
comment|//				if(courseCatalogEntry.getCreditType() != null){
comment|//					CourseCreditUnitConfig ccuc = CourseCreditUnitConfig.createCreditUnitConfigOfFormat(courseCatalogEntry.getCreditFormat(), courseCatalogEntry.getCreditType(), courseCatalogEntry.getCreditUnitType(), courseCatalogEntry.getFixedMinimumCredit(), courseCatalogEntry.getMaximumCredit(), courseCatalogEntry.isFractionalCreditAllowed(), Boolean.valueOf(true));
comment|//					if (ccuc instanceof ArrangeCreditUnitConfig) {
comment|//						ArrangeCreditUnitConfig toAcuc = (ArrangeCreditUnitConfig)ccuc;
comment|//						toAcuc.setOwner(toCourseOffering);
comment|//						toCourseOffering.addTocreditConfigs(toAcuc);
comment|//					} else if (ccuc instanceof FixedCreditUnitConfig) {
comment|//						FixedCreditUnitConfig toFcuc = (FixedCreditUnitConfig) ccuc;
comment|//						toFcuc.setOwner(toCourseOffering);
comment|//						toCourseOffering.addTocreditConfigs(toFcuc);
comment|//					} else if (ccuc instanceof VariableRangeCreditUnitConfig) {
comment|//						VariableRangeCreditUnitConfig toVrcuc = (VariableRangeCreditUnitConfig) ccuc;
comment|//						toVrcuc.setOwner(toCourseOffering);
comment|//						toCourseOffering.addTocreditConfigs(toVrcuc);
comment|//					} else if (ccuc instanceof VariableFixedCreditUnitConfig) {
comment|//						VariableFixedCreditUnitConfig toVfcuc = (VariableFixedCreditUnitConfig) ccuc;
comment|//						toVfcuc.setOwner(toCourseOffering);
comment|//						toCourseOffering.addTocreditConfigs(toVfcuc);
comment|//					}
comment|//				}
comment|//			}
comment|//		}
comment|//		if (toInstructionalOffering.getCourseOfferings().size() == 1){
comment|//			toCourseOffering.setIsControl(Boolean.valueOf(true));
comment|//		}
comment|//
comment|//		if (toInstructionalOffering.getInstrOfferingPermId() == null){
comment|//			toInstructionalOffering.generateInstrOfferingPermId();
comment|//		}
comment|//		toInstructionalOffering.setUniqueId(InstructionalOfferingDAO.getInstance().save(toInstructionalOffering));
comment|//		return(toInstructionalOffering);
comment|//	}
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|InstructionalOffering
argument_list|>
name|createToInstructionalOfferingsFromFromInstructionalOffering
parameter_list|(
name|InstructionalOffering
name|fromInstructionalOffering
parameter_list|,
name|String
name|defaultPrefix
parameter_list|,
name|boolean
name|mergeWaitListsProhibitedOverrides
parameter_list|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|InstructionalOffering
argument_list|>
name|offeringMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|InstructionalOffering
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|prefix
range|:
name|getPrefixesForOffering
argument_list|(
name|fromInstructionalOffering
argument_list|,
name|defaultPrefix
argument_list|)
control|)
block|{
name|offeringMap
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|createToInstructionalOfferingFromFromInstructionalOffering
argument_list|(
name|fromInstructionalOffering
argument_list|,
name|prefix
argument_list|,
name|mergeWaitListsProhibitedOverrides
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|offeringMap
return|;
block|}
specifier|private
name|InstructionalOffering
name|createToInstructionalOfferingFromFromInstructionalOffering
parameter_list|(
name|InstructionalOffering
name|fromInstructionalOffering
parameter_list|,
name|String
name|prefix
parameter_list|,
name|boolean
name|mergeWaitListsProhibitedOverrides
parameter_list|)
block|{
if|if
condition|(
name|fromInstructionalOffering
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
name|InstructionalOffering
name|toInstructionalOffering
init|=
literal|null
decl_stmt|;
name|CourseOffering
name|fromControlingCourse
init|=
name|fromInstructionalOffering
operator|.
name|getControllingCourseOffering
argument_list|()
decl_stmt|;
name|CourseOffering
name|toControllingCourse
init|=
literal|null
decl_stmt|;
name|String
name|subject
init|=
operator|(
name|prefix
operator|!=
literal|null
condition|?
name|prefix
operator|+
name|iPrefixSeparator
else|:
literal|""
operator|)
operator|+
name|fromControlingCourse
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
decl_stmt|;
name|toControllingCourse
operator|=
name|CourseOffering
operator|.
name|findBySessionSubjAreaAbbvCourseNbr
argument_list|(
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|subject
argument_list|,
name|fromControlingCourse
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|toControllingCourse
operator|!=
literal|null
condition|)
block|{
name|toInstructionalOffering
operator|=
name|toControllingCourse
operator|.
name|getInstructionalOffering
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|toInstructionalOffering
operator|=
operator|new
name|InstructionalOffering
argument_list|()
expr_stmt|;
name|toInstructionalOffering
operator|.
name|setSession
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
block|}
name|toInstructionalOffering
operator|.
name|setNotOffered
argument_list|(
name|fromInstructionalOffering
operator|.
name|isNotOffered
argument_list|()
argument_list|)
expr_stmt|;
name|toInstructionalOffering
operator|.
name|setUniqueIdRolledForwardFrom
argument_list|(
name|fromInstructionalOffering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|toInstructionalOffering
operator|.
name|setInstrOfferingPermId
argument_list|(
name|fromInstructionalOffering
operator|.
name|getInstrOfferingPermId
argument_list|()
argument_list|)
expr_stmt|;
name|toInstructionalOffering
operator|.
name|setByReservationOnly
argument_list|(
name|fromInstructionalOffering
operator|.
name|isByReservationOnly
argument_list|()
argument_list|)
expr_stmt|;
name|toInstructionalOffering
operator|.
name|setLastWeekToEnroll
argument_list|(
name|fromInstructionalOffering
operator|.
name|getLastWeekToEnroll
argument_list|()
argument_list|)
expr_stmt|;
name|toInstructionalOffering
operator|.
name|setLastWeekToChange
argument_list|(
name|fromInstructionalOffering
operator|.
name|getLastWeekToChange
argument_list|()
argument_list|)
expr_stmt|;
name|toInstructionalOffering
operator|.
name|setLastWeekToDrop
argument_list|(
name|fromInstructionalOffering
operator|.
name|getLastWeekToDrop
argument_list|()
argument_list|)
expr_stmt|;
name|toInstructionalOffering
operator|.
name|setNotes
argument_list|(
name|fromInstructionalOffering
operator|.
name|getNotes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mergeWaitListsProhibitedOverrides
condition|)
block|{
name|toInstructionalOffering
operator|.
name|setWaitlist
argument_list|(
name|fromInstructionalOffering
operator|.
name|getWaitlist
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|toInstructionalOffering
operator|.
name|setWaitlist
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|CourseOffering
name|fromCourseOffering
init|=
literal|null
decl_stmt|;
name|CourseOffering
name|toCourseOffering
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|CourseOffering
argument_list|>
name|coIt
init|=
name|fromInstructionalOffering
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|coIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromCourseOffering
operator|=
operator|(
name|CourseOffering
operator|)
name|coIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|SubjectArea
name|toSa
init|=
name|findToSubjectArea
argument_list|(
name|fromCourseOffering
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|toSa
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|toCourseOffering
operator|=
name|CourseOffering
operator|.
name|findBySessionSubjAreaAbbvCourseNbr
argument_list|(
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|subject
argument_list|,
name|fromControlingCourse
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|toCourseOffering
operator|==
literal|null
condition|)
block|{
name|toCourseOffering
operator|=
operator|new
name|CourseOffering
argument_list|()
expr_stmt|;
name|toCourseOffering
operator|.
name|setSubjectArea
argument_list|(
name|toSa
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setCourseNbr
argument_list|(
name|fromCourseOffering
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromInstructionalOffering
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|toCourseOffering
operator|.
name|setIsControl
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|toCourseOffering
operator|.
name|setIsControl
argument_list|(
name|fromCourseOffering
operator|.
name|isIsControl
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|toCourseOffering
operator|.
name|setExternalUniqueId
argument_list|(
name|fromCourseOffering
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setNbrExpectedStudents
argument_list|(
name|fromCourseOffering
operator|.
name|getNbrExpectedStudents
argument_list|()
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setDemand
argument_list|(
name|fromCourseOffering
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setPermId
argument_list|(
name|fromCourseOffering
operator|.
name|getPermId
argument_list|()
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setScheduleBookNote
argument_list|(
name|fromCourseOffering
operator|.
name|getScheduleBookNote
argument_list|()
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setTitle
argument_list|(
name|fromCourseOffering
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setUniqueIdRolledForwardFrom
argument_list|(
name|fromCourseOffering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setInstructionalOffering
argument_list|(
name|toInstructionalOffering
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setReservation
argument_list|(
name|fromCourseOffering
operator|.
name|getReservation
argument_list|()
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setConsentType
argument_list|(
name|fromCourseOffering
operator|.
name|getConsentType
argument_list|()
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setCourseType
argument_list|(
name|fromCourseOffering
operator|.
name|getCourseType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromCourseOffering
operator|.
name|getFundingDept
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Department
name|toFundingDept
init|=
name|findToDepartment
argument_list|(
name|fromCourseOffering
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|toFundingDept
operator|!=
literal|null
condition|)
block|{
name|toCourseOffering
operator|.
name|setFundingDept
argument_list|(
name|toFundingDept
argument_list|)
expr_stmt|;
block|}
block|}
name|toInstructionalOffering
operator|.
name|addTocourseOfferings
argument_list|(
name|toCourseOffering
argument_list|)
expr_stmt|;
if|if
condition|(
name|mergeWaitListsProhibitedOverrides
operator|&&
name|fromCourseOffering
operator|.
name|getDisabledOverrides
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|toCourseOffering
operator|.
name|setDisabledOverrides
argument_list|(
operator|new
name|HashSet
argument_list|<
name|OverrideType
argument_list|>
argument_list|(
name|fromCourseOffering
operator|.
name|getDisabledOverrides
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fromCourseOffering
operator|.
name|getCreditConfigs
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromCourseOffering
operator|.
name|getCreditConfigs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|CourseCreditUnitConfig
name|ccuc
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|ccIt
init|=
name|fromCourseOffering
operator|.
name|getCreditConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|ccIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ccuc
operator|=
operator|(
name|CourseCreditUnitConfig
operator|)
name|ccIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|ccuc
operator|instanceof
name|ArrangeCreditUnitConfig
condition|)
block|{
name|ArrangeCreditUnitConfig
name|fromAcuc
init|=
operator|(
name|ArrangeCreditUnitConfig
operator|)
name|ccuc
decl_stmt|;
name|ArrangeCreditUnitConfig
name|toAcuc
init|=
operator|(
name|ArrangeCreditUnitConfig
operator|)
name|fromAcuc
operator|.
name|clone
argument_list|()
decl_stmt|;
name|toAcuc
operator|.
name|setOwner
argument_list|(
name|toCourseOffering
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|addTocreditConfigs
argument_list|(
name|toAcuc
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ccuc
operator|instanceof
name|FixedCreditUnitConfig
condition|)
block|{
name|FixedCreditUnitConfig
name|fromFcuc
init|=
operator|(
name|FixedCreditUnitConfig
operator|)
name|ccuc
decl_stmt|;
name|FixedCreditUnitConfig
name|toFcuc
init|=
operator|(
name|FixedCreditUnitConfig
operator|)
name|fromFcuc
operator|.
name|clone
argument_list|()
decl_stmt|;
name|toFcuc
operator|.
name|setOwner
argument_list|(
name|toCourseOffering
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|addTocreditConfigs
argument_list|(
name|toFcuc
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ccuc
operator|instanceof
name|VariableRangeCreditUnitConfig
condition|)
block|{
name|VariableRangeCreditUnitConfig
name|fromVrcuc
init|=
operator|(
name|VariableRangeCreditUnitConfig
operator|)
name|ccuc
decl_stmt|;
name|VariableRangeCreditUnitConfig
name|toVrcuc
init|=
operator|(
name|VariableRangeCreditUnitConfig
operator|)
name|fromVrcuc
operator|.
name|clone
argument_list|()
decl_stmt|;
name|toVrcuc
operator|.
name|setOwner
argument_list|(
name|toCourseOffering
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|addTocreditConfigs
argument_list|(
name|toVrcuc
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ccuc
operator|instanceof
name|VariableFixedCreditUnitConfig
condition|)
block|{
name|VariableFixedCreditUnitConfig
name|fromVfcuc
init|=
operator|(
name|VariableFixedCreditUnitConfig
operator|)
name|ccuc
decl_stmt|;
name|VariableFixedCreditUnitConfig
name|toVfcuc
init|=
operator|(
name|VariableFixedCreditUnitConfig
operator|)
name|fromVfcuc
operator|.
name|clone
argument_list|()
decl_stmt|;
name|toVfcuc
operator|.
name|setOwner
argument_list|(
name|toCourseOffering
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|addTocreditConfigs
argument_list|(
name|toVfcuc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|toInstructionalOffering
operator|.
name|getInstrOfferingPermId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|toInstructionalOffering
operator|.
name|generateInstrOfferingPermId
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|toInstructionalOffering
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|toInstructionalOffering
operator|.
name|setUniqueId
argument_list|(
name|InstructionalOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|save
argument_list|(
name|toInstructionalOffering
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|ctrlCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CourseOffering
name|co
range|:
name|toInstructionalOffering
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
if|if
condition|(
name|co
operator|.
name|isIsControl
argument_list|()
condition|)
block|{
name|ctrlCount
operator|=
name|ctrlCount
operator|+
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ctrlCount
operator|!=
literal|1
condition|)
block|{
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|CourseOffering
name|co
range|:
name|toInstructionalOffering
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|co
operator|.
name|setIsControl
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|co
operator|.
name|setIsControl
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|InstructionalOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|update
argument_list|(
name|toInstructionalOffering
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|toInstructionalOffering
operator|)
return|;
block|}
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|InstructionalOffering
argument_list|>
name|findToInstructionalOffering
parameter_list|(
name|InstructionalOffering
name|fromInstructionalOffering
parameter_list|,
name|String
name|defaultPrefix
parameter_list|,
name|boolean
name|mergeWaitListsProhibitedOverrides
parameter_list|)
block|{
if|if
condition|(
name|fromInstructionalOffering
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
name|HashMap
argument_list|<
name|String
argument_list|,
name|InstructionalOffering
argument_list|>
name|offeringMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|InstructionalOffering
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|iDepartmentCodesWithDifferentPrefix
operator|==
literal|null
operator|||
name|iDepartmentCodesWithDifferentPrefix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|CourseOffering
name|co
init|=
name|CourseOffering
operator|.
name|findByIdRolledForwardFrom
argument_list|(
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|fromInstructionalOffering
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|co
operator|==
literal|null
operator|&&
name|ApplicationProperty
operator|.
name|CourseOfferingNumberMustBeUnique
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|co
operator|=
name|CourseOffering
operator|.
name|findBySessionSubjAreaAbbvCourseNbr
argument_list|(
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|fromInstructionalOffering
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|,
name|fromInstructionalOffering
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|co
operator|!=
literal|null
condition|)
block|{
name|InstructionalOffering
name|toInstructionalOffering
init|=
name|co
operator|.
name|getInstructionalOffering
argument_list|()
decl_stmt|;
if|if
condition|(
name|toInstructionalOffering
operator|!=
literal|null
condition|)
block|{
name|toInstructionalOffering
operator|.
name|deleteAllClasses
argument_list|(
name|InstructionalOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|toInstructionalOffering
operator|.
name|deleteAllDistributionPreferences
argument_list|(
name|InstructionalOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|toInstructionalOffering
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|offeringMap
operator|.
name|put
argument_list|(
name|defaultPrefix
argument_list|,
name|toInstructionalOffering
argument_list|)
expr_stmt|;
return|return
operator|(
name|offeringMap
operator|)
return|;
block|}
block|}
block|}
comment|//		if (iSessionRollForward.sessionHasCourseCatalog(iMergedSession)){
comment|//			return(createToInstructionalOfferingsBasedOnCourseCatalog(fromInstructionalOffering, defaultPrefix));
comment|//		} else {
return|return
operator|(
name|createToInstructionalOfferingsFromFromInstructionalOffering
argument_list|(
name|fromInstructionalOffering
argument_list|,
name|defaultPrefix
argument_list|,
name|mergeWaitListsProhibitedOverrides
argument_list|)
operator|)
return|;
comment|//		}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
class|class
name|MergeSchedSubpart
block|{
specifier|private
name|SchedulingSubpart
name|fromParentSubpart
decl_stmt|;
specifier|private
name|SchedulingSubpart
name|toParentSubpart
decl_stmt|;
specifier|private
name|SchedulingSubpart
name|fromSubpart
decl_stmt|;
specifier|private
name|SchedulingSubpart
name|toSubpart
decl_stmt|;
specifier|private
name|List
argument_list|<
name|SchedulingSubpart
argument_list|>
name|fromChildSubparts
decl_stmt|;
specifier|private
name|List
argument_list|<
name|SchedulingSubpart
argument_list|>
name|toChildSubparts
decl_stmt|;
specifier|private
name|List
argument_list|<
name|MergeClass
argument_list|>
name|mergeClasses
decl_stmt|;
empty_stmt|;
specifier|public
name|List
argument_list|<
name|SchedulingSubpart
argument_list|>
name|getFromChildSubparts
parameter_list|()
block|{
return|return
name|fromChildSubparts
return|;
block|}
specifier|public
name|Class_
name|findParentClassMatchingFromParentClass
parameter_list|(
name|Class_
name|fromParentClass
parameter_list|)
block|{
if|if
condition|(
name|getMergeClasses
argument_list|()
operator|!=
literal|null
operator|&&
name|getMergeClasses
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|MergeClass
name|rfc
range|:
name|getMergeClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|rfc
operator|.
name|getFromClass
argument_list|()
operator|.
name|equals
argument_list|(
name|fromParentClass
argument_list|)
condition|)
block|{
return|return
operator|(
name|rfc
operator|.
name|getToClass
argument_list|()
operator|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setFromChildSubparts
parameter_list|(
name|List
argument_list|<
name|SchedulingSubpart
argument_list|>
name|fromChildSubparts
parameter_list|)
block|{
name|this
operator|.
name|fromChildSubparts
operator|=
name|fromChildSubparts
expr_stmt|;
block|}
specifier|public
name|void
name|addToFromChildSubparts
parameter_list|(
name|SchedulingSubpart
name|fromChildSubpart
parameter_list|)
block|{
if|if
condition|(
name|fromChildSubparts
operator|==
literal|null
condition|)
block|{
name|fromChildSubparts
operator|=
operator|new
name|ArrayList
argument_list|<
name|SchedulingSubpart
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|fromChildSubparts
operator|.
name|add
argument_list|(
name|fromChildSubpart
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SchedulingSubpart
name|getFromParentSubpart
parameter_list|()
block|{
return|return
name|fromParentSubpart
return|;
block|}
specifier|public
name|void
name|setFromParentSubpart
parameter_list|(
name|SchedulingSubpart
name|fromParentSubpart
parameter_list|)
block|{
name|this
operator|.
name|fromParentSubpart
operator|=
name|fromParentSubpart
expr_stmt|;
block|}
specifier|public
name|SchedulingSubpart
name|getFromSubpart
parameter_list|()
block|{
return|return
name|fromSubpart
return|;
block|}
specifier|public
name|void
name|setFromSubpart
parameter_list|(
name|SchedulingSubpart
name|fromSubpart
parameter_list|)
block|{
name|this
operator|.
name|fromSubpart
operator|=
name|fromSubpart
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|SchedulingSubpart
argument_list|>
name|getToChildSubparts
parameter_list|()
block|{
return|return
name|toChildSubparts
return|;
block|}
specifier|public
name|void
name|setToChildSubparts
parameter_list|(
name|List
argument_list|<
name|SchedulingSubpart
argument_list|>
name|toChildSubparts
parameter_list|)
block|{
name|this
operator|.
name|toChildSubparts
operator|=
name|toChildSubparts
expr_stmt|;
block|}
specifier|public
name|void
name|addToToChildSubparts
parameter_list|(
name|SchedulingSubpart
name|toChildSubpart
parameter_list|)
block|{
if|if
condition|(
name|toChildSubparts
operator|==
literal|null
condition|)
block|{
name|toChildSubparts
operator|=
operator|new
name|ArrayList
argument_list|<
name|SchedulingSubpart
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|toChildSubparts
operator|.
name|add
argument_list|(
name|toChildSubpart
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SchedulingSubpart
name|getToParentSubpart
parameter_list|()
block|{
return|return
name|toParentSubpart
return|;
block|}
specifier|public
name|void
name|setToParentSubpart
parameter_list|(
name|SchedulingSubpart
name|toParentSubpart
parameter_list|)
block|{
name|this
operator|.
name|toParentSubpart
operator|=
name|toParentSubpart
expr_stmt|;
block|}
specifier|public
name|SchedulingSubpart
name|getToSubpart
parameter_list|()
block|{
return|return
name|toSubpart
return|;
block|}
specifier|public
name|void
name|setToSubpart
parameter_list|(
name|SchedulingSubpart
name|toSubpart
parameter_list|)
block|{
name|this
operator|.
name|toSubpart
operator|=
name|toSubpart
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|MergeClass
argument_list|>
name|getMergeClasses
parameter_list|()
block|{
return|return
name|mergeClasses
return|;
block|}
specifier|public
name|void
name|setMergeClasses
parameter_list|(
name|List
argument_list|<
name|MergeClass
argument_list|>
name|mergeClasses
parameter_list|)
block|{
name|this
operator|.
name|mergeClasses
operator|=
name|mergeClasses
expr_stmt|;
block|}
specifier|public
name|void
name|addToMergeClasses
parameter_list|(
name|MergeClass
name|mergeClasses
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|mergeClasses
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|mergeClasses
operator|=
operator|new
name|ArrayList
argument_list|<
name|MergeClass
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|mergeClasses
operator|.
name|add
argument_list|(
name|mergeClasses
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
class|class
name|MergeClass
block|{
specifier|private
name|Class_
name|fromParentClass
decl_stmt|;
specifier|private
name|Class_
name|toParentClass
decl_stmt|;
specifier|private
name|Class_
name|fromClass
decl_stmt|;
specifier|private
name|Class_
name|toClass
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|fromChildClasses
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Class_
argument_list|>
name|toChildClasses
decl_stmt|;
specifier|private
name|MergeSchedSubpart
name|parentSubpart
decl_stmt|;
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|getFromChildClasses
parameter_list|()
block|{
return|return
name|fromChildClasses
return|;
block|}
specifier|public
name|void
name|setFromChildClasses
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|lastLikeChildClasses
parameter_list|)
block|{
name|this
operator|.
name|fromChildClasses
operator|=
name|lastLikeChildClasses
expr_stmt|;
block|}
specifier|public
name|void
name|addToLastLikeChildClasses
parameter_list|(
name|Object
name|fromChildClass
parameter_list|)
block|{
if|if
condition|(
name|fromChildClasses
operator|==
literal|null
condition|)
block|{
name|fromChildClasses
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|fromChildClasses
operator|.
name|add
argument_list|(
name|fromChildClass
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Class_
name|getFromClass
parameter_list|()
block|{
return|return
name|fromClass
return|;
block|}
specifier|public
name|void
name|setFromClass
parameter_list|(
name|Class_
name|fromClass
parameter_list|)
block|{
name|this
operator|.
name|fromClass
operator|=
name|fromClass
expr_stmt|;
block|}
specifier|public
name|Class_
name|getFromParentClass
parameter_list|()
block|{
return|return
name|fromParentClass
return|;
block|}
specifier|public
name|void
name|setFromParentClass
parameter_list|(
name|Class_
name|fromParentClass
parameter_list|)
block|{
name|this
operator|.
name|fromParentClass
operator|=
name|fromParentClass
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Class_
argument_list|>
name|getToChildClasses
parameter_list|()
block|{
return|return
name|toChildClasses
return|;
block|}
specifier|public
name|void
name|setToChildClasses
parameter_list|(
name|List
argument_list|<
name|Class_
argument_list|>
name|newChildClasses
parameter_list|)
block|{
name|this
operator|.
name|toChildClasses
operator|=
name|newChildClasses
expr_stmt|;
block|}
specifier|public
name|void
name|addToNewChildClasses
parameter_list|(
name|Class_
name|toChildClass
parameter_list|)
block|{
if|if
condition|(
name|toChildClasses
operator|==
literal|null
condition|)
block|{
name|toChildClasses
operator|=
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|toChildClasses
operator|.
name|add
argument_list|(
name|toChildClass
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Class_
name|getToClass
parameter_list|()
block|{
return|return
name|toClass
return|;
block|}
specifier|public
name|void
name|setToClass
parameter_list|(
name|Class_
name|toClass
parameter_list|)
block|{
name|this
operator|.
name|toClass
operator|=
name|toClass
expr_stmt|;
block|}
specifier|public
name|Class_
name|getToParentClass
parameter_list|()
block|{
return|return
name|toParentClass
return|;
block|}
specifier|public
name|void
name|setToParentClass
parameter_list|(
name|Class_
name|toParentClass
parameter_list|)
block|{
name|this
operator|.
name|toParentClass
operator|=
name|toParentClass
expr_stmt|;
block|}
specifier|public
name|MergeSchedSubpart
name|getParentSubpart
parameter_list|()
block|{
return|return
name|parentSubpart
return|;
block|}
specifier|public
name|void
name|setParentSubpart
parameter_list|(
name|MergeSchedSubpart
name|parentSubpart
parameter_list|)
block|{
name|this
operator|.
name|parentSubpart
operator|=
name|parentSubpart
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|mergeDatePatternPrefsToSession
parameter_list|(
name|PreferenceGroup
name|fromPrefGroup
parameter_list|,
name|PreferenceGroup
name|toPrefGroup
parameter_list|,
name|boolean
name|isClassMerge
parameter_list|,
name|boolean
name|isClassPrefsPushUp
parameter_list|,
name|CancelledClassAction
name|cancelledClassAction
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
if|if
condition|(
name|fromPrefGroup
operator|.
name|getDatePatternPreferences
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromPrefGroup
operator|.
name|getDatePatternPreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
operator|!
operator|(
name|fromPrefGroup
operator|instanceof
name|Class_
operator|)
operator|||
name|isClassMerge
operator|)
operator|&&
operator|(
operator|!
operator|(
name|fromPrefGroup
operator|instanceof
name|SchedulingSubpart
operator|)
operator|||
name|isClassMerge
operator|)
condition|)
block|{
name|DatePatternPref
name|fromDatePatternPref
init|=
literal|null
decl_stmt|;
name|DatePatternPref
name|toDatePatternPref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|fromPrefGroup
operator|.
name|getDatePatternPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromDatePatternPref
operator|=
operator|(
name|DatePatternPref
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|DatePattern
name|toDatePattern
init|=
name|DatePattern
operator|.
name|findByName
argument_list|(
name|iMergedSession
argument_list|,
name|fromDatePatternPref
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|toDatePattern
operator|==
literal|null
condition|)
block|{
name|iLog
operator|.
name|warn
argument_list|(
literal|"To Date Pattern not found:  "
operator|+
name|fromDatePatternPref
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" for "
operator|+
name|fromPrefGroup
operator|.
name|htmlLabel
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|toDatePatternPref
operator|=
operator|(
name|DatePatternPref
operator|)
name|fromDatePatternPref
operator|.
name|clone
argument_list|()
expr_stmt|;
name|toDatePatternPref
operator|.
name|setDatePattern
argument_list|(
name|toDatePattern
argument_list|)
expr_stmt|;
name|toDatePatternPref
operator|.
name|setOwner
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTopreferences
argument_list|(
name|toDatePatternPref
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fromPrefGroup
operator|instanceof
name|SchedulingSubpart
operator|&&
name|isClassPrefsPushUp
operator|&&
operator|(
name|toPrefGroup
operator|.
name|getDatePatternPreferences
argument_list|()
operator|==
literal|null
operator|||
name|toPrefGroup
operator|.
name|getDatePatternPreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|fromPrefGroup
decl_stmt|;
name|Class_DAO
name|cDao
init|=
name|Class_DAO
operator|.
name|getInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getClasses
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|DatePatternPref
argument_list|>
name|prefMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DatePatternPref
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|prefCount
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|key
decl_stmt|;
name|int
name|clsCnt
init|=
literal|0
decl_stmt|;
name|DatePattern
name|firstDp
init|=
literal|null
decl_stmt|;
name|int
name|dpCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Class_
name|c
range|:
name|ss
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|CancelledClassAction
operator|.
name|SKIP
operator|==
name|cancelledClassAction
operator|&&
name|c
operator|.
name|isCancelled
argument_list|()
condition|)
continue|continue;
name|clsCnt
operator|++
expr_stmt|;
name|DatePattern
name|dp
init|=
name|c
operator|.
name|effectiveDatePattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|dp
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|firstDp
operator|==
literal|null
condition|)
block|{
name|firstDp
operator|=
name|dp
expr_stmt|;
name|dpCount
operator|++
expr_stmt|;
block|}
if|else if
condition|(
name|firstDp
operator|.
name|equals
argument_list|(
name|dp
argument_list|)
condition|)
name|dpCount
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|.
name|getDatePatternPreferences
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|c
operator|.
name|getDatePatternPreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|rfpIt
init|=
name|c
operator|.
name|getDatePatternPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|rfpIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DatePatternPref
name|dfp
init|=
operator|(
name|DatePatternPref
operator|)
name|rfpIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|key
operator|=
name|dfp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefName
argument_list|()
operator|+
name|dfp
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|prefMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|dfp
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|prefCount
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|cnt
operator|=
name|prefCount
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|cnt
operator|++
expr_stmt|;
name|prefCount
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|cnt
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|firstDp
operator|!=
literal|null
operator|&&
name|dpCount
operator|==
name|clsCnt
operator|&&
operator|!
name|firstDp
operator|.
name|equals
argument_list|(
name|ss
operator|.
name|effectiveDatePattern
argument_list|()
argument_list|)
condition|)
block|{
name|DatePattern
name|toDatePattern
init|=
name|DatePattern
operator|.
name|findByName
argument_list|(
name|iMergedSession
argument_list|,
name|firstDp
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|toDatePattern
operator|==
literal|null
condition|)
block|{
name|iLog
operator|.
name|warn
argument_list|(
literal|"To Date Pattern not found:  "
operator|+
name|firstDp
operator|.
name|getName
argument_list|()
operator|+
literal|" for "
operator|+
name|fromPrefGroup
operator|.
name|htmlLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|SchedulingSubpart
operator|)
name|toPrefGroup
operator|)
operator|.
name|setDatePattern
argument_list|(
name|toDatePattern
argument_list|)
expr_stmt|;
for|for
control|(
name|Class_
name|c
range|:
operator|(
operator|(
name|SchedulingSubpart
operator|)
name|toPrefGroup
operator|)
operator|.
name|getClasses
argument_list|()
control|)
block|{
name|c
operator|.
name|setDatePattern
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|cDao
operator|.
name|update
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|pref
range|:
name|prefCount
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|prefCount
operator|.
name|get
argument_list|(
name|pref
argument_list|)
operator|.
name|intValue
argument_list|()
operator|==
name|clsCnt
condition|)
block|{
name|DatePatternPref
name|fromDatePatternPref
init|=
name|prefMap
operator|.
name|get
argument_list|(
name|pref
argument_list|)
decl_stmt|;
name|DatePattern
name|toDatePattern
init|=
name|DatePattern
operator|.
name|findByName
argument_list|(
name|iMergedSession
argument_list|,
name|fromDatePatternPref
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|toDatePattern
operator|==
literal|null
condition|)
block|{
name|iLog
operator|.
name|warn
argument_list|(
literal|"To Date Pattern not found:  "
operator|+
name|fromDatePatternPref
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" for "
operator|+
name|fromPrefGroup
operator|.
name|htmlLabel
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|DatePatternPref
name|toDatePatternPref
init|=
operator|(
name|DatePatternPref
operator|)
name|fromDatePatternPref
operator|.
name|clone
argument_list|()
decl_stmt|;
name|toDatePatternPref
operator|.
name|setDatePattern
argument_list|(
name|toDatePattern
argument_list|)
expr_stmt|;
name|toDatePatternPref
operator|.
name|setOwner
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTopreferences
argument_list|(
name|toDatePatternPref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|public
name|boolean
name|isMergeDistributionsToSession
parameter_list|(
name|DistributionPref
name|dp
parameter_list|,
name|DistributionMode
name|distributionPrefMode
parameter_list|)
block|{
switch|switch
condition|(
name|distributionPrefMode
condition|)
block|{
case|case
name|ALL
case|:
return|return
literal|true
return|;
case|case
name|NONE
case|:
return|return
literal|false
return|;
case|case
name|SUBPART
case|:
comment|// there are no classes
for|for
control|(
name|DistributionObject
name|distObj
range|:
name|dp
operator|.
name|getDistributionObjects
argument_list|()
control|)
if|if
condition|(
name|distObj
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|Class_
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
case|case
name|MIXED
case|:
comment|// there is at least one subpart
for|for
control|(
name|DistributionObject
name|distObj
range|:
name|dp
operator|.
name|getDistributionObjects
argument_list|()
control|)
if|if
condition|(
name|distObj
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|SchedulingSubpart
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
specifier|protected
name|void
name|mergeDistributionPrefsToSession
parameter_list|(
name|PreferenceGroup
name|fromPrefGroup
parameter_list|,
name|PreferenceGroup
name|toPrefGroup
parameter_list|,
name|DistributionMode
name|distributionPrefMode
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
if|if
condition|(
name|fromPrefGroup
operator|.
name|getDistributionObjects
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromPrefGroup
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|DistributionObject
name|fromDistObj
init|=
literal|null
decl_stmt|;
name|DistributionObject
name|toDistObj
init|=
literal|null
decl_stmt|;
name|DistributionPref
name|fromDistributionPref
init|=
literal|null
decl_stmt|;
name|DistributionPref
name|toDistributionPref
init|=
literal|null
decl_stmt|;
name|DistributionPrefDAO
name|dpDao
init|=
name|DistributionPrefDAO
operator|.
name|getInstance
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|DistributionObject
argument_list|>
name|it
init|=
name|fromPrefGroup
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromDistObj
operator|=
operator|(
name|DistributionObject
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|toDistObj
operator|=
operator|new
name|DistributionObject
argument_list|()
expr_stmt|;
name|fromDistributionPref
operator|=
name|fromDistObj
operator|.
name|getDistributionPref
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isMergeDistributionsToSession
argument_list|(
name|fromDistributionPref
argument_list|,
name|distributionPrefMode
argument_list|)
condition|)
continue|continue;
name|toDistributionPref
operator|=
name|DistributionPref
operator|.
name|findByIdRolledForwardFrom
argument_list|(
name|fromDistributionPref
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDistributionPref
operator|==
literal|null
condition|)
block|{
name|toDistributionPref
operator|=
operator|new
name|DistributionPref
argument_list|()
expr_stmt|;
name|toDistributionPref
operator|.
name|setDistributionType
argument_list|(
name|fromDistributionPref
operator|.
name|getDistributionType
argument_list|()
argument_list|)
expr_stmt|;
name|toDistributionPref
operator|.
name|setGrouping
argument_list|(
name|fromDistributionPref
operator|.
name|getGrouping
argument_list|()
argument_list|)
expr_stmt|;
name|toDistributionPref
operator|.
name|setPrefLevel
argument_list|(
name|fromDistributionPref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|toDistributionPref
operator|.
name|setUniqueIdRolledForwardFrom
argument_list|(
name|fromDistributionPref
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|Department
name|toDept
init|=
name|findToDepartment
argument_list|(
operator|(
name|Department
operator|)
name|fromDistributionPref
operator|.
name|getOwner
argument_list|()
argument_list|,
name|defaultPrefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|toDept
operator|!=
literal|null
condition|)
block|{
name|toDistributionPref
operator|.
name|setOwner
argument_list|(
name|toDept
argument_list|)
expr_stmt|;
name|toDept
operator|.
name|addTopreferences
argument_list|(
name|toDistributionPref
argument_list|)
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
block|}
name|toDistObj
operator|.
name|setDistributionPref
argument_list|(
name|toDistributionPref
argument_list|)
expr_stmt|;
name|toDistObj
operator|.
name|setPrefGroup
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toDistObj
operator|.
name|setSequenceNumber
argument_list|(
name|fromDistObj
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTodistributionObjects
argument_list|(
name|toDistObj
argument_list|)
expr_stmt|;
name|dpDao
operator|.
name|saveOrUpdate
argument_list|(
name|toDistributionPref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|mergeCourseCreditUnitConfigForSchedSubpart
parameter_list|(
name|SchedulingSubpart
name|fromSubpart
parameter_list|,
name|SchedulingSubpart
name|toSubpart
parameter_list|)
block|{
if|if
condition|(
name|iSessionRollForward
operator|.
name|sessionHasCourseCatalog
argument_list|(
name|toSubpart
operator|.
name|getSession
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|fromSubpart
operator|.
name|getParentSubpart
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromSubpart
operator|.
name|getParentSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|equals
argument_list|(
name|fromSubpart
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
condition|)
block|{
name|CourseCatalog
name|courseCatalogEntry
init|=
name|CourseCatalog
operator|.
name|findCourseInCatalogForSession
argument_list|(
name|toSubpart
operator|.
name|getControllingCourseOffering
argument_list|()
argument_list|,
name|toSubpart
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|courseCatalogEntry
operator|!=
literal|null
operator|&&
name|courseCatalogEntry
operator|.
name|getSubparts
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|CourseSubpartCredit
name|csc
init|=
literal|null
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|CourseSubpartCredit
argument_list|>
name|cscIt
init|=
name|courseCatalogEntry
operator|.
name|getSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
operator|(
name|cscIt
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|found
operator|)
condition|;
control|)
block|{
name|csc
operator|=
operator|(
name|CourseSubpartCredit
operator|)
name|cscIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|csc
operator|.
name|getSubpartId
argument_list|()
operator|.
name|equals
argument_list|(
name|toSubpart
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|found
condition|)
block|{
name|CourseCreditUnitConfig
name|ccuc
init|=
name|CourseCreditUnitConfig
operator|.
name|createCreditUnitConfigOfFormat
argument_list|(
name|csc
operator|.
name|getCreditFormat
argument_list|()
argument_list|,
name|csc
operator|.
name|getCreditType
argument_list|()
argument_list|,
name|csc
operator|.
name|getCreditUnitType
argument_list|()
argument_list|,
name|csc
operator|.
name|getFixedMinimumCredit
argument_list|()
argument_list|,
name|csc
operator|.
name|getMaximumCredit
argument_list|()
argument_list|,
name|csc
operator|.
name|isFractionalCreditAllowed
argument_list|()
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|ccuc
operator|.
name|setOwner
argument_list|(
name|toSubpart
argument_list|)
expr_stmt|;
name|toSubpart
operator|.
name|setCredit
argument_list|(
name|ccuc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|else if
condition|(
name|fromSubpart
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Float
name|units
init|=
literal|null
decl_stmt|;
name|Float
name|maxUnits
init|=
literal|null
decl_stmt|;
name|Boolean
name|fractionalIncrementsAllowed
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fromSubpart
operator|.
name|getCredit
argument_list|()
operator|instanceof
name|FixedCreditUnitConfig
condition|)
block|{
name|FixedCreditUnitConfig
name|fcuc
init|=
operator|(
name|FixedCreditUnitConfig
operator|)
name|fromSubpart
operator|.
name|getCredit
argument_list|()
decl_stmt|;
name|units
operator|=
name|fcuc
operator|.
name|getFixedUnits
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|fromSubpart
operator|.
name|getCredit
argument_list|()
operator|instanceof
name|VariableFixedCreditUnitConfig
condition|)
block|{
name|VariableFixedCreditUnitConfig
name|vfcuc
init|=
operator|(
name|VariableFixedCreditUnitConfig
operator|)
name|fromSubpart
operator|.
name|getCredit
argument_list|()
decl_stmt|;
name|units
operator|=
name|vfcuc
operator|.
name|getMinUnits
argument_list|()
expr_stmt|;
name|maxUnits
operator|=
name|vfcuc
operator|.
name|getMaxUnits
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|fromSubpart
operator|.
name|getCredit
argument_list|()
operator|instanceof
name|VariableRangeCreditUnitConfig
condition|)
block|{
name|VariableRangeCreditUnitConfig
name|vrcuc
init|=
operator|(
name|VariableRangeCreditUnitConfig
operator|)
name|fromSubpart
operator|.
name|getCredit
argument_list|()
decl_stmt|;
name|units
operator|=
name|vrcuc
operator|.
name|getMinUnits
argument_list|()
expr_stmt|;
name|maxUnits
operator|=
name|vrcuc
operator|.
name|getMaxUnits
argument_list|()
expr_stmt|;
name|fractionalIncrementsAllowed
operator|=
name|vrcuc
operator|.
name|isFractionalIncrementsAllowed
argument_list|()
expr_stmt|;
block|}
name|CourseCreditUnitConfig
name|ccuc
init|=
name|CourseCreditUnitConfig
operator|.
name|createCreditUnitConfigOfFormat
argument_list|(
name|fromSubpart
operator|.
name|getCredit
argument_list|()
operator|.
name|getCreditFormat
argument_list|()
argument_list|,
name|fromSubpart
operator|.
name|getCredit
argument_list|()
operator|.
name|getCreditType
argument_list|()
argument_list|,
name|fromSubpart
operator|.
name|getCredit
argument_list|()
operator|.
name|getCreditUnitType
argument_list|()
argument_list|,
name|units
argument_list|,
name|maxUnits
argument_list|,
name|fractionalIncrementsAllowed
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|ccuc
operator|.
name|setOwner
argument_list|(
name|toSubpart
argument_list|)
expr_stmt|;
name|toSubpart
operator|.
name|setCredit
argument_list|(
name|ccuc
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Class_
name|mergeClassToSession
parameter_list|(
name|Class_
name|fromClass
parameter_list|,
name|SchedulingSubpart
name|toSubpart
parameter_list|,
name|boolean
name|isClassMerge
parameter_list|,
name|boolean
name|isSubpartTimePrefMerge
parameter_list|,
name|boolean
name|isSubpartLocationPrefMerge
parameter_list|,
name|boolean
name|isClassPrefsPushUp
parameter_list|,
name|DistributionMode
name|distributionPrefMode
parameter_list|,
name|CancelledClassAction
name|cancelledClassAction
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
throws|throws
name|Exception
block|{
name|Class_
name|toClass
init|=
operator|new
name|Class_
argument_list|()
decl_stmt|;
name|toClass
operator|.
name|setEnabledForStudentScheduling
argument_list|(
name|fromClass
operator|.
name|isEnabledForStudentScheduling
argument_list|()
argument_list|)
expr_stmt|;
name|toClass
operator|.
name|setDisplayInstructor
argument_list|(
name|fromClass
operator|.
name|isDisplayInstructor
argument_list|()
argument_list|)
expr_stmt|;
name|toClass
operator|.
name|setExpectedCapacity
argument_list|(
name|fromClass
operator|.
name|getExpectedCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|toClass
operator|.
name|setMaxExpectedCapacity
argument_list|(
name|fromClass
operator|.
name|getMaxExpectedCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|toClass
operator|.
name|setNbrRooms
argument_list|(
name|fromClass
operator|.
name|getNbrRooms
argument_list|()
argument_list|)
expr_stmt|;
name|toClass
operator|.
name|setNotes
argument_list|(
name|fromClass
operator|.
name|getNotes
argument_list|()
argument_list|)
expr_stmt|;
name|toClass
operator|.
name|setRoomRatio
argument_list|(
name|fromClass
operator|.
name|getRoomRatio
argument_list|()
argument_list|)
expr_stmt|;
name|toClass
operator|.
name|setSchedulePrintNote
argument_list|(
name|fromClass
operator|.
name|getSchedulePrintNote
argument_list|()
argument_list|)
expr_stmt|;
name|toClass
operator|.
name|setSchedulingSubpart
argument_list|(
name|toSubpart
argument_list|)
expr_stmt|;
name|toClass
operator|.
name|setUniqueIdRolledForwardFrom
argument_list|(
name|fromClass
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromClass
operator|.
name|getFundingDept
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Department
name|toFundingDept
init|=
name|findToDepartment
argument_list|(
name|fromClass
operator|.
name|getFundingDept
argument_list|()
argument_list|,
name|defaultPrefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|toFundingDept
operator|!=
literal|null
condition|)
block|{
name|toClass
operator|.
name|setFundingDept
argument_list|(
name|toFundingDept
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fromClass
operator|.
name|getLmsInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LearningManagementSystemInfo
name|lms
init|=
name|LearningManagementSystemInfo
operator|.
name|findBySessionIdAndReference
argument_list|(
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|fromClass
operator|.
name|getLmsInfo
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
decl_stmt|;
name|toClass
operator|.
name|setLms
argument_list|(
name|lms
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|iResetClassSuffix
condition|)
block|{
name|toClass
operator|.
name|setClassSuffix
argument_list|(
name|fromClass
operator|.
name|getClassSuffix
argument_list|()
argument_list|)
expr_stmt|;
name|toClass
operator|.
name|setExternalUniqueId
argument_list|(
name|fromClass
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|CancelledClassAction
operator|.
name|KEEP
operator|==
name|cancelledClassAction
condition|)
block|{
name|toClass
operator|.
name|setCancelled
argument_list|(
name|fromClass
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|toClass
operator|.
name|setCancelled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|toSubpart
operator|.
name|addToclasses
argument_list|(
name|toClass
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromClass
operator|.
name|getManagingDept
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromClass
operator|.
name|getManagingDept
argument_list|()
operator|.
name|equals
argument_list|(
name|fromClass
operator|.
name|getControllingDept
argument_list|()
argument_list|)
condition|)
block|{
name|toClass
operator|.
name|setManagingDept
argument_list|(
name|findToDepartment
argument_list|(
name|fromClass
operator|.
name|getManagingDept
argument_list|()
argument_list|,
name|defaultPrefix
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fromClass
operator|.
name|getDatePattern
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|DatePattern
name|toDp
init|=
name|DatePattern
operator|.
name|findByName
argument_list|(
name|iMergedSession
argument_list|,
name|fromClass
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|toDp
operator|==
literal|null
condition|)
block|{
name|toDp
operator|=
name|fromClass
operator|.
name|getDatePattern
argument_list|()
operator|.
name|findCloseMatchDatePatternInSession
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
block|}
name|toClass
operator|.
name|setDatePattern
argument_list|(
name|toDp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isClassMerge
condition|)
block|{
name|mergeTimePrefsToSession
argument_list|(
name|fromClass
argument_list|,
name|toClass
argument_list|,
name|isClassMerge
argument_list|,
name|isSubpartTimePrefMerge
argument_list|,
name|isClassPrefsPushUp
argument_list|,
name|cancelledClassAction
argument_list|)
expr_stmt|;
name|mergeBuildingPrefs
argument_list|(
name|fromClass
argument_list|,
name|toClass
argument_list|,
name|isClassMerge
argument_list|,
name|isSubpartLocationPrefMerge
argument_list|,
name|isClassPrefsPushUp
argument_list|,
name|cancelledClassAction
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
name|mergeRoomPrefsToSession
argument_list|(
name|fromClass
argument_list|,
name|toClass
argument_list|,
name|isClassMerge
argument_list|,
name|isSubpartLocationPrefMerge
argument_list|,
name|isClassPrefsPushUp
argument_list|,
name|cancelledClassAction
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
name|mergeRoomGroupPrefsToSession
argument_list|(
name|fromClass
argument_list|,
name|toClass
argument_list|,
name|isClassMerge
argument_list|,
name|isSubpartLocationPrefMerge
argument_list|,
name|isClassPrefsPushUp
argument_list|,
name|cancelledClassAction
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
name|mergeRoomFeaturePrefsToSession
argument_list|(
name|fromClass
argument_list|,
name|toClass
argument_list|,
name|isClassMerge
argument_list|,
name|isSubpartLocationPrefMerge
argument_list|,
name|isClassPrefsPushUp
argument_list|,
name|cancelledClassAction
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
name|mergeDatePatternPrefsToSession
argument_list|(
name|fromClass
argument_list|,
name|toClass
argument_list|,
name|isClassMerge
argument_list|,
name|isClassPrefsPushUp
argument_list|,
name|cancelledClassAction
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|distributionPrefMode
operator|!=
literal|null
operator|&&
name|distributionPrefMode
operator|!=
name|DistributionMode
operator|.
name|NONE
condition|)
name|mergeDistributionPrefsToSession
argument_list|(
name|fromClass
argument_list|,
name|toClass
argument_list|,
name|distributionPrefMode
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromClass
operator|.
name|getCommittedAssignment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|RoomFeature
name|rf
init|=
name|getCampusRoomFeature
argument_list|(
name|findPrefix
argument_list|(
name|fromClass
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|defaultPrefix
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rf
operator|!=
literal|null
condition|)
block|{
name|RoomFeaturePref
name|rfp
init|=
operator|new
name|RoomFeaturePref
argument_list|()
decl_stmt|;
name|rfp
operator|.
name|setOwner
argument_list|(
name|toClass
argument_list|)
expr_stmt|;
name|rfp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
expr_stmt|;
name|rfp
operator|.
name|setRoomFeature
argument_list|(
name|rf
argument_list|)
expr_stmt|;
name|toClass
operator|.
name|addTopreferences
argument_list|(
name|rfp
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|toClass
operator|)
return|;
block|}
specifier|private
name|void
name|mergeSchedulingSubpartToSession
parameter_list|(
name|InstrOfferingConfig
name|toInstrOffrConfig
parameter_list|,
name|SchedulingSubpart
name|fromSubpart
parameter_list|,
name|MergeSchedSubpart
name|parentSubpart
parameter_list|,
name|boolean
name|isClassMerge
parameter_list|,
name|boolean
name|isSubpartTimePrefMerge
parameter_list|,
name|boolean
name|isSubpartLocationPrefMerge
parameter_list|,
name|boolean
name|isClassPrefsPushUp
parameter_list|,
name|DistributionMode
name|distributionPrefMode
parameter_list|,
name|CancelledClassAction
name|cancelledClassAction
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
throws|throws
name|Exception
block|{
name|SchedulingSubpart
name|toSubpart
init|=
operator|new
name|SchedulingSubpart
argument_list|()
decl_stmt|;
name|toSubpart
operator|.
name|setAutoSpreadInTime
argument_list|(
name|fromSubpart
operator|.
name|isAutoSpreadInTime
argument_list|()
argument_list|)
expr_stmt|;
name|toSubpart
operator|.
name|setStudentAllowOverlap
argument_list|(
name|fromSubpart
operator|.
name|isStudentAllowOverlap
argument_list|()
argument_list|)
expr_stmt|;
name|toSubpart
operator|.
name|setInstrOfferingConfig
argument_list|(
name|toInstrOffrConfig
argument_list|)
expr_stmt|;
name|toInstrOffrConfig
operator|.
name|addToschedulingSubparts
argument_list|(
name|toSubpart
argument_list|)
expr_stmt|;
name|toSubpart
operator|.
name|setMinutesPerWk
argument_list|(
name|fromSubpart
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|)
expr_stmt|;
name|toSubpart
operator|.
name|setItype
argument_list|(
name|fromSubpart
operator|.
name|getItype
argument_list|()
argument_list|)
expr_stmt|;
name|toSubpart
operator|.
name|setUniqueIdRolledForwardFrom
argument_list|(
name|fromSubpart
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|mergeCourseCreditUnitConfigForSchedSubpart
argument_list|(
name|fromSubpart
argument_list|,
name|toSubpart
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromSubpart
operator|.
name|getDatePattern
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|DatePattern
name|toDp
init|=
literal|null
decl_stmt|;
name|toDp
operator|=
name|DatePattern
operator|.
name|findByName
argument_list|(
name|iMergedSession
argument_list|,
name|fromSubpart
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDp
operator|==
literal|null
condition|)
block|{
name|toDp
operator|=
name|fromSubpart
operator|.
name|getDatePattern
argument_list|()
operator|.
name|findCloseMatchDatePatternInSession
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
block|}
name|toSubpart
operator|.
name|setDatePattern
argument_list|(
name|toDp
argument_list|)
expr_stmt|;
block|}
name|MergeSchedSubpart
name|rfSs
init|=
operator|new
name|MergeSchedSubpart
argument_list|()
decl_stmt|;
name|rfSs
operator|.
name|setFromSubpart
argument_list|(
name|fromSubpart
argument_list|)
expr_stmt|;
name|rfSs
operator|.
name|setToSubpart
argument_list|(
name|toSubpart
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentSubpart
operator|!=
literal|null
condition|)
block|{
name|rfSs
operator|.
name|setFromParentSubpart
argument_list|(
name|parentSubpart
operator|.
name|getFromSubpart
argument_list|()
argument_list|)
expr_stmt|;
name|parentSubpart
operator|.
name|addToFromChildSubparts
argument_list|(
name|fromSubpart
argument_list|)
expr_stmt|;
name|rfSs
operator|.
name|setToParentSubpart
argument_list|(
name|parentSubpart
operator|.
name|getToSubpart
argument_list|()
argument_list|)
expr_stmt|;
name|parentSubpart
operator|.
name|addToToChildSubparts
argument_list|(
name|toSubpart
argument_list|)
expr_stmt|;
name|toSubpart
operator|.
name|setParentSubpart
argument_list|(
name|parentSubpart
operator|.
name|getToSubpart
argument_list|()
argument_list|)
expr_stmt|;
name|parentSubpart
operator|.
name|getToSubpart
argument_list|()
operator|.
name|addTochildSubparts
argument_list|(
name|toSubpart
argument_list|)
expr_stmt|;
block|}
name|toSubpart
operator|.
name|setUniqueId
argument_list|(
name|SchedulingSubpartDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|save
argument_list|(
name|toSubpart
argument_list|)
argument_list|)
expr_stmt|;
name|InstrOfferingConfigDAO
name|iocDao
init|=
name|InstrOfferingConfigDAO
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|iocDao
operator|.
name|update
argument_list|(
name|toInstrOffrConfig
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromSubpart
operator|.
name|getClasses
argument_list|()
operator|!=
literal|null
operator|&&
name|fromSubpart
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|Class_
argument_list|>
name|classes
init|=
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|(
name|fromSubpart
operator|.
name|getClasses
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|classes
argument_list|,
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
argument_list|)
expr_stmt|;
name|Class_
name|toClass
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Class_
name|fromClass
range|:
name|classes
control|)
block|{
if|if
condition|(
name|CancelledClassAction
operator|.
name|SKIP
operator|==
name|cancelledClassAction
operator|&&
name|fromClass
operator|.
name|isCancelled
argument_list|()
condition|)
continue|continue;
name|toClass
operator|=
name|mergeClassToSession
argument_list|(
name|fromClass
argument_list|,
name|toSubpart
argument_list|,
name|isClassMerge
argument_list|,
name|isSubpartTimePrefMerge
argument_list|,
name|isSubpartLocationPrefMerge
argument_list|,
name|isClassPrefsPushUp
argument_list|,
name|distributionPrefMode
argument_list|,
name|cancelledClassAction
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
name|MergeClass
name|rfc
init|=
operator|new
name|MergeClass
argument_list|()
decl_stmt|;
name|rfc
operator|.
name|setToClass
argument_list|(
name|toClass
argument_list|)
expr_stmt|;
name|rfc
operator|.
name|setFromClass
argument_list|(
name|fromClass
argument_list|)
expr_stmt|;
name|rfc
operator|.
name|setFromParentClass
argument_list|(
name|fromClass
operator|.
name|getParentClass
argument_list|()
argument_list|)
expr_stmt|;
name|rfc
operator|.
name|setParentSubpart
argument_list|(
name|rfSs
argument_list|)
expr_stmt|;
name|rfSs
operator|.
name|addToMergeClasses
argument_list|(
name|rfc
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromClass
operator|.
name|getChildClasses
argument_list|()
operator|!=
literal|null
operator|&&
name|fromClass
operator|.
name|getChildClasses
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Class_
argument_list|>
name|ccIt
init|=
name|fromClass
operator|.
name|getChildClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|ccIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|rfc
operator|.
name|addToLastLikeChildClasses
argument_list|(
name|ccIt
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|parentSubpart
operator|!=
literal|null
condition|)
block|{
name|Class_
name|parentClass
init|=
name|parentSubpart
operator|.
name|findParentClassMatchingFromParentClass
argument_list|(
name|fromClass
operator|.
name|getParentClass
argument_list|()
argument_list|)
decl_stmt|;
name|toClass
operator|.
name|setParentClass
argument_list|(
name|parentClass
argument_list|)
expr_stmt|;
name|parentClass
operator|.
name|addTochildClasses
argument_list|(
name|toClass
argument_list|)
expr_stmt|;
block|}
name|toClass
operator|.
name|setUniqueId
argument_list|(
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|save
argument_list|(
name|toClass
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|iocDao
operator|.
name|update
argument_list|(
name|toInstrOffrConfig
argument_list|)
expr_stmt|;
name|mergeTimePrefsToSession
argument_list|(
name|fromSubpart
argument_list|,
name|toSubpart
argument_list|,
name|isClassMerge
argument_list|,
name|isSubpartTimePrefMerge
argument_list|,
name|isClassPrefsPushUp
argument_list|,
name|cancelledClassAction
argument_list|)
expr_stmt|;
name|mergeBuildingPrefs
argument_list|(
name|fromSubpart
argument_list|,
name|toSubpart
argument_list|,
name|isClassMerge
argument_list|,
name|isSubpartLocationPrefMerge
argument_list|,
name|isClassPrefsPushUp
argument_list|,
name|cancelledClassAction
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
name|mergeRoomPrefsToSession
argument_list|(
name|fromSubpart
argument_list|,
name|toSubpart
argument_list|,
name|isClassMerge
argument_list|,
name|isSubpartLocationPrefMerge
argument_list|,
name|isClassPrefsPushUp
argument_list|,
name|cancelledClassAction
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
name|mergeRoomGroupPrefsToSession
argument_list|(
name|fromSubpart
argument_list|,
name|toSubpart
argument_list|,
name|isClassMerge
argument_list|,
name|isSubpartLocationPrefMerge
argument_list|,
name|isClassPrefsPushUp
argument_list|,
name|cancelledClassAction
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
name|mergeRoomFeaturePrefsToSession
argument_list|(
name|fromSubpart
argument_list|,
name|toSubpart
argument_list|,
name|isClassMerge
argument_list|,
name|isSubpartLocationPrefMerge
argument_list|,
name|isClassPrefsPushUp
argument_list|,
name|cancelledClassAction
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
name|mergeDatePatternPrefsToSession
argument_list|(
name|fromSubpart
argument_list|,
name|toSubpart
argument_list|,
name|isClassMerge
argument_list|,
name|isClassPrefsPushUp
argument_list|,
name|cancelledClassAction
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|distributionPrefMode
operator|!=
literal|null
condition|)
name|mergeDistributionPrefsToSession
argument_list|(
name|fromSubpart
argument_list|,
name|toSubpart
argument_list|,
name|distributionPrefMode
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromSubpart
operator|.
name|getChildSubparts
argument_list|()
operator|!=
literal|null
operator|&&
name|fromSubpart
operator|.
name|getChildSubparts
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|SchedulingSubpart
argument_list|>
name|childSubparts
init|=
operator|new
name|ArrayList
argument_list|<
name|SchedulingSubpart
argument_list|>
argument_list|(
name|fromSubpart
operator|.
name|getChildSubparts
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|childSubparts
argument_list|,
operator|new
name|SchedulingSubpartComparator
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SchedulingSubpart
name|childSubpart
range|:
name|childSubparts
control|)
block|{
name|mergeSchedulingSubpartToSession
argument_list|(
name|toInstrOffrConfig
argument_list|,
name|childSubpart
argument_list|,
name|rfSs
argument_list|,
name|isClassMerge
argument_list|,
name|isSubpartTimePrefMerge
argument_list|,
name|isSubpartLocationPrefMerge
argument_list|,
name|isClassPrefsPushUp
argument_list|,
name|distributionPrefMode
argument_list|,
name|cancelledClassAction
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
block|}
block|}
name|iocDao
operator|.
name|update
argument_list|(
name|toInstrOffrConfig
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|mergeSchedSubpartsForAConfigToSession
parameter_list|(
name|InstrOfferingConfig
name|ioc
parameter_list|,
name|InstrOfferingConfig
name|newIoc
parameter_list|,
name|boolean
name|isClassMerge
parameter_list|,
name|boolean
name|isSubpartTimePrefMerge
parameter_list|,
name|boolean
name|isSubpartLocationPrefMerge
parameter_list|,
name|boolean
name|isClassPrefsPushUp
parameter_list|,
name|DistributionMode
name|distributionPrefMode
parameter_list|,
name|CancelledClassAction
name|cancelledClassAction
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|!=
literal|null
operator|&&
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|SchedulingSubpart
argument_list|>
name|subparts
init|=
operator|new
name|ArrayList
argument_list|<
name|SchedulingSubpart
argument_list|>
argument_list|(
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|subparts
argument_list|,
operator|new
name|SchedulingSubpartComparator
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SchedulingSubpart
name|ss
range|:
name|subparts
control|)
block|{
if|if
condition|(
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|==
literal|null
condition|)
block|{
name|mergeSchedulingSubpartToSession
argument_list|(
name|newIoc
argument_list|,
name|ss
argument_list|,
literal|null
argument_list|,
name|isClassMerge
argument_list|,
name|isSubpartTimePrefMerge
argument_list|,
name|isSubpartLocationPrefMerge
argument_list|,
name|isClassPrefsPushUp
argument_list|,
name|distributionPrefMode
argument_list|,
name|cancelledClassAction
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|mergeInstructionalOfferingToSession
parameter_list|(
name|InstructionalOffering
name|fromInstructionalOffering
parameter_list|,
name|Session
name|fromSession
parameter_list|,
name|boolean
name|mergeWaitListsProhibitedOverrides
parameter_list|,
name|boolean
name|isClassMerge
parameter_list|,
name|boolean
name|isSubpartTimePrefMerge
parameter_list|,
name|boolean
name|isSubpartLocationPrefMerge
parameter_list|,
name|boolean
name|isClassPrefsPushUp
parameter_list|,
name|DistributionMode
name|distributionPrefMode
parameter_list|,
name|CancelledClassAction
name|cancelledClassAction
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
name|InstructionalOfferingDAO
name|ioDao
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
decl_stmt|;
name|InstrOfferingConfigDAO
name|iocDao
init|=
operator|new
name|InstrOfferingConfigDAO
argument_list|()
decl_stmt|;
name|iLog
operator|.
name|info
argument_list|(
literal|"Merging "
operator|+
name|fromInstructionalOffering
operator|.
name|getCourseNameWithTitle
argument_list|()
argument_list|)
expr_stmt|;
name|Transaction
name|trns
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|ioDao
operator|.
name|getSession
argument_list|()
operator|.
name|getTransaction
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|ioDao
operator|.
name|getSession
argument_list|()
operator|.
name|getTransaction
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
name|trns
operator|=
name|ioDao
operator|.
name|getSession
argument_list|()
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|InstructionalOffering
argument_list|>
name|toInstructionalOfferingMap
init|=
name|findToInstructionalOffering
argument_list|(
name|fromInstructionalOffering
argument_list|,
name|defaultPrefix
argument_list|,
name|mergeWaitListsProhibitedOverrides
argument_list|)
decl_stmt|;
if|if
condition|(
name|toInstructionalOfferingMap
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|InstructionalOffering
name|toInstructionalOffering
range|:
name|toInstructionalOfferingMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|toInstructionalOffering
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|toInstructionalOffering
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|!=
literal|null
operator|&&
name|toInstructionalOffering
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|toInstructionalOffering
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|toInstructionalOffering
operator|.
name|setNotOffered
argument_list|(
name|fromInstructionalOffering
operator|.
name|isNotOffered
argument_list|()
argument_list|)
expr_stmt|;
name|toInstructionalOffering
operator|.
name|setUniqueIdRolledForwardFrom
argument_list|(
name|fromInstructionalOffering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|InstrOfferingConfig
name|fromInstrOffrConfig
init|=
literal|null
decl_stmt|;
name|InstrOfferingConfig
name|toInstrOffrConfig
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fromInstructionalOffering
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|!=
literal|null
operator|&&
name|fromInstructionalOffering
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|InstrOfferingConfig
argument_list|>
name|fromInstrOffrConfigs
init|=
operator|new
name|ArrayList
argument_list|<
name|InstrOfferingConfig
argument_list|>
argument_list|(
name|fromInstructionalOffering
operator|.
name|getInstrOfferingConfigs
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|fromInstrOffrConfigs
argument_list|,
operator|new
name|InstrOfferingConfigComparator
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|InstrOfferingConfig
argument_list|>
name|it
init|=
name|fromInstrOffrConfigs
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromInstrOffrConfig
operator|=
operator|(
name|InstrOfferingConfig
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|InstructionalOffering
name|toInstructionalOffering
init|=
name|toInstructionalOfferingMap
operator|.
name|get
argument_list|(
name|getPrefixForInstrOfferingConfig
argument_list|(
name|fromInstrOffrConfig
argument_list|,
name|defaultPrefix
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|toInstructionalOffering
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|toInstrOffrConfig
operator|=
operator|new
name|InstrOfferingConfig
argument_list|()
expr_stmt|;
name|toInstrOffrConfig
operator|.
name|setLimit
argument_list|(
name|fromInstrOffrConfig
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|toInstrOffrConfig
operator|.
name|setInstructionalOffering
argument_list|(
name|toInstructionalOffering
argument_list|)
expr_stmt|;
name|toInstrOffrConfig
operator|.
name|setName
argument_list|(
name|fromInstrOffrConfig
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|toInstrOffrConfig
operator|.
name|setUnlimitedEnrollment
argument_list|(
name|fromInstrOffrConfig
operator|.
name|isUnlimitedEnrollment
argument_list|()
argument_list|)
expr_stmt|;
name|toInstrOffrConfig
operator|.
name|setUniqueIdRolledForwardFrom
argument_list|(
name|fromInstrOffrConfig
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|toInstrOffrConfig
operator|.
name|setClassDurationType
argument_list|(
name|fromInstrOffrConfig
operator|.
name|getClassDurationType
argument_list|()
argument_list|)
expr_stmt|;
name|toInstrOffrConfig
operator|.
name|setInstructionalMethod
argument_list|(
name|fromInstrOffrConfig
operator|.
name|getInstructionalMethod
argument_list|()
argument_list|)
expr_stmt|;
name|toInstructionalOffering
operator|.
name|addToinstrOfferingConfigs
argument_list|(
name|toInstrOffrConfig
argument_list|)
expr_stmt|;
name|toInstrOffrConfig
operator|.
name|setUniqueId
argument_list|(
name|iocDao
operator|.
name|save
argument_list|(
name|toInstrOffrConfig
argument_list|)
argument_list|)
expr_stmt|;
name|ioDao
operator|.
name|update
argument_list|(
name|toInstructionalOffering
argument_list|)
expr_stmt|;
name|mergeSchedSubpartsForAConfigToSession
argument_list|(
name|fromInstrOffrConfig
argument_list|,
name|toInstrOffrConfig
argument_list|,
name|isClassMerge
argument_list|,
name|isSubpartTimePrefMerge
argument_list|,
name|isSubpartLocationPrefMerge
argument_list|,
name|isClassPrefsPushUp
argument_list|,
name|distributionPrefMode
argument_list|,
name|cancelledClassAction
argument_list|,
name|defaultPrefix
argument_list|)
expr_stmt|;
name|ioDao
operator|.
name|update
argument_list|(
name|toInstructionalOffering
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|trns
operator|!=
literal|null
operator|&&
name|trns
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|trns
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
name|ioDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
for|for
control|(
name|InstructionalOffering
name|toInstructionalOffering
range|:
name|toInstructionalOfferingMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|toInstructionalOffering
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|ioDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|toInstructionalOffering
argument_list|)
expr_stmt|;
block|}
name|ioDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|fromInstructionalOffering
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iLog
operator|.
name|error
argument_list|(
literal|"Failed to merge "
operator|+
name|fromInstructionalOffering
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|trns
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|trns
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|trns
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|mergeInstructionalOfferingsForASubjectAreaToSession
parameter_list|(
name|SubjectArea
name|subjectArea
parameter_list|,
name|Session
name|fromSession
parameter_list|,
name|boolean
name|mergeWaitListsProhibitedOverrides
parameter_list|,
name|boolean
name|isClassMerge
parameter_list|,
name|boolean
name|isSubpartTimePrefMerge
parameter_list|,
name|boolean
name|isSubpartLocationPrefMerge
parameter_list|,
name|boolean
name|isClassPrefsPushUp
parameter_list|,
name|DistributionMode
name|distributionPrefMode
parameter_list|,
name|CancelledClassAction
name|cancelledClassAction
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|CourseOfferingDAO
name|coDao
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
decl_stmt|;
name|String
name|query
init|=
literal|"from CourseOffering as co where co.subjectArea.subjectAreaAbbreviation = '"
operator|+
name|subjectArea
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|"' and co.isControl = true"
operator|+
literal|" and co.subjectArea.session.uniqueId = "
operator|+
name|fromSession
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
name|List
name|l
init|=
name|coDao
operator|.
name|getQuery
argument_list|(
name|query
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
block|{
name|CourseOffering
name|co
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|l
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|co
operator|=
operator|(
name|CourseOffering
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|mergeInstructionalOfferingToSession
argument_list|(
name|co
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|,
name|fromSession
argument_list|,
name|mergeWaitListsProhibitedOverrides
argument_list|,
name|isClassMerge
argument_list|,
name|isSubpartTimePrefMerge
argument_list|,
name|isSubpartLocationPrefMerge
argument_list|,
name|isClassPrefsPushUp
argument_list|,
name|distributionPrefMode
argument_list|,
name|cancelledClassAction
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|coDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|copyMergeCourseOfferingsToSession
parameter_list|(
name|Session
name|fromSession
parameter_list|,
name|String
name|classPrefsAction
parameter_list|,
name|String
name|subpartLocationPrefsAction
parameter_list|,
name|String
name|subpartTimePrefsAction
parameter_list|,
name|boolean
name|mergeWaitListsProhibitedOverrides
parameter_list|,
name|DistributionMode
name|distributionPrefMode
parameter_list|,
name|CancelledClassAction
name|cancelledClassAction
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|boolean
name|isClassMerge
init|=
operator|(
name|classPrefsAction
operator|!=
literal|null
operator|&&
name|classPrefsAction
operator|.
name|equalsIgnoreCase
argument_list|(
name|SessionRollForward
operator|.
name|ROLL_PREFS_ACTION
argument_list|)
condition|?
literal|true
else|:
literal|false
operator|)
decl_stmt|;
name|boolean
name|isClassPrefsPushUp
init|=
operator|(
name|classPrefsAction
operator|!=
literal|null
operator|&&
name|classPrefsAction
operator|.
name|equalsIgnoreCase
argument_list|(
name|SessionRollForward
operator|.
name|PUSH_UP_ACTION
argument_list|)
condition|?
literal|true
else|:
literal|false
operator|)
decl_stmt|;
name|boolean
name|isSubpartTimePrefMerge
init|=
operator|(
name|subpartTimePrefsAction
operator|!=
literal|null
operator|&&
name|subpartTimePrefsAction
operator|.
name|equalsIgnoreCase
argument_list|(
name|SessionRollForward
operator|.
name|DO_NOT_ROLL_ACTION
argument_list|)
condition|?
literal|false
else|:
literal|true
operator|)
decl_stmt|;
name|boolean
name|isSubpartLocationPrefMerge
init|=
operator|(
name|subpartLocationPrefsAction
operator|!=
literal|null
operator|&&
name|subpartLocationPrefsAction
operator|.
name|equalsIgnoreCase
argument_list|(
name|SessionRollForward
operator|.
name|DO_NOT_ROLL_ACTION
argument_list|)
condition|?
literal|false
else|:
literal|true
operator|)
decl_stmt|;
if|if
condition|(
name|iMergedSession
operator|.
name|getSubjectAreas
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|SubjectArea
argument_list|>
name|fromSubjectAreas
init|=
name|SubjectAreaDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findBySession
argument_list|(
name|SubjectAreaDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|,
name|fromSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SubjectArea
name|subjectArea
range|:
name|fromSubjectAreas
control|)
block|{
name|mergeInstructionalOfferingsForASubjectAreaToSession
argument_list|(
name|subjectArea
argument_list|,
name|fromSession
argument_list|,
name|mergeWaitListsProhibitedOverrides
argument_list|,
name|isClassMerge
argument_list|,
name|isSubpartTimePrefMerge
argument_list|,
name|isSubpartLocationPrefMerge
argument_list|,
name|isClassPrefsPushUp
argument_list|,
name|distributionPrefMode
argument_list|,
name|cancelledClassAction
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|copyMergeClassInstructorsToSession
parameter_list|(
name|Session
name|fromSession
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|SubjectAreaDAO
name|sDao
init|=
name|SubjectAreaDAO
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SubjectArea
argument_list|>
name|subjects
init|=
name|sDao
operator|.
name|findBySession
argument_list|(
name|sDao
operator|.
name|getSession
argument_list|()
argument_list|,
name|fromSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|refresh
argument_list|(
name|iMergedSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|iMergedSession
operator|.
name|getSubjectAreas
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SubjectArea
name|subjectArea
range|:
name|subjects
control|)
block|{
name|copyMergeClassInstructorsForASubjectArea
argument_list|(
name|subjectArea
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|copyMergeClassInstructorsForASubjectArea
parameter_list|(
name|String
name|subjectAreaAbbreviation
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
name|iLog
operator|.
name|info
argument_list|(
literal|"Rolling forward class instructors for:  "
operator|+
name|subjectAreaAbbreviation
argument_list|)
expr_stmt|;
name|Class_DAO
name|clsDao
init|=
operator|new
name|Class_DAO
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|clsDao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Class_
argument_list|>
name|classes
init|=
name|Class_
operator|.
name|findAllForControllingSubjectArea
argument_list|(
name|subjectAreaAbbreviation
argument_list|,
name|iMergedSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|classes
operator|!=
literal|null
operator|&&
operator|!
name|classes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Class_
name|toClass
init|=
literal|null
decl_stmt|;
name|Class_
name|fromClass
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Class_
argument_list|>
name|cIt
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|cIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|toClass
operator|=
operator|(
name|Class_
operator|)
name|cIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|toClass
operator|.
name|getUniqueIdRolledForwardFrom
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|fromClass
operator|=
name|clsDao
operator|.
name|get
argument_list|(
name|toClass
operator|.
name|getUniqueIdRolledForwardFrom
argument_list|()
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromClass
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fromClass
operator|.
name|getClassInstructors
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromClass
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ClassInstructor
name|fromClassInstr
init|=
literal|null
decl_stmt|;
name|ClassInstructor
name|toClassInstr
init|=
literal|null
decl_stmt|;
name|DepartmentalInstructor
name|toDeptInstr
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ClassInstructor
argument_list|>
name|ciIt
init|=
name|fromClass
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|ciIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromClassInstr
operator|=
operator|(
name|ClassInstructor
operator|)
name|ciIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromClassInstr
operator|.
name|getTeachingRequest
argument_list|()
operator|!=
literal|null
condition|)
continue|continue;
name|toDeptInstr
operator|=
name|DepartmentalInstructor
operator|.
name|findByPuidDepartmentId
argument_list|(
name|fromClassInstr
operator|.
name|getInstructor
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|toClass
operator|.
name|getControllingDept
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDeptInstr
operator|!=
literal|null
condition|)
block|{
name|toClassInstr
operator|=
operator|new
name|ClassInstructor
argument_list|()
expr_stmt|;
name|toClassInstr
operator|.
name|setClassInstructing
argument_list|(
name|toClass
argument_list|)
expr_stmt|;
name|toClassInstr
operator|.
name|setInstructor
argument_list|(
name|toDeptInstr
argument_list|)
expr_stmt|;
name|toClassInstr
operator|.
name|setLead
argument_list|(
name|fromClassInstr
operator|.
name|isLead
argument_list|()
argument_list|)
expr_stmt|;
name|toClassInstr
operator|.
name|setPercentShare
argument_list|(
name|fromClassInstr
operator|.
name|getPercentShare
argument_list|()
argument_list|)
expr_stmt|;
name|toClassInstr
operator|.
name|setResponsibility
argument_list|(
name|fromClassInstr
operator|.
name|getResponsibility
argument_list|()
argument_list|)
expr_stmt|;
name|toClassInstr
operator|.
name|setUniqueId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|toClass
operator|.
name|addToclassInstructors
argument_list|(
name|toClassInstr
argument_list|)
expr_stmt|;
name|toDeptInstr
operator|.
name|addToclasses
argument_list|(
name|toClassInstr
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|evict
argument_list|(
name|fromClassInstr
argument_list|)
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|evict
argument_list|(
name|fromClass
argument_list|)
expr_stmt|;
name|Transaction
name|t
init|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|toClass
argument_list|)
expr_stmt|;
name|t
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|hibSession
operator|.
name|evict
argument_list|(
name|fromClass
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|hibSession
operator|.
name|evict
argument_list|(
name|toClass
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

