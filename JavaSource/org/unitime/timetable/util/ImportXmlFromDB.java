begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|CallableStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|SAXReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|engine
operator|.
name|SessionFactoryImplementor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|dataexchange
operator|.
name|DataExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_comment
comment|/**  * @author says  *  */
end_comment

begin_class
specifier|public
class|class
name|ImportXmlFromDB
block|{
specifier|public
specifier|static
name|void
name|importXml
parameter_list|(
name|String
name|baseFileName
parameter_list|)
block|{
name|Debug
operator|.
name|info
argument_list|(
literal|"filename = "
operator|+
name|baseFileName
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|fileReceiveSql
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.data.exchange.receive.file"
argument_list|,
literal|"{?= call timetable.receive_xml_file.receive_file(?, ?)}"
argument_list|)
decl_stmt|;
name|String
name|exchangeDir
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.data.exchange.directory"
argument_list|,
literal|"LOAD_SMASDEV"
argument_list|)
decl_stmt|;
name|SessionFactoryImplementor
name|hibSessionFactory
init|=
operator|(
name|SessionFactoryImplementor
operator|)
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getSessionFactory
argument_list|()
decl_stmt|;
name|Connection
name|connection
init|=
name|hibSessionFactory
operator|.
name|getConnectionProvider
argument_list|()
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|CallableStatement
name|call
init|=
name|connection
operator|.
name|prepareCall
argument_list|(
name|fileReceiveSql
argument_list|)
decl_stmt|;
name|call
operator|.
name|registerOutParameter
argument_list|(
literal|1
argument_list|,
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|CLOB
argument_list|)
expr_stmt|;
name|call
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|exchangeDir
argument_list|)
expr_stmt|;
name|call
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|baseFileName
argument_list|)
expr_stmt|;
name|call
operator|.
name|execute
argument_list|()
expr_stmt|;
name|String
name|response
init|=
name|call
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|call
operator|.
name|close
argument_list|()
expr_stmt|;
name|hibSessionFactory
operator|.
name|getConnectionProvider
argument_list|()
operator|.
name|closeConnection
argument_list|(
name|connection
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|==
literal|null
operator|||
name|response
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|StringReader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|Document
name|document
init|=
operator|(
operator|new
name|SAXReader
argument_list|()
operator|)
operator|.
name|read
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|DataExchangeHelper
operator|.
name|importDocument
argument_list|(
name|document
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** 	 * @param args 	 */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|ToolBox
operator|.
name|configureLogging
argument_list|()
expr_stmt|;
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|(
operator|new
name|Exception
argument_list|(
literal|"Please specify a base file name to which '.xml' and '.ready' can be appended."
argument_list|)
operator|)
throw|;
block|}
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"connection.url"
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|HibernateUtil
operator|.
name|configureHibernate
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|importXml
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

