begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|FontFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|BaseFont
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|PdfFont
block|{
specifier|private
specifier|static
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Font
argument_list|>
name|sFontCache
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Font
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Font
name|getFont
parameter_list|(
name|float
name|size
parameter_list|,
name|boolean
name|fixed
parameter_list|,
name|boolean
name|bold
parameter_list|,
name|boolean
name|italic
parameter_list|)
block|{
if|if
condition|(
name|ApplicationProperty
operator|.
name|PdfFontCache
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|Font
name|font
init|=
name|sFontCache
operator|.
name|get
argument_list|(
name|size
operator|+
operator|(
name|fixed
condition|?
literal|"F"
else|:
literal|""
operator|)
operator|+
operator|(
name|bold
condition|?
literal|"B"
else|:
literal|""
operator|)
operator|+
operator|(
name|italic
condition|?
literal|"I"
else|:
literal|""
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|font
operator|==
literal|null
condition|)
block|{
name|font
operator|=
name|createFont
argument_list|(
name|size
argument_list|,
name|fixed
argument_list|,
name|bold
argument_list|,
name|italic
argument_list|)
expr_stmt|;
name|sFontCache
operator|.
name|put
argument_list|(
name|size
operator|+
operator|(
name|fixed
condition|?
literal|"F"
else|:
literal|""
operator|)
operator|+
operator|(
name|bold
condition|?
literal|"B"
else|:
literal|""
operator|)
operator|+
operator|(
name|italic
condition|?
literal|"I"
else|:
literal|""
operator|)
argument_list|,
name|font
argument_list|)
expr_stmt|;
block|}
return|return
name|font
return|;
block|}
else|else
block|{
return|return
name|createFont
argument_list|(
name|size
argument_list|,
name|fixed
argument_list|,
name|bold
argument_list|,
name|italic
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|Font
name|createFont
parameter_list|(
name|float
name|size
parameter_list|,
name|boolean
name|fixed
parameter_list|,
name|boolean
name|bold
parameter_list|,
name|boolean
name|italic
parameter_list|)
block|{
name|String
name|font
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fixed
condition|)
name|font
operator|=
name|ApplicationProperty
operator|.
name|PdfFontFixed
operator|.
name|value
argument_list|()
expr_stmt|;
if|else if
condition|(
name|bold
condition|)
block|{
if|if
condition|(
name|italic
condition|)
name|font
operator|=
name|ApplicationProperty
operator|.
name|PdfFontBoldItalic
operator|.
name|value
argument_list|()
expr_stmt|;
else|else
name|font
operator|=
name|ApplicationProperty
operator|.
name|PdfFontBold
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|italic
condition|)
name|font
operator|=
name|ApplicationProperty
operator|.
name|PdfFontItalic
operator|.
name|value
argument_list|()
expr_stmt|;
else|else
name|font
operator|=
name|ApplicationProperty
operator|.
name|PdfFontNormal
operator|.
name|value
argument_list|()
expr_stmt|;
if|if
condition|(
name|font
operator|!=
literal|null
operator|&&
operator|!
name|font
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|BaseFont
name|base
init|=
name|BaseFont
operator|.
name|createFont
argument_list|(
name|font
argument_list|,
name|BaseFont
operator|.
name|IDENTITY_H
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|!=
literal|null
condition|)
return|return
operator|new
name|Font
argument_list|(
name|base
argument_list|,
name|size
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
block|}
block|}
name|font
operator|=
operator|(
name|fixed
condition|?
name|ApplicationProperty
operator|.
name|PdfFontFixed
operator|.
name|value
argument_list|()
else|:
name|ApplicationProperty
operator|.
name|PdfFontNormal
operator|.
name|value
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|font
operator|!=
literal|null
operator|&&
operator|!
name|font
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|BaseFont
name|base
init|=
name|BaseFont
operator|.
name|createFont
argument_list|(
name|font
argument_list|,
name|BaseFont
operator|.
name|IDENTITY_H
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|!=
literal|null
condition|)
return|return
operator|new
name|Font
argument_list|(
name|base
argument_list|,
name|size
argument_list|,
name|italic
operator|&&
name|bold
condition|?
name|Font
operator|.
name|BOLDITALIC
else|:
name|italic
condition|?
name|Font
operator|.
name|ITALIC
else|:
name|bold
condition|?
name|Font
operator|.
name|BOLD
else|:
name|Font
operator|.
name|NORMAL
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|fixed
condition|)
return|return
name|FontFactory
operator|.
name|getFont
argument_list|(
name|bold
condition|?
name|italic
condition|?
name|FontFactory
operator|.
name|COURIER_BOLDOBLIQUE
else|:
name|FontFactory
operator|.
name|COURIER_BOLD
else|:
name|italic
condition|?
name|FontFactory
operator|.
name|COURIER_OBLIQUE
else|:
name|FontFactory
operator|.
name|COURIER
argument_list|,
name|size
argument_list|)
return|;
else|else
return|return
name|FontFactory
operator|.
name|getFont
argument_list|(
name|bold
condition|?
name|italic
condition|?
name|FontFactory
operator|.
name|HELVETICA_BOLDOBLIQUE
else|:
name|FontFactory
operator|.
name|HELVETICA_BOLD
else|:
name|italic
condition|?
name|FontFactory
operator|.
name|HELVETICA_OBLIQUE
else|:
name|FontFactory
operator|.
name|HELVETICA
argument_list|,
name|size
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Font
name|getBigFont
parameter_list|(
name|boolean
name|bold
parameter_list|,
name|boolean
name|italic
parameter_list|)
block|{
return|return
name|getFont
argument_list|(
name|ApplicationProperty
operator|.
name|PdfFontSizeBig
operator|.
name|floatValue
argument_list|()
argument_list|,
literal|false
argument_list|,
name|bold
argument_list|,
name|italic
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Font
name|getBigFont
parameter_list|(
name|boolean
name|bold
parameter_list|)
block|{
return|return
name|getBigFont
argument_list|(
name|bold
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Font
name|getBigFont
parameter_list|()
block|{
return|return
name|getBigFont
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Font
name|getFont
parameter_list|(
name|boolean
name|bold
parameter_list|,
name|boolean
name|italic
parameter_list|)
block|{
return|return
name|getFont
argument_list|(
name|ApplicationProperty
operator|.
name|PdfFontSizeNormal
operator|.
name|floatValue
argument_list|()
argument_list|,
literal|false
argument_list|,
name|bold
argument_list|,
name|italic
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Font
name|getFont
parameter_list|(
name|boolean
name|bold
parameter_list|)
block|{
return|return
name|getFont
argument_list|(
name|bold
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Font
name|getFont
parameter_list|()
block|{
return|return
name|getFont
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Font
name|getFont
parameter_list|(
name|boolean
name|bold
parameter_list|,
name|boolean
name|italic
parameter_list|,
name|boolean
name|underline
parameter_list|,
name|Color
name|color
parameter_list|)
block|{
name|Font
name|font
init|=
name|getFont
argument_list|(
name|bold
argument_list|,
name|italic
argument_list|)
decl_stmt|;
if|if
condition|(
name|underline
condition|)
name|font
operator|.
name|setStyle
argument_list|(
name|font
operator|.
name|getStyle
argument_list|()
operator|+
name|Font
operator|.
name|UNDERLINE
argument_list|)
expr_stmt|;
if|if
condition|(
name|color
operator|!=
literal|null
condition|)
name|font
operator|.
name|setColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
return|return
name|font
return|;
block|}
specifier|public
specifier|static
name|Font
name|getFont
parameter_list|(
name|boolean
name|bold
parameter_list|,
name|boolean
name|italic
parameter_list|,
name|Color
name|color
parameter_list|)
block|{
return|return
name|getFont
argument_list|(
name|bold
argument_list|,
name|italic
argument_list|,
literal|false
argument_list|,
name|color
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Font
name|getSmallFont
parameter_list|(
name|boolean
name|bold
parameter_list|,
name|boolean
name|italic
parameter_list|)
block|{
return|return
name|getFont
argument_list|(
name|ApplicationProperty
operator|.
name|PdfFontSizeSmall
operator|.
name|floatValue
argument_list|()
argument_list|,
literal|false
argument_list|,
name|bold
argument_list|,
name|italic
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Font
name|getSmallFont
parameter_list|(
name|boolean
name|bold
parameter_list|)
block|{
return|return
name|getSmallFont
argument_list|(
name|bold
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Font
name|getSmallFont
parameter_list|()
block|{
return|return
name|getSmallFont
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Font
name|getSmallFont
parameter_list|(
name|boolean
name|bold
parameter_list|,
name|boolean
name|italic
parameter_list|,
name|boolean
name|underline
parameter_list|,
name|Color
name|color
parameter_list|)
block|{
name|Font
name|font
init|=
name|getSmallFont
argument_list|(
name|bold
argument_list|,
name|italic
argument_list|)
decl_stmt|;
if|if
condition|(
name|underline
condition|)
name|font
operator|.
name|setStyle
argument_list|(
name|font
operator|.
name|getStyle
argument_list|()
operator|+
name|Font
operator|.
name|UNDERLINE
argument_list|)
expr_stmt|;
if|if
condition|(
name|color
operator|!=
literal|null
condition|)
name|font
operator|.
name|setColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
return|return
name|font
return|;
block|}
specifier|public
specifier|static
name|Font
name|getSmallFont
parameter_list|(
name|boolean
name|bold
parameter_list|,
name|boolean
name|italic
parameter_list|,
name|Color
name|color
parameter_list|)
block|{
return|return
name|getSmallFont
argument_list|(
name|bold
argument_list|,
name|italic
argument_list|,
literal|false
argument_list|,
name|color
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Font
name|getFixedFont
parameter_list|()
block|{
return|return
name|getFont
argument_list|(
name|ApplicationProperty
operator|.
name|PdfFontSizeFixed
operator|.
name|floatValue
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
end_class

end_unit

