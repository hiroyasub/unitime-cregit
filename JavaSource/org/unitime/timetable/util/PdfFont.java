begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.3 (University Timetabling Application)  * Copyright (C) 2011, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|FontFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|BaseFont
import|;
end_import

begin_class
specifier|public
class|class
name|PdfFont
block|{
specifier|private
specifier|static
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Font
argument_list|>
name|sFontCache
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Font
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Font
name|getFont
parameter_list|(
name|float
name|size
parameter_list|,
name|boolean
name|fixed
parameter_list|,
name|boolean
name|bold
parameter_list|,
name|boolean
name|italic
parameter_list|)
block|{
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.pdf.fontcache"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
block|{
name|Font
name|font
init|=
name|sFontCache
operator|.
name|get
argument_list|(
name|size
operator|+
operator|(
name|fixed
condition|?
literal|"F"
else|:
literal|""
operator|)
operator|+
operator|(
name|bold
condition|?
literal|"B"
else|:
literal|""
operator|)
operator|+
operator|(
name|italic
condition|?
literal|"I"
else|:
literal|""
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|font
operator|==
literal|null
condition|)
block|{
name|font
operator|=
name|createFont
argument_list|(
name|size
argument_list|,
name|fixed
argument_list|,
name|bold
argument_list|,
name|italic
argument_list|)
expr_stmt|;
name|sFontCache
operator|.
name|put
argument_list|(
name|size
operator|+
operator|(
name|fixed
condition|?
literal|"F"
else|:
literal|""
operator|)
operator|+
operator|(
name|bold
condition|?
literal|"B"
else|:
literal|""
operator|)
operator|+
operator|(
name|italic
condition|?
literal|"I"
else|:
literal|""
operator|)
argument_list|,
name|font
argument_list|)
expr_stmt|;
block|}
return|return
name|font
return|;
block|}
else|else
block|{
return|return
name|createFont
argument_list|(
name|size
argument_list|,
name|fixed
argument_list|,
name|bold
argument_list|,
name|italic
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|Font
name|createFont
parameter_list|(
name|float
name|size
parameter_list|,
name|boolean
name|fixed
parameter_list|,
name|boolean
name|bold
parameter_list|,
name|boolean
name|italic
parameter_list|)
block|{
name|String
name|font
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.pdf.font"
operator|+
operator|(
name|fixed
condition|?
literal|".fixed"
else|:
literal|""
operator|)
operator|+
operator|(
name|bold
condition|?
name|italic
condition|?
literal|".bolditalic"
else|:
literal|".bold"
else|:
name|italic
condition|?
literal|".italic"
else|:
literal|""
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|font
operator|!=
literal|null
operator|&&
operator|!
name|font
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|BaseFont
name|base
init|=
name|BaseFont
operator|.
name|createFont
argument_list|(
name|font
argument_list|,
name|BaseFont
operator|.
name|IDENTITY_H
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|!=
literal|null
condition|)
return|return
operator|new
name|Font
argument_list|(
name|base
argument_list|,
name|size
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
block|}
block|}
name|font
operator|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.pdf.font"
operator|+
operator|(
name|fixed
condition|?
literal|".fixed"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|font
operator|!=
literal|null
operator|&&
operator|!
name|font
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|BaseFont
name|base
init|=
name|BaseFont
operator|.
name|createFont
argument_list|(
name|font
argument_list|,
name|BaseFont
operator|.
name|IDENTITY_H
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|!=
literal|null
condition|)
return|return
operator|new
name|Font
argument_list|(
name|base
argument_list|,
name|size
argument_list|,
name|italic
operator|&&
name|bold
condition|?
name|Font
operator|.
name|BOLDITALIC
else|:
name|italic
condition|?
name|Font
operator|.
name|ITALIC
else|:
name|bold
condition|?
name|Font
operator|.
name|BOLD
else|:
name|Font
operator|.
name|NORMAL
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|fixed
condition|)
return|return
name|FontFactory
operator|.
name|getFont
argument_list|(
name|bold
condition|?
name|italic
condition|?
name|FontFactory
operator|.
name|COURIER_BOLDOBLIQUE
else|:
name|FontFactory
operator|.
name|COURIER_BOLD
else|:
name|italic
condition|?
name|FontFactory
operator|.
name|COURIER_OBLIQUE
else|:
name|FontFactory
operator|.
name|COURIER
argument_list|,
name|size
argument_list|)
return|;
else|else
return|return
name|FontFactory
operator|.
name|getFont
argument_list|(
name|bold
condition|?
name|italic
condition|?
name|FontFactory
operator|.
name|HELVETICA_BOLDOBLIQUE
else|:
name|FontFactory
operator|.
name|HELVETICA_BOLD
else|:
name|italic
condition|?
name|FontFactory
operator|.
name|HELVETICA_OBLIQUE
else|:
name|FontFactory
operator|.
name|HELVETICA
argument_list|,
name|size
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Font
name|getBigFont
parameter_list|(
name|boolean
name|bold
parameter_list|,
name|boolean
name|italic
parameter_list|)
block|{
return|return
name|getFont
argument_list|(
name|Float
operator|.
name|parseFloat
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.pdf.fontsize.big"
argument_list|,
literal|"16"
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|,
name|bold
argument_list|,
name|italic
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Font
name|getBigFont
parameter_list|(
name|boolean
name|bold
parameter_list|)
block|{
return|return
name|getBigFont
argument_list|(
name|bold
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Font
name|getBigFont
parameter_list|()
block|{
return|return
name|getBigFont
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Font
name|getFont
parameter_list|(
name|boolean
name|bold
parameter_list|,
name|boolean
name|italic
parameter_list|)
block|{
return|return
name|getFont
argument_list|(
name|Float
operator|.
name|parseFloat
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.pdf.fontsize.normal"
argument_list|,
literal|"12"
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|,
name|bold
argument_list|,
name|italic
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Font
name|getFont
parameter_list|(
name|boolean
name|bold
parameter_list|)
block|{
return|return
name|getFont
argument_list|(
name|bold
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Font
name|getFont
parameter_list|()
block|{
return|return
name|getFont
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Font
name|getFont
parameter_list|(
name|boolean
name|bold
parameter_list|,
name|boolean
name|italic
parameter_list|,
name|boolean
name|underline
parameter_list|,
name|Color
name|color
parameter_list|)
block|{
name|Font
name|font
init|=
name|getFont
argument_list|(
name|bold
argument_list|,
name|italic
argument_list|)
decl_stmt|;
if|if
condition|(
name|underline
condition|)
name|font
operator|.
name|setStyle
argument_list|(
name|font
operator|.
name|getStyle
argument_list|()
operator|+
name|Font
operator|.
name|UNDERLINE
argument_list|)
expr_stmt|;
if|if
condition|(
name|color
operator|!=
literal|null
condition|)
name|font
operator|.
name|setColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
return|return
name|font
return|;
block|}
specifier|public
specifier|static
name|Font
name|getFont
parameter_list|(
name|boolean
name|bold
parameter_list|,
name|boolean
name|italic
parameter_list|,
name|Color
name|color
parameter_list|)
block|{
return|return
name|getFont
argument_list|(
name|bold
argument_list|,
name|italic
argument_list|,
literal|false
argument_list|,
name|color
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Font
name|getSmallFont
parameter_list|(
name|boolean
name|bold
parameter_list|,
name|boolean
name|italic
parameter_list|)
block|{
return|return
name|getFont
argument_list|(
name|Float
operator|.
name|parseFloat
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.pdf.fontsize.small"
argument_list|,
literal|"9"
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|,
name|bold
argument_list|,
name|italic
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Font
name|getSmallFont
parameter_list|(
name|boolean
name|bold
parameter_list|)
block|{
return|return
name|getSmallFont
argument_list|(
name|bold
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Font
name|getSmallFont
parameter_list|()
block|{
return|return
name|getSmallFont
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Font
name|getSmallFont
parameter_list|(
name|boolean
name|bold
parameter_list|,
name|boolean
name|italic
parameter_list|,
name|boolean
name|underline
parameter_list|,
name|Color
name|color
parameter_list|)
block|{
name|Font
name|font
init|=
name|getSmallFont
argument_list|(
name|bold
argument_list|,
name|italic
argument_list|)
decl_stmt|;
if|if
condition|(
name|underline
condition|)
name|font
operator|.
name|setStyle
argument_list|(
name|font
operator|.
name|getStyle
argument_list|()
operator|+
name|Font
operator|.
name|UNDERLINE
argument_list|)
expr_stmt|;
if|if
condition|(
name|color
operator|!=
literal|null
condition|)
name|font
operator|.
name|setColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
return|return
name|font
return|;
block|}
specifier|public
specifier|static
name|Font
name|getSmallFont
parameter_list|(
name|boolean
name|bold
parameter_list|,
name|boolean
name|italic
parameter_list|,
name|Color
name|color
parameter_list|)
block|{
return|return
name|getSmallFont
argument_list|(
name|bold
argument_list|,
name|italic
argument_list|,
literal|false
argument_list|,
name|color
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Font
name|getFixedFont
parameter_list|()
block|{
return|return
name|getFont
argument_list|(
name|Float
operator|.
name|parseFloat
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.pdf.fontsize.fixed"
argument_list|,
literal|"9"
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
end_class

end_unit

