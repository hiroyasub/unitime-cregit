begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|HibernateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|dialect
operator|.
name|Dialect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|id
operator|.
name|IdentifierGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|id
operator|.
name|PersistentIdentifierGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|id
operator|.
name|SequenceGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|IntegerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|id
operator|.
name|UniqueIdGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_comment
comment|/**  *   * @author Tomas Muller  *  */
end_comment

begin_class
specifier|public
class|class
name|InstrOfferingPermIdGenerator
block|{
specifier|private
specifier|static
name|IdentifierGenerator
name|sGenerator
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|static
name|String
name|sSequence
init|=
literal|"instr_offr_permid_seq"
decl_stmt|;
specifier|public
specifier|static
name|IdentifierGenerator
name|getGenerator
parameter_list|()
throws|throws
name|HibernateException
block|{
try|try
block|{
if|if
condition|(
name|sGenerator
operator|!=
literal|null
condition|)
return|return
name|sGenerator
return|;
name|UniqueIdGenerator
name|idGen
init|=
operator|new
name|UniqueIdGenerator
argument_list|()
decl_stmt|;
name|Dialect
name|dialect
init|=
operator|(
name|Dialect
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|InstructionalOfferingDAO
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"hibernate.dialect"
argument_list|)
argument_list|)
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{}
argument_list|)
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{}
argument_list|)
decl_stmt|;
name|Type
name|type
init|=
operator|new
name|IntegerType
argument_list|()
decl_stmt|;
name|Properties
name|params
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|SequenceGenerator
operator|.
name|SEQUENCE
argument_list|,
name|sSequence
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|PersistentIdentifierGenerator
operator|.
name|SCHEMA
argument_list|,
name|_RootDAO
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"default_schema"
argument_list|)
argument_list|)
expr_stmt|;
name|idGen
operator|.
name|configure
argument_list|(
name|type
argument_list|,
name|params
argument_list|,
name|dialect
argument_list|)
expr_stmt|;
name|sGenerator
operator|=
name|idGen
expr_stmt|;
return|return
name|sGenerator
return|;
block|}
catch|catch
parameter_list|(
name|HibernateException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HibernateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

