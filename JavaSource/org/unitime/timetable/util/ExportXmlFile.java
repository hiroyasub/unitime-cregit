begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.5 (University Timetabling Application)  * Copyright (C) 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|XMLWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|dataexchange
operator|.
name|DataExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_comment
comment|/**  * Usage:  *<code>  * 		java -Xmx2g -Dtmtbl.custom.properties=~/Tomcat/conf/unitime.properties -cp timetable.jar \  * 		     org.unitime.timetable.util.ExportXmlFile session type output.xml  *</code>  * Where tmtbl.custom.properties points to UniTime custom properties (if there are any), session is the name of   * the academic session (term + year + initiative, e.g., Fall2013PWL), type is the root element of the export  * (e.g., offerings), and output.xml is the output file.  *  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ExportXmlFile
block|{
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
comment|// Configure logging
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|BasicConfigurator
operator|.
name|configure
argument_list|()
expr_stmt|;
comment|// Configure hibernate
name|HibernateUtil
operator|.
name|configureHibernate
argument_list|(
name|ApplicationProperties
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
comment|// Load academic session
name|Session
name|session
init|=
operator|(
name|Session
operator|)
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from Session s where s.academicTerm || s.academicYear || s.academicInitiative = :session"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"session"
argument_list|,
name|args
index|[
literal|0
index|]
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Session "
operator|+
name|args
index|[
literal|0
index|]
operator|+
literal|" not found."
argument_list|)
throw|;
comment|// Log writer to print messages from the export (can be null)
name|DataExchangeHelper
operator|.
name|LogWriter
name|logger
init|=
operator|new
name|DataExchangeHelper
operator|.
name|LogWriter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|println
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|Logger
operator|.
name|getLogger
argument_list|(
name|ImportXmlFile
operator|.
name|class
argument_list|)
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|// Export an XML file
name|Document
name|document
init|=
name|DataExchangeHelper
operator|.
name|exportDocument
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|,
name|session
argument_list|,
name|ApplicationProperties
operator|.
name|getProperties
argument_list|()
argument_list|,
name|logger
argument_list|)
decl_stmt|;
if|if
condition|(
name|document
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No XML document has been created."
argument_list|)
throw|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|args
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
try|try
block|{
operator|(
operator|new
name|XMLWriter
argument_list|(
name|fos
argument_list|,
name|OutputFormat
operator|.
name|createPrettyPrint
argument_list|()
argument_list|)
operator|)
operator|.
name|write
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|fos
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Logger
operator|.
name|getLogger
argument_list|(
name|ImportXmlFile
operator|.
name|class
argument_list|)
operator|.
name|error
argument_list|(
literal|"Error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Close hibernate
name|HibernateUtil
operator|.
name|closeHibernate
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

