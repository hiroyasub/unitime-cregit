begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_class
specifier|public
class|class
name|OccupancyHelper
extends|extends
name|RoomSummaryReportsHelper
block|{
specifier|public
name|OccupancyHelper
parameter_list|(
name|int
name|iMinutesInPeriod
parameter_list|,
name|int
name|iPeriodsInHour
parameter_list|,
name|int
name|iAllDayStartPeriod
parameter_list|,
name|int
name|iAllDayEndPeriod
parameter_list|,
name|int
name|iStandardDayStartPeriod
parameter_list|,
name|int
name|iStandardDayEndPeriod
parameter_list|,
name|int
name|iWeekendDayStartPeriod
parameter_list|,
name|int
name|iWeekendDayEndPeriod
parameter_list|,
name|int
name|iFirstFullHourStartPeriod
parameter_list|,
name|int
name|iLastFullHourStopPeriod
parameter_list|,
name|String
name|iSchema
parameter_list|)
block|{
name|super
argument_list|(
name|iMinutesInPeriod
argument_list|,
name|iPeriodsInHour
argument_list|,
name|iAllDayStartPeriod
argument_list|,
name|iAllDayEndPeriod
argument_list|,
name|iStandardDayStartPeriod
argument_list|,
name|iStandardDayEndPeriod
argument_list|,
name|iWeekendDayStartPeriod
argument_list|,
name|iWeekendDayEndPeriod
argument_list|,
name|iFirstFullHourStartPeriod
argument_list|,
name|iLastFullHourStopPeriod
argument_list|,
name|iSchema
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OccupancyHelper
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getSummaryCalculationForPeriod
parameter_list|(
name|String
name|first5MinutePeriod
parameter_list|,
name|String
name|last5MinutePeriod
parameter_list|,
name|String
name|additionalQueryField
parameter_list|)
block|{
name|StringBuffer
name|utilCal
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|utilCal
operator|.
name|append
argument_list|(
literal|"(case when z.nbr_rooms> 0 and "
argument_list|)
expr_stmt|;
name|utilCal
operator|.
name|append
argument_list|(
name|additionalQueryField
argument_list|)
expr_stmt|;
name|utilCal
operator|.
name|append
argument_list|(
literal|"> 0 then "
argument_list|)
expr_stmt|;
name|utilCal
operator|.
name|append
argument_list|(
literal|"(((((case when z.stop_period> "
argument_list|)
expr_stmt|;
name|utilCal
operator|.
name|append
argument_list|(
name|last5MinutePeriod
argument_list|)
expr_stmt|;
name|utilCal
operator|.
name|append
argument_list|(
literal|" then "
argument_list|)
expr_stmt|;
name|utilCal
operator|.
name|append
argument_list|(
name|last5MinutePeriod
argument_list|)
expr_stmt|;
name|utilCal
operator|.
name|append
argument_list|(
literal|" else z.stop_period end) - (case when z.start_period< "
argument_list|)
expr_stmt|;
name|utilCal
operator|.
name|append
argument_list|(
name|first5MinutePeriod
argument_list|)
expr_stmt|;
name|utilCal
operator|.
name|append
argument_list|(
literal|" then "
argument_list|)
expr_stmt|;
name|utilCal
operator|.
name|append
argument_list|(
name|first5MinutePeriod
argument_list|)
expr_stmt|;
name|utilCal
operator|.
name|append
argument_list|(
literal|" else z.start_period end)) * "
argument_list|)
expr_stmt|;
name|utilCal
operator|.
name|append
argument_list|(
name|getMinutesInPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|utilCal
operator|.
name|append
argument_list|(
literal|") * ("
argument_list|)
expr_stmt|;
name|utilCal
operator|.
name|append
argument_list|(
name|additionalQueryField
argument_list|)
expr_stmt|;
name|utilCal
operator|.
name|append
argument_list|(
literal|" * z.room_proration))  * 1/z.weeks_divisor_for_day_of_week/60.0)"
argument_list|)
expr_stmt|;
name|utilCal
operator|.
name|append
argument_list|(
literal|" else 0 end) "
argument_list|)
expr_stmt|;
return|return
operator|(
name|utilCal
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|protected
name|String
name|getRoomProration
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"(case when r.capacity> 0"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"then"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"(select (r.capacity / sum(oth_r.capacity)) "
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"from timetable.meeting om"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"inner join timetable.room oth_r on oth_r.session_id = sess.uniqueid "
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"and oth_r.permanent_id = om.location_perm_id  "
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"where om.event_id = m.event_id "
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"and om.meeting_date = m.meeting_date "
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"and om.start_period = m.start_period "
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"and om.stop_period = m.stop_period"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"and r.capacity> 0"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"group by om.event_id"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"else"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"end"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|") as room_proration"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getBaseQueryAdditionalSelectColumns
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"( "
argument_list|)
operator|.
name|append
argument_list|(
name|getSeatsUsedCaseStatement
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" ) as "
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlStationsUsed
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"( "
argument_list|)
operator|.
name|append
argument_list|(
name|getSeatsRequestedCaseStatement
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" ) as "
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlStationsRequested
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"m.uniqueId as meeting_id,"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getRoomProration
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPivotedQuery
parameter_list|(
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|allDays
parameter_list|,
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|weekDays
parameter_list|,
name|Integer
name|saturday
parameter_list|,
name|String
name|campus
parameter_list|,
name|String
name|year
parameter_list|,
name|String
name|term
parameter_list|,
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|headerRow
parameter_list|,
name|boolean
name|includeDayOfWkTimeOfDayInHeaderRow
parameter_list|,
name|boolean
name|includeSubjectArea
parameter_list|,
name|boolean
name|includeDept
parameter_list|)
block|{
return|return
name|getPivotedBaseSummaryQuery
argument_list|(
name|allDays
argument_list|,
name|weekDays
argument_list|,
name|saturday
argument_list|,
name|campus
argument_list|,
name|year
argument_list|,
name|term
argument_list|,
name|headerRow
argument_list|,
name|includeDayOfWkTimeOfDayInHeaderRow
argument_list|,
name|includeSubjectArea
argument_list|,
name|includeDept
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ArrayList
argument_list|<
name|LabelFieldPair
argument_list|>
name|getLabelPrefixToAdditionalQueryFieldMapping
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|LabelFieldPair
argument_list|>
name|mapping
init|=
operator|new
name|ArrayList
argument_list|<
name|LabelFieldPair
argument_list|>
argument_list|()
decl_stmt|;
name|mapping
operator|.
name|add
argument_list|(
operator|new
name|LabelFieldPair
argument_list|(
name|MESSAGES
operator|.
name|utilSqlStationsUsed
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|utilSqlStationsUsed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|add
argument_list|(
operator|new
name|LabelFieldPair
argument_list|(
name|MESSAGES
operator|.
name|utilSqlStationsRequested
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|utilSqlStationsRequested
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mapping
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addSumStatementToStringBuffer
parameter_list|(
name|StringBuffer
name|sb
parameter_list|,
name|String
name|sum
parameter_list|,
name|String
name|label
parameter_list|,
name|boolean
name|leadingComma
parameter_list|)
block|{
if|if
condition|(
name|leadingComma
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|sum
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" as "
argument_list|)
operator|.
name|append
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

