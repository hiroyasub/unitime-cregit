begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_comment
comment|/**  * @author Stephanie Schluttenhofer  *  */
end_comment

begin_class
specifier|public
class|class
name|LoginManager
block|{
specifier|private
specifier|static
name|HashMap
argument_list|<
name|String
argument_list|,
name|FailedLoginAttempt
argument_list|>
name|failedLoginAttempts
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|FailedLoginAttempt
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|boolean
name|isUserLockedOut
parameter_list|(
name|String
name|user
parameter_list|,
name|Date
name|attemptDateTime
parameter_list|)
block|{
name|FailedLoginAttempt
name|fla
init|=
name|failedLoginAttempts
operator|.
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|fla
operator|!=
literal|null
condition|)
block|{
name|boolean
name|lockedOut
init|=
name|fla
operator|.
name|isUserLockedOut
argument_list|(
name|user
argument_list|,
name|attemptDateTime
argument_list|)
decl_stmt|;
if|if
condition|(
name|lockedOut
condition|)
block|{
name|Debug
operator|.
name|info
argument_list|(
literal|"Too many failed login attempts - User: "
operator|+
name|user
operator|+
literal|" temporarily locked out."
argument_list|)
expr_stmt|;
if|if
condition|(
name|fla
operator|.
name|getCount
argument_list|()
operator|>
name|ApplicationProperty
operator|.
name|LoginMaxFailedAttempts
operator|.
name|intValue
argument_list|()
operator|+
literal|3
condition|)
block|{
comment|// If user has exceed his max failed attempts by 3 do not respond as quickly
comment|// This helps to prevent users from flooding the system with failed login attempts.
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|ApplicationProperty
operator|.
name|LoginFailedAttemptDelay
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
return|return
name|lockedOut
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|addFailedLoginAttempt
parameter_list|(
name|String
name|user
parameter_list|,
name|Date
name|attemptDateTime
parameter_list|)
block|{
name|FailedLoginAttempt
name|fla
init|=
name|failedLoginAttempts
operator|.
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|fla
operator|==
literal|null
condition|)
block|{
name|failedLoginAttempts
operator|.
name|put
argument_list|(
name|user
argument_list|,
operator|new
name|FailedLoginAttempt
argument_list|(
name|user
argument_list|,
literal|1
argument_list|,
name|attemptDateTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|fla
operator|.
name|getCount
argument_list|()
operator|<
name|ApplicationProperty
operator|.
name|LoginMaxFailedAttempts
operator|.
name|intValue
argument_list|()
condition|)
block|{
name|fla
operator|.
name|setLastFailedAttempt
argument_list|(
name|attemptDateTime
argument_list|)
expr_stmt|;
block|}
name|fla
operator|.
name|setCount
argument_list|(
name|fla
operator|.
name|getCount
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|loginSuceeded
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|failedLoginAttempts
operator|.
name|remove
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

