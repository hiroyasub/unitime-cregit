begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|RollForwardSessionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Building
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|BuildingPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentRoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Designator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExternalBuilding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExternalRoom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExternalRoomDepartment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExternalRoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|GlobalRoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|NonUniversityLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomDept
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeaturePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroupPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|BuildingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseCatalogDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DatePatternDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DistributionPrefDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DistributionTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExternalBuildingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExternalRoomDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExternalRoomDepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExternalRoomFeatureDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|GlobalRoomFeatureDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|NonUniversityLocationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomDeptDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomFeatureDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomGroupDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolverGroupDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SubjectAreaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TimePatternDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TimetableManagerDAO
import|;
end_import

begin_comment
comment|/**  * @author Stephanie Schluttenhofer  *  */
end_comment

begin_class
specifier|public
class|class
name|SessionRollForward
block|{
specifier|private
specifier|static
name|HashMap
name|roomList
decl_stmt|;
specifier|private
specifier|static
name|HashMap
name|sessionHasCourseCatalogList
decl_stmt|;
specifier|private
specifier|static
name|HashMap
name|sessionHasExternalBuildingList
decl_stmt|;
specifier|private
specifier|static
name|HashMap
name|sessionHasExternalRoomList
decl_stmt|;
specifier|private
specifier|static
name|HashMap
name|sessionHasExternalRoomDeptList
decl_stmt|;
specifier|private
specifier|static
name|HashMap
name|sessionHasExternalRoomFeatureList
decl_stmt|;
specifier|public
name|void
name|rollBuildingAndRoomDataForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|RollForwardSessionForm
name|rollForwardSessionForm
parameter_list|)
block|{
name|Session
name|toSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollForwardTo
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|fromSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollRoomDataForwardFrom
argument_list|()
argument_list|)
decl_stmt|;
name|rollRoomFeaturesForward
argument_list|(
name|errors
argument_list|,
name|fromSession
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
name|rollRoomGroupsForward
argument_list|(
name|errors
argument_list|,
name|fromSession
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
name|rollBuildingsForward
argument_list|(
name|errors
argument_list|,
name|fromSession
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
name|rollLocationsForward
argument_list|(
name|errors
argument_list|,
name|fromSession
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
operator|(
operator|new
name|SessionDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|rollRoomGroupsForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|Session
name|fromSession
parameter_list|,
name|Session
name|toSession
parameter_list|)
block|{
name|RoomGroup
name|fromRoomGroup
init|=
literal|null
decl_stmt|;
name|RoomGroup
name|toRoomGroup
init|=
literal|null
decl_stmt|;
name|RoomGroupDAO
name|rgDao
init|=
operator|new
name|RoomGroupDAO
argument_list|()
decl_stmt|;
name|RoomDAO
name|rDao
init|=
operator|new
name|RoomDAO
argument_list|()
decl_stmt|;
name|NonUniversityLocationDAO
name|nulDao
init|=
operator|new
name|NonUniversityLocationDAO
argument_list|()
decl_stmt|;
name|Collection
name|fromRoomGroups
init|=
name|RoomGroup
operator|.
name|getAllRoomGroupsForSession
argument_list|(
name|fromSession
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|fromRoomGroups
operator|!=
literal|null
operator|&&
operator|!
name|fromRoomGroups
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|fromRoomGroups
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromRoomGroup
operator|=
operator|(
name|RoomGroup
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromRoomGroup
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|fromRoomGroup
operator|.
name|isGlobal
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|toRoomGroup
operator|=
operator|(
name|RoomGroup
operator|)
name|fromRoomGroup
operator|.
name|clone
argument_list|()
expr_stmt|;
name|toRoomGroup
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
name|toRoomGroup
operator|.
name|setDepartment
argument_list|(
name|fromRoomGroup
operator|.
name|getDepartment
argument_list|()
operator|.
name|findSameDepartmentInSession
argument_list|(
name|toSession
argument_list|)
argument_list|)
expr_stmt|;
name|rgDao
operator|.
name|saveOrUpdate
argument_list|(
name|toRoomGroup
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"rollForward"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.rollForward"
argument_list|,
literal|"Room Groups"
argument_list|,
name|fromSession
operator|.
name|getLabel
argument_list|()
argument_list|,
name|toSession
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|"Failed to roll all room groups forward."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|rollRoomFeaturesForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|Session
name|fromSession
parameter_list|,
name|Session
name|toSession
parameter_list|)
block|{
name|DepartmentRoomFeature
name|fromRoomFeature
init|=
literal|null
decl_stmt|;
name|DepartmentRoomFeature
name|toRoomFeature
init|=
literal|null
decl_stmt|;
name|RoomFeatureDAO
name|rfDao
init|=
operator|new
name|RoomFeatureDAO
argument_list|()
decl_stmt|;
name|RoomDAO
name|rDao
init|=
operator|new
name|RoomDAO
argument_list|()
decl_stmt|;
name|NonUniversityLocationDAO
name|nulDao
init|=
operator|new
name|NonUniversityLocationDAO
argument_list|()
decl_stmt|;
name|Collection
name|fromRoomFeatures
init|=
name|DepartmentRoomFeature
operator|.
name|getAllRoomFeaturesForSession
argument_list|(
name|fromSession
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|fromRoomFeatures
operator|!=
literal|null
operator|&&
operator|!
name|fromRoomFeatures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|fromRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromRoomFeature
operator|=
operator|(
name|DepartmentRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromRoomFeature
operator|!=
literal|null
condition|)
block|{
name|toRoomFeature
operator|=
operator|(
name|DepartmentRoomFeature
operator|)
name|fromRoomFeature
operator|.
name|clone
argument_list|()
expr_stmt|;
name|toRoomFeature
operator|.
name|setDepartment
argument_list|(
name|fromRoomFeature
operator|.
name|getDepartment
argument_list|()
operator|.
name|findSameDepartmentInSession
argument_list|(
name|toSession
argument_list|)
argument_list|)
expr_stmt|;
name|rfDao
operator|.
name|saveOrUpdate
argument_list|(
name|toRoomFeature
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|sessionHasExternalRoomFeatureList
argument_list|(
name|toSession
argument_list|)
condition|)
block|{
name|GlobalRoomFeatureDAO
name|grfDao
init|=
operator|new
name|GlobalRoomFeatureDAO
argument_list|()
decl_stmt|;
name|GlobalRoomFeature
name|grf
init|=
literal|null
decl_stmt|;
name|List
name|newGlobalFeatures
init|=
name|grfDao
operator|.
name|getQuery
argument_list|(
literal|"select distinct erf.value, erf.name from ExternalRoomFeature erf"
operator|+
literal|" where erf.room.building.session.uniqueId=:sessionId"
operator|+
literal|"  and erf.value not in (select grf.label from GlobalRoomFeature grf)"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|newGlobalFeatures
operator|!=
literal|null
condition|)
block|{
name|String
name|newLabel
init|=
literal|null
decl_stmt|;
name|String
name|newSisReference
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|nrfIt
init|=
name|newGlobalFeatures
operator|.
name|iterator
argument_list|()
init|;
name|nrfIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|List
name|l
init|=
operator|(
name|List
operator|)
name|nrfIt
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
name|l
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
name|newLabel
operator|=
operator|(
name|String
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|newSisReference
operator|=
operator|(
name|String
operator|)
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|grf
operator|=
operator|new
name|GlobalRoomFeature
argument_list|()
expr_stmt|;
name|grf
operator|.
name|setLabel
argument_list|(
name|newLabel
argument_list|)
expr_stmt|;
name|grf
operator|.
name|setSisReference
argument_list|(
name|newSisReference
argument_list|)
expr_stmt|;
name|grf
operator|.
name|setSisValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|grfDao
operator|.
name|saveOrUpdate
argument_list|(
name|grf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"rollForward"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.rollForward"
argument_list|,
literal|"Room Features"
argument_list|,
name|fromSession
operator|.
name|getLabel
argument_list|()
argument_list|,
name|toSession
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|"Failed to roll all room features forward."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|rollRoomFeaturesForLocationForward
parameter_list|(
name|Location
name|fromLocation
parameter_list|,
name|Location
name|toLocation
parameter_list|,
name|Session
name|toSession
parameter_list|,
name|HashMap
name|roomFeatureCache
parameter_list|)
block|{
if|if
condition|(
name|fromLocation
operator|.
name|getFeatures
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromLocation
operator|.
name|getFeatures
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RoomFeature
name|fromFeature
init|=
literal|null
decl_stmt|;
name|GlobalRoomFeature
name|toGlobalFeature
init|=
literal|null
decl_stmt|;
name|DepartmentRoomFeature
name|toDepartmentFeature
init|=
literal|null
decl_stmt|;
name|boolean
name|rollGlobalFeaturesFromFromLocation
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|toLocation
operator|instanceof
name|Room
condition|)
block|{
name|Room
name|toRoom
init|=
operator|(
name|Room
operator|)
name|toLocation
decl_stmt|;
if|if
condition|(
name|toRoom
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ExternalRoom
name|er
init|=
name|ExternalRoom
operator|.
name|findExternalRoomForSession
argument_list|(
name|toRoom
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|toSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|er
operator|!=
literal|null
condition|)
block|{
name|rollGlobalFeaturesFromFromLocation
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|er
operator|.
name|getRoomFeatures
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ExternalRoomFeature
name|erf
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|erfIt
init|=
name|er
operator|.
name|getRoomFeatures
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|erfIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|erf
operator|=
operator|(
name|ExternalRoomFeature
operator|)
name|erfIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|toGlobalFeature
operator|=
name|GlobalRoomFeature
operator|.
name|findGlobalRoomFeatureForLabel
argument_list|(
name|erf
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|toLocation
operator|.
name|addTofeatures
argument_list|(
name|toGlobalFeature
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
for|for
control|(
name|Iterator
name|rfIt
init|=
name|fromLocation
operator|.
name|getFeatures
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|rfIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromFeature
operator|=
operator|(
name|RoomFeature
operator|)
name|rfIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromFeature
operator|instanceof
name|GlobalRoomFeature
operator|&&
name|rollGlobalFeaturesFromFromLocation
condition|)
block|{
name|GlobalRoomFeature
name|fromGlobalFeature
init|=
operator|(
name|GlobalRoomFeature
operator|)
name|fromFeature
decl_stmt|;
name|toLocation
operator|.
name|addTofeatures
argument_list|(
name|fromGlobalFeature
argument_list|)
expr_stmt|;
name|fromGlobalFeature
operator|.
name|getRooms
argument_list|()
operator|.
name|add
argument_list|(
name|toLocation
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|fromFeature
operator|instanceof
name|DepartmentRoomFeature
condition|)
block|{
name|DepartmentRoomFeature
name|fromDepartmentFeature
init|=
operator|(
name|DepartmentRoomFeature
operator|)
name|fromFeature
decl_stmt|;
name|toDepartmentFeature
operator|=
operator|(
name|DepartmentRoomFeature
operator|)
name|roomFeatureCache
operator|.
name|get
argument_list|(
name|fromDepartmentFeature
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDepartmentFeature
operator|==
literal|null
condition|)
block|{
name|toDepartmentFeature
operator|=
name|fromDepartmentFeature
operator|.
name|findSameFeatureInSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDepartmentFeature
operator|!=
literal|null
condition|)
block|{
name|roomFeatureCache
operator|.
name|put
argument_list|(
name|fromDepartmentFeature
argument_list|,
name|toDepartmentFeature
argument_list|)
expr_stmt|;
name|toLocation
operator|.
name|addTofeatures
argument_list|(
name|toDepartmentFeature
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDepartmentFeature
operator|.
name|getRooms
argument_list|()
operator|==
literal|null
condition|)
block|{
name|toDepartmentFeature
operator|.
name|setRooms
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|toDepartmentFeature
operator|.
name|getRooms
argument_list|()
operator|.
name|add
argument_list|(
name|toLocation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|rollRoomForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|Session
name|fromSession
parameter_list|,
name|Session
name|toSession
parameter_list|,
name|Location
name|location
parameter_list|)
block|{
name|Room
name|fromRoom
init|=
literal|null
decl_stmt|;
name|Room
name|toRoom
init|=
literal|null
decl_stmt|;
name|RoomDAO
name|rDao
init|=
operator|new
name|RoomDAO
argument_list|()
decl_stmt|;
name|RoomDeptDAO
name|rdDao
init|=
operator|new
name|RoomDeptDAO
argument_list|()
decl_stmt|;
name|DepartmentDAO
name|dDao
init|=
operator|new
name|DepartmentDAO
argument_list|()
decl_stmt|;
name|Building
name|toBuilding
init|=
literal|null
decl_stmt|;
name|RoomDept
name|fromRoomDept
init|=
literal|null
decl_stmt|;
name|RoomDept
name|toRoomDept
init|=
literal|null
decl_stmt|;
name|Department
name|toDept
init|=
literal|null
decl_stmt|;
name|Department
name|fromDept
init|=
literal|null
decl_stmt|;
name|HashMap
name|roomFeatureCache
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|HashMap
name|roomGroupCache
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
try|try
block|{
name|fromRoom
operator|=
operator|(
name|Room
operator|)
name|location
expr_stmt|;
if|if
condition|(
name|fromRoom
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|sessionHasExternalRoomList
argument_list|(
name|toSession
argument_list|)
condition|)
block|{
name|ExternalRoom
name|toExternalRoom
init|=
name|ExternalRoom
operator|.
name|findExternalRoomForSession
argument_list|(
name|fromRoom
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|toSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|toExternalRoom
operator|!=
literal|null
condition|)
block|{
name|toRoom
operator|=
operator|new
name|Room
argument_list|()
expr_stmt|;
name|toRoom
operator|.
name|setCapacity
argument_list|(
name|toExternalRoom
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setClassification
argument_list|(
name|toExternalRoom
operator|.
name|getClassification
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setCoordinateX
argument_list|(
name|toExternalRoom
operator|.
name|getCoordinateX
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setCoordinateY
argument_list|(
name|toExternalRoom
operator|.
name|getCoordinateY
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setDisplayName
argument_list|(
name|toExternalRoom
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setExternalUniqueId
argument_list|(
name|toExternalRoom
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setIgnoreRoomCheck
argument_list|(
name|fromRoom
operator|.
name|isIgnoreRoomCheck
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setIgnoreTooFar
argument_list|(
name|fromRoom
operator|.
name|isIgnoreTooFar
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setPattern
argument_list|(
name|fromRoom
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setRoomNumber
argument_list|(
name|toExternalRoom
operator|.
name|getRoomNumber
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setScheduledRoomType
argument_list|(
name|toExternalRoom
operator|.
name|getScheduledRoomType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return;
block|}
block|}
else|else
block|{
name|toRoom
operator|=
operator|(
name|Room
operator|)
name|fromRoom
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
name|toRoom
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
name|toBuilding
operator|=
name|fromRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|findSameBuildingInSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|toBuilding
operator|!=
literal|null
condition|)
block|{
name|toRoom
operator|.
name|setBuilding
argument_list|(
name|toBuilding
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromRoom
operator|.
name|getManagerIds
argument_list|()
operator|!=
literal|null
operator|&&
name|fromRoom
operator|.
name|getManagerIds
argument_list|()
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|String
name|toManagerStr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|stk
init|=
operator|new
name|StringTokenizer
argument_list|(
name|fromRoom
operator|.
name|getManagerIds
argument_list|()
argument_list|,
literal|","
argument_list|)
init|;
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|Long
name|fromDeptId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|stk
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromDeptId
operator|!=
literal|null
condition|)
block|{
name|fromDept
operator|=
name|dDao
operator|.
name|get
argument_list|(
name|fromDeptId
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromDept
operator|!=
literal|null
condition|)
block|{
name|toDept
operator|=
name|fromDept
operator|.
name|findSameDepartmentInSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDept
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|toManagerStr
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|toManagerStr
operator|+=
literal|","
expr_stmt|;
block|}
name|toManagerStr
operator|+=
name|toDept
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
name|toRoom
operator|.
name|setManagerIds
argument_list|(
name|toManagerStr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|toRoom
operator|.
name|setPattern
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|rollRoomFeaturesForLocationForward
argument_list|(
name|fromRoom
argument_list|,
name|toRoom
argument_list|,
name|toSession
argument_list|,
name|roomFeatureCache
argument_list|)
expr_stmt|;
name|rollRoomGroupsForLocationForward
argument_list|(
name|fromRoom
argument_list|,
name|toRoom
argument_list|,
name|toSession
argument_list|,
name|roomGroupCache
argument_list|)
expr_stmt|;
name|rDao
operator|.
name|saveOrUpdate
argument_list|(
name|toRoom
argument_list|)
expr_stmt|;
name|boolean
name|rollForwardExistingRoomDepts
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|fromRoom
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|sessionHasExternalRoomDeptList
argument_list|(
name|toSession
argument_list|)
condition|)
block|{
name|ExternalRoom
name|toExternalRoom
init|=
name|ExternalRoom
operator|.
name|findExternalRoomForSession
argument_list|(
name|fromRoom
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|toSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|toExternalRoom
operator|.
name|getRoomDepartments
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|toExternalRoom
operator|.
name|getRoomDepartments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ExternalRoomDepartment
name|toExternalRoomDept
init|=
literal|null
decl_stmt|;
name|fromRoomDept
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|Iterator
name|erdIt
init|=
name|toExternalRoom
operator|.
name|getRoomDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
operator|(
name|erdIt
operator|.
name|hasNext
argument_list|()
operator|&&
name|rollForwardExistingRoomDepts
operator|)
condition|;
control|)
block|{
name|boolean
name|foundDept
init|=
literal|false
decl_stmt|;
name|toExternalRoomDept
operator|=
operator|(
name|ExternalRoomDepartment
operator|)
name|erdIt
operator|.
name|next
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|rdIt
init|=
name|fromRoom
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
operator|(
name|rdIt
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|foundDept
operator|)
condition|;
control|)
block|{
name|fromRoomDept
operator|=
operator|(
name|RoomDept
operator|)
name|rdIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromRoomDept
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
operator|.
name|equals
argument_list|(
name|toExternalRoomDept
operator|.
name|getDepartmentCode
argument_list|()
argument_list|)
condition|)
block|{
name|foundDept
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|foundDept
condition|)
block|{
name|rollForwardExistingRoomDepts
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|rollForwardExistingRoomDepts
condition|)
block|{
if|if
condition|(
name|fromRoom
operator|.
name|getRoomDepts
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromRoom
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|deptIt
init|=
name|fromRoom
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|deptIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromRoomDept
operator|=
operator|(
name|RoomDept
operator|)
name|deptIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|rollForwardRoomDept
argument_list|(
name|fromRoomDept
argument_list|,
name|toRoom
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// resetting department sharing related fields
name|toRoom
operator|.
name|setPattern
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setManagerIds
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ExternalRoom
name|toExternalRoom
init|=
name|ExternalRoom
operator|.
name|findExternalRoomForSession
argument_list|(
name|fromRoom
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|toSession
argument_list|)
decl_stmt|;
name|ExternalRoomDepartment
name|toExternalRoomDept
init|=
literal|null
decl_stmt|;
name|fromRoomDept
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|Iterator
name|erdIt
init|=
name|toExternalRoom
operator|.
name|getRoomDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|erdIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|boolean
name|foundDept
init|=
literal|false
decl_stmt|;
name|toExternalRoomDept
operator|=
operator|(
name|ExternalRoomDepartment
operator|)
name|erdIt
operator|.
name|next
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|rdIt
init|=
name|fromRoom
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
operator|(
name|rdIt
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|foundDept
operator|)
condition|;
control|)
block|{
name|fromRoomDept
operator|=
operator|(
name|RoomDept
operator|)
name|rdIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromRoomDept
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
operator|.
name|equals
argument_list|(
name|toExternalRoomDept
operator|.
name|getDepartmentCode
argument_list|()
argument_list|)
condition|)
block|{
name|foundDept
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|foundDept
condition|)
block|{
name|rollForwardRoomDept
argument_list|(
name|fromRoomDept
argument_list|,
name|toRoom
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rollForwardRoomDept
argument_list|(
name|toExternalRoomDept
argument_list|,
name|toRoom
argument_list|,
name|toSession
argument_list|,
name|toExternalRoom
operator|.
name|getRoomDepartments
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|rDao
operator|.
name|saveOrUpdate
argument_list|(
name|toRoom
argument_list|)
expr_stmt|;
name|rDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|rDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|toRoom
argument_list|)
expr_stmt|;
name|rDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|fromRoom
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"rollForward"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.rollForward"
argument_list|,
literal|"Rooms"
argument_list|,
name|fromSession
operator|.
name|getLabel
argument_list|()
argument_list|,
name|toSession
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|"Failed to roll all rooms forward."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|RoomDept
name|rollForwardRoomDept
parameter_list|(
name|RoomDept
name|fromRoomDept
parameter_list|,
name|Room
name|toRoom
parameter_list|,
name|Session
name|toSession
parameter_list|)
block|{
name|Department
name|toDept
init|=
name|fromRoomDept
operator|.
name|getDepartment
argument_list|()
operator|.
name|findSameDepartmentInSession
argument_list|(
name|toSession
argument_list|)
decl_stmt|;
name|RoomDept
name|toRoomDept
init|=
literal|null
decl_stmt|;
name|RoomDeptDAO
name|rdDao
init|=
operator|new
name|RoomDeptDAO
argument_list|()
decl_stmt|;
if|if
condition|(
name|toDept
operator|!=
literal|null
condition|)
block|{
name|toRoomDept
operator|=
operator|new
name|RoomDept
argument_list|()
expr_stmt|;
name|toRoomDept
operator|.
name|setRoom
argument_list|(
name|toRoom
argument_list|)
expr_stmt|;
name|toRoomDept
operator|.
name|setControl
argument_list|(
name|fromRoomDept
operator|.
name|isControl
argument_list|()
argument_list|)
expr_stmt|;
name|toRoomDept
operator|.
name|setDepartment
argument_list|(
name|toDept
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|addToroomDepts
argument_list|(
name|toRoomDept
argument_list|)
expr_stmt|;
name|toDept
operator|.
name|addToroomDepts
argument_list|(
name|toRoomDept
argument_list|)
expr_stmt|;
name|rdDao
operator|.
name|saveOrUpdate
argument_list|(
name|toRoomDept
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|toRoomDept
operator|)
return|;
block|}
specifier|private
name|boolean
name|isControllingExternalDept
parameter_list|(
name|ExternalRoomDepartment
name|externalRoomDept
parameter_list|,
name|Set
name|deptList
parameter_list|)
block|{
name|String
name|asgn
init|=
literal|"assigned"
decl_stmt|;
name|String
name|sched
init|=
literal|"scheduling"
decl_stmt|;
if|if
condition|(
name|externalRoomDept
operator|==
literal|null
operator|||
name|deptList
operator|==
literal|null
operator|||
name|deptList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|(
literal|false
operator|)
return|;
block|}
if|if
condition|(
name|deptList
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|deptList
operator|.
name|contains
argument_list|(
name|externalRoomDept
argument_list|)
condition|)
block|{
return|return
operator|(
literal|true
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
literal|false
operator|)
return|;
block|}
block|}
else|else
block|{
name|boolean
name|isControl
init|=
literal|true
decl_stmt|;
name|ExternalRoomDepartment
name|erd
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|erdIt
init|=
name|deptList
operator|.
name|iterator
argument_list|()
init|;
operator|(
name|erdIt
operator|.
name|hasNext
argument_list|()
operator|&&
name|isControl
operator|)
condition|;
control|)
block|{
name|erd
operator|=
operator|(
name|ExternalRoomDepartment
operator|)
name|erdIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|erd
operator|!=
literal|null
operator|&&
operator|!
name|erd
operator|.
name|equals
argument_list|(
name|externalRoomDept
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|erd
operator|.
name|getDepartmentCode
argument_list|()
operator|.
name|equals
argument_list|(
name|externalRoomDept
operator|.
name|getDepartmentCode
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|externalRoomDept
operator|.
name|getAssignmentType
argument_list|()
operator|.
name|equals
argument_list|(
name|asgn
argument_list|)
condition|)
block|{
if|if
condition|(
name|erd
operator|.
name|getAssignmentType
argument_list|()
operator|.
name|equals
argument_list|(
name|asgn
argument_list|)
operator|&&
name|erd
operator|.
name|getPercent
argument_list|()
operator|.
name|compareTo
argument_list|(
name|externalRoomDept
operator|.
name|getPercent
argument_list|()
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|isControl
operator|=
literal|false
expr_stmt|;
block|}
if|else if
condition|(
name|erd
operator|.
name|getAssignmentType
argument_list|()
operator|.
name|equals
argument_list|(
name|sched
argument_list|)
condition|)
block|{
name|isControl
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|externalRoomDept
operator|.
name|getAssignmentType
argument_list|()
operator|.
name|equals
argument_list|(
name|sched
argument_list|)
condition|)
block|{
if|if
condition|(
name|erd
operator|.
name|getAssignmentType
argument_list|()
operator|.
name|equals
argument_list|(
name|sched
argument_list|)
operator|&&
name|erd
operator|.
name|getPercent
argument_list|()
operator|.
name|compareTo
argument_list|(
name|externalRoomDept
operator|.
name|getPercent
argument_list|()
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|isControl
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
operator|(
name|isControl
operator|)
return|;
block|}
block|}
specifier|private
name|RoomDept
name|rollForwardRoomDept
parameter_list|(
name|ExternalRoomDepartment
name|toExternalRoomDept
parameter_list|,
name|Room
name|toRoom
parameter_list|,
name|Session
name|toSession
parameter_list|,
name|Set
name|externalRoomDepts
parameter_list|)
block|{
name|Department
name|toDept
init|=
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|toExternalRoomDept
operator|.
name|getDepartmentCode
argument_list|()
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|RoomDept
name|toRoomDept
init|=
literal|null
decl_stmt|;
name|RoomDeptDAO
name|rdDao
init|=
operator|new
name|RoomDeptDAO
argument_list|()
decl_stmt|;
if|if
condition|(
name|toDept
operator|!=
literal|null
condition|)
block|{
name|toRoomDept
operator|=
operator|new
name|RoomDept
argument_list|()
expr_stmt|;
name|toRoomDept
operator|.
name|setRoom
argument_list|(
name|toRoom
argument_list|)
expr_stmt|;
name|toRoomDept
operator|.
name|setControl
argument_list|(
operator|new
name|Boolean
argument_list|(
name|isControllingExternalDept
argument_list|(
name|toExternalRoomDept
argument_list|,
name|externalRoomDepts
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|toRoomDept
operator|.
name|setDepartment
argument_list|(
name|toDept
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|addToroomDepts
argument_list|(
name|toRoomDept
argument_list|)
expr_stmt|;
name|toDept
operator|.
name|addToroomDepts
argument_list|(
name|toRoomDept
argument_list|)
expr_stmt|;
name|rdDao
operator|.
name|saveOrUpdate
argument_list|(
name|toRoomDept
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|toRoomDept
operator|)
return|;
block|}
specifier|private
name|void
name|rollRoomGroupsForLocationForward
parameter_list|(
name|Location
name|fromLocation
parameter_list|,
name|Location
name|toLocation
parameter_list|,
name|Session
name|toSession
parameter_list|,
name|HashMap
name|roomGroupCache
parameter_list|)
block|{
if|if
condition|(
name|fromLocation
operator|.
name|getRoomGroups
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromLocation
operator|.
name|getRoomGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RoomGroup
name|fromRoomGroup
init|=
literal|null
decl_stmt|;
name|RoomGroup
name|toDepartmentRoomGroup
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|rfIt
init|=
name|fromLocation
operator|.
name|getRoomGroups
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|rfIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromRoomGroup
operator|=
operator|(
name|RoomGroup
operator|)
name|rfIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromRoomGroup
operator|.
name|isGlobal
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|toLocation
operator|.
name|getRoomGroups
argument_list|()
operator|==
literal|null
condition|)
block|{
name|toLocation
operator|.
name|setRoomGroups
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|toLocation
operator|.
name|getRoomGroups
argument_list|()
operator|.
name|add
argument_list|(
name|fromRoomGroup
argument_list|)
expr_stmt|;
name|fromRoomGroup
operator|.
name|getRooms
argument_list|()
operator|.
name|add
argument_list|(
name|toLocation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|toDepartmentRoomGroup
operator|=
operator|(
name|RoomGroup
operator|)
name|roomGroupCache
operator|.
name|get
argument_list|(
name|fromRoomGroup
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDepartmentRoomGroup
operator|==
literal|null
condition|)
block|{
name|toDepartmentRoomGroup
operator|=
name|fromRoomGroup
operator|.
name|findSameRoomGroupInSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDepartmentRoomGroup
operator|!=
literal|null
condition|)
block|{
name|roomGroupCache
operator|.
name|put
argument_list|(
name|fromRoomGroup
argument_list|,
name|toDepartmentRoomGroup
argument_list|)
expr_stmt|;
if|if
condition|(
name|toLocation
operator|.
name|getRoomGroups
argument_list|()
operator|==
literal|null
condition|)
block|{
name|toLocation
operator|.
name|setRoomGroups
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|toLocation
operator|.
name|getRoomGroups
argument_list|()
operator|.
name|add
argument_list|(
name|toDepartmentRoomGroup
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDepartmentRoomGroup
operator|.
name|getRooms
argument_list|()
operator|==
literal|null
condition|)
block|{
name|toDepartmentRoomGroup
operator|.
name|setRooms
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|toDepartmentRoomGroup
operator|.
name|getRooms
argument_list|()
operator|.
name|add
argument_list|(
name|toLocation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|rollNonUniversityLocationsForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|Session
name|fromSession
parameter_list|,
name|Session
name|toSession
parameter_list|,
name|Location
name|location
parameter_list|)
block|{
name|NonUniversityLocation
name|fromNonUniversityLocation
init|=
literal|null
decl_stmt|;
name|NonUniversityLocation
name|toNonUniversityLocation
init|=
literal|null
decl_stmt|;
name|NonUniversityLocationDAO
name|nulDao
init|=
operator|new
name|NonUniversityLocationDAO
argument_list|()
decl_stmt|;
name|RoomDeptDAO
name|rdDao
init|=
operator|new
name|RoomDeptDAO
argument_list|()
decl_stmt|;
name|DepartmentDAO
name|dDao
init|=
operator|new
name|DepartmentDAO
argument_list|()
decl_stmt|;
name|Building
name|toBuilding
init|=
literal|null
decl_stmt|;
name|RoomDept
name|fromRoomDept
init|=
literal|null
decl_stmt|;
name|RoomDept
name|toRoomDept
init|=
literal|null
decl_stmt|;
name|Department
name|toDept
init|=
literal|null
decl_stmt|;
name|Department
name|fromDept
init|=
literal|null
decl_stmt|;
name|HashMap
name|roomFeatureCache
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|HashMap
name|roomGroupCache
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
try|try
block|{
name|fromNonUniversityLocation
operator|=
operator|(
name|NonUniversityLocation
operator|)
name|location
expr_stmt|;
name|toNonUniversityLocation
operator|=
operator|(
name|NonUniversityLocation
operator|)
name|fromNonUniversityLocation
operator|.
name|clone
argument_list|()
expr_stmt|;
name|toNonUniversityLocation
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromNonUniversityLocation
operator|.
name|getManagerIds
argument_list|()
operator|!=
literal|null
operator|&&
name|fromNonUniversityLocation
operator|.
name|getManagerIds
argument_list|()
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|String
name|toManagerStr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|stk
init|=
operator|new
name|StringTokenizer
argument_list|(
name|fromNonUniversityLocation
operator|.
name|getManagerIds
argument_list|()
argument_list|,
literal|","
argument_list|)
init|;
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|Long
name|fromDeptId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|stk
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromDeptId
operator|!=
literal|null
condition|)
block|{
name|fromDept
operator|=
name|dDao
operator|.
name|get
argument_list|(
name|fromDeptId
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromDept
operator|!=
literal|null
condition|)
block|{
name|toDept
operator|=
name|fromDept
operator|.
name|findSameDepartmentInSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDept
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|toManagerStr
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|toManagerStr
operator|+=
literal|","
expr_stmt|;
block|}
name|toManagerStr
operator|+=
name|toDept
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
name|toNonUniversityLocation
operator|.
name|setManagerIds
argument_list|(
name|toManagerStr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|toNonUniversityLocation
operator|.
name|setPattern
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|rollRoomFeaturesForLocationForward
argument_list|(
name|fromNonUniversityLocation
argument_list|,
name|toNonUniversityLocation
argument_list|,
name|toSession
argument_list|,
name|roomFeatureCache
argument_list|)
expr_stmt|;
name|rollRoomGroupsForLocationForward
argument_list|(
name|fromNonUniversityLocation
argument_list|,
name|toNonUniversityLocation
argument_list|,
name|toSession
argument_list|,
name|roomGroupCache
argument_list|)
expr_stmt|;
name|nulDao
operator|.
name|saveOrUpdate
argument_list|(
name|toNonUniversityLocation
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromNonUniversityLocation
operator|.
name|getRoomDepts
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromNonUniversityLocation
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|deptIt
init|=
name|fromNonUniversityLocation
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|deptIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromRoomDept
operator|=
operator|(
name|RoomDept
operator|)
name|deptIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|toDept
operator|=
name|fromRoomDept
operator|.
name|getDepartment
argument_list|()
operator|.
name|findSameDepartmentInSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDept
operator|!=
literal|null
condition|)
block|{
name|toRoomDept
operator|=
operator|new
name|RoomDept
argument_list|()
expr_stmt|;
name|toRoomDept
operator|.
name|setRoom
argument_list|(
name|toNonUniversityLocation
argument_list|)
expr_stmt|;
name|toRoomDept
operator|.
name|setControl
argument_list|(
name|fromRoomDept
operator|.
name|isControl
argument_list|()
argument_list|)
expr_stmt|;
name|toRoomDept
operator|.
name|setDepartment
argument_list|(
name|toDept
argument_list|)
expr_stmt|;
name|toNonUniversityLocation
operator|.
name|addToroomDepts
argument_list|(
name|toRoomDept
argument_list|)
expr_stmt|;
name|toDept
operator|.
name|addToroomDepts
argument_list|(
name|toRoomDept
argument_list|)
expr_stmt|;
name|rdDao
operator|.
name|saveOrUpdate
argument_list|(
name|toRoomDept
argument_list|)
expr_stmt|;
block|}
block|}
name|nulDao
operator|.
name|saveOrUpdate
argument_list|(
name|toNonUniversityLocation
argument_list|)
expr_stmt|;
name|nulDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|nulDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|toNonUniversityLocation
argument_list|)
expr_stmt|;
name|nulDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|fromNonUniversityLocation
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"rollForward"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.rollForward"
argument_list|,
literal|"Non University Locations"
argument_list|,
name|fromSession
operator|.
name|getLabel
argument_list|()
argument_list|,
name|toSession
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|"Failed to roll all non university locations forward."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|rollLocationsForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|Session
name|fromSession
parameter_list|,
name|Session
name|toSession
parameter_list|)
block|{
if|if
condition|(
name|fromSession
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromSession
operator|.
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Location
name|location
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|fromSession
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|location
operator|=
operator|(
name|Location
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|location
operator|instanceof
name|Room
condition|)
block|{
name|rollRoomForward
argument_list|(
name|errors
argument_list|,
name|fromSession
argument_list|,
name|toSession
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|location
operator|instanceof
name|NonUniversityLocation
condition|)
block|{
name|rollNonUniversityLocationsForward
argument_list|(
name|errors
argument_list|,
name|fromSession
argument_list|,
name|toSession
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|sessionHasExternalRoomList
argument_list|(
name|toSession
argument_list|)
condition|)
block|{
name|ExternalRoomDAO
name|erDao
init|=
operator|new
name|ExternalRoomDAO
argument_list|()
decl_stmt|;
name|BuildingDAO
name|bDao
init|=
operator|new
name|BuildingDAO
argument_list|()
decl_stmt|;
name|RoomDAO
name|rDao
init|=
operator|new
name|RoomDAO
argument_list|()
decl_stmt|;
name|String
name|query
init|=
literal|"from ExternalRoom er where er.building.session.uniqueId=:sessionId "
decl_stmt|;
name|query
operator|+=
literal|" and er.externalUniqueId not in (select r.externalUniqueId from Room r where r.session.uniqueId =:sessionId)"
expr_stmt|;
name|query
operator|+=
literal|" and er.classification in ('classroom', 'classLab')"
expr_stmt|;
name|List
name|l
init|=
name|erDao
operator|.
name|getQuery
argument_list|(
name|query
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
block|{
name|ExternalRoom
name|er
init|=
literal|null
decl_stmt|;
name|Room
name|r
init|=
literal|null
decl_stmt|;
name|Building
name|b
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|erIt
init|=
name|l
operator|.
name|iterator
argument_list|()
init|;
name|erIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|er
operator|=
operator|(
name|ExternalRoom
operator|)
name|erIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|b
operator|=
name|Building
operator|.
name|findByExternalIdAndSession
argument_list|(
name|er
operator|.
name|getBuilding
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
name|b
operator|=
operator|new
name|Building
argument_list|()
expr_stmt|;
name|b
operator|.
name|setAbbreviation
argument_list|(
name|er
operator|.
name|getBuilding
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|setCoordinateX
argument_list|(
name|er
operator|.
name|getBuilding
argument_list|()
operator|.
name|getCoordinateX
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|setCoordinateY
argument_list|(
name|er
operator|.
name|getBuilding
argument_list|()
operator|.
name|getCoordinateY
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|setExternalUniqueId
argument_list|(
name|er
operator|.
name|getBuilding
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|setName
argument_list|(
name|er
operator|.
name|getBuilding
argument_list|()
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
name|bDao
operator|.
name|saveOrUpdate
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
name|r
operator|=
operator|new
name|Room
argument_list|()
expr_stmt|;
name|r
operator|.
name|setBuilding
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|r
operator|.
name|setCapacity
argument_list|(
name|er
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setClassification
argument_list|(
name|er
operator|.
name|getClassification
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setCoordinateX
argument_list|(
name|er
operator|.
name|getCoordinateX
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setCoordinateY
argument_list|(
name|er
operator|.
name|getCoordinateY
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setDisplayName
argument_list|(
name|er
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setExternalUniqueId
argument_list|(
name|er
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setIgnoreRoomCheck
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setIgnoreTooFar
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setRoomNumber
argument_list|(
name|er
operator|.
name|getRoomNumber
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setScheduledRoomType
argument_list|(
name|er
operator|.
name|getScheduledRoomType
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|er
operator|.
name|getRoomFeatures
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ExternalRoomFeature
name|erf
init|=
literal|null
decl_stmt|;
name|GlobalRoomFeature
name|grf
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|erfIt
init|=
name|er
operator|.
name|getRoomFeatures
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|erfIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|erf
operator|=
operator|(
name|ExternalRoomFeature
operator|)
name|erfIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|grf
operator|=
name|GlobalRoomFeature
operator|.
name|findGlobalRoomFeatureForLabel
argument_list|(
name|erf
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|grf
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|addTofeatures
argument_list|(
name|grf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|rDao
operator|.
name|saveOrUpdate
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|ExternalRoomDepartment
name|toExternalRoomDept
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|erdIt
init|=
name|er
operator|.
name|getRoomDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|erdIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|toExternalRoomDept
operator|=
operator|(
name|ExternalRoomDepartment
operator|)
name|erdIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|rollForwardRoomDept
argument_list|(
name|toExternalRoomDept
argument_list|,
name|r
argument_list|,
name|toSession
argument_list|,
name|er
operator|.
name|getRoomDepartments
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|rollBuildingsForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|Session
name|fromSession
parameter_list|,
name|Session
name|toSession
parameter_list|)
block|{
if|if
condition|(
name|fromSession
operator|.
name|getBuildings
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromSession
operator|.
name|getBuildings
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|Building
name|fromBldg
init|=
literal|null
decl_stmt|;
name|Building
name|toBldg
init|=
literal|null
decl_stmt|;
name|BuildingDAO
name|bDao
init|=
operator|new
name|BuildingDAO
argument_list|()
decl_stmt|;
name|ExternalBuilding
name|toExternalBuilding
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|fromSession
operator|.
name|getBuildings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromBldg
operator|=
operator|(
name|Building
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromBldg
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|sessionHasExternalBuildingList
argument_list|(
name|toSession
argument_list|)
condition|)
block|{
name|toExternalBuilding
operator|=
name|ExternalBuilding
operator|.
name|findExternalBuildingForSession
argument_list|(
name|fromBldg
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|toExternalBuilding
operator|!=
literal|null
condition|)
block|{
name|toBldg
operator|=
operator|new
name|Building
argument_list|()
expr_stmt|;
name|toBldg
operator|.
name|setAbbreviation
argument_list|(
name|toExternalBuilding
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|toBldg
operator|.
name|setCoordinateX
argument_list|(
name|toExternalBuilding
operator|.
name|getCoordinateX
argument_list|()
argument_list|)
expr_stmt|;
name|toBldg
operator|.
name|setCoordinateY
argument_list|(
name|toExternalBuilding
operator|.
name|getCoordinateY
argument_list|()
argument_list|)
expr_stmt|;
name|toBldg
operator|.
name|setExternalUniqueId
argument_list|(
name|toExternalBuilding
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|toBldg
operator|.
name|setName
argument_list|(
name|toExternalBuilding
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
block|}
else|else
block|{
name|toBldg
operator|=
operator|(
name|Building
operator|)
name|fromBldg
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|toSession
operator|.
name|getBuildings
argument_list|()
operator|==
literal|null
condition|)
block|{
name|toSession
operator|.
name|setBuildings
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|toBldg
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
name|toSession
operator|.
name|getBuildings
argument_list|()
operator|.
name|add
argument_list|(
name|toBldg
argument_list|)
expr_stmt|;
name|bDao
operator|.
name|saveOrUpdate
argument_list|(
name|toBldg
argument_list|)
expr_stmt|;
name|bDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|bDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|toBldg
argument_list|)
expr_stmt|;
name|bDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|fromBldg
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"rollForward"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.rollForward"
argument_list|,
literal|"Buildings"
argument_list|,
name|fromSession
operator|.
name|getLabel
argument_list|()
argument_list|,
name|toSession
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|"Failed to roll all buildings forward."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|rollManagersForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|RollForwardSessionForm
name|rollForwardSessionForm
parameter_list|)
block|{
name|Session
name|toSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollForwardTo
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|fromSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollManagersForwardFrom
argument_list|()
argument_list|)
decl_stmt|;
name|Department
name|fromDepartment
init|=
literal|null
decl_stmt|;
name|Department
name|toDepartment
init|=
literal|null
decl_stmt|;
name|TimetableManagerDAO
name|tmDao
init|=
operator|new
name|TimetableManagerDAO
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|fromSession
operator|.
name|getDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromDepartment
operator|=
operator|(
name|Department
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromDepartment
operator|!=
literal|null
operator|&&
name|fromDepartment
operator|.
name|getTimetableManagers
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|toDepartment
operator|=
name|fromDepartment
operator|.
name|findSameDepartmentInSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDepartment
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|toDepartment
operator|.
name|getTimetableManagers
argument_list|()
operator|==
literal|null
condition|)
block|{
name|toDepartment
operator|.
name|setTimetableManagers
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TimetableManager
name|tm
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|tmIt
init|=
name|fromDepartment
operator|.
name|getTimetableManagers
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|tmIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|tm
operator|=
operator|(
name|TimetableManager
operator|)
name|tmIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|tm
operator|!=
literal|null
condition|)
block|{
name|tm
operator|.
name|getDepartments
argument_list|()
operator|.
name|add
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|tmDao
operator|.
name|saveOrUpdate
argument_list|(
name|tm
argument_list|)
expr_stmt|;
name|tmDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|tmDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tmDao
operator|.
name|getSession
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"rollForward"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.rollForward"
argument_list|,
literal|"Timetable Managers"
argument_list|,
name|fromSession
operator|.
name|getLabel
argument_list|()
argument_list|,
name|toSession
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|"Failed to roll all timetable managers forward."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|rollDepartmentsForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|RollForwardSessionForm
name|rollForwardSessionForm
parameter_list|)
block|{
name|Session
name|toSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollForwardTo
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|fromSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollDeptsFowardFrom
argument_list|()
argument_list|)
decl_stmt|;
name|Department
name|fromDepartment
init|=
literal|null
decl_stmt|;
name|Department
name|toDepartment
init|=
literal|null
decl_stmt|;
name|DepartmentDAO
name|dDao
init|=
operator|new
name|DepartmentDAO
argument_list|()
decl_stmt|;
name|SolverGroup
name|sg
init|=
literal|null
decl_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|fromSession
operator|.
name|getDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromDepartment
operator|=
operator|(
name|Department
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromDepartment
operator|!=
literal|null
condition|)
block|{
name|toDepartment
operator|=
operator|(
name|Department
operator|)
name|fromDepartment
operator|.
name|clone
argument_list|()
expr_stmt|;
name|toDepartment
operator|.
name|setStatusType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
name|toSession
operator|.
name|addTodepartments
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|dDao
operator|.
name|saveOrUpdate
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromDepartment
operator|.
name|getSolverGroup
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sg
operator|=
name|SolverGroup
operator|.
name|findBySessionIdName
argument_list|(
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|fromDepartment
operator|.
name|getSolverGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sg
operator|==
literal|null
condition|)
block|{
name|sg
operator|=
operator|(
name|SolverGroup
operator|)
name|fromDepartment
operator|.
name|getSolverGroup
argument_list|()
operator|.
name|clone
argument_list|()
expr_stmt|;
name|sg
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sg
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|null
operator|==
name|sg
operator|.
name|getDepartments
argument_list|()
condition|)
block|{
name|sg
operator|.
name|setDepartments
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sg
operator|.
name|getDepartments
argument_list|()
operator|.
name|add
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setSolverGroup
argument_list|(
name|sg
argument_list|)
expr_stmt|;
name|SolverGroupDAO
name|sgDao
init|=
operator|new
name|SolverGroupDAO
argument_list|()
decl_stmt|;
name|sgDao
operator|.
name|saveOrUpdate
argument_list|(
name|sg
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fromDepartment
operator|.
name|getDatePatterns
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromDepartment
operator|.
name|getDatePatterns
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|DatePattern
name|fromDp
init|=
literal|null
decl_stmt|;
name|DatePattern
name|toDp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|dpIt
init|=
name|fromDepartment
operator|.
name|getDatePatterns
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|dpIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromDp
operator|=
operator|(
name|DatePattern
operator|)
name|dpIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|toDp
operator|=
name|DatePattern
operator|.
name|findByName
argument_list|(
name|toSession
argument_list|,
name|fromDp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDp
operator|==
literal|null
condition|)
block|{
name|toDp
operator|=
name|fromDp
operator|.
name|findCloseMatchDatePatternInSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|toDp
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|null
operator|==
name|toDepartment
operator|.
name|getDatePatterns
argument_list|()
condition|)
block|{
name|toDepartment
operator|.
name|setDatePatterns
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|toDepartment
operator|.
name|getDatePatterns
argument_list|()
operator|.
name|add
argument_list|(
name|toDp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|fromDepartment
operator|.
name|getTimePatterns
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromDepartment
operator|.
name|getTimePatterns
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TimePattern
name|fromTp
init|=
literal|null
decl_stmt|;
name|TimePattern
name|toTp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|dpIt
init|=
name|fromDepartment
operator|.
name|getTimePatterns
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|dpIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromTp
operator|=
operator|(
name|TimePattern
operator|)
name|dpIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|toTp
operator|=
name|TimePattern
operator|.
name|findByName
argument_list|(
name|toSession
argument_list|,
name|fromTp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|toTp
operator|==
literal|null
condition|)
block|{
name|toTp
operator|=
name|TimePattern
operator|.
name|getMatchingTimePattern
argument_list|(
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|fromTp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|toTp
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|null
operator|==
name|toDepartment
operator|.
name|getTimePatterns
argument_list|()
condition|)
block|{
name|toDepartment
operator|.
name|setTimePatterns
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|toDepartment
operator|.
name|getTimePatterns
argument_list|()
operator|.
name|add
argument_list|(
name|toTp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|dDao
operator|.
name|saveOrUpdate
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|DistributionTypeDAO
name|dtDao
init|=
operator|new
name|DistributionTypeDAO
argument_list|()
decl_stmt|;
name|List
name|l
init|=
name|dtDao
operator|.
name|getQuery
argument_list|(
literal|"select dt from DistributionType dt inner join dt.departments as d where d.uniqueId = "
operator|+
name|fromDepartment
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
operator|!
name|l
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|DistributionType
name|distributionType
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|dtIt
init|=
name|l
operator|.
name|iterator
argument_list|()
init|;
name|dtIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|distributionType
operator|=
operator|(
name|DistributionType
operator|)
name|dtIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|distributionType
operator|.
name|getDepartments
argument_list|()
operator|.
name|add
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|dtDao
operator|.
name|saveOrUpdate
argument_list|(
name|distributionType
argument_list|)
expr_stmt|;
block|}
block|}
name|dDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|dDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|dDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|fromDepartment
argument_list|)
expr_stmt|;
block|}
block|}
name|dDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|dDao
operator|.
name|getSession
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"rollForward"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.rollForward"
argument_list|,
literal|"Departments"
argument_list|,
name|fromSession
operator|.
name|getLabel
argument_list|()
argument_list|,
name|toSession
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|"Failed to roll all departments forward."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|rollDatePatternsForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|RollForwardSessionForm
name|rollForwardSessionForm
parameter_list|)
block|{
name|Session
name|toSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollForwardTo
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|fromSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollDatePatternsForwardFrom
argument_list|()
argument_list|)
decl_stmt|;
name|Vector
name|fromDatePatterns
init|=
name|DatePattern
operator|.
name|findAll
argument_list|(
name|fromSession
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DatePattern
name|fromDatePattern
init|=
literal|null
decl_stmt|;
name|DatePattern
name|toDatePattern
init|=
literal|null
decl_stmt|;
name|DatePatternDAO
name|dpDao
init|=
operator|new
name|DatePatternDAO
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|fromDatePatterns
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromDatePattern
operator|=
operator|(
name|DatePattern
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromDatePattern
operator|!=
literal|null
condition|)
block|{
name|toDatePattern
operator|=
operator|(
name|DatePattern
operator|)
name|fromDatePattern
operator|.
name|clone
argument_list|()
expr_stmt|;
name|toDatePattern
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
name|dpDao
operator|.
name|saveOrUpdate
argument_list|(
name|toDatePattern
argument_list|)
expr_stmt|;
name|dpDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fromSession
operator|.
name|getDefaultDatePattern
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|DatePattern
name|defDp
init|=
name|DatePattern
operator|.
name|findByName
argument_list|(
name|toSession
argument_list|,
name|fromSession
operator|.
name|getDefaultDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|defDp
operator|!=
literal|null
condition|)
block|{
name|toSession
operator|.
name|setDefaultDatePattern
argument_list|(
name|defDp
argument_list|)
expr_stmt|;
name|SessionDAO
name|sDao
init|=
operator|new
name|SessionDAO
argument_list|()
decl_stmt|;
name|sDao
operator|.
name|saveOrUpdate
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
block|}
block|}
name|dpDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|dpDao
operator|.
name|getSession
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"rollForward"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.rollForward"
argument_list|,
literal|"Date Patterns"
argument_list|,
name|fromSession
operator|.
name|getLabel
argument_list|()
argument_list|,
name|toSession
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|"Failed to roll all date patterns forward."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|rollSubjectAreasForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|RollForwardSessionForm
name|rollForwardSessionForm
parameter_list|)
block|{
name|Session
name|toSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollForwardTo
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|fromSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollSubjectAreasForwardFrom
argument_list|()
argument_list|)
decl_stmt|;
name|SubjectArea
name|toSubjectArea
init|=
literal|null
decl_stmt|;
name|SubjectArea
name|fromSubjectArea
init|=
literal|null
decl_stmt|;
name|SubjectAreaDAO
name|sDao
init|=
operator|new
name|SubjectAreaDAO
argument_list|()
decl_stmt|;
name|Department
name|toDepartment
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|sessionHasCourseCatalog
argument_list|(
name|toSession
argument_list|)
condition|)
block|{
name|CourseCatalogDAO
name|ccDao
init|=
operator|new
name|CourseCatalogDAO
argument_list|()
decl_stmt|;
name|List
name|subjects
init|=
name|ccDao
operator|.
name|getQuery
argument_list|(
literal|"select distinct cc.subject, cc.previousSubject from CourseCatalog cc where cc.session.uniqueId=:sessionId and cc.previousSubject != null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|subjects
operator|!=
literal|null
condition|)
block|{
name|String
name|toSubject
init|=
literal|null
decl_stmt|;
name|String
name|fromSubject
init|=
literal|null
decl_stmt|;
name|List
name|subjectInfo
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|saIt
init|=
name|subjects
operator|.
name|iterator
argument_list|()
init|;
name|saIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|subjectInfo
operator|=
operator|(
name|List
operator|)
name|saIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|subjectInfo
operator|!=
literal|null
operator|&&
name|subjectInfo
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
name|toSubject
operator|=
operator|(
name|String
operator|)
name|subjectInfo
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fromSubject
operator|=
operator|(
name|String
operator|)
name|subjectInfo
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fromSubjectArea
operator|=
name|SubjectArea
operator|.
name|findByAbbv
argument_list|(
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|fromSubject
argument_list|)
expr_stmt|;
name|toSubjectArea
operator|=
operator|(
name|SubjectArea
operator|)
name|fromSubjectArea
operator|.
name|clone
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|toSubject
operator|.
name|equals
argument_list|(
name|fromSubject
argument_list|)
condition|)
block|{
name|toSubjectArea
operator|.
name|setSubjectAreaAbbreviation
argument_list|(
name|toSubject
argument_list|)
expr_stmt|;
block|}
name|toSubjectArea
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
name|toSession
operator|.
name|addTosubjectAreas
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromSubjectArea
operator|.
name|getDepartment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|toDepartment
operator|=
name|fromSubjectArea
operator|.
name|getDepartment
argument_list|()
operator|.
name|findSameDepartmentInSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDepartment
operator|!=
literal|null
condition|)
block|{
name|toSubjectArea
operator|.
name|setDepartment
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|addTosubjectAreas
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
name|sDao
operator|.
name|saveOrUpdate
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|fromSubjectArea
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|List
name|pseudoSubjects
init|=
name|sDao
operator|.
name|getQuery
argument_list|(
literal|"from SubjectArea sa where sa.session=:fromSessionId and sa.pseudo = 1 and sa.subjectAreaAbbreviation not in (select cc.subject from CourseCatalog cc where cc.session.uniqueId=:toSessionId)"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"fromSessionId"
argument_list|,
name|fromSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"toSessionId"
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|pseudoSubjects
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|pseudoSubjects
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromSubjectArea
operator|=
operator|(
name|SubjectArea
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromSubjectArea
operator|!=
literal|null
condition|)
block|{
name|toSubjectArea
operator|=
operator|(
name|SubjectArea
operator|)
name|fromSubjectArea
operator|.
name|clone
argument_list|()
expr_stmt|;
name|toSubjectArea
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
name|toSession
operator|.
name|addTosubjectAreas
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromSubjectArea
operator|.
name|getDepartment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|toDepartment
operator|=
name|fromSubjectArea
operator|.
name|getDepartment
argument_list|()
operator|.
name|findSameDepartmentInSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDepartment
operator|!=
literal|null
condition|)
block|{
name|toSubjectArea
operator|.
name|setDepartment
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|addTosubjectAreas
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
name|sDao
operator|.
name|saveOrUpdate
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|fromSubjectArea
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|List
name|newSubjects
init|=
name|ccDao
operator|.
name|getQuery
argument_list|(
literal|"select subject from CourseCatalog cc where cc.session.uniqueId=:sessionId and cc.previousSubject = null and cc.subject not in (select sa.subjectAreaAbbreviation from SubjectArea sa where sa.session.uniqueId=:sessionId)"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|toDepartment
operator|=
name|Department
operator|.
name|findByDeptCode
argument_list|(
literal|"TEMP"
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDepartment
operator|==
literal|null
condition|)
block|{
name|toDepartment
operator|=
operator|new
name|Department
argument_list|()
expr_stmt|;
name|toDepartment
operator|.
name|setAbbreviation
argument_list|(
literal|"TEMP"
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setAllowReqRoom
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setAllowReqTime
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setDeptCode
argument_list|(
literal|"TEMP"
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setExternalManager
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setExternalUniqueId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setName
argument_list|(
literal|"Temp Department For New Subjects"
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
name|toSession
operator|.
name|addTodepartments
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
block|}
name|String
name|toSubject
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|saIt
init|=
name|newSubjects
operator|.
name|iterator
argument_list|()
init|;
name|saIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|toSubject
operator|=
operator|(
name|String
operator|)
name|saIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|toSubject
operator|!=
literal|null
condition|)
block|{
name|toSubjectArea
operator|=
operator|new
name|SubjectArea
argument_list|()
expr_stmt|;
name|toSubjectArea
operator|.
name|setDepartment
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|toSubjectArea
operator|.
name|setLongTitle
argument_list|(
literal|"New Subject - Please Name Me"
argument_list|)
expr_stmt|;
name|toSubjectArea
operator|.
name|setPseudoSubjectArea
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|toSubjectArea
operator|.
name|setScheduleBookOnly
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|toSubjectArea
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
name|toSubjectArea
operator|.
name|setShortTitle
argument_list|(
literal|"New Subject"
argument_list|)
expr_stmt|;
name|toSubjectArea
operator|.
name|setSubjectAreaAbbreviation
argument_list|(
name|toSubject
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|addTosubjectAreas
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
name|toSession
operator|.
name|addTosubjectAreas
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
name|sDao
operator|.
name|saveOrUpdate
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|fromSubjectArea
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|fromSession
operator|.
name|getSubjectAreas
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromSession
operator|.
name|getSubjectAreas
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|fromSession
operator|.
name|getSubjectAreas
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromSubjectArea
operator|=
operator|(
name|SubjectArea
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromSubjectArea
operator|!=
literal|null
condition|)
block|{
name|toSubjectArea
operator|=
operator|(
name|SubjectArea
operator|)
name|fromSubjectArea
operator|.
name|clone
argument_list|()
expr_stmt|;
name|toSubjectArea
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
name|toSession
operator|.
name|addTosubjectAreas
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromSubjectArea
operator|.
name|getDepartment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|toDepartment
operator|=
name|fromSubjectArea
operator|.
name|getDepartment
argument_list|()
operator|.
name|findSameDepartmentInSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDepartment
operator|!=
literal|null
condition|)
block|{
name|toSubjectArea
operator|.
name|setDepartment
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|addTosubjectAreas
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
name|sDao
operator|.
name|saveOrUpdate
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|fromSubjectArea
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"rollForward"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.rollForward"
argument_list|,
literal|"Subject Areas"
argument_list|,
name|fromSession
operator|.
name|getLabel
argument_list|()
argument_list|,
name|toSession
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|"Failed to roll all subject areas forward."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Department
name|findToManagingDepartmentForPrefGroup
parameter_list|(
name|PreferenceGroup
name|toPrefGroup
parameter_list|)
block|{
name|Department
name|toDepartment
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|toPrefGroup
operator|instanceof
name|DepartmentalInstructor
condition|)
block|{
name|DepartmentalInstructor
name|toInstructor
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|toPrefGroup
decl_stmt|;
name|toDepartment
operator|=
name|toInstructor
operator|.
name|getDepartment
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|toPrefGroup
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
name|SchedulingSubpart
name|toSchedSubpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|toPrefGroup
decl_stmt|;
name|toDepartment
operator|=
name|toSchedSubpart
operator|.
name|getManagingDept
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|toPrefGroup
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|toClass_
init|=
operator|(
name|Class_
operator|)
name|toPrefGroup
decl_stmt|;
name|toDepartment
operator|=
name|toClass_
operator|.
name|getManagingDept
argument_list|()
expr_stmt|;
if|if
condition|(
name|toDepartment
operator|==
literal|null
condition|)
block|{
name|toDepartment
operator|=
name|toClass_
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingDept
argument_list|()
expr_stmt|;
block|}
block|}
return|return
operator|(
name|toDepartment
operator|)
return|;
block|}
specifier|protected
name|void
name|rollForwardBuildingPrefs
parameter_list|(
name|PreferenceGroup
name|fromPrefGroup
parameter_list|,
name|PreferenceGroup
name|toPrefGroup
parameter_list|,
name|Session
name|toSession
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|fromPrefGroup
operator|.
name|getBuildingPreferences
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromPrefGroup
operator|.
name|getBuildingPreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|BuildingPref
name|fromBuildingPref
init|=
literal|null
decl_stmt|;
name|BuildingPref
name|toBuildingPref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|fromPrefGroup
operator|.
name|getBuildingPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromBuildingPref
operator|=
operator|(
name|BuildingPref
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|Building
name|b
init|=
name|fromBuildingPref
operator|.
name|getBuilding
argument_list|()
operator|.
name|findSameBuildingInSession
argument_list|(
name|toSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|toBuildingPref
operator|=
operator|new
name|BuildingPref
argument_list|()
expr_stmt|;
name|toBuildingPref
operator|.
name|setBuilding
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|toBuildingPref
operator|.
name|setPrefLevel
argument_list|(
name|fromBuildingPref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|toBuildingPref
operator|.
name|setDistanceFrom
argument_list|(
name|fromBuildingPref
operator|.
name|getDistanceFrom
argument_list|()
argument_list|)
expr_stmt|;
name|toBuildingPref
operator|.
name|setOwner
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTopreferences
argument_list|(
name|toBuildingPref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|rollForwardRoomPrefs
parameter_list|(
name|PreferenceGroup
name|fromPrefGroup
parameter_list|,
name|PreferenceGroup
name|toPrefGroup
parameter_list|,
name|Session
name|toSession
parameter_list|)
block|{
if|if
condition|(
name|fromPrefGroup
operator|.
name|getRoomPreferences
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromPrefGroup
operator|.
name|getRoomPreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RoomPref
name|fromRoomPref
init|=
literal|null
decl_stmt|;
name|RoomPref
name|toRoomPref
init|=
literal|null
decl_stmt|;
name|Department
name|toDepartment
init|=
name|findToManagingDepartmentForPrefGroup
argument_list|(
name|toPrefGroup
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|getRoomList
argument_list|()
operator|.
name|containsKey
argument_list|(
name|toDepartment
argument_list|)
condition|)
block|{
name|getRoomList
argument_list|()
operator|.
name|put
argument_list|(
name|toDepartment
argument_list|,
name|buildRoomListForDepartment
argument_list|(
name|toDepartment
argument_list|,
name|toSession
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
name|l
init|=
operator|(
name|Set
operator|)
name|getRoomList
argument_list|()
operator|.
name|get
argument_list|(
name|toDepartment
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
name|l
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|fromPrefGroup
operator|.
name|getRoomPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromRoomPref
operator|=
operator|(
name|RoomPref
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|toRoomPref
operator|=
operator|new
name|RoomPref
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromRoomPref
operator|.
name|getRoom
argument_list|()
operator|instanceof
name|Room
condition|)
block|{
name|Room
name|fromRoom
init|=
operator|(
name|Room
operator|)
name|fromRoomPref
operator|.
name|getRoom
argument_list|()
decl_stmt|;
name|Location
name|loc
init|=
literal|null
decl_stmt|;
name|Room
name|toRoom
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|rmIt
init|=
name|l
operator|.
name|iterator
argument_list|()
init|;
name|rmIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|loc
operator|=
operator|(
name|Location
operator|)
name|rmIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|loc
operator|instanceof
name|Room
condition|)
block|{
name|toRoom
operator|=
operator|(
name|Room
operator|)
name|loc
expr_stmt|;
if|if
condition|(
name|toRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|fromRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
operator|&&
name|toRoom
operator|.
name|getRoomNumber
argument_list|()
operator|.
name|equals
argument_list|(
name|fromRoom
operator|.
name|getRoomNumber
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
name|toRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|fromRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
operator|&&
name|toRoom
operator|.
name|getRoomNumber
argument_list|()
operator|.
name|equals
argument_list|(
name|fromRoom
operator|.
name|getRoomNumber
argument_list|()
argument_list|)
condition|)
block|{
name|toRoomPref
operator|.
name|setRoom
argument_list|(
name|toRoom
argument_list|)
expr_stmt|;
name|toRoomPref
operator|.
name|setPrefLevel
argument_list|(
name|fromRoomPref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|toRoomPref
operator|.
name|setOwner
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTopreferences
argument_list|(
name|toRoomPref
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|fromRoomPref
operator|.
name|getRoom
argument_list|()
operator|instanceof
name|NonUniversityLocation
condition|)
block|{
name|NonUniversityLocation
name|fromNonUniversityLocation
init|=
operator|(
name|NonUniversityLocation
operator|)
name|fromRoomPref
operator|.
name|getRoom
argument_list|()
decl_stmt|;
name|Location
name|loc
init|=
literal|null
decl_stmt|;
name|NonUniversityLocation
name|toNonUniversityLocation
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|rmIt
init|=
name|l
operator|.
name|iterator
argument_list|()
init|;
name|rmIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|loc
operator|=
operator|(
name|Location
operator|)
name|rmIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|loc
operator|instanceof
name|NonUniversityLocation
condition|)
block|{
name|toNonUniversityLocation
operator|=
operator|(
name|NonUniversityLocation
operator|)
name|loc
expr_stmt|;
if|if
condition|(
name|toNonUniversityLocation
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|fromNonUniversityLocation
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
name|toNonUniversityLocation
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|fromNonUniversityLocation
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|toRoomPref
operator|.
name|setRoom
argument_list|(
name|toNonUniversityLocation
argument_list|)
expr_stmt|;
name|toRoomPref
operator|.
name|setPrefLevel
argument_list|(
name|fromRoomPref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|toRoomPref
operator|.
name|setOwner
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTopreferences
argument_list|(
name|toRoomPref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|rollForwardRoomFeaturePrefs
parameter_list|(
name|PreferenceGroup
name|fromPrefGroup
parameter_list|,
name|PreferenceGroup
name|toPrefGroup
parameter_list|)
block|{
if|if
condition|(
name|fromPrefGroup
operator|.
name|getRoomFeaturePreferences
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromPrefGroup
operator|.
name|getRoomFeaturePreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RoomFeaturePref
name|fromRoomFeaturePref
init|=
literal|null
decl_stmt|;
name|RoomFeaturePref
name|toRoomFeaturePref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|fromPrefGroup
operator|.
name|getRoomFeaturePreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromRoomFeaturePref
operator|=
operator|(
name|RoomFeaturePref
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|toRoomFeaturePref
operator|=
operator|new
name|RoomFeaturePref
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromRoomFeaturePref
operator|.
name|getRoomFeature
argument_list|()
operator|instanceof
name|GlobalRoomFeature
condition|)
block|{
name|GlobalRoomFeature
name|grf
init|=
operator|(
name|GlobalRoomFeature
operator|)
name|fromRoomFeaturePref
operator|.
name|getRoomFeature
argument_list|()
decl_stmt|;
name|toRoomFeaturePref
operator|.
name|setRoomFeature
argument_list|(
name|grf
argument_list|)
expr_stmt|;
name|toRoomFeaturePref
operator|.
name|setPrefLevel
argument_list|(
name|fromRoomFeaturePref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|toRoomFeaturePref
operator|.
name|setOwner
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTopreferences
argument_list|(
name|toRoomFeaturePref
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Department
name|toDepartment
init|=
name|findToManagingDepartmentForPrefGroup
argument_list|(
name|toPrefGroup
argument_list|)
decl_stmt|;
name|Collection
name|l
init|=
name|DepartmentRoomFeature
operator|.
name|getAllDepartmentRoomFeatures
argument_list|(
name|toDepartment
argument_list|)
decl_stmt|;
name|DepartmentRoomFeature
name|fromDepartmentRoomFeature
init|=
operator|(
name|DepartmentRoomFeature
operator|)
name|fromRoomFeaturePref
operator|.
name|getRoomFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
name|l
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|DepartmentRoomFeature
name|toDepartmentRoomFeature
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|rfIt
init|=
name|l
operator|.
name|iterator
argument_list|()
init|;
name|rfIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|toDepartmentRoomFeature
operator|=
operator|(
name|DepartmentRoomFeature
operator|)
name|rfIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|toDepartmentRoomFeature
operator|.
name|getLabel
argument_list|()
operator|.
name|equals
argument_list|(
name|fromDepartmentRoomFeature
operator|.
name|getLabel
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|toDepartmentRoomFeature
operator|.
name|getLabel
argument_list|()
operator|.
name|equals
argument_list|(
name|fromDepartmentRoomFeature
operator|.
name|getLabel
argument_list|()
argument_list|)
condition|)
block|{
name|toRoomFeaturePref
operator|.
name|setRoomFeature
argument_list|(
name|toDepartmentRoomFeature
argument_list|)
expr_stmt|;
name|toRoomFeaturePref
operator|.
name|setPrefLevel
argument_list|(
name|fromRoomFeaturePref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|toRoomFeaturePref
operator|.
name|setOwner
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTopreferences
argument_list|(
name|toRoomFeaturePref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|rollForwardRoomGroupPrefs
parameter_list|(
name|PreferenceGroup
name|fromPrefGroup
parameter_list|,
name|PreferenceGroup
name|toPrefGroup
parameter_list|)
block|{
if|if
condition|(
name|fromPrefGroup
operator|.
name|getRoomGroupPreferences
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromPrefGroup
operator|.
name|getRoomGroupPreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RoomGroupPref
name|fromRoomGroupPref
init|=
literal|null
decl_stmt|;
name|RoomGroupPref
name|toRoomGroupPref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|fromPrefGroup
operator|.
name|getRoomGroupPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromRoomGroupPref
operator|=
operator|(
name|RoomGroupPref
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|toRoomGroupPref
operator|=
operator|new
name|RoomGroupPref
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromRoomGroupPref
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|isDefaultGroup
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|toRoomGroupPref
operator|.
name|setRoomGroup
argument_list|(
name|fromRoomGroupPref
operator|.
name|getRoomGroup
argument_list|()
argument_list|)
expr_stmt|;
name|toRoomGroupPref
operator|.
name|setPrefLevel
argument_list|(
name|fromRoomGroupPref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|toRoomGroupPref
operator|.
name|setOwner
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTopreferences
argument_list|(
name|toRoomGroupPref
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Department
name|toDepartment
init|=
name|findToManagingDepartmentForPrefGroup
argument_list|(
name|toPrefGroup
argument_list|)
decl_stmt|;
name|Collection
name|l
init|=
name|RoomGroup
operator|.
name|getAllDepartmentRoomGroups
argument_list|(
name|toDepartment
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
name|l
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|RoomGroup
name|toRoomGroup
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|itRg
init|=
name|l
operator|.
name|iterator
argument_list|()
init|;
name|itRg
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|toRoomGroup
operator|=
operator|(
name|RoomGroup
operator|)
name|itRg
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|toRoomGroup
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|fromRoomGroupPref
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|toRoomGroup
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|fromRoomGroupPref
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|toRoomGroupPref
operator|.
name|setRoomGroup
argument_list|(
name|toRoomGroup
argument_list|)
expr_stmt|;
name|toRoomGroupPref
operator|.
name|setPrefLevel
argument_list|(
name|fromRoomGroupPref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|toRoomGroupPref
operator|.
name|setOwner
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTopreferences
argument_list|(
name|toRoomGroupPref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|rollForwardTimePrefs
parameter_list|(
name|PreferenceGroup
name|fromPrefGroup
parameter_list|,
name|PreferenceGroup
name|toPrefGroup
parameter_list|,
name|Session
name|toSession
parameter_list|)
block|{
if|if
condition|(
name|fromPrefGroup
operator|.
name|getTimePreferences
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromPrefGroup
operator|.
name|getTimePreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TimePref
name|fromTimePref
init|=
literal|null
decl_stmt|;
name|TimePref
name|toTimePref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|fromPrefGroup
operator|.
name|getTimePreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromTimePref
operator|=
operator|(
name|TimePref
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromTimePref
operator|.
name|getTimePattern
argument_list|()
operator|==
literal|null
condition|)
block|{
name|toTimePref
operator|=
operator|(
name|TimePref
operator|)
name|fromTimePref
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|toTimePref
operator|=
name|TimePattern
operator|.
name|getMatchingTimePreference
argument_list|(
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|fromTimePref
argument_list|)
expr_stmt|;
block|}
name|toTimePref
operator|.
name|setOwner
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTopreferences
argument_list|(
name|toTimePref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|rollForwardDistributionPrefs
parameter_list|(
name|PreferenceGroup
name|fromPrefGroup
parameter_list|,
name|PreferenceGroup
name|toPrefGroup
parameter_list|,
name|Session
name|toSession
parameter_list|)
block|{
if|if
condition|(
name|fromPrefGroup
operator|.
name|getDistributionObjects
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromPrefGroup
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|DistributionObject
name|fromDistObj
init|=
literal|null
decl_stmt|;
name|DistributionObject
name|toDistObj
init|=
literal|null
decl_stmt|;
name|DistributionPref
name|fromDistributionPref
init|=
literal|null
decl_stmt|;
name|DistributionPref
name|toDistributionPref
init|=
literal|null
decl_stmt|;
name|DistributionPrefDAO
name|dpDao
init|=
operator|new
name|DistributionPrefDAO
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|fromPrefGroup
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromDistObj
operator|=
operator|(
name|DistributionObject
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|toDistObj
operator|=
operator|new
name|DistributionObject
argument_list|()
expr_stmt|;
name|fromDistributionPref
operator|=
name|fromDistObj
operator|.
name|getDistributionPref
argument_list|()
expr_stmt|;
name|toDistributionPref
operator|=
name|DistributionPref
operator|.
name|findByIdRolledForwardFrom
argument_list|(
name|fromDistributionPref
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDistributionPref
operator|==
literal|null
condition|)
block|{
name|toDistributionPref
operator|=
operator|new
name|DistributionPref
argument_list|()
expr_stmt|;
name|toDistributionPref
operator|.
name|setDistributionType
argument_list|(
name|fromDistributionPref
operator|.
name|getDistributionType
argument_list|()
argument_list|)
expr_stmt|;
name|toDistributionPref
operator|.
name|setGrouping
argument_list|(
name|fromDistributionPref
operator|.
name|getGrouping
argument_list|()
argument_list|)
expr_stmt|;
name|toDistributionPref
operator|.
name|setPrefLevel
argument_list|(
name|fromDistributionPref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|toDistributionPref
operator|.
name|setUniqueIdRolledForwardFrom
argument_list|(
name|fromDistributionPref
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|Department
name|toDept
init|=
name|Department
operator|.
name|findByDeptCode
argument_list|(
operator|(
operator|(
name|Department
operator|)
name|fromDistributionPref
operator|.
name|getOwner
argument_list|()
operator|)
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|toDept
operator|!=
literal|null
condition|)
block|{
name|toDistributionPref
operator|.
name|setOwner
argument_list|(
name|toDept
argument_list|)
expr_stmt|;
name|toDept
operator|.
name|addTopreferences
argument_list|(
name|toDistributionPref
argument_list|)
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
block|}
name|toDistObj
operator|.
name|setDistributionPref
argument_list|(
name|toDistributionPref
argument_list|)
expr_stmt|;
name|toDistObj
operator|.
name|setPrefGroup
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toDistObj
operator|.
name|setSequenceNumber
argument_list|(
name|fromDistObj
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTodistributionObjects
argument_list|(
name|toDistObj
argument_list|)
expr_stmt|;
name|dpDao
operator|.
name|saveOrUpdate
argument_list|(
name|toDistributionPref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|rollInstructorDistributionPrefs
parameter_list|(
name|DepartmentalInstructor
name|fromInstructor
parameter_list|,
name|DepartmentalInstructor
name|toInstructor
parameter_list|)
block|{
if|if
condition|(
name|fromInstructor
operator|.
name|getDistributionPreferences
argument_list|()
operator|!=
literal|null
operator|&&
name|fromInstructor
operator|.
name|getDistributionPreferences
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|DistributionPref
name|fromDistributionPref
init|=
literal|null
decl_stmt|;
name|DistributionPref
name|toDistributionPref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|fromInstructor
operator|.
name|getDistributionPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromDistributionPref
operator|=
operator|(
name|DistributionPref
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|toDistributionPref
operator|=
operator|new
name|DistributionPref
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromDistributionPref
operator|.
name|getDistributionType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|toDistributionPref
operator|.
name|setDistributionType
argument_list|(
name|fromDistributionPref
operator|.
name|getDistributionType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fromDistributionPref
operator|.
name|getGrouping
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|toDistributionPref
operator|.
name|setGrouping
argument_list|(
name|fromDistributionPref
operator|.
name|getGrouping
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|toDistributionPref
operator|.
name|setPrefLevel
argument_list|(
name|fromDistributionPref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|toDistributionPref
operator|.
name|setOwner
argument_list|(
name|toInstructor
argument_list|)
expr_stmt|;
name|toInstructor
operator|.
name|addTopreferences
argument_list|(
name|toDistributionPref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|rollInstructorDataForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|RollForwardSessionForm
name|rollForwardSessionForm
parameter_list|)
block|{
name|Session
name|toSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollForwardTo
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|fromSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollInstructorDataForwardFrom
argument_list|()
argument_list|)
decl_stmt|;
name|DepartmentalInstructor
name|toInstructor
init|=
literal|null
decl_stmt|;
name|DepartmentalInstructor
name|fromInstructor
init|=
literal|null
decl_stmt|;
name|DepartmentalInstructorDAO
name|iDao
init|=
operator|new
name|DepartmentalInstructorDAO
argument_list|()
decl_stmt|;
name|Department
name|toDepartment
init|=
literal|null
decl_stmt|;
name|Department
name|fromDepartment
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|fromSession
operator|.
name|getDepartments
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|dIt
init|=
name|fromSession
operator|.
name|getDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|dIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromDepartment
operator|=
operator|(
name|Department
operator|)
name|dIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromDepartment
operator|!=
literal|null
operator|&&
name|fromDepartment
operator|.
name|getInstructors
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromDepartment
operator|.
name|getInstructors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|toDepartment
operator|=
name|fromDepartment
operator|.
name|findSameDepartmentInSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDepartment
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|iIt
init|=
name|fromDepartment
operator|.
name|getInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromInstructor
operator|=
operator|(
name|DepartmentalInstructor
operator|)
name|iIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|toInstructor
operator|=
operator|(
name|DepartmentalInstructor
operator|)
name|fromInstructor
operator|.
name|clone
argument_list|()
expr_stmt|;
name|toInstructor
operator|.
name|setDepartment
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|rollForwardBuildingPrefs
argument_list|(
name|fromInstructor
argument_list|,
name|toInstructor
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
name|rollForwardRoomPrefs
argument_list|(
name|fromInstructor
argument_list|,
name|toInstructor
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
name|rollForwardRoomFeaturePrefs
argument_list|(
name|fromInstructor
argument_list|,
name|toInstructor
argument_list|)
expr_stmt|;
name|rollForwardRoomGroupPrefs
argument_list|(
name|fromInstructor
argument_list|,
name|toInstructor
argument_list|)
expr_stmt|;
name|rollForwardTimePrefs
argument_list|(
name|fromInstructor
argument_list|,
name|toInstructor
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
name|rollInstructorDistributionPrefs
argument_list|(
name|fromInstructor
argument_list|,
name|toInstructor
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromInstructor
operator|.
name|getDesignatorSubjectAreas
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromInstructor
operator|.
name|getDesignatorSubjectAreas
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Designator
name|fromDesignator
init|=
literal|null
decl_stmt|;
name|Designator
name|toDesignator
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|dsIt
init|=
name|fromInstructor
operator|.
name|getDesignatorSubjectAreas
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|dsIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromDesignator
operator|=
operator|(
name|Designator
operator|)
name|dsIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|toDesignator
operator|=
operator|new
name|Designator
argument_list|()
expr_stmt|;
name|toDesignator
operator|.
name|setCode
argument_list|(
name|fromDesignator
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|toDesignator
operator|.
name|setInstructor
argument_list|(
name|toInstructor
argument_list|)
expr_stmt|;
name|toDesignator
operator|.
name|setSubjectArea
argument_list|(
name|SubjectArea
operator|.
name|findByAbbv
argument_list|(
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|fromDesignator
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDesignator
operator|.
name|getSubjectArea
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|toDesignator
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|addTodesignatorInstructors
argument_list|(
name|toDesignator
argument_list|)
expr_stmt|;
name|toInstructor
operator|.
name|addTodesignatorSubjectAreas
argument_list|(
name|toDesignator
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|iDao
operator|.
name|saveOrUpdate
argument_list|(
name|toInstructor
argument_list|)
expr_stmt|;
name|iDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|iDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|toInstructor
argument_list|)
expr_stmt|;
name|iDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|fromInstructor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|iDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|iDao
operator|.
name|getSession
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"rollForward"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.rollForward"
argument_list|,
literal|"Instructors"
argument_list|,
name|fromSession
operator|.
name|getLabel
argument_list|()
argument_list|,
name|toSession
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|"Failed to roll all instructors forward."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//	public void rollCourseOfferingsForwardFromMsf(ActionMessages errors, RollForwardSessionForm rollForwardSessionForm) {
comment|//		Session toSession = Session.getSessionById(rollForwardSessionForm.getSessionToRollForwardTo());
comment|//		Session fromSession = Session.getSessionById(rollForwardSessionForm.getSessionToRollCourseOfferingsForwardFrom());
comment|//		if (toSession.getSubjectAreas() != null) {
comment|//			SubjectArea subjectArea = null;
comment|//			edu.purdue.smas.custom.util.PopulateSessionFromMsf pop = new edu.purdue.smas.custom.util.PopulateSessionFromMsf();
comment|////			InstructionalOfferingRollForward instrOffrRollFwd = new InstructionalOfferingRollForward();
comment|//			SubjectArea.loadSubjectAreas(toSession.getUniqueId());
comment|//			for (Iterator saIt = toSession.getSubjectAreas().iterator(); saIt.hasNext();){
comment|//				subjectArea = (SubjectArea) saIt.next();
comment|////				if (subjectArea.getSubjectAreaAbbreviation().compareTo("MGMT") == 0){
comment|//				SubjectArea.loadSubjectAreas(toSession.getUniqueId());
comment|//				pop.populateSubjectArea(subjectArea, toSession, fromSession);
comment|////				}
comment|////				instrOffrRollFwd.rollForwardInstructionalOfferingsForASubjectArea(subjectArea.getSubjectAreaAbbreviation(), fromSession, toSession);
comment|//
comment|//			}
comment|//		}
comment|//	}
specifier|public
name|void
name|rollCourseOfferingsForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|RollForwardSessionForm
name|rollForwardSessionForm
parameter_list|)
block|{
name|Session
name|toSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollForwardTo
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|fromSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollCourseOfferingsForwardFrom
argument_list|()
argument_list|)
decl_stmt|;
name|ArrayList
name|subjects
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|SubjectAreaDAO
name|saDao
init|=
operator|new
name|SubjectAreaDAO
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rollForwardSessionForm
operator|.
name|getRollForwardSubjectAreaIds
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|subjects
operator|.
name|add
argument_list|(
name|saDao
operator|.
name|get
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|rollForwardSessionForm
operator|.
name|getRollForwardSubjectAreaIds
argument_list|()
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|toSession
operator|.
name|getSubjectAreas
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SubjectArea
name|subjectArea
init|=
literal|null
decl_stmt|;
name|InstructionalOfferingRollForward
name|instrOffrRollFwd
init|=
operator|new
name|InstructionalOfferingRollForward
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|saIt
init|=
name|subjects
operator|.
name|iterator
argument_list|()
init|;
name|saIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|subjectArea
operator|=
operator|(
name|SubjectArea
operator|)
name|saIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|SubjectArea
operator|.
name|loadSubjectAreas
argument_list|(
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|instrOffrRollFwd
operator|.
name|rollForwardInstructionalOfferingsForASubjectArea
argument_list|(
name|subjectArea
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|,
name|fromSession
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|String
name|buildRoomQueryForDepartment
parameter_list|(
name|Department
name|dept
parameter_list|,
name|Session
name|sess
parameter_list|,
name|String
name|locType
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"select l from "
operator|+
name|locType
operator|+
literal|" as l inner join l.roomDepts as rd where l.session.uniqueId = "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|sess
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" and ( rd.department.uniqueId = "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|dept
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" or rd.department.externalManager = true ) "
argument_list|)
expr_stmt|;
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|private
specifier|static
name|Set
name|buildRoomListForDepartment
parameter_list|(
name|Department
name|department
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|TreeSet
name|ts
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
name|RoomDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getQuery
argument_list|(
name|buildRoomQueryForDepartment
argument_list|(
name|department
argument_list|,
name|session
argument_list|,
literal|"Room"
argument_list|)
argument_list|)
operator|.
name|iterate
argument_list|()
decl_stmt|;
name|Room
name|r
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|r
operator|=
operator|(
name|Room
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|RoomDept
name|rd
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it2
init|=
name|r
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|rd
operator|=
operator|(
name|RoomDept
operator|)
name|it2
operator|.
name|next
argument_list|()
expr_stmt|;
name|rd
operator|.
name|getDepartment
argument_list|()
expr_stmt|;
block|}
name|ts
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|it
operator|=
name|NonUniversityLocationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getQuery
argument_list|(
name|buildRoomQueryForDepartment
argument_list|(
name|department
argument_list|,
name|session
argument_list|,
literal|"NonUniversityLocation"
argument_list|)
argument_list|)
operator|.
name|iterate
argument_list|()
expr_stmt|;
name|NonUniversityLocation
name|l
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|l
operator|=
operator|(
name|NonUniversityLocation
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|RoomDept
name|rd
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it2
init|=
name|l
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|rd
operator|=
operator|(
name|RoomDept
operator|)
name|it2
operator|.
name|next
argument_list|()
expr_stmt|;
name|rd
operator|.
name|getDepartment
argument_list|()
expr_stmt|;
block|}
name|ts
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|ts
operator|)
return|;
block|}
specifier|public
specifier|static
name|HashMap
name|getRoomList
parameter_list|()
block|{
if|if
condition|(
name|roomList
operator|==
literal|null
condition|)
block|{
name|roomList
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
return|return
name|roomList
return|;
block|}
specifier|public
name|boolean
name|sessionHasCourseCatalog
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|false
operator|)
return|;
block|}
if|if
condition|(
operator|!
name|getSessionHasCourseCatalogList
argument_list|()
operator|.
name|containsKey
argument_list|(
name|session
argument_list|)
condition|)
block|{
name|CourseCatalogDAO
name|ccDao
init|=
operator|new
name|CourseCatalogDAO
argument_list|()
decl_stmt|;
name|List
name|l
init|=
name|ccDao
operator|.
name|getQuery
argument_list|(
literal|"select count(cc) from CourseCatalog cc where cc.session.uniqueId ="
operator|+
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
operator|!
name|l
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cnt
operator|=
operator|(
operator|(
name|Long
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|getSessionHasCourseCatalogList
argument_list|()
operator|.
name|put
argument_list|(
name|session
argument_list|,
operator|new
name|Boolean
argument_list|(
name|cnt
operator|!=
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
operator|(
operator|(
name|Boolean
operator|)
name|getSessionHasCourseCatalogList
argument_list|()
operator|.
name|get
argument_list|(
name|session
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
operator|)
return|;
block|}
specifier|public
specifier|static
name|HashMap
name|getSessionHasCourseCatalogList
parameter_list|()
block|{
if|if
condition|(
name|sessionHasCourseCatalogList
operator|==
literal|null
condition|)
block|{
name|sessionHasCourseCatalogList
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|sessionHasCourseCatalogList
operator|)
return|;
block|}
specifier|public
name|boolean
name|sessionHasExternalBuildingList
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getSessionHasExternalBuildingList
argument_list|()
operator|.
name|containsKey
argument_list|(
name|session
argument_list|)
condition|)
block|{
name|ExternalBuildingDAO
name|ebDao
init|=
operator|new
name|ExternalBuildingDAO
argument_list|()
decl_stmt|;
name|List
name|l
init|=
name|ebDao
operator|.
name|getQuery
argument_list|(
literal|"select count(eb) from ExternalBuilding eb where eb.session.uniqueId ="
operator|+
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
operator|!
name|l
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cnt
operator|=
operator|(
operator|(
name|Long
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|getSessionHasExternalBuildingList
argument_list|()
operator|.
name|put
argument_list|(
name|session
argument_list|,
operator|new
name|Boolean
argument_list|(
name|cnt
operator|!=
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
operator|(
operator|(
name|Boolean
operator|)
name|getSessionHasExternalBuildingList
argument_list|()
operator|.
name|get
argument_list|(
name|session
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
operator|)
return|;
block|}
specifier|public
specifier|static
name|HashMap
name|getSessionHasExternalBuildingList
parameter_list|()
block|{
if|if
condition|(
name|sessionHasExternalBuildingList
operator|==
literal|null
condition|)
block|{
name|sessionHasExternalBuildingList
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|sessionHasExternalBuildingList
operator|)
return|;
block|}
specifier|public
name|boolean
name|sessionHasExternalRoomList
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getSessionHasExternalRoomList
argument_list|()
operator|.
name|containsKey
argument_list|(
name|session
argument_list|)
condition|)
block|{
name|ExternalRoomDAO
name|erDao
init|=
operator|new
name|ExternalRoomDAO
argument_list|()
decl_stmt|;
name|List
name|l
init|=
name|erDao
operator|.
name|getQuery
argument_list|(
literal|"select count(er) from ExternalRoom er where er.building.session.uniqueId ="
operator|+
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
operator|!
name|l
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cnt
operator|=
operator|(
operator|(
name|Long
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|getSessionHasExternalRoomList
argument_list|()
operator|.
name|put
argument_list|(
name|session
argument_list|,
operator|new
name|Boolean
argument_list|(
name|cnt
operator|!=
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
operator|(
operator|(
name|Boolean
operator|)
name|getSessionHasExternalRoomList
argument_list|()
operator|.
name|get
argument_list|(
name|session
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
operator|)
return|;
block|}
specifier|public
specifier|static
name|HashMap
name|getSessionHasExternalRoomList
parameter_list|()
block|{
if|if
condition|(
name|sessionHasExternalRoomList
operator|==
literal|null
condition|)
block|{
name|sessionHasExternalRoomList
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|sessionHasExternalRoomList
operator|)
return|;
block|}
specifier|public
name|boolean
name|sessionHasExternalRoomDeptList
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getSessionHasExternalRoomDeptList
argument_list|()
operator|.
name|containsKey
argument_list|(
name|session
argument_list|)
condition|)
block|{
name|ExternalRoomDepartmentDAO
name|erdDao
init|=
operator|new
name|ExternalRoomDepartmentDAO
argument_list|()
decl_stmt|;
name|List
name|l
init|=
name|erdDao
operator|.
name|getQuery
argument_list|(
literal|"select count(erd) from ExternalRoomDepartment erd where erd.room.building.session.uniqueId ="
operator|+
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
operator|!
name|l
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cnt
operator|=
operator|(
operator|(
name|Long
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|getSessionHasExternalRoomDeptList
argument_list|()
operator|.
name|put
argument_list|(
name|session
argument_list|,
operator|new
name|Boolean
argument_list|(
name|cnt
operator|!=
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
operator|(
operator|(
name|Boolean
operator|)
name|getSessionHasExternalRoomDeptList
argument_list|()
operator|.
name|get
argument_list|(
name|session
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
operator|)
return|;
block|}
specifier|public
specifier|static
name|HashMap
name|getSessionHasExternalRoomDeptList
parameter_list|()
block|{
if|if
condition|(
name|sessionHasExternalRoomDeptList
operator|==
literal|null
condition|)
block|{
name|sessionHasExternalRoomDeptList
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|sessionHasExternalRoomDeptList
operator|)
return|;
block|}
specifier|public
name|boolean
name|sessionHasExternalRoomFeatureList
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getSessionHasExternalRoomFeatureList
argument_list|()
operator|.
name|containsKey
argument_list|(
name|session
argument_list|)
condition|)
block|{
name|ExternalRoomFeatureDAO
name|erfDao
init|=
operator|new
name|ExternalRoomFeatureDAO
argument_list|()
decl_stmt|;
name|List
name|l
init|=
name|erfDao
operator|.
name|getQuery
argument_list|(
literal|"select count(erf) from ExternalRoomFeature erf where erf.room.building.session.uniqueId ="
operator|+
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
operator|!
name|l
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cnt
operator|=
operator|(
operator|(
name|Long
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|getSessionHasExternalRoomFeatureList
argument_list|()
operator|.
name|put
argument_list|(
name|session
argument_list|,
operator|new
name|Boolean
argument_list|(
name|cnt
operator|!=
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
operator|(
operator|(
name|Boolean
operator|)
name|getSessionHasExternalRoomFeatureList
argument_list|()
operator|.
name|get
argument_list|(
name|session
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
operator|)
return|;
block|}
specifier|public
specifier|static
name|HashMap
name|getSessionHasExternalRoomFeatureList
parameter_list|()
block|{
if|if
condition|(
name|sessionHasExternalRoomFeatureList
operator|==
literal|null
condition|)
block|{
name|sessionHasExternalRoomFeatureList
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|sessionHasExternalRoomFeatureList
operator|)
return|;
block|}
specifier|public
name|void
name|rollTimePatternsForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|RollForwardSessionForm
name|rollForwardSessionForm
parameter_list|)
block|{
name|Session
name|toSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollForwardTo
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|fromSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollTimePatternsForwardFrom
argument_list|()
argument_list|)
decl_stmt|;
name|Vector
name|fromDatePatterns
init|=
name|TimePattern
operator|.
name|findAll
argument_list|(
name|fromSession
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|TimePattern
name|fromTimePattern
init|=
literal|null
decl_stmt|;
name|TimePattern
name|toTimePattern
init|=
literal|null
decl_stmt|;
name|TimePatternDAO
name|tpDao
init|=
operator|new
name|TimePatternDAO
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|fromDatePatterns
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromTimePattern
operator|=
operator|(
name|TimePattern
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromTimePattern
operator|!=
literal|null
condition|)
block|{
name|toTimePattern
operator|=
operator|(
name|TimePattern
operator|)
name|fromTimePattern
operator|.
name|clone
argument_list|()
expr_stmt|;
name|toTimePattern
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
name|tpDao
operator|.
name|saveOrUpdate
argument_list|(
name|toTimePattern
argument_list|)
expr_stmt|;
name|tpDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
name|tpDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tpDao
operator|.
name|getSession
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"rollForward"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.rollForward"
argument_list|,
literal|"Time Patterns"
argument_list|,
name|fromSession
operator|.
name|getLabel
argument_list|()
argument_list|,
name|toSession
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|"Failed to roll all time patterns forward."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|rollClassPreferencesForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|RollForwardSessionForm
name|rollForwardSessionForm
parameter_list|)
throws|throws
name|Exception
block|{
name|Session
name|toSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollForwardTo
argument_list|()
argument_list|)
decl_stmt|;
name|ArrayList
name|subjects
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|SubjectAreaDAO
name|saDao
init|=
operator|new
name|SubjectAreaDAO
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rollForwardSessionForm
operator|.
name|getRollForwardClassPrefsSubjectIds
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|subjects
operator|.
name|add
argument_list|(
name|saDao
operator|.
name|get
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|rollForwardSessionForm
operator|.
name|getRollForwardClassPrefsSubjectIds
argument_list|()
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|toSession
operator|.
name|getSubjectAreas
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SubjectArea
name|subjectArea
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|saIt
init|=
name|subjects
operator|.
name|iterator
argument_list|()
init|;
name|saIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|subjectArea
operator|=
operator|(
name|SubjectArea
operator|)
name|saIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|SubjectArea
operator|.
name|loadSubjectAreas
argument_list|(
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|rollForwardClassPreferencesForASubjectArea
argument_list|(
name|subjectArea
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|rollForwardClassPreferencesForASubjectArea
parameter_list|(
name|String
name|subjectAreaAbbreviation
parameter_list|,
name|Session
name|toSession
parameter_list|)
throws|throws
name|Exception
block|{
name|List
name|classes
init|=
name|Class_
operator|.
name|findAllForControllingSubjectArea
argument_list|(
name|subjectAreaAbbreviation
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|Class_
name|toClass
init|=
literal|null
decl_stmt|;
name|Class_
name|fromClass
init|=
literal|null
decl_stmt|;
name|Class_DAO
name|cDao
init|=
operator|new
name|Class_DAO
argument_list|()
decl_stmt|;
if|if
condition|(
name|classes
operator|!=
literal|null
operator|&&
operator|!
name|classes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|cIt
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|cIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|toClass
operator|=
operator|(
name|Class_
operator|)
name|cIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|toClass
operator|.
name|getUniqueIdRolledForwardFrom
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|fromClass
operator|=
name|cDao
operator|.
name|get
argument_list|(
name|toClass
operator|.
name|getUniqueIdRolledForwardFrom
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromClass
operator|!=
literal|null
condition|)
block|{
name|rollForwardTimePrefs
argument_list|(
name|fromClass
argument_list|,
name|toClass
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
name|rollForwardBuildingPrefs
argument_list|(
name|fromClass
argument_list|,
name|toClass
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
name|rollForwardRoomPrefs
argument_list|(
name|fromClass
argument_list|,
name|toClass
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
name|rollForwardRoomGroupPrefs
argument_list|(
name|fromClass
argument_list|,
name|toClass
argument_list|)
expr_stmt|;
name|rollForwardRoomFeaturePrefs
argument_list|(
name|fromClass
argument_list|,
name|toClass
argument_list|)
expr_stmt|;
name|rollForwardDistributionPrefs
argument_list|(
name|fromClass
argument_list|,
name|toClass
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
name|cDao
operator|.
name|update
argument_list|(
name|toClass
argument_list|)
expr_stmt|;
name|cDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|fromClass
argument_list|)
expr_stmt|;
block|}
block|}
name|cDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|toClass
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|rollClassInstructorsForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|RollForwardSessionForm
name|rollForwardSessionForm
parameter_list|)
block|{
name|Session
name|toSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollForwardTo
argument_list|()
argument_list|)
decl_stmt|;
name|ArrayList
name|subjects
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|SubjectAreaDAO
name|saDao
init|=
operator|new
name|SubjectAreaDAO
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rollForwardSessionForm
operator|.
name|getRollForwardClassInstrSubjectIds
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|subjects
operator|.
name|add
argument_list|(
name|saDao
operator|.
name|get
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|rollForwardSessionForm
operator|.
name|getRollForwardClassInstrSubjectIds
argument_list|()
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|toSession
operator|.
name|getSubjectAreas
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SubjectArea
name|subjectArea
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|saIt
init|=
name|subjects
operator|.
name|iterator
argument_list|()
init|;
name|saIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|subjectArea
operator|=
operator|(
name|SubjectArea
operator|)
name|saIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|SubjectArea
operator|.
name|loadSubjectAreas
argument_list|(
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|rollForwardClassInstructorsForASubjectArea
argument_list|(
name|subjectArea
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|rollForwardClassInstructorsForASubjectArea
parameter_list|(
name|String
name|subjectAreaAbbreviation
parameter_list|,
name|Session
name|toSession
parameter_list|)
block|{
name|List
name|classes
init|=
name|Class_
operator|.
name|findAllForControllingSubjectArea
argument_list|(
name|subjectAreaAbbreviation
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|classes
operator|!=
literal|null
operator|&&
operator|!
name|classes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Class_
name|toClass
init|=
literal|null
decl_stmt|;
name|Class_
name|fromClass
init|=
literal|null
decl_stmt|;
name|Class_DAO
name|cDao
init|=
operator|new
name|Class_DAO
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|cIt
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|cIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|toClass
operator|=
operator|(
name|Class_
operator|)
name|cIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|toClass
operator|.
name|getUniqueIdRolledForwardFrom
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|fromClass
operator|=
name|cDao
operator|.
name|get
argument_list|(
name|toClass
operator|.
name|getUniqueIdRolledForwardFrom
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromClass
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fromClass
operator|.
name|getClassInstructors
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromClass
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ClassInstructor
name|fromClassInstr
init|=
literal|null
decl_stmt|;
name|ClassInstructor
name|toClassInstr
init|=
literal|null
decl_stmt|;
name|DepartmentalInstructor
name|toDeptInstr
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|ciIt
init|=
name|fromClass
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|ciIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromClassInstr
operator|=
operator|(
name|ClassInstructor
operator|)
name|ciIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|toDeptInstr
operator|=
name|fromClassInstr
operator|.
name|getInstructor
argument_list|()
operator|.
name|findThisInstructorInSession
argument_list|(
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDeptInstr
operator|!=
literal|null
condition|)
block|{
name|toClassInstr
operator|=
operator|new
name|ClassInstructor
argument_list|()
expr_stmt|;
name|toClassInstr
operator|.
name|setClassInstructing
argument_list|(
name|toClass
argument_list|)
expr_stmt|;
name|toClassInstr
operator|.
name|setInstructor
argument_list|(
name|toDeptInstr
argument_list|)
expr_stmt|;
name|toClassInstr
operator|.
name|setLead
argument_list|(
name|fromClassInstr
operator|.
name|isLead
argument_list|()
argument_list|)
expr_stmt|;
name|toClassInstr
operator|.
name|setPercentShare
argument_list|(
name|fromClassInstr
operator|.
name|getPercentShare
argument_list|()
argument_list|)
expr_stmt|;
name|toClass
operator|.
name|addToclassInstructors
argument_list|(
name|toClassInstr
argument_list|)
expr_stmt|;
name|toDeptInstr
operator|.
name|addToclasses
argument_list|(
name|toClassInstr
argument_list|)
expr_stmt|;
name|cDao
operator|.
name|getSession
argument_list|()
operator|.
name|update
argument_list|(
name|toDeptInstr
argument_list|)
expr_stmt|;
block|}
block|}
name|cDao
operator|.
name|update
argument_list|(
name|toClass
argument_list|)
expr_stmt|;
block|}
name|cDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|fromClass
argument_list|)
expr_stmt|;
block|}
block|}
name|cDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|toClass
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|cloneCourses
parameter_list|(
name|String
index|[]
name|courses
parameter_list|,
name|String
name|courseToCloneFrom
parameter_list|,
name|RollForwardSessionForm
name|rollForwardSessionForm
parameter_list|)
block|{
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollForwardTo
argument_list|()
argument_list|)
decl_stmt|;
name|InstructionalOfferingDAO
name|ioDao
init|=
name|InstructionalOfferingDAO
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|String
name|cloneSubj
init|=
name|courseToCloneFrom
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|cloneCrs
init|=
name|courseToCloneFrom
operator|.
name|substring
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|crs
init|=
literal|null
decl_stmt|;
name|String
name|subj
init|=
literal|null
decl_stmt|;
name|String
name|crsNbr
init|=
literal|null
decl_stmt|;
name|InstructionalOffering
name|io
init|=
literal|null
decl_stmt|;
name|InstructionalOffering
name|cloneFromIo
init|=
literal|null
decl_stmt|;
name|String
name|query
init|=
literal|"select io from InstructionalOffering io inner join io.courseOfferings co "
operator|+
literal|" where io.session.uniqueId=:sessionId "
operator|+
literal|" and co.subjectArea.subjectAreaAbbreviation=:subject"
operator|+
literal|" and co.courseNbr=:crsNbr"
decl_stmt|;
name|List
name|l
init|=
name|ioDao
operator|.
name|getQuery
argument_list|(
name|query
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"subject"
argument_list|,
name|cloneSubj
argument_list|)
operator|.
name|setString
argument_list|(
literal|"crsNbr"
argument_list|,
name|cloneCrs
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|cloneFromIo
operator|=
operator|(
name|InstructionalOffering
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|courses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|crs
operator|=
name|courses
index|[
name|i
index|]
expr_stmt|;
name|subj
operator|=
name|crs
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|crsNbr
operator|=
name|crs
operator|.
name|substring
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|l
operator|=
name|ioDao
operator|.
name|getQuery
argument_list|(
name|query
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"subject"
argument_list|,
name|subj
argument_list|)
operator|.
name|setString
argument_list|(
literal|"crsNbr"
argument_list|,
name|crsNbr
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
if|if
condition|(
name|l
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|io
operator|=
operator|(
name|InstructionalOffering
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|io
operator|.
name|cloneOfferingConfigurationFrom
argument_list|(
name|cloneFromIo
argument_list|)
expr_stmt|;
try|try
block|{
name|ioDao
operator|.
name|saveOrUpdate
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
name|ioDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|ioDao
operator|.
name|getSession
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|cloneCourseToCourses
parameter_list|(
name|RollForwardSessionForm
name|rollForwardSessionForm
parameter_list|)
block|{
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollForwardTo
argument_list|()
argument_list|)
decl_stmt|;
comment|//		//set 1 - "VCS 565D"
comment|//		String[] courses = {
comment|//				"CPB 584 ",
comment|//				"CPB 585 ",
comment|//				"CPB 586 ",
comment|//				"CPB 586Y",
comment|//				"CPB 586Z",
comment|//				"CPB 587 ",
comment|//				"CPB 588 ",
comment|//				"CPB 589 ",
comment|//				"CPB 589Y",
comment|//				"V M 510 ",
comment|//				"V M 578 ",
comment|//				"VCS 560 ",
comment|//				"VCS 561 ",
comment|//				"VCS 562 ",
comment|//				"VCS 563 ",
comment|//				"VCS 563Y",
comment|//				"VCS 565 ",
comment|//				"VCS 565E",
comment|//				"VCS 565F",
comment|//				"VCS 565G",
comment|//				"VCS 565M",
comment|//				"VCS 565N",
comment|//				"VCS 566 ",
comment|//				"VCS 567 ",
comment|//				"VCS 567A",
comment|//				"VCS 567Y",
comment|//				"VCS 568 ",
comment|//				"VCS 571 ",
comment|//				"VCS 571D",
comment|//				"VCS 571M",
comment|//				"VCS 571N",
comment|//				"VCS 571O",
comment|//				"VCS 571P",
comment|//				"VCS 571R",
comment|//				"VCS 571S",
comment|//				"VCS 571V",
comment|//				"VCS 571W",
comment|//				"VCS 571Y",
comment|//				"VCS 571Z",
comment|//				"VCS 572Y",
comment|//				"VCS 575 ",
comment|//				"VCS 575D",
comment|//				"VCS 575Y",
comment|//				"VCS 575Z",
comment|//				"VCS 576Y",
comment|//				"VCS 576Z",
comment|//				"VCS 577Y",
comment|//				"VCS 577Z",
comment|//				"VCS 578Y",
comment|//				"VCS 578Z",
comment|//				"VCS 579V",
comment|//				"VCS 579W",
comment|//				"VCS 579Y",
comment|//				"VCS 579Z",
comment|//				"VCS 580Y",
comment|//				"VCS 580Z",
comment|//				"VCS 582 ",
comment|//				"VCS 583 ",
comment|//				"VCS 585 ",
comment|//				"VCS 585E",
comment|//				"VCS 585F",
comment|//				"VCS 588Y",
comment|//				"VCS 591 ",
comment|//				"VCS 591E",
comment|//				"VCS 591F",
comment|//				"VCS 591M",
comment|//				"VCS 591N",
comment|//				"VCS 591S",
comment|//				"VCS 591T",
comment|//				"VCS 594 ",
comment|//				"VCS 594Y",
comment|//				"VCS 594Z"
comment|//		};
comment|//		cloneCourses(courses, "VCS 565D", session);
comment|//		//set 2 - LYNN G409 - "VCS 565E"
comment|//		String[] courses2 = {
comment|//				"VCS 575E",
comment|//				"VCS 575F",
comment|//				"VCS 575G",
comment|//				"VCS 575M",
comment|//				"VCS 575N"
comment|//		};
comment|//		cloneCourses(courses2, "VCS 565E", session);
comment|//		//set 3 - LYNN 1240 - "VCS 562 "
comment|//		String[] courses3 = {
comment|//				"VCS 572 ",
comment|//				"VCS 582G",
comment|//				"VCS 582O",
comment|//				"VCS 582S"
comment|//		};
comment|//		cloneCourses(courses3, "VCS 562 ", session);
comment|//		//set 4 - LYNN G269 - "VCS 561 "
comment|//		String[] courses4 = {
comment|//				"VCS 581 "
comment|//		};
comment|//		cloneCourses(courses4, "VCS 561 ", session);
comment|//		//set 5 - LYNN G397 - "VCS 566 "
comment|//		String[] courses5 = {
comment|//				"VCS 576 ",
comment|//				"VCS 577 ",
comment|//				"VCS 578 ",
comment|//				"VCS 579 ",
comment|//				"VCS 580 ",
comment|//				"VCS 588 "
comment|//		};
comment|//		cloneCourses(courses5, "VCS 566 ", session);
comment|//		//set 6 - LYNN G490A - "VCS 585F"
comment|//		String[] courses6 = {
comment|//				"VCS 586 ",
comment|//				"VCS 586Y"
comment|//		};
comment|//		cloneCourses(courses6, "VCS 585F", session);
comment|//		// Pharmacy Courses
comment|//		String[] courses = {
comment|//				"CLPH585B",
comment|//				"CLPH585C",
comment|//				"CLPH585D",
comment|//				"CLPH585E",
comment|//				"CLPH585N",
comment|//				"CLPH585R",
comment|//				"CLPH585S",
comment|//				"CLPH585T",
comment|//				"CLPH585U",
comment|//				"CLPH588A",
comment|//				"CLPH588B",
comment|//				"CLPH588C",
comment|//				"CLPH588D",
comment|//				"CLPH588E",
comment|//				"CLPH588N",
comment|//				"CLPH588R",
comment|//				"CLPH588S",
comment|//				"CLPH588T",
comment|//				"CLPH588U",
comment|//				"CLPH589A",
comment|//				"CLPH589B",
comment|//				"CLPH589C",
comment|//				"CLPH589D",
comment|//				"CLPH589E",
comment|//				"CLPH589N",
comment|//				"CLPH589R",
comment|//				"CLPH589S",
comment|//				"CLPH589T",
comment|//				"CLPH589U",
comment|//				"PHPR498A",
comment|//				"PHPR498B",
comment|//				"PHPR498C",
comment|//				"PHPR498D",
comment|//				"PHPR498E",
comment|//				"PHPR498N",
comment|//				"PHPR498R",
comment|//				"PHPR498S",
comment|//				"PHPR498T",
comment|//				"PHPR498U",
comment|//				"PHPR499A",
comment|//				"PHPR499B",
comment|//				"PHPR499C",
comment|//				"PHPR499D",
comment|//				"PHPR499E",
comment|//				"PHPR499N",
comment|//				"PHPR499R",
comment|//				"PHPR499S",
comment|//				"PHPR499T",
comment|//				"PHPR499U",
comment|//				"NUPH595A",
comment|//				"NUPH595B",
comment|//				"NUPH595C",
comment|//				"NUPH595D",
comment|//				"NUPH595E"
comment|//		};
comment|//		cloneCourses(courses, "CLPH585A", rollForwardSessionForm);
comment|// PPE Courses
comment|//		String[] courses = {
comment|//				"PPE 151 ",
comment|//				"PPE 303 ",
comment|//				"PPE 312 ",
comment|//				"PPE 313 ",
comment|//				"PPE 322 ",
comment|//				"PPE 323 ",
comment|//				"PPE 331 ",
comment|//				"PPE 332 ",
comment|//				"PPE 333 ",
comment|//				"PPE 442 "
comment|//		};
comment|//		cloneCourses(courses, "PPE 441 ", rollForwardSessionForm);
comment|//		// PPT Courses
comment|//		String[] courses2 = {
comment|//				"PPT 151 ",
comment|//				"PPT 303 ",
comment|//				"PPT 312 ",
comment|//				"PPT 313 ",
comment|//				"PPT 322 ",
comment|//				"PPT 323 ",
comment|//				"PPT 331 ",
comment|//				"PPT 332 ",
comment|//				"PPT 333 ",
comment|//				"PPT 442 "
comment|//		};
comment|//		cloneCourses(courses2, "PPT 441 ", rollForwardSessionForm);
block|}
block|}
end_class

end_unit

