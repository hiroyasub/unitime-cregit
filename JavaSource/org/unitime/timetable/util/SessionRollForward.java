begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|RollForwardSessionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Building
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|BuildingPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Curriculum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumCourseGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumProjectionRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentRoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Designator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamLocationPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExternalBuilding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExternalRoom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExternalRoomDepartment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExternalRoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|GlobalRoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|LastLikeCourseDemand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|NonUniversityLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMinor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomDept
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeaturePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroupPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|AcademicAreaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|AcademicClassificationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|BuildingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseCatalogDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CurriculumDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DatePatternDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DistributionTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamPeriodDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExternalBuildingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExternalRoomDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExternalRoomDepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExternalRoomFeatureDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|GlobalRoomFeatureDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|LastLikeCourseDemandDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|NonUniversityLocationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|PosMajorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|PosMinorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomDeptDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomFeatureDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomGroupDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolverGroupDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SubjectAreaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TimePatternDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TimetableManagerDAO
import|;
end_import

begin_comment
comment|/**  * @author Stephanie Schluttenhofer  *  */
end_comment

begin_class
specifier|public
class|class
name|SessionRollForward
block|{
specifier|private
specifier|static
name|HashMap
name|roomList
decl_stmt|;
specifier|private
specifier|static
name|HashMap
name|sessionHasCourseCatalogList
decl_stmt|;
specifier|private
specifier|static
name|HashMap
name|sessionHasExternalBuildingList
decl_stmt|;
specifier|private
specifier|static
name|HashMap
name|sessionHasExternalRoomList
decl_stmt|;
specifier|private
specifier|static
name|HashMap
name|sessionHasExternalRoomDeptList
decl_stmt|;
specifier|private
specifier|static
name|HashMap
name|sessionHasExternalRoomFeatureList
decl_stmt|;
specifier|private
name|boolean
name|subpartTimeRollForward
decl_stmt|;
specifier|private
name|boolean
name|subpartLocationRollForward
decl_stmt|;
specifier|private
name|boolean
name|classPrefsPushUp
decl_stmt|;
specifier|public
specifier|static
name|String
name|ROLL_PREFS_ACTION
init|=
literal|"rollUnchanged"
decl_stmt|;
specifier|public
specifier|static
name|String
name|DO_NOT_ROLL_ACTION
init|=
literal|"doNotRoll"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PUSH_UP_ACTION
init|=
literal|"pushUp"
decl_stmt|;
specifier|public
name|void
name|setSubpartLocationPrefRollForwardParameters
parameter_list|(
name|String
name|subpartLocationPrefsAction
parameter_list|)
block|{
if|if
condition|(
name|subpartLocationPrefsAction
operator|==
literal|null
operator|||
name|subpartLocationPrefsAction
operator|.
name|equalsIgnoreCase
argument_list|(
name|ROLL_PREFS_ACTION
argument_list|)
condition|)
block|{
name|subpartLocationRollForward
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|subpartLocationPrefsAction
operator|.
name|equalsIgnoreCase
argument_list|(
name|DO_NOT_ROLL_ACTION
argument_list|)
condition|)
block|{
name|subpartLocationRollForward
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|subpartLocationRollForward
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setSubpartTimePrefRollForwardParameters
parameter_list|(
name|String
name|subpartTimePrefsAction
parameter_list|)
block|{
if|if
condition|(
name|subpartTimePrefsAction
operator|==
literal|null
operator|||
name|subpartTimePrefsAction
operator|.
name|equalsIgnoreCase
argument_list|(
name|ROLL_PREFS_ACTION
argument_list|)
condition|)
block|{
name|subpartTimeRollForward
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|subpartTimePrefsAction
operator|.
name|equalsIgnoreCase
argument_list|(
name|DO_NOT_ROLL_ACTION
argument_list|)
condition|)
block|{
name|subpartTimeRollForward
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|subpartTimeRollForward
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setClassPrefRollForwardParameter
parameter_list|(
name|String
name|classPrefsAction
parameter_list|)
block|{
if|if
condition|(
name|classPrefsAction
operator|==
literal|null
operator|||
name|classPrefsAction
operator|.
name|equalsIgnoreCase
argument_list|(
name|DO_NOT_ROLL_ACTION
argument_list|)
condition|)
block|{
name|classPrefsPushUp
operator|=
literal|false
expr_stmt|;
block|}
if|else if
condition|(
name|classPrefsAction
operator|.
name|equalsIgnoreCase
argument_list|(
name|PUSH_UP_ACTION
argument_list|)
condition|)
block|{
name|classPrefsPushUp
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|classPrefsPushUp
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|rollBuildingAndRoomDataForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|RollForwardSessionForm
name|rollForwardSessionForm
parameter_list|)
block|{
name|Session
name|toSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollForwardTo
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|fromSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollRoomDataForwardFrom
argument_list|()
argument_list|)
decl_stmt|;
name|rollRoomFeaturesForward
argument_list|(
name|errors
argument_list|,
name|fromSession
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
name|rollRoomGroupsForward
argument_list|(
name|errors
argument_list|,
name|fromSession
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
name|rollBuildingsForward
argument_list|(
name|errors
argument_list|,
name|fromSession
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
name|rollLocationsForward
argument_list|(
name|errors
argument_list|,
name|fromSession
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
operator|(
operator|new
name|SessionDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|rollRoomGroupsForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|Session
name|fromSession
parameter_list|,
name|Session
name|toSession
parameter_list|)
block|{
name|RoomGroup
name|fromRoomGroup
init|=
literal|null
decl_stmt|;
name|RoomGroup
name|toRoomGroup
init|=
literal|null
decl_stmt|;
name|RoomGroupDAO
name|rgDao
init|=
operator|new
name|RoomGroupDAO
argument_list|()
decl_stmt|;
name|Collection
name|fromRoomGroups
init|=
name|RoomGroup
operator|.
name|getAllRoomGroupsForSession
argument_list|(
name|fromSession
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|fromRoomGroups
operator|!=
literal|null
operator|&&
operator|!
name|fromRoomGroups
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|fromRoomGroups
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromRoomGroup
operator|=
operator|(
name|RoomGroup
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromRoomGroup
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|fromRoomGroup
operator|.
name|isGlobal
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|toRoomGroup
operator|=
operator|(
name|RoomGroup
operator|)
name|fromRoomGroup
operator|.
name|clone
argument_list|()
expr_stmt|;
name|toRoomGroup
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
name|toRoomGroup
operator|.
name|setDepartment
argument_list|(
name|fromRoomGroup
operator|.
name|getDepartment
argument_list|()
operator|.
name|findSameDepartmentInSession
argument_list|(
name|toSession
argument_list|)
argument_list|)
expr_stmt|;
name|rgDao
operator|.
name|saveOrUpdate
argument_list|(
name|toRoomGroup
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"rollForward"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.rollForward"
argument_list|,
literal|"Room Groups"
argument_list|,
name|fromSession
operator|.
name|getLabel
argument_list|()
argument_list|,
name|toSession
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|"Failed to roll all room groups forward."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|rollRoomFeaturesForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|Session
name|fromSession
parameter_list|,
name|Session
name|toSession
parameter_list|)
block|{
name|DepartmentRoomFeature
name|fromRoomFeature
init|=
literal|null
decl_stmt|;
name|DepartmentRoomFeature
name|toRoomFeature
init|=
literal|null
decl_stmt|;
name|RoomFeatureDAO
name|rfDao
init|=
operator|new
name|RoomFeatureDAO
argument_list|()
decl_stmt|;
name|Collection
name|fromRoomFeatures
init|=
name|DepartmentRoomFeature
operator|.
name|getAllRoomFeaturesForSession
argument_list|(
name|fromSession
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|fromRoomFeatures
operator|!=
literal|null
operator|&&
operator|!
name|fromRoomFeatures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|fromRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromRoomFeature
operator|=
operator|(
name|DepartmentRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromRoomFeature
operator|!=
literal|null
condition|)
block|{
name|toRoomFeature
operator|=
operator|(
name|DepartmentRoomFeature
operator|)
name|fromRoomFeature
operator|.
name|clone
argument_list|()
expr_stmt|;
name|toRoomFeature
operator|.
name|setDepartment
argument_list|(
name|fromRoomFeature
operator|.
name|getDepartment
argument_list|()
operator|.
name|findSameDepartmentInSession
argument_list|(
name|toSession
argument_list|)
argument_list|)
expr_stmt|;
name|rfDao
operator|.
name|saveOrUpdate
argument_list|(
name|toRoomFeature
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|sessionHasExternalRoomFeatureList
argument_list|(
name|toSession
argument_list|)
condition|)
block|{
name|GlobalRoomFeatureDAO
name|grfDao
init|=
operator|new
name|GlobalRoomFeatureDAO
argument_list|()
decl_stmt|;
name|GlobalRoomFeature
name|grf
init|=
literal|null
decl_stmt|;
name|List
name|newGlobalFeatures
init|=
name|grfDao
operator|.
name|getQuery
argument_list|(
literal|"select distinct erf.value, erf.name from ExternalRoomFeature erf"
operator|+
literal|" where erf.room.building.session.uniqueId=:sessionId"
operator|+
literal|"  and erf.value not in (select grf.label from GlobalRoomFeature grf)"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|newGlobalFeatures
operator|!=
literal|null
condition|)
block|{
name|String
name|newLabel
init|=
literal|null
decl_stmt|;
name|String
name|newSisReference
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|nrfIt
init|=
name|newGlobalFeatures
operator|.
name|iterator
argument_list|()
init|;
name|nrfIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|List
name|l
init|=
operator|(
name|List
operator|)
name|nrfIt
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
name|l
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
name|newLabel
operator|=
operator|(
name|String
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|newSisReference
operator|=
operator|(
name|String
operator|)
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|grf
operator|=
operator|new
name|GlobalRoomFeature
argument_list|()
expr_stmt|;
name|grf
operator|.
name|setLabel
argument_list|(
name|newLabel
argument_list|)
expr_stmt|;
name|grf
operator|.
name|setSisReference
argument_list|(
name|newSisReference
argument_list|)
expr_stmt|;
name|grf
operator|.
name|setSisValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|grfDao
operator|.
name|saveOrUpdate
argument_list|(
name|grf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"rollForward"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.rollForward"
argument_list|,
literal|"Room Features"
argument_list|,
name|fromSession
operator|.
name|getLabel
argument_list|()
argument_list|,
name|toSession
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|"Failed to roll all room features forward."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|rollRoomFeaturesForLocationForward
parameter_list|(
name|Location
name|fromLocation
parameter_list|,
name|Location
name|toLocation
parameter_list|,
name|Session
name|toSession
parameter_list|,
name|HashMap
name|roomFeatureCache
parameter_list|)
block|{
if|if
condition|(
name|fromLocation
operator|.
name|getFeatures
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromLocation
operator|.
name|getFeatures
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RoomFeature
name|fromFeature
init|=
literal|null
decl_stmt|;
name|GlobalRoomFeature
name|toGlobalFeature
init|=
literal|null
decl_stmt|;
name|DepartmentRoomFeature
name|toDepartmentFeature
init|=
literal|null
decl_stmt|;
name|boolean
name|rollGlobalFeaturesFromFromLocation
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|toLocation
operator|instanceof
name|Room
condition|)
block|{
name|Room
name|toRoom
init|=
operator|(
name|Room
operator|)
name|toLocation
decl_stmt|;
if|if
condition|(
name|toRoom
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ExternalRoom
name|er
init|=
name|ExternalRoom
operator|.
name|findExternalRoomForSession
argument_list|(
name|toRoom
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|toSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|er
operator|!=
literal|null
condition|)
block|{
name|rollGlobalFeaturesFromFromLocation
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|er
operator|.
name|getRoomFeatures
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ExternalRoomFeature
name|erf
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|erfIt
init|=
name|er
operator|.
name|getRoomFeatures
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|erfIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|erf
operator|=
operator|(
name|ExternalRoomFeature
operator|)
name|erfIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|toGlobalFeature
operator|=
name|GlobalRoomFeature
operator|.
name|findGlobalRoomFeatureForLabel
argument_list|(
name|erf
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|toLocation
operator|.
name|addTofeatures
argument_list|(
name|toGlobalFeature
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
for|for
control|(
name|Iterator
name|rfIt
init|=
name|fromLocation
operator|.
name|getFeatures
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|rfIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromFeature
operator|=
operator|(
name|RoomFeature
operator|)
name|rfIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromFeature
operator|instanceof
name|GlobalRoomFeature
operator|&&
name|rollGlobalFeaturesFromFromLocation
condition|)
block|{
name|GlobalRoomFeature
name|fromGlobalFeature
init|=
operator|(
name|GlobalRoomFeature
operator|)
name|fromFeature
decl_stmt|;
name|toLocation
operator|.
name|addTofeatures
argument_list|(
name|fromGlobalFeature
argument_list|)
expr_stmt|;
name|fromGlobalFeature
operator|.
name|getRooms
argument_list|()
operator|.
name|add
argument_list|(
name|toLocation
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|fromFeature
operator|instanceof
name|DepartmentRoomFeature
condition|)
block|{
name|DepartmentRoomFeature
name|fromDepartmentFeature
init|=
operator|(
name|DepartmentRoomFeature
operator|)
name|fromFeature
decl_stmt|;
name|toDepartmentFeature
operator|=
operator|(
name|DepartmentRoomFeature
operator|)
name|roomFeatureCache
operator|.
name|get
argument_list|(
name|fromDepartmentFeature
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDepartmentFeature
operator|==
literal|null
condition|)
block|{
name|toDepartmentFeature
operator|=
name|fromDepartmentFeature
operator|.
name|findSameFeatureInSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDepartmentFeature
operator|!=
literal|null
condition|)
block|{
name|roomFeatureCache
operator|.
name|put
argument_list|(
name|fromDepartmentFeature
argument_list|,
name|toDepartmentFeature
argument_list|)
expr_stmt|;
name|toLocation
operator|.
name|addTofeatures
argument_list|(
name|toDepartmentFeature
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDepartmentFeature
operator|.
name|getRooms
argument_list|()
operator|==
literal|null
condition|)
block|{
name|toDepartmentFeature
operator|.
name|setRooms
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|toDepartmentFeature
operator|.
name|getRooms
argument_list|()
operator|.
name|add
argument_list|(
name|toLocation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|rollRoomForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|Session
name|fromSession
parameter_list|,
name|Session
name|toSession
parameter_list|,
name|Location
name|location
parameter_list|)
block|{
name|Room
name|fromRoom
init|=
literal|null
decl_stmt|;
name|Room
name|toRoom
init|=
literal|null
decl_stmt|;
name|RoomDAO
name|rDao
init|=
operator|new
name|RoomDAO
argument_list|()
decl_stmt|;
name|DepartmentDAO
name|dDao
init|=
operator|new
name|DepartmentDAO
argument_list|()
decl_stmt|;
name|Building
name|toBuilding
init|=
literal|null
decl_stmt|;
name|RoomDept
name|fromRoomDept
init|=
literal|null
decl_stmt|;
name|Department
name|toDept
init|=
literal|null
decl_stmt|;
name|Department
name|fromDept
init|=
literal|null
decl_stmt|;
name|HashMap
name|roomFeatureCache
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|HashMap
name|roomGroupCache
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
try|try
block|{
name|fromRoom
operator|=
operator|(
name|Room
operator|)
name|location
expr_stmt|;
if|if
condition|(
name|fromRoom
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|sessionHasExternalRoomList
argument_list|(
name|toSession
argument_list|)
condition|)
block|{
name|ExternalRoom
name|toExternalRoom
init|=
name|ExternalRoom
operator|.
name|findExternalRoomForSession
argument_list|(
name|fromRoom
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|toSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|toExternalRoom
operator|!=
literal|null
condition|)
block|{
name|toRoom
operator|=
operator|new
name|Room
argument_list|()
expr_stmt|;
name|toRoom
operator|.
name|setCapacity
argument_list|(
name|toExternalRoom
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setExamCapacity
argument_list|(
name|toExternalRoom
operator|.
name|getExamCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setClassification
argument_list|(
name|toExternalRoom
operator|.
name|getClassification
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setCoordinateX
argument_list|(
name|toExternalRoom
operator|.
name|getCoordinateX
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setCoordinateY
argument_list|(
name|toExternalRoom
operator|.
name|getCoordinateY
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setDisplayName
argument_list|(
name|toExternalRoom
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setExternalUniqueId
argument_list|(
name|toExternalRoom
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setIgnoreRoomCheck
argument_list|(
name|fromRoom
operator|.
name|isIgnoreRoomCheck
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setIgnoreTooFar
argument_list|(
name|fromRoom
operator|.
name|isIgnoreTooFar
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setPattern
argument_list|(
name|fromRoom
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setRoomNumber
argument_list|(
name|toExternalRoom
operator|.
name|getRoomNumber
argument_list|()
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setRoomType
argument_list|(
name|toExternalRoom
operator|.
name|getRoomType
argument_list|()
argument_list|)
expr_stmt|;
name|LocationPermIdGenerator
operator|.
name|setPermanentId
argument_list|(
name|toRoom
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return;
block|}
block|}
else|else
block|{
name|toRoom
operator|=
operator|(
name|Room
operator|)
name|fromRoom
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
name|toRoom
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
name|toBuilding
operator|=
name|fromRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|findSameBuildingInSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|toBuilding
operator|!=
literal|null
condition|)
block|{
name|toRoom
operator|.
name|setBuilding
argument_list|(
name|toBuilding
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromRoom
operator|.
name|getManagerIds
argument_list|()
operator|!=
literal|null
operator|&&
name|fromRoom
operator|.
name|getManagerIds
argument_list|()
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|String
name|toManagerStr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|stk
init|=
operator|new
name|StringTokenizer
argument_list|(
name|fromRoom
operator|.
name|getManagerIds
argument_list|()
argument_list|,
literal|","
argument_list|)
init|;
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|Long
name|fromDeptId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|stk
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromDeptId
operator|!=
literal|null
condition|)
block|{
name|fromDept
operator|=
name|dDao
operator|.
name|get
argument_list|(
name|fromDeptId
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromDept
operator|!=
literal|null
condition|)
block|{
name|toDept
operator|=
name|fromDept
operator|.
name|findSameDepartmentInSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDept
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|toManagerStr
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|toManagerStr
operator|+=
literal|","
expr_stmt|;
block|}
name|toManagerStr
operator|+=
name|toDept
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
name|toRoom
operator|.
name|setManagerIds
argument_list|(
name|toManagerStr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|toRoom
operator|.
name|setPattern
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|rollRoomFeaturesForLocationForward
argument_list|(
name|fromRoom
argument_list|,
name|toRoom
argument_list|,
name|toSession
argument_list|,
name|roomFeatureCache
argument_list|)
expr_stmt|;
name|rollRoomGroupsForLocationForward
argument_list|(
name|fromRoom
argument_list|,
name|toRoom
argument_list|,
name|toSession
argument_list|,
name|roomGroupCache
argument_list|)
expr_stmt|;
name|rDao
operator|.
name|saveOrUpdate
argument_list|(
name|toRoom
argument_list|)
expr_stmt|;
name|boolean
name|rollForwardExistingRoomDepts
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|fromRoom
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|sessionHasExternalRoomDeptList
argument_list|(
name|toSession
argument_list|)
condition|)
block|{
name|ExternalRoom
name|toExternalRoom
init|=
name|ExternalRoom
operator|.
name|findExternalRoomForSession
argument_list|(
name|fromRoom
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|toSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|toExternalRoom
operator|.
name|getRoomDepartments
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|toExternalRoom
operator|.
name|getRoomDepartments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ExternalRoomDepartment
name|toExternalRoomDept
init|=
literal|null
decl_stmt|;
name|fromRoomDept
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|Iterator
name|erdIt
init|=
name|toExternalRoom
operator|.
name|getRoomDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
operator|(
name|erdIt
operator|.
name|hasNext
argument_list|()
operator|&&
name|rollForwardExistingRoomDepts
operator|)
condition|;
control|)
block|{
name|boolean
name|foundDept
init|=
literal|false
decl_stmt|;
name|toExternalRoomDept
operator|=
operator|(
name|ExternalRoomDepartment
operator|)
name|erdIt
operator|.
name|next
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|rdIt
init|=
name|fromRoom
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
operator|(
name|rdIt
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|foundDept
operator|)
condition|;
control|)
block|{
name|fromRoomDept
operator|=
operator|(
name|RoomDept
operator|)
name|rdIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromRoomDept
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
operator|.
name|equals
argument_list|(
name|toExternalRoomDept
operator|.
name|getDepartmentCode
argument_list|()
argument_list|)
condition|)
block|{
name|foundDept
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|foundDept
condition|)
block|{
name|rollForwardExistingRoomDepts
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|rollForwardExistingRoomDepts
condition|)
block|{
if|if
condition|(
name|fromRoom
operator|.
name|getRoomDepts
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromRoom
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|deptIt
init|=
name|fromRoom
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|deptIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromRoomDept
operator|=
operator|(
name|RoomDept
operator|)
name|deptIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|rollForwardRoomDept
argument_list|(
name|fromRoomDept
argument_list|,
name|toRoom
argument_list|,
name|toSession
argument_list|,
name|fromRoom
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// resetting department sharing related fields
name|toRoom
operator|.
name|setPattern
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|toRoom
operator|.
name|setManagerIds
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ExternalRoom
name|toExternalRoom
init|=
name|ExternalRoom
operator|.
name|findExternalRoomForSession
argument_list|(
name|fromRoom
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|toSession
argument_list|)
decl_stmt|;
name|ExternalRoomDepartment
name|toExternalRoomDept
init|=
literal|null
decl_stmt|;
name|fromRoomDept
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|Iterator
name|erdIt
init|=
name|toExternalRoom
operator|.
name|getRoomDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|erdIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|boolean
name|foundDept
init|=
literal|false
decl_stmt|;
name|toExternalRoomDept
operator|=
operator|(
name|ExternalRoomDepartment
operator|)
name|erdIt
operator|.
name|next
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|rdIt
init|=
name|fromRoom
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
operator|(
name|rdIt
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|foundDept
operator|)
condition|;
control|)
block|{
name|fromRoomDept
operator|=
operator|(
name|RoomDept
operator|)
name|rdIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromRoomDept
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
operator|.
name|equals
argument_list|(
name|toExternalRoomDept
operator|.
name|getDepartmentCode
argument_list|()
argument_list|)
condition|)
block|{
name|foundDept
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|foundDept
condition|)
block|{
name|rollForwardRoomDept
argument_list|(
name|fromRoomDept
argument_list|,
name|toRoom
argument_list|,
name|toSession
argument_list|,
name|fromRoom
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|toRoom
operator|.
name|addExternalRoomDept
argument_list|(
name|toExternalRoomDept
argument_list|,
name|toExternalRoom
operator|.
name|getRoomDepartments
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|rDao
operator|.
name|saveOrUpdate
argument_list|(
name|toRoom
argument_list|)
expr_stmt|;
name|rDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// rDao.getSession().evict(toRoom); -- commented out to prevent NonUniqueObjectException
comment|// rDao.getSession().evict(fromRoom);
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"rollForward"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.rollForward"
argument_list|,
literal|"Rooms"
argument_list|,
name|fromSession
operator|.
name|getLabel
argument_list|()
argument_list|,
name|toSession
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|"Failed to roll all rooms forward."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|rollForwardRoomDept
parameter_list|(
name|RoomDept
name|fromRoomDept
parameter_list|,
name|Location
name|toLocation
parameter_list|,
name|Session
name|toSession
parameter_list|,
name|Location
name|fromLocation
parameter_list|)
block|{
name|Department
name|toDept
init|=
name|fromRoomDept
operator|.
name|getDepartment
argument_list|()
operator|.
name|findSameDepartmentInSession
argument_list|(
name|toSession
argument_list|)
decl_stmt|;
name|RoomDept
name|toRoomDept
init|=
literal|null
decl_stmt|;
name|RoomDeptDAO
name|rdDao
init|=
operator|new
name|RoomDeptDAO
argument_list|()
decl_stmt|;
if|if
condition|(
name|toDept
operator|!=
literal|null
condition|)
block|{
name|toRoomDept
operator|=
operator|new
name|RoomDept
argument_list|()
expr_stmt|;
name|toRoomDept
operator|.
name|setRoom
argument_list|(
name|toLocation
argument_list|)
expr_stmt|;
name|toRoomDept
operator|.
name|setControl
argument_list|(
name|fromRoomDept
operator|.
name|isControl
argument_list|()
argument_list|)
expr_stmt|;
name|toRoomDept
operator|.
name|setDepartment
argument_list|(
name|toDept
argument_list|)
expr_stmt|;
name|toLocation
operator|.
name|addToroomDepts
argument_list|(
name|toRoomDept
argument_list|)
expr_stmt|;
name|toDept
operator|.
name|addToroomDepts
argument_list|(
name|toRoomDept
argument_list|)
expr_stmt|;
name|rdDao
operator|.
name|saveOrUpdate
argument_list|(
name|toRoomDept
argument_list|)
expr_stmt|;
name|PreferenceLevel
name|fromRoomPrefLevel
init|=
name|fromLocation
operator|.
name|getRoomPreferenceLevel
argument_list|(
name|fromRoomDept
operator|.
name|getDepartment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fromRoomPrefLevel
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
condition|)
block|{
name|RoomPref
name|toRoomPref
init|=
operator|new
name|RoomPref
argument_list|()
decl_stmt|;
name|toRoomPref
operator|.
name|setOwner
argument_list|(
name|toDept
argument_list|)
expr_stmt|;
name|toRoomPref
operator|.
name|setPrefLevel
argument_list|(
name|fromRoomPrefLevel
argument_list|)
expr_stmt|;
name|toRoomPref
operator|.
name|setRoom
argument_list|(
name|toLocation
argument_list|)
expr_stmt|;
name|toDept
operator|.
name|addTopreferences
argument_list|(
name|toRoomPref
argument_list|)
expr_stmt|;
name|rdDao
operator|.
name|getSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|toDept
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|rollRoomGroupsForLocationForward
parameter_list|(
name|Location
name|fromLocation
parameter_list|,
name|Location
name|toLocation
parameter_list|,
name|Session
name|toSession
parameter_list|,
name|HashMap
name|roomGroupCache
parameter_list|)
block|{
if|if
condition|(
name|fromLocation
operator|.
name|getRoomGroups
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromLocation
operator|.
name|getRoomGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RoomGroup
name|fromRoomGroup
init|=
literal|null
decl_stmt|;
name|RoomGroup
name|toDepartmentRoomGroup
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|rfIt
init|=
name|fromLocation
operator|.
name|getRoomGroups
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|rfIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromRoomGroup
operator|=
operator|(
name|RoomGroup
operator|)
name|rfIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromRoomGroup
operator|.
name|isGlobal
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|toLocation
operator|.
name|getRoomGroups
argument_list|()
operator|==
literal|null
condition|)
block|{
name|toLocation
operator|.
name|setRoomGroups
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|toLocation
operator|.
name|getRoomGroups
argument_list|()
operator|.
name|add
argument_list|(
name|fromRoomGroup
argument_list|)
expr_stmt|;
name|fromRoomGroup
operator|.
name|getRooms
argument_list|()
operator|.
name|add
argument_list|(
name|toLocation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|toDepartmentRoomGroup
operator|=
operator|(
name|RoomGroup
operator|)
name|roomGroupCache
operator|.
name|get
argument_list|(
name|fromRoomGroup
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDepartmentRoomGroup
operator|==
literal|null
condition|)
block|{
name|toDepartmentRoomGroup
operator|=
name|fromRoomGroup
operator|.
name|findSameRoomGroupInSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDepartmentRoomGroup
operator|!=
literal|null
condition|)
block|{
name|roomGroupCache
operator|.
name|put
argument_list|(
name|fromRoomGroup
argument_list|,
name|toDepartmentRoomGroup
argument_list|)
expr_stmt|;
if|if
condition|(
name|toLocation
operator|.
name|getRoomGroups
argument_list|()
operator|==
literal|null
condition|)
block|{
name|toLocation
operator|.
name|setRoomGroups
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|toLocation
operator|.
name|getRoomGroups
argument_list|()
operator|.
name|add
argument_list|(
name|toDepartmentRoomGroup
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDepartmentRoomGroup
operator|.
name|getRooms
argument_list|()
operator|==
literal|null
condition|)
block|{
name|toDepartmentRoomGroup
operator|.
name|setRooms
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|toDepartmentRoomGroup
operator|.
name|getRooms
argument_list|()
operator|.
name|add
argument_list|(
name|toLocation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|rollNonUniversityLocationsForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|Session
name|fromSession
parameter_list|,
name|Session
name|toSession
parameter_list|,
name|Location
name|location
parameter_list|)
block|{
name|NonUniversityLocation
name|fromNonUniversityLocation
init|=
literal|null
decl_stmt|;
name|NonUniversityLocation
name|toNonUniversityLocation
init|=
literal|null
decl_stmt|;
name|NonUniversityLocationDAO
name|nulDao
init|=
operator|new
name|NonUniversityLocationDAO
argument_list|()
decl_stmt|;
name|DepartmentDAO
name|dDao
init|=
operator|new
name|DepartmentDAO
argument_list|()
decl_stmt|;
name|RoomDept
name|fromRoomDept
init|=
literal|null
decl_stmt|;
name|Department
name|toDept
init|=
literal|null
decl_stmt|;
name|Department
name|fromDept
init|=
literal|null
decl_stmt|;
name|HashMap
name|roomFeatureCache
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|HashMap
name|roomGroupCache
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
try|try
block|{
name|fromNonUniversityLocation
operator|=
operator|(
name|NonUniversityLocation
operator|)
name|location
expr_stmt|;
name|toNonUniversityLocation
operator|=
operator|(
name|NonUniversityLocation
operator|)
name|fromNonUniversityLocation
operator|.
name|clone
argument_list|()
expr_stmt|;
name|toNonUniversityLocation
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromNonUniversityLocation
operator|.
name|getManagerIds
argument_list|()
operator|!=
literal|null
operator|&&
name|fromNonUniversityLocation
operator|.
name|getManagerIds
argument_list|()
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|String
name|toManagerStr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|stk
init|=
operator|new
name|StringTokenizer
argument_list|(
name|fromNonUniversityLocation
operator|.
name|getManagerIds
argument_list|()
argument_list|,
literal|","
argument_list|)
init|;
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|Long
name|fromDeptId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|stk
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromDeptId
operator|!=
literal|null
condition|)
block|{
name|fromDept
operator|=
name|dDao
operator|.
name|get
argument_list|(
name|fromDeptId
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromDept
operator|!=
literal|null
condition|)
block|{
name|toDept
operator|=
name|fromDept
operator|.
name|findSameDepartmentInSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDept
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|toManagerStr
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|toManagerStr
operator|+=
literal|","
expr_stmt|;
block|}
name|toManagerStr
operator|+=
name|toDept
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
name|toNonUniversityLocation
operator|.
name|setManagerIds
argument_list|(
name|toManagerStr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|toNonUniversityLocation
operator|.
name|setPattern
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|rollRoomFeaturesForLocationForward
argument_list|(
name|fromNonUniversityLocation
argument_list|,
name|toNonUniversityLocation
argument_list|,
name|toSession
argument_list|,
name|roomFeatureCache
argument_list|)
expr_stmt|;
name|rollRoomGroupsForLocationForward
argument_list|(
name|fromNonUniversityLocation
argument_list|,
name|toNonUniversityLocation
argument_list|,
name|toSession
argument_list|,
name|roomGroupCache
argument_list|)
expr_stmt|;
name|nulDao
operator|.
name|saveOrUpdate
argument_list|(
name|toNonUniversityLocation
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromNonUniversityLocation
operator|.
name|getRoomDepts
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromNonUniversityLocation
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|deptIt
init|=
name|fromNonUniversityLocation
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|deptIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromRoomDept
operator|=
operator|(
name|RoomDept
operator|)
name|deptIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|rollForwardRoomDept
argument_list|(
name|fromRoomDept
argument_list|,
name|toNonUniversityLocation
argument_list|,
name|toSession
argument_list|,
name|fromNonUniversityLocation
argument_list|)
expr_stmt|;
block|}
name|nulDao
operator|.
name|saveOrUpdate
argument_list|(
name|toNonUniversityLocation
argument_list|)
expr_stmt|;
name|nulDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|nulDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|toNonUniversityLocation
argument_list|)
expr_stmt|;
name|nulDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|fromNonUniversityLocation
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"rollForward"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.rollForward"
argument_list|,
literal|"Non University Locations"
argument_list|,
name|fromSession
operator|.
name|getLabel
argument_list|()
argument_list|,
name|toSession
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|"Failed to roll all non university locations forward."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|rollLocationsForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|Session
name|fromSession
parameter_list|,
name|Session
name|toSession
parameter_list|)
block|{
if|if
condition|(
name|fromSession
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromSession
operator|.
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Location
name|location
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|fromSession
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|location
operator|=
operator|(
name|Location
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|location
operator|instanceof
name|Room
condition|)
block|{
name|rollRoomForward
argument_list|(
name|errors
argument_list|,
name|fromSession
argument_list|,
name|toSession
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|location
operator|instanceof
name|NonUniversityLocation
condition|)
block|{
name|rollNonUniversityLocationsForward
argument_list|(
name|errors
argument_list|,
name|fromSession
argument_list|,
name|toSession
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|sessionHasExternalRoomList
argument_list|(
name|toSession
argument_list|)
condition|)
block|{
name|Room
operator|.
name|addNewExternalRoomsToSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|rollBuildingsForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|Session
name|fromSession
parameter_list|,
name|Session
name|toSession
parameter_list|)
block|{
if|if
condition|(
name|fromSession
operator|.
name|getBuildings
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromSession
operator|.
name|getBuildings
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|Building
name|fromBldg
init|=
literal|null
decl_stmt|;
name|Building
name|toBldg
init|=
literal|null
decl_stmt|;
name|BuildingDAO
name|bDao
init|=
operator|new
name|BuildingDAO
argument_list|()
decl_stmt|;
name|ExternalBuilding
name|toExternalBuilding
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|fromSession
operator|.
name|getBuildings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromBldg
operator|=
operator|(
name|Building
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromBldg
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|sessionHasExternalBuildingList
argument_list|(
name|toSession
argument_list|)
condition|)
block|{
name|toExternalBuilding
operator|=
name|ExternalBuilding
operator|.
name|findExternalBuildingForSession
argument_list|(
name|fromBldg
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|toExternalBuilding
operator|!=
literal|null
condition|)
block|{
name|toBldg
operator|=
operator|new
name|Building
argument_list|()
expr_stmt|;
name|toBldg
operator|.
name|setAbbreviation
argument_list|(
name|toExternalBuilding
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|toBldg
operator|.
name|setCoordinateX
argument_list|(
name|toExternalBuilding
operator|.
name|getCoordinateX
argument_list|()
argument_list|)
expr_stmt|;
name|toBldg
operator|.
name|setCoordinateY
argument_list|(
name|toExternalBuilding
operator|.
name|getCoordinateY
argument_list|()
argument_list|)
expr_stmt|;
name|toBldg
operator|.
name|setExternalUniqueId
argument_list|(
name|toExternalBuilding
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|toBldg
operator|.
name|setName
argument_list|(
name|toExternalBuilding
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
block|}
else|else
block|{
name|toBldg
operator|=
operator|(
name|Building
operator|)
name|fromBldg
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|toSession
operator|.
name|getBuildings
argument_list|()
operator|==
literal|null
condition|)
block|{
name|toSession
operator|.
name|setBuildings
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|toBldg
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
name|toSession
operator|.
name|getBuildings
argument_list|()
operator|.
name|add
argument_list|(
name|toBldg
argument_list|)
expr_stmt|;
name|bDao
operator|.
name|saveOrUpdate
argument_list|(
name|toBldg
argument_list|)
expr_stmt|;
name|bDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|//bDao.getSession().evict(toBldg); -- commented out to prevent NonUniqueObjectException
name|bDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|fromBldg
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"rollForward"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.rollForward"
argument_list|,
literal|"Buildings"
argument_list|,
name|fromSession
operator|.
name|getLabel
argument_list|()
argument_list|,
name|toSession
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|"Failed to roll all buildings forward."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|rollManagersForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|RollForwardSessionForm
name|rollForwardSessionForm
parameter_list|)
block|{
name|Session
name|toSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollForwardTo
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|fromSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollManagersForwardFrom
argument_list|()
argument_list|)
decl_stmt|;
name|Department
name|fromDepartment
init|=
literal|null
decl_stmt|;
name|Department
name|toDepartment
init|=
literal|null
decl_stmt|;
name|TimetableManagerDAO
name|tmDao
init|=
operator|new
name|TimetableManagerDAO
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|fromSession
operator|.
name|getDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromDepartment
operator|=
operator|(
name|Department
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromDepartment
operator|!=
literal|null
operator|&&
name|fromDepartment
operator|.
name|getTimetableManagers
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|toDepartment
operator|=
name|fromDepartment
operator|.
name|findSameDepartmentInSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDepartment
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|toDepartment
operator|.
name|getTimetableManagers
argument_list|()
operator|==
literal|null
condition|)
block|{
name|toDepartment
operator|.
name|setTimetableManagers
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TimetableManager
name|tm
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|tmIt
init|=
name|fromDepartment
operator|.
name|getTimetableManagers
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|tmIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|tm
operator|=
operator|(
name|TimetableManager
operator|)
name|tmIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|tm
operator|!=
literal|null
condition|)
block|{
name|tm
operator|.
name|getDepartments
argument_list|()
operator|.
name|add
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|tmDao
operator|.
name|saveOrUpdate
argument_list|(
name|tm
argument_list|)
expr_stmt|;
name|tmDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|tm
operator|.
name|getSolverGroups
argument_list|(
name|toSession
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|sgIt
init|=
name|tm
operator|.
name|getSolverGroups
argument_list|(
name|fromSession
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|sgIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SolverGroup
name|fromSg
init|=
operator|(
name|SolverGroup
operator|)
name|sgIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|SolverGroup
name|toSg
init|=
name|SolverGroup
operator|.
name|findBySessionIdAbbv
argument_list|(
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|fromSg
operator|.
name|getAbbv
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|toSg
operator|!=
literal|null
operator|&&
operator|!
name|tm
operator|.
name|getSolverGroups
argument_list|()
operator|.
name|contains
argument_list|(
name|toSg
argument_list|)
condition|)
block|{
name|tm
operator|.
name|getSolverGroups
argument_list|()
operator|.
name|add
argument_list|(
name|toSg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
name|tmDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tmDao
operator|.
name|getSession
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"rollForward"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.rollForward"
argument_list|,
literal|"Timetable Managers"
argument_list|,
name|fromSession
operator|.
name|getLabel
argument_list|()
argument_list|,
name|toSession
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|"Failed to roll all timetable managers forward."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|rollDepartmentsForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|RollForwardSessionForm
name|rollForwardSessionForm
parameter_list|)
block|{
name|Session
name|toSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollForwardTo
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|fromSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollDeptsFowardFrom
argument_list|()
argument_list|)
decl_stmt|;
name|Department
name|fromDepartment
init|=
literal|null
decl_stmt|;
name|Department
name|toDepartment
init|=
literal|null
decl_stmt|;
name|DepartmentDAO
name|dDao
init|=
operator|new
name|DepartmentDAO
argument_list|()
decl_stmt|;
name|SolverGroup
name|sg
init|=
literal|null
decl_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|fromSession
operator|.
name|getDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromDepartment
operator|=
operator|(
name|Department
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromDepartment
operator|!=
literal|null
condition|)
block|{
name|toDepartment
operator|=
operator|(
name|Department
operator|)
name|fromDepartment
operator|.
name|clone
argument_list|()
expr_stmt|;
name|toDepartment
operator|.
name|setStatusType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
name|toSession
operator|.
name|addTodepartments
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|dDao
operator|.
name|saveOrUpdate
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromDepartment
operator|.
name|getSolverGroup
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sg
operator|=
name|SolverGroup
operator|.
name|findBySessionIdName
argument_list|(
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|fromDepartment
operator|.
name|getSolverGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sg
operator|==
literal|null
condition|)
block|{
name|sg
operator|=
operator|(
name|SolverGroup
operator|)
name|fromDepartment
operator|.
name|getSolverGroup
argument_list|()
operator|.
name|clone
argument_list|()
expr_stmt|;
name|sg
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sg
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|null
operator|==
name|sg
operator|.
name|getDepartments
argument_list|()
condition|)
block|{
name|sg
operator|.
name|setDepartments
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sg
operator|.
name|getDepartments
argument_list|()
operator|.
name|add
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setSolverGroup
argument_list|(
name|sg
argument_list|)
expr_stmt|;
name|SolverGroupDAO
name|sgDao
init|=
operator|new
name|SolverGroupDAO
argument_list|()
decl_stmt|;
name|sgDao
operator|.
name|saveOrUpdate
argument_list|(
name|sg
argument_list|)
expr_stmt|;
block|}
block|}
name|dDao
operator|.
name|saveOrUpdate
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|DistributionTypeDAO
name|dtDao
init|=
operator|new
name|DistributionTypeDAO
argument_list|()
decl_stmt|;
name|List
name|l
init|=
name|dtDao
operator|.
name|getQuery
argument_list|(
literal|"select dt from DistributionType dt inner join dt.departments as d where d.uniqueId = "
operator|+
name|fromDepartment
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
operator|!
name|l
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|DistributionType
name|distributionType
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|dtIt
init|=
name|l
operator|.
name|iterator
argument_list|()
init|;
name|dtIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|distributionType
operator|=
operator|(
name|DistributionType
operator|)
name|dtIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|distributionType
operator|.
name|getDepartments
argument_list|()
operator|.
name|add
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|dtDao
operator|.
name|saveOrUpdate
argument_list|(
name|distributionType
argument_list|)
expr_stmt|;
block|}
block|}
name|dDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|dDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|dDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|fromDepartment
argument_list|)
expr_stmt|;
block|}
block|}
name|dDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|dDao
operator|.
name|getSession
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"rollForward"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.rollForward"
argument_list|,
literal|"Departments"
argument_list|,
name|fromSession
operator|.
name|getLabel
argument_list|()
argument_list|,
name|toSession
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|"Failed to roll all departments forward."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|rollDatePatternOntoDepartments
parameter_list|(
name|DatePattern
name|fromDatePattern
parameter_list|,
name|DatePattern
name|toDatePattern
parameter_list|)
block|{
if|if
condition|(
name|fromDatePattern
operator|.
name|getDepartments
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromDatePattern
operator|.
name|getDepartments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Department
name|fromDept
range|:
name|fromDatePattern
operator|.
name|getDepartments
argument_list|()
control|)
block|{
name|Department
name|toDepartment
init|=
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|fromDept
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|toDatePattern
operator|.
name|getSession
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|toDepartment
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|null
operator|==
name|toDepartment
operator|.
name|getDatePatterns
argument_list|()
condition|)
block|{
name|toDepartment
operator|.
name|setDatePatterns
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|toDepartment
operator|.
name|getDatePatterns
argument_list|()
operator|.
name|add
argument_list|(
name|toDatePattern
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|toDatePattern
operator|.
name|getDepartments
argument_list|()
condition|)
block|{
name|toDatePattern
operator|.
name|setDepartments
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|toDatePattern
operator|.
name|addTodepartments
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|rollDatePatternsForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|RollForwardSessionForm
name|rollForwardSessionForm
parameter_list|)
block|{
name|Session
name|toSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollForwardTo
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|fromSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollDatePatternsForwardFrom
argument_list|()
argument_list|)
decl_stmt|;
name|Vector
name|fromDatePatterns
init|=
name|DatePattern
operator|.
name|findAll
argument_list|(
name|fromSession
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DatePattern
name|fromDatePattern
init|=
literal|null
decl_stmt|;
name|DatePattern
name|toDatePattern
init|=
literal|null
decl_stmt|;
name|DatePatternDAO
name|dpDao
init|=
operator|new
name|DatePatternDAO
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|fromDatePatterns
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromDatePattern
operator|=
operator|(
name|DatePattern
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromDatePattern
operator|!=
literal|null
condition|)
block|{
name|toDatePattern
operator|=
operator|(
name|DatePattern
operator|)
name|fromDatePattern
operator|.
name|clone
argument_list|()
expr_stmt|;
name|toDatePattern
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
name|rollDatePatternOntoDepartments
argument_list|(
name|fromDatePattern
argument_list|,
name|toDatePattern
argument_list|)
expr_stmt|;
name|dpDao
operator|.
name|saveOrUpdate
argument_list|(
name|toDatePattern
argument_list|)
expr_stmt|;
name|dpDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fromSession
operator|.
name|getDefaultDatePattern
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|DatePattern
name|defDp
init|=
name|DatePattern
operator|.
name|findByName
argument_list|(
name|toSession
argument_list|,
name|fromSession
operator|.
name|getDefaultDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|defDp
operator|!=
literal|null
condition|)
block|{
name|toSession
operator|.
name|setDefaultDatePattern
argument_list|(
name|defDp
argument_list|)
expr_stmt|;
name|SessionDAO
name|sDao
init|=
operator|new
name|SessionDAO
argument_list|()
decl_stmt|;
name|sDao
operator|.
name|saveOrUpdate
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
block|}
block|}
name|dpDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|dpDao
operator|.
name|getSession
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"rollForward"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.rollForward"
argument_list|,
literal|"Date Patterns"
argument_list|,
name|fromSession
operator|.
name|getLabel
argument_list|()
argument_list|,
name|toSession
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|"Failed to roll all date patterns forward."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|rollSubjectAreasForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|RollForwardSessionForm
name|rollForwardSessionForm
parameter_list|)
block|{
name|Session
name|toSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollForwardTo
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|fromSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollSubjectAreasForwardFrom
argument_list|()
argument_list|)
decl_stmt|;
name|SubjectArea
name|toSubjectArea
init|=
literal|null
decl_stmt|;
name|SubjectArea
name|fromSubjectArea
init|=
literal|null
decl_stmt|;
name|SubjectAreaDAO
name|sDao
init|=
operator|new
name|SubjectAreaDAO
argument_list|()
decl_stmt|;
name|Department
name|toDepartment
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|sessionHasCourseCatalog
argument_list|(
name|toSession
argument_list|)
condition|)
block|{
name|CourseCatalogDAO
name|ccDao
init|=
operator|new
name|CourseCatalogDAO
argument_list|()
decl_stmt|;
name|List
name|subjects
init|=
name|ccDao
operator|.
name|getQuery
argument_list|(
literal|"select distinct cc.subject, cc.previousSubject from CourseCatalog cc where cc.session.uniqueId=:sessionId and cc.previousSubject != null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|subjects
operator|!=
literal|null
condition|)
block|{
name|String
name|toSubject
init|=
literal|null
decl_stmt|;
name|String
name|fromSubject
init|=
literal|null
decl_stmt|;
name|Object
index|[]
name|subjectInfo
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|saIt
init|=
name|subjects
operator|.
name|iterator
argument_list|()
init|;
name|saIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|subjectInfo
operator|=
operator|(
name|Object
index|[]
operator|)
name|saIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|subjectInfo
operator|!=
literal|null
operator|&&
name|subjectInfo
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|toSubject
operator|=
operator|(
name|String
operator|)
name|subjectInfo
index|[
literal|0
index|]
expr_stmt|;
name|fromSubject
operator|=
operator|(
name|String
operator|)
name|subjectInfo
index|[
literal|1
index|]
expr_stmt|;
name|fromSubjectArea
operator|=
name|SubjectArea
operator|.
name|findByAbbv
argument_list|(
name|fromSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|fromSubject
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromSubjectArea
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|toSubjectArea
operator|=
operator|(
name|SubjectArea
operator|)
name|fromSubjectArea
operator|.
name|clone
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|toSubject
operator|.
name|equals
argument_list|(
name|fromSubject
argument_list|)
condition|)
block|{
name|toSubjectArea
operator|.
name|setSubjectAreaAbbreviation
argument_list|(
name|toSubject
argument_list|)
expr_stmt|;
block|}
name|toSubjectArea
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
name|toSession
operator|.
name|addTosubjectAreas
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromSubjectArea
operator|.
name|getDepartment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|toDepartment
operator|=
name|fromSubjectArea
operator|.
name|getDepartment
argument_list|()
operator|.
name|findSameDepartmentInSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDepartment
operator|!=
literal|null
condition|)
block|{
name|toSubjectArea
operator|.
name|setDepartment
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|addTosubjectAreas
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
name|sDao
operator|.
name|saveOrUpdate
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|fromSubjectArea
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|List
name|pseudoSubjects
init|=
name|sDao
operator|.
name|getQuery
argument_list|(
literal|"from SubjectArea sa where sa.session=:fromSessionId and sa.pseudoSubjectArea = 1 and sa.subjectAreaAbbreviation not in (select cc.subject from CourseCatalog cc where cc.session.uniqueId=:toSessionId)"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"fromSessionId"
argument_list|,
name|fromSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"toSessionId"
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|pseudoSubjects
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|pseudoSubjects
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromSubjectArea
operator|=
operator|(
name|SubjectArea
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromSubjectArea
operator|!=
literal|null
condition|)
block|{
name|toSubjectArea
operator|=
operator|(
name|SubjectArea
operator|)
name|fromSubjectArea
operator|.
name|clone
argument_list|()
expr_stmt|;
name|toSubjectArea
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
name|toSession
operator|.
name|addTosubjectAreas
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromSubjectArea
operator|.
name|getDepartment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|toDepartment
operator|=
name|fromSubjectArea
operator|.
name|getDepartment
argument_list|()
operator|.
name|findSameDepartmentInSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDepartment
operator|!=
literal|null
condition|)
block|{
name|toSubjectArea
operator|.
name|setDepartment
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|addTosubjectAreas
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
name|sDao
operator|.
name|saveOrUpdate
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|fromSubjectArea
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|List
name|newSubjects
init|=
name|ccDao
operator|.
name|getQuery
argument_list|(
literal|"select distinct subject from CourseCatalog cc where cc.session.uniqueId=:sessionId and cc.previousSubject = null and cc.subject not in (select sa.subjectAreaAbbreviation from SubjectArea sa where sa.session.uniqueId=:sessionId)"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|toDepartment
operator|=
name|Department
operator|.
name|findByDeptCode
argument_list|(
literal|"TEMP"
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDepartment
operator|==
literal|null
condition|)
block|{
name|toDepartment
operator|=
operator|new
name|Department
argument_list|()
expr_stmt|;
name|toDepartment
operator|.
name|setAbbreviation
argument_list|(
literal|"TEMP"
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setAllowReqRoom
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setAllowReqTime
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setDeptCode
argument_list|(
literal|"TEMP"
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setExternalManager
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setExternalUniqueId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setName
argument_list|(
literal|"Temp Department For New Subjects"
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|setDistributionPrefPriority
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|toSession
operator|.
name|addTodepartments
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
block|}
name|String
name|toSubject
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|saIt
init|=
name|newSubjects
operator|.
name|iterator
argument_list|()
init|;
name|saIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|toSubject
operator|=
operator|(
name|String
operator|)
name|saIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|toSubject
operator|!=
literal|null
condition|)
block|{
name|toSubjectArea
operator|=
operator|new
name|SubjectArea
argument_list|()
expr_stmt|;
name|toSubjectArea
operator|.
name|setDepartment
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|toSubjectArea
operator|.
name|setLongTitle
argument_list|(
literal|"New Subject - Please Name Me"
argument_list|)
expr_stmt|;
name|toSubjectArea
operator|.
name|setPseudoSubjectArea
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|toSubjectArea
operator|.
name|setScheduleBookOnly
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|toSubjectArea
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
name|toSubjectArea
operator|.
name|setShortTitle
argument_list|(
literal|"New Subject"
argument_list|)
expr_stmt|;
name|toSubjectArea
operator|.
name|setSubjectAreaAbbreviation
argument_list|(
name|toSubject
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|addTosubjectAreas
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
name|toSession
operator|.
name|addTosubjectAreas
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
name|sDao
operator|.
name|saveOrUpdate
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|fromSubjectArea
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|fromSession
operator|.
name|getSubjectAreas
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromSession
operator|.
name|getSubjectAreas
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|fromSession
operator|.
name|getSubjectAreas
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromSubjectArea
operator|=
operator|(
name|SubjectArea
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromSubjectArea
operator|!=
literal|null
condition|)
block|{
name|toSubjectArea
operator|=
operator|(
name|SubjectArea
operator|)
name|fromSubjectArea
operator|.
name|clone
argument_list|()
expr_stmt|;
name|toSubjectArea
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
name|toSession
operator|.
name|addTosubjectAreas
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromSubjectArea
operator|.
name|getDepartment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|toDepartment
operator|=
name|fromSubjectArea
operator|.
name|getDepartment
argument_list|()
operator|.
name|findSameDepartmentInSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDepartment
operator|!=
literal|null
condition|)
block|{
name|toSubjectArea
operator|.
name|setDepartment
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|toDepartment
operator|.
name|addTosubjectAreas
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
name|sDao
operator|.
name|saveOrUpdate
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|toSubjectArea
argument_list|)
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|fromSubjectArea
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|sDao
operator|.
name|getSession
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"rollForward"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.rollForward"
argument_list|,
literal|"Subject Areas"
argument_list|,
name|fromSession
operator|.
name|getLabel
argument_list|()
argument_list|,
name|toSession
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|"Failed to roll all subject areas forward."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Department
name|findManagingDepartmentForPrefGroup
parameter_list|(
name|PreferenceGroup
name|prefGroup
parameter_list|)
block|{
name|Department
name|toDepartment
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|prefGroup
operator|instanceof
name|DepartmentalInstructor
condition|)
block|{
name|DepartmentalInstructor
name|toInstructor
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|prefGroup
decl_stmt|;
name|toDepartment
operator|=
name|toInstructor
operator|.
name|getDepartment
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|prefGroup
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
name|SchedulingSubpart
name|toSchedSubpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|prefGroup
decl_stmt|;
if|if
condition|(
name|toSchedSubpart
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|toDepartment
operator|=
name|toSchedSubpart
operator|.
name|getManagingDept
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|toClass_
init|=
operator|(
name|Class_
operator|)
name|prefGroup
decl_stmt|;
name|toDepartment
operator|=
name|toClass_
operator|.
name|getManagingDept
argument_list|()
expr_stmt|;
if|if
condition|(
name|toDepartment
operator|==
literal|null
condition|)
block|{
name|toDepartment
operator|=
name|toClass_
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingDept
argument_list|()
expr_stmt|;
block|}
block|}
return|return
operator|(
name|toDepartment
operator|)
return|;
block|}
specifier|private
name|Department
name|findToManagingDepartmentForPrefGroup
parameter_list|(
name|PreferenceGroup
name|toPrefGroup
parameter_list|,
name|PreferenceGroup
name|fromPrefGroup
parameter_list|,
name|Session
name|toSession
parameter_list|)
block|{
name|Department
name|toDepartment
init|=
name|findManagingDepartmentForPrefGroup
argument_list|(
name|toPrefGroup
argument_list|)
decl_stmt|;
if|if
condition|(
name|toDepartment
operator|==
literal|null
condition|)
block|{
name|Department
name|fromDepartment
init|=
name|findManagingDepartmentForPrefGroup
argument_list|(
name|fromPrefGroup
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromDepartment
operator|!=
literal|null
condition|)
block|{
name|toDepartment
operator|=
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|fromDepartment
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|toDepartment
operator|)
return|;
block|}
block|}
return|return
operator|(
name|toDepartment
operator|)
return|;
block|}
specifier|private
name|void
name|createToBuildingPref
parameter_list|(
name|BuildingPref
name|fromBuildingPref
parameter_list|,
name|PreferenceGroup
name|fromPrefGroup
parameter_list|,
name|PreferenceGroup
name|toPrefGroup
parameter_list|,
name|Session
name|toSession
parameter_list|,
name|Set
name|locations
parameter_list|,
name|boolean
name|isExamPref
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|fromPrefGroup
operator|instanceof
name|Class_
condition|)
return|return;
name|BuildingPref
name|toBuildingPref
init|=
literal|null
decl_stmt|;
name|Building
name|toBuilding
init|=
name|fromBuildingPref
operator|.
name|getBuilding
argument_list|()
operator|.
name|findSameBuildingInSession
argument_list|(
name|toSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|toBuilding
operator|!=
literal|null
condition|)
block|{
name|boolean
name|deptHasRoomInBuilding
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|isExamPref
condition|)
block|{
name|Location
name|loc
init|=
literal|null
decl_stmt|;
name|Room
name|r
init|=
literal|null
decl_stmt|;
name|Iterator
name|rIt
init|=
name|locations
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|rIt
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|deptHasRoomInBuilding
condition|)
block|{
name|loc
operator|=
operator|(
name|Location
operator|)
name|rIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|loc
operator|instanceof
name|Room
condition|)
block|{
name|r
operator|=
operator|(
name|Room
operator|)
name|loc
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|getBuilding
argument_list|()
operator|!=
literal|null
operator|&&
name|r
operator|.
name|getBuilding
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|toBuilding
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|deptHasRoomInBuilding
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|isExamPref
operator|||
name|deptHasRoomInBuilding
condition|)
block|{
name|toBuildingPref
operator|=
operator|new
name|BuildingPref
argument_list|()
expr_stmt|;
name|toBuildingPref
operator|.
name|setBuilding
argument_list|(
name|toBuilding
argument_list|)
expr_stmt|;
name|toBuildingPref
operator|.
name|setPrefLevel
argument_list|(
name|fromBuildingPref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|toBuildingPref
operator|.
name|setDistanceFrom
argument_list|(
name|fromBuildingPref
operator|.
name|getDistanceFrom
argument_list|()
argument_list|)
expr_stmt|;
name|toBuildingPref
operator|.
name|setOwner
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTopreferences
argument_list|(
name|toBuildingPref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|rollForwardBuildingPrefs
parameter_list|(
name|PreferenceGroup
name|fromPrefGroup
parameter_list|,
name|PreferenceGroup
name|toPrefGroup
parameter_list|,
name|Session
name|toSession
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
name|locations
init|=
literal|null
decl_stmt|;
name|boolean
name|isExamPref
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|fromPrefGroup
operator|instanceof
name|Exam
condition|)
block|{
name|isExamPref
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|fromPrefGroup
operator|.
name|getBuildingPreferences
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromPrefGroup
operator|.
name|getBuildingPreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
operator|(
name|fromPrefGroup
operator|instanceof
name|Class_
operator|)
operator|&&
operator|(
operator|!
operator|(
name|fromPrefGroup
operator|instanceof
name|SchedulingSubpart
operator|)
operator|||
name|isSubpartLocationRollForward
argument_list|()
operator|)
condition|)
block|{
name|locations
operator|=
name|getLocationsFor
argument_list|(
name|fromPrefGroup
argument_list|,
name|toPrefGroup
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isExamPref
operator|&&
name|locations
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|fromPrefGroup
operator|.
name|getBuildingPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|createToBuildingPref
argument_list|(
operator|(
name|BuildingPref
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|fromPrefGroup
argument_list|,
name|toPrefGroup
argument_list|,
name|toSession
argument_list|,
name|locations
argument_list|,
name|isExamPref
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fromPrefGroup
operator|instanceof
name|SchedulingSubpart
operator|&&
name|isClassPrefsPushUp
argument_list|()
operator|&&
operator|(
name|toPrefGroup
operator|.
name|getBuildingPreferences
argument_list|()
operator|==
literal|null
operator|||
name|toPrefGroup
operator|.
name|getBuildingPreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|fromPrefGroup
decl_stmt|;
if|if
condition|(
name|locations
operator|==
literal|null
condition|)
block|{
name|locations
operator|=
name|getLocationsFor
argument_list|(
name|fromPrefGroup
argument_list|,
name|toPrefGroup
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|locations
operator|!=
literal|null
operator|&&
name|locations
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|ss
operator|.
name|getClasses
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|BuildingPref
argument_list|>
name|prefMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|BuildingPref
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|prefCount
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|key
decl_stmt|;
for|for
control|(
name|Iterator
name|cIt
init|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|cIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|cIt
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getBuildingPreferences
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|c
operator|.
name|getBuildingPreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|rfpIt
init|=
name|c
operator|.
name|getBuildingPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|rfpIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BuildingPref
name|rfp
init|=
operator|(
name|BuildingPref
operator|)
name|rfpIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|key
operator|=
name|rfp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefName
argument_list|()
operator|+
name|rfp
operator|.
name|getBuilding
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|prefMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|rfp
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|prefCount
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|cnt
operator|=
name|prefCount
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|cnt
operator|++
expr_stmt|;
name|prefCount
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|Integer
argument_list|(
name|cnt
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|int
name|clsCnt
init|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|pref
range|:
name|prefCount
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|prefCount
operator|.
name|get
argument_list|(
name|pref
argument_list|)
operator|.
name|intValue
argument_list|()
operator|==
name|clsCnt
condition|)
block|{
name|createToBuildingPref
argument_list|(
name|prefMap
operator|.
name|get
argument_list|(
name|pref
argument_list|)
argument_list|,
name|fromPrefGroup
argument_list|,
name|toPrefGroup
argument_list|,
name|toSession
argument_list|,
name|locations
argument_list|,
name|isExamPref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|createToRoomPref
parameter_list|(
name|RoomPref
name|fromRoomPref
parameter_list|,
name|PreferenceGroup
name|fromPrefGroup
parameter_list|,
name|PreferenceGroup
name|toPrefGroup
parameter_list|,
name|Session
name|toSession
parameter_list|,
name|Set
name|locations
parameter_list|)
block|{
if|if
condition|(
name|fromPrefGroup
operator|instanceof
name|Class_
condition|)
return|return;
name|RoomPref
name|toRoomPref
init|=
operator|new
name|RoomPref
argument_list|()
decl_stmt|;
if|if
condition|(
name|fromRoomPref
operator|.
name|getRoom
argument_list|()
operator|instanceof
name|Room
condition|)
block|{
name|Room
name|fromRoom
init|=
operator|(
name|Room
operator|)
name|fromRoomPref
operator|.
name|getRoom
argument_list|()
decl_stmt|;
name|Location
name|loc
init|=
literal|null
decl_stmt|;
name|Room
name|toRoom
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|rmIt
init|=
name|locations
operator|.
name|iterator
argument_list|()
init|;
name|rmIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|loc
operator|=
operator|(
name|Location
operator|)
name|rmIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|loc
operator|instanceof
name|Room
condition|)
block|{
name|toRoom
operator|=
operator|(
name|Room
operator|)
name|loc
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|toRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|fromRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|toRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|fromRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
operator|)
operator|||
operator|(
operator|(
name|toRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
operator|||
name|fromRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
operator|)
operator|&&
name|toRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|.
name|equals
argument_list|(
name|fromRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
operator|)
operator|)
operator|&&
name|toRoom
operator|.
name|getRoomNumber
argument_list|()
operator|.
name|equals
argument_list|(
name|fromRoom
operator|.
name|getRoomNumber
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
name|toRoom
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|toRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|fromRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|toRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|fromRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
operator|)
operator|||
operator|(
operator|(
name|toRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
operator|||
name|fromRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
operator|)
operator|&&
name|toRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|.
name|equals
argument_list|(
name|fromRoom
operator|.
name|getBuilding
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
operator|)
operator|)
operator|&&
name|toRoom
operator|.
name|getRoomNumber
argument_list|()
operator|.
name|equals
argument_list|(
name|fromRoom
operator|.
name|getRoomNumber
argument_list|()
argument_list|)
condition|)
block|{
name|toRoomPref
operator|.
name|setRoom
argument_list|(
name|toRoom
argument_list|)
expr_stmt|;
name|toRoomPref
operator|.
name|setPrefLevel
argument_list|(
name|fromRoomPref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|toRoomPref
operator|.
name|setOwner
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTopreferences
argument_list|(
name|toRoomPref
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|fromRoomPref
operator|.
name|getRoom
argument_list|()
operator|instanceof
name|NonUniversityLocation
condition|)
block|{
name|NonUniversityLocation
name|fromNonUniversityLocation
init|=
operator|(
name|NonUniversityLocation
operator|)
name|fromRoomPref
operator|.
name|getRoom
argument_list|()
decl_stmt|;
name|Location
name|loc
init|=
literal|null
decl_stmt|;
name|NonUniversityLocation
name|toNonUniversityLocation
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|rmIt
init|=
name|locations
operator|.
name|iterator
argument_list|()
init|;
name|rmIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|loc
operator|=
operator|(
name|Location
operator|)
name|rmIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|loc
operator|instanceof
name|NonUniversityLocation
condition|)
block|{
name|toNonUniversityLocation
operator|=
operator|(
name|NonUniversityLocation
operator|)
name|loc
expr_stmt|;
if|if
condition|(
name|toNonUniversityLocation
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|fromNonUniversityLocation
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
name|toNonUniversityLocation
operator|!=
literal|null
operator|&&
name|toNonUniversityLocation
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|fromNonUniversityLocation
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|toRoomPref
operator|.
name|setRoom
argument_list|(
name|toNonUniversityLocation
argument_list|)
expr_stmt|;
name|toRoomPref
operator|.
name|setPrefLevel
argument_list|(
name|fromRoomPref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|toRoomPref
operator|.
name|setOwner
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTopreferences
argument_list|(
name|toRoomPref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Set
name|getLocationsFor
parameter_list|(
name|PreferenceGroup
name|fromPrefGroup
parameter_list|,
name|PreferenceGroup
name|toPrefGroup
parameter_list|,
name|Session
name|toSession
parameter_list|)
block|{
name|Department
name|toDepartment
init|=
name|findToManagingDepartmentForPrefGroup
argument_list|(
name|toPrefGroup
argument_list|,
name|fromPrefGroup
argument_list|,
name|toSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|toDepartment
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
if|if
condition|(
operator|!
name|getRoomList
argument_list|()
operator|.
name|containsKey
argument_list|(
name|toDepartment
argument_list|)
condition|)
block|{
name|getRoomList
argument_list|()
operator|.
name|put
argument_list|(
name|toDepartment
argument_list|,
name|buildRoomListForDepartment
argument_list|(
name|toDepartment
argument_list|,
name|toSession
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
operator|(
name|Set
operator|)
name|getRoomList
argument_list|()
operator|.
name|get
argument_list|(
name|toDepartment
argument_list|)
operator|)
return|;
block|}
specifier|protected
name|void
name|rollForwardRoomPrefs
parameter_list|(
name|PreferenceGroup
name|fromPrefGroup
parameter_list|,
name|PreferenceGroup
name|toPrefGroup
parameter_list|,
name|Session
name|toSession
parameter_list|)
block|{
name|Set
name|locations
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fromPrefGroup
operator|.
name|getRoomPreferences
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromPrefGroup
operator|.
name|getRoomPreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
operator|(
name|fromPrefGroup
operator|instanceof
name|Class_
operator|)
operator|&&
operator|(
operator|!
operator|(
name|fromPrefGroup
operator|instanceof
name|SchedulingSubpart
operator|)
operator|||
name|isSubpartLocationRollForward
argument_list|()
operator|)
condition|)
block|{
name|locations
operator|=
name|getLocationsFor
argument_list|(
name|fromPrefGroup
argument_list|,
name|toPrefGroup
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|locations
operator|!=
literal|null
operator|&&
name|locations
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|fromPrefGroup
operator|.
name|getRoomPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|createToRoomPref
argument_list|(
operator|(
name|RoomPref
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|fromPrefGroup
argument_list|,
name|toPrefGroup
argument_list|,
name|toSession
argument_list|,
name|locations
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|fromPrefGroup
operator|instanceof
name|SchedulingSubpart
operator|&&
name|isClassPrefsPushUp
argument_list|()
operator|&&
operator|(
name|toPrefGroup
operator|.
name|getRoomPreferences
argument_list|()
operator|==
literal|null
operator|||
name|toPrefGroup
operator|.
name|getRoomPreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|fromPrefGroup
decl_stmt|;
if|if
condition|(
name|locations
operator|==
literal|null
condition|)
block|{
name|locations
operator|=
name|getLocationsFor
argument_list|(
name|fromPrefGroup
argument_list|,
name|toPrefGroup
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|locations
operator|!=
literal|null
operator|&&
name|locations
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|ss
operator|.
name|getClasses
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|RoomPref
argument_list|>
name|prefMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RoomPref
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|prefCount
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|key
decl_stmt|;
for|for
control|(
name|Iterator
name|cIt
init|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|cIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|cIt
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getRoomPreferences
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|c
operator|.
name|getRoomPreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|rfpIt
init|=
name|c
operator|.
name|getRoomPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|rfpIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomPref
name|rfp
init|=
operator|(
name|RoomPref
operator|)
name|rfpIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|key
operator|=
name|rfp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefName
argument_list|()
operator|+
name|rfp
operator|.
name|getRoom
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|prefMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|rfp
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|prefCount
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|cnt
operator|=
name|prefCount
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|cnt
operator|++
expr_stmt|;
name|prefCount
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|Integer
argument_list|(
name|cnt
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|int
name|clsCnt
init|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|pref
range|:
name|prefCount
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|prefCount
operator|.
name|get
argument_list|(
name|pref
argument_list|)
operator|.
name|intValue
argument_list|()
operator|==
name|clsCnt
condition|)
block|{
name|createToRoomPref
argument_list|(
name|prefMap
operator|.
name|get
argument_list|(
name|pref
argument_list|)
argument_list|,
name|fromPrefGroup
argument_list|,
name|toPrefGroup
argument_list|,
name|toSession
argument_list|,
name|locations
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|createToRoomFeaturePref
parameter_list|(
name|RoomFeaturePref
name|fromRoomFeaturePref
parameter_list|,
name|PreferenceGroup
name|fromPrefGroup
parameter_list|,
name|PreferenceGroup
name|toPrefGroup
parameter_list|,
name|Session
name|toSession
parameter_list|)
block|{
if|if
condition|(
name|fromPrefGroup
operator|instanceof
name|Class_
condition|)
return|return;
name|RoomFeaturePref
name|toRoomFeaturePref
init|=
operator|new
name|RoomFeaturePref
argument_list|()
decl_stmt|;
if|if
condition|(
name|fromRoomFeaturePref
operator|.
name|getRoomFeature
argument_list|()
operator|instanceof
name|GlobalRoomFeature
condition|)
block|{
name|GlobalRoomFeature
name|grf
init|=
operator|(
name|GlobalRoomFeature
operator|)
name|fromRoomFeaturePref
operator|.
name|getRoomFeature
argument_list|()
decl_stmt|;
name|toRoomFeaturePref
operator|.
name|setRoomFeature
argument_list|(
name|grf
argument_list|)
expr_stmt|;
name|toRoomFeaturePref
operator|.
name|setPrefLevel
argument_list|(
name|fromRoomFeaturePref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|toRoomFeaturePref
operator|.
name|setOwner
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTopreferences
argument_list|(
name|toRoomFeaturePref
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Department
name|toDepartment
init|=
name|findToManagingDepartmentForPrefGroup
argument_list|(
name|toPrefGroup
argument_list|,
name|fromPrefGroup
argument_list|,
name|toSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|toDepartment
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Collection
name|l
init|=
name|DepartmentRoomFeature
operator|.
name|getAllDepartmentRoomFeatures
argument_list|(
name|toDepartment
argument_list|)
decl_stmt|;
name|DepartmentRoomFeature
name|fromDepartmentRoomFeature
init|=
operator|(
name|DepartmentRoomFeature
operator|)
name|fromRoomFeaturePref
operator|.
name|getRoomFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
name|l
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|DepartmentRoomFeature
name|toDepartmentRoomFeature
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|rfIt
init|=
name|l
operator|.
name|iterator
argument_list|()
init|;
name|rfIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|toDepartmentRoomFeature
operator|=
operator|(
name|DepartmentRoomFeature
operator|)
name|rfIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|toDepartmentRoomFeature
operator|.
name|getLabel
argument_list|()
operator|.
name|equals
argument_list|(
name|fromDepartmentRoomFeature
operator|.
name|getLabel
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|toDepartmentRoomFeature
operator|.
name|getLabel
argument_list|()
operator|.
name|equals
argument_list|(
name|fromDepartmentRoomFeature
operator|.
name|getLabel
argument_list|()
argument_list|)
condition|)
block|{
name|toRoomFeaturePref
operator|.
name|setRoomFeature
argument_list|(
name|toDepartmentRoomFeature
argument_list|)
expr_stmt|;
name|toRoomFeaturePref
operator|.
name|setPrefLevel
argument_list|(
name|fromRoomFeaturePref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|toRoomFeaturePref
operator|.
name|setOwner
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTopreferences
argument_list|(
name|toRoomFeaturePref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|rollForwardRoomFeaturePrefs
parameter_list|(
name|PreferenceGroup
name|fromPrefGroup
parameter_list|,
name|PreferenceGroup
name|toPrefGroup
parameter_list|,
name|Session
name|toSession
parameter_list|)
block|{
if|if
condition|(
name|fromPrefGroup
operator|.
name|getRoomFeaturePreferences
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromPrefGroup
operator|.
name|getRoomFeaturePreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
operator|(
name|fromPrefGroup
operator|instanceof
name|Class_
operator|)
operator|&&
operator|(
operator|!
operator|(
name|fromPrefGroup
operator|instanceof
name|SchedulingSubpart
operator|)
operator|||
name|isSubpartLocationRollForward
argument_list|()
operator|)
condition|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|fromPrefGroup
operator|.
name|getRoomFeaturePreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|createToRoomFeaturePref
argument_list|(
operator|(
name|RoomFeaturePref
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|fromPrefGroup
argument_list|,
name|toPrefGroup
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fromPrefGroup
operator|instanceof
name|SchedulingSubpart
operator|&&
name|isClassPrefsPushUp
argument_list|()
operator|&&
operator|(
name|toPrefGroup
operator|.
name|getRoomFeaturePreferences
argument_list|()
operator|==
literal|null
operator|||
name|toPrefGroup
operator|.
name|getRoomFeaturePreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|fromPrefGroup
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getClasses
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|RoomFeaturePref
argument_list|>
name|prefMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RoomFeaturePref
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|prefCount
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|key
decl_stmt|;
for|for
control|(
name|Iterator
name|cIt
init|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|cIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|cIt
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getRoomFeaturePreferences
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|c
operator|.
name|getRoomFeaturePreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|rfpIt
init|=
name|c
operator|.
name|getRoomFeaturePreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|rfpIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomFeaturePref
name|rfp
init|=
operator|(
name|RoomFeaturePref
operator|)
name|rfpIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|key
operator|=
name|rfp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefName
argument_list|()
operator|+
name|rfp
operator|.
name|getRoomFeature
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|prefMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|rfp
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|prefCount
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|cnt
operator|=
name|prefCount
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|cnt
operator|++
expr_stmt|;
name|prefCount
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|Integer
argument_list|(
name|cnt
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|int
name|clsCnt
init|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|pref
range|:
name|prefCount
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|prefCount
operator|.
name|get
argument_list|(
name|pref
argument_list|)
operator|.
name|intValue
argument_list|()
operator|==
name|clsCnt
condition|)
block|{
name|createToRoomFeaturePref
argument_list|(
name|prefMap
operator|.
name|get
argument_list|(
name|pref
argument_list|)
argument_list|,
name|fromPrefGroup
argument_list|,
name|toPrefGroup
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|createToRoomGroupPref
parameter_list|(
name|RoomGroupPref
name|fromRoomGroupPref
parameter_list|,
name|PreferenceGroup
name|fromPrefGroup
parameter_list|,
name|PreferenceGroup
name|toPrefGroup
parameter_list|,
name|Session
name|toSession
parameter_list|)
block|{
if|if
condition|(
name|fromPrefGroup
operator|instanceof
name|Class_
condition|)
return|return;
name|RoomGroupPref
name|toRoomGroupPref
init|=
operator|new
name|RoomGroupPref
argument_list|()
decl_stmt|;
if|if
condition|(
name|fromRoomGroupPref
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|isDefaultGroup
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|toRoomGroupPref
operator|.
name|setRoomGroup
argument_list|(
name|fromRoomGroupPref
operator|.
name|getRoomGroup
argument_list|()
argument_list|)
expr_stmt|;
name|toRoomGroupPref
operator|.
name|setPrefLevel
argument_list|(
name|fromRoomGroupPref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|toRoomGroupPref
operator|.
name|setOwner
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTopreferences
argument_list|(
name|toRoomGroupPref
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Department
name|toDepartment
init|=
name|findToManagingDepartmentForPrefGroup
argument_list|(
name|toPrefGroup
argument_list|,
name|fromPrefGroup
argument_list|,
name|toSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|toDepartment
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Collection
name|l
init|=
name|RoomGroup
operator|.
name|getAllDepartmentRoomGroups
argument_list|(
name|toDepartment
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
name|l
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|RoomGroup
name|toRoomGroup
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|itRg
init|=
name|l
operator|.
name|iterator
argument_list|()
init|;
name|itRg
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|toRoomGroup
operator|=
operator|(
name|RoomGroup
operator|)
name|itRg
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|toRoomGroup
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|fromRoomGroupPref
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|toRoomGroup
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|fromRoomGroupPref
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|toRoomGroupPref
operator|.
name|setRoomGroup
argument_list|(
name|toRoomGroup
argument_list|)
expr_stmt|;
name|toRoomGroupPref
operator|.
name|setPrefLevel
argument_list|(
name|fromRoomGroupPref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|toRoomGroupPref
operator|.
name|setOwner
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTopreferences
argument_list|(
name|toRoomGroupPref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|rollForwardRoomGroupPrefs
parameter_list|(
name|PreferenceGroup
name|fromPrefGroup
parameter_list|,
name|PreferenceGroup
name|toPrefGroup
parameter_list|,
name|Session
name|toSession
parameter_list|)
block|{
if|if
condition|(
name|fromPrefGroup
operator|.
name|getRoomGroupPreferences
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromPrefGroup
operator|.
name|getRoomGroupPreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
operator|(
name|fromPrefGroup
operator|instanceof
name|Class_
operator|)
operator|&&
operator|(
operator|!
operator|(
name|fromPrefGroup
operator|instanceof
name|SchedulingSubpart
operator|)
operator|||
name|isSubpartLocationRollForward
argument_list|()
operator|)
condition|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|fromPrefGroup
operator|.
name|getRoomGroupPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|createToRoomGroupPref
argument_list|(
operator|(
name|RoomGroupPref
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|fromPrefGroup
argument_list|,
name|toPrefGroup
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fromPrefGroup
operator|instanceof
name|SchedulingSubpart
operator|&&
name|isClassPrefsPushUp
argument_list|()
operator|&&
operator|(
name|toPrefGroup
operator|.
name|getRoomGroupPreferences
argument_list|()
operator|==
literal|null
operator|||
name|toPrefGroup
operator|.
name|getRoomGroupPreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|fromPrefGroup
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getClasses
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|RoomGroupPref
argument_list|>
name|prefMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RoomGroupPref
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|prefCount
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|key
decl_stmt|;
for|for
control|(
name|Iterator
name|cIt
init|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|cIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|cIt
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getRoomGroupPreferences
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|c
operator|.
name|getRoomGroupPreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|rfpIt
init|=
name|c
operator|.
name|getRoomGroupPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|rfpIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomGroupPref
name|rfp
init|=
operator|(
name|RoomGroupPref
operator|)
name|rfpIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|key
operator|=
name|rfp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefName
argument_list|()
operator|+
name|rfp
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|prefMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|rfp
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|prefCount
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|cnt
operator|=
name|prefCount
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|cnt
operator|++
expr_stmt|;
name|prefCount
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|Integer
argument_list|(
name|cnt
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|int
name|clsCnt
init|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|pref
range|:
name|prefCount
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|prefCount
operator|.
name|get
argument_list|(
name|pref
argument_list|)
operator|.
name|intValue
argument_list|()
operator|==
name|clsCnt
condition|)
block|{
name|createToRoomGroupPref
argument_list|(
name|prefMap
operator|.
name|get
argument_list|(
name|pref
argument_list|)
argument_list|,
name|fromPrefGroup
argument_list|,
name|toPrefGroup
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|rollForwardTimePrefs
parameter_list|(
name|PreferenceGroup
name|fromPrefGroup
parameter_list|,
name|PreferenceGroup
name|toPrefGroup
parameter_list|,
name|Session
name|toSession
parameter_list|)
block|{
if|if
condition|(
name|fromPrefGroup
operator|.
name|getTimePreferences
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromPrefGroup
operator|.
name|getTimePreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
operator|(
name|fromPrefGroup
operator|instanceof
name|Class_
operator|)
operator|&&
operator|(
operator|!
operator|(
name|fromPrefGroup
operator|instanceof
name|SchedulingSubpart
operator|)
operator|||
name|isSubpartTimeRollForward
argument_list|()
operator|)
condition|)
block|{
name|TimePref
name|fromTimePref
init|=
literal|null
decl_stmt|;
name|TimePref
name|toTimePref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|fromPrefGroup
operator|.
name|getTimePreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromTimePref
operator|=
operator|(
name|TimePref
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromTimePref
operator|.
name|getTimePattern
argument_list|()
operator|==
literal|null
condition|)
block|{
name|toTimePref
operator|=
operator|(
name|TimePref
operator|)
name|fromTimePref
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|toTimePref
operator|=
name|TimePattern
operator|.
name|getMatchingTimePreference
argument_list|(
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|fromTimePref
argument_list|)
expr_stmt|;
if|if
condition|(
name|toTimePref
operator|==
literal|null
condition|)
block|{
name|Debug
operator|.
name|warning
argument_list|(
literal|"To Time Pattern not found:  "
operator|+
name|fromTimePref
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" for "
operator|+
name|fromPrefGroup
operator|.
name|htmlLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|toTimePref
operator|!=
literal|null
condition|)
block|{
name|toTimePref
operator|.
name|setOwner
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTopreferences
argument_list|(
name|toTimePref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// If subpart time preferences are not to be rolled forward, make sure any subpart time patterns are rolled forward without their time preferences.
if|if
condition|(
name|fromPrefGroup
operator|instanceof
name|SchedulingSubpart
operator|&&
operator|!
name|isSubpartTimeRollForward
argument_list|()
condition|)
block|{
name|TimePref
name|fromTimePref
init|=
literal|null
decl_stmt|;
name|TimePref
name|toTimePref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|fromPrefGroup
operator|.
name|getTimePreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromTimePref
operator|=
operator|(
name|TimePref
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromTimePref
operator|.
name|getTimePattern
argument_list|()
operator|==
literal|null
condition|)
block|{
name|toTimePref
operator|=
operator|(
name|TimePref
operator|)
name|fromTimePref
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|toTimePref
operator|=
name|TimePattern
operator|.
name|getMatchingTimePreference
argument_list|(
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|fromTimePref
argument_list|)
expr_stmt|;
if|if
condition|(
name|toTimePref
operator|==
literal|null
condition|)
block|{
name|Debug
operator|.
name|warning
argument_list|(
literal|"To Time Pattern not found:  "
operator|+
name|fromTimePref
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" for "
operator|+
name|fromPrefGroup
operator|.
name|htmlLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|toTimePref
operator|!=
literal|null
condition|)
block|{
name|toTimePref
operator|.
name|setPreference
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|toTimePref
operator|.
name|setOwner
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTopreferences
argument_list|(
name|toTimePref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|fromPrefGroup
operator|instanceof
name|SchedulingSubpart
operator|&&
name|isClassPrefsPushUp
argument_list|()
condition|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|fromPrefGroup
decl_stmt|;
if|if
condition|(
operator|(
name|ss
operator|.
name|getTimePreferences
argument_list|()
operator|==
literal|null
operator|||
name|ss
operator|.
name|getTimePreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
name|ss
operator|.
name|getClasses
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|TimePref
argument_list|>
name|prefMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TimePref
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|prefCount
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|TimePattern
argument_list|>
name|timePatterns
init|=
operator|new
name|HashSet
argument_list|<
name|TimePattern
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|key
decl_stmt|;
for|for
control|(
name|Iterator
name|cIt
init|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|cIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|cIt
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getTimePreferences
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|c
operator|.
name|getTimePreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|tpIt
init|=
name|c
operator|.
name|getTimePreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|tpIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|tp
init|=
operator|(
name|TimePref
operator|)
name|tpIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|key
operator|=
name|tp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefName
argument_list|()
operator|+
name|tp
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|tp
operator|.
name|getPreference
argument_list|()
expr_stmt|;
name|prefMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|tp
argument_list|)
expr_stmt|;
name|timePatterns
operator|.
name|add
argument_list|(
name|tp
operator|.
name|getTimePattern
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|prefCount
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|cnt
operator|=
name|prefCount
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|cnt
operator|++
expr_stmt|;
name|prefCount
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|Integer
argument_list|(
name|cnt
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|int
name|clsCnt
init|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|pref
range|:
name|prefCount
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|prefCount
operator|.
name|get
argument_list|(
name|pref
argument_list|)
operator|.
name|intValue
argument_list|()
operator|==
name|clsCnt
condition|)
block|{
name|TimePref
name|fromTimePref
init|=
name|prefMap
operator|.
name|get
argument_list|(
name|pref
argument_list|)
decl_stmt|;
name|TimePref
name|toTimePref
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fromTimePref
operator|.
name|getTimePattern
argument_list|()
operator|==
literal|null
condition|)
block|{
name|toTimePref
operator|=
operator|(
name|TimePref
operator|)
name|fromTimePref
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|fromTimePref
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getType
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
operator|(
name|TimePattern
operator|.
name|sTypeExactTime
operator|)
condition|)
block|{
continue|continue;
block|}
name|toTimePref
operator|=
name|TimePattern
operator|.
name|getMatchingTimePreference
argument_list|(
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|fromTimePref
argument_list|)
expr_stmt|;
if|if
condition|(
name|toTimePref
operator|==
literal|null
condition|)
block|{
name|Debug
operator|.
name|warning
argument_list|(
literal|"To Time Pattern not found:  "
operator|+
name|fromTimePref
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" for "
operator|+
name|fromPrefGroup
operator|.
name|htmlLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|toTimePref
operator|!=
literal|null
condition|)
block|{
name|toTimePref
operator|.
name|setOwner
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTopreferences
argument_list|(
name|toTimePref
argument_list|)
expr_stmt|;
if|if
condition|(
name|toTimePref
operator|.
name|getPreference
argument_list|()
operator|.
name|contains
argument_list|(
literal|""
operator|+
name|PreferenceLevel
operator|.
name|sCharLevelRequired
argument_list|)
operator|||
name|toTimePref
operator|.
name|getPreference
argument_list|()
operator|.
name|contains
argument_list|(
literal|""
operator|+
name|PreferenceLevel
operator|.
name|sCharLevelProhibited
argument_list|)
condition|)
block|{
name|toTimePref
operator|.
name|setPreference
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|timePatterns
operator|.
name|remove
argument_list|(
name|fromTimePref
operator|.
name|getTimePattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|TimePattern
name|fromTp
range|:
name|timePatterns
control|)
block|{
if|if
condition|(
name|fromTp
operator|.
name|getType
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
operator|(
name|TimePattern
operator|.
name|sTypeExactTime
operator|)
condition|)
block|{
continue|continue;
block|}
name|TimePattern
name|toTp
init|=
name|TimePattern
operator|.
name|getMatchingTimePattern
argument_list|(
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|fromTp
argument_list|)
decl_stmt|;
name|TimePref
name|toTimePref
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|toTp
operator|!=
literal|null
condition|)
block|{
name|toTimePref
operator|=
operator|new
name|TimePref
argument_list|()
expr_stmt|;
name|toTimePref
operator|.
name|setOwner
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toTimePref
operator|.
name|setTimePattern
argument_list|(
name|toTp
argument_list|)
expr_stmt|;
name|toTimePref
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
literal|""
operator|+
name|PreferenceLevel
operator|.
name|sCharLevelRequired
argument_list|)
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTopreferences
argument_list|(
name|toTimePref
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Debug
operator|.
name|warning
argument_list|(
literal|"To Time Pattern not found:  "
operator|+
name|fromTp
operator|.
name|getName
argument_list|()
operator|+
literal|" for "
operator|+
name|fromPrefGroup
operator|.
name|htmlLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|rollForwardDistributionPrefs
parameter_list|(
name|PreferenceGroup
name|fromPrefGroup
parameter_list|,
name|PreferenceGroup
name|toPrefGroup
parameter_list|,
name|Session
name|toSession
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
if|if
condition|(
name|fromPrefGroup
operator|.
name|getDistributionObjects
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromPrefGroup
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
operator|(
name|fromPrefGroup
operator|instanceof
name|Class_
operator|)
condition|)
block|{
name|DistributionObject
name|fromDistObj
init|=
literal|null
decl_stmt|;
name|DistributionObject
name|toDistObj
init|=
literal|null
decl_stmt|;
name|DistributionPref
name|fromDistributionPref
init|=
literal|null
decl_stmt|;
name|DistributionPref
name|toDistributionPref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|fromPrefGroup
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromDistObj
operator|=
operator|(
name|DistributionObject
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|toDistObj
operator|=
operator|new
name|DistributionObject
argument_list|()
expr_stmt|;
name|fromDistributionPref
operator|=
name|fromDistObj
operator|.
name|getDistributionPref
argument_list|()
expr_stmt|;
name|toDistributionPref
operator|=
name|DistributionPref
operator|.
name|findByIdRolledForwardFrom
argument_list|(
name|fromDistributionPref
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDistributionPref
operator|==
literal|null
condition|)
block|{
name|toDistributionPref
operator|=
operator|new
name|DistributionPref
argument_list|()
expr_stmt|;
name|toDistributionPref
operator|.
name|setDistributionType
argument_list|(
name|fromDistributionPref
operator|.
name|getDistributionType
argument_list|()
argument_list|)
expr_stmt|;
name|toDistributionPref
operator|.
name|setGrouping
argument_list|(
name|fromDistributionPref
operator|.
name|getGrouping
argument_list|()
argument_list|)
expr_stmt|;
name|toDistributionPref
operator|.
name|setPrefLevel
argument_list|(
name|fromDistributionPref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|toDistributionPref
operator|.
name|setUniqueIdRolledForwardFrom
argument_list|(
name|fromDistributionPref
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|Department
name|toDept
init|=
name|Department
operator|.
name|findByDeptCode
argument_list|(
operator|(
operator|(
name|Department
operator|)
name|fromDistributionPref
operator|.
name|getOwner
argument_list|()
operator|)
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|toDept
operator|!=
literal|null
condition|)
block|{
name|toDistributionPref
operator|.
name|setOwner
argument_list|(
name|toDept
argument_list|)
expr_stmt|;
name|toDept
operator|.
name|addTopreferences
argument_list|(
name|toDistributionPref
argument_list|)
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
block|}
name|toDistObj
operator|.
name|setDistributionPref
argument_list|(
name|toDistributionPref
argument_list|)
expr_stmt|;
name|toDistObj
operator|.
name|setPrefGroup
argument_list|(
name|toPrefGroup
argument_list|)
expr_stmt|;
name|toDistObj
operator|.
name|setSequenceNumber
argument_list|(
name|fromDistObj
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
name|toPrefGroup
operator|.
name|addTodistributionObjects
argument_list|(
name|toDistObj
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|toDistributionPref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|rollForwardExamPeriods
parameter_list|(
name|Session
name|toSession
parameter_list|,
name|Session
name|fromSession
parameter_list|)
block|{
name|ExamPeriod
name|fromExamPeriod
init|=
literal|null
decl_stmt|;
name|ExamPeriod
name|toExamPeriod
init|=
literal|null
decl_stmt|;
name|ExamPeriodDAO
name|examPeriodDao
init|=
operator|new
name|ExamPeriodDAO
argument_list|()
decl_stmt|;
name|TreeSet
name|examPeriods
init|=
name|ExamPeriod
operator|.
name|findAll
argument_list|(
name|fromSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|examPeriodIt
init|=
name|examPeriods
operator|.
name|iterator
argument_list|()
init|;
name|examPeriodIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromExamPeriod
operator|=
operator|(
name|ExamPeriod
operator|)
name|examPeriodIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|toExamPeriod
operator|=
operator|(
name|ExamPeriod
operator|)
name|fromExamPeriod
operator|.
name|clone
argument_list|()
expr_stmt|;
name|toExamPeriod
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|toExamPeriod
operator|.
name|getEventStartOffset
argument_list|()
operator|==
literal|null
condition|)
name|toExamPeriod
operator|.
name|setEventStartOffset
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|toExamPeriod
operator|.
name|getEventStopOffset
argument_list|()
operator|==
literal|null
condition|)
name|toExamPeriod
operator|.
name|setEventStopOffset
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|examPeriodDao
operator|.
name|save
argument_list|(
name|toExamPeriod
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|rollForwardExamLocationPrefs
parameter_list|(
name|Session
name|toSession
parameter_list|,
name|Session
name|fromSession
parameter_list|)
throws|throws
name|Exception
block|{
name|List
name|rooms
init|=
operator|(
operator|new
name|RoomDAO
argument_list|()
operator|)
operator|.
name|getQuery
argument_list|(
literal|"select distinct r from Room r inner join r.examPreferences as ep where r.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|fromSession
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|Room
name|fromRoom
init|=
literal|null
decl_stmt|;
name|Room
name|toRoom
init|=
literal|null
decl_stmt|;
name|ExamLocationPref
name|fromPref
init|=
literal|null
decl_stmt|;
name|ExamPeriod
name|toPeriod
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|rIt
init|=
name|rooms
operator|.
name|iterator
argument_list|()
init|;
name|rIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromRoom
operator|=
operator|(
name|Room
operator|)
name|rIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|toRoom
operator|=
name|fromRoom
operator|.
name|findSameRoomInSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|toRoom
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|elpIt
init|=
name|fromRoom
operator|.
name|getExamPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|elpIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromPref
operator|=
operator|(
name|ExamLocationPref
operator|)
name|elpIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|toPeriod
operator|=
name|fromPref
operator|.
name|getExamPeriod
argument_list|()
operator|.
name|findSameExamPeriodInSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|toPeriod
operator|!=
literal|null
condition|)
block|{
name|toRoom
operator|.
name|addExamPreference
argument_list|(
name|toPeriod
argument_list|,
name|fromPref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|List
name|nonUniversityLocations
init|=
operator|(
operator|new
name|NonUniversityLocationDAO
argument_list|()
operator|)
operator|.
name|getQuery
argument_list|(
literal|"select distinct nul from NonUniversityLocation nul inner join nul.examPreferences as ep where nul.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|fromSession
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|NonUniversityLocation
name|fromNonUniversityLocation
init|=
literal|null
decl_stmt|;
name|NonUniversityLocation
name|toNonUniversityLocation
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|nulIt
init|=
name|nonUniversityLocations
operator|.
name|iterator
argument_list|()
init|;
name|nulIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromNonUniversityLocation
operator|=
operator|(
name|NonUniversityLocation
operator|)
name|nulIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|toNonUniversityLocation
operator|=
name|fromNonUniversityLocation
operator|.
name|findSameNonUniversityLocationInSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|toNonUniversityLocation
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|elpIt
init|=
name|fromNonUniversityLocation
operator|.
name|getExamPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|elpIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromPref
operator|=
operator|(
name|ExamLocationPref
operator|)
name|elpIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|toPeriod
operator|=
name|fromPref
operator|.
name|getExamPeriod
argument_list|()
operator|.
name|findSameExamPeriodInSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|toPeriod
operator|!=
literal|null
condition|)
block|{
name|toNonUniversityLocation
operator|.
name|addExamPreference
argument_list|(
name|toPeriod
argument_list|,
name|fromPref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|rollForwardExam
parameter_list|(
name|Exam
name|fromExam
parameter_list|,
name|Session
name|toSession
parameter_list|)
throws|throws
name|Exception
block|{
name|Exam
name|toExam
init|=
operator|new
name|Exam
argument_list|()
decl_stmt|;
name|toExam
operator|.
name|setExamType
argument_list|(
name|fromExam
operator|.
name|getExamType
argument_list|()
argument_list|)
expr_stmt|;
name|toExam
operator|.
name|setLength
argument_list|(
name|fromExam
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|toExam
operator|.
name|setMaxNbrRooms
argument_list|(
name|fromExam
operator|.
name|getMaxNbrRooms
argument_list|()
argument_list|)
expr_stmt|;
name|toExam
operator|.
name|setNote
argument_list|(
name|fromExam
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|toExam
operator|.
name|setSeatingType
argument_list|(
name|fromExam
operator|.
name|getSeatingType
argument_list|()
argument_list|)
expr_stmt|;
name|toExam
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
name|toExam
operator|.
name|setUniqueIdRolledForwardFrom
argument_list|(
name|fromExam
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromExam
operator|.
name|getAveragePeriod
argument_list|()
operator|!=
literal|null
operator|&&
name|fromExam
operator|.
name|getAssignedPeriod
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|toExam
operator|.
name|setAvgPeriod
argument_list|(
operator|new
name|Integer
argument_list|(
operator|(
name|fromExam
operator|.
name|getAvgPeriod
argument_list|()
operator|.
name|intValue
argument_list|()
operator|+
name|fromExam
operator|.
name|getAssignedPeriod
argument_list|()
operator|.
name|getIndex
argument_list|()
operator|)
operator|/
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|fromExam
operator|.
name|getAveragePeriod
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|toExam
operator|.
name|setAvgPeriod
argument_list|(
name|fromExam
operator|.
name|getAvgPeriod
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|fromExam
operator|.
name|getAssignedPeriod
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|toExam
operator|.
name|setAvgPeriod
argument_list|(
name|fromExam
operator|.
name|getAssignedPeriod
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|oIt
init|=
name|fromExam
operator|.
name|getOwners
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|oIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamOwner
name|fromOwner
init|=
operator|(
name|ExamOwner
operator|)
name|oIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExamOwner
name|toOwner
init|=
operator|new
name|ExamOwner
argument_list|()
decl_stmt|;
if|if
condition|(
name|fromOwner
operator|.
name|getOwnerType
argument_list|()
operator|.
name|equals
argument_list|(
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
condition|)
block|{
name|Class_
name|fromClass
init|=
operator|(
name|Class_
operator|)
name|fromOwner
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
name|Class_
name|toClass
init|=
name|Class_
operator|.
name|findByIdRolledForwardFrom
argument_list|(
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|fromClass
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|toClass
operator|!=
literal|null
condition|)
block|{
name|toOwner
operator|.
name|setOwner
argument_list|(
name|toClass
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|fromOwner
operator|.
name|getOwnerType
argument_list|()
operator|.
name|equals
argument_list|(
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
condition|)
block|{
name|InstrOfferingConfig
name|fromIoc
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|fromOwner
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
name|InstrOfferingConfig
name|toIoc
init|=
name|InstrOfferingConfig
operator|.
name|findByIdRolledForwardFrom
argument_list|(
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|fromIoc
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|toIoc
operator|!=
literal|null
condition|)
block|{
name|toOwner
operator|.
name|setOwner
argument_list|(
name|toIoc
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|fromOwner
operator|.
name|getOwnerType
argument_list|()
operator|.
name|equals
argument_list|(
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
condition|)
block|{
name|InstructionalOffering
name|fromIo
init|=
operator|(
name|InstructionalOffering
operator|)
name|fromOwner
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
name|InstructionalOffering
name|toIo
init|=
name|InstructionalOffering
operator|.
name|findByIdRolledForwardFrom
argument_list|(
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|fromIo
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|toIo
operator|!=
literal|null
condition|)
block|{
name|toOwner
operator|.
name|setOwner
argument_list|(
name|toIo
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|fromOwner
operator|.
name|getOwnerType
argument_list|()
operator|.
name|equals
argument_list|(
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
condition|)
block|{
name|CourseOffering
name|fromCo
init|=
operator|(
name|CourseOffering
operator|)
name|fromOwner
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
name|CourseOffering
name|toCo
init|=
name|CourseOffering
operator|.
name|findByIdRolledForwardFrom
argument_list|(
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|fromCo
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|toCo
operator|!=
literal|null
condition|)
block|{
name|toOwner
operator|.
name|setOwner
argument_list|(
name|toCo
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|toOwner
operator|.
name|getOwnerType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|toOwner
operator|.
name|setExam
argument_list|(
name|toExam
argument_list|)
expr_stmt|;
name|toExam
operator|.
name|addToowners
argument_list|(
name|toOwner
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|toExam
operator|.
name|getOwners
argument_list|()
operator|!=
literal|null
operator|||
name|toExam
operator|.
name|getOwners
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExamDAO
name|eDao
init|=
operator|new
name|ExamDAO
argument_list|()
decl_stmt|;
name|eDao
operator|.
name|save
argument_list|(
name|toExam
argument_list|)
expr_stmt|;
name|rollForwardBuildingPrefs
argument_list|(
name|fromExam
argument_list|,
name|toExam
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
name|rollForwardRoomGroupPrefs
argument_list|(
name|fromExam
argument_list|,
name|toExam
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
name|rollForwardRoomFeaturePrefs
argument_list|(
name|fromExam
argument_list|,
name|toExam
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
name|eDao
operator|.
name|update
argument_list|(
name|toExam
argument_list|)
expr_stmt|;
name|eDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|eDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|toExam
argument_list|)
expr_stmt|;
name|eDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|fromExam
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|List
name|findExamToRollForward
parameter_list|(
name|Session
name|toSession
parameter_list|,
name|int
name|examType
parameter_list|)
block|{
name|ExamDAO
name|eDao
init|=
operator|new
name|ExamDAO
argument_list|()
decl_stmt|;
return|return
operator|(
name|eDao
operator|.
name|getQuery
argument_list|(
literal|"select distinct e from ExamOwner as eo inner join eo.exam as e where e.examType = :examType "
operator|+
literal|" and ((eo.ownerType=:ownerTypeClass and eo.ownerId in (select c.uniqueIdRolledForwardFrom from Class_ as c where c.schedulingSubpart.instrOfferingConfig.instructionalOffering.session.uniqueId = :toSessionId)) "
operator|+
literal|" or (eo.ownerType=:ownerTypeCourse and eo.ownerId in (select co.uniqueIdRolledForwardFrom from CourseOffering as co where co.subjectArea.session.uniqueId = :toSessionId)) "
operator|+
literal|" or (eo.ownerType=:ownerTypeOffering and eo.ownerId in (select io.uniqueIdRolledForwardFrom from InstructionalOffering as io where io.session.uniqueId = :toSessionId)) "
operator|+
literal|" or (eo.ownerType=:ownerTypeConfig and eo.ownerId in (select ioc.uniqueIdRolledForwardFrom from InstrOfferingConfig as ioc where ioc.instructionalOffering.session.uniqueId = :toSessionId)))"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"toSessionId"
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|examType
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"ownerTypeClass"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"ownerTypeCourse"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"ownerTypeOffering"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"ownerTypeConfig"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
operator|.
name|list
argument_list|()
operator|)
return|;
block|}
specifier|public
name|void
name|rollMidtermExamsForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|RollForwardSessionForm
name|rollForwardSessionForm
parameter_list|)
block|{
name|Session
name|toSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollForwardTo
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|List
name|exams
init|=
name|findExamToRollForward
argument_list|(
name|toSession
argument_list|,
name|Exam
operator|.
name|sExamTypeMidterm
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|examIt
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|examIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|rollForwardExam
argument_list|(
operator|(
name|Exam
operator|)
name|examIt
operator|.
name|next
argument_list|()
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"rollForward"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.rollForward"
argument_list|,
literal|"Midterm Exam"
argument_list|,
literal|"previous session"
argument_list|,
name|toSession
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|"Failed to roll all midterm exams forward."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|rollFinalExamsForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|RollForwardSessionForm
name|rollForwardSessionForm
parameter_list|)
block|{
name|Session
name|toSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollForwardTo
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|List
name|exams
init|=
name|findExamToRollForward
argument_list|(
name|toSession
argument_list|,
name|Exam
operator|.
name|sExamTypeFinal
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|examIt
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|examIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|rollForwardExam
argument_list|(
operator|(
name|Exam
operator|)
name|examIt
operator|.
name|next
argument_list|()
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"rollForward"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.rollForward"
argument_list|,
literal|"Final Exam"
argument_list|,
literal|"previous session"
argument_list|,
name|toSession
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|"Failed to roll all final exams forward."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|rollExamConfigurationDataForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|RollForwardSessionForm
name|rollForwardSessionForm
parameter_list|)
block|{
name|Session
name|toSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollForwardTo
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|fromSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollExamConfigurationForwardFrom
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|rollForwardExamPeriods
argument_list|(
name|toSession
argument_list|,
name|fromSession
argument_list|)
expr_stmt|;
name|rollForwardExamLocationPrefs
argument_list|(
name|toSession
argument_list|,
name|fromSession
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"rollForward"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.rollForward"
argument_list|,
literal|"Exam Configuration"
argument_list|,
name|fromSession
operator|.
name|getLabel
argument_list|()
argument_list|,
name|toSession
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|"Failed to roll exam configuration forward."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|rollInstructorDistributionPrefs
parameter_list|(
name|DepartmentalInstructor
name|fromInstructor
parameter_list|,
name|DepartmentalInstructor
name|toInstructor
parameter_list|)
block|{
if|if
condition|(
name|fromInstructor
operator|.
name|getDistributionPreferences
argument_list|()
operator|!=
literal|null
operator|&&
name|fromInstructor
operator|.
name|getDistributionPreferences
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|DistributionPref
name|fromDistributionPref
init|=
literal|null
decl_stmt|;
name|DistributionPref
name|toDistributionPref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|fromInstructor
operator|.
name|getDistributionPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromDistributionPref
operator|=
operator|(
name|DistributionPref
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|toDistributionPref
operator|=
operator|new
name|DistributionPref
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromDistributionPref
operator|.
name|getDistributionType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|toDistributionPref
operator|.
name|setDistributionType
argument_list|(
name|fromDistributionPref
operator|.
name|getDistributionType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fromDistributionPref
operator|.
name|getGrouping
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|toDistributionPref
operator|.
name|setGrouping
argument_list|(
name|fromDistributionPref
operator|.
name|getGrouping
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|toDistributionPref
operator|.
name|setPrefLevel
argument_list|(
name|fromDistributionPref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|toDistributionPref
operator|.
name|setOwner
argument_list|(
name|toInstructor
argument_list|)
expr_stmt|;
name|toInstructor
operator|.
name|addTopreferences
argument_list|(
name|toDistributionPref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|rollInstructorDataForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|RollForwardSessionForm
name|rollForwardSessionForm
parameter_list|)
block|{
name|Session
name|toSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollForwardTo
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|fromSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollInstructorDataForwardFrom
argument_list|()
argument_list|)
decl_stmt|;
name|DepartmentalInstructor
name|toInstructor
init|=
literal|null
decl_stmt|;
name|DepartmentalInstructor
name|fromInstructor
init|=
literal|null
decl_stmt|;
name|DepartmentalInstructorDAO
name|iDao
init|=
operator|new
name|DepartmentalInstructorDAO
argument_list|()
decl_stmt|;
name|Department
name|toDepartment
init|=
literal|null
decl_stmt|;
name|Department
name|fromDepartment
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|fromSession
operator|.
name|getDepartments
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|dIt
init|=
name|fromSession
operator|.
name|getDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|dIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromDepartment
operator|=
operator|(
name|Department
operator|)
name|dIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromDepartment
operator|!=
literal|null
operator|&&
name|fromDepartment
operator|.
name|getInstructors
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromDepartment
operator|.
name|getInstructors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|toDepartment
operator|=
name|fromDepartment
operator|.
name|findSameDepartmentInSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDepartment
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|iIt
init|=
name|fromDepartment
operator|.
name|getInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromInstructor
operator|=
operator|(
name|DepartmentalInstructor
operator|)
name|iIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|toInstructor
operator|=
operator|(
name|DepartmentalInstructor
operator|)
name|fromInstructor
operator|.
name|clone
argument_list|()
expr_stmt|;
name|toInstructor
operator|.
name|setDepartment
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
name|rollForwardBuildingPrefs
argument_list|(
name|fromInstructor
argument_list|,
name|toInstructor
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
name|rollForwardRoomPrefs
argument_list|(
name|fromInstructor
argument_list|,
name|toInstructor
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
name|rollForwardRoomFeaturePrefs
argument_list|(
name|fromInstructor
argument_list|,
name|toInstructor
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
name|rollForwardRoomGroupPrefs
argument_list|(
name|fromInstructor
argument_list|,
name|toInstructor
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
name|rollForwardTimePrefs
argument_list|(
name|fromInstructor
argument_list|,
name|toInstructor
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
name|rollInstructorDistributionPrefs
argument_list|(
name|fromInstructor
argument_list|,
name|toInstructor
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromInstructor
operator|.
name|getDesignatorSubjectAreas
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromInstructor
operator|.
name|getDesignatorSubjectAreas
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Designator
name|fromDesignator
init|=
literal|null
decl_stmt|;
name|Designator
name|toDesignator
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|dsIt
init|=
name|fromInstructor
operator|.
name|getDesignatorSubjectAreas
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|dsIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromDesignator
operator|=
operator|(
name|Designator
operator|)
name|dsIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|toDesignator
operator|=
operator|new
name|Designator
argument_list|()
expr_stmt|;
name|toDesignator
operator|.
name|setCode
argument_list|(
name|fromDesignator
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|toDesignator
operator|.
name|setInstructor
argument_list|(
name|toInstructor
argument_list|)
expr_stmt|;
name|toDesignator
operator|.
name|setSubjectArea
argument_list|(
name|SubjectArea
operator|.
name|findByAbbv
argument_list|(
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|fromDesignator
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDesignator
operator|.
name|getSubjectArea
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|toDesignator
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|addTodesignatorInstructors
argument_list|(
name|toDesignator
argument_list|)
expr_stmt|;
name|toInstructor
operator|.
name|addTodesignatorSubjectAreas
argument_list|(
name|toDesignator
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|iDao
operator|.
name|saveOrUpdate
argument_list|(
name|toInstructor
argument_list|)
expr_stmt|;
name|iDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|iDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|toInstructor
argument_list|)
expr_stmt|;
name|iDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|fromInstructor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|iDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|iDao
operator|.
name|getSession
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"rollForward"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.rollForward"
argument_list|,
literal|"Instructors"
argument_list|,
name|fromSession
operator|.
name|getLabel
argument_list|()
argument_list|,
name|toSession
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|"Failed to roll all instructors forward."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|rollCourseOfferingsForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|RollForwardSessionForm
name|rollForwardSessionForm
parameter_list|)
block|{
name|Session
name|toSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollForwardTo
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|fromSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollCourseOfferingsForwardFrom
argument_list|()
argument_list|)
decl_stmt|;
name|ArrayList
name|subjects
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|SubjectAreaDAO
name|saDao
init|=
operator|new
name|SubjectAreaDAO
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rollForwardSessionForm
operator|.
name|getRollForwardSubjectAreaIds
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|subjects
operator|.
name|add
argument_list|(
name|saDao
operator|.
name|get
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|rollForwardSessionForm
operator|.
name|getRollForwardSubjectAreaIds
argument_list|()
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|toSession
operator|.
name|getSubjectAreas
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SubjectArea
name|subjectArea
init|=
literal|null
decl_stmt|;
name|InstructionalOfferingRollForward
name|instrOffrRollFwd
init|=
operator|new
name|InstructionalOfferingRollForward
argument_list|()
decl_stmt|;
name|instrOffrRollFwd
operator|.
name|setClassPrefRollForwardParameter
argument_list|(
name|rollForwardSessionForm
operator|.
name|getClassPrefsAction
argument_list|()
argument_list|)
expr_stmt|;
name|instrOffrRollFwd
operator|.
name|setSubpartLocationPrefRollForwardParameters
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSubpartLocationPrefsAction
argument_list|()
argument_list|)
expr_stmt|;
name|instrOffrRollFwd
operator|.
name|setSubpartTimePrefRollForwardParameters
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSubpartTimePrefsAction
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|saIt
init|=
name|subjects
operator|.
name|iterator
argument_list|()
init|;
name|saIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|subjectArea
operator|=
operator|(
name|SubjectArea
operator|)
name|saIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|SubjectArea
operator|.
name|loadSubjectAreas
argument_list|(
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|instrOffrRollFwd
operator|.
name|rollForwardInstructionalOfferingsForASubjectArea
argument_list|(
name|subjectArea
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|,
name|fromSession
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|addNewCourseOfferings
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|RollForwardSessionForm
name|rollForwardSessionForm
parameter_list|)
block|{
name|Session
name|toSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollForwardTo
argument_list|()
argument_list|)
decl_stmt|;
name|ArrayList
name|subjects
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|SubjectAreaDAO
name|saDao
init|=
operator|new
name|SubjectAreaDAO
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rollForwardSessionForm
operator|.
name|getAddNewCourseOfferingsSubjectIds
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|subjects
operator|.
name|add
argument_list|(
name|saDao
operator|.
name|get
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|rollForwardSessionForm
operator|.
name|getAddNewCourseOfferingsSubjectIds
argument_list|()
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|toSession
operator|.
name|getSubjectAreas
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SubjectArea
name|subjectArea
init|=
literal|null
decl_stmt|;
name|InstructionalOfferingRollForward
name|instrOffrRollFwd
init|=
operator|new
name|InstructionalOfferingRollForward
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|saIt
init|=
name|subjects
operator|.
name|iterator
argument_list|()
init|;
name|saIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|subjectArea
operator|=
operator|(
name|SubjectArea
operator|)
name|saIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|SubjectArea
operator|.
name|loadSubjectAreas
argument_list|(
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|instrOffrRollFwd
operator|.
name|addNewInstructionalOfferingsForASubjectArea
argument_list|(
name|subjectArea
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//	public void loadCoursesNoLongerInCourseCatalogForTerm(ActionMessages errors,
comment|//			RollForwardSessionForm rollForwardSessionForm){
comment|//		Session toSession = Session.getSessionById(rollForwardSessionForm.getSessionToRollForwardTo());
comment|//		Session fromSession = Session.getSessionById(rollForwardSessionForm.getSessionToRollCourseOfferingsForwardFrom());
comment|//		ArrayList subjects = new ArrayList();
comment|//		SubjectAreaDAO saDao = new SubjectAreaDAO();
comment|//		for (int i = 0; i<	rollForwardSessionForm.getRollForwardSubjectAreaIds().length; i++){
comment|//			subjects.add(saDao.get(Long.parseLong(rollForwardSessionForm.getRollForwardSubjectAreaIds()[i])));
comment|//		}
comment|//		if (toSession.getSubjectAreas() != null) {
comment|//			SubjectArea subjectArea = null;
comment|//			InstructionalOfferingRollForward instrOffrRollFwd = new InstructionalOfferingRollForward();
comment|//			for (Iterator saIt = subjects.iterator(); saIt.hasNext();){
comment|//				subjectArea = (SubjectArea) saIt.next();
comment|//				SubjectArea.loadSubjectAreas(toSession.getUniqueId());
comment|//				instrOffrRollFwd.rollForwardExpiredInstructionalOfferingsForASubjectArea(subjectArea.getSubjectAreaAbbreviation(), fromSession, toSession);
comment|//			}
comment|//		}
comment|//	}
specifier|private
specifier|static
name|String
name|buildRoomQueryForDepartment
parameter_list|(
name|Department
name|dept
parameter_list|,
name|Session
name|sess
parameter_list|,
name|String
name|locType
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"select l from "
operator|+
name|locType
operator|+
literal|" as l inner join l.roomDepts as rd where l.session.uniqueId = "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|sess
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" and rd.department.uniqueId = "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|dept
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|private
specifier|static
name|Set
name|buildRoomListForDepartment
parameter_list|(
name|Department
name|department
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|TreeSet
name|ts
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
name|RoomDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getQuery
argument_list|(
name|buildRoomQueryForDepartment
argument_list|(
name|department
argument_list|,
name|session
argument_list|,
literal|"Room"
argument_list|)
argument_list|)
operator|.
name|iterate
argument_list|()
decl_stmt|;
name|Room
name|r
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|r
operator|=
operator|(
name|Room
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|RoomDept
name|rd
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it2
init|=
name|r
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|rd
operator|=
operator|(
name|RoomDept
operator|)
name|it2
operator|.
name|next
argument_list|()
expr_stmt|;
name|rd
operator|.
name|getDepartment
argument_list|()
expr_stmt|;
block|}
name|ts
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|it
operator|=
name|NonUniversityLocationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getQuery
argument_list|(
name|buildRoomQueryForDepartment
argument_list|(
name|department
argument_list|,
name|session
argument_list|,
literal|"NonUniversityLocation"
argument_list|)
argument_list|)
operator|.
name|iterate
argument_list|()
expr_stmt|;
name|NonUniversityLocation
name|l
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|l
operator|=
operator|(
name|NonUniversityLocation
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|RoomDept
name|rd
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it2
init|=
name|l
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|rd
operator|=
operator|(
name|RoomDept
operator|)
name|it2
operator|.
name|next
argument_list|()
expr_stmt|;
name|rd
operator|.
name|getDepartment
argument_list|()
expr_stmt|;
block|}
name|ts
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|ts
operator|)
return|;
block|}
specifier|public
specifier|static
name|HashMap
name|getRoomList
parameter_list|()
block|{
if|if
condition|(
name|roomList
operator|==
literal|null
condition|)
block|{
name|roomList
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
return|return
name|roomList
return|;
block|}
specifier|public
name|boolean
name|sessionHasCourseCatalog
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|false
operator|)
return|;
block|}
if|if
condition|(
operator|!
name|getSessionHasCourseCatalogList
argument_list|()
operator|.
name|containsKey
argument_list|(
name|session
argument_list|)
condition|)
block|{
name|CourseCatalogDAO
name|ccDao
init|=
operator|new
name|CourseCatalogDAO
argument_list|()
decl_stmt|;
name|List
name|l
init|=
name|ccDao
operator|.
name|getQuery
argument_list|(
literal|"select count(cc) from CourseCatalog cc where cc.session.uniqueId ="
operator|+
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
operator|!
name|l
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cnt
operator|=
operator|(
operator|(
name|Long
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|getSessionHasCourseCatalogList
argument_list|()
operator|.
name|put
argument_list|(
name|session
argument_list|,
operator|new
name|Boolean
argument_list|(
name|cnt
operator|!=
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
operator|(
operator|(
name|Boolean
operator|)
name|getSessionHasCourseCatalogList
argument_list|()
operator|.
name|get
argument_list|(
name|session
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
operator|)
return|;
block|}
specifier|public
specifier|static
name|HashMap
name|getSessionHasCourseCatalogList
parameter_list|()
block|{
if|if
condition|(
name|sessionHasCourseCatalogList
operator|==
literal|null
condition|)
block|{
name|sessionHasCourseCatalogList
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|sessionHasCourseCatalogList
operator|)
return|;
block|}
specifier|public
name|boolean
name|sessionHasExternalBuildingList
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getSessionHasExternalBuildingList
argument_list|()
operator|.
name|containsKey
argument_list|(
name|session
argument_list|)
condition|)
block|{
name|ExternalBuildingDAO
name|ebDao
init|=
operator|new
name|ExternalBuildingDAO
argument_list|()
decl_stmt|;
name|List
name|l
init|=
name|ebDao
operator|.
name|getQuery
argument_list|(
literal|"select count(eb) from ExternalBuilding eb where eb.session.uniqueId ="
operator|+
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
operator|!
name|l
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cnt
operator|=
operator|(
operator|(
name|Long
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|getSessionHasExternalBuildingList
argument_list|()
operator|.
name|put
argument_list|(
name|session
argument_list|,
operator|new
name|Boolean
argument_list|(
name|cnt
operator|!=
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
operator|(
operator|(
name|Boolean
operator|)
name|getSessionHasExternalBuildingList
argument_list|()
operator|.
name|get
argument_list|(
name|session
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
operator|)
return|;
block|}
specifier|public
specifier|static
name|HashMap
name|getSessionHasExternalBuildingList
parameter_list|()
block|{
if|if
condition|(
name|sessionHasExternalBuildingList
operator|==
literal|null
condition|)
block|{
name|sessionHasExternalBuildingList
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|sessionHasExternalBuildingList
operator|)
return|;
block|}
specifier|public
name|boolean
name|sessionHasExternalRoomList
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getSessionHasExternalRoomList
argument_list|()
operator|.
name|containsKey
argument_list|(
name|session
argument_list|)
condition|)
block|{
name|ExternalRoomDAO
name|erDao
init|=
operator|new
name|ExternalRoomDAO
argument_list|()
decl_stmt|;
name|List
name|l
init|=
name|erDao
operator|.
name|getQuery
argument_list|(
literal|"select count(er) from ExternalRoom er where er.building.session.uniqueId ="
operator|+
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
operator|!
name|l
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cnt
operator|=
operator|(
operator|(
name|Long
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|getSessionHasExternalRoomList
argument_list|()
operator|.
name|put
argument_list|(
name|session
argument_list|,
operator|new
name|Boolean
argument_list|(
name|cnt
operator|!=
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
operator|(
operator|(
name|Boolean
operator|)
name|getSessionHasExternalRoomList
argument_list|()
operator|.
name|get
argument_list|(
name|session
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
operator|)
return|;
block|}
specifier|public
specifier|static
name|HashMap
name|getSessionHasExternalRoomList
parameter_list|()
block|{
if|if
condition|(
name|sessionHasExternalRoomList
operator|==
literal|null
condition|)
block|{
name|sessionHasExternalRoomList
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|sessionHasExternalRoomList
operator|)
return|;
block|}
specifier|public
name|boolean
name|sessionHasExternalRoomDeptList
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getSessionHasExternalRoomDeptList
argument_list|()
operator|.
name|containsKey
argument_list|(
name|session
argument_list|)
condition|)
block|{
name|ExternalRoomDepartmentDAO
name|erdDao
init|=
operator|new
name|ExternalRoomDepartmentDAO
argument_list|()
decl_stmt|;
name|List
name|l
init|=
name|erdDao
operator|.
name|getQuery
argument_list|(
literal|"select count(erd) from ExternalRoomDepartment erd where erd.room.building.session.uniqueId ="
operator|+
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
operator|!
name|l
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cnt
operator|=
operator|(
operator|(
name|Long
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|getSessionHasExternalRoomDeptList
argument_list|()
operator|.
name|put
argument_list|(
name|session
argument_list|,
operator|new
name|Boolean
argument_list|(
name|cnt
operator|!=
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
operator|(
operator|(
name|Boolean
operator|)
name|getSessionHasExternalRoomDeptList
argument_list|()
operator|.
name|get
argument_list|(
name|session
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
operator|)
return|;
block|}
specifier|public
specifier|static
name|HashMap
name|getSessionHasExternalRoomDeptList
parameter_list|()
block|{
if|if
condition|(
name|sessionHasExternalRoomDeptList
operator|==
literal|null
condition|)
block|{
name|sessionHasExternalRoomDeptList
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|sessionHasExternalRoomDeptList
operator|)
return|;
block|}
specifier|public
name|boolean
name|sessionHasExternalRoomFeatureList
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getSessionHasExternalRoomFeatureList
argument_list|()
operator|.
name|containsKey
argument_list|(
name|session
argument_list|)
condition|)
block|{
name|ExternalRoomFeatureDAO
name|erfDao
init|=
operator|new
name|ExternalRoomFeatureDAO
argument_list|()
decl_stmt|;
name|List
name|l
init|=
name|erfDao
operator|.
name|getQuery
argument_list|(
literal|"select count(erf) from ExternalRoomFeature erf where erf.room.building.session.uniqueId ="
operator|+
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
operator|!
name|l
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cnt
operator|=
operator|(
operator|(
name|Long
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|getSessionHasExternalRoomFeatureList
argument_list|()
operator|.
name|put
argument_list|(
name|session
argument_list|,
operator|new
name|Boolean
argument_list|(
name|cnt
operator|!=
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
operator|(
operator|(
name|Boolean
operator|)
name|getSessionHasExternalRoomFeatureList
argument_list|()
operator|.
name|get
argument_list|(
name|session
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
operator|)
return|;
block|}
specifier|public
specifier|static
name|HashMap
name|getSessionHasExternalRoomFeatureList
parameter_list|()
block|{
if|if
condition|(
name|sessionHasExternalRoomFeatureList
operator|==
literal|null
condition|)
block|{
name|sessionHasExternalRoomFeatureList
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|sessionHasExternalRoomFeatureList
operator|)
return|;
block|}
specifier|private
name|void
name|rollTimePatternOntoDepartments
parameter_list|(
name|TimePattern
name|fromTimePattern
parameter_list|,
name|TimePattern
name|toTimePattern
parameter_list|)
block|{
if|if
condition|(
name|fromTimePattern
operator|.
name|getDepartments
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromTimePattern
operator|.
name|getDepartments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Department
name|fromDept
range|:
name|fromTimePattern
operator|.
name|getDepartments
argument_list|()
control|)
block|{
name|Department
name|toDepartment
init|=
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|fromDept
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|toTimePattern
operator|.
name|getSession
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|toDepartment
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|null
operator|==
name|toDepartment
operator|.
name|getTimePatterns
argument_list|()
condition|)
block|{
name|toDepartment
operator|.
name|setTimePatterns
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|toDepartment
operator|.
name|getTimePatterns
argument_list|()
operator|.
name|add
argument_list|(
name|toTimePattern
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|toTimePattern
operator|.
name|getDepartments
argument_list|()
condition|)
block|{
name|toTimePattern
operator|.
name|setDepartments
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|toTimePattern
operator|.
name|addTodepartments
argument_list|(
name|toDepartment
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|rollTimePatternsForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|RollForwardSessionForm
name|rollForwardSessionForm
parameter_list|)
block|{
name|Session
name|toSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollForwardTo
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|fromSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollTimePatternsForwardFrom
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TimePattern
argument_list|>
name|fromDatePatterns
init|=
name|TimePattern
operator|.
name|findAll
argument_list|(
name|fromSession
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|TimePattern
name|fromTimePattern
init|=
literal|null
decl_stmt|;
name|TimePattern
name|toTimePattern
init|=
literal|null
decl_stmt|;
name|TimePatternDAO
name|tpDao
init|=
operator|new
name|TimePatternDAO
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
argument_list|<
name|TimePattern
argument_list|>
name|it
init|=
name|fromDatePatterns
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromTimePattern
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromTimePattern
operator|!=
literal|null
condition|)
block|{
name|toTimePattern
operator|=
operator|(
name|TimePattern
operator|)
name|fromTimePattern
operator|.
name|clone
argument_list|()
expr_stmt|;
name|toTimePattern
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
name|rollTimePatternOntoDepartments
argument_list|(
name|fromTimePattern
argument_list|,
name|toTimePattern
argument_list|)
expr_stmt|;
name|tpDao
operator|.
name|saveOrUpdate
argument_list|(
name|toTimePattern
argument_list|)
expr_stmt|;
name|tpDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
name|tpDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tpDao
operator|.
name|getSession
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"rollForward"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.rollForward"
argument_list|,
literal|"Time Patterns"
argument_list|,
name|fromSession
operator|.
name|getLabel
argument_list|()
argument_list|,
name|toSession
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|"Failed to roll all time patterns forward."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|rollClassInstructorsForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|RollForwardSessionForm
name|rollForwardSessionForm
parameter_list|)
block|{
name|Session
name|toSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollForwardTo
argument_list|()
argument_list|)
decl_stmt|;
name|ArrayList
name|subjects
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|SubjectAreaDAO
name|saDao
init|=
operator|new
name|SubjectAreaDAO
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rollForwardSessionForm
operator|.
name|getRollForwardClassInstrSubjectIds
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|subjects
operator|.
name|add
argument_list|(
name|saDao
operator|.
name|get
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|rollForwardSessionForm
operator|.
name|getRollForwardClassInstrSubjectIds
argument_list|()
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|toSession
operator|.
name|getSubjectAreas
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SubjectArea
name|subjectArea
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|saIt
init|=
name|subjects
operator|.
name|iterator
argument_list|()
init|;
name|saIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|subjectArea
operator|=
operator|(
name|SubjectArea
operator|)
name|saIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|SubjectArea
operator|.
name|loadSubjectAreas
argument_list|(
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|rollForwardClassInstructorsForASubjectArea
argument_list|(
name|subjectArea
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|rollForwardClassInstructorsForASubjectArea
parameter_list|(
name|String
name|subjectAreaAbbreviation
parameter_list|,
name|Session
name|toSession
parameter_list|)
block|{
name|Debug
operator|.
name|info
argument_list|(
literal|"Rolling forward class instructors for:  "
operator|+
name|subjectAreaAbbreviation
argument_list|)
expr_stmt|;
name|Class_DAO
name|clsDao
init|=
operator|new
name|Class_DAO
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|clsDao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
name|List
name|classes
init|=
name|Class_
operator|.
name|findAllForControllingSubjectArea
argument_list|(
name|subjectAreaAbbreviation
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|classes
operator|!=
literal|null
operator|&&
operator|!
name|classes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Class_
name|toClass
init|=
literal|null
decl_stmt|;
name|Class_
name|fromClass
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|cIt
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|cIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|toClass
operator|=
operator|(
name|Class_
operator|)
name|cIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|toClass
operator|.
name|getUniqueIdRolledForwardFrom
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|fromClass
operator|=
name|clsDao
operator|.
name|get
argument_list|(
name|toClass
operator|.
name|getUniqueIdRolledForwardFrom
argument_list|()
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromClass
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fromClass
operator|.
name|getClassInstructors
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromClass
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ClassInstructor
name|fromClassInstr
init|=
literal|null
decl_stmt|;
name|ClassInstructor
name|toClassInstr
init|=
literal|null
decl_stmt|;
name|DepartmentalInstructor
name|toDeptInstr
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|ciIt
init|=
name|fromClass
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|ciIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromClassInstr
operator|=
operator|(
name|ClassInstructor
operator|)
name|ciIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|toDeptInstr
operator|=
name|fromClassInstr
operator|.
name|getInstructor
argument_list|()
operator|.
name|findThisInstructorInSession
argument_list|(
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDeptInstr
operator|!=
literal|null
condition|)
block|{
name|toClassInstr
operator|=
operator|new
name|ClassInstructor
argument_list|()
expr_stmt|;
name|toClassInstr
operator|.
name|setClassInstructing
argument_list|(
name|toClass
argument_list|)
expr_stmt|;
name|toClassInstr
operator|.
name|setInstructor
argument_list|(
name|toDeptInstr
argument_list|)
expr_stmt|;
name|toClassInstr
operator|.
name|setLead
argument_list|(
name|fromClassInstr
operator|.
name|isLead
argument_list|()
argument_list|)
expr_stmt|;
name|toClassInstr
operator|.
name|setPercentShare
argument_list|(
name|fromClassInstr
operator|.
name|getPercentShare
argument_list|()
argument_list|)
expr_stmt|;
name|toClassInstr
operator|.
name|setUniqueId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|toClass
operator|.
name|addToclassInstructors
argument_list|(
name|toClassInstr
argument_list|)
expr_stmt|;
name|toDeptInstr
operator|.
name|addToclasses
argument_list|(
name|toClassInstr
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|evict
argument_list|(
name|fromClassInstr
argument_list|)
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|evict
argument_list|(
name|fromClass
argument_list|)
expr_stmt|;
name|Transaction
name|t
init|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|toClass
argument_list|)
expr_stmt|;
name|t
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|hibSession
operator|.
name|evict
argument_list|(
name|fromClass
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|hibSession
operator|.
name|evict
argument_list|(
name|toClass
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/* 	private void cloneCourses(String[] courses, String courseToCloneFrom, RollForwardSessionForm rollForwardSessionForm){ 		Session session = Session.getSessionById(rollForwardSessionForm.getSessionToRollForwardTo()); 		InstructionalOfferingDAO ioDao = InstructionalOfferingDAO.getInstance(); 		String cloneSubj = courseToCloneFrom.substring(0,4).trim(); 		String cloneCrs = courseToCloneFrom.substring(4,8).trim(); 		String crs = null; 		String subj = null; 		String crsNbr = null; 		InstructionalOffering io = null; 		InstructionalOffering cloneFromIo = null; 		String query = "select io from InstructionalOffering io inner join io.courseOfferings co " + 				" where io.session.uniqueId=:sessionId " + 				" and co.subjectArea.subjectAreaAbbreviation=:subject" + 				" and co.courseNbr=:crsNbr"; 		List l = ioDao.getQuery(query) 					.setLong("sessionId", session.getUniqueId()) 					.setString("subject", cloneSubj) 					.setString("crsNbr", cloneCrs).list(); 		if (l.size() == 1){ 			cloneFromIo = (InstructionalOffering) l.get(0); 			for (int i = 0; i< courses.length; i++){ 				crs = courses[i]; 				subj = crs.substring(0,4).trim(); 				crsNbr = crs.substring(4,8).trim(); 				l = ioDao.getQuery(query) 				.setLong("sessionId", session.getUniqueId()) 				.setString("subject", subj) 				.setString("crsNbr", crsNbr).list(); 				if (l.size() == 1){ 					io = (InstructionalOffering) l.get(0); 					io.cloneOfferingConfigurationFrom(cloneFromIo); 					try { 						ioDao.saveOrUpdate(io); 					} catch (Exception e) { 						// do nothing 					} 					ioDao.getSession().flush(); 					ioDao.getSession().clear(); 				} 			} 		}  	} 	*/
specifier|public
name|void
name|rollStudentsForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|RollForwardSessionForm
name|rollForwardSessionForm
parameter_list|)
block|{
name|Session
name|toSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollForwardTo
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|query
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|rollForwardSessionForm
operator|.
name|getRollForwardStudentsMode
argument_list|()
operator|.
name|intValue
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
comment|// Last-like Course Demands
name|query
operator|=
operator|new
name|String
index|[]
block|{
literal|"select distinct d.student, co, d.priority from LastLikeCourseDemand d, CourseOffering co, CourseOffering last "
operator|+
literal|"where co.subjectArea.session.uniqueId=:toSessionId and co.uniqueIdRolledForwardFrom=last.uniqueId and "
operator|+
literal|"((d.coursePermId is null and d.subjectArea.uniqueId = last.subjectArea.uniqueId and d.courseNbr=last.courseNbr) or "
operator|+
literal|"(d.coursePermId is not null and d.coursePermId=last.permId))"
block|}
expr_stmt|;
break|break;
case|case
literal|1
case|:
comment|// Student Class Enrollments
name|query
operator|=
operator|new
name|String
index|[]
block|{
literal|"select distinct e.student, co, e.courseRequest.courseDemand.priority from StudentClassEnrollment e, CourseOffering co "
operator|+
literal|"where co.subjectArea.session.uniqueId=:toSessionId and co.uniqueIdRolledForwardFrom=e.courseOffering.uniqueId"
block|,
literal|"select distinct e.student, co, -1 from StudentClassEnrollment e, CourseOffering co "
operator|+
literal|"where co.subjectArea.session.uniqueId=:toSessionId and co.uniqueIdRolledForwardFrom=e.courseOffering.uniqueId and "
operator|+
literal|"e.courseRequest is null"
block|}
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// Course Requests
name|query
operator|=
operator|new
name|String
index|[]
block|{
literal|"select r.courseDemand.student, co, r.courseDemand.priority from CourseRequest r, CourseOffering co "
operator|+
literal|"where co.subjectArea.session.uniqueId=:toSessionId and co.uniqueIdRolledForwardFrom=r.courseOffering.uniqueId and "
operator|+
literal|"r.order=0 and r.courseDemand.alternative=false"
block|}
expr_stmt|;
block|}
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|LastLikeCourseDemandDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"delete LastLikeCourseDemand d where d.subjectArea.uniqueId in "
operator|+
literal|"(select s.uniqueId from SubjectArea s where s.session.uniqueId=:toSessionId)"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"toSessionId"
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
empty_stmt|;
name|int
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|query
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|Iterator
name|j
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
name|query
index|[
name|i
index|]
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"toSessionId"
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|Student
name|s
init|=
operator|(
name|Student
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|CourseOffering
name|co
init|=
operator|(
name|CourseOffering
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Number
name|priority
init|=
operator|(
name|Number
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|LastLikeCourseDemand
name|d
init|=
operator|new
name|LastLikeCourseDemand
argument_list|()
decl_stmt|;
name|d
operator|.
name|setPriority
argument_list|(
name|priority
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setSubjectArea
argument_list|(
name|co
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setCourseNbr
argument_list|(
name|co
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setCoursePermId
argument_list|(
name|co
operator|.
name|getPermId
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setStudent
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|total
operator|++
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.courseNumber.unique"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"update CourseOffering c set c.demand="
operator|+
literal|"(select count(distinct d.student) from LastLikeCourseDemand d where "
operator|+
literal|"(c.subjectArea=d.subjectArea and c.courseNbr=d.courseNbr)) where "
operator|+
literal|"c.subjectArea.uniqueId in (select sa.uniqueId from SubjectArea sa where sa.session.uniqueId=:sessionId)"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"update CourseOffering c set c.demand="
operator|+
literal|"(select count(distinct d.student) from LastLikeCourseDemand d where "
operator|+
literal|"(c.subjectArea=d.subjectArea and c.courseNbr=d.courseNbr)) where "
operator|+
literal|"c.permId is null and c.subjectArea.uniqueId in (select sa.uniqueId from SubjectArea sa where sa.session.uniqueId=:sessionId)"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"update CourseOffering c set c.demand="
operator|+
literal|"(select count(distinct d.student) from LastLikeCourseDemand d where "
operator|+
literal|"d.student.session=c.subjectArea.session and c.permId=d.coursePermId) where "
operator|+
literal|"c.permId is not null and c.subjectArea.uniqueId in (select sa.uniqueId from SubjectArea sa where sa.session.uniqueId=:sessionId)"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|rollCurriculaForward
parameter_list|(
name|ActionMessages
name|errors
parameter_list|,
name|RollForwardSessionForm
name|rollForwardSessionForm
parameter_list|)
block|{
name|Session
name|toSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollForwardTo
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|fromSession
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|rollForwardSessionForm
operator|.
name|getSessionToRollCurriculaForwardFrom
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
comment|// roll forward academic areas, if needed
name|Hashtable
argument_list|<
name|String
argument_list|,
name|AcademicArea
argument_list|>
name|areas
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|AcademicArea
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AcademicArea
name|area
range|:
name|AcademicAreaDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findBySession
argument_list|(
name|hibSession
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
control|)
block|{
name|areas
operator|.
name|put
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|area
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|areas
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AcademicArea
name|area
range|:
name|AcademicAreaDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findBySession
argument_list|(
name|hibSession
argument_list|,
name|fromSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
control|)
block|{
name|AcademicArea
name|newArea
init|=
operator|(
name|AcademicArea
operator|)
name|area
operator|.
name|clone
argument_list|()
decl_stmt|;
name|newArea
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
name|newArea
operator|.
name|setPosMajors
argument_list|(
operator|new
name|HashSet
argument_list|<
name|PosMajor
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|newArea
operator|.
name|setPosMinors
argument_list|(
operator|new
name|HashSet
argument_list|<
name|PosMinor
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|newArea
argument_list|)
expr_stmt|;
name|areas
operator|.
name|put
argument_list|(
name|newArea
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|newArea
argument_list|)
expr_stmt|;
block|}
block|}
comment|// roll forward academic classifications, if needed
name|Hashtable
argument_list|<
name|String
argument_list|,
name|AcademicClassification
argument_list|>
name|classifications
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|AcademicClassification
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AcademicClassification
name|clasf
range|:
name|AcademicClassificationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findBySession
argument_list|(
name|hibSession
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
control|)
block|{
name|classifications
operator|.
name|put
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|,
name|clasf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|classifications
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AcademicClassification
name|clasf
range|:
name|AcademicClassificationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findBySession
argument_list|(
name|hibSession
argument_list|,
name|fromSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
control|)
block|{
name|AcademicClassification
name|newClasf
init|=
operator|(
name|AcademicClassification
operator|)
name|clasf
operator|.
name|clone
argument_list|()
decl_stmt|;
name|newClasf
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|newClasf
argument_list|)
expr_stmt|;
name|classifications
operator|.
name|put
argument_list|(
name|newClasf
operator|.
name|getCode
argument_list|()
argument_list|,
name|newClasf
argument_list|)
expr_stmt|;
block|}
block|}
comment|// roll forward majors, if needed
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PosMajor
argument_list|>
argument_list|>
name|majors
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PosMajor
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PosMajor
name|major
range|:
name|PosMajorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findBySession
argument_list|(
name|hibSession
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
control|)
block|{
for|for
control|(
name|AcademicArea
name|area
range|:
name|major
operator|.
name|getAcademicAreas
argument_list|()
control|)
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PosMajor
argument_list|>
name|code2major
init|=
name|majors
operator|.
name|get
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|code2major
operator|==
literal|null
condition|)
block|{
name|code2major
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PosMajor
argument_list|>
argument_list|()
expr_stmt|;
name|majors
operator|.
name|put
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|code2major
argument_list|)
expr_stmt|;
block|}
name|code2major
operator|.
name|put
argument_list|(
name|major
operator|.
name|getCode
argument_list|()
argument_list|,
name|major
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|majors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|PosMajor
name|major
range|:
name|PosMajorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findBySession
argument_list|(
name|hibSession
argument_list|,
name|fromSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
control|)
block|{
name|Set
argument_list|<
name|AcademicArea
argument_list|>
name|newAreas
init|=
operator|new
name|HashSet
argument_list|<
name|AcademicArea
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AcademicArea
name|area
range|:
name|major
operator|.
name|getAcademicAreas
argument_list|()
control|)
block|{
name|AcademicArea
name|newArea
init|=
name|areas
operator|.
name|get
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newArea
operator|!=
literal|null
condition|)
name|newAreas
operator|.
name|add
argument_list|(
name|newArea
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newAreas
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|PosMajor
name|newMajor
init|=
operator|(
name|PosMajor
operator|)
name|major
operator|.
name|clone
argument_list|()
decl_stmt|;
name|newMajor
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
name|newMajor
operator|.
name|setAcademicAreas
argument_list|(
name|newAreas
argument_list|)
expr_stmt|;
for|for
control|(
name|AcademicArea
name|newArea
range|:
name|newAreas
control|)
block|{
name|newArea
operator|.
name|getPosMajors
argument_list|()
operator|.
name|add
argument_list|(
name|newMajor
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PosMajor
argument_list|>
name|code2major
init|=
name|majors
operator|.
name|get
argument_list|(
name|newArea
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|code2major
operator|==
literal|null
condition|)
block|{
name|code2major
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PosMajor
argument_list|>
argument_list|()
expr_stmt|;
name|majors
operator|.
name|put
argument_list|(
name|newArea
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|code2major
argument_list|)
expr_stmt|;
block|}
name|code2major
operator|.
name|put
argument_list|(
name|newMajor
operator|.
name|getCode
argument_list|()
argument_list|,
name|newMajor
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|save
argument_list|(
name|newMajor
argument_list|)
expr_stmt|;
block|}
block|}
comment|// roll forward minors, if needed
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PosMinor
argument_list|>
argument_list|>
name|minors
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PosMinor
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PosMinor
name|minor
range|:
name|PosMinorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findBySession
argument_list|(
name|hibSession
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
control|)
block|{
for|for
control|(
name|AcademicArea
name|area
range|:
name|minor
operator|.
name|getAcademicAreas
argument_list|()
control|)
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PosMinor
argument_list|>
name|code2minor
init|=
name|minors
operator|.
name|get
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|code2minor
operator|==
literal|null
condition|)
block|{
name|code2minor
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PosMinor
argument_list|>
argument_list|()
expr_stmt|;
name|minors
operator|.
name|put
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|code2minor
argument_list|)
expr_stmt|;
block|}
name|code2minor
operator|.
name|put
argument_list|(
name|minor
operator|.
name|getCode
argument_list|()
argument_list|,
name|minor
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|minors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|PosMinor
name|minor
range|:
name|PosMinorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findBySession
argument_list|(
name|hibSession
argument_list|,
name|fromSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
control|)
block|{
name|Set
argument_list|<
name|AcademicArea
argument_list|>
name|newAreas
init|=
operator|new
name|HashSet
argument_list|<
name|AcademicArea
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AcademicArea
name|area
range|:
name|minor
operator|.
name|getAcademicAreas
argument_list|()
control|)
block|{
name|AcademicArea
name|newArea
init|=
name|areas
operator|.
name|get
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newArea
operator|!=
literal|null
condition|)
name|newAreas
operator|.
name|add
argument_list|(
name|newArea
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newAreas
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|PosMinor
name|newMinor
init|=
operator|(
name|PosMinor
operator|)
name|minor
operator|.
name|clone
argument_list|()
decl_stmt|;
name|newMinor
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
name|newMinor
operator|.
name|setAcademicAreas
argument_list|(
name|newAreas
argument_list|)
expr_stmt|;
for|for
control|(
name|AcademicArea
name|newArea
range|:
name|newAreas
control|)
block|{
name|newArea
operator|.
name|getPosMinors
argument_list|()
operator|.
name|add
argument_list|(
name|newMinor
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PosMinor
argument_list|>
name|code2minor
init|=
name|minors
operator|.
name|get
argument_list|(
name|newArea
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|code2minor
operator|==
literal|null
condition|)
block|{
name|code2minor
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PosMinor
argument_list|>
argument_list|()
expr_stmt|;
name|minors
operator|.
name|put
argument_list|(
name|newArea
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|code2minor
argument_list|)
expr_stmt|;
block|}
name|code2minor
operator|.
name|put
argument_list|(
name|newMinor
operator|.
name|getCode
argument_list|()
argument_list|,
name|newMinor
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|save
argument_list|(
name|newMinor
argument_list|)
expr_stmt|;
block|}
block|}
comment|// course translation table
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|CourseOffering
argument_list|>
name|courses
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|CourseOffering
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseOffering
name|course
range|:
operator|(
name|List
argument_list|<
name|CourseOffering
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select co from CourseOffering co "
operator|+
literal|"where co.uniqueIdRolledForwardFrom is not null and "
operator|+
literal|"co.subjectArea.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|courses
operator|.
name|put
argument_list|(
name|course
operator|.
name|getUniqueIdRolledForwardFrom
argument_list|()
argument_list|,
name|course
argument_list|)
expr_stmt|;
block|}
comment|// cleanup all curricula
for|for
control|(
name|Iterator
argument_list|<
name|Curriculum
argument_list|>
name|i
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from Curriculum c where c.department.session=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|hibSession
operator|.
name|delete
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// roll forward curricula
name|Department
name|tempDept
init|=
literal|null
decl_stmt|;
name|curricula
label|:
for|for
control|(
name|Curriculum
name|curriculum
range|:
operator|(
name|List
argument_list|<
name|Curriculum
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from Curriculum c where c.department.session=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|fromSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Curriculum
name|newCurriculum
init|=
operator|new
name|Curriculum
argument_list|()
decl_stmt|;
name|newCurriculum
operator|.
name|setAbbv
argument_list|(
name|curriculum
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|newCurriculum
operator|.
name|setName
argument_list|(
name|curriculum
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|AcademicArea
name|area
init|=
name|areas
operator|.
name|get
argument_list|(
name|curriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|area
operator|==
literal|null
condition|)
continue|continue;
name|newCurriculum
operator|.
name|setAcademicArea
argument_list|(
name|area
argument_list|)
expr_stmt|;
name|Department
name|dept
init|=
name|curriculum
operator|.
name|getDepartment
argument_list|()
operator|.
name|findSameDepartmentInSession
argument_list|(
name|toSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|dept
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|tempDept
operator|==
literal|null
condition|)
block|{
name|tempDept
operator|=
name|Department
operator|.
name|findByDeptCode
argument_list|(
literal|"TEMP"
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tempDept
operator|==
literal|null
condition|)
block|{
name|tempDept
operator|=
operator|new
name|Department
argument_list|()
expr_stmt|;
name|tempDept
operator|.
name|setAbbreviation
argument_list|(
literal|"TEMP"
argument_list|)
expr_stmt|;
name|tempDept
operator|.
name|setAllowReqRoom
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|tempDept
operator|.
name|setAllowReqTime
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|tempDept
operator|.
name|setDeptCode
argument_list|(
literal|"TEMP"
argument_list|)
expr_stmt|;
name|tempDept
operator|.
name|setExternalManager
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|tempDept
operator|.
name|setExternalUniqueId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|tempDept
operator|.
name|setName
argument_list|(
literal|"Temp Department For New Curricula"
argument_list|)
expr_stmt|;
name|tempDept
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
name|tempDept
operator|.
name|setDistributionPrefPriority
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|toSession
operator|.
name|addTodepartments
argument_list|(
name|tempDept
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|tempDept
argument_list|)
expr_stmt|;
block|}
block|}
name|dept
operator|=
name|tempDept
expr_stmt|;
block|}
name|newCurriculum
operator|.
name|setDepartment
argument_list|(
name|dept
argument_list|)
expr_stmt|;
name|newCurriculum
operator|.
name|setMajors
argument_list|(
operator|new
name|HashSet
argument_list|<
name|PosMajor
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PosMajor
argument_list|>
name|code2major
init|=
name|majors
operator|.
name|get
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PosMajor
name|major
range|:
name|curriculum
operator|.
name|getMajors
argument_list|()
control|)
block|{
name|PosMajor
name|newMajor
init|=
operator|(
name|code2major
operator|==
literal|null
condition|?
literal|null
else|:
name|code2major
operator|.
name|get
argument_list|(
name|major
operator|.
name|getCode
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|newMajor
operator|==
literal|null
condition|)
continue|continue
name|curricula
continue|;
name|newCurriculum
operator|.
name|getMajors
argument_list|()
operator|.
name|add
argument_list|(
name|newMajor
argument_list|)
expr_stmt|;
block|}
name|newCurriculum
operator|.
name|setClassifications
argument_list|(
operator|new
name|HashSet
argument_list|<
name|CurriculumClassification
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|CurriculumCourseGroup
argument_list|>
name|createdGroups
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|CurriculumCourseGroup
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CurriculumClassification
name|clasf
range|:
name|curriculum
operator|.
name|getClassifications
argument_list|()
control|)
block|{
name|CurriculumClassification
name|newClasf
init|=
operator|new
name|CurriculumClassification
argument_list|()
decl_stmt|;
name|AcademicClassification
name|f
init|=
name|classifications
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
continue|continue;
name|newClasf
operator|.
name|setAcademicClassification
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|newClasf
operator|.
name|setCurriculum
argument_list|(
name|newCurriculum
argument_list|)
expr_stmt|;
name|newClasf
operator|.
name|setName
argument_list|(
name|clasf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|newClasf
operator|.
name|setNrStudents
argument_list|(
name|clasf
operator|.
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
name|newClasf
operator|.
name|setOrd
argument_list|(
name|clasf
operator|.
name|getOrd
argument_list|()
argument_list|)
expr_stmt|;
name|newClasf
operator|.
name|setCourses
argument_list|(
operator|new
name|HashSet
argument_list|<
name|CurriculumCourse
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|newCurriculum
operator|.
name|getClassifications
argument_list|()
operator|.
name|add
argument_list|(
name|newClasf
argument_list|)
expr_stmt|;
for|for
control|(
name|CurriculumCourse
name|course
range|:
name|clasf
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|CurriculumCourse
name|newCourse
init|=
operator|new
name|CurriculumCourse
argument_list|()
decl_stmt|;
name|newCourse
operator|.
name|setOrd
argument_list|(
name|course
operator|.
name|getOrd
argument_list|()
argument_list|)
expr_stmt|;
name|newCourse
operator|.
name|setPercShare
argument_list|(
name|course
operator|.
name|getPercShare
argument_list|()
argument_list|)
expr_stmt|;
name|CourseOffering
name|co
init|=
name|courses
operator|.
name|get
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|co
operator|==
literal|null
condition|)
continue|continue;
name|newCourse
operator|.
name|setCourse
argument_list|(
name|co
argument_list|)
expr_stmt|;
name|newCourse
operator|.
name|setClassification
argument_list|(
name|newClasf
argument_list|)
expr_stmt|;
name|newClasf
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|newCourse
argument_list|)
expr_stmt|;
name|newCourse
operator|.
name|setGroups
argument_list|(
operator|new
name|HashSet
argument_list|<
name|CurriculumCourseGroup
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CurriculumCourseGroup
name|group
range|:
name|course
operator|.
name|getGroups
argument_list|()
control|)
block|{
name|CurriculumCourseGroup
name|newGroup
init|=
name|createdGroups
operator|.
name|get
argument_list|(
name|group
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newGroup
operator|==
literal|null
condition|)
block|{
name|newGroup
operator|=
operator|new
name|CurriculumCourseGroup
argument_list|()
expr_stmt|;
name|newGroup
operator|.
name|setColor
argument_list|(
name|group
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|newGroup
operator|.
name|setName
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|newGroup
operator|.
name|setType
argument_list|(
name|group
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|newGroup
operator|.
name|setCurriculum
argument_list|(
name|newCurriculum
argument_list|)
expr_stmt|;
name|createdGroups
operator|.
name|put
argument_list|(
name|group
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|newGroup
argument_list|)
expr_stmt|;
block|}
name|newCourse
operator|.
name|getGroups
argument_list|()
operator|.
name|add
argument_list|(
name|newGroup
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|hibSession
operator|.
name|save
argument_list|(
name|newCurriculum
argument_list|)
expr_stmt|;
for|for
control|(
name|CurriculumCourseGroup
name|g
range|:
name|createdGroups
operator|.
name|values
argument_list|()
control|)
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
comment|// roll forward projection rules (if empty)
if|if
condition|(
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select r from CurriculumProjectionRule r where r.academicArea.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rules
label|:
for|for
control|(
name|CurriculumProjectionRule
name|rule
range|:
operator|(
name|List
argument_list|<
name|CurriculumProjectionRule
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select r from CurriculumProjectionRule r "
operator|+
literal|"where r.academicArea.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|fromSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|CurriculumProjectionRule
name|newRule
init|=
operator|new
name|CurriculumProjectionRule
argument_list|()
decl_stmt|;
name|AcademicArea
name|area
init|=
name|areas
operator|.
name|get
argument_list|(
name|rule
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|area
operator|==
literal|null
condition|)
continue|continue;
name|newRule
operator|.
name|setAcademicArea
argument_list|(
name|area
argument_list|)
expr_stmt|;
name|AcademicClassification
name|clasf
init|=
name|classifications
operator|.
name|get
argument_list|(
name|rule
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|clasf
operator|==
literal|null
condition|)
continue|continue;
name|newRule
operator|.
name|setAcademicClassification
argument_list|(
name|clasf
argument_list|)
expr_stmt|;
if|if
condition|(
name|rule
operator|.
name|getMajor
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PosMajor
argument_list|>
name|code2major
init|=
name|majors
operator|.
name|get
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
decl_stmt|;
name|PosMajor
name|major
init|=
operator|(
name|code2major
operator|==
literal|null
condition|?
literal|null
else|:
name|code2major
operator|.
name|get
argument_list|(
name|rule
operator|.
name|getMajor
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|major
operator|==
literal|null
condition|)
continue|continue
name|rules
continue|;
name|newRule
operator|.
name|setMajor
argument_list|(
name|major
argument_list|)
expr_stmt|;
block|}
name|newRule
operator|.
name|setProjection
argument_list|(
name|rule
operator|.
name|getProjection
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|newRule
argument_list|)
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * @return the subpartTimeRollForward 	 */
specifier|public
name|boolean
name|isSubpartTimeRollForward
parameter_list|()
block|{
return|return
name|subpartTimeRollForward
return|;
block|}
comment|/** 	 * @return the subpartLocationRollForward 	 */
specifier|public
name|boolean
name|isSubpartLocationRollForward
parameter_list|()
block|{
return|return
name|subpartLocationRollForward
return|;
block|}
comment|/** 	 * @return the classPrefsPushUp 	 */
specifier|public
name|boolean
name|isClassPrefsPushUp
parameter_list|()
block|{
return|return
name|classPrefsPushUp
return|;
block|}
block|}
end_class

end_unit

