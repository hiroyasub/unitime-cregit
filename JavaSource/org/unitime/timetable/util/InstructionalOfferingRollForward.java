begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2008 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ArrangeCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseSubpartCredit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|FixedCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|OfferingConsentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|VariableFixedCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|VariableRangeCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ItypeDescDAO
import|;
end_import

begin_comment
comment|/**  *   * @author Stephanie Schluttenhofer, Tomas Muller  *  */
end_comment

begin_class
specifier|public
class|class
name|InstructionalOfferingRollForward
extends|extends
name|SessionRollForward
block|{
specifier|public
name|void
name|rollForwardInstructionalOfferingsForASubjectArea
parameter_list|(
name|String
name|subjectAreaAbbreviation
parameter_list|,
name|Session
name|fromSession
parameter_list|,
name|Session
name|toSession
parameter_list|)
block|{
name|CourseOfferingDAO
name|coDao
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
decl_stmt|;
name|String
name|query
init|=
literal|"from CourseOffering as co where co.subjectArea.subjectAreaAbbreviation = '"
operator|+
name|subjectAreaAbbreviation
operator|+
literal|"' and co.isControl = 1"
operator|+
literal|" and co.subjectArea.session.uniqueId = "
operator|+
name|fromSession
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
name|List
name|l
init|=
name|coDao
operator|.
name|getQuery
argument_list|(
name|query
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
block|{
name|CourseOffering
name|co
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|l
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|co
operator|=
operator|(
name|CourseOffering
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|rollForwardInstructionalOffering
argument_list|(
name|co
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|,
name|fromSession
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|rollForwardExpiredInstructionalOfferingsForASubjectArea
parameter_list|(
name|String
name|subjectAreaAbbreviation
parameter_list|,
name|Session
name|fromSession
parameter_list|,
name|Session
name|toSession
parameter_list|)
block|{
name|CourseOfferingDAO
name|coDao
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
decl_stmt|;
name|String
name|query
init|=
literal|"select co from CourseOffering co"
operator|+
literal|" where co.subjectArea.subjectAreaAbbreviation = '"
operator|+
name|subjectAreaAbbreviation
operator|+
literal|"'"
operator|+
literal|"  and co.subjectArea.session.uniqueId = "
operator|+
name|fromSession
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
operator|+
literal|"  and co.isControl = 1"
operator|+
literal|"  and co.instructionalOffering.notOffered = false"
operator|+
literal|"  and 0 = (select count(cc) from CourseCatalog cc"
operator|+
literal|" where cc.session.uniqueId = "
operator|+
name|toSession
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
operator|+
literal|"  and cc.subject = co.subjectArea.subjectAreaAbbreviation"
operator|+
literal|"  and (cc.courseNumber = co.courseNbr or cc.previousCourseNumber= co.courseNbr))"
operator|+
literal|" and 0 = (select count(co2) from CourseOffering co2"
operator|+
literal|"  where co2.subjectArea.session.uniqueId = "
operator|+
name|toSession
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
operator|+
literal|"   and co2.subjectArea.subjectAreaAbbreviation = co.subjectArea.subjectAreaAbbreviation"
operator|+
literal|"   and co2.courseNbr = co.courseNbr)"
decl_stmt|;
name|List
name|l
init|=
name|coDao
operator|.
name|getQuery
argument_list|(
name|query
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
block|{
name|CourseOffering
name|co
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|l
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|co
operator|=
operator|(
name|CourseOffering
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|.
name|equals
argument_list|(
literal|"ECE"
argument_list|)
operator|&&
name|co
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|equals
argument_list|(
literal|"495E"
argument_list|)
operator|)
operator|||
operator|(
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|.
name|equals
argument_list|(
literal|"AMST"
argument_list|)
operator|&&
name|co
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|equals
argument_list|(
literal|"650A"
argument_list|)
operator|)
operator|||
operator|(
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|.
name|equals
argument_list|(
literal|"FLL"
argument_list|)
operator|&&
name|co
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|equals
argument_list|(
literal|"650T"
argument_list|)
operator|)
condition|)
continue|continue;
name|rollForwardInstructionalOffering
argument_list|(
name|co
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|,
name|fromSession
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
block|}
block|}
name|coDao
operator|.
name|getSession
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|rollForwardInstructionalOfferingForACourseOffering
parameter_list|(
name|CourseOffering
name|co
parameter_list|,
name|Session
name|fromSession
parameter_list|,
name|Session
name|toSession
parameter_list|)
block|{
name|CourseOfferingDAO
name|coDao
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
decl_stmt|;
if|if
condition|(
name|co
operator|!=
literal|null
condition|)
block|{
name|rollForwardInstructionalOffering
argument_list|(
name|co
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|,
name|fromSession
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
block|}
name|coDao
operator|.
name|getSession
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|addNewInstructionalOfferingsForASubjectArea
parameter_list|(
name|String
name|subjectAreaAbbreviation
parameter_list|,
name|Session
name|toSession
parameter_list|)
block|{
name|CourseOfferingDAO
name|coDao
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionHasCourseCatalog
argument_list|(
name|toSession
argument_list|)
condition|)
block|{
name|String
name|query
init|=
literal|"select cc2 from CourseCatalog cc2"
decl_stmt|;
name|query
operator|+=
literal|" where cc2.session.uniqueId=:sessionId"
expr_stmt|;
name|query
operator|+=
literal|"  and cc2.subject = :subjectAbbv"
expr_stmt|;
name|query
operator|+=
literal|"  and cc2.uniqueId not in "
expr_stmt|;
name|query
operator|+=
literal|" (select distinct cc.uniqueId from CourseCatalog cc, CourseOffering co"
expr_stmt|;
name|query
operator|+=
literal|"  where co.subjectArea.session.uniqueId=:sessionId"
expr_stmt|;
name|query
operator|+=
literal|"  and co.subjectArea.subjectAreaAbbreviation=:subjectAbbv"
expr_stmt|;
name|query
operator|+=
literal|"  and cc.session.uniqueId=:sessionId"
expr_stmt|;
name|query
operator|+=
literal|"  and cc.subject=:subjectAbbv"
expr_stmt|;
name|query
operator|+=
literal|"  and cc.courseNumber = co.courseNbr)"
expr_stmt|;
name|List
name|l
init|=
name|coDao
operator|.
name|getQuery
argument_list|(
name|query
argument_list|)
operator|.
name|setString
argument_list|(
literal|"subjectAbbv"
argument_list|,
name|subjectAreaAbbreviation
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
block|{
name|CourseCatalog
name|cc
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|ccIt
init|=
name|l
operator|.
name|iterator
argument_list|()
init|;
name|ccIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|cc
operator|=
operator|(
name|CourseCatalog
operator|)
name|ccIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|addInstructionalOffering
argument_list|(
name|cc
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|coDao
operator|.
name|getSession
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|addInstructionalOffering
parameter_list|(
name|CourseCatalog
name|courseCatalogEntry
parameter_list|,
name|Session
name|toSession
parameter_list|)
block|{
name|Debug
operator|.
name|info
argument_list|(
literal|"subject_area = '"
operator|+
name|courseCatalogEntry
operator|.
name|getSubject
argument_list|()
operator|+
literal|"' crs nbr = '"
operator|+
name|courseCatalogEntry
operator|.
name|getCourseNumber
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|InstructionalOffering
name|instructionalOffering
init|=
name|createToInstructionalOfferingFromCourseCatalog
argument_list|(
name|courseCatalogEntry
argument_list|,
name|toSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructionalOffering
operator|!=
literal|null
condition|)
block|{
name|CourseOffering
name|courseOffering
init|=
name|createToCourseOfferingFromCourseCatalog
argument_list|(
name|courseCatalogEntry
argument_list|,
name|toSession
argument_list|)
decl_stmt|;
name|courseOffering
operator|.
name|setInstructionalOffering
argument_list|(
name|instructionalOffering
argument_list|)
expr_stmt|;
name|instructionalOffering
operator|.
name|setNotOffered
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|instructionalOffering
operator|.
name|addTocourseOfferings
argument_list|(
name|courseOffering
argument_list|)
expr_stmt|;
name|InstrOfferingConfig
name|instrOffrConfig
init|=
name|createToInstrOfferingConfigFromCourseCatalog
argument_list|(
name|courseCatalogEntry
argument_list|,
name|toSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|instrOffrConfig
operator|!=
literal|null
condition|)
block|{
name|instructionalOffering
operator|.
name|addToinstrOfferingConfigs
argument_list|(
name|instrOffrConfig
argument_list|)
expr_stmt|;
name|instrOffrConfig
operator|.
name|setInstructionalOffering
argument_list|(
name|instructionalOffering
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|instructionalOffering
operator|.
name|getInstrOfferingPermId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|instructionalOffering
operator|.
name|generateInstrOfferingPermId
argument_list|()
expr_stmt|;
block|}
name|InstructionalOfferingDAO
name|ioDao
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
decl_stmt|;
name|ioDao
operator|.
name|saveOrUpdate
argument_list|(
name|instructionalOffering
argument_list|)
expr_stmt|;
name|ioDao
operator|.
name|getSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|ioDao
operator|.
name|getSession
argument_list|()
operator|.
name|evict
argument_list|(
name|instructionalOffering
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|rollForwardInstructionalOfferingsForACourseOffering
parameter_list|(
name|String
name|subjectAreaAbbreviation
parameter_list|,
name|String
name|courseNumber
parameter_list|,
name|Session
name|fromSession
parameter_list|,
name|Session
name|toSession
parameter_list|)
block|{
name|CourseOfferingDAO
name|coDao
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
decl_stmt|;
name|String
name|query
init|=
literal|"from CourseOffering as co where co.subjectArea.subjectAreaAbbreviation = '"
operator|+
name|subjectAreaAbbreviation
operator|+
literal|"' and co.getCourseNbr = '"
operator|+
name|courseNumber
operator|+
literal|"' and co.isControl = 1"
operator|+
literal|" and co.subjectArea.session.uniqueId = "
operator|+
name|fromSession
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
name|List
name|l
init|=
name|coDao
operator|.
name|getQuery
argument_list|(
name|query
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
name|l
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|CourseOffering
name|co
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|l
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|co
operator|=
operator|(
name|CourseOffering
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|rollForwardInstructionalOffering
argument_list|(
name|co
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|,
name|fromSession
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|rollForwardInstructionalOffering
parameter_list|(
name|InstructionalOffering
name|fromInstructionalOffering
parameter_list|,
name|Session
name|fromSession
parameter_list|,
name|Session
name|toSession
parameter_list|)
block|{
name|InstructionalOfferingDAO
name|ioDao
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|ioDao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Debug
operator|.
name|info
argument_list|(
literal|"subj = '"
operator|+
name|fromInstructionalOffering
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|"' crs nbr = '"
operator|+
name|fromInstructionalOffering
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|Transaction
name|trns
init|=
literal|null
decl_stmt|;
try|try
block|{
name|trns
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|InstructionalOffering
name|toInstructionalOffering
init|=
name|findToInstructionalOffering
argument_list|(
name|fromInstructionalOffering
argument_list|,
name|toSession
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|toInstructionalOffering
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|toInstructionalOffering
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|!=
literal|null
operator|&&
name|toInstructionalOffering
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|toInstructionalOffering
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|toInstructionalOffering
operator|.
name|setNotOffered
argument_list|(
name|fromInstructionalOffering
operator|.
name|isNotOffered
argument_list|()
argument_list|)
expr_stmt|;
name|toInstructionalOffering
operator|.
name|setUniqueIdRolledForwardFrom
argument_list|(
name|fromInstructionalOffering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|InstrOfferingConfig
name|fromInstrOffrConfig
init|=
literal|null
decl_stmt|;
name|InstrOfferingConfig
name|toInstrOffrConfig
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fromInstructionalOffering
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|!=
literal|null
operator|&&
name|fromInstructionalOffering
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|fromInstructionalOffering
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromInstrOffrConfig
operator|=
operator|(
name|InstrOfferingConfig
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|toInstrOffrConfig
operator|=
operator|new
name|InstrOfferingConfig
argument_list|()
expr_stmt|;
name|toInstrOffrConfig
operator|.
name|setLimit
argument_list|(
name|fromInstrOffrConfig
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|toInstrOffrConfig
operator|.
name|setInstructionalOffering
argument_list|(
name|toInstructionalOffering
argument_list|)
expr_stmt|;
name|toInstrOffrConfig
operator|.
name|setName
argument_list|(
name|fromInstrOffrConfig
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|toInstrOffrConfig
operator|.
name|setUnlimitedEnrollment
argument_list|(
name|fromInstrOffrConfig
operator|.
name|isUnlimitedEnrollment
argument_list|()
argument_list|)
expr_stmt|;
name|toInstrOffrConfig
operator|.
name|setUniqueIdRolledForwardFrom
argument_list|(
name|fromInstrOffrConfig
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|toInstructionalOffering
operator|.
name|addToinstrOfferingConfigs
argument_list|(
name|toInstrOffrConfig
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|toInstrOffrConfig
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|toInstructionalOffering
argument_list|)
expr_stmt|;
name|rollForwardSchedSubpartsForAConfig
argument_list|(
name|fromInstrOffrConfig
argument_list|,
name|toInstrOffrConfig
argument_list|,
name|hibSession
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|toInstructionalOffering
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|trns
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|trns
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|evict
argument_list|(
name|toInstructionalOffering
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|evict
argument_list|(
name|fromInstructionalOffering
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
if|if
condition|(
name|trns
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|trns
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|trns
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|rollForwardCourseCreditUnitConfigForSchedSubpart
parameter_list|(
name|SchedulingSubpart
name|fromSubpart
parameter_list|,
name|SchedulingSubpart
name|toSubpart
parameter_list|)
block|{
if|if
condition|(
name|sessionHasCourseCatalog
argument_list|(
name|toSubpart
operator|.
name|getSession
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|fromSubpart
operator|.
name|getParentSubpart
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromSubpart
operator|.
name|getParentSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|equals
argument_list|(
name|fromSubpart
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
condition|)
block|{
name|CourseCatalog
name|courseCatalogEntry
init|=
name|CourseCatalog
operator|.
name|findCourseInCatalogForSession
argument_list|(
name|toSubpart
operator|.
name|getControllingCourseOffering
argument_list|()
argument_list|,
name|toSubpart
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|courseCatalogEntry
operator|!=
literal|null
operator|&&
name|courseCatalogEntry
operator|.
name|getSubparts
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|CourseSubpartCredit
name|csc
init|=
literal|null
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|cscIt
init|=
name|courseCatalogEntry
operator|.
name|getSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
operator|(
name|cscIt
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|found
operator|)
condition|;
control|)
block|{
name|csc
operator|=
operator|(
name|CourseSubpartCredit
operator|)
name|cscIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|csc
operator|.
name|getSubpartId
argument_list|()
operator|.
name|equals
argument_list|(
name|toSubpart
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|found
condition|)
block|{
name|CourseCreditUnitConfig
name|ccuc
init|=
name|CourseCreditUnitConfig
operator|.
name|createCreditUnitConfigOfFormat
argument_list|(
name|csc
operator|.
name|getCreditFormat
argument_list|()
argument_list|,
name|csc
operator|.
name|getCreditType
argument_list|()
argument_list|,
name|csc
operator|.
name|getCreditUnitType
argument_list|()
argument_list|,
name|csc
operator|.
name|getFixedMinimumCredit
argument_list|()
argument_list|,
name|csc
operator|.
name|getMaximumCredit
argument_list|()
argument_list|,
name|csc
operator|.
name|isFractionalCreditAllowed
argument_list|()
argument_list|,
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|ccuc
operator|.
name|setOwner
argument_list|(
name|toSubpart
argument_list|)
expr_stmt|;
name|toSubpart
operator|.
name|setCredit
argument_list|(
name|ccuc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|else if
condition|(
name|fromSubpart
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Float
name|units
init|=
literal|null
decl_stmt|;
name|Float
name|maxUnits
init|=
literal|null
decl_stmt|;
name|Boolean
name|fractionalIncrementsAllowed
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fromSubpart
operator|.
name|getCredit
argument_list|()
operator|instanceof
name|FixedCreditUnitConfig
condition|)
block|{
name|FixedCreditUnitConfig
name|fcuc
init|=
operator|(
name|FixedCreditUnitConfig
operator|)
name|fromSubpart
operator|.
name|getCredit
argument_list|()
decl_stmt|;
name|units
operator|=
name|fcuc
operator|.
name|getFixedUnits
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|fromSubpart
operator|.
name|getCredit
argument_list|()
operator|instanceof
name|VariableFixedCreditUnitConfig
condition|)
block|{
name|VariableFixedCreditUnitConfig
name|vfcuc
init|=
operator|(
name|VariableFixedCreditUnitConfig
operator|)
name|fromSubpart
operator|.
name|getCredit
argument_list|()
decl_stmt|;
name|units
operator|=
name|vfcuc
operator|.
name|getMinUnits
argument_list|()
expr_stmt|;
name|maxUnits
operator|=
name|vfcuc
operator|.
name|getMaxUnits
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|fromSubpart
operator|.
name|getCredit
argument_list|()
operator|instanceof
name|VariableRangeCreditUnitConfig
condition|)
block|{
name|VariableRangeCreditUnitConfig
name|vrcuc
init|=
operator|(
name|VariableRangeCreditUnitConfig
operator|)
name|fromSubpart
operator|.
name|getCredit
argument_list|()
decl_stmt|;
name|units
operator|=
name|vrcuc
operator|.
name|getMinUnits
argument_list|()
expr_stmt|;
name|maxUnits
operator|=
name|vrcuc
operator|.
name|getMaxUnits
argument_list|()
expr_stmt|;
name|fractionalIncrementsAllowed
operator|=
name|vrcuc
operator|.
name|isFractionalIncrementsAllowed
argument_list|()
expr_stmt|;
block|}
name|CourseCreditUnitConfig
name|ccuc
init|=
name|CourseCreditUnitConfig
operator|.
name|createCreditUnitConfigOfFormat
argument_list|(
name|fromSubpart
operator|.
name|getCredit
argument_list|()
operator|.
name|getCreditFormat
argument_list|()
argument_list|,
name|fromSubpart
operator|.
name|getCredit
argument_list|()
operator|.
name|getCreditType
argument_list|()
argument_list|,
name|fromSubpart
operator|.
name|getCredit
argument_list|()
operator|.
name|getCreditUnitType
argument_list|()
argument_list|,
name|units
argument_list|,
name|maxUnits
argument_list|,
name|fractionalIncrementsAllowed
argument_list|,
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|ccuc
operator|.
name|setOwner
argument_list|(
name|toSubpart
argument_list|)
expr_stmt|;
name|toSubpart
operator|.
name|setCredit
argument_list|(
name|ccuc
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Class_
name|rollForwardClass
parameter_list|(
name|Class_
name|fromClass
parameter_list|,
name|SchedulingSubpart
name|toSubpart
parameter_list|,
name|Session
name|toSession
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
throws|throws
name|Exception
block|{
name|Class_
name|toClass
init|=
operator|new
name|Class_
argument_list|()
decl_stmt|;
name|toClass
operator|.
name|setEnabledForStudentScheduling
argument_list|(
name|fromClass
operator|.
name|isEnabledForStudentScheduling
argument_list|()
argument_list|)
expr_stmt|;
name|toClass
operator|.
name|setDisplayInstructor
argument_list|(
name|fromClass
operator|.
name|isDisplayInstructor
argument_list|()
argument_list|)
expr_stmt|;
name|toClass
operator|.
name|setExpectedCapacity
argument_list|(
name|fromClass
operator|.
name|getExpectedCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|toClass
operator|.
name|setMaxExpectedCapacity
argument_list|(
name|fromClass
operator|.
name|getMaxExpectedCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|toClass
operator|.
name|setNbrRooms
argument_list|(
name|fromClass
operator|.
name|getNbrRooms
argument_list|()
argument_list|)
expr_stmt|;
name|toClass
operator|.
name|setNotes
argument_list|(
name|fromClass
operator|.
name|getNotes
argument_list|()
argument_list|)
expr_stmt|;
name|toClass
operator|.
name|setRoomRatio
argument_list|(
name|fromClass
operator|.
name|getRoomRatio
argument_list|()
argument_list|)
expr_stmt|;
name|toClass
operator|.
name|setSchedulePrintNote
argument_list|(
name|fromClass
operator|.
name|getSchedulePrintNote
argument_list|()
argument_list|)
expr_stmt|;
name|toClass
operator|.
name|setSchedulingSubpart
argument_list|(
name|toSubpart
argument_list|)
expr_stmt|;
name|toClass
operator|.
name|setUniqueIdRolledForwardFrom
argument_list|(
name|fromClass
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|toSubpart
operator|.
name|addToclasses
argument_list|(
name|toClass
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromClass
operator|.
name|getManagingDept
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromClass
operator|.
name|getManagingDept
argument_list|()
operator|.
name|equals
argument_list|(
name|fromClass
operator|.
name|getControllingDept
argument_list|()
argument_list|)
condition|)
block|{
name|toClass
operator|.
name|setManagingDept
argument_list|(
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|fromClass
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fromClass
operator|.
name|getDatePattern
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|DatePattern
name|toDp
init|=
name|DatePattern
operator|.
name|findByName
argument_list|(
name|toSession
argument_list|,
name|fromClass
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|toDp
operator|==
literal|null
condition|)
block|{
name|toDp
operator|=
name|fromClass
operator|.
name|getDatePattern
argument_list|()
operator|.
name|findCloseMatchDatePatternInSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
block|}
name|toClass
operator|.
name|setDatePattern
argument_list|(
name|toDp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isClassRollForward
argument_list|()
condition|)
block|{
name|rollForwardTimePrefs
argument_list|(
name|fromClass
argument_list|,
name|toClass
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
name|rollForwardBuildingPrefs
argument_list|(
name|fromClass
argument_list|,
name|toClass
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
name|rollForwardRoomPrefs
argument_list|(
name|fromClass
argument_list|,
name|toClass
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
name|rollForwardRoomGroupPrefs
argument_list|(
name|fromClass
argument_list|,
name|toClass
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
name|rollForwardRoomFeaturePrefs
argument_list|(
name|fromClass
argument_list|,
name|toClass
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
name|rollForwardDistributionPrefs
argument_list|(
name|fromClass
argument_list|,
name|toClass
argument_list|,
name|toSession
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|toClass
operator|)
return|;
block|}
specifier|private
name|void
name|rollForwardSchedulingSubpart
parameter_list|(
name|InstrOfferingConfig
name|toInstrOffrConfig
parameter_list|,
name|SchedulingSubpart
name|fromSubpart
parameter_list|,
name|RollForwardSchedSubpart
name|parentSubpart
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Session
name|toSession
parameter_list|)
throws|throws
name|Exception
block|{
name|SchedulingSubpart
name|toSubpart
init|=
operator|new
name|SchedulingSubpart
argument_list|()
decl_stmt|;
name|toSubpart
operator|.
name|setAutoSpreadInTime
argument_list|(
name|fromSubpart
operator|.
name|isAutoSpreadInTime
argument_list|()
argument_list|)
expr_stmt|;
name|toSubpart
operator|.
name|setStudentAllowOverlap
argument_list|(
name|fromSubpart
operator|.
name|isStudentAllowOverlap
argument_list|()
argument_list|)
expr_stmt|;
name|toSubpart
operator|.
name|setInstrOfferingConfig
argument_list|(
name|toInstrOffrConfig
argument_list|)
expr_stmt|;
name|toInstrOffrConfig
operator|.
name|addToschedulingSubparts
argument_list|(
name|toSubpart
argument_list|)
expr_stmt|;
name|toSubpart
operator|.
name|setMinutesPerWk
argument_list|(
name|fromSubpart
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|)
expr_stmt|;
name|toSubpart
operator|.
name|setItype
argument_list|(
name|fromSubpart
operator|.
name|getItype
argument_list|()
argument_list|)
expr_stmt|;
name|toSubpart
operator|.
name|setUniqueIdRolledForwardFrom
argument_list|(
name|fromSubpart
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|rollForwardCourseCreditUnitConfigForSchedSubpart
argument_list|(
name|fromSubpart
argument_list|,
name|toSubpart
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromSubpart
operator|.
name|getDatePattern
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|DatePattern
name|toDp
init|=
literal|null
decl_stmt|;
name|toDp
operator|=
name|DatePattern
operator|.
name|findByName
argument_list|(
name|toSession
argument_list|,
name|fromSubpart
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDp
operator|==
literal|null
condition|)
block|{
name|toDp
operator|=
name|fromSubpart
operator|.
name|getDatePattern
argument_list|()
operator|.
name|findCloseMatchDatePatternInSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
block|}
name|toSubpart
operator|.
name|setDatePattern
argument_list|(
name|toDp
argument_list|)
expr_stmt|;
block|}
name|RollForwardSchedSubpart
name|rfSs
init|=
operator|new
name|RollForwardSchedSubpart
argument_list|()
decl_stmt|;
name|rfSs
operator|.
name|setFromSubpart
argument_list|(
name|fromSubpart
argument_list|)
expr_stmt|;
name|rfSs
operator|.
name|setToSubpart
argument_list|(
name|toSubpart
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentSubpart
operator|!=
literal|null
condition|)
block|{
name|rfSs
operator|.
name|setFromParentSubpart
argument_list|(
name|parentSubpart
operator|.
name|getFromSubpart
argument_list|()
argument_list|)
expr_stmt|;
name|parentSubpart
operator|.
name|addToFromChildSubparts
argument_list|(
name|fromSubpart
argument_list|)
expr_stmt|;
name|rfSs
operator|.
name|setToParentSubpart
argument_list|(
name|parentSubpart
operator|.
name|getToSubpart
argument_list|()
argument_list|)
expr_stmt|;
name|parentSubpart
operator|.
name|addToToChildSubparts
argument_list|(
name|toSubpart
argument_list|)
expr_stmt|;
name|toSubpart
operator|.
name|setParentSubpart
argument_list|(
name|parentSubpart
operator|.
name|getToSubpart
argument_list|()
argument_list|)
expr_stmt|;
name|parentSubpart
operator|.
name|getToSubpart
argument_list|()
operator|.
name|addTochildSubparts
argument_list|(
name|toSubpart
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|update
argument_list|(
name|toInstrOffrConfig
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromSubpart
operator|.
name|getClasses
argument_list|()
operator|!=
literal|null
operator|&&
name|fromSubpart
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Class_
name|fromClass
init|=
literal|null
decl_stmt|;
name|Class_
name|toClass
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|fromSubpart
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromClass
operator|=
operator|(
name|Class_
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|toClass
operator|=
name|rollForwardClass
argument_list|(
name|fromClass
argument_list|,
name|toSubpart
argument_list|,
name|toSession
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
name|RollForwardClass
name|rfc
init|=
operator|new
name|RollForwardClass
argument_list|()
decl_stmt|;
name|rfc
operator|.
name|setToClass
argument_list|(
name|toClass
argument_list|)
expr_stmt|;
name|rfc
operator|.
name|setFromClass
argument_list|(
name|fromClass
argument_list|)
expr_stmt|;
name|rfc
operator|.
name|setFromParentClass
argument_list|(
name|fromClass
operator|.
name|getParentClass
argument_list|()
argument_list|)
expr_stmt|;
name|rfc
operator|.
name|setParentSubpart
argument_list|(
name|rfSs
argument_list|)
expr_stmt|;
name|rfSs
operator|.
name|addToRollForwardClasses
argument_list|(
name|rfc
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromClass
operator|.
name|getChildClasses
argument_list|()
operator|!=
literal|null
operator|&&
name|fromClass
operator|.
name|getChildClasses
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Iterator
name|ccIt
init|=
name|fromClass
operator|.
name|getChildClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|ccIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|rfc
operator|.
name|addToLastLikeChildClasses
argument_list|(
name|ccIt
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|parentSubpart
operator|!=
literal|null
condition|)
block|{
name|Class_
name|parentClass
init|=
name|parentSubpart
operator|.
name|findParentClassMatchingFromParentClass
argument_list|(
name|fromClass
operator|.
name|getParentClass
argument_list|()
argument_list|)
decl_stmt|;
name|toClass
operator|.
name|setParentClass
argument_list|(
name|parentClass
argument_list|)
expr_stmt|;
name|parentClass
operator|.
name|addTochildClasses
argument_list|(
name|toClass
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|hibSession
operator|.
name|update
argument_list|(
name|toInstrOffrConfig
argument_list|)
expr_stmt|;
name|rollForwardTimePrefs
argument_list|(
name|fromSubpart
argument_list|,
name|toSubpart
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
name|rollForwardBuildingPrefs
argument_list|(
name|fromSubpart
argument_list|,
name|toSubpart
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
name|rollForwardRoomPrefs
argument_list|(
name|fromSubpart
argument_list|,
name|toSubpart
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
name|rollForwardRoomGroupPrefs
argument_list|(
name|fromSubpart
argument_list|,
name|toSubpart
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
name|rollForwardRoomFeaturePrefs
argument_list|(
name|fromSubpart
argument_list|,
name|toSubpart
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
name|rollForwardDistributionPrefs
argument_list|(
name|fromSubpart
argument_list|,
name|toSubpart
argument_list|,
name|toSession
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromSubpart
operator|.
name|getChildSubparts
argument_list|()
operator|!=
literal|null
operator|&&
name|fromSubpart
operator|.
name|getChildSubparts
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|SchedulingSubpart
name|childSubpart
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|fromSubpart
operator|.
name|getChildSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|childSubpart
operator|=
operator|(
name|SchedulingSubpart
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|rollForwardSchedulingSubpart
argument_list|(
name|toInstrOffrConfig
argument_list|,
name|childSubpart
argument_list|,
name|rfSs
argument_list|,
name|hibSession
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|update
argument_list|(
name|toInstrOffrConfig
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|rollForwardSchedSubpartsForAConfig
parameter_list|(
name|InstrOfferingConfig
name|ioc
parameter_list|,
name|InstrOfferingConfig
name|newIoc
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Session
name|toSession
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|!=
literal|null
operator|&&
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|SchedulingSubpart
name|ss
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ss
operator|=
operator|(
name|SchedulingSubpart
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|==
literal|null
condition|)
block|{
name|rollForwardSchedulingSubpart
argument_list|(
name|newIoc
argument_list|,
name|ss
argument_list|,
literal|null
argument_list|,
name|hibSession
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|InstructionalOffering
name|createToInstructionalOfferingFromFromInstructionalOffering
parameter_list|(
name|InstructionalOffering
name|fromInstructionalOffering
parameter_list|,
name|Session
name|toSession
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
if|if
condition|(
name|fromInstructionalOffering
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
name|InstructionalOffering
name|toInstructionalOffering
init|=
operator|new
name|InstructionalOffering
argument_list|()
decl_stmt|;
name|toInstructionalOffering
operator|.
name|setNotOffered
argument_list|(
name|fromInstructionalOffering
operator|.
name|isNotOffered
argument_list|()
argument_list|)
expr_stmt|;
name|toInstructionalOffering
operator|.
name|setSession
argument_list|(
name|toSession
argument_list|)
expr_stmt|;
name|toInstructionalOffering
operator|.
name|setUniqueIdRolledForwardFrom
argument_list|(
name|fromInstructionalOffering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|toInstructionalOffering
operator|.
name|setInstrOfferingPermId
argument_list|(
name|fromInstructionalOffering
operator|.
name|getInstrOfferingPermId
argument_list|()
argument_list|)
expr_stmt|;
name|toInstructionalOffering
operator|.
name|setByReservationOnly
argument_list|(
name|fromInstructionalOffering
operator|.
name|isByReservationOnly
argument_list|()
argument_list|)
expr_stmt|;
name|toInstructionalOffering
operator|.
name|setLastWeekToEnroll
argument_list|(
name|fromInstructionalOffering
operator|.
name|getLastWeekToEnroll
argument_list|()
argument_list|)
expr_stmt|;
name|toInstructionalOffering
operator|.
name|setLastWeekToChange
argument_list|(
name|fromInstructionalOffering
operator|.
name|getLastWeekToChange
argument_list|()
argument_list|)
expr_stmt|;
name|toInstructionalOffering
operator|.
name|setLastWeekToDrop
argument_list|(
name|toInstructionalOffering
operator|.
name|getLastWeekToDrop
argument_list|()
argument_list|)
expr_stmt|;
name|CourseOffering
name|fromCourseOffering
init|=
literal|null
decl_stmt|;
name|CourseOffering
name|toCourseOffering
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|coIt
init|=
name|fromInstructionalOffering
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|coIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromCourseOffering
operator|=
operator|(
name|CourseOffering
operator|)
name|coIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|toCourseOffering
operator|=
operator|new
name|CourseOffering
argument_list|()
expr_stmt|;
name|toCourseOffering
operator|.
name|setSubjectArea
argument_list|(
name|fromCourseOffering
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|findSameSubjectAreaInSession
argument_list|(
name|toSession
argument_list|)
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setCourseNbr
argument_list|(
name|fromCourseOffering
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromInstructionalOffering
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|toCourseOffering
operator|.
name|setIsControl
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|toCourseOffering
operator|.
name|setIsControl
argument_list|(
name|fromCourseOffering
operator|.
name|isIsControl
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|toCourseOffering
operator|.
name|setExternalUniqueId
argument_list|(
name|fromCourseOffering
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setNbrExpectedStudents
argument_list|(
name|fromCourseOffering
operator|.
name|getNbrExpectedStudents
argument_list|()
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setDemand
argument_list|(
name|fromCourseOffering
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setPermId
argument_list|(
name|fromCourseOffering
operator|.
name|getPermId
argument_list|()
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setScheduleBookNote
argument_list|(
name|fromCourseOffering
operator|.
name|getScheduleBookNote
argument_list|()
argument_list|)
expr_stmt|;
comment|//			toCourseOffering.setScheduleBookNote("***Course not in Registrar's Course Catalog*** " + (toCourseOffering.getScheduleBookNote()==null?"":toCourseOffering.getScheduleBookNote()));
name|toCourseOffering
operator|.
name|setTitle
argument_list|(
name|fromCourseOffering
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setUniqueIdRolledForwardFrom
argument_list|(
name|fromCourseOffering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setInstructionalOffering
argument_list|(
name|toInstructionalOffering
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setReservation
argument_list|(
name|fromCourseOffering
operator|.
name|getReservation
argument_list|()
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setConsentType
argument_list|(
name|fromCourseOffering
operator|.
name|getConsentType
argument_list|()
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setCourseType
argument_list|(
name|fromCourseOffering
operator|.
name|getCourseType
argument_list|()
argument_list|)
expr_stmt|;
name|toInstructionalOffering
operator|.
name|addTocourseOfferings
argument_list|(
name|toCourseOffering
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromCourseOffering
operator|.
name|getCreditConfigs
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fromCourseOffering
operator|.
name|getCreditConfigs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|CourseCreditUnitConfig
name|ccuc
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|ccIt
init|=
name|fromCourseOffering
operator|.
name|getCreditConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|ccIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ccuc
operator|=
operator|(
name|CourseCreditUnitConfig
operator|)
name|ccIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|ccuc
operator|instanceof
name|ArrangeCreditUnitConfig
condition|)
block|{
name|ArrangeCreditUnitConfig
name|fromAcuc
init|=
operator|(
name|ArrangeCreditUnitConfig
operator|)
name|ccuc
decl_stmt|;
name|ArrangeCreditUnitConfig
name|toAcuc
init|=
operator|(
name|ArrangeCreditUnitConfig
operator|)
name|fromAcuc
operator|.
name|clone
argument_list|()
decl_stmt|;
name|toAcuc
operator|.
name|setOwner
argument_list|(
name|toCourseOffering
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|addTocreditConfigs
argument_list|(
name|toAcuc
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ccuc
operator|instanceof
name|FixedCreditUnitConfig
condition|)
block|{
name|FixedCreditUnitConfig
name|fromFcuc
init|=
operator|(
name|FixedCreditUnitConfig
operator|)
name|ccuc
decl_stmt|;
name|FixedCreditUnitConfig
name|toFcuc
init|=
operator|(
name|FixedCreditUnitConfig
operator|)
name|fromFcuc
operator|.
name|clone
argument_list|()
decl_stmt|;
name|toFcuc
operator|.
name|setOwner
argument_list|(
name|toCourseOffering
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|addTocreditConfigs
argument_list|(
name|toFcuc
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ccuc
operator|instanceof
name|VariableRangeCreditUnitConfig
condition|)
block|{
name|VariableRangeCreditUnitConfig
name|fromVrcuc
init|=
operator|(
name|VariableRangeCreditUnitConfig
operator|)
name|ccuc
decl_stmt|;
name|VariableRangeCreditUnitConfig
name|toVrcuc
init|=
operator|(
name|VariableRangeCreditUnitConfig
operator|)
name|fromVrcuc
operator|.
name|clone
argument_list|()
decl_stmt|;
name|toVrcuc
operator|.
name|setOwner
argument_list|(
name|toCourseOffering
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|addTocreditConfigs
argument_list|(
name|toVrcuc
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ccuc
operator|instanceof
name|VariableFixedCreditUnitConfig
condition|)
block|{
name|VariableFixedCreditUnitConfig
name|fromVfcuc
init|=
operator|(
name|VariableFixedCreditUnitConfig
operator|)
name|ccuc
decl_stmt|;
name|VariableFixedCreditUnitConfig
name|toVfcuc
init|=
operator|(
name|VariableFixedCreditUnitConfig
operator|)
name|fromVfcuc
operator|.
name|clone
argument_list|()
decl_stmt|;
name|toVfcuc
operator|.
name|setOwner
argument_list|(
name|toCourseOffering
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|addTocreditConfigs
argument_list|(
name|toVfcuc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|toInstructionalOffering
operator|.
name|getInstrOfferingPermId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|toInstructionalOffering
operator|.
name|generateInstrOfferingPermId
argument_list|()
expr_stmt|;
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|toInstructionalOffering
argument_list|)
expr_stmt|;
return|return
operator|(
name|toInstructionalOffering
operator|)
return|;
block|}
specifier|private
name|InstructionalOffering
name|createToInstructionalOfferingFromCourseCatalog
parameter_list|(
name|CourseCatalog
name|courseCatalogEntry
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
if|if
condition|(
name|courseCatalogEntry
operator|==
literal|null
operator|||
name|session
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
name|InstructionalOffering
name|toInstructionalOffering
init|=
operator|new
name|InstructionalOffering
argument_list|()
decl_stmt|;
name|toInstructionalOffering
operator|.
name|setNotOffered
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|toInstructionalOffering
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|toInstructionalOffering
operator|.
name|setByReservationOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
operator|(
name|toInstructionalOffering
operator|)
return|;
block|}
specifier|private
name|InstrOfferingConfig
name|createToInstrOfferingConfigFromCourseCatalog
parameter_list|(
name|CourseCatalog
name|courseCatalogEntry
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
if|if
condition|(
name|courseCatalogEntry
operator|==
literal|null
operator|||
name|session
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
name|InstrOfferingConfig
name|toInstrOfferingConfig
init|=
operator|new
name|InstrOfferingConfig
argument_list|()
decl_stmt|;
name|toInstrOfferingConfig
operator|.
name|setName
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|toInstrOfferingConfig
operator|.
name|setLimit
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|toInstrOfferingConfig
operator|.
name|setUnlimitedEnrollment
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|courseCatalogEntry
operator|.
name|getSubparts
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|courseCatalogEntry
operator|.
name|getSubparts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|CourseSubpartCredit
name|courseSubpartCredit
init|=
literal|null
decl_stmt|;
name|SchedulingSubpart
name|schedSupart
init|=
literal|null
decl_stmt|;
name|ItypeDescDAO
name|itDao
init|=
operator|new
name|ItypeDescDAO
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|cscIt
init|=
name|courseCatalogEntry
operator|.
name|getSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|cscIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|courseSubpartCredit
operator|=
operator|(
name|CourseSubpartCredit
operator|)
name|cscIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|schedSupart
operator|=
operator|new
name|SchedulingSubpart
argument_list|()
expr_stmt|;
name|schedSupart
operator|.
name|setInstrOfferingConfig
argument_list|(
name|toInstrOfferingConfig
argument_list|)
expr_stmt|;
name|toInstrOfferingConfig
operator|.
name|addToschedulingSubparts
argument_list|(
name|schedSupart
argument_list|)
expr_stmt|;
name|schedSupart
operator|.
name|setMinutesPerWk
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|schedSupart
operator|.
name|setAutoSpreadInTime
argument_list|(
name|ApplicationProperty
operator|.
name|SchedulingSubpartAutoSpreadInTimeDefault
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|schedSupart
operator|.
name|setStudentAllowOverlap
argument_list|(
name|ApplicationProperty
operator|.
name|SchedulingSubpartStudentOverlapsDefault
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|schedSupart
operator|.
name|setItype
argument_list|(
name|itDao
operator|.
name|get
argument_list|(
operator|new
name|Integer
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|courseSubpartCredit
operator|.
name|getSubpartId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|CourseCreditUnitConfig
name|ccuc
init|=
name|CourseCreditUnitConfig
operator|.
name|createCreditUnitConfigOfFormat
argument_list|(
name|courseSubpartCredit
operator|.
name|getCreditFormat
argument_list|()
argument_list|,
name|courseSubpartCredit
operator|.
name|getCreditType
argument_list|()
argument_list|,
name|courseSubpartCredit
operator|.
name|getCreditUnitType
argument_list|()
argument_list|,
name|courseSubpartCredit
operator|.
name|getFixedMinimumCredit
argument_list|()
argument_list|,
name|courseSubpartCredit
operator|.
name|getMaximumCredit
argument_list|()
argument_list|,
name|courseSubpartCredit
operator|.
name|isFractionalCreditAllowed
argument_list|()
argument_list|,
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ccuc
operator|instanceof
name|ArrangeCreditUnitConfig
condition|)
block|{
name|ArrangeCreditUnitConfig
name|toAcuc
init|=
operator|(
name|ArrangeCreditUnitConfig
operator|)
name|ccuc
decl_stmt|;
name|toAcuc
operator|.
name|setOwner
argument_list|(
name|schedSupart
argument_list|)
expr_stmt|;
name|schedSupart
operator|.
name|addTocreditConfigs
argument_list|(
name|toAcuc
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ccuc
operator|instanceof
name|FixedCreditUnitConfig
condition|)
block|{
name|FixedCreditUnitConfig
name|toFcuc
init|=
operator|(
name|FixedCreditUnitConfig
operator|)
name|ccuc
decl_stmt|;
name|toFcuc
operator|.
name|setOwner
argument_list|(
name|schedSupart
argument_list|)
expr_stmt|;
name|schedSupart
operator|.
name|addTocreditConfigs
argument_list|(
name|toFcuc
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ccuc
operator|instanceof
name|VariableRangeCreditUnitConfig
condition|)
block|{
name|VariableRangeCreditUnitConfig
name|toVrcuc
init|=
operator|(
name|VariableRangeCreditUnitConfig
operator|)
name|ccuc
decl_stmt|;
name|toVrcuc
operator|.
name|setOwner
argument_list|(
name|schedSupart
argument_list|)
expr_stmt|;
name|schedSupart
operator|.
name|addTocreditConfigs
argument_list|(
name|toVrcuc
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ccuc
operator|instanceof
name|VariableFixedCreditUnitConfig
condition|)
block|{
name|VariableFixedCreditUnitConfig
name|toVfcuc
init|=
operator|(
name|VariableFixedCreditUnitConfig
operator|)
name|ccuc
decl_stmt|;
name|toVfcuc
operator|.
name|setOwner
argument_list|(
name|schedSupart
argument_list|)
expr_stmt|;
name|schedSupart
operator|.
name|addTocreditConfigs
argument_list|(
name|toVfcuc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|(
name|toInstrOfferingConfig
operator|)
return|;
block|}
specifier|private
name|CourseOffering
name|createToCourseOfferingFromCourseCatalog
parameter_list|(
name|CourseCatalog
name|courseCatalogEntry
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
if|if
condition|(
name|courseCatalogEntry
operator|==
literal|null
operator|||
name|session
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
name|CourseOffering
name|toCourseOffering
init|=
operator|new
name|CourseOffering
argument_list|()
decl_stmt|;
name|toCourseOffering
operator|.
name|setSubjectArea
argument_list|(
name|SubjectArea
operator|.
name|findByAbbv
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|courseCatalogEntry
operator|.
name|getSubject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setCourseNbr
argument_list|(
name|courseCatalogEntry
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setIsControl
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setExternalUniqueId
argument_list|(
name|courseCatalogEntry
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setPermId
argument_list|(
name|courseCatalogEntry
operator|.
name|getPermanentId
argument_list|()
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setTitle
argument_list|(
name|courseCatalogEntry
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setNbrExpectedStudents
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setDemand
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setConsentType
argument_list|(
name|OfferingConsentType
operator|.
name|getOfferingConsentTypeForReference
argument_list|(
name|courseCatalogEntry
operator|.
name|getApprovalType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|toCourseOffering
operator|)
return|;
block|}
specifier|private
name|InstructionalOffering
name|createToInstructionalOfferingBasedOnCourseCatalog
parameter_list|(
name|InstructionalOffering
name|fromInstructionalOffering
parameter_list|,
name|Session
name|toSession
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
if|if
condition|(
name|fromInstructionalOffering
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
name|CourseCatalog
name|controllingCourseCatalogEntry
init|=
name|CourseCatalog
operator|.
name|findCourseFromPreviousSessionInCatalogForSession
argument_list|(
name|fromInstructionalOffering
operator|.
name|getControllingCourseOffering
argument_list|()
argument_list|,
name|toSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|controllingCourseCatalogEntry
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
name|InstructionalOffering
name|toInstructionalOffering
init|=
name|createToInstructionalOfferingFromCourseCatalog
argument_list|(
name|controllingCourseCatalogEntry
argument_list|,
name|toSession
argument_list|)
decl_stmt|;
name|toInstructionalOffering
operator|.
name|setUniqueIdRolledForwardFrom
argument_list|(
name|fromInstructionalOffering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|toInstructionalOffering
operator|.
name|setInstrOfferingPermId
argument_list|(
name|fromInstructionalOffering
operator|.
name|getInstrOfferingPermId
argument_list|()
argument_list|)
expr_stmt|;
name|CourseOffering
name|fromCourseOffering
init|=
literal|null
decl_stmt|;
name|CourseOffering
name|toCourseOffering
init|=
literal|null
decl_stmt|;
name|CourseCatalog
name|courseCatalogEntry
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|coIt
init|=
name|fromInstructionalOffering
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|coIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|fromCourseOffering
operator|=
operator|(
name|CourseOffering
operator|)
name|coIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|courseCatalogEntry
operator|=
name|CourseCatalog
operator|.
name|findCourseFromPreviousSessionInCatalogForSession
argument_list|(
name|fromCourseOffering
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|courseCatalogEntry
operator|!=
literal|null
condition|)
block|{
name|toCourseOffering
operator|=
name|createToCourseOfferingFromCourseCatalog
argument_list|(
name|courseCatalogEntry
argument_list|,
name|toSession
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setIsControl
argument_list|(
name|fromCourseOffering
operator|.
name|isIsControl
argument_list|()
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setScheduleBookNote
argument_list|(
name|fromCourseOffering
operator|.
name|getScheduleBookNote
argument_list|()
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setUniqueIdRolledForwardFrom
argument_list|(
name|fromCourseOffering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setNbrExpectedStudents
argument_list|(
name|fromCourseOffering
operator|.
name|getNbrExpectedStudents
argument_list|()
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setDemand
argument_list|(
name|fromCourseOffering
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setInstructionalOffering
argument_list|(
name|toInstructionalOffering
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|setUniqueIdRolledForwardFrom
argument_list|(
name|fromCourseOffering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|toInstructionalOffering
operator|.
name|addTocourseOfferings
argument_list|(
name|toCourseOffering
argument_list|)
expr_stmt|;
if|if
condition|(
name|courseCatalogEntry
operator|.
name|getCreditType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|CourseCreditUnitConfig
name|ccuc
init|=
name|CourseCreditUnitConfig
operator|.
name|createCreditUnitConfigOfFormat
argument_list|(
name|courseCatalogEntry
operator|.
name|getCreditFormat
argument_list|()
argument_list|,
name|courseCatalogEntry
operator|.
name|getCreditType
argument_list|()
argument_list|,
name|courseCatalogEntry
operator|.
name|getCreditUnitType
argument_list|()
argument_list|,
name|courseCatalogEntry
operator|.
name|getFixedMinimumCredit
argument_list|()
argument_list|,
name|courseCatalogEntry
operator|.
name|getMaximumCredit
argument_list|()
argument_list|,
name|courseCatalogEntry
operator|.
name|isFractionalCreditAllowed
argument_list|()
argument_list|,
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ccuc
operator|instanceof
name|ArrangeCreditUnitConfig
condition|)
block|{
name|ArrangeCreditUnitConfig
name|toAcuc
init|=
operator|(
name|ArrangeCreditUnitConfig
operator|)
name|ccuc
decl_stmt|;
name|toAcuc
operator|.
name|setOwner
argument_list|(
name|toCourseOffering
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|addTocreditConfigs
argument_list|(
name|toAcuc
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ccuc
operator|instanceof
name|FixedCreditUnitConfig
condition|)
block|{
name|FixedCreditUnitConfig
name|toFcuc
init|=
operator|(
name|FixedCreditUnitConfig
operator|)
name|ccuc
decl_stmt|;
name|toFcuc
operator|.
name|setOwner
argument_list|(
name|toCourseOffering
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|addTocreditConfigs
argument_list|(
name|toFcuc
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ccuc
operator|instanceof
name|VariableRangeCreditUnitConfig
condition|)
block|{
name|VariableRangeCreditUnitConfig
name|toVrcuc
init|=
operator|(
name|VariableRangeCreditUnitConfig
operator|)
name|ccuc
decl_stmt|;
name|toVrcuc
operator|.
name|setOwner
argument_list|(
name|toCourseOffering
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|addTocreditConfigs
argument_list|(
name|toVrcuc
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ccuc
operator|instanceof
name|VariableFixedCreditUnitConfig
condition|)
block|{
name|VariableFixedCreditUnitConfig
name|toVfcuc
init|=
operator|(
name|VariableFixedCreditUnitConfig
operator|)
name|ccuc
decl_stmt|;
name|toVfcuc
operator|.
name|setOwner
argument_list|(
name|toCourseOffering
argument_list|)
expr_stmt|;
name|toCourseOffering
operator|.
name|addTocreditConfigs
argument_list|(
name|toVfcuc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|toInstructionalOffering
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|toCourseOffering
operator|.
name|setIsControl
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|toInstructionalOffering
operator|.
name|getInstrOfferingPermId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|toInstructionalOffering
operator|.
name|generateInstrOfferingPermId
argument_list|()
expr_stmt|;
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|toInstructionalOffering
argument_list|)
expr_stmt|;
return|return
operator|(
name|toInstructionalOffering
operator|)
return|;
block|}
specifier|private
name|InstructionalOffering
name|findToInstructionalOffering
parameter_list|(
name|InstructionalOffering
name|fromInstructionalOffering
parameter_list|,
name|Session
name|toSession
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
if|if
condition|(
name|fromInstructionalOffering
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
name|CourseOffering
name|co
init|=
name|CourseOffering
operator|.
name|findByIdRolledForwardFrom
argument_list|(
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|fromInstructionalOffering
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|co
operator|==
literal|null
operator|&&
name|ApplicationProperty
operator|.
name|CourseOfferingNumberMustBeUnique
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|co
operator|=
name|CourseOffering
operator|.
name|findBySessionSubjAreaAbbvCourseNbr
argument_list|(
name|toSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|fromInstructionalOffering
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|,
name|fromInstructionalOffering
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|co
operator|!=
literal|null
condition|)
block|{
name|InstructionalOffering
name|toInstructionalOffering
init|=
name|co
operator|.
name|getInstructionalOffering
argument_list|()
decl_stmt|;
if|if
condition|(
name|toInstructionalOffering
operator|!=
literal|null
condition|)
block|{
name|toInstructionalOffering
operator|.
name|deleteAllClasses
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|toInstructionalOffering
operator|.
name|deleteAllDistributionPreferences
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|toInstructionalOffering
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
operator|(
name|toInstructionalOffering
operator|)
return|;
block|}
block|}
if|if
condition|(
name|sessionHasCourseCatalog
argument_list|(
name|toSession
argument_list|)
condition|)
block|{
return|return
operator|(
name|createToInstructionalOfferingBasedOnCourseCatalog
argument_list|(
name|fromInstructionalOffering
argument_list|,
name|toSession
argument_list|,
name|hibSession
argument_list|)
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|createToInstructionalOfferingFromFromInstructionalOffering
argument_list|(
name|fromInstructionalOffering
argument_list|,
name|toSession
argument_list|,
name|hibSession
argument_list|)
operator|)
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
class|class
name|RollForwardSchedSubpart
block|{
specifier|private
name|SchedulingSubpart
name|fromParentSubpart
decl_stmt|;
specifier|private
name|SchedulingSubpart
name|toParentSubpart
decl_stmt|;
specifier|private
name|SchedulingSubpart
name|fromSubpart
decl_stmt|;
specifier|private
name|SchedulingSubpart
name|toSubpart
decl_stmt|;
specifier|private
name|List
name|fromChildSubparts
decl_stmt|;
specifier|private
name|List
name|toChildSubparts
decl_stmt|;
specifier|private
name|List
name|rollForwardClasses
decl_stmt|;
specifier|public
name|List
name|getFromChildSubparts
parameter_list|()
block|{
return|return
name|fromChildSubparts
return|;
block|}
specifier|public
name|Class_
name|findParentClassMatchingFromParentClass
parameter_list|(
name|Class_
name|fromParentClass
parameter_list|)
block|{
if|if
condition|(
name|getRollForwardClasses
argument_list|()
operator|!=
literal|null
operator|&&
name|getRollForwardClasses
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|RollForwardClass
name|rfc
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|getRollForwardClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|rfc
operator|=
operator|(
name|RollForwardClass
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|rfc
operator|.
name|getFromClass
argument_list|()
operator|.
name|equals
argument_list|(
name|fromParentClass
argument_list|)
condition|)
block|{
return|return
operator|(
name|rfc
operator|.
name|getToClass
argument_list|()
operator|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setFromChildSubparts
parameter_list|(
name|List
name|fromChildSubparts
parameter_list|)
block|{
name|this
operator|.
name|fromChildSubparts
operator|=
name|fromChildSubparts
expr_stmt|;
block|}
specifier|public
name|void
name|addToFromChildSubparts
parameter_list|(
name|SchedulingSubpart
name|fromChildSubpart
parameter_list|)
block|{
if|if
condition|(
name|fromChildSubparts
operator|==
literal|null
condition|)
block|{
name|fromChildSubparts
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
block|}
name|fromChildSubparts
operator|.
name|add
argument_list|(
name|fromChildSubpart
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SchedulingSubpart
name|getFromParentSubpart
parameter_list|()
block|{
return|return
name|fromParentSubpart
return|;
block|}
specifier|public
name|void
name|setFromParentSubpart
parameter_list|(
name|SchedulingSubpart
name|fromParentSubpart
parameter_list|)
block|{
name|this
operator|.
name|fromParentSubpart
operator|=
name|fromParentSubpart
expr_stmt|;
block|}
specifier|public
name|SchedulingSubpart
name|getFromSubpart
parameter_list|()
block|{
return|return
name|fromSubpart
return|;
block|}
specifier|public
name|void
name|setFromSubpart
parameter_list|(
name|SchedulingSubpart
name|fromSubpart
parameter_list|)
block|{
name|this
operator|.
name|fromSubpart
operator|=
name|fromSubpart
expr_stmt|;
block|}
specifier|public
name|List
name|getToChildSubparts
parameter_list|()
block|{
return|return
name|toChildSubparts
return|;
block|}
specifier|public
name|void
name|setToChildSubparts
parameter_list|(
name|List
name|toChildSubparts
parameter_list|)
block|{
name|this
operator|.
name|toChildSubparts
operator|=
name|toChildSubparts
expr_stmt|;
block|}
specifier|public
name|void
name|addToToChildSubparts
parameter_list|(
name|SchedulingSubpart
name|toChildSubpart
parameter_list|)
block|{
if|if
condition|(
name|toChildSubparts
operator|==
literal|null
condition|)
block|{
name|toChildSubparts
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
block|}
name|toChildSubparts
operator|.
name|add
argument_list|(
name|toChildSubpart
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SchedulingSubpart
name|getToParentSubpart
parameter_list|()
block|{
return|return
name|toParentSubpart
return|;
block|}
specifier|public
name|void
name|setToParentSubpart
parameter_list|(
name|SchedulingSubpart
name|toParentSubpart
parameter_list|)
block|{
name|this
operator|.
name|toParentSubpart
operator|=
name|toParentSubpart
expr_stmt|;
block|}
specifier|public
name|SchedulingSubpart
name|getToSubpart
parameter_list|()
block|{
return|return
name|toSubpart
return|;
block|}
specifier|public
name|void
name|setToSubpart
parameter_list|(
name|SchedulingSubpart
name|toSubpart
parameter_list|)
block|{
name|this
operator|.
name|toSubpart
operator|=
name|toSubpart
expr_stmt|;
block|}
specifier|public
name|List
name|getRollForwardClasses
parameter_list|()
block|{
return|return
name|rollForwardClasses
return|;
block|}
specifier|public
name|void
name|setRollForwardClasses
parameter_list|(
name|List
name|rollForwardClasses
parameter_list|)
block|{
name|this
operator|.
name|rollForwardClasses
operator|=
name|rollForwardClasses
expr_stmt|;
block|}
specifier|public
name|void
name|addToRollForwardClasses
parameter_list|(
name|RollForwardClass
name|rollForwardClass
parameter_list|)
block|{
if|if
condition|(
name|rollForwardClasses
operator|==
literal|null
condition|)
block|{
name|rollForwardClasses
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
block|}
name|rollForwardClasses
operator|.
name|add
argument_list|(
name|rollForwardClass
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
class|class
name|RollForwardClass
block|{
specifier|private
name|Class_
name|fromParentClass
decl_stmt|;
specifier|private
name|Class_
name|toParentClass
decl_stmt|;
specifier|private
name|Class_
name|fromClass
decl_stmt|;
specifier|private
name|Class_
name|toClass
decl_stmt|;
specifier|private
name|List
name|fromChildClasses
decl_stmt|;
specifier|private
name|List
name|toChildClasses
decl_stmt|;
specifier|private
name|RollForwardSchedSubpart
name|parentSubpart
decl_stmt|;
specifier|public
name|List
name|getFromChildClasses
parameter_list|()
block|{
return|return
name|fromChildClasses
return|;
block|}
specifier|public
name|void
name|setFromChildClasses
parameter_list|(
name|List
name|lastLikeChildClasses
parameter_list|)
block|{
name|this
operator|.
name|fromChildClasses
operator|=
name|lastLikeChildClasses
expr_stmt|;
block|}
specifier|public
name|void
name|addToLastLikeChildClasses
parameter_list|(
name|Object
name|fromChildClass
parameter_list|)
block|{
if|if
condition|(
name|fromChildClasses
operator|==
literal|null
condition|)
block|{
name|fromChildClasses
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
block|}
name|fromChildClasses
operator|.
name|add
argument_list|(
name|fromChildClass
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Class_
name|getFromClass
parameter_list|()
block|{
return|return
name|fromClass
return|;
block|}
specifier|public
name|void
name|setFromClass
parameter_list|(
name|Class_
name|fromClass
parameter_list|)
block|{
name|this
operator|.
name|fromClass
operator|=
name|fromClass
expr_stmt|;
block|}
specifier|public
name|Class_
name|getFromParentClass
parameter_list|()
block|{
return|return
name|fromParentClass
return|;
block|}
specifier|public
name|void
name|setFromParentClass
parameter_list|(
name|Class_
name|fromParentClass
parameter_list|)
block|{
name|this
operator|.
name|fromParentClass
operator|=
name|fromParentClass
expr_stmt|;
block|}
specifier|public
name|List
name|getToChildClasses
parameter_list|()
block|{
return|return
name|toChildClasses
return|;
block|}
specifier|public
name|void
name|setToChildClasses
parameter_list|(
name|List
name|newChildClasses
parameter_list|)
block|{
name|this
operator|.
name|toChildClasses
operator|=
name|newChildClasses
expr_stmt|;
block|}
specifier|public
name|void
name|addToNewChildClasses
parameter_list|(
name|Class_
name|toChildClass
parameter_list|)
block|{
if|if
condition|(
name|toChildClasses
operator|==
literal|null
condition|)
block|{
name|toChildClasses
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
block|}
name|toChildClasses
operator|.
name|add
argument_list|(
name|toChildClass
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Class_
name|getToClass
parameter_list|()
block|{
return|return
name|toClass
return|;
block|}
specifier|public
name|void
name|setToClass
parameter_list|(
name|Class_
name|toClass
parameter_list|)
block|{
name|this
operator|.
name|toClass
operator|=
name|toClass
expr_stmt|;
block|}
specifier|public
name|Class_
name|getToParentClass
parameter_list|()
block|{
return|return
name|toParentClass
return|;
block|}
specifier|public
name|void
name|setToParentClass
parameter_list|(
name|Class_
name|toParentClass
parameter_list|)
block|{
name|this
operator|.
name|toParentClass
operator|=
name|toParentClass
expr_stmt|;
block|}
specifier|public
name|RollForwardSchedSubpart
name|getParentSubpart
parameter_list|()
block|{
return|return
name|parentSubpart
return|;
block|}
specifier|public
name|void
name|setParentSubpart
parameter_list|(
name|RollForwardSchedSubpart
name|parentSubpart
parameter_list|)
block|{
name|this
operator|.
name|parentSubpart
operator|=
name|parentSubpart
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

