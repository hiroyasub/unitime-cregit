begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomDAO
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|RoomSummaryReportsHelper
block|{
specifier|protected
specifier|static
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|RoomSummaryReportsHelper
parameter_list|(
name|int
name|iMinutesInPeriod
parameter_list|,
name|int
name|iPeriodsInHour
parameter_list|,
name|int
name|iAllDayStartPeriod
parameter_list|,
name|int
name|iAllDayEndPeriod
parameter_list|,
name|int
name|iStandardDayStartPeriod
parameter_list|,
name|int
name|iStandardDayEndPeriod
parameter_list|,
name|int
name|iWeekendDayStartPeriod
parameter_list|,
name|int
name|iWeekendDayEndPeriod
parameter_list|,
name|int
name|iFirstFullHourStartPeriod
parameter_list|,
name|int
name|iLastFullHourStopPeriod
parameter_list|,
name|String
name|iSchema
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
operator|.
name|isOracle
argument_list|()
expr_stmt|;
name|this
operator|.
name|iMinutesInPeriod
operator|=
name|iMinutesInPeriod
expr_stmt|;
name|this
operator|.
name|iPeriodsInHour
operator|=
name|iPeriodsInHour
expr_stmt|;
name|this
operator|.
name|iAllDayStartPeriod
operator|=
name|iAllDayStartPeriod
expr_stmt|;
name|this
operator|.
name|iAllDayEndPeriod
operator|=
name|iAllDayEndPeriod
expr_stmt|;
name|this
operator|.
name|iStandardDayStartPeriod
operator|=
name|iStandardDayStartPeriod
expr_stmt|;
name|this
operator|.
name|iStandardDayEndPeriod
operator|=
name|iStandardDayEndPeriod
expr_stmt|;
name|this
operator|.
name|iWeekendDayStartPeriod
operator|=
name|iWeekendDayStartPeriod
expr_stmt|;
name|this
operator|.
name|iWeekendDayEndPeriod
operator|=
name|iWeekendDayEndPeriod
expr_stmt|;
name|this
operator|.
name|iFirstFullHourStartPeriod
operator|=
name|iFirstFullHourStartPeriod
expr_stmt|;
name|this
operator|.
name|iLastFullHourStopPeriod
operator|=
name|iLastFullHourStopPeriod
expr_stmt|;
name|this
operator|.
name|iSchema
operator|=
name|iSchema
expr_stmt|;
name|this
operator|.
name|iAllDays
operator|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|iWeekDays
operator|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|iAllDays
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|this
operator|.
name|iWeekDays
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|iAllDays
operator|.
name|add
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|this
operator|.
name|iAllDays
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|iSaturday
operator|=
literal|7
expr_stmt|;
block|}
specifier|public
name|RoomSummaryReportsHelper
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|iMinutesInPeriod
operator|=
literal|5
expr_stmt|;
name|this
operator|.
name|iPeriodsInHour
operator|=
literal|12
expr_stmt|;
name|this
operator|.
name|iAllDayStartPeriod
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|iAllDayEndPeriod
operator|=
literal|288
expr_stmt|;
name|this
operator|.
name|iStandardDayStartPeriod
operator|=
literal|90
expr_stmt|;
name|this
operator|.
name|iStandardDayEndPeriod
operator|=
literal|210
expr_stmt|;
name|this
operator|.
name|iWeekendDayStartPeriod
operator|=
literal|90
expr_stmt|;
name|this
operator|.
name|iWeekendDayEndPeriod
operator|=
literal|162
expr_stmt|;
name|this
operator|.
name|iFirstFullHourStartPeriod
operator|=
literal|6
expr_stmt|;
name|this
operator|.
name|iLastFullHourStopPeriod
operator|=
literal|282
expr_stmt|;
name|this
operator|.
name|iSchema
operator|=
literal|"timetable"
expr_stmt|;
comment|//TODO: determine if this is necessary, or set it to the schema for the database in this instance
name|this
operator|.
name|iAllDays
operator|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|iWeekDays
operator|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|iAllDays
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|this
operator|.
name|iWeekDays
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|iAllDays
operator|.
name|add
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|this
operator|.
name|iAllDays
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|iSaturday
operator|=
literal|7
expr_stmt|;
block|}
specifier|private
name|int
name|iMinutesInPeriod
decl_stmt|;
specifier|private
name|int
name|iPeriodsInHour
decl_stmt|;
specifier|private
name|int
name|iAllDayStartPeriod
decl_stmt|;
specifier|private
name|int
name|iAllDayEndPeriod
decl_stmt|;
specifier|private
name|int
name|iStandardDayStartPeriod
decl_stmt|;
specifier|private
name|int
name|iStandardDayEndPeriod
decl_stmt|;
specifier|private
name|int
name|iWeekendDayStartPeriod
decl_stmt|;
specifier|private
name|int
name|iWeekendDayEndPeriod
decl_stmt|;
specifier|private
name|int
name|iFirstFullHourStartPeriod
decl_stmt|;
specifier|private
name|int
name|iLastFullHourStopPeriod
decl_stmt|;
specifier|private
name|String
name|iSchema
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|iAllDays
init|=
literal|null
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|iWeekDays
init|=
literal|null
decl_stmt|;
specifier|private
name|Integer
name|iSaturday
init|=
literal|null
decl_stmt|;
specifier|private
name|Boolean
name|iShowAdditionalPurdueData
decl_stmt|;
specifier|public
name|int
name|getMinutesInPeriod
parameter_list|()
block|{
return|return
name|iMinutesInPeriod
return|;
block|}
specifier|public
name|void
name|setMinutesInPeriod
parameter_list|(
name|int
name|minutesInPeriod
parameter_list|)
block|{
name|this
operator|.
name|iMinutesInPeriod
operator|=
name|minutesInPeriod
expr_stmt|;
block|}
specifier|public
name|int
name|getPeriodsInHour
parameter_list|()
block|{
return|return
name|iPeriodsInHour
return|;
block|}
specifier|public
name|void
name|setPeriodsInHour
parameter_list|(
name|int
name|periodsInHour
parameter_list|)
block|{
name|this
operator|.
name|iPeriodsInHour
operator|=
name|periodsInHour
expr_stmt|;
block|}
specifier|public
name|int
name|getAllDayStartPeriod
parameter_list|()
block|{
return|return
name|iAllDayStartPeriod
return|;
block|}
specifier|public
name|void
name|setAllDayStartPeriod
parameter_list|(
name|int
name|allDayStartPeriod
parameter_list|)
block|{
name|this
operator|.
name|iAllDayStartPeriod
operator|=
name|allDayStartPeriod
expr_stmt|;
block|}
specifier|public
name|int
name|getAllDayEndPeriod
parameter_list|()
block|{
return|return
name|iAllDayEndPeriod
return|;
block|}
specifier|public
name|void
name|setAllDayEndPeriod
parameter_list|(
name|int
name|allDayEndPeriod
parameter_list|)
block|{
name|this
operator|.
name|iAllDayEndPeriod
operator|=
name|allDayEndPeriod
expr_stmt|;
block|}
specifier|public
name|int
name|getStandardDayStartPeriod
parameter_list|()
block|{
return|return
name|iStandardDayStartPeriod
return|;
block|}
specifier|public
name|void
name|setStandardDayStartPeriod
parameter_list|(
name|int
name|standardDayStartPeriod
parameter_list|)
block|{
name|this
operator|.
name|iStandardDayStartPeriod
operator|=
name|standardDayStartPeriod
expr_stmt|;
block|}
specifier|public
name|int
name|getStandardDayEndPeriod
parameter_list|()
block|{
return|return
name|iStandardDayEndPeriod
return|;
block|}
specifier|public
name|void
name|setStandardDayEndPeriod
parameter_list|(
name|int
name|standardDayEndPeriod
parameter_list|)
block|{
name|this
operator|.
name|iStandardDayEndPeriod
operator|=
name|standardDayEndPeriod
expr_stmt|;
block|}
specifier|public
name|int
name|getWeekendDayStartPeriod
parameter_list|()
block|{
return|return
name|iWeekendDayStartPeriod
return|;
block|}
specifier|public
name|void
name|setWeekendDayStartPeriod
parameter_list|(
name|int
name|weekendDayStartPeriod
parameter_list|)
block|{
name|this
operator|.
name|iWeekendDayStartPeriod
operator|=
name|weekendDayStartPeriod
expr_stmt|;
block|}
specifier|public
name|int
name|getWeekendDayEndPeriod
parameter_list|()
block|{
return|return
name|iWeekendDayEndPeriod
return|;
block|}
specifier|public
name|void
name|setWeekendDayEndPeriod
parameter_list|(
name|int
name|weekendDayEndPeriod
parameter_list|)
block|{
name|this
operator|.
name|iWeekendDayEndPeriod
operator|=
name|weekendDayEndPeriod
expr_stmt|;
block|}
specifier|public
name|int
name|getFirstFullHourStartPeriod
parameter_list|()
block|{
return|return
name|iFirstFullHourStartPeriod
return|;
block|}
specifier|public
name|void
name|setFirstFullHourStartPeriod
parameter_list|(
name|int
name|firstFullHourStartPeriod
parameter_list|)
block|{
name|this
operator|.
name|iFirstFullHourStartPeriod
operator|=
name|firstFullHourStartPeriod
expr_stmt|;
block|}
specifier|public
name|int
name|getLastFullHourStopPeriod
parameter_list|()
block|{
return|return
name|iLastFullHourStopPeriod
return|;
block|}
specifier|public
name|void
name|setLastFullHourStopPeriod
parameter_list|(
name|int
name|lastFullHourStopPeriod
parameter_list|)
block|{
name|this
operator|.
name|iLastFullHourStopPeriod
operator|=
name|lastFullHourStopPeriod
expr_stmt|;
block|}
specifier|public
name|String
name|getSchema
parameter_list|()
block|{
return|return
name|iSchema
return|;
block|}
specifier|public
name|void
name|setSchema
parameter_list|(
name|String
name|schema
parameter_list|)
block|{
name|this
operator|.
name|iSchema
operator|=
name|schema
expr_stmt|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|getAllDays
parameter_list|()
block|{
return|return
name|iAllDays
return|;
block|}
specifier|public
name|void
name|setAllDays
parameter_list|(
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|allDays
parameter_list|)
block|{
name|this
operator|.
name|iAllDays
operator|=
name|allDays
expr_stmt|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|getWeekDays
parameter_list|()
block|{
return|return
name|iWeekDays
return|;
block|}
specifier|public
name|void
name|setWeekDays
parameter_list|(
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|weekDays
parameter_list|)
block|{
name|this
operator|.
name|iWeekDays
operator|=
name|weekDays
expr_stmt|;
block|}
specifier|public
name|Integer
name|getSaturday
parameter_list|()
block|{
return|return
name|iSaturday
return|;
block|}
specifier|public
name|void
name|setSaturday
parameter_list|(
name|Integer
name|saturday
parameter_list|)
block|{
name|this
operator|.
name|iSaturday
operator|=
name|saturday
expr_stmt|;
block|}
specifier|public
name|Boolean
name|isShowAdditionalPurdueData
parameter_list|()
block|{
if|if
condition|(
name|iShowAdditionalPurdueData
operator|==
literal|null
condition|)
block|{
name|iShowAdditionalPurdueData
operator|=
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"purdue.room_summary_reports.show_purdue_columns"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|iShowAdditionalPurdueData
return|;
block|}
specifier|public
name|void
name|setShowAdditionalPurdueData
parameter_list|(
name|Boolean
name|showAdditionalPurdueData
parameter_list|)
block|{
name|this
operator|.
name|iShowAdditionalPurdueData
operator|=
name|showAdditionalPurdueData
expr_stmt|;
block|}
specifier|protected
name|void
name|indent
parameter_list|(
name|StringBuffer
name|stringBuffer
parameter_list|,
name|int
name|indentSizeInChars
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indentSizeInChars
condition|;
name|i
operator|++
control|)
block|{
name|stringBuffer
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|newline
parameter_list|(
name|StringBuffer
name|stringBuffer
parameter_list|,
name|int
name|indentSizeInChars
parameter_list|)
block|{
name|stringBuffer
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|indent
argument_list|(
name|stringBuffer
argument_list|,
name|indentSizeInChars
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|getDayOfWeekLabel
parameter_list|(
name|Integer
name|day
parameter_list|)
block|{
name|StringBuffer
name|dayLabel
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|day
operator|==
name|this
operator|.
name|getAllDays
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|dayLabel
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|MSG
operator|.
name|monday
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|day
operator|==
name|this
operator|.
name|getAllDays
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|dayLabel
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|MSG
operator|.
name|tuesday
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|day
operator|==
name|this
operator|.
name|getAllDays
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|dayLabel
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|MSG
operator|.
name|wednesday
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|day
operator|==
name|this
operator|.
name|getAllDays
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
block|{
name|dayLabel
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|MSG
operator|.
name|thursday
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|day
operator|==
name|this
operator|.
name|getAllDays
argument_list|()
operator|.
name|get
argument_list|(
literal|4
argument_list|)
condition|)
block|{
name|dayLabel
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|MSG
operator|.
name|friday
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|day
operator|==
name|this
operator|.
name|getAllDays
argument_list|()
operator|.
name|get
argument_list|(
literal|5
argument_list|)
condition|)
block|{
name|dayLabel
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|MSG
operator|.
name|saturday
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|day
operator|==
name|this
operator|.
name|getAllDays
argument_list|()
operator|.
name|get
argument_list|(
literal|6
argument_list|)
condition|)
block|{
name|dayLabel
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|MSG
operator|.
name|sunday
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|dayLabel
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|protected
name|String
name|getTimeLabel
parameter_list|(
name|int
name|fiveMinutePeriod
parameter_list|,
name|boolean
name|isPretty
parameter_list|)
block|{
name|StringBuffer
name|timeLabel
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|hour
init|=
name|fiveMinutePeriod
operator|/
name|getPeriodsInHour
argument_list|()
decl_stmt|;
name|int
name|minutes
init|=
operator|(
name|fiveMinutePeriod
operator|%
name|getPeriodsInHour
argument_list|()
operator|)
operator|*
name|getMinutesInPeriod
argument_list|()
decl_stmt|;
if|if
condition|(
name|hour
operator|==
literal|0
condition|)
block|{
name|timeLabel
operator|.
name|append
argument_list|(
literal|"12"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|hour
operator|<
literal|10
condition|)
block|{
name|timeLabel
operator|.
name|append
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|timeLabel
operator|.
name|append
argument_list|(
name|hour
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|hour
operator|<
literal|13
condition|)
block|{
name|timeLabel
operator|.
name|append
argument_list|(
name|hour
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|hour
operator|<
literal|22
condition|)
block|{
name|timeLabel
operator|.
name|append
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|timeLabel
operator|.
name|append
argument_list|(
name|hour
operator|-
literal|12
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|timeLabel
operator|.
name|append
argument_list|(
name|hour
operator|-
literal|12
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isPretty
condition|)
block|{
name|timeLabel
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|minutes
operator|<
literal|10
condition|)
block|{
name|timeLabel
operator|.
name|append
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|timeLabel
operator|.
name|append
argument_list|(
name|minutes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|timeLabel
operator|.
name|append
argument_list|(
name|minutes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isPretty
condition|)
block|{
name|timeLabel
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hour
operator|<
literal|12
condition|)
block|{
name|timeLabel
operator|.
name|append
argument_list|(
literal|"am"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|timeLabel
operator|.
name|append
argument_list|(
literal|"pm"
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|timeLabel
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|protected
name|String
name|getDayTimeLabel
parameter_list|(
name|Integer
name|day
parameter_list|,
name|int
name|fiveMinutePeriod
parameter_list|,
name|String
name|labelPrefix
parameter_list|)
block|{
name|StringBuffer
name|dayTime
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|dayTime
operator|.
name|append
argument_list|(
name|labelPrefix
argument_list|)
expr_stmt|;
name|dayTime
operator|.
name|append
argument_list|(
literal|"_"
argument_list|)
expr_stmt|;
name|dayTime
operator|.
name|append
argument_list|(
name|getDayOfWeekLabel
argument_list|(
name|day
argument_list|)
argument_list|)
expr_stmt|;
name|dayTime
operator|.
name|append
argument_list|(
literal|"_"
argument_list|)
expr_stmt|;
name|dayTime
operator|.
name|append
argument_list|(
name|getTimeLabel
argument_list|(
name|fiveMinutePeriod
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|dayTime
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|protected
name|String
name|getPrettyDayTimeLabel
parameter_list|(
name|int
name|order
parameter_list|,
name|Integer
name|day
parameter_list|,
name|int
name|fiveMinutePeriod
parameter_list|)
block|{
name|StringBuffer
name|dayTime
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|order
operator|<
literal|100
condition|)
block|{
name|dayTime
operator|.
name|append
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|order
operator|<
literal|10
condition|)
block|{
name|dayTime
operator|.
name|append
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
block|}
name|dayTime
operator|.
name|append
argument_list|(
name|order
argument_list|)
expr_stmt|;
name|dayTime
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
name|dayTime
operator|.
name|append
argument_list|(
name|getDayOfWeekLabel
argument_list|(
name|day
argument_list|)
argument_list|)
expr_stmt|;
name|dayTime
operator|.
name|append
argument_list|(
literal|"_"
argument_list|)
expr_stmt|;
name|dayTime
operator|.
name|append
argument_list|(
name|getTimeLabel
argument_list|(
name|fiveMinutePeriod
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|dayTime
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|protected
name|void
name|appendSelectedField
parameter_list|(
name|StringBuffer
name|sb
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|boolean
name|hasLeadingComma
parameter_list|,
name|boolean
name|hasTrailingComma
parameter_list|)
block|{
if|if
condition|(
name|hasLeadingComma
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|tableName
argument_list|)
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
operator|.
name|append
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasTrailingComma
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|getEventTypeDecodeCaseStatement
parameter_list|(
name|int
name|startingIndent
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"(case"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
name|startingIndent
operator|+
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when e.event_type = 0 then '"
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlEventTypeClass
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
name|startingIndent
operator|+
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when e.event_type = 1 then '"
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlEventTypeFinalExam
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
name|startingIndent
operator|+
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when e.event_type = 2 then '"
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlEventTypeMidtermExam
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
name|startingIndent
operator|+
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when e.event_type = 3 then '"
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlEventTypeCourseRelated
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
name|startingIndent
operator|+
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when e.event_type = 4 then '"
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlEventTypeSpecialEvent
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
name|startingIndent
operator|+
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when e.event_type = 5 then '"
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlEventTypeRoomNotAvailable
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
name|startingIndent
operator|+
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"end)"
argument_list|)
expr_stmt|;
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|protected
name|String
name|getDayEqualsRestriction
parameter_list|(
name|Integer
name|day
parameter_list|)
block|{
name|StringBuffer
name|dayEquals
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|dayEquals
operator|.
name|append
argument_list|(
literal|"to_char(z.meeting_date, 'D' ) = "
argument_list|)
expr_stmt|;
name|dayEquals
operator|.
name|append
argument_list|(
name|day
argument_list|)
expr_stmt|;
return|return
operator|(
name|dayEquals
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|protected
name|String
name|getDayInRestriction
parameter_list|(
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|days
parameter_list|)
block|{
name|StringBuffer
name|dayIn
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|dayIn
operator|.
name|append
argument_list|(
literal|"to_char(z.meeting_date, 'D' ) in ("
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Integer
name|day
range|:
name|days
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|dayIn
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|dayIn
operator|.
name|append
argument_list|(
name|day
argument_list|)
expr_stmt|;
block|}
name|dayIn
operator|.
name|append
argument_list|(
literal|" )"
argument_list|)
expr_stmt|;
return|return
operator|(
name|dayIn
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|protected
name|String
name|getTimeRestriction
parameter_list|(
name|String
name|first5MinutePeriod
parameter_list|,
name|String
name|last5MinutePeriod
parameter_list|)
block|{
name|StringBuffer
name|timeRestriction
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|timeRestriction
operator|.
name|append
argument_list|(
literal|"z.start_period< "
argument_list|)
expr_stmt|;
name|timeRestriction
operator|.
name|append
argument_list|(
name|last5MinutePeriod
argument_list|)
expr_stmt|;
name|timeRestriction
operator|.
name|append
argument_list|(
literal|" and z.stop_period> "
argument_list|)
expr_stmt|;
name|timeRestriction
operator|.
name|append
argument_list|(
name|first5MinutePeriod
argument_list|)
expr_stmt|;
return|return
operator|(
name|timeRestriction
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|protected
name|void
name|buildElse0End
parameter_list|(
name|StringBuffer
name|stringBuffer
parameter_list|,
name|int
name|indentSizeInChars
parameter_list|)
block|{
name|indent
argument_list|(
name|stringBuffer
argument_list|,
name|indentSizeInChars
argument_list|)
expr_stmt|;
name|stringBuffer
operator|.
name|append
argument_list|(
literal|"else 0"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|stringBuffer
argument_list|,
name|indentSizeInChars
argument_list|)
expr_stmt|;
name|stringBuffer
operator|.
name|append
argument_list|(
literal|"end)"
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|String
name|getSummaryCalculationForPeriod
parameter_list|(
name|String
name|first5MinutePeriod
parameter_list|,
name|String
name|last5MinutePeriod
parameter_list|,
name|String
name|additionalQueryField
parameter_list|)
function_decl|;
specifier|protected
name|void
name|buildWhenThen
parameter_list|(
name|StringBuffer
name|stringBuffer
parameter_list|,
name|String
name|dayRestriction
parameter_list|,
name|String
name|first5MinutePeriod
parameter_list|,
name|String
name|last5MinutePeriod
parameter_list|,
name|String
name|additionalQueryField
parameter_list|)
block|{
name|indent
argument_list|(
name|stringBuffer
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|stringBuffer
operator|.
name|append
argument_list|(
literal|"when "
argument_list|)
expr_stmt|;
name|stringBuffer
operator|.
name|append
argument_list|(
name|dayRestriction
argument_list|)
expr_stmt|;
name|stringBuffer
operator|.
name|append
argument_list|(
literal|" and "
argument_list|)
expr_stmt|;
name|stringBuffer
operator|.
name|append
argument_list|(
name|getTimeRestriction
argument_list|(
name|first5MinutePeriod
argument_list|,
name|last5MinutePeriod
argument_list|)
argument_list|)
expr_stmt|;
name|stringBuffer
operator|.
name|append
argument_list|(
literal|" then"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|stringBuffer
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|stringBuffer
operator|.
name|append
argument_list|(
name|getSummaryCalculationForPeriod
argument_list|(
name|first5MinutePeriod
argument_list|,
name|last5MinutePeriod
argument_list|,
name|additionalQueryField
argument_list|)
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|stringBuffer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|buildSum
parameter_list|(
name|StringBuffer
name|stringBuffer
parameter_list|,
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|restrictionsArray
parameter_list|,
name|boolean
name|leadingComma
parameter_list|,
name|String
name|additionalQueryField
parameter_list|)
block|{
if|if
condition|(
name|leadingComma
condition|)
block|{
name|stringBuffer
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|newline
argument_list|(
name|stringBuffer
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|stringBuffer
operator|.
name|append
argument_list|(
literal|"sum(case"
argument_list|)
expr_stmt|;
for|for
control|(
name|ArrayList
argument_list|<
name|String
argument_list|>
name|restrictions
range|:
name|restrictionsArray
control|)
block|{
name|newline
argument_list|(
name|stringBuffer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|buildWhenThen
argument_list|(
name|stringBuffer
argument_list|,
name|restrictions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|restrictions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|restrictions
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|additionalQueryField
argument_list|)
expr_stmt|;
block|}
name|buildElse0End
argument_list|(
name|stringBuffer
argument_list|,
literal|12
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|buildSumWithAsLabel
parameter_list|(
name|StringBuffer
name|stringBuffer
parameter_list|,
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|restrictionsArray
parameter_list|,
name|String
name|sumName
parameter_list|,
name|boolean
name|leadingComma
parameter_list|,
name|String
name|additionalQueryField
parameter_list|)
block|{
name|buildSum
argument_list|(
name|stringBuffer
argument_list|,
name|restrictionsArray
argument_list|,
name|leadingComma
argument_list|,
name|additionalQueryField
argument_list|)
expr_stmt|;
name|indent
argument_list|(
name|stringBuffer
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|stringBuffer
operator|.
name|append
argument_list|(
literal|"as "
argument_list|)
expr_stmt|;
name|stringBuffer
operator|.
name|append
argument_list|(
name|sumName
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|buildStandardWeekdayHoursSum
parameter_list|(
name|StringBuffer
name|stringBuffer
parameter_list|,
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|weekdays
parameter_list|,
name|boolean
name|leadingComma
parameter_list|,
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|headerRow
parameter_list|,
name|LabelFieldPair
name|labelFieldPair
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|restrictionsArray
init|=
name|createNewRestrictionsArray
argument_list|()
decl_stmt|;
name|addToRestrictionsArray
argument_list|(
name|restrictionsArray
argument_list|,
name|getDayInRestriction
argument_list|(
name|weekdays
argument_list|)
argument_list|,
name|getStandardDayStartPeriod
argument_list|()
argument_list|,
name|getStandardDayEndPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|buildSumWithAsLabel
argument_list|(
name|stringBuffer
argument_list|,
name|restrictionsArray
argument_list|,
operator|(
name|labelFieldPair
operator|.
name|getLabel
argument_list|()
operator|+
name|MESSAGES
operator|.
name|utilSqlTotalStandardWeekdayHoursSuffix
argument_list|()
operator|)
argument_list|,
name|leadingComma
argument_list|,
name|labelFieldPair
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|headerRow
operator|.
name|add
argument_list|(
name|labelFieldPair
operator|.
name|getLabel
argument_list|()
operator|+
name|MESSAGES
operator|.
name|utilSqlTotalStandardWeekdayHoursSuffix
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|buildStandardHoursSum
parameter_list|(
name|StringBuffer
name|stringBuffer
parameter_list|,
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|weekdays
parameter_list|,
name|Integer
name|saturday
parameter_list|,
name|boolean
name|leadingComma
parameter_list|,
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|headerRow
parameter_list|,
name|LabelFieldPair
name|labelFieldPair
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|restrictionsArray
init|=
name|createNewRestrictionsArray
argument_list|()
decl_stmt|;
name|addToRestrictionsArray
argument_list|(
name|restrictionsArray
argument_list|,
name|getDayInRestriction
argument_list|(
name|weekdays
argument_list|)
argument_list|,
name|getStandardDayStartPeriod
argument_list|()
argument_list|,
name|getStandardDayEndPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|addToRestrictionsArray
argument_list|(
name|restrictionsArray
argument_list|,
name|getDayEqualsRestriction
argument_list|(
name|saturday
argument_list|)
argument_list|,
name|getWeekendDayStartPeriod
argument_list|()
argument_list|,
name|getWeekendDayEndPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|buildSumWithAsLabel
argument_list|(
name|stringBuffer
argument_list|,
name|restrictionsArray
argument_list|,
operator|(
name|labelFieldPair
operator|.
name|getLabel
argument_list|()
operator|+
name|MESSAGES
operator|.
name|utilSqlTotalStandardHoursSuffix
argument_list|()
operator|)
argument_list|,
name|leadingComma
argument_list|,
name|labelFieldPair
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|headerRow
operator|.
name|add
argument_list|(
name|labelFieldPair
operator|.
name|getLabel
argument_list|()
operator|+
name|MESSAGES
operator|.
name|utilSqlTotalStandardHoursSuffix
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|buildAllHoursSum
parameter_list|(
name|StringBuffer
name|sb
parameter_list|,
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|alldays
parameter_list|,
name|boolean
name|leadingComma
parameter_list|,
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|headerRow
parameter_list|,
name|LabelFieldPair
name|labelFieldPair
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|restrictionsArray
init|=
name|createNewRestrictionsArray
argument_list|()
decl_stmt|;
name|addToRestrictionsArray
argument_list|(
name|restrictionsArray
argument_list|,
name|getDayInRestriction
argument_list|(
name|alldays
argument_list|)
argument_list|,
name|getAllDayStartPeriod
argument_list|()
argument_list|,
name|getAllDayEndPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|buildSumWithAsLabel
argument_list|(
name|sb
argument_list|,
name|restrictionsArray
argument_list|,
operator|(
name|labelFieldPair
operator|.
name|getLabel
argument_list|()
operator|+
name|MESSAGES
operator|.
name|utilSqlTotalAllHoursSuffix
argument_list|()
operator|)
argument_list|,
name|leadingComma
argument_list|,
name|labelFieldPair
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|headerRow
operator|.
name|add
argument_list|(
name|labelFieldPair
operator|.
name|getLabel
argument_list|()
operator|+
name|MESSAGES
operator|.
name|utilSqlTotalAllHoursSuffix
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|createNewRestrictionsArray
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
return|;
block|}
specifier|protected
name|void
name|addToRestrictionsArray
parameter_list|(
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|restrictionsArray
parameter_list|,
name|String
name|restriction
parameter_list|,
name|int
name|firstPeriod
parameter_list|,
name|int
name|lastPeriod
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|restrictions
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|restrictions
operator|.
name|add
argument_list|(
name|restriction
argument_list|)
expr_stmt|;
name|restrictions
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|firstPeriod
argument_list|)
argument_list|)
expr_stmt|;
name|restrictions
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|lastPeriod
argument_list|)
argument_list|)
expr_stmt|;
name|restrictionsArray
operator|.
name|add
argument_list|(
name|restrictions
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|void
name|addSumStatementToStringBuffer
parameter_list|(
name|StringBuffer
name|sb
parameter_list|,
name|String
name|sum
parameter_list|,
name|String
name|label
parameter_list|,
name|boolean
name|leadingComma
parameter_list|)
function_decl|;
specifier|protected
name|void
name|buildDayOfWeekTimeOfDaySums
parameter_list|(
name|StringBuffer
name|sb
parameter_list|,
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|days
parameter_list|,
name|boolean
name|leadingComma
parameter_list|,
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|headerRow
parameter_list|,
name|boolean
name|includeDayOfWkTimeOfDayInHeaderRow
parameter_list|,
name|LabelFieldPair
name|labelFieldPair
parameter_list|,
name|boolean
name|isFirstDayTime
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|restrictionsArray
init|=
literal|null
decl_stmt|;
name|boolean
name|useComma
init|=
name|leadingComma
decl_stmt|;
name|StringBuffer
name|sbSum
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Integer
name|day
range|:
name|days
control|)
block|{
name|restrictionsArray
operator|=
name|createNewRestrictionsArray
argument_list|()
expr_stmt|;
name|addToRestrictionsArray
argument_list|(
name|restrictionsArray
argument_list|,
name|getDayEqualsRestriction
argument_list|(
name|day
argument_list|)
argument_list|,
name|getAllDayStartPeriod
argument_list|()
argument_list|,
name|getFirstFullHourStartPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|label
init|=
name|getDayTimeLabel
argument_list|(
name|day
argument_list|,
name|getAllDayStartPeriod
argument_list|()
argument_list|,
name|labelFieldPair
operator|.
name|getLabel
argument_list|()
argument_list|)
decl_stmt|;
name|sbSum
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|buildSum
argument_list|(
name|sbSum
argument_list|,
name|restrictionsArray
argument_list|,
literal|false
argument_list|,
name|labelFieldPair
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|addSumStatementToStringBuffer
argument_list|(
name|sb
argument_list|,
name|sbSum
operator|.
name|toString
argument_list|()
argument_list|,
name|label
argument_list|,
name|useComma
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|useComma
condition|)
block|{
name|useComma
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|includeDayOfWkTimeOfDayInHeaderRow
condition|)
block|{
name|headerRow
operator|.
name|add
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
name|int
name|startPeriod
init|=
name|getFirstFullHourStartPeriod
argument_list|()
decl_stmt|;
while|while
condition|(
name|startPeriod
operator|<
name|getLastFullHourStopPeriod
argument_list|()
condition|)
block|{
name|int
name|stopPeriod
init|=
name|startPeriod
operator|+
name|getPeriodsInHour
argument_list|()
decl_stmt|;
name|restrictionsArray
operator|=
name|createNewRestrictionsArray
argument_list|()
expr_stmt|;
name|addToRestrictionsArray
argument_list|(
name|restrictionsArray
argument_list|,
name|getDayEqualsRestriction
argument_list|(
name|day
argument_list|)
argument_list|,
name|startPeriod
argument_list|,
name|stopPeriod
argument_list|)
expr_stmt|;
name|label
operator|=
name|getDayTimeLabel
argument_list|(
name|day
argument_list|,
name|startPeriod
argument_list|,
name|labelFieldPair
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|sbSum
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|buildSum
argument_list|(
name|sbSum
argument_list|,
name|restrictionsArray
argument_list|,
literal|false
argument_list|,
name|labelFieldPair
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|addSumStatementToStringBuffer
argument_list|(
name|sb
argument_list|,
name|sbSum
operator|.
name|toString
argument_list|()
argument_list|,
name|label
argument_list|,
name|useComma
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeDayOfWkTimeOfDayInHeaderRow
condition|)
block|{
name|headerRow
operator|.
name|add
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
name|startPeriod
operator|=
name|stopPeriod
expr_stmt|;
block|}
name|restrictionsArray
operator|=
name|createNewRestrictionsArray
argument_list|()
expr_stmt|;
name|addToRestrictionsArray
argument_list|(
name|restrictionsArray
argument_list|,
name|getDayEqualsRestriction
argument_list|(
name|day
argument_list|)
argument_list|,
name|getLastFullHourStopPeriod
argument_list|()
argument_list|,
name|getAllDayEndPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|label
operator|=
name|getDayTimeLabel
argument_list|(
name|day
argument_list|,
name|getLastFullHourStopPeriod
argument_list|()
argument_list|,
name|labelFieldPair
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|sbSum
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|buildSum
argument_list|(
name|sbSum
argument_list|,
name|restrictionsArray
argument_list|,
literal|false
argument_list|,
name|labelFieldPair
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|addSumStatementToStringBuffer
argument_list|(
name|sb
argument_list|,
name|sbSum
operator|.
name|toString
argument_list|()
argument_list|,
name|label
argument_list|,
name|useComma
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeDayOfWkTimeOfDayInHeaderRow
condition|)
block|{
name|headerRow
operator|.
name|add
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|includeDayOfWkTimeOfDayInHeaderRow
condition|)
block|{
if|if
condition|(
name|isFirstDayTime
condition|)
block|{
name|headerRow
operator|.
name|add
argument_list|(
name|MESSAGES
operator|.
name|utilSqlDayTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|headerRow
operator|.
name|add
argument_list|(
name|labelFieldPair
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|getUnPivotAsStatement
parameter_list|(
name|int
name|order
parameter_list|,
name|Integer
name|day
parameter_list|,
name|int
name|period
parameter_list|,
name|boolean
name|leadingComma
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|dayTimeLabelPrefixes
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|leadingComma
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" ( "
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|dayTimeLabelPrefix
range|:
name|dayTimeLabelPrefixes
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|getDayTimeLabel
argument_list|(
name|day
argument_list|,
name|period
argument_list|,
name|dayTimeLabelPrefix
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" ) as '"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getPrettyDayTimeLabel
argument_list|(
name|order
argument_list|,
name|day
argument_list|,
name|period
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|protected
name|String
name|getUnPivot
parameter_list|(
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|allDays
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|newColumns
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|dayTimeLabelPrefixes
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"unpivot ("
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"( "
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|newColumn
range|:
name|newColumns
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|newColumn
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" )"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"for "
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlDayTime
argument_list|()
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"in ("
argument_list|)
expr_stmt|;
name|first
operator|=
literal|true
expr_stmt|;
name|int
name|periodCount
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Integer
name|day
range|:
name|allDays
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|getUnPivotAsStatement
argument_list|(
name|periodCount
argument_list|,
name|day
argument_list|,
name|getAllDayStartPeriod
argument_list|()
argument_list|,
operator|!
name|first
argument_list|,
name|dayTimeLabelPrefixes
argument_list|)
argument_list|)
expr_stmt|;
name|periodCount
operator|=
name|periodCount
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|int
name|startPeriod
init|=
name|getFirstFullHourStartPeriod
argument_list|()
decl_stmt|;
while|while
condition|(
name|startPeriod
operator|<
name|getLastFullHourStopPeriod
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|getUnPivotAsStatement
argument_list|(
name|periodCount
argument_list|,
name|day
argument_list|,
name|startPeriod
argument_list|,
operator|!
name|first
argument_list|,
name|dayTimeLabelPrefixes
argument_list|)
argument_list|)
expr_stmt|;
name|startPeriod
operator|=
name|startPeriod
operator|+
name|getPeriodsInHour
argument_list|()
expr_stmt|;
name|periodCount
operator|=
name|periodCount
operator|+
literal|1
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|getUnPivotAsStatement
argument_list|(
name|periodCount
argument_list|,
name|day
argument_list|,
name|getLastFullHourStopPeriod
argument_list|()
argument_list|,
operator|!
name|first
argument_list|,
name|dayTimeLabelPrefixes
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|protected
name|String
name|getCalculationForCountOfDayOfWeek
parameter_list|(
name|String
name|meetingDateStr
parameter_list|,
name|String
name|firstDateStr
parameter_list|,
name|String
name|lastDateStr
parameter_list|,
name|boolean
name|inclusiveOfEndDate
parameter_list|,
name|int
name|startingIndentSize
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"floor(("
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|lastDateStr
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" - "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|firstDateStr
argument_list|)
expr_stmt|;
if|if
condition|(
name|inclusiveOfEndDate
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" + 1"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|") / 7) * 1.0 + "
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
name|startingIndentSize
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"(case"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
name|startingIndentSize
operator|+
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when mod(("
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|lastDateStr
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" - "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|firstDateStr
argument_list|)
expr_stmt|;
if|if
condition|(
name|inclusiveOfEndDate
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" + 1"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"), 7)> 0 "
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
name|startingIndentSize
operator|+
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"then "
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
name|startingIndentSize
operator|+
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"(case"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
name|startingIndentSize
operator|+
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when to_char("
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|meetingDateStr
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", 'd')>= to_char("
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|firstDateStr
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", 'd')"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
name|startingIndentSize
operator|+
literal|16
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"and to_char("
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|meetingDateStr
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", 'd')<= (to_char("
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|firstDateStr
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", 'd') + (mod(("
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|lastDateStr
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" - "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|firstDateStr
argument_list|)
expr_stmt|;
if|if
condition|(
name|inclusiveOfEndDate
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" + 1"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"), 7) - 1 ))"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
name|startingIndentSize
operator|+
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"then 1.0"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
name|startingIndentSize
operator|+
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"else 0.0"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
name|startingIndentSize
operator|+
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"end )"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
name|startingIndentSize
operator|+
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"else 0.0"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
name|startingIndentSize
operator|+
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"end)"
argument_list|)
expr_stmt|;
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|protected
name|String
name|getCampusRegionSubQuery
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"select listagg (rg.name, ' ') within group ( order by rg.name) from "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|".room_group_room rgr inner join "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|".room_group rg on rg.uniqueid = rgr.room_group_id and rg.department_id is null and rg.abbv in ( 'North', 'Central', 'South', 'Village', 'Remote' ) where rgr.room_id = r.uniqueId"
argument_list|)
expr_stmt|;
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|protected
name|String
name|getLLRandLALRsubQuery
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"select listagg ((case when d.dept_code = '1977' then 'Large Active Learn Room' when d.dept_code = '1994' then 'Large Lecture Room' else null end) , ' ') within group ( order by d.dept_code) from "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|".room_dept rd inner join "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|".department d on d.uniqueid = rd.department_id and d.dept_code in ( '1977', '1994' ) where rd.room_id = r.uniqueId"
argument_list|)
expr_stmt|;
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|protected
name|String
name|getClassroomSubTypeSubQuery
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"select listagg ((case when d.dept_code = '1975' then 'Active Learn Room' when d.dept_code = '1979' then 'Traditional Classroom' else null end) , ' ') within group ( order by d.dept_code) from "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|".room_dept rd inner join "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|".department d on d.uniqueid = rd.department_id and d.dept_code in ( '1975', '1979' ) where rd.room_id = r.uniqueId"
argument_list|)
expr_stmt|;
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|protected
name|String
name|getTraditionalUtilizationCheck
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"e.event_type in (0, 1, 2, 3) and m.meeting_date>= sess.session_begin_date_time and m.meeting_date< sess.exam_begin_date"
argument_list|)
expr_stmt|;
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|protected
name|String
name|getFinalExamUtilizationCheck
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"e.event_type = 1 and m.meeting_date>= sess.exam_begin_date and m.meeting_date<= sess.session_end_date_time"
argument_list|)
expr_stmt|;
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|protected
name|String
name|getUtilizationTypeCaseStatement
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"case"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getTraditionalUtilizationCheck
argument_list|()
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"then '"
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlUtilizationTypeTraditional
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"' -- classes = divide by 15.0 for Summer and Fall, summer divide by number of occurances of each day of the week in the term."
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getFinalExamUtilizationCheck
argument_list|()
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"then '"
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlUtilizationTypeFinalExamsWeek
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"' -- final exams = divide by 1.0"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"else '"
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlUtilizationTypeSpecialEvent
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"' -- events = divide by number of occurances of the day of the week between the event start date and the event end date"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"end"
argument_list|)
expr_stmt|;
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|protected
name|String
name|getWeeksDivisorCaseStatement
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"case"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getTraditionalUtilizationCheck
argument_list|()
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"then"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"(case"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when sess.academic_term = 'Summer'"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"then "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getCalculationForCountOfDayOfWeek
argument_list|(
literal|"m.meeting_date"
argument_list|,
literal|"sess.session_begin_date_time"
argument_list|,
literal|"sess.exam_begin_date"
argument_list|,
literal|false
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"else 15.0"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"end )"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getFinalExamUtilizationCheck
argument_list|()
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"then "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getCalculationForCountOfDayOfWeek
argument_list|(
literal|"m.meeting_date"
argument_list|,
literal|"sess.exam_begin_date"
argument_list|,
literal|"sess.session_end_date_time"
argument_list|,
literal|true
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"else "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getCalculationForCountOfDayOfWeek
argument_list|(
literal|"m.meeting_date"
argument_list|,
literal|"sess.event_begin_date"
argument_list|,
literal|"sess.event_end_date"
argument_list|,
literal|true
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"end"
argument_list|)
expr_stmt|;
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|protected
name|String
name|getSeatsRequestedCaseStatement
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"case"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when e.event_type = 0"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"then"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"(select c.expected_capacity from "
argument_list|)
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".class_ c where c.uniqueid = e.class_id)"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when e.event_type in (1, 2)"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"then "
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"case when"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"e.max_capacity> "
argument_list|)
expr_stmt|;
name|appendExamsSeatsUsedQuery
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"then"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"e.max_capacity"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"else"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|appendExamsSeatsUsedQuery
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"end"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when e.event_type = 3"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"then "
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"(select count (distinct s.uniqueid)"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"from "
argument_list|)
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".related_course_info rci, "
argument_list|)
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".student s "
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"inner join "
argument_list|)
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".student_class_enrl sce on sce.student_id = s.uniqueid"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"inner join "
argument_list|)
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".class_ c on c.uniqueid = sce.class_id"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"inner join "
argument_list|)
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".scheduling_subpart ss on ss.uniqueid = c.subpart_id"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"inner join "
argument_list|)
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".instr_offering_config ioc on ioc.uniqueid = ss.config_id"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"inner join "
argument_list|)
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".course_offering co on co.uniqueid = sce.course_offering_id"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"inner join "
argument_list|)
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".instructional_offering io on io.uniqueid = co.instr_offr_id"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"where rci.event_id = e.uniqueid"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    and ((rci.owner_type = 3 and rci.owner_id = c.uniqueid)"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"	or (rci.owner_type = 2 and rci.owner_id = ioc.uniqueid)"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"	or (rci.owner_type = 1 and rci.owner_id = co.uniqueid)"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"	or (rci.owner_type = 0 and rci.owner_id = io.uniqueid)))"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"else"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"(case"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when e.max_capacity is not null"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"then "
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"e.max_capacity"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when e.min_capacity is not null"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"then "
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"e.min_capacity"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"else 0 "
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"end )"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"end"
argument_list|)
expr_stmt|;
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|protected
name|void
name|appendExamsSeatsUsedQuery
parameter_list|(
name|StringBuffer
name|sb
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"(select count (distinct s.uniqueid)"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"from "
argument_list|)
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".exam ex"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"inner join "
argument_list|)
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".exam_owner eo on eo.exam_id = ex.uniqueid, "
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".student s "
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"inner join "
argument_list|)
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".student_class_enrl sce on sce.student_id = s.uniqueid"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"inner join "
argument_list|)
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".class_ c on c.uniqueid = sce.class_id"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"inner join "
argument_list|)
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".scheduling_subpart ss on ss.uniqueid = c.subpart_id"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"inner join "
argument_list|)
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".instr_offering_config ioc on ioc.uniqueid = ss.config_id"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"inner join "
argument_list|)
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".course_offering co on co.uniqueid = sce.course_offering_id"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"inner join "
argument_list|)
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".instructional_offering io on io.uniqueid = co.instr_offr_id"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"where ex.uniqueid = e.exam_id"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"and s.session_id = ex.session_id "
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"and ((eo.owner_type = 3 and eo.owner_id = c.uniqueid)"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"or (eo.owner_type = 2 and eo.owner_id = ioc.uniqueid)"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"or (eo.owner_type = 1 and eo.owner_id = co.uniqueid)"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"or (eo.owner_type = 0 and eo.owner_id = io.uniqueid)"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"))"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|getSeatsUsedCaseStatement
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"case"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when e.event_type = 0"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"then"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"(select count (distinct stu.uniqueid) from "
argument_list|)
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".student stu inner join "
argument_list|)
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".student_class_enrl stu_enrl on stu_enrl.student_id = stu.uniqueid and stu_enrl.class_id = e.class_id)"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when e.event_type in (1, 2)"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"then "
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|appendExamsSeatsUsedQuery
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when e.event_type = 3"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"then "
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"(select count (distinct s.uniqueid)"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"from "
argument_list|)
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".related_course_info rci, "
argument_list|)
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".student s "
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"inner join "
argument_list|)
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".student_class_enrl sce on sce.student_id = s.uniqueid"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"inner join "
argument_list|)
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".class_ c on c.uniqueid = sce.class_id"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"inner join "
argument_list|)
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".scheduling_subpart ss on ss.uniqueid = c.subpart_id"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"inner join "
argument_list|)
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".instr_offering_config ioc on ioc.uniqueid = ss.config_id"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"inner join "
argument_list|)
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".course_offering co on co.uniqueid = sce.course_offering_id"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"inner join "
argument_list|)
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".instructional_offering io on io.uniqueid = co.instr_offr_id"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"where rci.event_id = e.uniqueid"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    and ((rci.owner_type = 3 and rci.owner_id = c.uniqueid)"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"	or (rci.owner_type = 2 and rci.owner_id = ioc.uniqueid)"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"	or (rci.owner_type = 1 and rci.owner_id = co.uniqueid)"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"	or (rci.owner_type = 0 and rci.owner_id = io.uniqueid)))"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"else"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"(case"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when e.max_capacity is not null"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"then "
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"e.max_capacity"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when e.min_capacity is not null"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"then "
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"e.min_capacity"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"else 0 "
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"end )"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"end"
argument_list|)
expr_stmt|;
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|protected
specifier|abstract
name|String
name|getBaseQueryAdditionalSelectColumns
parameter_list|()
function_decl|;
specifier|protected
name|String
name|getNumRoomsCalculation
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"(select count(distinct r.uniqueid)"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"from "
argument_list|)
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".meeting om"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"inner join "
argument_list|)
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".room oth_r on oth_r.session_id = sess.uniqueid"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"     and oth_r.permanent_id = om.location_perm_id"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" where om.event_id = m.event_id"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"and om.meeting_date = m.meeting_date"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"and om.start_period = m.start_period"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"and om.stop_period = m.stop_period"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|") as nbr_rooms"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|String
name|getBaseQuerySelectClause
parameter_list|(
name|boolean
name|includeSubjectArea
parameter_list|,
name|boolean
name|includeDept
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"select distinct sess.academic_initiative as "
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlAcademicInitiative
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"sess.academic_term as "
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlAcademicTerm
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"sess.academic_year as "
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlAcademicYear
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"b.abbreviation as "
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlBuilding
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"r.uniqueid as room_id,"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"r.room_number as "
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoom
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"rt.label as "
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoomType
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"r.capacity as "
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoomSize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|isShowAdditionalPurdueData
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"( "
argument_list|)
operator|.
name|append
argument_list|(
name|getCampusRegionSubQuery
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" ) as "
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlCampusRegion
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"( "
argument_list|)
operator|.
name|append
argument_list|(
name|getLLRandLALRsubQuery
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" ) as "
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlLlrLalrPool
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"( "
argument_list|)
operator|.
name|append
argument_list|(
name|getClassroomSubTypeSubQuery
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" ) as "
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlClassroomSubtype
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"e.event_type as "
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlEventType
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"( "
argument_list|)
operator|.
name|append
argument_list|(
name|getEventTypeDecodeCaseStatement
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" ) as "
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlEventTypeDescription
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"( "
argument_list|)
operator|.
name|append
argument_list|(
name|getUtilizationTypeCaseStatement
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" ) as "
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlUtilizationType
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"( "
argument_list|)
operator|.
name|append
argument_list|(
name|getWeeksDivisorCaseStatement
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" ) as weeks_divisor_for_day_of_week,"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"m.meeting_date,"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"m.start_period,"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"m.stop_period,"
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeDept
condition|)
block|{
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" ( "
argument_list|)
operator|.
name|append
argument_list|(
name|ApplicationProperty
operator|.
name|ExternalCourseDepartmentCodeLookupSQL
operator|.
name|value
argument_list|()
operator|.
name|replace
argument_list|(
literal|"%SCHEMA%"
argument_list|,
name|getSchema
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" ) as "
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlDepartment
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeSubjectArea
condition|)
block|{
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"sa.subject_area_abbreviation as "
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlSubject
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|getBaseQueryAdditionalSelectColumns
argument_list|()
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getNumRoomsCalculation
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|protected
name|String
name|getBaseQueryFromClause
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"from "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|".sessions sess"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"inner join "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|".room r on r.session_id = sess.uniqueid"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"inner join "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|".building b on b.uniqueid = r.building_id"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"inner join "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|".room_type rt on rt.uniqueid = r.room_type"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"inner join "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|".meeting m on m.meeting_date>= sess.event_begin_date and m.meeting_date<= sess.event_end_date and m.approval_status = 1"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"inner join "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|".event e on e.uniqueId = m.event_id"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"left outer join "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|".class_ c on c.uniqueid = e.class_id"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"left outer join "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|".scheduling_subpart ss on ss.uniqueid = c.subpart_id"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"left outer join "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|".itype_desc i on i.itype = ss.itype"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"left outer join "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|".instr_offering_config ioc on ioc.uniqueId = ss.config_id"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"left outer join "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|".instructional_offering io on io.uniqueid = ioc.instr_offr_id"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"left outer join "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|".course_offering co on co.instr_offr_id = io.uniqueid"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"left outer join "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|".subject_area sa on sa.uniqueid = co.subject_area_id"
argument_list|)
expr_stmt|;
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|protected
name|String
name|getBaseQueryWhereClause
parameter_list|(
name|String
name|campus
parameter_list|,
name|String
name|year
parameter_list|,
name|String
name|term
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"where sess.academic_Initiative = '"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|campus
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"and sess.academic_year = '"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|year
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"' "
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"and sess.academic_Term = '"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"' "
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"--  and e.event_type = 0"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"--  and m.meeting_date>= sess.session_begin_date_time and m.meeting_date<= sess.classes_end_date_time"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"and r.permanent_id = m.location_perm_id"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" and (c.uniqueId is null or (c.expected_capacity> 0 or 0< (select count(cstu_enrl.uniqueid) from "
argument_list|)
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".student_class_enrl cstu_enrl where cstu_enrl.class_id = c.uniqueid)))"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"and (c.uniqueId is null or c.nbr_rooms is not null)"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"and (c.uniqueId is null or c.nbr_rooms> 0)"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"and (sa.subject_area_abbreviation is null or sa.subject_area_abbreviation != 'REG')"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"and (co.uniqueId is null or co.is_Control = 1)"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"and 0 = ( select count(1) from "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|".course_type ct where ct.uniqueid = co.course_type_id and ct.reference in ( 'Fake', 'Not-Available') )"
argument_list|)
expr_stmt|;
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|protected
name|String
name|getBaseQuery
parameter_list|(
name|String
name|campus
parameter_list|,
name|String
name|year
parameter_list|,
name|String
name|term
parameter_list|,
name|boolean
name|includeSubjectArea
parameter_list|,
name|boolean
name|includeDept
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getBaseQuerySelectClause
argument_list|(
name|includeSubjectArea
argument_list|,
name|includeDept
argument_list|)
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getBaseQueryFromClause
argument_list|()
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getBaseQueryWhereClause
argument_list|(
name|campus
argument_list|,
name|year
argument_list|,
name|term
argument_list|)
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|protected
name|String
name|getCapacityRangeCase
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"(case"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when z."
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoomSize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"<= 0 then '0'"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when z."
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoomSize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"> 0 and z."
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoomSize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"<= 20 then '1 to 20'"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when z."
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoomSize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"> 20 and z."
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoomSize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"<= 30 then '21 to 30'"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when z."
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoomSize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"> 30 and z."
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoomSize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"<= 40 then '31 to 40'"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when z."
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoomSize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"> 40 and z."
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoomSize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"<= 60 then '41 to 60'"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when z."
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoomSize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"> 60 and z."
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoomSize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"<= 100 then '61 to 100'"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when z."
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoomSize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"> 100 and z."
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoomSize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"<= 150 then '101 to 150'"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when z."
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoomSize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"> 150 and z."
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoomSize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"<= 200 then '151 to 200'"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when z."
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoomSize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"> 200 and z."
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoomSize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"<= 250 then '201 to 250'"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when z."
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoomSize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"> 250 and z."
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoomSize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"<= 300 then '251 to 300'"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when z."
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoomSize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"> 300 and z."
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoomSize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"<= 350 then '301 to 350'"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when z."
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoomSize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"> 350 and z."
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoomSize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"<= 500 then '351 to 500'"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"when z."
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoomSize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"> 500 then 'Greater than 500'"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"end)"
argument_list|)
expr_stmt|;
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|protected
specifier|abstract
name|ArrayList
argument_list|<
name|LabelFieldPair
argument_list|>
name|getLabelPrefixToAdditionalQueryFieldMapping
parameter_list|()
function_decl|;
specifier|protected
name|String
name|getPivotedBaseSummaryQuery
parameter_list|(
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|allDays
parameter_list|,
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|weekDays
parameter_list|,
name|Integer
name|saturday
parameter_list|,
name|String
name|campus
parameter_list|,
name|String
name|year
parameter_list|,
name|String
name|term
parameter_list|,
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|headerRow
parameter_list|,
name|boolean
name|includeDayOfWkTimeOfDayInHeaderRow
parameter_list|,
name|boolean
name|includeSubjectArea
parameter_list|,
name|boolean
name|includeDept
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"select "
argument_list|)
expr_stmt|;
name|appendSelectedField
argument_list|(
name|sb
argument_list|,
literal|"z"
argument_list|,
name|MESSAGES
operator|.
name|utilSqlAcademicInitiative
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|headerRow
operator|.
name|add
argument_list|(
name|MESSAGES
operator|.
name|utilSqlAcademicInitiative
argument_list|()
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|appendSelectedField
argument_list|(
name|sb
argument_list|,
literal|"z"
argument_list|,
name|MESSAGES
operator|.
name|utilSqlAcademicTerm
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|headerRow
operator|.
name|add
argument_list|(
name|MESSAGES
operator|.
name|utilSqlAcademicTerm
argument_list|()
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|appendSelectedField
argument_list|(
name|sb
argument_list|,
literal|"z"
argument_list|,
name|MESSAGES
operator|.
name|utilSqlAcademicYear
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|headerRow
operator|.
name|add
argument_list|(
name|MESSAGES
operator|.
name|utilSqlAcademicYear
argument_list|()
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|appendSelectedField
argument_list|(
name|sb
argument_list|,
literal|"z"
argument_list|,
name|MESSAGES
operator|.
name|utilSqlRoomType
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|headerRow
operator|.
name|add
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoomType
argument_list|()
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|appendSelectedField
argument_list|(
name|sb
argument_list|,
literal|"z"
argument_list|,
name|MESSAGES
operator|.
name|utilSqlBuilding
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|headerRow
operator|.
name|add
argument_list|(
name|MESSAGES
operator|.
name|utilSqlBuilding
argument_list|()
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|appendSelectedField
argument_list|(
name|sb
argument_list|,
literal|"z"
argument_list|,
name|MESSAGES
operator|.
name|utilSqlRoom
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|headerRow
operator|.
name|add
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoom
argument_list|()
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|appendSelectedField
argument_list|(
name|sb
argument_list|,
literal|"z"
argument_list|,
name|MESSAGES
operator|.
name|utilSqlRoomSize
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|headerRow
operator|.
name|add
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoomSize
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isShowAdditionalPurdueData
argument_list|()
condition|)
block|{
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|appendSelectedField
argument_list|(
name|sb
argument_list|,
literal|"z"
argument_list|,
name|MESSAGES
operator|.
name|utilSqlCampusRegion
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|headerRow
operator|.
name|add
argument_list|(
name|MESSAGES
operator|.
name|utilSqlCampusRegion
argument_list|()
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|appendSelectedField
argument_list|(
name|sb
argument_list|,
literal|"z"
argument_list|,
name|MESSAGES
operator|.
name|utilSqlLlrLalrPool
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|headerRow
operator|.
name|add
argument_list|(
name|MESSAGES
operator|.
name|utilSqlLlrLalrPool
argument_list|()
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|appendSelectedField
argument_list|(
name|sb
argument_list|,
literal|"z"
argument_list|,
name|MESSAGES
operator|.
name|utilSqlClassroomSubtype
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|headerRow
operator|.
name|add
argument_list|(
name|MESSAGES
operator|.
name|utilSqlClassroomSubtype
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getCapacityRangeCase
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" as "
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRangeOfSizes
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|headerRow
operator|.
name|add
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRangeOfSizes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeDept
condition|)
block|{
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|appendSelectedField
argument_list|(
name|sb
argument_list|,
literal|"z"
argument_list|,
name|MESSAGES
operator|.
name|utilSqlDepartment
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|headerRow
operator|.
name|add
argument_list|(
name|MESSAGES
operator|.
name|utilSqlDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeSubjectArea
condition|)
block|{
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|appendSelectedField
argument_list|(
name|sb
argument_list|,
literal|"z"
argument_list|,
name|MESSAGES
operator|.
name|utilSqlSubject
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|headerRow
operator|.
name|add
argument_list|(
name|MESSAGES
operator|.
name|utilSqlSubject
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|appendSelectedField
argument_list|(
name|sb
argument_list|,
literal|"z"
argument_list|,
name|MESSAGES
operator|.
name|utilSqlEventType
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|headerRow
operator|.
name|add
argument_list|(
name|MESSAGES
operator|.
name|utilSqlEventType
argument_list|()
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|appendSelectedField
argument_list|(
name|sb
argument_list|,
literal|"z"
argument_list|,
name|MESSAGES
operator|.
name|utilSqlEventTypeDescription
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|headerRow
operator|.
name|add
argument_list|(
name|MESSAGES
operator|.
name|utilSqlEventTypeDescription
argument_list|()
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|appendSelectedField
argument_list|(
name|sb
argument_list|,
literal|"z"
argument_list|,
name|MESSAGES
operator|.
name|utilSqlUtilizationType
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|headerRow
operator|.
name|add
argument_list|(
name|MESSAGES
operator|.
name|utilSqlUtilizationType
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|LabelFieldPair
name|labelFieldPair
range|:
name|getLabelPrefixToAdditionalQueryFieldMapping
argument_list|()
control|)
block|{
name|buildStandardWeekdayHoursSum
argument_list|(
name|sb
argument_list|,
name|weekDays
argument_list|,
literal|true
argument_list|,
name|headerRow
argument_list|,
name|labelFieldPair
argument_list|)
expr_stmt|;
name|buildStandardHoursSum
argument_list|(
name|sb
argument_list|,
name|weekDays
argument_list|,
name|saturday
argument_list|,
literal|true
argument_list|,
name|headerRow
argument_list|,
name|labelFieldPair
argument_list|)
expr_stmt|;
name|buildAllHoursSum
argument_list|(
name|sb
argument_list|,
name|allDays
argument_list|,
literal|true
argument_list|,
name|headerRow
argument_list|,
name|labelFieldPair
argument_list|)
expr_stmt|;
block|}
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|LabelFieldPair
name|labelFieldPair
range|:
name|getLabelPrefixToAdditionalQueryFieldMapping
argument_list|()
control|)
block|{
name|buildDayOfWeekTimeOfDaySums
argument_list|(
name|sb
argument_list|,
name|allDays
argument_list|,
literal|true
argument_list|,
name|headerRow
argument_list|,
name|includeDayOfWkTimeOfDayInHeaderRow
argument_list|,
name|labelFieldPair
argument_list|,
name|first
argument_list|)
expr_stmt|;
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"from ("
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getBaseQuery
argument_list|(
name|campus
argument_list|,
name|year
argument_list|,
name|term
argument_list|,
name|includeSubjectArea
argument_list|,
name|includeDept
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|") z"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"group by "
argument_list|)
expr_stmt|;
name|appendSelectedField
argument_list|(
name|sb
argument_list|,
literal|"z"
argument_list|,
name|MESSAGES
operator|.
name|utilSqlAcademicInitiative
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendSelectedField
argument_list|(
name|sb
argument_list|,
literal|"z"
argument_list|,
name|MESSAGES
operator|.
name|utilSqlAcademicTerm
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendSelectedField
argument_list|(
name|sb
argument_list|,
literal|"z"
argument_list|,
name|MESSAGES
operator|.
name|utilSqlAcademicYear
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|appendSelectedField
argument_list|(
name|sb
argument_list|,
literal|"z"
argument_list|,
name|MESSAGES
operator|.
name|utilSqlUtilizationType
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendSelectedField
argument_list|(
name|sb
argument_list|,
literal|"z"
argument_list|,
name|MESSAGES
operator|.
name|utilSqlRoomType
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendSelectedField
argument_list|(
name|sb
argument_list|,
literal|"z"
argument_list|,
literal|"room_id"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|appendSelectedField
argument_list|(
name|sb
argument_list|,
literal|"z"
argument_list|,
name|MESSAGES
operator|.
name|utilSqlBuilding
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendSelectedField
argument_list|(
name|sb
argument_list|,
literal|"z"
argument_list|,
name|MESSAGES
operator|.
name|utilSqlRoom
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendSelectedField
argument_list|(
name|sb
argument_list|,
literal|"z"
argument_list|,
name|MESSAGES
operator|.
name|utilSqlRoomSize
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|isShowAdditionalPurdueData
argument_list|()
condition|)
block|{
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|appendSelectedField
argument_list|(
name|sb
argument_list|,
literal|"z"
argument_list|,
name|MESSAGES
operator|.
name|utilSqlCampusRegion
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|appendSelectedField
argument_list|(
name|sb
argument_list|,
literal|"z"
argument_list|,
name|MESSAGES
operator|.
name|utilSqlLlrLalrPool
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|appendSelectedField
argument_list|(
name|sb
argument_list|,
literal|"z"
argument_list|,
name|MESSAGES
operator|.
name|utilSqlClassroomSubtype
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|appendSelectedField
argument_list|(
name|sb
argument_list|,
literal|"z"
argument_list|,
name|MESSAGES
operator|.
name|utilSqlEventType
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|appendSelectedField
argument_list|(
name|sb
argument_list|,
literal|"z"
argument_list|,
name|MESSAGES
operator|.
name|utilSqlEventTypeDescription
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getCapacityRangeCase
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeDept
condition|)
block|{
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|appendSelectedField
argument_list|(
name|sb
argument_list|,
literal|"z"
argument_list|,
name|MESSAGES
operator|.
name|utilSqlDepartment
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeSubjectArea
condition|)
block|{
name|newline
argument_list|(
name|sb
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|appendSelectedField
argument_list|(
name|sb
argument_list|,
literal|"z"
argument_list|,
name|MESSAGES
operator|.
name|utilSqlSubject
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|public
specifier|abstract
name|String
name|getPivotedQuery
parameter_list|(
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|allDays
parameter_list|,
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|weekDays
parameter_list|,
name|Integer
name|saturday
parameter_list|,
name|String
name|campus
parameter_list|,
name|String
name|year
parameter_list|,
name|String
name|term
parameter_list|,
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|headerRow
parameter_list|,
name|boolean
name|includeDayOfWkTimeOfDayInHeaderRow
parameter_list|,
name|boolean
name|includeSubjectArea
parameter_list|,
name|boolean
name|includeDept
parameter_list|)
function_decl|;
specifier|protected
name|String
name|getSortedRoomUtilizationQuery
parameter_list|(
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|allDays
parameter_list|,
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|weekDays
parameter_list|,
name|Integer
name|saturday
parameter_list|,
name|String
name|campus
parameter_list|,
name|String
name|year
parameter_list|,
name|String
name|term
parameter_list|,
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|headerRow
parameter_list|,
name|boolean
name|includeSubjectArea
parameter_list|,
name|boolean
name|includeDept
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getPivotedQuery
argument_list|(
name|allDays
argument_list|,
name|weekDays
argument_list|,
name|saturday
argument_list|,
name|campus
argument_list|,
name|year
argument_list|,
name|term
argument_list|,
name|headerRow
argument_list|,
literal|true
argument_list|,
name|includeSubjectArea
argument_list|,
name|includeDept
argument_list|)
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"order by "
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlAcademicInitiative
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlAcademicTerm
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlAcademicYear
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" desc, "
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoomType
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoomSize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" desc, "
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlBuilding
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoom
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeDept
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeSubjectArea
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlSubject
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|public
name|String
name|getUnpivotedRoomUtilizationQuery
parameter_list|(
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|allDays
parameter_list|,
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|weekDays
parameter_list|,
name|Integer
name|saturday
parameter_list|,
name|String
name|campus
parameter_list|,
name|String
name|year
parameter_list|,
name|String
name|term
parameter_list|,
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|headerRow
parameter_list|,
name|boolean
name|includeSubjectArea
parameter_list|,
name|boolean
name|includeDept
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|newColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|dayTimeColumnPrefixes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|LabelFieldPair
name|labelFieldPair
range|:
name|getLabelPrefixToAdditionalQueryFieldMapping
argument_list|()
control|)
block|{
name|newColumns
operator|.
name|add
argument_list|(
name|labelFieldPair
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|dayTimeColumnPrefixes
operator|.
name|add
argument_list|(
name|labelFieldPair
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"select *"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"from"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"select *"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"from"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getPivotedQuery
argument_list|(
name|allDays
argument_list|,
name|weekDays
argument_list|,
name|saturday
argument_list|,
name|campus
argument_list|,
name|year
argument_list|,
name|term
argument_list|,
name|headerRow
argument_list|,
literal|false
argument_list|,
name|includeSubjectArea
argument_list|,
name|includeDept
argument_list|)
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|") y"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getUnPivot
argument_list|(
name|allDays
argument_list|,
name|newColumns
argument_list|,
name|dayTimeColumnPrefixes
argument_list|)
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|") x"
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|column
range|:
name|newColumns
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"where "
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|newline
argument_list|(
name|sb
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"or "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"x."
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"!= 0"
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|protected
name|String
name|getSortedUnpivotedRoomUtilizationQuery
parameter_list|(
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|allDays
parameter_list|,
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|weekDays
parameter_list|,
name|Integer
name|saturday
parameter_list|,
name|String
name|campus
parameter_list|,
name|String
name|year
parameter_list|,
name|String
name|term
parameter_list|,
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|headerRow
parameter_list|,
name|boolean
name|includeSubjectArea
parameter_list|,
name|boolean
name|includeDept
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getUnpivotedRoomUtilizationQuery
argument_list|(
name|allDays
argument_list|,
name|weekDays
argument_list|,
name|saturday
argument_list|,
name|campus
argument_list|,
name|year
argument_list|,
name|term
argument_list|,
name|headerRow
argument_list|,
name|includeSubjectArea
argument_list|,
name|includeDept
argument_list|)
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"order by "
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlAcademicInitiative
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlAcademicTerm
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlAcademicYear
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" desc, "
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoomType
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoomSize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" desc, "
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlBuilding
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlRoom
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeDept
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeSubjectArea
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlSubject
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|MESSAGES
operator|.
name|utilSqlDayTime
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|sb
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|public
name|String
name|getPivotedAndUnpivotedUtilizationQueries
parameter_list|(
name|Session
name|acadSession
parameter_list|,
name|boolean
name|includeSubjectArea
parameter_list|,
name|boolean
name|includeDept
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|headerRow1
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|headerRow2
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|utilQuery
init|=
name|getSortedRoomUtilizationQuery
argument_list|(
name|getAllDays
argument_list|()
argument_list|,
name|getWeekDays
argument_list|()
argument_list|,
name|getSaturday
argument_list|()
argument_list|,
name|acadSession
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|,
name|acadSession
operator|.
name|getAcademicYear
argument_list|()
argument_list|,
name|acadSession
operator|.
name|getAcademicTerm
argument_list|()
argument_list|,
name|headerRow1
argument_list|,
name|includeSubjectArea
argument_list|,
name|includeDept
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|utilQuery
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|String
name|unpivotedUtilQuery
init|=
name|getSortedUnpivotedRoomUtilizationQuery
argument_list|(
name|getAllDays
argument_list|()
argument_list|,
name|getWeekDays
argument_list|()
argument_list|,
name|getSaturday
argument_list|()
argument_list|,
name|acadSession
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|,
name|acadSession
operator|.
name|getAcademicYear
argument_list|()
argument_list|,
name|acadSession
operator|.
name|getAcademicTerm
argument_list|()
argument_list|,
name|headerRow2
argument_list|,
name|includeSubjectArea
argument_list|,
name|includeDept
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|unpivotedUtilQuery
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|newline
argument_list|(
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|getQueryResultsForSortedRoomUtilizationQuery
parameter_list|(
name|Session
name|acadSession
parameter_list|,
name|boolean
name|includeSubjectArea
parameter_list|,
name|boolean
name|includeDept
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|headerRow
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|getSortedRoomUtilizationQuery
argument_list|(
name|getAllDays
argument_list|()
argument_list|,
name|getWeekDays
argument_list|()
argument_list|,
name|getSaturday
argument_list|()
argument_list|,
name|acadSession
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|,
name|acadSession
operator|.
name|getAcademicYear
argument_list|()
argument_list|,
name|acadSession
operator|.
name|getAcademicTerm
argument_list|()
argument_list|,
name|headerRow
argument_list|,
name|includeSubjectArea
argument_list|,
name|includeDept
argument_list|)
decl_stmt|;
return|return
name|getUtilQueryResultsForQuery
argument_list|(
name|query
argument_list|,
name|headerRow
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|getQueryResultsForSortedUnPivotedRoomUtilizationQuery
parameter_list|(
name|Session
name|acadSession
parameter_list|,
name|boolean
name|includeSubjectArea
parameter_list|,
name|boolean
name|includeDept
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|headerRow
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|getSortedUnpivotedRoomUtilizationQuery
argument_list|(
name|getAllDays
argument_list|()
argument_list|,
name|getWeekDays
argument_list|()
argument_list|,
name|getSaturday
argument_list|()
argument_list|,
name|acadSession
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|,
name|acadSession
operator|.
name|getAcademicYear
argument_list|()
argument_list|,
name|acadSession
operator|.
name|getAcademicTerm
argument_list|()
argument_list|,
name|headerRow
argument_list|,
name|includeSubjectArea
argument_list|,
name|includeDept
argument_list|)
decl_stmt|;
return|return
name|getUtilQueryResultsForQuery
argument_list|(
name|query
argument_list|,
name|headerRow
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|List
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|getUtilQueryResultsForQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|headerRow
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|headerPlusResults
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|headerPlusResults
operator|.
name|add
argument_list|(
name|headerRow
argument_list|)
expr_stmt|;
name|RoomDAO
name|rdao
init|=
operator|new
name|RoomDAO
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|rdao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|headerPlusResults
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
operator|)
name|hibSession
operator|.
name|createSQLQuery
argument_list|(
name|query
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|headerPlusResults
return|;
block|}
specifier|protected
name|String
name|getDeptSubquery
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
class|class
name|LabelFieldPair
block|{
specifier|public
name|LabelFieldPair
parameter_list|(
name|String
name|label
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|label
operator|=
name|label
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
name|String
name|label
decl_stmt|;
name|String
name|field
decl_stmt|;
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
name|label
return|;
block|}
specifier|public
name|void
name|setLabel
parameter_list|(
name|String
name|label
parameter_list|)
block|{
name|this
operator|.
name|label
operator|=
name|label
expr_stmt|;
block|}
specifier|public
name|String
name|getField
parameter_list|()
block|{
return|return
name|field
return|;
block|}
specifier|public
name|void
name|setField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

