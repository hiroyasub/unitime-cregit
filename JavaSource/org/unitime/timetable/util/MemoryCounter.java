begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|commons
operator|.
name|marshall
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|manager
operator|.
name|EmbeddedCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|jgroups
operator|.
name|SolverContainer
import|;
end_import

begin_comment
comment|/**  * Simple memory counter based on http://www.javaspecialists.eu/archive/Issue078.html  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|MemoryCounter
block|{
specifier|public
specifier|static
specifier|final
name|MemorySizes
name|sSizes
init|=
operator|new
name|MemorySizes
argument_list|()
decl_stmt|;
specifier|private
name|Map
name|iVisited
init|=
operator|new
name|IdentityHashMap
argument_list|()
decl_stmt|;
specifier|private
name|Stack
name|iStack
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
specifier|public
name|MemoryCounter
parameter_list|()
block|{
block|}
specifier|public
specifier|synchronized
name|long
name|estimate
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|MemoryCounter
argument_list|()
operator|.
name|deepSizeOfObject
argument_list|(
name|obj
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
literal|"Failed to estimate size of "
operator|+
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|": "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
specifier|private
name|boolean
name|skipObject
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|(
name|obj
operator|instanceof
name|String
operator|)
operator|&&
operator|(
name|obj
operator|==
operator|(
operator|(
name|String
operator|)
name|obj
operator|)
operator|.
name|intern
argument_list|()
operator|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|instanceof
name|Marshaller
operator|||
name|obj
operator|instanceof
name|EmbeddedCacheManager
operator|||
name|obj
operator|instanceof
name|Thread
operator|||
name|obj
operator|instanceof
name|Log
operator|||
name|obj
operator|instanceof
name|Logger
operator|||
name|obj
operator|instanceof
name|SolverContainer
condition|)
return|return
literal|true
return|;
return|return
operator|(
name|obj
operator|==
literal|null
operator|)
operator|||
name|iVisited
operator|.
name|containsKey
argument_list|(
name|obj
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|long
name|roundUpToNearestEightBytes
parameter_list|(
name|long
name|result
parameter_list|)
block|{
if|if
condition|(
operator|(
name|result
operator|%
literal|8
operator|)
operator|!=
literal|0
condition|)
block|{
name|result
operator|+=
literal|8
operator|-
operator|(
name|result
operator|%
literal|8
operator|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|long
name|deepSizeOfObject
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
try|try
block|{
name|long
name|result
init|=
name|deepSizeOf
argument_list|(
name|obj
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|iStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|+=
name|deepSizeOf
argument_list|(
name|iStack
operator|.
name|pop
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
literal|"Unable to estimate size of "
operator|+
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
specifier|private
name|long
name|deepSizeOf
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|skipObject
argument_list|(
name|obj
argument_list|)
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|obj
operator|instanceof
name|Cache
condition|)
block|{
return|return
name|deepSizeOf
argument_list|(
operator|(
operator|(
name|Cache
operator|)
name|obj
operator|)
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|getDataContainer
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
return|;
block|}
name|iVisited
operator|.
name|put
argument_list|(
name|obj
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Class
name|clazz
init|=
name|obj
operator|.
name|getClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|long
name|result
init|=
literal|16
decl_stmt|;
name|int
name|length
init|=
name|Array
operator|.
name|getLength
argument_list|(
name|obj
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
operator|!=
literal|0
condition|)
block|{
name|Class
name|arrayElementClazz
init|=
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|arrayElementClazz
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|result
operator|+=
name|length
operator|*
name|sSizes
operator|.
name|getPrimitiveArrayElementSize
argument_list|(
name|arrayElementClazz
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|+=
name|sSizes
operator|.
name|getPointerSize
argument_list|()
operator|+
name|deepSizeOf
argument_list|(
name|Array
operator|.
name|get
argument_list|(
name|obj
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
name|long
name|result
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
name|Field
index|[]
name|fields
init|=
name|clazz
operator|.
name|getDeclaredFields
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|Field
name|f
range|:
name|clazz
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|f
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
comment|//skip statics
if|if
condition|(
name|f
operator|.
name|getType
argument_list|()
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|result
operator|+=
name|sSizes
operator|.
name|getPrimitiveFieldSize
argument_list|(
name|f
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|+=
name|sSizes
operator|.
name|getPointerSize
argument_list|()
expr_stmt|;
name|long
name|offset
init|=
name|UtilUnsafe
operator|.
name|UNSAFE
operator|.
name|objectFieldOffset
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|Object
name|tempObject
init|=
name|UtilUnsafe
operator|.
name|UNSAFE
operator|.
name|getObject
argument_list|(
name|obj
argument_list|,
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|tempObject
operator|!=
literal|null
condition|)
name|iStack
operator|.
name|add
argument_list|(
name|tempObject
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|clazz
operator|=
name|clazz
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
block|}
name|result
operator|+=
name|sSizes
operator|.
name|getClassSize
argument_list|()
expr_stmt|;
return|return
name|roundUpToNearestEightBytes
argument_list|(
name|result
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|MemorySizes
block|{
specifier|private
specifier|final
name|Map
name|primitiveSizes
init|=
operator|new
name|IdentityHashMap
argument_list|()
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
block|{
name|put
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|byte
operator|.
name|class
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|char
operator|.
name|class
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|short
operator|.
name|class
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|float
operator|.
name|class
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|double
operator|.
name|class
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|long
operator|.
name|class
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|public
name|int
name|getPrimitiveFieldSize
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
return|return
operator|(
operator|(
name|Integer
operator|)
name|primitiveSizes
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
specifier|public
name|int
name|getPrimitiveArrayElementSize
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
return|return
name|getPrimitiveFieldSize
argument_list|(
name|clazz
argument_list|)
return|;
block|}
specifier|public
name|int
name|getPointerSize
parameter_list|()
block|{
return|return
literal|4
return|;
block|}
specifier|public
name|int
name|getClassSize
parameter_list|()
block|{
return|return
literal|8
return|;
block|}
block|}
specifier|static
class|class
name|UtilUnsafe
block|{
specifier|public
specifier|static
specifier|final
name|sun
operator|.
name|misc
operator|.
name|Unsafe
name|UNSAFE
decl_stmt|;
static|static
block|{
name|Object
name|theUnsafe
init|=
literal|null
decl_stmt|;
name|Exception
name|exception
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|uc
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"sun.misc.Unsafe"
argument_list|)
decl_stmt|;
name|Field
name|f
init|=
name|uc
operator|.
name|getDeclaredField
argument_list|(
literal|"theUnsafe"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theUnsafe
operator|=
name|f
operator|.
name|get
argument_list|(
name|uc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|UNSAFE
operator|=
operator|(
name|sun
operator|.
name|misc
operator|.
name|Unsafe
operator|)
name|theUnsafe
expr_stmt|;
if|if
condition|(
name|UNSAFE
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Error
argument_list|(
literal|"Could not obtain access to sun.misc.Unsafe"
argument_list|,
name|exception
argument_list|)
throw|;
block|}
specifier|private
name|UtilUnsafe
parameter_list|()
block|{
block|}
block|}
block|}
end_class

end_unit

