begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|util
operator|.
name|LabelValueBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Building
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCreditFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCreditType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCreditUnitType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ItypeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|OfferingConsentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PositionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Reservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ReservationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|CourseOfferingComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TimetableManagerDAO
import|;
end_import

begin_comment
comment|/**  * Contains methods on static read-only lookup tables  *   * @author Heston Fernandes  */
end_comment

begin_class
specifier|public
class|class
name|LookupTables
block|{
comment|/**      * Gets the current academic session id for the current session      * @param request      * @return      */
specifier|private
specifier|static
name|String
name|getAcademicSessionId
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_ID_ATTR_NAME
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Get Itypes and store it in request object      * @param request      * @throws Exception      */
specifier|public
specifier|static
name|void
name|setupItypes
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|boolean
name|basic
parameter_list|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
name|ItypeDesc
operator|.
name|ITYPE_ATTR_NAME
argument_list|,
name|ItypeDesc
operator|.
name|findAll
argument_list|(
name|basic
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get ExternalDepts and store it in request object      * @param request      * @throws Exception      */
specifier|public
specifier|static
name|void
name|setupExternalDepts
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|Long
name|sessionId
parameter_list|)
throws|throws
name|Exception
block|{
name|request
operator|.
name|setAttribute
argument_list|(
name|Department
operator|.
name|EXTERNAL_DEPT_ATTR_NAME
argument_list|,
name|Department
operator|.
name|findAllExternal
argument_list|(
name|sessionId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get all departments that are not external and store it in request object      * @param request      * @throws Exception      */
specifier|public
specifier|static
name|void
name|setupNonExternalDepts
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|Long
name|sessionId
parameter_list|)
throws|throws
name|Exception
block|{
name|request
operator|.
name|setAttribute
argument_list|(
name|Department
operator|.
name|DEPT_ATTR_NAME
argument_list|,
name|Department
operator|.
name|findAllNonExternal
argument_list|(
name|sessionId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get All Depts and store it in request object      * @param request      * @throws Exception      */
specifier|public
specifier|static
name|void
name|setupDepts
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|Long
name|sessionId
parameter_list|)
throws|throws
name|Exception
block|{
name|request
operator|.
name|setAttribute
argument_list|(
name|Department
operator|.
name|DEPT_ATTR_NAME
argument_list|,
name|Department
operator|.
name|findAll
argument_list|(
name|sessionId
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setupDeptsForUser
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|User
name|user
parameter_list|,
name|Long
name|sessionId
parameter_list|,
name|boolean
name|includeExternal
parameter_list|)
throws|throws
name|Exception
block|{
name|ArrayList
name|departments
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|TreeSet
name|depts
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|String
name|mgrId
init|=
operator|(
name|String
operator|)
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|TMTBL_MGR_ID_ATTR_NAME
argument_list|)
decl_stmt|;
name|TimetableManagerDAO
name|tdao
init|=
operator|new
name|TimetableManagerDAO
argument_list|()
decl_stmt|;
name|TimetableManager
name|owner
init|=
name|tdao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|mgrId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|.
name|getRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|ADMIN_ROLE
argument_list|)
operator|||
name|user
operator|.
name|getCurrentRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|VIEW_ALL_ROLE
argument_list|)
operator|||
name|user
operator|.
name|getCurrentRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|EXAM_MGR_ROLE
argument_list|)
condition|)
block|{
name|depts
operator|=
name|Department
operator|.
name|findAllBeingUsed
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|depts
operator|=
name|Department
operator|.
name|findAllOwned
argument_list|(
name|sessionId
argument_list|,
name|owner
argument_list|,
name|includeExternal
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|depts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|code
init|=
name|d
operator|.
name|getDeptCode
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|abbv
init|=
name|d
operator|.
name|getName
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|.
name|isExternalManager
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|departments
operator|.
name|add
argument_list|(
operator|new
name|LabelValueBean
argument_list|(
name|code
operator|+
literal|" - "
operator|+
name|abbv
operator|+
literal|" ("
operator|+
name|d
operator|.
name|getExternalMgrLabel
argument_list|()
operator|+
literal|")"
argument_list|,
name|code
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|departments
operator|.
name|add
argument_list|(
operator|new
name|LabelValueBean
argument_list|(
name|code
operator|+
literal|" - "
operator|+
name|abbv
argument_list|,
name|code
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
name|Department
operator|.
name|DEPT_ATTR_NAME
argument_list|,
name|departments
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get Time Patterns and store it in request object      * @param request      * @throws Exception      */
specifier|public
specifier|static
name|void
name|setupTimePatterns
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|Vector
name|v
init|=
name|TimePattern
operator|.
name|findAll
argument_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|TimePattern
operator|.
name|TIME_PATTERN_ATTR_NAME
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setupRooms
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|PreferenceGroup
name|pg
parameter_list|)
throws|throws
name|Exception
block|{
name|request
operator|.
name|setAttribute
argument_list|(
name|Room
operator|.
name|ROOM_LIST_ATTR_NAME
argument_list|,
name|pg
operator|.
name|getAvailableRooms
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setupBldgs
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|PreferenceGroup
name|pg
parameter_list|)
throws|throws
name|Exception
block|{
name|request
operator|.
name|setAttribute
argument_list|(
name|Building
operator|.
name|BLDG_LIST_ATTR_NAME
argument_list|,
name|pg
operator|.
name|getAvailableBuildings
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get Preference Levels and store it in request object      * @param request      * @throws Exception      */
specifier|public
specifier|static
name|void
name|setupPrefLevels
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|Vector
name|v
init|=
name|PreferenceLevel
operator|.
name|getPreferenceLevelList
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|PreferenceLevel
operator|.
name|PREF_LEVEL_ATTR_NAME
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get Preference Levels and store it in request object (soft preferences only)      * @param request      * @throws Exception      */
specifier|public
specifier|static
name|void
name|setupPrefLevelsSoftOnly
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|Vector
name|v
init|=
name|PreferenceLevel
operator|.
name|getPreferenceLevelListSoftOnly
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|PreferenceLevel
operator|.
name|PREF_LEVEL_ATTR_NAME
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get Room Features and store it in request object      * @param request      * @param preferenceGroup      * @throws Exception      */
specifier|public
specifier|static
name|void
name|setupRoomFeatures
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|PreferenceGroup
name|pg
parameter_list|)
throws|throws
name|Exception
block|{
name|request
operator|.
name|setAttribute
argument_list|(
name|RoomFeature
operator|.
name|FEATURE_LIST_ATTR_NAME
argument_list|,
name|pg
operator|.
name|getAvailableRoomFeatures
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get Distribution Types and store it in request object      * @param request      * @throws Exception      */
specifier|public
specifier|static
name|void
name|setupDistribTypes
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|request
operator|.
name|setAttribute
argument_list|(
name|DistributionType
operator|.
name|DIST_TYPE_ATTR_NAME
argument_list|,
name|DistributionType
operator|.
name|findApplicable
argument_list|(
name|request
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setupExamDistribTypes
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|request
operator|.
name|setAttribute
argument_list|(
name|DistributionType
operator|.
name|DIST_TYPE_ATTR_NAME
argument_list|,
name|DistributionType
operator|.
name|findApplicable
argument_list|(
name|request
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setupInstructorDistribTypes
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|request
operator|.
name|setAttribute
argument_list|(
name|DistributionType
operator|.
name|DIST_TYPE_ATTR_NAME
argument_list|,
name|DistributionType
operator|.
name|findApplicable
argument_list|(
name|request
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setupExaminationPeriods
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|Integer
name|examType
parameter_list|)
throws|throws
name|Exception
block|{
name|request
operator|.
name|setAttribute
argument_list|(
name|ExamPeriod
operator|.
name|PERIOD_ATTR_NAME
argument_list|,
name|ExamPeriod
operator|.
name|findAll
argument_list|(
name|request
argument_list|,
name|examType
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setupRoomGroups
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|PreferenceGroup
name|pg
parameter_list|)
throws|throws
name|Exception
block|{
name|request
operator|.
name|setAttribute
argument_list|(
name|RoomGroup
operator|.
name|GROUP_LIST_ATTR_NAME
argument_list|,
name|pg
operator|.
name|getAvailableRoomGroups
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setupDatePatterns
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|inheritString
parameter_list|,
name|DatePattern
name|inheritedDatePattern
parameter_list|,
name|Department
name|department
parameter_list|,
name|DatePattern
name|currentDatePattern
parameter_list|)
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|Vector
name|list
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|list
operator|.
name|addElement
argument_list|(
operator|new
name|IdValue
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|inheritString
operator|+
operator|(
name|inheritedDatePattern
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|inheritedDatePattern
operator|.
name|getName
argument_list|()
operator|+
literal|")"
operator|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|Enumeration
name|e
init|=
name|DatePattern
operator|.
name|findAll
argument_list|(
name|request
argument_list|,
name|department
argument_list|,
name|currentDatePattern
argument_list|)
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|DatePattern
name|dp
init|=
operator|(
name|DatePattern
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|list
operator|.
name|addElement
argument_list|(
operator|new
name|IdValue
argument_list|(
name|dp
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|dp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
name|DatePattern
operator|.
name|DATE_PATTERN_LIST_ATTR
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get date patterns for a particular session      * @param request      * @param inheritString      * @param inheritedDatePattern      * @param department      * @param currentDatePattern      */
specifier|public
specifier|static
name|void
name|setupDatePatterns
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
name|acadSession
parameter_list|,
name|boolean
name|includeExtended
parameter_list|,
name|String
name|inheritString
parameter_list|,
name|DatePattern
name|inheritedDatePattern
parameter_list|,
name|Department
name|department
parameter_list|,
name|DatePattern
name|currentDatePattern
parameter_list|)
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|Vector
name|list
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|list
operator|.
name|addElement
argument_list|(
operator|new
name|IdValue
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|inheritString
operator|+
operator|(
name|inheritedDatePattern
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|inheritedDatePattern
operator|.
name|getName
argument_list|()
operator|+
literal|")"
operator|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|Enumeration
name|e
init|=
operator|(
name|DatePattern
operator|.
name|findAll
argument_list|(
name|acadSession
argument_list|,
name|includeExtended
argument_list|,
name|department
argument_list|,
name|currentDatePattern
argument_list|)
operator|)
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|DatePattern
name|dp
init|=
operator|(
name|DatePattern
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|list
operator|.
name|addElement
argument_list|(
operator|new
name|IdValue
argument_list|(
name|dp
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|dp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inheritedDatePattern
operator|==
literal|null
operator|&&
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
name|DatePattern
operator|.
name|DATE_PATTERN_LIST_ATTR
argument_list|,
literal|null
argument_list|)
expr_stmt|;
else|else
name|request
operator|.
name|setAttribute
argument_list|(
name|DatePattern
operator|.
name|DATE_PATTERN_LIST_ATTR
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get Instructors and store it in request object      * @param request      * @param deptUid department id, (null/blank if ALL instructors to be retrieved)      * @throws Exception      */
specifier|public
specifier|static
name|void
name|setupInstructors
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|Long
name|deptUid
parameter_list|)
throws|throws
name|Exception
block|{
name|StringBuffer
name|query
init|=
operator|new
name|StringBuffer
argument_list|(
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|deptUid
operator|!=
literal|null
condition|)
name|query
operator|.
name|append
argument_list|(
literal|" and i.department.uniqueId = "
operator|+
name|deptUid
argument_list|)
expr_stmt|;
name|getInstructors
argument_list|(
name|request
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get Instructors and store it in request object      * @param request      * @param deptUids department ids, (null if ALL instructors to be retrieved)      * @throws Exception      */
specifier|public
specifier|static
name|void
name|setupInstructors
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|Long
index|[]
name|deptUids
parameter_list|)
throws|throws
name|Exception
block|{
name|StringBuffer
name|query
init|=
operator|new
name|StringBuffer
argument_list|(
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|deptUids
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|" and i.department.uniqueId in ( "
operator|+
name|Constants
operator|.
name|arrayToStr
argument_list|(
name|deptUids
argument_list|,
literal|""
argument_list|,
literal|", "
argument_list|)
operator|+
literal|" )"
argument_list|)
expr_stmt|;
block|}
name|getInstructors
argument_list|(
name|request
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
comment|/**      * Executes the query to retrieve instructors      * @param request      * @param clause      * @throws Exception      */
specifier|private
specifier|static
name|void
name|getInstructors
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|StringBuffer
name|clause
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|instructorNameFormat
init|=
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|,
name|Constants
operator|.
name|SETTINGS_INSTRUCTOR_NAME_FORMAT
argument_list|)
decl_stmt|;
name|String
name|acadSessionId
init|=
name|getAcademicSessionId
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|StringBuffer
name|query
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"select distinct i from DepartmentalInstructor i "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" where i.department.session.uniqueId = :acadSessionId "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
name|clause
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" order by upper(i.lastName), upper(i.firstName) "
argument_list|)
expr_stmt|;
name|DepartmentalInstructorDAO
name|idao
init|=
operator|new
name|DepartmentalInstructorDAO
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|idao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|q
operator|.
name|setFetchSize
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|q
operator|.
name|setInteger
argument_list|(
literal|"acadSessionId"
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|acadSessionId
argument_list|)
argument_list|)
expr_stmt|;
name|List
name|result
init|=
name|q
operator|.
name|list
argument_list|()
decl_stmt|;
name|Vector
name|v
init|=
operator|new
name|Vector
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Vector
name|h
init|=
operator|new
name|Vector
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|result
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|di
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|di
operator|.
name|getName
argument_list|(
name|instructorNameFormat
argument_list|)
decl_stmt|;
name|v
operator|.
name|addElement
argument_list|(
operator|new
name|ComboBoxLookup
argument_list|(
name|name
argument_list|,
name|di
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|di
operator|.
name|hasPreferences
argument_list|()
condition|)
name|h
operator|.
name|add
argument_list|(
name|di
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
name|DepartmentalInstructor
operator|.
name|INSTR_LIST_ATTR_NAME
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|DepartmentalInstructor
operator|.
name|INSTR_HAS_PREF_ATTR_NAME
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
comment|/**      * Read the roles from lookup table and store it in an array list      * to be used to generate a drop down list of roles      * @param request HttpServletRequest object      * @throws Exception      */
specifier|public
specifier|static
name|void
name|setupRoles
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|Vector
name|v
init|=
name|Roles
operator|.
name|getRolesList
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|Roles
operator|.
name|ROLES_ATTR_NAME
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets all controlling course offerings (including not offered)       * @param request      * @throws Exception      */
specifier|public
specifier|static
name|void
name|setupCourseOfferings
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|setupCourseOfferings
argument_list|(
name|request
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets all course offerings (excluding not offered)       * @param request      * @throws Exception      */
specifier|public
specifier|static
name|void
name|setupAllOfferedCourseOfferings
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|setupCourseOfferings
argument_list|(
name|request
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets course offereings based on parameters      * @param request      * @param onlyOffered true indicates only retrieve offered courses       * @param onlyControlling true indicates retrieve only controlling courses      * @throws Exception      */
specifier|private
specifier|static
name|void
name|setupCourseOfferings
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|boolean
name|onlyOffered
parameter_list|,
name|boolean
name|onlyControlling
parameter_list|)
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|acadSessionId
init|=
name|getAcademicSessionId
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|String
name|mgrId
init|=
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|TMTBL_MGR_ID_ATTR_NAME
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|StringBuffer
name|query
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|.
name|getRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|ADMIN_ROLE
argument_list|)
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|"select distinct co "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"  from InstructionalOffering io, CourseOffering co "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"  where io.session.uniqueId=:acadSessionId "
argument_list|)
expr_stmt|;
if|if
condition|(
name|onlyControlling
condition|)
name|query
operator|.
name|append
argument_list|(
literal|"  and co.isControl=1 "
argument_list|)
expr_stmt|;
if|if
condition|(
name|onlyOffered
condition|)
name|query
operator|.
name|append
argument_list|(
literal|"  and io.notOffered=0 "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"  and io.uniqueId=co.instructionalOffering.uniqueId "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" order by co.subjectAreaAbbv, co.courseNbr "
argument_list|)
expr_stmt|;
name|CourseOfferingDAO
name|cdao
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
decl_stmt|;
name|Session
name|hibSession
init|=
name|cdao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|q
operator|.
name|setFetchSize
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|q
operator|.
name|setInteger
argument_list|(
literal|"acadSessionId"
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|acadSessionId
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|CourseOffering
operator|.
name|CRS_OFFERING_LIST_ATTR_NAME
argument_list|,
name|q
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Vector
name|coList
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|TimetableManagerDAO
name|mgrDao
init|=
operator|new
name|TimetableManagerDAO
argument_list|()
decl_stmt|;
name|TimetableManager
name|mgr
init|=
name|mgrDao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|mgrId
argument_list|)
argument_list|)
decl_stmt|;
name|Set
name|depts
init|=
name|mgr
operator|.
name|getDepartments
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|di
init|=
name|depts
operator|.
name|iterator
argument_list|()
init|;
name|di
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|dept
init|=
operator|(
name|Department
operator|)
name|di
operator|.
name|next
argument_list|()
decl_stmt|;
name|Set
name|subjAreas
init|=
name|dept
operator|.
name|getSubjectAreas
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|si
init|=
name|subjAreas
operator|.
name|iterator
argument_list|()
init|;
name|si
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SubjectArea
name|sa
init|=
operator|(
name|SubjectArea
operator|)
name|si
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|acadSessionId
operator|.
name|equals
argument_list|(
name|sa
operator|.
name|getSessionId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
continue|continue;
name|Set
name|cos
init|=
name|sa
operator|.
name|getCourseOfferings
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|ci
init|=
name|cos
operator|.
name|iterator
argument_list|()
init|;
name|ci
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|co
init|=
operator|(
name|CourseOffering
operator|)
name|ci
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|co
operator|.
name|isIsControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|co
operator|.
name|isFullyEditableBy
argument_list|(
name|user
argument_list|)
condition|)
continue|continue;
comment|//i.e., is the user able to make that course not offered?
name|coList
operator|.
name|addElement
argument_list|(
name|co
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|coList
argument_list|,
operator|new
name|CourseOfferingComparator
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|CourseOffering
operator|.
name|CRS_OFFERING_LIST_ATTR_NAME
argument_list|,
name|coList
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Gets the controlling course offerings for a user       * @param request      * @throws Exception      */
specifier|public
specifier|static
name|void
name|setupCourseOfferingDemands
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|CourseOffering
name|includeCourseOffering
parameter_list|)
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|acadSessionId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|getAcademicSessionId
argument_list|(
name|request
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|mgrId
init|=
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|TMTBL_MGR_ID_ATTR_NAME
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|StringBuffer
name|query
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|.
name|getRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|ADMIN_ROLE
argument_list|)
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|"select distinct co "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"  from InstructionalOffering io, CourseOffering co "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"  where io.session.uniqueId=:acadSessionId "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"  and co.demand>0 "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"  and io.uniqueId=co.instructionalOffering.uniqueId "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" order by co.subjectAreaAbbv, co.courseNbr "
argument_list|)
expr_stmt|;
name|CourseOfferingDAO
name|cdao
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
decl_stmt|;
name|Session
name|hibSession
init|=
name|cdao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|q
operator|.
name|setFetchSize
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"acadSessionId"
argument_list|,
name|acadSessionId
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|CourseOffering
operator|.
name|CRS_OFFERING_LIST_ATTR_NAME
argument_list|,
name|q
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TreeSet
name|coList
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|CourseOfferingComparator
argument_list|()
argument_list|)
decl_stmt|;
name|TimetableManagerDAO
name|mgrDao
init|=
operator|new
name|TimetableManagerDAO
argument_list|()
decl_stmt|;
name|TimetableManager
name|mgr
init|=
name|mgrDao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|mgrId
argument_list|)
argument_list|)
decl_stmt|;
name|Set
name|depts
init|=
name|mgr
operator|.
name|departmentsForSession
argument_list|(
name|acadSessionId
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|di
init|=
name|depts
operator|.
name|iterator
argument_list|()
init|;
name|di
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|dept
init|=
operator|(
name|Department
operator|)
name|di
operator|.
name|next
argument_list|()
decl_stmt|;
name|Set
name|subjAreas
init|=
name|dept
operator|.
name|getSubjectAreas
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|si
init|=
name|subjAreas
operator|.
name|iterator
argument_list|()
init|;
name|si
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SubjectArea
name|sa
init|=
operator|(
name|SubjectArea
operator|)
name|si
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|ci
init|=
name|sa
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|ci
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|co
init|=
operator|(
name|CourseOffering
operator|)
name|ci
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|co
operator|.
name|getDemand
argument_list|()
operator|.
name|intValue
argument_list|()
operator|>
literal|0
condition|)
name|coList
operator|.
name|add
argument_list|(
name|co
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|includeCourseOffering
operator|!=
literal|null
condition|)
name|coList
operator|.
name|add
argument_list|(
name|includeCourseOffering
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|CourseOffering
operator|.
name|CRS_OFFERING_LIST_ATTR_NAME
argument_list|,
name|coList
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|setupCourseCreditFormats
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|Vector
name|v
init|=
name|CourseCreditFormat
operator|.
name|getCourseCreditFormatList
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|CourseCreditFormat
operator|.
name|COURSE_CREDIT_FORMAT_ATTR_NAME
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setupCourseCreditTypes
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|Vector
name|v
init|=
name|CourseCreditType
operator|.
name|getCourseCreditTypeList
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|CourseCreditType
operator|.
name|COURSE_CREDIT_TYPE_ATTR_NAME
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setupCourseCreditUnitTypes
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|Vector
name|v
init|=
name|CourseCreditUnitType
operator|.
name|getCourseCreditUnitTypeList
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|CourseCreditUnitType
operator|.
name|COURSE_CREDIT_UNIT_TYPE_ATTR_NAME
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
comment|/**      * Retrieves list of position types       * @param request      * @throws Exception      */
specifier|public
specifier|static
name|void
name|setupPositionTypes
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|Vector
name|v
init|=
name|PositionType
operator|.
name|getPositionTypeList
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|PositionType
operator|.
name|POSTYPE_ATTR_NAME
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
comment|/**      * Retrieves list of reservation classifications       * @param request      * @param excludeList Reservation classes to be excluded from the list      * @throws Exception      */
specifier|public
specifier|static
name|void
name|setupReservationClass
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|String
index|[]
name|excludeList
parameter_list|)
throws|throws
name|Exception
block|{
name|Vector
name|v
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|String
index|[]
name|rc
init|=
name|Constants
operator|.
name|RESV_CLASS_LABELS
decl_stmt|;
name|outer
label|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rc
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|val
init|=
name|rc
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|excludeList
operator|!=
literal|null
operator|&&
name|excludeList
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|excludeList
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
name|excludeList
index|[
name|j
index|]
argument_list|)
condition|)
continue|continue
name|outer
continue|;
block|}
block|}
name|v
operator|.
name|addElement
argument_list|(
operator|new
name|ComboBoxLookup
argument_list|(
name|val
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
name|Reservation
operator|.
name|RESV_CLASS_REQUEST_ATTR
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
comment|/**      * Retrieves list of reservation priorities       * @param request      * @throws Exception      */
specifier|public
specifier|static
name|void
name|setupReservationPriorities
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|Vector
name|v
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|int
index|[]
name|rp
init|=
name|Constants
operator|.
name|RESV_PRIORITIES
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rp
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|v
operator|.
name|addElement
argument_list|(
operator|new
name|ComboBoxLookup
argument_list|(
name|rp
index|[
name|i
index|]
operator|+
literal|""
argument_list|,
name|rp
index|[
name|i
index|]
operator|+
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
name|Reservation
operator|.
name|RESV_PRIORITY_REQUEST_ATTR
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
comment|/**      * Retrieves list of academic areas for the current academic session       * @param request      * @throws Exception      */
specifier|public
specifier|static
name|void
name|setupAcademicAreas
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|Long
name|acadSessionId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|getAcademicSessionId
argument_list|(
name|request
argument_list|)
argument_list|)
decl_stmt|;
name|Vector
name|v
init|=
operator|new
name|Vector
argument_list|(
name|AcademicArea
operator|.
name|getAcademicAreaList
argument_list|(
name|acadSessionId
argument_list|)
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|AcademicArea
operator|.
name|ACAD_AREA_REQUEST_ATTR
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
comment|/**      * Retrieves list of academic classifications for the current academic session      * @param request      * @throws Exception      */
specifier|public
specifier|static
name|void
name|setupAcademicClassifications
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|Long
name|acadSessionId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|getAcademicSessionId
argument_list|(
name|request
argument_list|)
argument_list|)
decl_stmt|;
name|Vector
name|v
init|=
operator|new
name|Vector
argument_list|(
name|AcademicClassification
operator|.
name|getAcademicClassificationList
argument_list|(
name|acadSessionId
argument_list|)
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|AcademicClassification
operator|.
name|ACAD_CLASS_REQUEST_ATTR
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
comment|/**      * Retrieves list of reservation types      * @param request      * @throws Exception      */
specifier|public
specifier|static
name|void
name|setupReservationTypes
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|Vector
name|v
init|=
operator|new
name|Vector
argument_list|(
name|ReservationType
operator|.
name|getReservationTypeList
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|ReservationType
operator|.
name|RESVTYPE_ATTR_NAME
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
comment|/**      * Retrieves list of POS majors for the current academic session      * @param request      * @throws Exception      */
specifier|public
specifier|static
name|void
name|setupPosMajors
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|Long
name|acadSessionId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|getAcademicSessionId
argument_list|(
name|request
argument_list|)
argument_list|)
decl_stmt|;
name|Vector
name|v
init|=
operator|new
name|Vector
argument_list|(
name|PosMajor
operator|.
name|getPosMajorList
argument_list|(
name|acadSessionId
argument_list|)
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|PosMajor
operator|.
name|POSMAJOR_ATTR_NAME
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
comment|/**      * Retrieves list of student groups for the current academic session      * @param request      * @throws Exception      */
specifier|public
specifier|static
name|void
name|setupStudentGroups
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|Long
name|acadSessionId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|getAcademicSessionId
argument_list|(
name|request
argument_list|)
argument_list|)
decl_stmt|;
name|Vector
name|v
init|=
operator|new
name|Vector
argument_list|(
name|StudentGroup
operator|.
name|getStudentGroupList
argument_list|(
name|acadSessionId
argument_list|)
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|StudentGroup
operator|.
name|STUGRP_ATTR_NAME
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
comment|/**      * Retrieves list of consent types      * @param request      */
specifier|public
specifier|static
name|void
name|setupConsentType
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|Vector
name|v
init|=
operator|new
name|Vector
argument_list|(
name|OfferingConsentType
operator|.
name|getConsentTypeList
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|OfferingConsentType
operator|.
name|CONSENT_TYPE_ATTR_NAME
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
comment|/**      * Retrieves list of timetable managers      * @param request      */
specifier|public
specifier|static
name|void
name|setupTimetableManagers
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|Vector
name|v
init|=
operator|new
name|Vector
argument_list|(
name|TimetableManager
operator|.
name|getManagerList
argument_list|()
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|TimetableManager
operator|.
name|MGR_LIST_ATTR_NAME
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

