begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|queue
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipOutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Email
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ExamPdfReportForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ManagerRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SubjectAreaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|exam
operator|.
name|InstructorExamReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|exam
operator|.
name|PdfLegacyExamReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|exam
operator|.
name|StudentExamReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ExamSolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamInfo
operator|.
name|ExamInstructorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  *   * @author Tomas Muller  *  */
end_comment

begin_class
specifier|public
class|class
name|PdfExamReportQueueItem
extends|extends
name|QueueItem
block|{
specifier|public
specifier|static
name|String
name|TYPE
init|=
literal|"PDF Exam Report"
decl_stmt|;
specifier|private
name|ExamPdfReportForm
name|iForm
decl_stmt|;
specifier|private
name|String
name|iUrl
init|=
literal|null
decl_stmt|;
specifier|private
name|ExamSolverProxy
name|iExamSolver
decl_stmt|;
specifier|private
name|String
name|iName
init|=
literal|null
decl_stmt|;
specifier|private
name|double
name|iProgress
init|=
literal|0
decl_stmt|;
specifier|public
name|PdfExamReportQueueItem
parameter_list|(
name|Session
name|session
parameter_list|,
name|UserContext
name|owner
parameter_list|,
name|ExamPdfReportForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|ExamSolverProxy
name|examSolver
parameter_list|)
block|{
name|super
argument_list|(
name|session
argument_list|,
name|owner
argument_list|)
expr_stmt|;
name|iForm
operator|=
name|form
expr_stmt|;
name|iUrl
operator|=
name|request
operator|.
name|getScheme
argument_list|()
operator|+
literal|"://"
operator|+
name|request
operator|.
name|getServerName
argument_list|()
operator|+
literal|":"
operator|+
name|request
operator|.
name|getServerPort
argument_list|()
operator|+
name|request
operator|.
name|getContextPath
argument_list|()
expr_stmt|;
name|iExamSolver
operator|=
name|examSolver
expr_stmt|;
name|iName
operator|=
name|ExamTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|iForm
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|getLabel
argument_list|()
operator|+
literal|" "
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iForm
operator|.
name|getReports
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|iName
operator|+=
literal|", "
expr_stmt|;
name|iName
operator|+=
name|iForm
operator|.
name|getReports
argument_list|()
index|[
name|i
index|]
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|iForm
operator|.
name|getAll
argument_list|()
condition|)
block|{
name|iName
operator|+=
literal|" ("
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iForm
operator|.
name|getSubjects
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SubjectArea
name|subject
init|=
operator|new
name|SubjectAreaDAO
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|iForm
operator|.
name|getSubjects
argument_list|()
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|iName
operator|+=
literal|", "
expr_stmt|;
name|iName
operator|+=
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
expr_stmt|;
block|}
name|iName
operator|+=
literal|")"
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
comment|/*         Logger repLog = Logger.getLogger("org.unitime.timetable.reports.exam");         Appender myAppender = new AppenderSkeleton() { 			 			@Override 			public boolean requiresLayout() { 				return false; 			} 			 			@Override 			public void close() { 			} 			 			@Override 			protected void append(LoggingEvent event) { 				if (event.getMessage() == null) return; 				if (event.getLevel().toInt()>= Priority.ERROR_INT) { 					error(event.getMessage().toString()); 				} else if (event.getLevel().toInt()>= Priority.WARN_INT) { 					warn(event.getMessage().toString()); 				} else 					log(event.getMessage().toString()); 			} 		}; 		repLog.addAppender(myAppender); 		*/
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|ExamDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|createReports
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|hibSession
operator|.
name|isOpen
argument_list|()
condition|)
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//repLog.removeAppender(myAppender);
block|}
specifier|private
name|void
name|createReports
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
try|try
block|{
name|iProgress
operator|=
literal|0
expr_stmt|;
name|setStatus
argument_list|(
literal|"Loading exams..."
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iExamSolver
operator|!=
literal|null
operator|&&
name|iExamSolver
operator|.
name|getExamTypeId
argument_list|()
operator|.
name|equals
argument_list|(
name|iForm
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|&&
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.pdfReports.canUseSolution"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
block|{
name|exams
operator|=
operator|new
name|TreeSet
argument_list|(
name|iExamSolver
operator|.
name|getAssignedExams
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iForm
operator|.
name|getIgnoreEmptyExams
argument_list|()
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|getStudentIds
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.pdfReports.useSolution.preloadCrosslistedExams"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
condition|)
block|{
name|setStatus
argument_list|(
literal|"  Fetching exams..."
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select o from Exam x inner join x.owners o where x.session.uniqueId=:sessionId and x.examType.uniqueId=:examTypeId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iExamSolver
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|iExamSolver
operator|.
name|getExamTypeId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
name|setStatus
argument_list|(
literal|"  Fetching related objects (class)..."
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from Class_ c, ExamOwner o where o.exam.session.uniqueId=:sessionId and o.exam.examType.uniqueId=:examTypeId and o.ownerType=:classType and c.uniqueId=o.ownerId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iExamSolver
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|iExamSolver
operator|.
name|getExamTypeId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"classType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
name|setStatus
argument_list|(
literal|"  Fetching related objects (config)..."
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from InstrOfferingConfig c, ExamOwner o where o.exam.session.uniqueId=:sessionId and o.exam.examType.uniqueId=:examTypeId and o.ownerType=:configType and c.uniqueId=o.ownerId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iExamSolver
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|iExamSolver
operator|.
name|getExamTypeId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"configType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
name|setStatus
argument_list|(
literal|"  Fetching related objects (course)..."
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from CourseOffering c, ExamOwner o where o.exam.session.uniqueId=:sessionId and o.exam.examType.uniqueId=:examTypeId and o.ownerType=:courseType and c.uniqueId=o.ownerId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iExamSolver
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|iExamSolver
operator|.
name|getExamTypeId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"courseType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
name|setStatus
argument_list|(
literal|"  Fetching related objects (offering)..."
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from InstructionalOffering c, ExamOwner o where o.exam.session.uniqueId=:sessionId and o.exam.examType.uniqueId=:examTypeId and o.ownerType=:offeringType and c.uniqueId=o.ownerId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iExamSolver
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|iExamSolver
operator|.
name|getExamTypeId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"offeringType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
name|owner2course2students
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|setStatus
argument_list|(
literal|"  Loading students (class)..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select o.uniqueId, e.student.uniqueId, e.courseOffering.uniqueId from "
operator|+
literal|"Exam x inner join x.owners o, "
operator|+
literal|"StudentClassEnrollment e inner join e.clazz c "
operator|+
literal|"where x.session.uniqueId=:sessionId and x.examType.uniqueId=:examTypeId and "
operator|+
literal|"o.ownerType="
operator|+
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
operator|.
name|sOwnerTypeClass
operator|+
literal|" and "
operator|+
literal|"o.ownerId=c.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iExamSolver
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|iExamSolver
operator|.
name|getExamTypeId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|ownerId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Long
name|courseId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|course2students
init|=
name|owner2course2students
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|course2students
operator|==
literal|null
condition|)
block|{
name|course2students
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|owner2course2students
operator|.
name|put
argument_list|(
name|ownerId
argument_list|,
name|course2students
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsOfCourse
init|=
name|course2students
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentsOfCourse
operator|==
literal|null
condition|)
block|{
name|studentsOfCourse
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|course2students
operator|.
name|put
argument_list|(
name|courseId
argument_list|,
name|studentsOfCourse
argument_list|)
expr_stmt|;
block|}
name|studentsOfCourse
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
block|}
name|setStatus
argument_list|(
literal|"  Loading students (config)..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select o.uniqueId, e.student.uniqueId, e.courseOffering.uniqueId from "
operator|+
literal|"Exam x inner join x.owners o, "
operator|+
literal|"StudentClassEnrollment e inner join e.clazz c "
operator|+
literal|"inner join c.schedulingSubpart.instrOfferingConfig ioc "
operator|+
literal|"where x.session.uniqueId=:sessionId and x.examType.uniqueId=:examTypeId and "
operator|+
literal|"o.ownerType="
operator|+
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
operator|.
name|sOwnerTypeConfig
operator|+
literal|" and "
operator|+
literal|"o.ownerId=ioc.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iExamSolver
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|iExamSolver
operator|.
name|getExamTypeId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|ownerId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Long
name|courseId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|course2students
init|=
name|owner2course2students
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|course2students
operator|==
literal|null
condition|)
block|{
name|course2students
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|owner2course2students
operator|.
name|put
argument_list|(
name|ownerId
argument_list|,
name|course2students
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsOfCourse
init|=
name|course2students
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentsOfCourse
operator|==
literal|null
condition|)
block|{
name|studentsOfCourse
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|course2students
operator|.
name|put
argument_list|(
name|courseId
argument_list|,
name|studentsOfCourse
argument_list|)
expr_stmt|;
block|}
name|studentsOfCourse
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
block|}
name|setStatus
argument_list|(
literal|"  Loading students (course)..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select o.uniqueId, e.student.uniqueId, e.courseOffering.uniqueId from "
operator|+
literal|"Exam x inner join x.owners o, "
operator|+
literal|"StudentClassEnrollment e inner join e.courseOffering co "
operator|+
literal|"where x.session.uniqueId=:sessionId and x.examType.uniqueId=:examTypeId and "
operator|+
literal|"o.ownerType="
operator|+
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
operator|.
name|sOwnerTypeCourse
operator|+
literal|" and "
operator|+
literal|"o.ownerId=co.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iExamSolver
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|iExamSolver
operator|.
name|getExamTypeId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|ownerId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Long
name|courseId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|course2students
init|=
name|owner2course2students
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|course2students
operator|==
literal|null
condition|)
block|{
name|course2students
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|owner2course2students
operator|.
name|put
argument_list|(
name|ownerId
argument_list|,
name|course2students
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsOfCourse
init|=
name|course2students
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentsOfCourse
operator|==
literal|null
condition|)
block|{
name|studentsOfCourse
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|course2students
operator|.
name|put
argument_list|(
name|courseId
argument_list|,
name|studentsOfCourse
argument_list|)
expr_stmt|;
block|}
name|studentsOfCourse
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
block|}
name|setStatus
argument_list|(
literal|"  Loading students (offering)..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select o.uniqueId, e.student.uniqueId, e.courseOffering.uniqueId from "
operator|+
literal|"Exam x inner join x.owners o, "
operator|+
literal|"StudentClassEnrollment e inner join e.courseOffering.instructionalOffering io "
operator|+
literal|"where x.session.uniqueId=:sessionId and x.examType.uniqueId=:examTypeId and "
operator|+
literal|"o.ownerType="
operator|+
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
operator|.
name|sOwnerTypeOffering
operator|+
literal|" and "
operator|+
literal|"o.ownerId=io.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iExamSolver
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|iExamSolver
operator|.
name|getExamTypeId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|ownerId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Long
name|courseId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|course2students
init|=
name|owner2course2students
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|course2students
operator|==
literal|null
condition|)
block|{
name|course2students
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|owner2course2students
operator|.
name|put
argument_list|(
name|ownerId
argument_list|,
name|course2students
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsOfCourse
init|=
name|course2students
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentsOfCourse
operator|==
literal|null
condition|)
block|{
name|studentsOfCourse
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|course2students
operator|.
name|put
argument_list|(
name|courseId
argument_list|,
name|studentsOfCourse
argument_list|)
expr_stmt|;
block|}
name|studentsOfCourse
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
name|exam
operator|.
name|createSectionsIncludeCrosslistedDummies
argument_list|(
name|owner2course2students
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|exams
operator|=
name|PdfLegacyExamReport
operator|.
name|loadExams
argument_list|(
name|getSessionId
argument_list|()
argument_list|,
name|iForm
operator|.
name|getExamType
argument_list|()
argument_list|,
literal|true
argument_list|,
name|iForm
operator|.
name|getIgnoreEmptyExams
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|iProgress
operator|=
literal|0.1
expr_stmt|;
comment|/*             if (iForm.getAll()) {                 for (Iterator i=Exam.findAll(session.getUniqueId(), iForm.getExamType()).iterator();i.hasNext();) {                     exams.add(new ExamAssignmentInfo((Exam)i.next()));                 }             } else {                 for (int i=0;i<iForm.getSubjects().length;i++) {                     SubjectArea subject = new SubjectAreaDAO().get(Long.valueOf(iForm.getSubjects()[i]));                     TreeSet<ExamAssignmentInfo> examsThisSubject = new TreeSet();                     for (Iterator j=Exam.findExamsOfSubjectArea(subject.getUniqueId(), iForm.getExamType()).iterator();j.hasNext();) {                         examsThisSubject.add(new ExamAssignmentInfo((Exam)j.next()));                     }                     examsPerSubject.put(subject, examsThisSubject);                 }             }             */
name|Hashtable
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|output
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|SubjectArea
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
argument_list|>
name|outputPerSubject
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|ExamInstructorInfo
argument_list|,
name|File
argument_list|>
name|ireports
init|=
literal|null
decl_stmt|;
name|Hashtable
argument_list|<
name|Student
argument_list|,
name|File
argument_list|>
name|sreports
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
name|getSession
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iForm
operator|.
name|getReports
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|iProgress
operator|=
literal|0.1
operator|+
operator|(
literal|0.8
operator|/
name|iForm
operator|.
name|getReports
argument_list|()
operator|.
name|length
operator|)
operator|*
name|i
expr_stmt|;
name|setStatus
argument_list|(
literal|"Generating "
operator|+
name|iForm
operator|.
name|getReports
argument_list|()
index|[
name|i
index|]
operator|+
literal|"..."
argument_list|)
expr_stmt|;
name|Class
name|reportClass
init|=
name|ExamPdfReportForm
operator|.
name|sRegisteredReports
operator|.
name|get
argument_list|(
name|iForm
operator|.
name|getReports
argument_list|()
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|String
name|reportName
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|entry
range|:
name|PdfLegacyExamReport
operator|.
name|sRegisteredReports
operator|.
name|entrySet
argument_list|()
control|)
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|reportClass
argument_list|)
condition|)
name|reportName
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
if|if
condition|(
name|reportName
operator|==
literal|null
condition|)
name|reportName
operator|=
literal|"r"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
expr_stmt|;
name|String
name|name
init|=
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
name|session
operator|.
name|getSessionStartYear
argument_list|()
operator|+
name|ExamTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|iForm
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|getReference
argument_list|()
operator|+
literal|"_"
operator|+
name|reportName
decl_stmt|;
if|if
condition|(
name|iForm
operator|.
name|getAll
argument_list|()
condition|)
block|{
name|File
name|file
init|=
name|ApplicationProperties
operator|.
name|getTempFile
argument_list|(
name|name
argument_list|,
operator|(
name|iForm
operator|.
name|getModeIdx
argument_list|()
operator|==
name|PdfLegacyExamReport
operator|.
name|sModeText
condition|?
literal|"txt"
else|:
literal|"pdf"
operator|)
argument_list|)
decl_stmt|;
name|log
argument_list|(
literal|"&nbsp;&nbsp;Writing<a href='temp/"
operator|+
name|file
operator|.
name|getName
argument_list|()
operator|+
literal|"'>"
operator|+
name|reportName
operator|+
literal|"."
operator|+
operator|(
name|iForm
operator|.
name|getModeIdx
argument_list|()
operator|==
name|PdfLegacyExamReport
operator|.
name|sModeText
condition|?
literal|"txt"
else|:
literal|"pdf"
operator|)
operator|+
literal|"</a>... ("
operator|+
name|exams
operator|.
name|size
argument_list|()
operator|+
literal|" exams)"
argument_list|)
expr_stmt|;
name|PdfLegacyExamReport
name|report
init|=
operator|(
name|PdfLegacyExamReport
operator|)
name|reportClass
operator|.
name|getConstructor
argument_list|(
name|int
operator|.
name|class
argument_list|,
name|File
operator|.
name|class
argument_list|,
name|Session
operator|.
name|class
argument_list|,
name|ExamType
operator|.
name|class
argument_list|,
name|SubjectArea
operator|.
name|class
argument_list|,
name|Collection
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|iForm
operator|.
name|getModeIdx
argument_list|()
argument_list|,
name|file
argument_list|,
operator|new
name|SessionDAO
argument_list|()
operator|.
name|get
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|,
name|ExamTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|iForm
operator|.
name|getExamType
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
name|exams
argument_list|)
decl_stmt|;
name|report
operator|.
name|setDirect
argument_list|(
name|iForm
operator|.
name|getDirect
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setM2d
argument_list|(
name|iForm
operator|.
name|getM2d
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setBtb
argument_list|(
name|iForm
operator|.
name|getBtb
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setDispRooms
argument_list|(
name|iForm
operator|.
name|getDispRooms
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setNoRoom
argument_list|(
name|iForm
operator|.
name|getNoRoom
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setTotals
argument_list|(
name|iForm
operator|.
name|getTotals
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setLimit
argument_list|(
name|iForm
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
operator|||
name|iForm
operator|.
name|getLimit
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
operator|-
literal|1
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|iForm
operator|.
name|getLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|report
operator|.
name|setRoomCode
argument_list|(
name|iForm
operator|.
name|getRoomCodes
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setDispLimits
argument_list|(
name|iForm
operator|.
name|getDispLimit
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setSince
argument_list|(
name|iForm
operator|.
name|getSince
argument_list|()
operator|==
literal|null
operator|||
name|iForm
operator|.
name|getSince
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd/yyyy"
argument_list|)
operator|.
name|parse
argument_list|(
name|iForm
operator|.
name|getSince
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|report
operator|.
name|setItype
argument_list|(
name|iForm
operator|.
name|getItype
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setClassSchedule
argument_list|(
name|iForm
operator|.
name|getClassSchedule
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|printReport
argument_list|()
expr_stmt|;
name|report
operator|.
name|close
argument_list|()
expr_stmt|;
name|output
operator|.
name|put
argument_list|(
name|reportName
operator|+
literal|"."
operator|+
operator|(
name|iForm
operator|.
name|getModeIdx
argument_list|()
operator|==
name|PdfLegacyExamReport
operator|.
name|sModeText
condition|?
literal|"txt"
else|:
literal|"pdf"
operator|)
argument_list|,
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|report
operator|instanceof
name|InstructorExamReport
operator|&&
name|iForm
operator|.
name|getEmailInstructors
argument_list|()
condition|)
block|{
name|ireports
operator|=
operator|(
operator|(
name|InstructorExamReport
operator|)
name|report
operator|)
operator|.
name|printInstructorReports
argument_list|(
name|iForm
operator|.
name|getModeIdx
argument_list|()
argument_list|,
name|name
argument_list|,
operator|new
name|FileGenerator
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|report
operator|instanceof
name|StudentExamReport
operator|&&
name|iForm
operator|.
name|getEmailStudents
argument_list|()
condition|)
block|{
name|sreports
operator|=
operator|(
operator|(
name|StudentExamReport
operator|)
name|report
operator|)
operator|.
name|printStudentReports
argument_list|(
name|iForm
operator|.
name|getModeIdx
argument_list|()
argument_list|,
name|name
argument_list|,
operator|new
name|FileGenerator
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|iForm
operator|.
name|getSubjects
argument_list|()
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|SubjectArea
name|subject
init|=
operator|new
name|SubjectAreaDAO
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|iForm
operator|.
name|getSubjects
argument_list|()
index|[
name|j
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|file
init|=
name|ApplicationProperties
operator|.
name|getTempFile
argument_list|(
name|name
operator|+
literal|"_"
operator|+
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|,
operator|(
name|iForm
operator|.
name|getModeIdx
argument_list|()
operator|==
name|PdfLegacyExamReport
operator|.
name|sModeText
condition|?
literal|"txt"
else|:
literal|"pdf"
operator|)
argument_list|)
decl_stmt|;
name|int
name|nrExams
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
if|if
condition|(
name|exam
operator|.
name|isOfSubjectArea
argument_list|(
name|subject
argument_list|)
condition|)
name|nrExams
operator|++
expr_stmt|;
block|}
name|log
argument_list|(
literal|"&nbsp;&nbsp;Writing<a href='temp/"
operator|+
name|file
operator|.
name|getName
argument_list|()
operator|+
literal|"'>"
operator|+
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|"_"
operator|+
name|reportName
operator|+
literal|"."
operator|+
operator|(
name|iForm
operator|.
name|getModeIdx
argument_list|()
operator|==
name|PdfLegacyExamReport
operator|.
name|sModeText
condition|?
literal|"txt"
else|:
literal|"pdf"
operator|)
operator|+
literal|"</a>... ("
operator|+
name|nrExams
operator|+
literal|" exams)"
argument_list|)
expr_stmt|;
name|PdfLegacyExamReport
name|report
init|=
operator|(
name|PdfLegacyExamReport
operator|)
name|reportClass
operator|.
name|getConstructor
argument_list|(
name|int
operator|.
name|class
argument_list|,
name|File
operator|.
name|class
argument_list|,
name|Session
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|SubjectArea
operator|.
name|class
argument_list|,
name|Collection
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|iForm
operator|.
name|getModeIdx
argument_list|()
argument_list|,
name|file
argument_list|,
operator|new
name|SessionDAO
argument_list|()
operator|.
name|get
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|,
name|iForm
operator|.
name|getExamType
argument_list|()
argument_list|,
name|subject
argument_list|,
name|exams
argument_list|)
decl_stmt|;
name|report
operator|.
name|setDirect
argument_list|(
name|iForm
operator|.
name|getDirect
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setM2d
argument_list|(
name|iForm
operator|.
name|getM2d
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setBtb
argument_list|(
name|iForm
operator|.
name|getBtb
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setDispRooms
argument_list|(
name|iForm
operator|.
name|getDispRooms
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setNoRoom
argument_list|(
name|iForm
operator|.
name|getNoRoom
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setTotals
argument_list|(
name|iForm
operator|.
name|getTotals
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setLimit
argument_list|(
name|iForm
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
operator|||
name|iForm
operator|.
name|getLimit
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
operator|-
literal|1
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|iForm
operator|.
name|getLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|report
operator|.
name|setRoomCode
argument_list|(
name|iForm
operator|.
name|getRoomCodes
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setDispLimits
argument_list|(
name|iForm
operator|.
name|getDispLimit
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setItype
argument_list|(
name|iForm
operator|.
name|getItype
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setClassSchedule
argument_list|(
name|iForm
operator|.
name|getClassSchedule
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|printReport
argument_list|()
expr_stmt|;
name|report
operator|.
name|close
argument_list|()
expr_stmt|;
name|output
operator|.
name|put
argument_list|(
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|"_"
operator|+
name|reportName
operator|+
literal|"."
operator|+
operator|(
name|iForm
operator|.
name|getModeIdx
argument_list|()
operator|==
name|PdfLegacyExamReport
operator|.
name|sModeText
condition|?
literal|"txt"
else|:
literal|"pdf"
operator|)
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|files
init|=
name|outputPerSubject
operator|.
name|get
argument_list|(
name|subject
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
name|files
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|outputPerSubject
operator|.
name|put
argument_list|(
name|subject
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
name|files
operator|.
name|put
argument_list|(
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|"_"
operator|+
name|reportName
operator|+
literal|"."
operator|+
operator|(
name|iForm
operator|.
name|getModeIdx
argument_list|()
operator|==
name|PdfLegacyExamReport
operator|.
name|sModeText
condition|?
literal|"txt"
else|:
literal|"pdf"
operator|)
argument_list|,
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|report
operator|instanceof
name|InstructorExamReport
operator|&&
name|iForm
operator|.
name|getEmailInstructors
argument_list|()
condition|)
block|{
name|ireports
operator|=
operator|(
operator|(
name|InstructorExamReport
operator|)
name|report
operator|)
operator|.
name|printInstructorReports
argument_list|(
name|iForm
operator|.
name|getModeIdx
argument_list|()
argument_list|,
name|name
argument_list|,
operator|new
name|FileGenerator
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|report
operator|instanceof
name|StudentExamReport
operator|&&
name|iForm
operator|.
name|getEmailStudents
argument_list|()
condition|)
block|{
name|sreports
operator|=
operator|(
operator|(
name|StudentExamReport
operator|)
name|report
operator|)
operator|.
name|printStudentReports
argument_list|(
name|iForm
operator|.
name|getModeIdx
argument_list|()
argument_list|,
name|name
argument_list|,
operator|new
name|FileGenerator
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|iProgress
operator|=
literal|0.9
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|32
operator|*
literal|1024
index|]
decl_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|output
operator|.
name|isEmpty
argument_list|()
condition|)
name|log
argument_list|(
literal|"<font color='orange'>No report generated.</font>"
argument_list|)
expr_stmt|;
if|else if
condition|(
name|iForm
operator|.
name|getEmail
argument_list|()
condition|)
block|{
name|setStatus
argument_list|(
literal|"Sending email(s)..."
argument_list|)
expr_stmt|;
if|if
condition|(
name|iForm
operator|.
name|getEmailDeputies
argument_list|()
condition|)
block|{
name|Hashtable
argument_list|<
name|TimetableManager
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
argument_list|>
name|files2send
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|SubjectArea
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
argument_list|>
name|entry
range|:
name|outputPerSubject
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getTimetableManagers
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|log
argument_list|(
literal|"<font color='orange'>&nbsp;&nbsp;No manager associated with subject area "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|" ("
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|")</font>"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getTimetableManagers
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimetableManager
name|g
init|=
operator|(
name|TimetableManager
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|receiveEmail
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ManagerRole
name|mr
range|:
operator|(
name|Set
argument_list|<
name|ManagerRole
argument_list|>
operator|)
name|g
operator|.
name|getManagerRoles
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|mr
operator|.
name|getRole
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
condition|)
block|{
name|receiveEmail
operator|=
name|mr
operator|.
name|isReceiveEmails
argument_list|()
operator|==
literal|null
condition|?
literal|false
else|:
name|mr
operator|.
name|isReceiveEmails
argument_list|()
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|receiveEmail
condition|)
block|{
if|if
condition|(
name|g
operator|.
name|getEmailAddress
argument_list|()
operator|==
literal|null
operator|||
name|g
operator|.
name|getEmailAddress
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|log
argument_list|(
literal|"<font color='orange'>&nbsp;&nbsp;Manager "
operator|+
name|g
operator|.
name|getName
argument_list|()
operator|+
literal|" has no email address.</font>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|files
init|=
name|files2send
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
name|files
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
argument_list|()
expr_stmt|;
name|files2send
operator|.
name|put
argument_list|(
name|g
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
name|files
operator|.
name|putAll
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|files2send
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
argument_list|(
literal|"<font color='red'>Nothing to send.</font>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Set
argument_list|<
name|TimetableManager
argument_list|>
name|managers
init|=
name|files2send
operator|.
name|keySet
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|managers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TimetableManager
name|manager
init|=
name|managers
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|files
init|=
name|files2send
operator|.
name|get
argument_list|(
name|manager
argument_list|)
decl_stmt|;
name|managers
operator|.
name|remove
argument_list|(
name|manager
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"Sending email to "
operator|+
name|manager
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|manager
operator|.
name|getEmailAddress
argument_list|()
operator|+
literal|")..."
argument_list|)
expr_stmt|;
try|try
block|{
name|Email
name|mail
init|=
name|Email
operator|.
name|createEmail
argument_list|()
decl_stmt|;
name|mail
operator|.
name|setSubject
argument_list|(
name|iForm
operator|.
name|getSubject
argument_list|()
operator|==
literal|null
condition|?
literal|"Examination Report"
else|:
name|iForm
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|mail
operator|.
name|setText
argument_list|(
operator|(
name|iForm
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|iForm
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\r\n\r\n"
operator|)
operator|+
literal|"For an up-to-date report, please visit "
operator|+
name|iUrl
operator|+
literal|"/\r\n\r\n"
operator|+
literal|"This email was automatically generated by "
operator|+
literal|"UniTime "
operator|+
name|Constants
operator|.
name|getVersion
argument_list|()
operator|+
literal|" (Univesity Timetabling Application, http://www.unitime.org)."
argument_list|)
expr_stmt|;
name|mail
operator|.
name|addRecipient
argument_list|(
name|manager
operator|.
name|getEmailAddress
argument_list|()
argument_list|,
name|manager
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|TimetableManager
argument_list|>
name|i
init|=
name|managers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimetableManager
name|m
init|=
operator|(
name|TimetableManager
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|.
name|equals
argument_list|(
name|files2send
operator|.
name|get
argument_list|(
name|m
argument_list|)
argument_list|)
condition|)
block|{
name|log
argument_list|(
literal|"&nbsp;&nbsp;Including "
operator|+
name|m
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|m
operator|.
name|getEmailAddress
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|mail
operator|.
name|addRecipient
argument_list|(
name|m
operator|.
name|getEmailAddress
argument_list|()
argument_list|,
name|m
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iForm
operator|.
name|getAddress
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|iForm
operator|.
name|getAddress
argument_list|()
argument_list|,
literal|";,\n\r "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|mail
operator|.
name|addRecipient
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|iForm
operator|.
name|getCc
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|iForm
operator|.
name|getCc
argument_list|()
argument_list|,
literal|";,\n\r "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|mail
operator|.
name|addRecipientCC
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|iForm
operator|.
name|getBcc
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|iForm
operator|.
name|getBcc
argument_list|()
argument_list|,
literal|";,\n\r "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|mail
operator|.
name|addRecipientBCC
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|entry
range|:
name|files
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|mail
operator|.
name|addAttachement
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
name|session
operator|.
name|getSessionStartYear
argument_list|()
operator|+
name|ExamTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|iForm
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|getReference
argument_list|()
operator|+
literal|"_"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"&nbsp;&nbsp;Attaching<a href='temp/"
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'>"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"</a>"
argument_list|)
expr_stmt|;
block|}
name|mail
operator|.
name|send
argument_list|()
expr_stmt|;
name|log
argument_list|(
literal|"Email sent."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
argument_list|(
literal|"<font color='red'>Unable to send email: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</font>"
argument_list|)
expr_stmt|;
name|setError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
try|try
block|{
name|Email
name|mail
init|=
name|Email
operator|.
name|createEmail
argument_list|()
decl_stmt|;
name|mail
operator|.
name|setSubject
argument_list|(
name|iForm
operator|.
name|getSubject
argument_list|()
operator|==
literal|null
condition|?
literal|"Examination Report"
else|:
name|iForm
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|mail
operator|.
name|setText
argument_list|(
operator|(
name|iForm
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|iForm
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\r\n\r\n"
operator|)
operator|+
literal|"For an up-to-date report, please visit "
operator|+
name|iUrl
operator|+
literal|"/\r\n\r\n"
operator|+
literal|"This email was automatically generated by "
operator|+
literal|"UniTime "
operator|+
name|Constants
operator|.
name|getVersion
argument_list|()
operator|+
literal|" (Univesity Timetabling Application, http://www.unitime.org)."
argument_list|)
expr_stmt|;
if|if
condition|(
name|iForm
operator|.
name|getAddress
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|iForm
operator|.
name|getAddress
argument_list|()
argument_list|,
literal|";,\n\r "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|mail
operator|.
name|addRecipient
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|iForm
operator|.
name|getCc
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|iForm
operator|.
name|getCc
argument_list|()
argument_list|,
literal|";,\n\r "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|mail
operator|.
name|addRecipientCC
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|iForm
operator|.
name|getBcc
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|iForm
operator|.
name|getBcc
argument_list|()
argument_list|,
literal|";,\n\r "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|mail
operator|.
name|addRecipientBCC
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|entry
range|:
name|output
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|mail
operator|.
name|addAttachement
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
name|session
operator|.
name|getSessionStartYear
argument_list|()
operator|+
name|ExamTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|iForm
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|getReference
argument_list|()
operator|+
literal|"_"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mail
operator|.
name|send
argument_list|()
expr_stmt|;
name|log
argument_list|(
literal|"Email sent."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
argument_list|(
literal|"<font color='red'>Unable to send email: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</font>"
argument_list|)
expr_stmt|;
name|setError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iForm
operator|.
name|getEmailInstructors
argument_list|()
operator|&&
name|ireports
operator|!=
literal|null
operator|&&
operator|!
name|ireports
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setStatus
argument_list|(
literal|"Emailing instructors..."
argument_list|)
expr_stmt|;
for|for
control|(
name|ExamInstructorInfo
name|instructor
range|:
operator|new
name|TreeSet
argument_list|<
name|ExamInstructorInfo
argument_list|>
argument_list|(
name|ireports
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|File
name|report
init|=
name|ireports
operator|.
name|get
argument_list|(
name|instructor
argument_list|)
decl_stmt|;
name|String
name|email
init|=
name|instructor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
decl_stmt|;
if|if
condition|(
name|email
operator|==
literal|null
operator|||
name|email
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|log
argument_list|(
literal|"&nbsp;&nbsp;<font color='orange'>Unable to email<a href='temp/"
operator|+
name|report
operator|.
name|getName
argument_list|()
operator|+
literal|"'>"
operator|+
name|instructor
operator|.
name|getName
argument_list|()
operator|+
literal|"</a> -- instructor has no email address.</font>"
argument_list|)
expr_stmt|;
continue|continue;
block|}
try|try
block|{
name|Email
name|mail
init|=
name|Email
operator|.
name|createEmail
argument_list|()
decl_stmt|;
name|mail
operator|.
name|setSubject
argument_list|(
name|iForm
operator|.
name|getSubject
argument_list|()
operator|==
literal|null
condition|?
literal|"Examination Report"
else|:
name|iForm
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|mail
operator|.
name|setText
argument_list|(
operator|(
name|iForm
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|iForm
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\r\n\r\n"
operator|)
operator|+
literal|"For an up-to-date report, please visit "
operator|+
name|iUrl
operator|+
literal|"/exams.do\r\n\r\n"
operator|+
literal|"This email was automatically generated by "
operator|+
literal|"UniTime "
operator|+
name|Constants
operator|.
name|getVersion
argument_list|()
operator|+
literal|" (Univesity Timetabling Application, http://www.unitime.org)."
argument_list|)
expr_stmt|;
name|mail
operator|.
name|addRecipient
argument_list|(
name|email
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|iForm
operator|.
name|getCc
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|iForm
operator|.
name|getCc
argument_list|()
argument_list|,
literal|";,\n\r "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|mail
operator|.
name|addRecipientCC
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|iForm
operator|.
name|getBcc
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|iForm
operator|.
name|getBcc
argument_list|()
argument_list|,
literal|";,\n\r "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|mail
operator|.
name|addRecipientBCC
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mail
operator|.
name|addAttachement
argument_list|(
name|report
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
name|session
operator|.
name|getSessionStartYear
argument_list|()
operator|+
name|ExamTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|iForm
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|getReference
argument_list|()
operator|+
operator|(
name|iForm
operator|.
name|getModeIdx
argument_list|()
operator|==
name|PdfLegacyExamReport
operator|.
name|sModeText
condition|?
literal|".txt"
else|:
literal|".pdf"
operator|)
argument_list|)
expr_stmt|;
name|mail
operator|.
name|send
argument_list|()
expr_stmt|;
name|log
argument_list|(
literal|"&nbsp;&nbsp;An email was sent to<a href='temp/"
operator|+
name|report
operator|.
name|getName
argument_list|()
operator|+
literal|"'>"
operator|+
name|instructor
operator|.
name|getName
argument_list|()
operator|+
literal|"</a>."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
argument_list|(
literal|"&nbsp;&nbsp;<font color='orange'>Unable to email<a href='temp/"
operator|+
name|report
operator|.
name|getName
argument_list|()
operator|+
literal|"'>"
operator|+
name|instructor
operator|.
name|getName
argument_list|()
operator|+
literal|"</a> -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|".</font>"
argument_list|)
expr_stmt|;
name|setError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|log
argument_list|(
literal|"Emails sent."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iForm
operator|.
name|getEmailStudents
argument_list|()
operator|&&
name|sreports
operator|!=
literal|null
operator|&&
operator|!
name|sreports
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setStatus
argument_list|(
literal|"Emailing students..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Student
name|student
range|:
operator|new
name|TreeSet
argument_list|<
name|Student
argument_list|>
argument_list|(
name|sreports
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|File
name|report
init|=
name|sreports
operator|.
name|get
argument_list|(
name|student
argument_list|)
decl_stmt|;
name|String
name|email
init|=
name|student
operator|.
name|getEmail
argument_list|()
decl_stmt|;
if|if
condition|(
name|email
operator|==
literal|null
operator|||
name|email
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|log
argument_list|(
literal|"&nbsp;&nbsp;<font color='orange'>Unable to email<a href='temp/"
operator|+
name|report
operator|.
name|getName
argument_list|()
operator|+
literal|"'>"
operator|+
name|student
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFist
argument_list|)
operator|+
literal|"</a> -- student has no email address.</font>"
argument_list|)
expr_stmt|;
continue|continue;
block|}
try|try
block|{
name|Email
name|mail
init|=
name|Email
operator|.
name|createEmail
argument_list|()
decl_stmt|;
name|mail
operator|.
name|setSubject
argument_list|(
name|iForm
operator|.
name|getSubject
argument_list|()
operator|==
literal|null
condition|?
literal|"Examination Report"
else|:
name|iForm
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|mail
operator|.
name|setText
argument_list|(
operator|(
name|iForm
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|iForm
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\r\n\r\n"
operator|)
operator|+
literal|"For an up-to-date report, please visit "
operator|+
name|iUrl
operator|+
literal|"/exams.do\r\n\r\n"
operator|+
literal|"This email was automatically generated by "
operator|+
literal|"UniTime "
operator|+
name|Constants
operator|.
name|getVersion
argument_list|()
operator|+
literal|" (Univesity Timetabling Application, http://www.unitime.org)."
argument_list|)
expr_stmt|;
name|mail
operator|.
name|addRecipient
argument_list|(
name|email
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|iForm
operator|.
name|getCc
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|iForm
operator|.
name|getCc
argument_list|()
argument_list|,
literal|";,\n\r "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|mail
operator|.
name|addRecipientCC
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|iForm
operator|.
name|getBcc
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|iForm
operator|.
name|getBcc
argument_list|()
argument_list|,
literal|";,\n\r "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|mail
operator|.
name|addRecipientBCC
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mail
operator|.
name|addAttachement
argument_list|(
name|report
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
name|session
operator|.
name|getSessionStartYear
argument_list|()
operator|+
name|ExamTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|iForm
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|getReference
argument_list|()
operator|+
operator|(
name|iForm
operator|.
name|getModeIdx
argument_list|()
operator|==
name|PdfLegacyExamReport
operator|.
name|sModeText
condition|?
literal|".txt"
else|:
literal|".pdf"
operator|)
argument_list|)
expr_stmt|;
name|mail
operator|.
name|send
argument_list|()
expr_stmt|;
name|log
argument_list|(
literal|"&nbsp;&nbsp;An email was sent to<a href='temp/"
operator|+
name|report
operator|.
name|getName
argument_list|()
operator|+
literal|"'>"
operator|+
name|student
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFist
argument_list|)
operator|+
literal|"</a>."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
argument_list|(
literal|"&nbsp;&nbsp;<font color='orange'>Unable to email<a href='temp/"
operator|+
name|report
operator|.
name|getName
argument_list|()
operator|+
literal|"'>"
operator|+
name|student
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFist
argument_list|)
operator|+
literal|"</a> -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|".</font>"
argument_list|)
expr_stmt|;
name|setError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|log
argument_list|(
literal|"Emails sent."
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|output
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Nothing generated."
argument_list|)
throw|;
block|}
if|else if
condition|(
name|output
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|setOutput
argument_list|(
name|output
operator|.
name|elements
argument_list|()
operator|.
name|nextElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FileInputStream
name|fis
init|=
literal|null
decl_stmt|;
name|ZipOutputStream
name|zip
init|=
literal|null
decl_stmt|;
try|try
block|{
name|File
name|zipFile
init|=
name|ApplicationProperties
operator|.
name|getTempFile
argument_list|(
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
name|session
operator|.
name|getSessionStartYear
argument_list|()
operator|+
name|ExamTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|iForm
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|getReference
argument_list|()
argument_list|,
literal|"zip"
argument_list|)
decl_stmt|;
name|log
argument_list|(
literal|"Writing<a href='temp/"
operator|+
name|zipFile
operator|.
name|getName
argument_list|()
operator|+
literal|"'>"
operator|+
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
name|session
operator|.
name|getSessionStartYear
argument_list|()
operator|+
name|ExamTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|iForm
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|getReference
argument_list|()
operator|+
literal|".zip</a>..."
argument_list|)
expr_stmt|;
name|zip
operator|=
operator|new
name|ZipOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|zipFile
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|entry
range|:
name|output
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|zip
operator|.
name|putNextEntry
argument_list|(
operator|new
name|ZipEntry
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fis
operator|=
operator|new
name|FileInputStream
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|fis
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>
literal|0
condition|)
name|zip
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
name|fis
operator|=
literal|null
expr_stmt|;
name|zip
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
block|}
name|zip
operator|.
name|flush
argument_list|()
expr_stmt|;
name|zip
operator|.
name|close
argument_list|()
expr_stmt|;
name|setOutput
argument_list|(
name|zipFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|fis
operator|!=
literal|null
condition|)
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|zip
operator|!=
literal|null
condition|)
name|zip
operator|.
name|close
argument_list|()
expr_stmt|;
name|setError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|iProgress
operator|=
literal|1.0
expr_stmt|;
name|setStatus
argument_list|(
literal|"All done."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
argument_list|(
literal|"<font color='red'>Process failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" (exception "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|")</font>"
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|setError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|progress
parameter_list|()
block|{
return|return
name|iProgress
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|TYPE
return|;
block|}
specifier|public
specifier|static
class|class
name|FileGenerator
implements|implements
name|InstructorExamReport
operator|.
name|FileGenerator
block|{
name|String
name|iName
decl_stmt|;
specifier|public
name|FileGenerator
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|File
name|generate
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|ext
parameter_list|)
block|{
return|return
name|ApplicationProperties
operator|.
name|getTempFile
argument_list|(
name|iName
operator|+
literal|"_"
operator|+
name|prefix
argument_list|,
name|ext
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

