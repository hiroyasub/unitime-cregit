begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|queue
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|FileDataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  *   * @author Tomas Muller  *  */
end_comment

begin_class
specifier|public
class|class
name|LocalQueueProcessor
extends|extends
name|Thread
implements|implements
name|QueueProcessor
block|{
specifier|protected
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|QueueProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|long
name|sTimeToKeep
init|=
literal|1000
operator|*
literal|60
operator|*
literal|60
operator|*
literal|10
decl_stmt|;
comment|// Keep done items for at least 10 hours.
specifier|protected
specifier|static
name|long
name|sTimeToSleep
init|=
literal|1000
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
comment|// Sleep no more than an hour.
specifier|private
name|Queue
argument_list|<
name|QueueItem
argument_list|>
name|iQueue
init|=
operator|new
name|LinkedList
argument_list|<
name|QueueItem
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|QueueItem
argument_list|>
name|iFinished
init|=
operator|new
name|ArrayList
argument_list|<
name|QueueItem
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|QueueItem
name|iItem
init|=
literal|null
decl_stmt|;
specifier|private
name|RunningItem
name|iRunningItem
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|static
name|LocalQueueProcessor
name|sInstance
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iCanContinue
init|=
literal|true
decl_stmt|;
specifier|protected
name|LocalQueueProcessor
parameter_list|()
block|{
name|super
argument_list|(
literal|"QueueProcessor"
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Queue processor is up and running."
argument_list|)
expr_stmt|;
comment|// While can continue
while|while
condition|(
name|iCanContinue
condition|)
block|{
synchronized|synchronized
init|(
name|iQueue
init|)
block|{
comment|// Cleanup finished items (delete those that are too old)
name|long
name|now
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|QueueItem
argument_list|>
name|i
init|=
name|iFinished
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|QueueItem
name|item
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|finished
argument_list|()
operator|==
literal|null
operator|||
name|now
operator|-
name|item
operator|.
name|finished
argument_list|()
operator|.
name|getTime
argument_list|()
operator|>
name|sTimeToKeep
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
comment|// Check for a new item from the queue
if|if
condition|(
name|iQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Sleep for it, if there is nothing to do
name|sLog
operator|.
name|info
argument_list|(
literal|"Waiting for tasks to run..."
argument_list|)
expr_stmt|;
try|try
block|{
name|iQueue
operator|.
name|wait
argument_list|(
name|sTimeToSleep
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Interrupted."
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Take new item from the top of the queue
name|iItem
operator|=
name|iQueue
operator|.
name|poll
argument_list|()
expr_stmt|;
comment|// Null if queue is empty
if|if
condition|(
name|iItem
operator|==
literal|null
condition|)
continue|continue;
block|}
comment|// Execute the item
name|sLog
operator|.
name|info
argument_list|(
literal|"Executing "
operator|+
name|iItem
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|iRunningItem
operator|=
operator|new
name|RunningItem
argument_list|(
name|iItem
argument_list|)
expr_stmt|;
name|iRunningItem
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|iRunningItem
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Task "
operator|+
name|iItem
operator|.
name|name
argument_list|()
operator|+
literal|" was interrupted."
argument_list|)
expr_stmt|;
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"Task "
operator|+
name|iItem
operator|.
name|name
argument_list|()
operator|+
operator|(
name|iItem
operator|.
name|hasError
argument_list|()
condition|?
literal|" failed ("
operator|+
name|iItem
operator|.
name|error
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|+
literal|")."
else|:
literal|" is done."
operator|)
argument_list|)
expr_stmt|;
comment|// Put the item into the list of finished items
synchronized|synchronized
init|(
name|iQueue
init|)
block|{
name|iFinished
operator|.
name|add
argument_list|(
name|iItem
argument_list|)
expr_stmt|;
name|iItem
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"Queue processor is down."
argument_list|)
expr_stmt|;
name|sInstance
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|QueueProcessor
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|sInstance
operator|==
literal|null
condition|)
block|{
name|sInstance
operator|=
operator|new
name|LocalQueueProcessor
argument_list|()
expr_stmt|;
name|sInstance
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
return|return
name|sInstance
return|;
block|}
specifier|public
name|String
name|generateId
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|id
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|get
argument_list|(
name|id
argument_list|)
operator|==
literal|null
condition|)
return|return
name|id
return|;
block|}
block|}
specifier|public
name|QueueItem
name|add
parameter_list|(
name|QueueItem
name|item
parameter_list|)
block|{
synchronized|synchronized
init|(
name|iQueue
init|)
block|{
if|if
condition|(
name|item
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
name|item
operator|.
name|setId
argument_list|(
name|generateId
argument_list|()
argument_list|)
expr_stmt|;
name|iQueue
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|iQueue
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
return|return
name|item
return|;
block|}
specifier|public
name|List
argument_list|<
name|QueueItem
argument_list|>
name|getItems
parameter_list|(
name|String
name|ownerId
parameter_list|,
name|Long
name|sessionId
parameter_list|,
name|String
name|type
parameter_list|)
block|{
synchronized|synchronized
init|(
name|iQueue
init|)
block|{
name|List
argument_list|<
name|QueueItem
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|QueueItem
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|QueueItem
name|item
range|:
name|iFinished
control|)
block|{
if|if
condition|(
name|ownerId
operator|!=
literal|null
operator|&&
operator|!
name|ownerId
operator|.
name|equals
argument_list|(
name|item
operator|.
name|getOwnerId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|sessionId
operator|!=
literal|null
operator|&&
operator|!
name|sessionId
operator|.
name|equals
argument_list|(
name|item
operator|.
name|getSessionId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
operator|!
name|type
operator|.
name|equals
argument_list|(
name|item
operator|.
name|type
argument_list|()
argument_list|)
condition|)
continue|continue;
name|ret
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iItem
operator|!=
literal|null
condition|)
block|{
name|boolean
name|add
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|ownerId
operator|!=
literal|null
operator|&&
operator|!
name|ownerId
operator|.
name|equals
argument_list|(
name|iItem
operator|.
name|getOwnerId
argument_list|()
argument_list|)
condition|)
name|add
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|sessionId
operator|!=
literal|null
operator|&&
operator|!
name|sessionId
operator|.
name|equals
argument_list|(
name|iItem
operator|.
name|getSessionId
argument_list|()
argument_list|)
condition|)
name|add
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
operator|!
name|type
operator|.
name|equals
argument_list|(
name|iItem
operator|.
name|type
argument_list|()
argument_list|)
condition|)
name|add
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|add
condition|)
name|ret
operator|.
name|add
argument_list|(
name|iItem
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|QueueItem
name|item
range|:
name|iQueue
control|)
block|{
if|if
condition|(
name|ownerId
operator|!=
literal|null
operator|&&
operator|!
name|ownerId
operator|.
name|equals
argument_list|(
name|item
operator|.
name|getOwnerId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|sessionId
operator|!=
literal|null
operator|&&
operator|!
name|sessionId
operator|.
name|equals
argument_list|(
name|item
operator|.
name|getSessionId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
operator|!
name|type
operator|.
name|equals
argument_list|(
name|item
operator|.
name|type
argument_list|()
argument_list|)
condition|)
continue|continue;
name|ret
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
specifier|public
name|QueueItem
name|get
parameter_list|(
name|String
name|id
parameter_list|)
block|{
synchronized|synchronized
init|(
name|iQueue
init|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|QueueItem
argument_list|>
name|i
init|=
name|iQueue
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|QueueItem
name|item
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|item
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
return|return
name|item
return|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|QueueItem
argument_list|>
name|i
init|=
name|iFinished
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|QueueItem
name|item
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|item
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
return|return
name|item
return|;
block|}
block|}
if|if
condition|(
name|iItem
operator|!=
literal|null
operator|&&
name|id
operator|.
name|equals
argument_list|(
name|iItem
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
return|return
name|iItem
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|QueueItem
name|getByExecutionId
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
synchronized|synchronized
init|(
name|iQueue
init|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|QueueItem
argument_list|>
name|i
init|=
name|iQueue
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|QueueItem
name|item
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|item
operator|.
name|getTaskExecutionId
argument_list|()
argument_list|)
condition|)
return|return
name|item
return|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|QueueItem
argument_list|>
name|i
init|=
name|iFinished
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|QueueItem
name|item
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|item
operator|.
name|getTaskExecutionId
argument_list|()
argument_list|)
condition|)
return|return
name|item
return|;
block|}
block|}
if|if
condition|(
name|iItem
operator|!=
literal|null
operator|&&
name|id
operator|.
name|equals
argument_list|(
name|iItem
operator|.
name|getTaskExecutionId
argument_list|()
argument_list|)
condition|)
return|return
name|iItem
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|remove
parameter_list|(
name|String
name|id
parameter_list|)
block|{
synchronized|synchronized
init|(
name|iQueue
init|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|QueueItem
argument_list|>
name|i
init|=
name|iQueue
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|QueueItem
name|item
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|item
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
for|for
control|(
name|Iterator
argument_list|<
name|QueueItem
argument_list|>
name|i
init|=
name|iFinished
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|QueueItem
name|item
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|item
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
if|if
condition|(
name|iItem
operator|!=
literal|null
operator|&&
name|id
operator|.
name|equals
argument_list|(
name|iItem
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|iRunningItem
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|void
name|stopProcessor
parameter_list|()
block|{
if|if
condition|(
name|sInstance
operator|==
literal|null
condition|)
return|return;
name|sLog
operator|.
name|info
argument_list|(
literal|"Stopping queue processor..."
argument_list|)
expr_stmt|;
try|try
block|{
name|sInstance
operator|.
name|iCanContinue
operator|=
literal|false
expr_stmt|;
name|sInstance
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|sInstance
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
block|}
block|}
specifier|static
class|class
name|RunningItem
extends|extends
name|Thread
block|{
name|boolean
name|iInterrupted
init|=
literal|false
decl_stmt|;
name|QueueItem
name|iRunningItem
init|=
literal|null
decl_stmt|;
specifier|private
name|RunningItem
parameter_list|(
name|QueueItem
name|item
parameter_list|)
block|{
name|super
argument_list|(
literal|"QueueRunner("
operator|+
name|item
operator|.
name|name
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|iRunningItem
operator|=
name|item
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|iRunningItem
operator|.
name|executeItem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
name|void
name|cancel
parameter_list|()
block|{
if|if
condition|(
name|iInterrupted
condition|)
block|{
name|stop
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|interrupt
argument_list|()
expr_stmt|;
name|iInterrupted
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|DataSource
name|getFile
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|QueueItem
name|item
init|=
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|!=
literal|null
operator|&&
name|item
operator|.
name|hasOutput
argument_list|()
condition|)
return|return
operator|new
name|FileDataSource
argument_list|(
name|item
operator|.
name|output
argument_list|()
argument_list|)
return|;
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

