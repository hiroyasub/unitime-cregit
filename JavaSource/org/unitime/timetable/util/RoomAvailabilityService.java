begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|DocumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|DocumentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|SAXReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|XMLWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|RoomAvailabilityInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_class
specifier|public
class|class
name|RoomAvailabilityService
implements|implements
name|RoomAvailabilityInterface
block|{
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RoomAvailabilityInterface
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DecimalFormat
name|sDf
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.0"
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|iStop
init|=
literal|false
decl_stmt|;
specifier|private
name|RefreshThread
name|iRefreshThread
init|=
literal|null
decl_stmt|;
specifier|private
name|long
name|iMaxAge
init|=
literal|1000
operator|*
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.room.availability.maxage"
argument_list|,
literal|"600"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|long
name|iRefreshRate
init|=
literal|1000
operator|*
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.room.availability.refresh"
argument_list|,
literal|"60"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|long
name|iTimeToLive
init|=
literal|1000
operator|*
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.room.availability.timetolive"
argument_list|,
literal|"3600"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|long
name|iTimeout
init|=
literal|1000
operator|*
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.room.availability.timeout"
argument_list|,
literal|"60"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|File
name|iRequestFile
init|=
operator|new
name|File
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.room.availability.request"
argument_list|,
name|ApplicationProperties
operator|.
name|getDataFolder
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"request.xml"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|File
name|iResponseFile
init|=
operator|new
name|File
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.room.availability.response"
argument_list|,
name|ApplicationProperties
operator|.
name|getDataFolder
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"response.xml"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|iDelete
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.room.availability.delete"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|Vector
argument_list|<
name|CacheElement
argument_list|>
name|iCache
init|=
operator|new
name|Vector
argument_list|<
name|CacheElement
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|RoomAvailabilityService
parameter_list|()
block|{
block|}
specifier|public
name|Collection
argument_list|<
name|TimeBlock
argument_list|>
name|getRoomAvailability
parameter_list|(
name|Location
name|location
parameter_list|,
name|Date
name|startTime
parameter_list|,
name|Date
name|endTime
parameter_list|,
name|String
name|excludeType
parameter_list|)
block|{
if|if
condition|(
name|location
operator|instanceof
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
condition|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
name|room
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
operator|)
name|location
decl_stmt|;
return|return
name|getRoomAvailability
argument_list|(
name|room
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|room
operator|.
name|getBuildingAbbv
argument_list|()
argument_list|,
name|room
operator|.
name|getRoomNumber
argument_list|()
argument_list|,
name|startTime
argument_list|,
name|endTime
argument_list|,
name|excludeType
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|TimeBlock
argument_list|>
name|getRoomAvailability
parameter_list|(
name|String
name|roomExternalId
parameter_list|,
name|String
name|buildingAbbv
parameter_list|,
name|String
name|roomNbr
parameter_list|,
name|Date
name|startTime
parameter_list|,
name|Date
name|endTime
parameter_list|,
name|String
name|excludeType
parameter_list|)
block|{
name|TimeFrame
name|time
init|=
operator|new
name|TimeFrame
argument_list|(
name|startTime
argument_list|,
name|endTime
argument_list|)
decl_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"Get: "
operator|+
name|time
operator|+
literal|" ("
operator|+
name|buildingAbbv
operator|+
literal|" "
operator|+
name|roomNbr
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|CacheElement
name|cache
init|=
name|get
argument_list|(
name|time
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Cache covering "
operator|+
name|time
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
synchronized|synchronized
init|(
name|cache
init|)
block|{
if|if
condition|(
operator|!
name|cache
operator|.
name|isActive
argument_list|()
operator|&&
operator|!
name|cache
operator|.
name|isDirty
argument_list|()
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Cache "
operator|+
name|cache
operator|+
literal|" not active."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|else if
condition|(
name|iMaxAge
operator|>
literal|0
operator|&&
name|cache
operator|.
name|getAge
argument_list|()
operator|>
name|iMaxAge
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Cache "
operator|+
name|cache
operator|+
literal|" too old, waiting for an update..."
argument_list|)
expr_stmt|;
name|cache
operator|.
name|markDirty
argument_list|()
expr_stmt|;
try|try
block|{
name|iRefreshThread
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalMonitorStateException
name|e
parameter_list|)
block|{
block|}
try|try
block|{
name|cache
operator|.
name|wait
argument_list|(
name|iTimeout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Wait for an update of "
operator|+
name|cache
operator|+
literal|" got timed out."
argument_list|)
expr_stmt|;
name|cache
operator|.
name|deactivate
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|cache
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Cache "
operator|+
name|cache
operator|+
literal|" is not active."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|sLog
operator|.
name|debug
argument_list|(
literal|"Return: "
operator|+
name|cache
operator|.
name|get
argument_list|(
operator|new
name|Room
argument_list|(
name|roomExternalId
argument_list|,
name|buildingAbbv
argument_list|,
name|roomNbr
argument_list|)
argument_list|,
name|excludeType
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cache
operator|.
name|get
argument_list|(
operator|new
name|Room
argument_list|(
name|roomExternalId
argument_list|,
name|buildingAbbv
argument_list|,
name|roomNbr
argument_list|)
argument_list|,
name|excludeType
argument_list|)
return|;
block|}
else|else
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"Return: "
operator|+
name|cache
operator|.
name|get
argument_list|(
operator|new
name|Room
argument_list|(
name|roomExternalId
argument_list|,
name|buildingAbbv
argument_list|,
name|roomNbr
argument_list|)
argument_list|,
name|excludeType
argument_list|)
operator|+
literal|" from "
operator|+
name|cache
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return
name|cache
operator|.
name|get
argument_list|(
operator|new
name|Room
argument_list|(
name|roomExternalId
argument_list|,
name|buildingAbbv
argument_list|,
name|roomNbr
argument_list|)
argument_list|,
name|excludeType
argument_list|)
return|;
block|}
block|}
block|}
specifier|public
name|String
name|getTimeStamp
parameter_list|(
name|Date
name|startTime
parameter_list|,
name|Date
name|endTime
parameter_list|,
name|String
name|excludeType
parameter_list|)
block|{
name|TimeFrame
name|time
init|=
operator|new
name|TimeFrame
argument_list|(
name|startTime
argument_list|,
name|endTime
argument_list|)
decl_stmt|;
name|CacheElement
name|cache
init|=
name|get
argument_list|(
name|time
argument_list|)
decl_stmt|;
return|return
operator|(
name|cache
operator|==
literal|null
condition|?
literal|null
else|:
name|cache
operator|.
name|getTimestamp
argument_list|()
operator|)
return|;
block|}
specifier|public
name|CacheElement
name|get
parameter_list|(
name|TimeFrame
name|time
parameter_list|)
block|{
synchronized|synchronized
init|(
name|iCache
init|)
block|{
for|for
control|(
name|CacheElement
name|cache
range|:
name|iCache
control|)
if|if
condition|(
name|cache
operator|.
name|cover
argument_list|(
name|time
argument_list|)
condition|)
return|return
name|cache
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|activate
parameter_list|(
name|Session
name|session
parameter_list|,
name|Date
name|startTime
parameter_list|,
name|Date
name|endTime
parameter_list|,
name|String
name|excludeType
parameter_list|,
name|boolean
name|waitForSync
parameter_list|)
block|{
name|TimeFrame
name|time
init|=
operator|new
name|TimeFrame
argument_list|(
name|startTime
argument_list|,
name|endTime
argument_list|)
decl_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"Activate: "
operator|+
name|time
argument_list|)
expr_stmt|;
name|CacheElement
name|cache
init|=
name|get
argument_list|(
name|time
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
name|cache
operator|=
operator|new
name|CacheElement
argument_list|(
name|session
operator|.
name|getAcademicYear
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|,
name|time
argument_list|)
expr_stmt|;
name|iCache
operator|.
name|add
argument_list|(
name|cache
argument_list|)
expr_stmt|;
block|}
else|else
block|{
synchronized|synchronized
init|(
name|cache
init|)
block|{
name|cache
operator|.
name|markDirty
argument_list|()
expr_stmt|;
block|}
block|}
synchronized|synchronized
init|(
name|iRefreshThread
init|)
block|{
name|iRefreshThread
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|waitForSync
condition|)
block|{
synchronized|synchronized
init|(
name|cache
init|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Activate: waiting for update of "
operator|+
name|time
argument_list|)
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|wait
argument_list|(
name|iTimeout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Wait for an update of "
operator|+
name|cache
operator|+
literal|" got timed out."
argument_list|)
expr_stmt|;
name|cache
operator|.
name|deactivate
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|cache
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Cache "
operator|+
name|cache
operator|+
literal|" is not active."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|startService
parameter_list|()
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Starting room availability service"
argument_list|)
expr_stmt|;
name|iRefreshThread
operator|=
operator|new
name|RefreshThread
argument_list|()
expr_stmt|;
name|iRefreshThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|stopService
parameter_list|()
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Stopping room availability service"
argument_list|)
expr_stmt|;
name|iStop
operator|=
literal|true
expr_stmt|;
name|iRefreshThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|Document
name|createRequest
parameter_list|(
name|CacheElement
name|cache
parameter_list|)
block|{
name|Document
name|request
init|=
name|DocumentHelper
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|Element
name|params
init|=
name|request
operator|.
name|addElement
argument_list|(
literal|"parameters"
argument_list|)
decl_stmt|;
name|params
operator|.
name|addAttribute
argument_list|(
literal|"created"
argument_list|,
operator|new
name|Date
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|addElement
argument_list|(
literal|"year"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"value"
argument_list|,
name|cache
operator|.
name|getYear
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|addElement
argument_list|(
literal|"term"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"value"
argument_list|,
name|cache
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|addElement
argument_list|(
literal|"campus"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"value"
argument_list|,
name|cache
operator|.
name|getCampus
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|addElement
argument_list|(
literal|"beginDate"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"value"
argument_list|,
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd/yyyy"
argument_list|)
operator|.
name|format
argument_list|(
name|cache
operator|.
name|getTimeFrame
argument_list|()
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|addElement
argument_list|(
literal|"endDate"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"value"
argument_list|,
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd/yyyy"
argument_list|)
operator|.
name|format
argument_list|(
name|cache
operator|.
name|getTimeFrame
argument_list|()
operator|.
name|getEndTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|addElement
argument_list|(
literal|"startTime"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"value"
argument_list|,
operator|new
name|SimpleDateFormat
argument_list|(
literal|"HH:mm"
argument_list|)
operator|.
name|format
argument_list|(
name|cache
operator|.
name|getTimeFrame
argument_list|()
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|addElement
argument_list|(
literal|"endTime"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"value"
argument_list|,
operator|new
name|SimpleDateFormat
argument_list|(
literal|"HH:mm"
argument_list|)
operator|.
name|format
argument_list|(
name|cache
operator|.
name|getTimeFrame
argument_list|()
operator|.
name|getEndTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
specifier|protected
name|void
name|sendRequest
parameter_list|(
name|Document
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|FileOutputStream
name|fos
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|iDelete
operator|&&
name|iResponseFile
operator|.
name|exists
argument_list|()
condition|)
name|iResponseFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|fos
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|iRequestFile
argument_list|)
expr_stmt|;
operator|(
operator|new
name|XMLWriter
argument_list|(
name|fos
argument_list|,
name|OutputFormat
operator|.
name|createPrettyPrint
argument_list|()
argument_list|)
operator|)
operator|.
name|write
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|fos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|fos
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fos
operator|!=
literal|null
condition|)
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|Hashtable
argument_list|<
name|Room
argument_list|,
name|HashSet
argument_list|<
name|TimeBlock
argument_list|>
argument_list|>
name|readResponse
parameter_list|(
name|Document
name|response
parameter_list|)
throws|throws
name|ParseException
block|{
name|SimpleDateFormat
name|dateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|response
operator|.
name|getRootElement
argument_list|()
operator|.
name|attributeValue
argument_list|(
literal|"dateFormat"
argument_list|,
literal|"MM/dd/yyyy"
argument_list|)
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|SimpleDateFormat
name|timeFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|response
operator|.
name|getRootElement
argument_list|()
operator|.
name|attributeValue
argument_list|(
literal|"timeFormat"
argument_list|,
literal|"h:mm a"
argument_list|)
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|Room
argument_list|,
name|HashSet
argument_list|<
name|TimeBlock
argument_list|>
argument_list|>
name|availability
init|=
operator|new
name|Hashtable
argument_list|<
name|Room
argument_list|,
name|HashSet
argument_list|<
name|TimeBlock
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|response
operator|.
name|getRootElement
argument_list|()
operator|.
name|elementIterator
argument_list|(
literal|"room"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|roomElement
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Room
name|room
init|=
operator|new
name|Room
argument_list|(
name|roomElement
argument_list|)
decl_stmt|;
name|HashSet
argument_list|<
name|TimeBlock
argument_list|>
name|roomAvailability
init|=
name|availability
operator|.
name|get
argument_list|(
name|room
argument_list|)
decl_stmt|;
if|if
condition|(
name|roomAvailability
operator|==
literal|null
condition|)
block|{
name|roomAvailability
operator|=
operator|new
name|HashSet
argument_list|<
name|TimeBlock
argument_list|>
argument_list|()
expr_stmt|;
name|availability
operator|.
name|put
argument_list|(
name|room
argument_list|,
name|roomAvailability
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|j
init|=
name|roomElement
operator|.
name|elementIterator
argument_list|(
literal|"event"
argument_list|)
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|eventElement
init|=
operator|(
name|Element
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|EventTimeBlock
name|event
init|=
operator|new
name|EventTimeBlock
argument_list|(
name|eventElement
argument_list|,
name|dateFormat
argument_list|,
name|timeFormat
argument_list|)
decl_stmt|;
name|roomAvailability
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|availability
return|;
block|}
specifier|protected
name|Document
name|recieveResponse
parameter_list|()
throws|throws
name|IOException
throws|,
name|DocumentException
block|{
name|FileInputStream
name|fis
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|iResponseFile
operator|.
name|exists
argument_list|()
operator|||
operator|!
name|iResponseFile
operator|.
name|canRead
argument_list|()
condition|)
return|return
literal|null
return|;
name|fis
operator|=
operator|new
name|FileInputStream
argument_list|(
name|iResponseFile
argument_list|)
expr_stmt|;
name|Document
name|document
init|=
operator|(
operator|new
name|SAXReader
argument_list|()
operator|)
operator|.
name|read
argument_list|(
name|fis
argument_list|)
decl_stmt|;
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
name|fis
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|iDelete
condition|)
name|iResponseFile
operator|.
name|delete
argument_list|()
expr_stmt|;
return|return
name|document
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|fis
operator|!=
literal|null
condition|)
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|RefreshThread
extends|extends
name|Thread
block|{
specifier|public
name|RefreshThread
parameter_list|()
block|{
name|setName
argument_list|(
literal|"Room Refresh"
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|update
parameter_list|(
name|CacheElement
name|cache
parameter_list|)
throws|throws
name|InterruptedException
block|{
try|try
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"Updating "
operator|+
name|cache
argument_list|)
expr_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|sendRequest
argument_list|(
name|createRequest
argument_list|(
name|cache
argument_list|)
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"Request "
operator|+
name|iRequestFile
operator|+
literal|" created."
argument_list|)
expr_stmt|;
name|Document
name|response
init|=
literal|null
decl_stmt|;
name|long
name|waited
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|response
operator|=
name|recieveResponse
argument_list|()
operator|)
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"Waiting for response ("
operator|+
operator|(
name|waited
operator|/
literal|1000
operator|)
operator|+
literal|"s waited so far)..."
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|waited
operator|+=
literal|5000
expr_stmt|;
if|if
condition|(
name|waited
operator|>
name|iTimeout
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"No response recieved after "
operator|+
operator|(
name|iTimeout
operator|/
literal|1000
operator|)
operator|+
literal|"s."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Timeout"
argument_list|)
throw|;
block|}
block|}
name|sLog
operator|.
name|debug
argument_list|(
literal|"Reading response..."
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|cache
init|)
block|{
name|Hashtable
argument_list|<
name|Room
argument_list|,
name|HashSet
argument_list|<
name|TimeBlock
argument_list|>
argument_list|>
name|availability
init|=
name|readResponse
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|long
name|dt
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
decl_stmt|;
name|String
name|ts
init|=
name|response
operator|.
name|getRootElement
argument_list|()
operator|.
name|attributeValue
argument_list|(
literal|"created"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ts
operator|==
literal|null
condition|)
name|ts
operator|=
operator|new
name|Date
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|dt
operator|>
literal|100
operator|&&
name|dt
operator|<
literal|60000
condition|)
name|ts
operator|+=
literal|" (retrieved in "
operator|+
name|sDf
operator|.
name|format
argument_list|(
name|dt
operator|/
literal|1000.0
argument_list|)
operator|+
literal|" sec)"
expr_stmt|;
if|else if
condition|(
name|dt
operator|>=
literal|60000
condition|)
block|{
name|ts
operator|+=
literal|" (retrieved in "
operator|+
name|sDf
operator|.
name|format
argument_list|(
name|dt
operator|/
literal|60000.0
argument_list|)
operator|+
literal|" min)"
expr_stmt|;
block|}
name|cache
operator|.
name|update
argument_list|(
name|availability
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to query room availability, reason:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|cache
operator|.
name|deactivate
argument_list|()
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|cache
init|)
block|{
name|cache
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
if|if
condition|(
name|iStop
condition|)
break|break;
try|try
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|this
operator|.
name|wait
argument_list|(
name|iRefreshRate
argument_list|)
expr_stmt|;
block|}
name|Vector
argument_list|<
name|CacheElement
argument_list|>
name|dirty
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|CacheElement
name|cache
range|:
name|iCache
control|)
block|{
if|if
condition|(
name|cache
operator|.
name|isDirty
argument_list|()
condition|)
block|{
name|dirty
operator|.
name|add
argument_list|(
name|cache
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|cache
operator|.
name|isActive
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|iTimeToLive
operator|>=
literal|0
operator|&&
name|cache
operator|.
name|getUse
argument_list|()
operator|>
name|iTimeToLive
condition|)
block|{
name|cache
operator|.
name|deactivate
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|dirty
operator|.
name|add
argument_list|(
name|cache
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CacheElement
name|cache
range|:
name|dirty
control|)
name|update
argument_list|(
name|cache
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|iStop
condition|)
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Room availability refresh is failing: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"Room availability refresh thread stopped."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TimeFrame
block|{
specifier|private
name|Date
name|iStart
decl_stmt|,
name|iEnd
decl_stmt|;
specifier|public
name|TimeFrame
parameter_list|(
name|Date
name|start
parameter_list|,
name|Date
name|end
parameter_list|)
block|{
name|iStart
operator|=
name|start
expr_stmt|;
name|iEnd
operator|=
name|end
expr_stmt|;
block|}
specifier|public
name|Date
name|getStartTime
parameter_list|()
block|{
return|return
name|iStart
return|;
block|}
specifier|public
name|Date
name|getEndTime
parameter_list|()
block|{
return|return
name|iEnd
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|iStart
operator|.
name|hashCode
argument_list|()
operator|^
name|iEnd
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|TimeFrame
operator|)
condition|)
return|return
literal|false
return|;
name|TimeFrame
name|t
init|=
operator|(
name|TimeFrame
operator|)
name|o
decl_stmt|;
return|return
name|getStartTime
argument_list|()
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|&&
name|getEndTime
argument_list|()
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getEndTime
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd/yy HH:mm"
argument_list|)
decl_stmt|;
return|return
name|df
operator|.
name|format
argument_list|(
name|getStartTime
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|df
operator|.
name|format
argument_list|(
name|getEndTime
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|CacheElement
block|{
specifier|private
name|boolean
name|iDirty
init|=
literal|true
decl_stmt|,
name|iActive
init|=
literal|false
decl_stmt|;
specifier|private
name|TimeFrame
name|iTime
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Room
argument_list|,
name|HashSet
argument_list|<
name|TimeBlock
argument_list|>
argument_list|>
name|iAvailability
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|private
name|long
name|iLastAccess
decl_stmt|,
name|iLastUpdate
decl_stmt|;
specifier|private
name|String
name|iTerm
decl_stmt|,
name|iYear
decl_stmt|,
name|iCampus
decl_stmt|;
specifier|private
name|String
name|iTimestamp
init|=
literal|null
decl_stmt|;
specifier|public
name|CacheElement
parameter_list|(
name|String
name|year
parameter_list|,
name|String
name|term
parameter_list|,
name|String
name|campus
parameter_list|,
name|TimeFrame
name|time
parameter_list|)
block|{
name|iYear
operator|=
name|year
expr_stmt|;
name|iTerm
operator|=
name|term
expr_stmt|;
name|iCampus
operator|=
name|campus
expr_stmt|;
name|iTime
operator|=
name|time
expr_stmt|;
name|iLastAccess
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
empty_stmt|;
specifier|public
name|void
name|update
parameter_list|(
name|Hashtable
argument_list|<
name|Room
argument_list|,
name|HashSet
argument_list|<
name|TimeBlock
argument_list|>
argument_list|>
name|availability
parameter_list|,
name|String
name|timestamp
parameter_list|)
block|{
name|iAvailability
operator|=
name|availability
expr_stmt|;
name|iLastUpdate
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|iDirty
operator|=
literal|false
expr_stmt|;
name|iActive
operator|=
literal|true
expr_stmt|;
name|iTimestamp
operator|=
name|timestamp
expr_stmt|;
block|}
specifier|public
name|HashSet
argument_list|<
name|TimeBlock
argument_list|>
name|get
parameter_list|(
name|Room
name|room
parameter_list|,
name|String
name|excludeType
parameter_list|)
block|{
name|iLastAccess
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|HashSet
argument_list|<
name|TimeBlock
argument_list|>
name|roomAvailability
init|=
name|iAvailability
operator|.
name|get
argument_list|(
name|room
argument_list|)
decl_stmt|;
if|if
condition|(
name|roomAvailability
operator|==
literal|null
operator|||
name|excludeType
operator|==
literal|null
condition|)
return|return
name|roomAvailability
return|;
name|HashSet
argument_list|<
name|TimeBlock
argument_list|>
name|ret
init|=
operator|new
name|HashSet
argument_list|(
name|roomAvailability
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|TimeBlock
name|block
range|:
name|roomAvailability
control|)
block|{
if|if
condition|(
name|excludeType
operator|.
name|equals
argument_list|(
name|block
operator|.
name|getEventType
argument_list|()
argument_list|)
condition|)
continue|continue;
name|ret
operator|.
name|add
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|boolean
name|isDirty
parameter_list|()
block|{
return|return
name|iDirty
return|;
block|}
specifier|public
name|boolean
name|isActive
parameter_list|()
block|{
return|return
name|iActive
return|;
block|}
specifier|public
name|void
name|markDirty
parameter_list|()
block|{
name|iDirty
operator|=
literal|true
expr_stmt|;
name|iLastAccess
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|markActive
parameter_list|()
block|{
if|if
condition|(
operator|!
name|iActive
condition|)
block|{
name|iActive
operator|=
literal|true
expr_stmt|;
name|iDirty
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|deactivate
parameter_list|()
block|{
name|iActive
operator|=
literal|false
expr_stmt|;
name|iDirty
operator|=
literal|false
expr_stmt|;
name|iAvailability
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|long
name|getAge
parameter_list|()
block|{
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|iLastUpdate
return|;
block|}
specifier|public
name|long
name|getUse
parameter_list|()
block|{
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|iLastAccess
return|;
block|}
specifier|public
name|TimeFrame
name|getTimeFrame
parameter_list|()
block|{
return|return
name|iTime
return|;
block|}
specifier|public
name|boolean
name|cover
parameter_list|(
name|TimeFrame
name|time
parameter_list|)
block|{
name|SimpleDateFormat
name|sdfDate
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMdd"
argument_list|)
decl_stmt|;
name|SimpleDateFormat
name|sdfTime
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"HHmm"
argument_list|)
decl_stmt|;
name|String
name|startDay
init|=
name|sdfDate
operator|.
name|format
argument_list|(
name|iTime
operator|.
name|getStartTime
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|endDay
init|=
name|sdfDate
operator|.
name|format
argument_list|(
name|iTime
operator|.
name|getEndTime
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|startTime
init|=
name|sdfTime
operator|.
name|format
argument_list|(
name|iTime
operator|.
name|getStartTime
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|endTime
init|=
name|sdfTime
operator|.
name|format
argument_list|(
name|iTime
operator|.
name|getEndTime
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|givenStartDay
init|=
name|sdfDate
operator|.
name|format
argument_list|(
name|time
operator|.
name|getStartTime
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|givenEndDay
init|=
name|sdfDate
operator|.
name|format
argument_list|(
name|time
operator|.
name|getEndTime
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|givenStartTime
init|=
name|sdfTime
operator|.
name|format
argument_list|(
name|time
operator|.
name|getStartTime
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|givenEndTime
init|=
name|sdfTime
operator|.
name|format
argument_list|(
name|time
operator|.
name|getEndTime
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|startDay
operator|.
name|compareTo
argument_list|(
name|givenStartDay
argument_list|)
operator|<=
literal|0
operator|&&
name|givenEndDay
operator|.
name|compareTo
argument_list|(
name|endDay
argument_list|)
operator|<=
literal|0
operator|&&
name|startTime
operator|.
name|compareTo
argument_list|(
name|givenStartTime
argument_list|)
operator|<=
literal|0
operator|&&
name|givenEndTime
operator|.
name|compareTo
argument_list|(
name|endTime
argument_list|)
operator|<=
literal|0
operator|)
return|;
block|}
specifier|public
name|String
name|getYear
parameter_list|()
block|{
return|return
name|iYear
return|;
block|}
specifier|public
name|String
name|getTerm
parameter_list|()
block|{
return|return
name|iTerm
return|;
block|}
specifier|public
name|String
name|getCampus
parameter_list|()
block|{
return|return
name|iCampus
return|;
block|}
specifier|public
name|String
name|getTimestamp
parameter_list|()
block|{
return|return
name|iTimestamp
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|iTime
operator|+
literal|" (updated "
operator|+
operator|(
name|getAge
argument_list|()
operator|/
literal|1000
operator|)
operator|+
literal|"s ago, used "
operator|+
operator|(
name|getUse
argument_list|()
operator|/
literal|1000
operator|)
operator|+
literal|"s ago"
operator|+
operator|(
name|iActive
condition|?
literal|", active"
else|:
literal|""
operator|)
operator|+
operator|(
name|iDirty
condition|?
literal|", dirty"
else|:
literal|""
operator|)
operator|+
literal|")"
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Room
block|{
specifier|private
name|String
name|iExternalId
decl_stmt|,
name|iBuildingAbbv
decl_stmt|,
name|iRoomNbr
decl_stmt|;
specifier|public
name|Room
parameter_list|(
name|String
name|externalId
parameter_list|,
name|String
name|buildingAbbv
parameter_list|,
name|String
name|roomNbr
parameter_list|)
block|{
name|iExternalId
operator|=
name|externalId
expr_stmt|;
name|iBuildingAbbv
operator|=
name|buildingAbbv
expr_stmt|;
name|iRoomNbr
operator|=
name|roomNbr
expr_stmt|;
block|}
specifier|public
name|Room
parameter_list|(
name|Element
name|roomElement
parameter_list|)
block|{
name|iExternalId
operator|=
name|roomElement
operator|.
name|attributeValue
argument_list|(
literal|"externalId"
argument_list|)
expr_stmt|;
name|iBuildingAbbv
operator|=
name|roomElement
operator|.
name|attributeValue
argument_list|(
literal|"building"
argument_list|)
expr_stmt|;
name|iRoomNbr
operator|=
name|roomElement
operator|.
name|attributeValue
argument_list|(
literal|"roomNbr"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getExternalId
parameter_list|()
block|{
return|return
name|iExternalId
return|;
block|}
specifier|public
name|boolean
name|hasExternalId
parameter_list|()
block|{
return|return
name|iExternalId
operator|!=
literal|null
return|;
block|}
specifier|public
name|boolean
name|hasName
parameter_list|()
block|{
return|return
name|iBuildingAbbv
operator|!=
literal|null
operator|&&
name|iRoomNbr
operator|!=
literal|null
return|;
block|}
specifier|public
name|String
name|getBuildingAbbv
parameter_list|()
block|{
return|return
name|iBuildingAbbv
return|;
block|}
specifier|public
name|String
name|getRoomNbr
parameter_list|()
block|{
return|return
name|iRoomNbr
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
name|hasName
argument_list|()
condition|)
return|return
name|getBuildingAbbv
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|^
name|getRoomNbr
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
return|return
name|getExternalId
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|Room
operator|)
condition|)
return|return
literal|false
return|;
name|Room
name|r
init|=
operator|(
name|Room
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|hasExternalId
argument_list|()
operator|&&
name|r
operator|.
name|hasExternalId
argument_list|()
condition|)
return|return
name|getExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getExternalId
argument_list|()
argument_list|)
return|;
return|return
name|getBuildingAbbv
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getBuildingAbbv
argument_list|()
argument_list|)
operator|&&
name|getRoomNbr
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getRoomNbr
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getBuildingAbbv
argument_list|()
operator|+
literal|" "
operator|+
name|getRoomNbr
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|EventTimeBlock
implements|implements
name|TimeBlock
block|{
specifier|private
name|String
name|iEventName
decl_stmt|,
name|iEventType
decl_stmt|;
specifier|private
name|Date
name|iStartTime
decl_stmt|,
name|iEndTime
decl_stmt|;
specifier|public
name|EventTimeBlock
parameter_list|(
name|Element
name|eventElement
parameter_list|,
name|SimpleDateFormat
name|dateFormat
parameter_list|,
name|SimpleDateFormat
name|timeFormat
parameter_list|)
throws|throws
name|ParseException
block|{
name|iEventName
operator|=
name|eventElement
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|iEventType
operator|=
name|eventElement
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|dateFormat
operator|.
name|parse
argument_list|(
name|eventElement
operator|.
name|attributeValue
argument_list|(
literal|"date"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|start
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|new
name|SimpleDateFormat
argument_list|(
literal|"HHmm"
argument_list|)
operator|.
name|format
argument_list|(
name|timeFormat
operator|.
name|parse
argument_list|(
name|eventElement
operator|.
name|attributeValue
argument_list|(
literal|"startTime"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|end
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|new
name|SimpleDateFormat
argument_list|(
literal|"HHmm"
argument_list|)
operator|.
name|format
argument_list|(
name|timeFormat
operator|.
name|parse
argument_list|(
name|eventElement
operator|.
name|attributeValue
argument_list|(
literal|"endTime"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR
argument_list|,
name|start
operator|/
literal|100
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|start
operator|%
literal|100
argument_list|)
expr_stmt|;
name|iStartTime
operator|=
name|c
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|dateFormat
operator|.
name|parse
argument_list|(
name|eventElement
operator|.
name|attributeValue
argument_list|(
literal|"date"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR
argument_list|,
name|end
operator|/
literal|100
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|end
operator|%
literal|100
argument_list|)
expr_stmt|;
name|iEndTime
operator|=
name|c
operator|.
name|getTime
argument_list|()
expr_stmt|;
if|if
condition|(
name|iEndTime
operator|.
name|compareTo
argument_list|(
name|iStartTime
argument_list|)
operator|<
literal|0
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Event "
operator|+
name|iEventName
operator|+
literal|" ("
operator|+
name|iEventType
operator|+
literal|") goes over midnight ("
operator|+
name|eventElement
operator|.
name|attributeValue
argument_list|(
literal|"date"
argument_list|)
operator|+
literal|" "
operator|+
name|eventElement
operator|.
name|attributeValue
argument_list|(
literal|"startTime"
argument_list|)
operator|+
literal|" - "
operator|+
name|eventElement
operator|.
name|attributeValue
argument_list|(
literal|"endTime"
argument_list|)
operator|+
literal|")."
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|iEndTime
operator|=
name|c
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getEventName
parameter_list|()
block|{
return|return
name|iEventName
return|;
block|}
specifier|public
name|String
name|getEventType
parameter_list|()
block|{
return|return
name|iEventType
return|;
block|}
specifier|public
name|Date
name|getStartTime
parameter_list|()
block|{
return|return
name|iStartTime
return|;
block|}
specifier|public
name|Date
name|getEndTime
parameter_list|()
block|{
return|return
name|iEndTime
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd/yy HH:mm"
argument_list|)
decl_stmt|;
name|SimpleDateFormat
name|df2
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"HH:mm"
argument_list|)
decl_stmt|;
return|return
name|getEventName
argument_list|()
operator|+
literal|" ("
operator|+
name|getEventType
argument_list|()
operator|+
literal|") "
operator|+
name|df
operator|.
name|format
argument_list|(
name|getStartTime
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|df2
operator|.
name|format
argument_list|(
name|getEndTime
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|TimeBlock
operator|)
condition|)
return|return
literal|false
return|;
name|TimeBlock
name|t
init|=
operator|(
name|TimeBlock
operator|)
name|o
decl_stmt|;
return|return
name|getEventName
argument_list|()
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getEventName
argument_list|()
argument_list|)
operator|&&
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getEventType
argument_list|()
argument_list|)
operator|&&
name|getStartTime
argument_list|()
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|&&
name|getEndTime
argument_list|()
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getEndTime
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getEventName
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|^
name|getEventType
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|^
name|getStartTime
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

