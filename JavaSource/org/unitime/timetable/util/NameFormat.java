begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.5 (University Timetabling Application)  * Copyright (C) 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
package|;
end_package

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_enum
specifier|public
enum|enum
name|NameFormat
block|{
name|LAST_FIRST
argument_list|(
literal|"last-first"
argument_list|,
operator|new
name|Formatter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|NameInterface
name|name
parameter_list|)
block|{
return|return
name|Constants
operator|.
name|toInitialCase
argument_list|(
operator|(
name|name
operator|.
name|getLastName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getLastName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|name
operator|.
name|getLastName
argument_list|()
else|:
literal|""
operator|)
operator|+
operator|(
name|name
operator|.
name|getFirstName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getFirstName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|", "
operator|+
name|name
operator|.
name|getFirstName
argument_list|()
else|:
literal|""
operator|)
argument_list|)
operator|.
name|trim
argument_list|()
return|;
block|}
block|}
argument_list|)
block|,
name|FIRST_LAST
argument_list|(
literal|"first-last"
argument_list|,
operator|new
name|Formatter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|NameInterface
name|name
parameter_list|)
block|{
return|return
name|Constants
operator|.
name|toInitialCase
argument_list|(
operator|(
name|name
operator|.
name|getFirstName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getFirstName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|name
operator|.
name|getFirstName
argument_list|()
else|:
literal|""
operator|)
operator|+
operator|(
name|name
operator|.
name|getLastName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getLastName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|" "
operator|+
name|name
operator|.
name|getLastName
argument_list|()
else|:
literal|""
operator|)
argument_list|)
operator|.
name|trim
argument_list|()
return|;
block|}
block|}
argument_list|)
block|,
name|INITIAL_LAST
argument_list|(
literal|"initial-last"
argument_list|,
operator|new
name|Formatter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|NameInterface
name|name
parameter_list|)
block|{
return|return
operator|(
operator|(
name|name
operator|.
name|getFirstName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getFirstName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|name
operator|.
name|getFirstName
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
else|:
literal|""
operator|)
operator|+
operator|(
name|name
operator|.
name|getMiddleName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getMiddleName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|" "
operator|+
name|name
operator|.
name|getMiddleName
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
else|:
literal|""
operator|)
operator|+
operator|(
name|name
operator|.
name|getLastName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getLastName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|" "
operator|+
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|name
operator|.
name|getLastName
argument_list|()
argument_list|)
else|:
literal|""
operator|)
operator|)
operator|.
name|trim
argument_list|()
return|;
block|}
block|}
argument_list|)
block|,
name|LAST_INITIAL
argument_list|(
literal|"last-initial"
argument_list|,
operator|new
name|Formatter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|NameInterface
name|name
parameter_list|)
block|{
return|return
operator|(
name|name
operator|.
name|getLastName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getLastName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|name
operator|.
name|getLastName
argument_list|()
argument_list|)
else|:
literal|""
operator|)
operator|.
name|trim
argument_list|()
operator|+
operator|(
operator|(
name|name
operator|.
name|getFirstName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getFirstName
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
name|name
operator|.
name|getMiddleName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getMiddleName
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
literal|","
else|:
literal|""
operator|)
operator|+
operator|(
name|name
operator|.
name|getFirstName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getFirstName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|" "
operator|+
name|name
operator|.
name|getFirstName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
else|:
literal|""
operator|)
operator|+
operator|(
name|name
operator|.
name|getMiddleName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getMiddleName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|" "
operator|+
name|name
operator|.
name|getMiddleName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
else|:
literal|""
operator|)
return|;
block|}
block|}
argument_list|)
block|,
name|FIRST_MIDDLE_LAST
argument_list|(
literal|"first-middle-last"
argument_list|,
operator|new
name|Formatter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|NameInterface
name|name
parameter_list|)
block|{
return|return
name|Constants
operator|.
name|toInitialCase
argument_list|(
operator|(
name|name
operator|.
name|getFirstName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getFirstName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|name
operator|.
name|getFirstName
argument_list|()
else|:
literal|""
operator|)
operator|+
operator|(
name|name
operator|.
name|getMiddleName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getMiddleName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|" "
operator|+
name|name
operator|.
name|getMiddleName
argument_list|()
else|:
literal|""
operator|)
operator|+
operator|(
name|name
operator|.
name|getLastName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getLastName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|" "
operator|+
name|name
operator|.
name|getLastName
argument_list|()
else|:
literal|""
operator|)
argument_list|)
operator|.
name|trim
argument_list|()
return|;
block|}
block|}
argument_list|)
block|,
name|LAST_FIRST_MIDDLE
argument_list|(
literal|"last-first-middle"
argument_list|,
operator|new
name|Formatter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|NameInterface
name|name
parameter_list|)
block|{
return|return
name|Constants
operator|.
name|toInitialCase
argument_list|(
operator|(
name|name
operator|.
name|getLastName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getLastName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|name
operator|.
name|getLastName
argument_list|()
else|:
literal|""
operator|)
operator|+
operator|(
operator|(
name|name
operator|.
name|getFirstName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getFirstName
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
name|name
operator|.
name|getMiddleName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getMiddleName
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
literal|","
else|:
literal|""
operator|)
operator|+
operator|(
name|name
operator|.
name|getFirstName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getFirstName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|" "
operator|+
name|name
operator|.
name|getFirstName
argument_list|()
else|:
literal|""
operator|)
operator|+
operator|(
name|name
operator|.
name|getMiddleName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getMiddleName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|" "
operator|+
name|name
operator|.
name|getMiddleName
argument_list|()
else|:
literal|""
operator|)
argument_list|)
operator|.
name|trim
argument_list|()
return|;
block|}
block|}
argument_list|)
block|,
name|SHORT
argument_list|(
literal|"short"
argument_list|,
operator|new
name|Formatter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|NameInterface
name|name
parameter_list|)
block|{
return|return
operator|(
name|name
operator|.
name|getFirstName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getFirstName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|name
operator|.
name|getFirstName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|". "
else|:
literal|""
operator|)
operator|+
operator|(
name|name
operator|.
name|getLastName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getLastName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|name
operator|.
name|getLastName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|+
name|name
operator|.
name|getLastName
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|Math
operator|.
name|min
argument_list|(
literal|10
argument_list|,
name|name
operator|.
name|getLastName
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toLowerCase
argument_list|()
else|:
literal|""
operator|)
operator|.
name|trim
argument_list|()
return|;
block|}
block|}
argument_list|)
block|,
name|TITLE_FIRST_MIDDLE_LAST
argument_list|(
literal|"title-first-middle-last"
argument_list|,
operator|new
name|Formatter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|NameInterface
name|name
parameter_list|)
block|{
return|return
operator|(
name|name
operator|.
name|getAcademicTitle
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getAcademicTitle
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|name
operator|.
name|getAcademicTitle
argument_list|()
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|Constants
operator|.
name|toInitialCase
argument_list|(
operator|(
name|name
operator|.
name|getFirstName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getFirstName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|name
operator|.
name|getFirstName
argument_list|()
else|:
literal|""
operator|)
operator|+
operator|(
name|name
operator|.
name|getMiddleName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getMiddleName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|" "
operator|+
name|name
operator|.
name|getMiddleName
argument_list|()
else|:
literal|""
operator|)
operator|+
operator|(
name|name
operator|.
name|getLastName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getLastName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|" "
operator|+
name|name
operator|.
name|getLastName
argument_list|()
else|:
literal|""
operator|)
argument_list|)
operator|.
name|trim
argument_list|()
return|;
block|}
block|}
argument_list|)
block|,
name|LAST_FIRST_MIDDLE_TITLE
argument_list|(
literal|"last-first-middle-title"
argument_list|,
operator|new
name|Formatter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|NameInterface
name|name
parameter_list|)
block|{
return|return
name|Constants
operator|.
name|toInitialCase
argument_list|(
operator|(
name|name
operator|.
name|getLastName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getLastName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|name
operator|.
name|getLastName
argument_list|()
else|:
literal|""
operator|)
operator|+
operator|(
operator|(
name|name
operator|.
name|getFirstName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getFirstName
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
name|name
operator|.
name|getMiddleName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getMiddleName
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
literal|","
else|:
literal|""
operator|)
operator|+
operator|(
name|name
operator|.
name|getFirstName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getFirstName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|" "
operator|+
name|name
operator|.
name|getFirstName
argument_list|()
else|:
literal|""
operator|)
operator|+
operator|(
name|name
operator|.
name|getMiddleName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getMiddleName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|" "
operator|+
name|name
operator|.
name|getMiddleName
argument_list|()
else|:
literal|""
operator|)
argument_list|)
operator|.
name|trim
argument_list|()
operator|+
operator|(
name|name
operator|.
name|getAcademicTitle
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getAcademicTitle
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|" "
operator|+
name|name
operator|.
name|getAcademicTitle
argument_list|()
else|:
literal|""
operator|)
return|;
block|}
block|}
argument_list|)
block|,
name|TITLE_INITIAL_LAST
argument_list|(
literal|"title-initial-last"
argument_list|,
operator|new
name|Formatter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|NameInterface
name|name
parameter_list|)
block|{
return|return
operator|(
name|name
operator|.
name|getAcademicTitle
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getAcademicTitle
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|name
operator|.
name|getAcademicTitle
argument_list|()
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
operator|(
operator|(
name|name
operator|.
name|getFirstName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getFirstName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|name
operator|.
name|getFirstName
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
else|:
literal|""
operator|)
operator|+
operator|(
name|name
operator|.
name|getMiddleName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getMiddleName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|" "
operator|+
name|name
operator|.
name|getMiddleName
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
else|:
literal|""
operator|)
operator|+
operator|(
name|name
operator|.
name|getLastName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getLastName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|" "
operator|+
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|name
operator|.
name|getLastName
argument_list|()
argument_list|)
else|:
literal|""
operator|)
operator|)
operator|.
name|trim
argument_list|()
return|;
block|}
block|}
argument_list|)
block|,
name|TITLE_LAST_INITIAL
argument_list|(
literal|"title-last-initial"
argument_list|,
operator|new
name|Formatter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|NameInterface
name|name
parameter_list|)
block|{
return|return
operator|(
name|name
operator|.
name|getAcademicTitle
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getAcademicTitle
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|name
operator|.
name|getAcademicTitle
argument_list|()
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
operator|(
name|name
operator|.
name|getLastName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getLastName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|name
operator|.
name|getLastName
argument_list|()
argument_list|)
else|:
literal|""
operator|)
operator|.
name|trim
argument_list|()
operator|+
operator|(
operator|(
name|name
operator|.
name|getFirstName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getFirstName
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
name|name
operator|.
name|getMiddleName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getMiddleName
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
literal|","
else|:
literal|""
operator|)
operator|+
operator|(
name|name
operator|.
name|getFirstName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getFirstName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|" "
operator|+
name|name
operator|.
name|getFirstName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
else|:
literal|""
operator|)
operator|+
operator|(
name|name
operator|.
name|getMiddleName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|getMiddleName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|" "
operator|+
name|name
operator|.
name|getMiddleName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
else|:
literal|""
operator|)
return|;
block|}
block|}
argument_list|)
block|, 	 	;
specifier|private
name|String
name|iRefernence
decl_stmt|;
specifier|private
name|Formatter
name|iFormatter
decl_stmt|;
name|NameFormat
parameter_list|(
name|String
name|reference
parameter_list|,
name|Formatter
name|formatter
parameter_list|)
block|{
name|iRefernence
operator|=
name|reference
expr_stmt|;
name|iFormatter
operator|=
name|formatter
expr_stmt|;
block|}
specifier|public
name|String
name|reference
parameter_list|()
block|{
return|return
name|iRefernence
return|;
block|}
specifier|public
specifier|static
name|NameFormat
name|defaultFormat
parameter_list|()
block|{
return|return
name|LAST_FIRST_MIDDLE
return|;
block|}
specifier|public
specifier|static
name|NameFormat
name|fromReference
parameter_list|(
name|String
name|reference
parameter_list|)
block|{
for|for
control|(
name|NameFormat
name|f
range|:
name|values
argument_list|()
control|)
if|if
condition|(
name|f
operator|.
name|reference
argument_list|()
operator|.
name|equals
argument_list|(
name|reference
argument_list|)
condition|)
return|return
name|f
return|;
return|return
name|defaultFormat
argument_list|()
return|;
block|}
specifier|public
name|String
name|format
parameter_list|(
name|NameInterface
name|name
parameter_list|)
block|{
return|return
name|iFormatter
operator|.
name|format
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|static
interface|interface
name|Formatter
block|{
specifier|public
name|String
name|format
parameter_list|(
name|NameInterface
name|name
parameter_list|)
function_decl|;
block|}
block|}
end_enum

end_unit

