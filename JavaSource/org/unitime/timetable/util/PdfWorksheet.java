begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|BuildingPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExactTimeMins
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ItypeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeaturePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroupPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePatternModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|InstrOfferingConfigComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|SchedulingSubpartComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|TimetableDatabaseLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|duration
operator|.
name|DurationModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|DocumentException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|PageSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Paragraph
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfWriter
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|PdfWorksheet
block|{
specifier|protected
specifier|static
name|GwtConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|iUseCommitedAssignments
init|=
literal|true
decl_stmt|;
specifier|private
specifier|static
name|int
name|sNrChars
init|=
literal|133
decl_stmt|;
specifier|private
specifier|static
name|int
name|sNrLines
init|=
literal|50
decl_stmt|;
specifier|private
name|OutputStream
name|iOut
init|=
literal|null
decl_stmt|;
specifier|private
name|Document
name|iDoc
init|=
literal|null
decl_stmt|;
specifier|private
name|TreeSet
argument_list|<
name|SubjectArea
argument_list|>
name|iSubjectAreas
decl_stmt|;
specifier|private
name|String
name|iCourseNumber
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iPageNo
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iLineNo
init|=
literal|0
decl_stmt|;
specifier|private
name|StringBuffer
name|iBuffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
specifier|private
name|CourseOffering
name|iCourseOffering
init|=
literal|null
decl_stmt|;
specifier|private
name|SubjectArea
name|iCurrentSubjectArea
init|=
literal|null
decl_stmt|;
specifier|private
name|PdfWorksheet
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|Collection
argument_list|<
name|SubjectArea
argument_list|>
name|subjectAreas
parameter_list|,
name|String
name|courseNumber
parameter_list|)
throws|throws
name|IOException
throws|,
name|DocumentException
block|{
name|iUseCommitedAssignments
operator|=
name|ApplicationProperty
operator|.
name|WorksheetPdfUseCommittedAssignments
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|iSubjectAreas
operator|=
operator|new
name|TreeSet
argument_list|<
name|SubjectArea
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|SubjectArea
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|SubjectArea
name|s1
parameter_list|,
name|SubjectArea
name|s2
parameter_list|)
block|{
return|return
name|s1
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iSubjectAreas
operator|.
name|addAll
argument_list|(
name|subjectAreas
argument_list|)
expr_stmt|;
name|iCourseNumber
operator|=
name|courseNumber
expr_stmt|;
if|if
condition|(
name|iCourseNumber
operator|!=
literal|null
operator|&&
operator|(
name|iCourseNumber
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
literal|"*"
operator|.
name|equals
argument_list|(
name|iCourseNumber
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
operator|)
condition|)
name|iCourseNumber
operator|=
literal|null
expr_stmt|;
name|iDoc
operator|=
operator|new
name|Document
argument_list|(
name|PageSize
operator|.
name|LETTER
operator|.
name|rotate
argument_list|()
argument_list|)
expr_stmt|;
name|iOut
operator|=
name|out
expr_stmt|;
name|PdfWriter
operator|.
name|getInstance
argument_list|(
name|iDoc
argument_list|,
name|iOut
argument_list|)
expr_stmt|;
name|String
name|session
init|=
literal|null
decl_stmt|;
name|String
name|subjects
init|=
literal|""
decl_stmt|;
for|for
control|(
name|SubjectArea
name|sa
range|:
name|iSubjectAreas
control|)
block|{
if|if
condition|(
name|subjects
operator|.
name|isEmpty
argument_list|()
condition|)
name|subjects
operator|+=
literal|", "
expr_stmt|;
name|subjects
operator|+=
name|sa
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
expr_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
name|session
operator|+=
name|sa
operator|.
name|getSession
argument_list|()
operator|.
name|getLabel
argument_list|()
expr_stmt|;
block|}
name|iDoc
operator|.
name|addTitle
argument_list|(
name|subjects
operator|+
operator|(
name|iCourseNumber
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|iCourseNumber
operator|)
operator|+
literal|" Worksheet"
argument_list|)
expr_stmt|;
name|iDoc
operator|.
name|addAuthor
argument_list|(
name|ApplicationProperty
operator|.
name|WorksheetPdfAuthor
operator|.
name|value
argument_list|()
operator|.
name|replace
argument_list|(
literal|"%"
argument_list|,
name|Constants
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iDoc
operator|.
name|addSubject
argument_list|(
name|subjects
operator|+
operator|(
name|session
operator|==
literal|null
condition|?
literal|""
else|:
literal|" -- "
operator|+
name|session
operator|)
argument_list|)
expr_stmt|;
name|iDoc
operator|.
name|addCreator
argument_list|(
literal|"UniTime "
operator|+
name|Constants
operator|.
name|getVersion
argument_list|()
operator|+
literal|", www.unitime.org"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iSubjectAreas
operator|.
name|isEmpty
argument_list|()
condition|)
name|iCurrentSubjectArea
operator|=
name|iSubjectAreas
operator|.
name|first
argument_list|()
expr_stmt|;
name|iDoc
operator|.
name|open
argument_list|()
expr_stmt|;
name|printHeader
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|print
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|Collection
argument_list|<
name|SubjectArea
argument_list|>
name|subjectAreas
parameter_list|)
throws|throws
name|IOException
throws|,
name|DocumentException
block|{
name|TreeSet
name|courses
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|Comparator
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|CourseOffering
name|co1
init|=
operator|(
name|CourseOffering
operator|)
name|o1
decl_stmt|;
name|CourseOffering
name|co2
init|=
operator|(
name|CourseOffering
operator|)
name|o2
decl_stmt|;
name|int
name|cmp
init|=
name|co1
operator|.
name|getCourseName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|co2
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|co1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|co2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|String
name|subjectIds
init|=
literal|""
decl_stmt|;
for|for
control|(
name|SubjectArea
name|sa
range|:
name|subjectAreas
control|)
name|subjectIds
operator|+=
operator|(
name|subjectIds
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
name|sa
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|courses
operator|.
name|addAll
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select co from CourseOffering co where  co.subjectArea.uniqueId in ("
operator|+
name|subjectIds
operator|+
literal|")"
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|courses
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|PdfWorksheet
name|w
init|=
operator|new
name|PdfWorksheet
argument_list|(
name|out
argument_list|,
name|subjectAreas
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|courses
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|w
operator|.
name|print
argument_list|(
operator|(
name|CourseOffering
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|lastPage
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|boolean
name|print
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|Collection
argument_list|<
name|SubjectArea
argument_list|>
name|subjectAreas
parameter_list|,
name|String
name|courseNumber
parameter_list|)
throws|throws
name|IOException
throws|,
name|DocumentException
block|{
name|TreeSet
name|courses
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|Comparator
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|CourseOffering
name|co1
init|=
operator|(
name|CourseOffering
operator|)
name|o1
decl_stmt|;
name|CourseOffering
name|co2
init|=
operator|(
name|CourseOffering
operator|)
name|o2
decl_stmt|;
name|int
name|cmp
init|=
name|co1
operator|.
name|getCourseName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|co2
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|co1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|co2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|String
name|subjectIds
init|=
literal|""
decl_stmt|;
for|for
control|(
name|SubjectArea
name|sa
range|:
name|subjectAreas
control|)
name|subjectIds
operator|+=
operator|(
name|subjectIds
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
name|sa
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|String
name|query
init|=
literal|"select co from CourseOffering co where  co.subjectArea.uniqueId in ("
operator|+
name|subjectIds
operator|+
literal|")"
decl_stmt|;
if|if
condition|(
name|courseNumber
operator|!=
literal|null
operator|&&
operator|!
name|courseNumber
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|query
operator|+=
literal|" and co.courseNbr "
expr_stmt|;
if|if
condition|(
name|courseNumber
operator|.
name|indexOf
argument_list|(
literal|'*'
argument_list|)
operator|>=
literal|0
condition|)
name|query
operator|+=
literal|" like '"
operator|+
name|courseNumber
operator|.
name|trim
argument_list|()
operator|.
name|replace
argument_list|(
literal|'*'
argument_list|,
literal|'%'
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|"'"
expr_stmt|;
else|else
name|query
operator|+=
literal|" = '"
operator|+
name|courseNumber
operator|.
name|trim
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|"'"
expr_stmt|;
block|}
name|courses
operator|.
name|addAll
argument_list|(
operator|new
name|SessionDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|query
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|courses
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|PdfWorksheet
name|w
init|=
operator|new
name|PdfWorksheet
argument_list|(
name|out
argument_list|,
name|subjectAreas
argument_list|,
name|courseNumber
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|courses
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|w
operator|.
name|print
argument_list|(
operator|(
name|CourseOffering
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|lastPage
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|String
index|[]
name|time
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
name|String
name|dpat
init|=
literal|""
decl_stmt|;
name|DatePattern
name|dp
init|=
name|clazz
operator|.
name|effectiveDatePattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|dp
operator|!=
literal|null
operator|&&
operator|!
name|dp
operator|.
name|isDefault
argument_list|()
condition|)
block|{
if|if
condition|(
name|dp
operator|.
name|getType
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|DatePattern
operator|.
name|sTypeAlternate
condition|)
name|dpat
operator|=
literal|" "
operator|+
name|dp
operator|.
name|getName
argument_list|()
expr_stmt|;
else|else
block|{
name|SimpleDateFormat
name|dpf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd"
argument_list|)
decl_stmt|;
name|dpat
operator|=
literal|", "
operator|+
name|dpf
operator|.
name|format
argument_list|(
name|dp
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|dpf
operator|.
name|format
argument_list|(
name|dp
operator|.
name|getEndDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Assignment
name|assgn
init|=
operator|(
name|iUseCommitedAssignments
condition|?
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|assgn
operator|==
literal|null
condition|)
block|{
name|Set
name|timePrefs
init|=
name|clazz
operator|.
name|getEffectiveTimePreferences
argument_list|()
decl_stmt|;
if|if
condition|(
name|timePrefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|DurationModel
name|dm
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getDurationModel
argument_list|()
decl_stmt|;
name|Integer
name|ah
init|=
name|dm
operator|.
name|getArrangedHours
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|,
name|clazz
operator|.
name|effectiveDatePattern
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ah
operator|!=
literal|null
condition|)
return|return
operator|new
name|String
index|[]
block|{
literal|"Arr "
operator|+
name|ah
operator|+
literal|" Hrs"
operator|+
name|dpat
block|}
return|;
else|else
return|return
operator|new
name|String
index|[]
block|{
literal|"Arr Hrs"
operator|+
name|dpat
block|}
return|;
block|}
name|boolean
name|onlyOneReq
init|=
literal|true
decl_stmt|;
name|TimeLocation
name|req
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|x
init|=
name|timePrefs
operator|.
name|iterator
argument_list|()
init|;
name|onlyOneReq
operator|&&
name|x
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|tp
init|=
operator|(
name|TimePref
operator|)
name|x
operator|.
name|next
argument_list|()
decl_stmt|;
name|TimePatternModel
name|model
init|=
name|tp
operator|.
name|getTimePatternModel
argument_list|()
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|isExactTime
argument_list|()
condition|)
block|{
if|if
condition|(
name|req
operator|!=
literal|null
condition|)
name|onlyOneReq
operator|=
literal|false
expr_stmt|;
else|else
block|{
name|DurationModel
name|dm
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getDurationModel
argument_list|()
decl_stmt|;
name|int
name|minsPerMeeting
init|=
name|dm
operator|.
name|getExactTimeMinutesPerMeeting
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|,
name|clazz
operator|.
name|effectiveDatePattern
argument_list|()
argument_list|,
name|model
operator|.
name|getExactDays
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|ExactTimeMins
operator|.
name|getNrSlotsPerMtg
argument_list|(
name|minsPerMeeting
argument_list|)
decl_stmt|;
name|int
name|breakTime
init|=
name|ExactTimeMins
operator|.
name|getBreakTime
argument_list|(
name|minsPerMeeting
argument_list|)
decl_stmt|;
name|req
operator|=
operator|new
name|TimeLocation
argument_list|(
name|model
operator|.
name|getExactDays
argument_list|()
argument_list|,
name|model
operator|.
name|getExactStartSlot
argument_list|()
argument_list|,
name|length
argument_list|,
name|PreferenceLevel
operator|.
name|sIntLevelNeutral
argument_list|,
literal|0
argument_list|,
name|dp
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|dp
operator|.
name|getName
argument_list|()
argument_list|,
name|dp
operator|.
name|getPatternBitSet
argument_list|()
argument_list|,
name|breakTime
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|model
operator|.
name|getNrDays
argument_list|()
condition|;
name|d
operator|++
control|)
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|onlyOneReq
operator|&&
name|t
operator|<
name|model
operator|.
name|getNrTimes
argument_list|()
condition|;
name|t
operator|++
control|)
block|{
if|if
condition|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getPreference
argument_list|(
name|d
argument_list|,
name|t
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|req
operator|!=
literal|null
condition|)
name|onlyOneReq
operator|=
literal|false
expr_stmt|;
else|else
block|{
name|req
operator|=
operator|new
name|TimeLocation
argument_list|(
name|model
operator|.
name|getDayCode
argument_list|(
name|d
argument_list|)
argument_list|,
name|model
operator|.
name|getStartSlot
argument_list|(
name|t
argument_list|)
argument_list|,
name|model
operator|.
name|getSlotsPerMtg
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|prolog2int
argument_list|(
name|model
operator|.
name|getPreference
argument_list|(
name|d
argument_list|,
name|t
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|,
name|dp
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|dp
operator|.
name|getName
argument_list|()
argument_list|,
name|dp
operator|.
name|getPatternBitSet
argument_list|()
argument_list|,
name|model
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|onlyOneReq
operator|&&
name|req
operator|!=
literal|null
condition|)
return|return
operator|new
name|String
index|[]
block|{
name|req
operator|.
name|getDayHeader
argument_list|()
operator|+
literal|" "
operator|+
name|req
operator|.
name|getStartTimeHeader
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|req
operator|.
name|getEndTimeHeader
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
operator|+
name|dpat
block|}
return|;
name|Vector
name|t
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|x
init|=
name|timePrefs
operator|.
name|iterator
argument_list|()
init|;
name|x
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|tp
init|=
operator|(
name|TimePref
operator|)
name|x
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|tx
init|=
name|tp
operator|.
name|getTimePatternModel
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|tx
argument_list|,
literal|","
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|t
operator|.
name|add
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|time
init|=
operator|new
name|String
index|[
name|t
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|time
operator|.
name|length
condition|;
name|x
operator|++
control|)
name|time
index|[
name|x
index|]
operator|=
name|t
operator|.
name|elementAt
argument_list|(
name|x
argument_list|)
operator|+
name|dpat
expr_stmt|;
return|return
name|time
return|;
block|}
name|TimeLocation
name|t
init|=
name|assgn
operator|.
name|getTimeLocation
argument_list|()
decl_stmt|;
return|return
operator|new
name|String
index|[]
block|{
name|t
operator|.
name|getDayHeader
argument_list|()
operator|+
literal|" "
operator|+
name|t
operator|.
name|getStartTimeHeader
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|t
operator|.
name|getEndTimeHeader
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
operator|+
name|dpat
block|}
return|;
block|}
specifier|private
name|String
index|[]
name|room
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
name|Assignment
name|assgn
init|=
operator|(
name|iUseCommitedAssignments
condition|?
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|assgn
operator|==
literal|null
operator|||
name|assgn
operator|.
name|getRoomLocations
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|RoomLocation
argument_list|>
name|roomLocations
init|=
name|TimetableDatabaseLoader
operator|.
name|computeRoomLocations
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|roomLocations
operator|.
name|size
argument_list|()
operator|==
name|clazz
operator|.
name|getNbrRooms
argument_list|()
operator|.
name|intValue
argument_list|()
condition|)
block|{
name|String
index|[]
name|rooms
init|=
operator|new
name|String
index|[
name|roomLocations
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|roomLocations
operator|.
name|size
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|RoomLocation
name|r
init|=
operator|(
name|RoomLocation
operator|)
name|roomLocations
operator|.
name|get
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|rooms
index|[
name|x
index|]
operator|=
name|r
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
return|return
name|rooms
return|;
block|}
name|Vector
name|roomPrefs
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|boolean
name|allRoomReq
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|BuildingPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|pref
init|=
operator|(
name|Preference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|roomPrefs
operator|.
name|add
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|pref
operator|.
name|preferenceText
argument_list|()
argument_list|)
expr_stmt|;
name|allRoomReq
operator|=
literal|false
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|RoomPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|pref
init|=
operator|(
name|Preference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|roomPrefs
operator|.
name|add
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|pref
operator|.
name|preferenceText
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
name|allRoomReq
operator|=
literal|false
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|RoomFeaturePref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|pref
init|=
operator|(
name|Preference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|roomPrefs
operator|.
name|add
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|pref
operator|.
name|preferenceText
argument_list|()
argument_list|)
expr_stmt|;
name|allRoomReq
operator|=
literal|false
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|RoomGroupPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|pref
init|=
operator|(
name|Preference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|roomPrefs
operator|.
name|add
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|pref
operator|.
name|preferenceText
argument_list|()
argument_list|)
expr_stmt|;
name|allRoomReq
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|allRoomReq
condition|)
block|{
name|roomPrefs
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|RoomPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|pref
init|=
operator|(
name|Preference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|roomPrefs
operator|.
name|add
argument_list|(
name|pref
operator|.
name|preferenceText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|String
index|[]
name|rooms
init|=
operator|new
name|String
index|[
name|roomPrefs
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|roomPrefs
operator|.
name|size
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|rooms
index|[
name|x
index|]
operator|=
name|roomPrefs
operator|.
name|elementAt
argument_list|(
name|x
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|rooms
return|;
block|}
name|String
index|[]
name|rooms
init|=
operator|new
name|String
index|[
name|assgn
operator|.
name|getRoomLocations
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|assgn
operator|.
name|getRoomLocations
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|RoomLocation
name|r
init|=
operator|(
name|RoomLocation
operator|)
name|assgn
operator|.
name|getRoomLocations
argument_list|()
operator|.
name|elementAt
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|rooms
index|[
name|x
index|]
operator|=
name|r
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
return|return
name|rooms
return|;
block|}
specifier|private
name|String
index|[]
name|instructor
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|leads
init|=
name|clazz
operator|.
name|getLeadInstructors
argument_list|()
decl_stmt|;
name|String
index|[]
name|instr
init|=
operator|new
name|String
index|[
name|leads
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|clazz
operator|.
name|getLeadInstructors
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|DepartmentalInstructor
name|in
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|leads
operator|.
name|get
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|instr
index|[
name|x
index|]
operator|=
name|in
operator|.
name|nameShort
argument_list|()
expr_stmt|;
block|}
return|return
name|instr
return|;
block|}
specifier|protected
name|void
name|print
parameter_list|(
name|CourseOffering
name|co
parameter_list|)
throws|throws
name|DocumentException
block|{
if|if
condition|(
operator|!
name|iCurrentSubjectArea
operator|.
name|equals
argument_list|(
name|co
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
condition|)
block|{
name|lastPage
argument_list|()
expr_stmt|;
name|iCurrentSubjectArea
operator|=
name|co
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|iDoc
operator|.
name|newPage
argument_list|()
expr_stmt|;
name|printHeader
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|iLineNo
operator|+
literal|5
operator|>=
name|sNrLines
condition|)
name|newPage
argument_list|()
expr_stmt|;
block|}
name|iCourseOffering
operator|=
name|co
expr_stmt|;
name|int
name|courseLimit
init|=
operator|-
literal|1
decl_stmt|;
name|InstructionalOffering
name|offering
init|=
name|co
operator|.
name|getInstructionalOffering
argument_list|()
decl_stmt|;
if|if
condition|(
name|co
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
name|courseLimit
operator|=
name|co
operator|.
name|getReservation
argument_list|()
expr_stmt|;
if|if
condition|(
name|courseLimit
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|offering
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|offering
operator|.
name|getLimit
argument_list|()
operator|!=
literal|null
condition|)
name|courseLimit
operator|=
name|offering
operator|.
name|getLimit
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|boolean
name|unlimited
init|=
literal|false
decl_stmt|;
name|String
name|courseOrg
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|offering
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|config
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|unlimited
operator|=
literal|true
expr_stmt|;
name|Hashtable
name|creditPerIType
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|subpart
operator|.
name|getMinutesPerWk
argument_list|()
operator|.
name|intValue
argument_list|()
operator|<=
literal|0
condition|)
continue|continue;
name|Integer
name|credit
init|=
operator|(
name|Integer
operator|)
name|creditPerIType
operator|.
name|get
argument_list|(
name|subpart
operator|.
name|getItype
argument_list|()
argument_list|)
decl_stmt|;
name|creditPerIType
operator|.
name|put
argument_list|(
name|subpart
operator|.
name|getItype
argument_list|()
argument_list|,
operator|new
name|Integer
argument_list|(
operator|(
name|credit
operator|==
literal|null
condition|?
literal|0
else|:
name|credit
operator|.
name|intValue
argument_list|()
operator|)
operator|+
name|subpart
operator|.
name|getMinutesPerWk
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TreeSet
name|itypes
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|Comparator
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|ItypeDesc
name|i1
init|=
operator|(
name|ItypeDesc
operator|)
name|o1
decl_stmt|;
name|ItypeDesc
name|i2
init|=
operator|(
name|ItypeDesc
operator|)
name|o2
decl_stmt|;
return|return
name|i1
operator|.
name|getItype
argument_list|()
operator|.
name|compareTo
argument_list|(
name|i2
operator|.
name|getItype
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|itypes
operator|.
name|addAll
argument_list|(
name|creditPerIType
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|itypes
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ItypeDesc
name|itype
init|=
operator|(
name|ItypeDesc
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|minPerWeek
init|=
operator|(
operator|(
name|Integer
operator|)
name|creditPerIType
operator|.
name|get
argument_list|(
name|itype
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|courseOrg
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|courseOrg
operator|+=
literal|", "
expr_stmt|;
name|courseOrg
operator|+=
name|itype
operator|.
name|getAbbv
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|" "
operator|+
operator|(
operator|(
name|minPerWeek
operator|+
literal|49
operator|)
operator|/
literal|50
operator|)
expr_stmt|;
block|}
break|break;
block|}
name|int
name|enrl
init|=
operator|-
literal|1
decl_stmt|;
name|String
name|s1
init|=
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getAcademicTerm
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|+
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getAcademicYear
argument_list|()
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|s2
init|=
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getAcademicTerm
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|+
operator|new
name|DecimalFormat
argument_list|(
literal|"00"
argument_list|)
operator|.
name|format
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getAcademicYear
argument_list|()
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|co
operator|.
name|getProjectedDemand
argument_list|()
operator|!=
literal|null
condition|)
name|enrl
operator|=
name|co
operator|.
name|getProjectedDemand
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|int
name|lastLikeEnrl
init|=
name|co
operator|.
name|getCourseOfferingDemands
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|String
name|title
init|=
name|co
operator|.
name|getTitle
argument_list|()
decl_stmt|;
if|if
condition|(
name|title
operator|==
literal|null
condition|)
name|title
operator|=
literal|"*** Title not set"
expr_stmt|;
name|println
argument_list|(
literal|"                                                                                              Proj  "
operator|+
name|s2
operator|+
literal|"                     "
argument_list|)
expr_stmt|;
name|println
argument_list|(
literal|"Course     Title/Notes                           Credit Course Organization             Limit Enrl  Enrl  Consent    Cross List"
argument_list|)
expr_stmt|;
name|println
argument_list|(
literal|"---------- ------------------------------------- ------ ------------------------------- ----- ----- ----- ---------- ----------"
argument_list|)
expr_stmt|;
name|println
argument_list|(
name|rpad
argument_list|(
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|10
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|title
argument_list|,
literal|37
argument_list|)
operator|+
operator|(
name|title
operator|.
name|length
argument_list|()
operator|>
literal|37
condition|?
literal|"-"
else|:
literal|" "
operator|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|co
operator|.
name|getCredit
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|co
operator|.
name|getCredit
argument_list|()
operator|.
name|creditAbbv
argument_list|()
argument_list|,
literal|5
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|courseOrg
argument_list|,
literal|31
argument_list|)
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
name|courseLimit
operator|<=
literal|0
condition|?
name|unlimited
condition|?
literal|"  inf"
else|:
literal|""
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|courseLimit
argument_list|)
argument_list|,
literal|5
argument_list|)
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
name|enrl
operator|<=
literal|0
condition|?
literal|""
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|enrl
argument_list|)
argument_list|,
literal|5
argument_list|)
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
name|lastLikeEnrl
operator|<=
literal|0
condition|?
literal|""
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|lastLikeEnrl
argument_list|)
argument_list|,
literal|5
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|co
operator|.
name|getConsentType
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|co
operator|.
name|getConsentType
argument_list|()
operator|.
name|getAbbv
argument_list|()
argument_list|,
literal|10
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|offering
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
name|offering
operator|.
name|getCourseName
argument_list|()
else|:
literal|""
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|title
operator|.
name|length
argument_list|()
operator|>
literal|37
condition|)
block|{
name|title
operator|=
name|title
operator|.
name|substring
argument_list|(
literal|37
argument_list|)
expr_stmt|;
name|println
argument_list|(
literal|"           "
operator|+
name|rpad
argument_list|(
name|title
argument_list|,
literal|37
argument_list|)
operator|+
operator|(
name|title
operator|.
name|length
argument_list|()
operator|>
literal|37
condition|?
literal|"-"
else|:
literal|" "
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|co
operator|.
name|getScheduleBookNote
argument_list|()
operator|!=
literal|null
operator|&&
name|co
operator|.
name|getScheduleBookNote
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|note
init|=
name|co
operator|.
name|getScheduleBookNote
argument_list|()
decl_stmt|;
name|note
operator|=
name|note
operator|.
name|replaceAll
argument_list|(
literal|"\\. "
argument_list|,
literal|"\\.\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|note
argument_list|,
literal|"\n\r"
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|line
init|=
name|s
operator|.
name|nextToken
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|.
name|length
argument_list|()
operator|>
name|sNrChars
operator|-
literal|7
condition|)
block|{
name|println
argument_list|(
literal|"   "
operator|+
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sNrChars
operator|-
literal|7
argument_list|)
operator|+
literal|"-"
argument_list|)
expr_stmt|;
name|line
operator|=
name|line
operator|.
name|substring
argument_list|(
name|sNrChars
operator|-
literal|7
argument_list|)
expr_stmt|;
block|}
name|println
argument_list|(
literal|"   "
operator|+
name|line
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iLineNo
operator|+
literal|5
operator|>=
name|sNrLines
condition|)
name|newPage
argument_list|()
expr_stmt|;
else|else
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|println
argument_list|(
literal|"        "
operator|+
name|s1
operator|+
literal|"   "
operator|+
name|s2
operator|+
literal|"  Proj | Type"
argument_list|)
expr_stmt|;
name|println
argument_list|(
literal|"Curr  Reqst  Enrl  Enrl | Instr Number Time                                     Limit Bldg-Room          Instructor            Mgr"
argument_list|)
expr_stmt|;
name|println
argument_list|(
literal|"----  -----  ----  ---- | ----- ------ ---------------------------------------- ----- ------------------ --------------------- ------"
argument_list|)
expr_stmt|;
name|Vector
name|rTable
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
comment|//TODO: Print request data based on curricula
comment|/*         int a=0,b=0,c=0;         for (Iterator i=co.getAcadAreaReservations().iterator();i.hasNext();) {             AcadAreaReservation ar = (AcadAreaReservation)i.next();             rTable.add(                     lpad(ar.getAcademicArea().getAcademicAreaAbbreviation(),4)+"  "+                     lpad(ar.getRequested()==null?"":ar.getRequested().toString(),5)+" "+                     lpad(ar.getPriorEnrollment()==null?"":ar.getPriorEnrollment().toString(),5)+" "+                     lpad(ar.getProjectedEnrollment()==null?"":ar.getProjectedEnrollment().toString(),5));             if (ar.getRequested()!=null) a+=ar.getRequested().intValue();             if (ar.getPriorEnrollment()!=null) b+=ar.getPriorEnrollment().intValue();             if (ar.getProjectedEnrollment()!=null) c+=ar.getProjectedEnrollment().intValue();         }         if (rTable.isEmpty()) {             rTable.add(" *** No Request Data   ");         } else {             rTable.add(                     " Tot  "+                     lpad(String.valueOf(a),5)+" "+                     lpad(String.valueOf(b),5)+" "+                     lpad(String.valueOf(c),5));             rTable.add("                       ");             rTable.add(" *Please check requests");         }         */
name|Vector
name|cTable
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
if|if
condition|(
name|offering
operator|.
name|isNotOffered
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|cTable
operator|.
name|add
argument_list|(
literal|" ** Course not offered"
argument_list|)
expr_stmt|;
name|Vector
name|gTable
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|TreeSet
name|configs
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|InstrOfferingConfigComparator
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|configs
operator|.
name|addAll
argument_list|(
name|offering
operator|.
name|getInstrOfferingConfigs
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|configs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|config
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|offering
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
name|cTable
operator|.
name|add
argument_list|(
literal|"** Configuration "
operator|+
name|config
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|TreeSet
name|subparts
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|SchedulingSubpartComparator
argument_list|()
argument_list|)
decl_stmt|;
name|subparts
operator|.
name|addAll
argument_list|(
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|subparts
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|TreeSet
name|classes
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
argument_list|)
decl_stmt|;
name|classes
operator|.
name|addAll
argument_list|(
name|subpart
operator|.
name|getClasses
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|subpartLabel
init|=
name|subpart
operator|.
name|getItype
argument_list|()
operator|.
name|getAbbv
argument_list|()
decl_stmt|;
name|boolean
name|same
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|k
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
index|[]
name|time
init|=
name|time
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|String
index|[]
name|rooms
init|=
name|room
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|String
index|[]
name|instr
init|=
name|instructor
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|Math
operator|.
name|max
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|time
operator|.
name|length
argument_list|)
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|instr
operator|.
name|length
argument_list|,
name|rooms
operator|.
name|length
argument_list|)
argument_list|)
condition|;
name|x
operator|++
control|)
block|{
name|cTable
operator|.
name|add
argument_list|(
name|rpad
argument_list|(
name|same
condition|?
literal|""
else|:
name|x
operator|==
literal|0
condition|?
name|subpartLabel
else|:
literal|""
argument_list|,
literal|5
argument_list|)
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
name|x
operator|==
literal|0
condition|?
name|clazz
operator|.
name|getSectionNumberString
argument_list|()
else|:
literal|""
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|time
operator|!=
literal|null
operator|&&
name|x
operator|<
name|time
operator|.
name|length
condition|?
name|time
index|[
name|x
index|]
else|:
literal|""
argument_list|,
literal|40
argument_list|)
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
name|x
operator|==
literal|0
operator|&&
name|clazz
operator|.
name|getClassLimit
argument_list|()
operator|>
literal|0
operator|&&
name|clazz
operator|.
name|getNbrRooms
argument_list|()
operator|.
name|intValue
argument_list|()
operator|>
literal|0
condition|?
operator|(
name|clazz
operator|.
name|getNbrRooms
argument_list|()
operator|.
name|intValue
argument_list|()
operator|>
literal|1
condition|?
name|clazz
operator|.
name|getNbrRooms
argument_list|()
operator|+
literal|"x"
else|:
literal|""
operator|)
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|clazz
operator|.
name|getClassLimit
argument_list|()
argument_list|)
else|:
literal|""
argument_list|,
literal|5
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|rooms
operator|!=
literal|null
operator|&&
name|x
operator|<
name|rooms
operator|.
name|length
condition|?
name|rooms
index|[
name|x
index|]
else|:
literal|""
argument_list|,
literal|18
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|instr
operator|!=
literal|null
operator|&&
name|x
operator|<
name|instr
operator|.
name|length
condition|?
name|instr
index|[
name|x
index|]
else|:
literal|""
argument_list|,
literal|21
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|x
operator|==
literal|0
condition|?
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getShortLabel
argument_list|()
else|:
literal|""
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|same
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
operator|&&
name|clazz
operator|.
name|getChildClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|gr
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
name|lpad
argument_list|(
name|clazz
operator|.
name|getSectionNumberString
argument_list|()
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|Class_
name|parent
init|=
name|clazz
operator|.
name|getParentClass
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|gr
operator|=
name|parent
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
name|lpad
argument_list|(
name|parent
operator|.
name|getSectionNumberString
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|", "
operator|+
name|gr
expr_stmt|;
name|parent
operator|=
name|parent
operator|.
name|getParentClass
argument_list|()
expr_stmt|;
block|}
name|gTable
operator|.
name|add
argument_list|(
name|gr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1
operator|+
name|Math
operator|.
name|max
argument_list|(
name|rTable
operator|.
name|size
argument_list|()
argument_list|,
name|cTable
operator|.
name|size
argument_list|()
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|String
name|res
init|=
literal|null
decl_stmt|;
name|String
name|cl
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|rTable
operator|.
name|size
argument_list|()
condition|)
name|res
operator|=
operator|(
name|String
operator|)
name|rTable
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|cTable
operator|.
name|size
argument_list|()
condition|)
name|cl
operator|=
operator|(
name|String
operator|)
name|cTable
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|println
argument_list|(
name|rpad
argument_list|(
name|res
argument_list|,
literal|23
argument_list|)
operator|+
literal|" | "
operator|+
operator|(
name|cl
operator|==
literal|null
condition|?
literal|""
else|:
name|cl
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|gTable
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|println
argument_list|(
name|rep
argument_list|(
literal|'-'
argument_list|,
name|sNrChars
argument_list|)
argument_list|)
expr_stmt|;
name|println
argument_list|(
literal|"     Course groups:"
argument_list|)
expr_stmt|;
name|int
name|half
init|=
operator|(
name|gTable
operator|.
name|size
argument_list|()
operator|+
literal|1
operator|)
operator|/
literal|2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|half
condition|;
name|i
operator|++
control|)
block|{
name|String
name|gr1
init|=
operator|(
name|String
operator|)
name|gTable
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|gr2
init|=
operator|(
name|half
operator|+
name|i
operator|<
name|gTable
operator|.
name|size
argument_list|()
condition|?
operator|(
name|String
operator|)
name|gTable
operator|.
name|elementAt
argument_list|(
name|half
operator|+
name|i
argument_list|)
else|:
literal|""
operator|)
decl_stmt|;
name|println
argument_list|(
literal|"     "
operator|+
name|rpad
argument_list|(
name|gr1
argument_list|,
literal|60
argument_list|)
operator|+
literal|" | "
operator|+
name|rpad
argument_list|(
name|gr2
argument_list|,
literal|60
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|println
argument_list|(
name|rep
argument_list|(
literal|'='
argument_list|,
name|sNrChars
argument_list|)
argument_list|)
expr_stmt|;
name|iCourseOffering
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|void
name|out
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|DocumentException
block|{
if|if
condition|(
name|iBuffer
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|iBuffer
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|iBuffer
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|rep
parameter_list|(
name|char
name|ch
parameter_list|,
name|int
name|cnt
parameter_list|)
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
name|ret
operator|+=
name|ch
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|private
name|void
name|outln
parameter_list|(
name|char
name|ch
parameter_list|)
throws|throws
name|DocumentException
block|{
name|out
argument_list|(
name|rep
argument_list|(
name|ch
argument_list|,
name|sNrChars
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|lpad
parameter_list|(
name|String
name|s
parameter_list|,
name|char
name|ch
parameter_list|,
name|int
name|len
parameter_list|)
block|{
while|while
condition|(
name|s
operator|.
name|length
argument_list|()
operator|<
name|len
condition|)
name|s
operator|=
name|ch
operator|+
name|s
expr_stmt|;
return|return
name|s
return|;
block|}
specifier|private
name|String
name|lpad
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
name|s
operator|=
literal|""
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>
name|len
condition|)
return|return
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|len
argument_list|)
return|;
return|return
name|lpad
argument_list|(
name|s
argument_list|,
literal|' '
argument_list|,
name|len
argument_list|)
return|;
block|}
specifier|private
name|String
name|rpad
parameter_list|(
name|String
name|s
parameter_list|,
name|char
name|ch
parameter_list|,
name|int
name|len
parameter_list|)
block|{
while|while
condition|(
name|s
operator|.
name|length
argument_list|()
operator|<
name|len
condition|)
name|s
operator|=
name|s
operator|+
name|ch
expr_stmt|;
return|return
name|s
return|;
block|}
specifier|private
name|String
name|rpad
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
name|s
operator|=
literal|""
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>
name|len
condition|)
return|return
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|len
argument_list|)
return|;
return|return
name|rpad
argument_list|(
name|s
argument_list|,
literal|' '
argument_list|,
name|len
argument_list|)
return|;
block|}
specifier|private
name|String
name|mpad
parameter_list|(
name|String
name|s1
parameter_list|,
name|String
name|s2
parameter_list|,
name|char
name|ch
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|String
name|m
init|=
literal|""
decl_stmt|;
while|while
condition|(
operator|(
name|s1
operator|+
name|m
operator|+
name|s2
operator|)
operator|.
name|length
argument_list|()
operator|<
name|len
condition|)
name|m
operator|+=
name|ch
expr_stmt|;
return|return
name|s1
operator|+
name|m
operator|+
name|s2
return|;
block|}
specifier|private
name|String
name|render
parameter_list|(
name|String
name|line
parameter_list|,
name|String
name|s
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
name|String
name|a
init|=
operator|(
name|line
operator|.
name|length
argument_list|()
operator|<=
name|idx
condition|?
name|rpad
argument_list|(
name|line
argument_list|,
literal|' '
argument_list|,
name|idx
argument_list|)
else|:
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
operator|)
decl_stmt|;
name|String
name|b
init|=
operator|(
name|line
operator|.
name|length
argument_list|()
operator|<=
name|idx
operator|+
name|s
operator|.
name|length
argument_list|()
condition|?
literal|""
else|:
name|line
operator|.
name|substring
argument_list|(
name|idx
operator|+
name|s
operator|.
name|length
argument_list|()
argument_list|)
operator|)
decl_stmt|;
return|return
name|a
operator|+
name|s
operator|+
name|b
return|;
block|}
specifier|private
name|String
name|renderMiddle
parameter_list|(
name|String
name|line
parameter_list|,
name|String
name|s
parameter_list|)
block|{
return|return
name|render
argument_list|(
name|line
argument_list|,
name|s
argument_list|,
operator|(
name|sNrChars
operator|-
name|s
operator|.
name|length
argument_list|()
operator|)
operator|/
literal|2
argument_list|)
return|;
block|}
specifier|private
name|String
name|renderEnd
parameter_list|(
name|String
name|line
parameter_list|,
name|String
name|s
parameter_list|)
block|{
return|return
name|render
argument_list|(
name|line
argument_list|,
name|s
argument_list|,
name|sNrChars
operator|-
name|s
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|void
name|printHeader
parameter_list|()
throws|throws
name|DocumentException
block|{
name|out
argument_list|(
name|renderMiddle
argument_list|(
name|ApplicationProperty
operator|.
name|WorksheetPdfAuthor
operator|.
name|value
argument_list|()
operator|.
name|replace
argument_list|(
literal|"%"
argument_list|,
name|Constants
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|,
name|ApplicationProperty
operator|.
name|WorksheetPdfTitle
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
argument_list|(
name|mpad
argument_list|(
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE MMM dd, yyyy"
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|,
name|iCurrentSubjectArea
operator|.
name|getSession
argument_list|()
operator|.
name|getAcademicInitiative
argument_list|()
operator|+
literal|" "
operator|+
name|iCurrentSubjectArea
operator|.
name|getSession
argument_list|()
operator|.
name|getAcademicTerm
argument_list|()
operator|+
literal|" "
operator|+
name|iCurrentSubjectArea
operator|.
name|getSession
argument_list|()
operator|.
name|getAcademicYear
argument_list|()
argument_list|,
literal|' '
argument_list|,
name|sNrChars
argument_list|)
argument_list|)
expr_stmt|;
name|outln
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
name|iLineNo
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|iCourseOffering
operator|!=
literal|null
condition|)
name|println
argument_list|(
literal|"("
operator|+
name|iCourseOffering
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" Continued)"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|printFooter
parameter_list|()
throws|throws
name|DocumentException
block|{
name|out
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
argument_list|(
name|renderEnd
argument_list|(
name|renderMiddle
argument_list|(
literal|""
argument_list|,
literal|"Page "
operator|+
operator|(
name|iPageNo
operator|+
literal|1
operator|)
argument_list|)
argument_list|,
literal|"<"
operator|+
name|iCurrentSubjectArea
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
operator|(
name|iCourseNumber
operator|!=
literal|null
condition|?
literal|" "
operator|+
name|iCourseNumber
else|:
literal|""
operator|)
operator|+
literal|">  "
argument_list|)
argument_list|)
expr_stmt|;
comment|//FIXME: For some reason when a line starts with space, the line is shifted by one space in the resulting PDF (when using iText 5.0.2)
name|Paragraph
name|p
init|=
operator|new
name|Paragraph
argument_list|(
name|iBuffer
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\n "
argument_list|,
literal|"\n  "
argument_list|)
argument_list|,
name|PdfFont
operator|.
name|getFixedFont
argument_list|()
argument_list|)
decl_stmt|;
name|p
operator|.
name|setLeading
argument_list|(
literal|9.5f
argument_list|)
expr_stmt|;
comment|//was 13.5f
name|iDoc
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|iBuffer
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|iPageNo
operator|++
expr_stmt|;
block|}
specifier|protected
name|void
name|lastPage
parameter_list|()
throws|throws
name|DocumentException
block|{
while|while
condition|(
name|iLineNo
operator|<
name|sNrLines
condition|)
block|{
name|out
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|iLineNo
operator|++
expr_stmt|;
block|}
name|printFooter
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|newPage
parameter_list|()
throws|throws
name|DocumentException
block|{
while|while
condition|(
name|iLineNo
operator|<
name|sNrLines
condition|)
block|{
name|out
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|iLineNo
operator|++
expr_stmt|;
block|}
name|printFooter
argument_list|()
expr_stmt|;
name|iDoc
operator|.
name|newPage
argument_list|()
expr_stmt|;
name|printHeader
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|println
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|DocumentException
block|{
name|out
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|iLineNo
operator|++
expr_stmt|;
if|if
condition|(
name|iLineNo
operator|>=
name|sNrLines
condition|)
name|newPage
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|iDoc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|HibernateUtil
operator|.
name|configureHibernate
argument_list|(
name|ApplicationProperties
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|Long
name|sessionId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.pdf.worksheet.session"
argument_list|,
literal|"165924"
argument_list|)
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
operator|new
name|SessionDAO
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Academic session "
operator|+
name|sessionId
operator|+
literal|" not found, use property tmtbl.pdf.worksheet.session to set academic session."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Session: "
operator|+
name|session
argument_list|)
expr_stmt|;
block|}
name|TreeSet
name|subjectAreas
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|subjectAreas
operator|=
operator|new
name|TreeSet
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SubjectArea
name|sa
init|=
name|SubjectArea
operator|.
name|findByAbbv
argument_list|(
name|sessionId
argument_list|,
name|args
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|sa
operator|==
literal|null
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Subject area "
operator|+
name|args
index|[
name|i
index|]
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
else|else
name|subjectAreas
operator|.
name|add
argument_list|(
name|sa
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|subjectAreas
operator|=
operator|new
name|TreeSet
argument_list|(
name|SubjectArea
operator|.
name|getSubjectAreaList
argument_list|(
name|sessionId
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|subjectAreas
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SubjectArea
name|sa
init|=
operator|(
name|SubjectArea
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Printing subject area "
operator|+
name|sa
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|sa
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|".pdf"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SubjectArea
argument_list|>
name|sas
init|=
operator|new
name|ArrayList
argument_list|<
name|SubjectArea
argument_list|>
argument_list|()
decl_stmt|;
name|sas
operator|.
name|add
argument_list|(
name|sa
argument_list|)
expr_stmt|;
name|PdfWorksheet
operator|.
name|print
argument_list|(
name|out
argument_list|,
name|sas
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|HibernateUtil
operator|.
name|closeHibernate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

