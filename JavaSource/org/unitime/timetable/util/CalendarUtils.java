begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_comment
comment|/**  * @author Heston Fernandes, Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CalendarUtils
block|{
comment|/** 	 * Check if a string is a valid date 	 * @param date String to be checked 	 * @param dateFormat format of the date e.g. MM/dd/yyyy - see SimpleDateFormat 	 * @return true if it is a valid date 	 * Use {@link Formats.Format.isValid(boolean)} instead. 	 */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|boolean
name|isValidDate
parameter_list|(
name|String
name|date
parameter_list|,
name|String
name|dateFormat
parameter_list|)
block|{
return|return
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|dateFormat
argument_list|)
operator|.
name|isValid
argument_list|(
name|date
argument_list|)
return|;
block|}
comment|/** 	 * Parse a string to give a Date object 	 * @param date 	 * @param dateFormat format of the date e.g. MM/dd/yyyy - see SimpleDateFormat 	 * @return null if not a valid date 	 * Use {@link Formats.Format.parse(String)} instead. 	 */
specifier|public
specifier|static
name|Date
name|getDate
parameter_list|(
name|String
name|date
parameter_list|,
name|String
name|dateFormat
parameter_list|)
block|{
try|try
block|{
return|return
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|dateFormat
argument_list|)
operator|.
name|parse
argument_list|(
name|date
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|int
name|date2dayOfYear
parameter_list|(
name|int
name|sessionYear
parameter_list|,
name|Date
name|meetingDate
parameter_list|)
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|meetingDate
argument_list|)
expr_stmt|;
name|int
name|dayOfYear
init|=
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|<
name|sessionYear
condition|)
block|{
name|Calendar
name|x
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|x
operator|.
name|set
argument_list|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
argument_list|,
literal|11
argument_list|,
literal|31
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dayOfYear
operator|-=
name|x
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|>
name|sessionYear
condition|)
block|{
name|Calendar
name|x
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|x
operator|.
name|set
argument_list|(
name|sessionYear
argument_list|,
literal|11
argument_list|,
literal|31
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dayOfYear
operator|+=
name|x
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|)
expr_stmt|;
block|}
return|return
name|dayOfYear
return|;
block|}
specifier|public
specifier|static
name|Date
name|dateOfYear2date
parameter_list|(
name|int
name|sessionYear
parameter_list|,
name|int
name|dayOfYear
parameter_list|)
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|set
argument_list|(
name|sessionYear
argument_list|,
literal|11
argument_list|,
literal|31
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|dayOfYear
operator|<=
literal|0
condition|)
block|{
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|,
name|sessionYear
operator|-
literal|1
argument_list|)
expr_stmt|;
name|dayOfYear
operator|+=
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|dayOfYear
operator|>
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|)
condition|)
block|{
name|dayOfYear
operator|-=
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|,
name|sessionYear
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|dayOfYear
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|c
operator|.
name|getTime
argument_list|()
operator|+
literal|" ("
operator|+
name|c
operator|.
name|getTime
argument_list|()
operator|.
name|getTime
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
name|c
operator|.
name|getTime
argument_list|()
return|;
block|}
block|}
end_class

end_unit

