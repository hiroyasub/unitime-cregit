begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|DateUtils
block|{
specifier|public
specifier|static
name|int
name|getWeek
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|date
argument_list|)
expr_stmt|;
return|return
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|WEEK_OF_YEAR
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|getDayOfYear
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|date
argument_list|)
expr_stmt|;
return|return
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|getFirstDayOfWeek
parameter_list|(
name|int
name|year
parameter_list|,
name|int
name|week
parameter_list|)
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|set
argument_list|(
name|year
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|WEEK_OF_YEAR
argument_list|,
name|week
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|,
name|Calendar
operator|.
name|MONDAY
argument_list|)
expr_stmt|;
name|int
name|dayOfYear
init|=
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|<
name|year
condition|)
block|{
name|Calendar
name|x
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|x
operator|.
name|set
argument_list|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
argument_list|,
literal|11
argument_list|,
literal|31
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dayOfYear
operator|-=
name|x
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|)
expr_stmt|;
block|}
return|return
name|dayOfYear
return|;
block|}
specifier|public
specifier|static
name|Date
name|getDate
parameter_list|(
name|int
name|year
parameter_list|,
name|int
name|dayOfYear
parameter_list|)
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|set
argument_list|(
name|year
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|dayOfYear
argument_list|)
expr_stmt|;
return|return
name|c
operator|.
name|getTime
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Date
name|getStartDate
parameter_list|(
name|int
name|year
parameter_list|,
name|int
name|week
parameter_list|)
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|set
argument_list|(
name|year
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|WEEK_OF_YEAR
argument_list|,
name|week
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|,
name|Calendar
operator|.
name|SUNDAY
argument_list|)
expr_stmt|;
return|return
name|c
operator|.
name|getTime
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Date
name|getEndDate
parameter_list|(
name|int
name|year
parameter_list|,
name|int
name|week
parameter_list|)
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|set
argument_list|(
name|year
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|WEEK_OF_YEAR
argument_list|,
name|week
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|,
name|Calendar
operator|.
name|SATURDAY
argument_list|)
expr_stmt|;
return|return
name|c
operator|.
name|getTime
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|int
name|getEndMonth
parameter_list|(
name|Date
name|sessionEnd
parameter_list|,
name|int
name|year
parameter_list|,
name|int
name|excessDays
parameter_list|)
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|sessionEnd
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|,
operator|+
name|excessDays
argument_list|)
expr_stmt|;
name|int
name|m
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|!=
name|year
condition|)
name|m
operator|+=
literal|12
expr_stmt|;
return|return
name|m
return|;
block|}
specifier|public
specifier|static
name|int
name|getStartMonth
parameter_list|(
name|Date
name|sessionBegin
parameter_list|,
name|int
name|year
parameter_list|,
name|int
name|excessDays
parameter_list|)
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|sessionBegin
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|,
operator|-
name|excessDays
argument_list|)
expr_stmt|;
name|int
name|m
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|!=
name|year
condition|)
name|m
operator|-=
literal|12
expr_stmt|;
return|return
name|m
return|;
block|}
specifier|public
specifier|static
name|int
name|getNrDaysOfMonth
parameter_list|(
name|int
name|month
parameter_list|,
name|int
name|year
parameter_list|)
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|year
operator|+
operator|(
name|month
operator|<
literal|0
condition|?
operator|-
literal|1
else|:
name|month
operator|>=
literal|12
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|,
operator|(
name|month
operator|<
literal|0
condition|?
name|month
operator|+
literal|12
else|:
name|month
operator|%
literal|12
operator|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|cal
operator|.
name|getActualMaximum
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|getDayOfYear
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|month
parameter_list|,
name|int
name|year
parameter_list|)
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|year
operator|+
operator|(
name|month
operator|<
literal|0
condition|?
operator|-
literal|1
else|:
name|month
operator|>=
literal|12
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|,
operator|(
name|month
operator|<
literal|0
condition|?
name|month
operator|+
literal|12
else|:
name|month
operator|%
literal|12
operator|)
argument_list|,
name|day
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|)
decl_stmt|;
if|if
condition|(
name|month
operator|<
literal|0
operator|||
name|month
operator|>=
literal|12
condition|)
block|{
name|cal
operator|.
name|set
argument_list|(
name|year
operator|+
operator|(
name|month
operator|<
literal|0
condition|?
operator|-
literal|1
else|:
literal|0
operator|)
argument_list|,
literal|11
argument_list|,
literal|31
argument_list|)
expr_stmt|;
name|idx
operator|+=
operator|(
name|month
operator|<
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
operator|*
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|)
expr_stmt|;
block|}
return|return
name|idx
operator|-
literal|1
return|;
block|}
block|}
end_class

end_unit

