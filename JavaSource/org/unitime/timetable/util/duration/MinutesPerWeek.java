begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|duration
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|DayCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|EventDateMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePatternDays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_class
specifier|public
class|class
name|MinutesPerWeek
implements|implements
name|DurationModel
block|{
specifier|public
name|MinutesPerWeek
parameter_list|(
name|String
name|paramter
parameter_list|)
block|{
block|}
comment|/** 	 * A combination is valid when the number of minutes per week matches the number of meetings times number of 	 * minutes per week of the time pattern. 	 */
annotation|@
name|Override
specifier|public
name|boolean
name|isValidCombination
parameter_list|(
name|int
name|minsPerWeek
parameter_list|,
name|DatePattern
name|datePattern
parameter_list|,
name|TimePattern
name|timePattern
parameter_list|)
block|{
if|if
condition|(
name|datePattern
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|minsPerWeek
operator|==
name|timePattern
operator|.
name|getNrMeetings
argument_list|()
operator|*
name|timePattern
operator|.
name|getMinPerMtg
argument_list|()
return|;
block|}
comment|/** 	 * All day codes of the selected time pattern are valid. 	 * Only exclude cases when there is no date matching the day code and the date pattern 	 * (e.g., when the selected day is Wednesday, but there is no Wednesday marked yellow in the date pattern). 	 */
annotation|@
name|Override
specifier|public
name|boolean
name|isValidSelection
parameter_list|(
name|int
name|minsPerWeek
parameter_list|,
name|DatePattern
name|datePattern
parameter_list|,
name|TimePattern
name|timePattern
parameter_list|,
name|int
name|dayCode
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isValidCombination
argument_list|(
name|minsPerWeek
argument_list|,
name|datePattern
argument_list|,
name|timePattern
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|datePattern
operator|.
name|getType
argument_list|()
operator|!=
literal|null
operator|&&
name|datePattern
operator|.
name|getType
argument_list|()
operator|==
name|DatePattern
operator|.
name|sTypePatternSet
condition|)
block|{
for|for
control|(
name|DatePattern
name|child
range|:
name|datePattern
operator|.
name|findChildren
argument_list|()
control|)
if|if
condition|(
name|hasDates
argument_list|(
name|child
argument_list|,
name|dayCode
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
return|return
name|hasDates
argument_list|(
name|datePattern
argument_list|,
name|dayCode
argument_list|)
return|;
block|}
comment|/** 	 * All day codes of the selected time pattern are valid. 	 * Only exclude cases when there is no date matching the day code and the date pattern 	 * (e.g., when the selected day is Wednesday, but there is no Wednesday marked yellow in the date pattern). 	 */
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Integer
argument_list|>
name|getDayCodes
parameter_list|(
name|int
name|minsPerWeek
parameter_list|,
name|DatePattern
name|datePattern
parameter_list|,
name|TimePattern
name|timePattern
parameter_list|)
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|ret
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TimePatternDays
name|days
range|:
name|timePattern
operator|.
name|getDays
argument_list|()
control|)
if|if
condition|(
name|isValidSelection
argument_list|(
name|minsPerWeek
argument_list|,
name|datePattern
argument_list|,
name|timePattern
argument_list|,
name|days
operator|.
name|getDayCode
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|days
operator|.
name|getDayCode
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|protected
name|boolean
name|hasDates
parameter_list|(
name|DatePattern
name|datePattern
parameter_list|,
name|int
name|dayCode
parameter_list|)
block|{
if|if
condition|(
name|datePattern
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|datePattern
operator|.
name|getStartDate
argument_list|()
argument_list|)
expr_stmt|;
name|cal
operator|.
name|setLenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|pattern
init|=
name|datePattern
operator|.
name|getPattern
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|pattern
operator|.
name|length
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|pattern
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
operator|==
literal|'1'
condition|)
block|{
name|boolean
name|offered
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
name|offered
operator|=
operator|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_MON
index|]
operator|)
operator|!=
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
name|offered
operator|=
operator|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_TUE
index|]
operator|)
operator|!=
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
name|offered
operator|=
operator|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_WED
index|]
operator|)
operator|!=
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
name|offered
operator|=
operator|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_THU
index|]
operator|)
operator|!=
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
name|offered
operator|=
operator|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_FRI
index|]
operator|)
operator|!=
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
name|offered
operator|=
operator|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SAT
index|]
operator|)
operator|!=
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
name|offered
operator|=
operator|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SUN
index|]
operator|)
operator|!=
literal|0
operator|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|offered
condition|)
return|return
literal|true
return|;
block|}
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/** 	 * Return all dates marked yellow in the given date pattern that are matching the selected day code (days of week) 	 */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Date
argument_list|>
name|getDates
parameter_list|(
name|int
name|minsPerWeek
parameter_list|,
name|DatePattern
name|datePattern
parameter_list|,
name|int
name|dayCode
parameter_list|,
name|int
name|minutesPerMeeting
parameter_list|)
block|{
name|List
argument_list|<
name|Date
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|Date
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|datePattern
operator|==
literal|null
condition|)
return|return
name|ret
return|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|datePattern
operator|.
name|getStartDate
argument_list|()
argument_list|)
expr_stmt|;
name|cal
operator|.
name|setLenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|EventDateMapping
operator|.
name|Class2EventDateMap
name|class2eventDates
init|=
name|EventDateMapping
operator|.
name|getMapping
argument_list|(
name|datePattern
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|pattern
init|=
name|datePattern
operator|.
name|getPattern
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|pattern
operator|.
name|length
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|pattern
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
operator|==
literal|'1'
condition|)
block|{
name|boolean
name|offered
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
name|offered
operator|=
operator|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_MON
index|]
operator|)
operator|!=
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
name|offered
operator|=
operator|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_TUE
index|]
operator|)
operator|!=
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
name|offered
operator|=
operator|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_WED
index|]
operator|)
operator|!=
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
name|offered
operator|=
operator|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_THU
index|]
operator|)
operator|!=
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
name|offered
operator|=
operator|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_FRI
index|]
operator|)
operator|!=
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
name|offered
operator|=
operator|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SAT
index|]
operator|)
operator|!=
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
name|offered
operator|=
operator|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SUN
index|]
operator|)
operator|!=
literal|0
operator|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|offered
condition|)
name|ret
operator|.
name|add
argument_list|(
name|class2eventDates
operator|.
name|getEventDate
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getParamterFormat
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getExactTimeMinutesPerMeeting
parameter_list|(
name|int
name|minsPerWeek
parameter_list|,
name|DatePattern
name|datePattern
parameter_list|,
name|int
name|dayCode
parameter_list|)
block|{
return|return
name|minsPerWeek
operator|/
name|DayCode
operator|.
name|nrDays
argument_list|(
name|dayCode
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|getArrangedHours
parameter_list|(
name|int
name|minsPerWeek
parameter_list|,
name|DatePattern
name|datePattern
parameter_list|)
block|{
return|return
name|minsPerWeek
operator|<=
literal|0
condition|?
literal|null
else|:
name|Integer
operator|.
name|valueOf
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|minsPerWeek
operator|/
literal|50f
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

