begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|duration
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|DayCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_class
specifier|public
class|class
name|WeeklyMinutes
extends|extends
name|MinutesPerWeek
block|{
specifier|private
name|Float
name|iSemesterWeeks
init|=
literal|null
decl_stmt|;
specifier|public
name|WeeklyMinutes
parameter_list|(
name|String
name|parameter
parameter_list|)
block|{
name|super
argument_list|(
name|parameter
argument_list|)
expr_stmt|;
if|if
condition|(
name|parameter
operator|!=
literal|null
operator|&&
operator|!
name|parameter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Matcher
name|matcher
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|getParamterFormat
argument_list|()
argument_list|)
operator|.
name|matcher
argument_list|(
name|parameter
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|iSemesterWeeks
operator|=
name|Float
operator|.
name|valueOf
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|float
name|getSemesterWeeks
parameter_list|(
name|DatePattern
name|datePattern
parameter_list|)
block|{
if|if
condition|(
name|iSemesterWeeks
operator|!=
literal|null
condition|)
return|return
name|iSemesterWeeks
return|;
if|if
condition|(
name|datePattern
operator|!=
literal|null
condition|)
block|{
name|DatePattern
name|defaultDatePattern
init|=
name|datePattern
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultDatePattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultDatePattern
operator|!=
literal|null
condition|)
return|return
name|defaultDatePattern
operator|.
name|getEffectiveNumberOfWeeks
argument_list|()
return|;
else|else
return|return
name|datePattern
operator|.
name|getEffectiveNumberOfWeeks
argument_list|()
return|;
block|}
return|return
literal|15f
return|;
block|}
comment|/** 	 * A combination is valid when the number of semester minutes matches the number of meetings times number of 	 * minutes per week of the time pattern, multiplied by the number of weeks of the date pattern.<br> 	 *<code>weekly minutes == number of meetings x number of minutes per meeting x number of weeks / semester weeks</code><br> 	 * Semester weeks are provided with the given parameter or (if not set) taken from the default date pattern. 	 */
annotation|@
name|Override
specifier|public
name|boolean
name|isValidCombination
parameter_list|(
name|int
name|weeklyMinutes
parameter_list|,
name|DatePattern
name|datePattern
parameter_list|,
name|TimePattern
name|timePattern
parameter_list|)
block|{
if|if
condition|(
name|timePattern
operator|.
name|getType
argument_list|()
operator|!=
literal|null
operator|&&
name|timePattern
operator|.
name|getType
argument_list|()
operator|==
name|TimePattern
operator|.
name|sTypeExactTime
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|datePattern
operator|.
name|getType
argument_list|()
operator|!=
literal|null
operator|&&
name|datePattern
operator|.
name|getType
argument_list|()
operator|==
name|DatePattern
operator|.
name|sTypePatternSet
condition|)
block|{
for|for
control|(
name|DatePattern
name|child
range|:
name|datePattern
operator|.
name|findChildren
argument_list|()
control|)
if|if
condition|(
name|isValidCombination
argument_list|(
name|weeklyMinutes
argument_list|,
name|child
argument_list|,
name|timePattern
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|weeklyMinutes
operator|==
name|datePattern
operator|.
name|getEffectiveNumberOfWeeks
argument_list|()
operator|*
name|timePattern
operator|.
name|getNrMeetings
argument_list|()
operator|*
name|timePattern
operator|.
name|getMinPerMtg
argument_list|()
operator|/
name|getSemesterWeeks
argument_list|(
name|datePattern
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getParamterFormat
parameter_list|()
block|{
return|return
literal|"([0-9]*\\.?[0-9]+)?"
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getExactTimeMinutesPerMeeting
parameter_list|(
name|int
name|weeklyMinutes
parameter_list|,
name|DatePattern
name|datePattern
parameter_list|,
name|int
name|dayCode
parameter_list|)
block|{
if|if
condition|(
name|datePattern
operator|.
name|getType
argument_list|()
operator|!=
literal|null
operator|&&
name|datePattern
operator|.
name|getType
argument_list|()
operator|==
name|DatePattern
operator|.
name|sTypePatternSet
condition|)
block|{
for|for
control|(
name|DatePattern
name|child
range|:
name|datePattern
operator|.
name|findChildren
argument_list|()
control|)
return|return
name|Math
operator|.
name|round
argument_list|(
operator|(
name|getSemesterWeeks
argument_list|(
name|datePattern
argument_list|)
operator|*
name|weeklyMinutes
operator|)
operator|/
operator|(
name|DayCode
operator|.
name|nrDays
argument_list|(
name|dayCode
argument_list|)
operator|*
name|child
operator|.
name|getEffectiveNumberOfWeeks
argument_list|()
operator|)
argument_list|)
return|;
block|}
return|return
name|Math
operator|.
name|round
argument_list|(
operator|(
name|getSemesterWeeks
argument_list|(
name|datePattern
argument_list|)
operator|*
name|weeklyMinutes
operator|)
operator|/
operator|(
name|DayCode
operator|.
name|nrDays
argument_list|(
name|dayCode
argument_list|)
operator|*
name|datePattern
operator|.
name|getEffectiveNumberOfWeeks
argument_list|()
operator|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|getArrangedHours
parameter_list|(
name|int
name|weeklyMinutes
parameter_list|,
name|DatePattern
name|datePattern
parameter_list|)
block|{
if|if
condition|(
name|weeklyMinutes
operator|<=
literal|0
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|datePattern
operator|.
name|getType
argument_list|()
operator|!=
literal|null
operator|&&
name|datePattern
operator|.
name|getType
argument_list|()
operator|==
name|DatePattern
operator|.
name|sTypePatternSet
condition|)
block|{
for|for
control|(
name|DatePattern
name|child
range|:
name|datePattern
operator|.
name|findChildren
argument_list|()
control|)
return|return
operator|new
name|Integer
argument_list|(
name|Math
operator|.
name|round
argument_list|(
operator|(
name|getSemesterWeeks
argument_list|(
name|datePattern
argument_list|)
operator|*
name|weeklyMinutes
operator|)
operator|/
operator|(
name|child
operator|.
name|getEffectiveNumberOfWeeks
argument_list|()
operator|*
literal|50f
operator|)
argument_list|)
argument_list|)
return|;
block|}
return|return
operator|new
name|Integer
argument_list|(
name|Math
operator|.
name|round
argument_list|(
operator|(
name|getSemesterWeeks
argument_list|(
name|datePattern
argument_list|)
operator|*
name|weeklyMinutes
operator|)
operator|/
operator|(
name|datePattern
operator|.
name|getEffectiveNumberOfWeeks
argument_list|()
operator|*
literal|50f
operator|)
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

