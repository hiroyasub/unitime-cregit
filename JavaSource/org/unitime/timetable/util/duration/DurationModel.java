begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|duration
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_interface
specifier|public
interface|interface
name|DurationModel
block|{
comment|/** 	 * Parameter format 	 * @return regular expression matching the parameter, null if there is no parameter 	 */
specifier|public
name|String
name|getParamterFormat
parameter_list|()
function_decl|;
comment|/** 	 * Check if the given selection is valid. 	 * @param minutes number of minutes set on the scheduling subpart 	 * @param datePattern selected date pattern (alternative pattern sets are allowed) 	 * @param timePattern selected time pattern 	 * @return true if there is a valid combinations of days meeting the given criteria 	 */
specifier|public
name|boolean
name|isValidCombination
parameter_list|(
name|int
name|minutes
parameter_list|,
name|DatePattern
name|datePattern
parameter_list|,
name|TimePattern
name|timePattern
parameter_list|)
function_decl|;
comment|/** 	 * Check if the given selection is valid. 	 * @param minutes number of minutes set on the scheduling subpart 	 * @param datePattern selected date pattern 	 * @param timePattern selected time pattern 	 * @param dayCode selected days of week (alternative pattern sets are allowed) 	 * @return true if there is a valid combinations of days meeting the given criteria 	 */
specifier|public
name|boolean
name|isValidSelection
parameter_list|(
name|int
name|minutes
parameter_list|,
name|DatePattern
name|datePattern
parameter_list|,
name|TimePattern
name|timePattern
parameter_list|,
name|int
name|dayCode
parameter_list|)
function_decl|;
comment|/** 	 * Get combinations of days that meet the given selection. 	 * @param minutes number of minutes set on the scheduling subpart 	 * @param datePattern selected date pattern (alternative pattern sets are allowed) 	 * @param timePattern selected time pattern (exact time pattern is NOT allowed) 	 * @return list of day codes (days of week, given by {@link TimePattern#getDays()}) that meet the selected minutes and date pattern 	 */
specifier|public
name|Set
argument_list|<
name|Integer
argument_list|>
name|getDayCodes
parameter_list|(
name|int
name|minutes
parameter_list|,
name|DatePattern
name|datePattern
parameter_list|,
name|TimePattern
name|timePattern
parameter_list|)
function_decl|;
comment|/** 	 * Get all dates meeting the given selection. 	 * @param minutes number of minutes set on the scheduling subpart 	 * @param datePattern selected date pattern 	 * @param dayCode selected days of week (alternative pattern sets are NOT allowed) 	 * @param minutesPerMeeting minutes per meeting 	 * @return list of dates that meet the selected minutes and date pattern 	 */
specifier|public
name|List
argument_list|<
name|Date
argument_list|>
name|getDates
parameter_list|(
name|int
name|minutes
parameter_list|,
name|DatePattern
name|datePattern
parameter_list|,
name|int
name|dayCode
parameter_list|,
name|int
name|minutesPerMeeting
parameter_list|)
function_decl|;
comment|/** 	 * Compute number of minutes for a selected exact time 	 * @param minutes number of minutes set on the scheduling subpart 	 * @param datePattern selected date pattern (alternative pattern sets are NOT allowed) 	 * @param dayCode selected days of week  	 * @return number of arranged hours, null if zero 	 */
specifier|public
name|int
name|getExactTimeMinutesPerMeeting
parameter_list|(
name|int
name|minutes
parameter_list|,
name|DatePattern
name|datePattern
parameter_list|,
name|int
name|dayCode
parameter_list|)
function_decl|;
comment|/** 	 * Return number of arranged hours (if there is no time pattern) 	 * @param minutes number of minutes set on the scheduling subpart 	 * @param datePattern selected date pattern 	 */
specifier|public
name|Integer
name|getArrangedHours
parameter_list|(
name|int
name|minutes
parameter_list|,
name|DatePattern
name|datePattern
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

