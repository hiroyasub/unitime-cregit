begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|duration
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_class
specifier|public
class|class
name|MeetingHours
extends|extends
name|MeetingCountingDuration
block|{
specifier|protected
name|int
name|iMinutesPerHour
init|=
literal|50
decl_stmt|;
specifier|protected
name|double
name|iLowerBound
init|=
literal|0.95
decl_stmt|;
specifier|protected
name|double
name|iUpperBound
init|=
literal|1.10
decl_stmt|;
specifier|public
name|MeetingHours
parameter_list|(
name|String
name|parameter
parameter_list|)
block|{
if|if
condition|(
name|parameter
operator|!=
literal|null
operator|&&
operator|!
name|parameter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Matcher
name|matcher
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|getParamterFormat
argument_list|()
argument_list|)
operator|.
name|matcher
argument_list|(
name|parameter
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|iMinutesPerHour
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|iLowerBound
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|iUpperBound
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|int
name|hours
parameter_list|,
name|int
name|semesterMinutes
parameter_list|)
block|{
return|return
name|iLowerBound
operator|*
name|hours
operator|*
name|iMinutesPerHour
operator|<=
name|semesterMinutes
operator|&&
name|semesterMinutes
operator|<=
name|iUpperBound
operator|*
name|hours
operator|*
name|iMinutesPerHour
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|getMaxMeetings
parameter_list|(
name|int
name|hours
parameter_list|,
name|int
name|minutesPerMeeting
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
operator|(
name|double
operator|)
name|hours
operator|*
name|iMinutesPerHour
operator|)
operator|/
name|minutesPerMeeting
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getParamterFormat
parameter_list|()
block|{
return|return
literal|"([0-9]+),([0-9]*\\.?[0-9]+),([0-9]*\\.?[0-9]+)"
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getExactTimeMinutesPerMeeting
parameter_list|(
name|int
name|hours
parameter_list|,
name|DatePattern
name|datePattern
parameter_list|,
name|int
name|dayCode
parameter_list|)
block|{
if|if
condition|(
name|datePattern
operator|.
name|getType
argument_list|()
operator|!=
literal|null
operator|&&
name|datePattern
operator|.
name|getType
argument_list|()
operator|==
name|DatePattern
operator|.
name|sTypePatternSet
condition|)
block|{
for|for
control|(
name|DatePattern
name|child
range|:
name|datePattern
operator|.
name|findChildren
argument_list|()
control|)
return|return
operator|(
name|iMinutesPerHour
operator|*
name|hours
operator|)
operator|/
name|nbrMeetings
argument_list|(
name|child
argument_list|,
name|dayCode
argument_list|)
return|;
block|}
return|return
operator|(
name|iMinutesPerHour
operator|*
name|hours
operator|)
operator|/
name|nbrMeetings
argument_list|(
name|datePattern
argument_list|,
name|dayCode
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|getArrangedHours
parameter_list|(
name|int
name|hours
parameter_list|,
name|DatePattern
name|datePattern
parameter_list|)
block|{
if|if
condition|(
name|hours
operator|<=
literal|0
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|datePattern
operator|.
name|getType
argument_list|()
operator|!=
literal|null
operator|&&
name|datePattern
operator|.
name|getType
argument_list|()
operator|==
name|DatePattern
operator|.
name|sTypePatternSet
condition|)
block|{
for|for
control|(
name|DatePattern
name|child
range|:
name|datePattern
operator|.
name|findChildren
argument_list|()
control|)
return|return
operator|new
name|Integer
argument_list|(
name|Math
operator|.
name|round
argument_list|(
operator|(
operator|(
name|float
operator|)
name|hours
operator|)
operator|/
name|child
operator|.
name|getEffectiveNumberOfWeeks
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
return|return
operator|new
name|Integer
argument_list|(
name|Math
operator|.
name|round
argument_list|(
operator|(
operator|(
name|float
operator|)
name|hours
operator|)
operator|/
name|datePattern
operator|.
name|getEffectiveNumberOfWeeks
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

