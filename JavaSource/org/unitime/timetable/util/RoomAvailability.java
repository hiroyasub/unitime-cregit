begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2008 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|RoomAvailabilityInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|SolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|WebSolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ExamSolverProxy
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|RoomAvailability
block|{
specifier|private
specifier|static
name|RoomAvailabilityInterface
name|sInstance
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
name|RoomAvailabilityInterface
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|sInstance
operator|!=
literal|null
condition|)
return|return
name|sInstance
return|;
if|if
condition|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.room.availability.class"
argument_list|)
operator|==
literal|null
condition|)
return|return
literal|null
return|;
try|try
block|{
name|sInstance
operator|=
operator|(
name|RoomAvailabilityInterface
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.room.availability.class"
argument_list|)
argument_list|)
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
return|return
name|sInstance
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|setAvailabilityWarning
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|Session
name|acadSession
parameter_list|,
name|Long
name|examType
parameter_list|,
name|boolean
name|checkSolver
parameter_list|,
name|boolean
name|checkAvailability
parameter_list|)
block|{
if|if
condition|(
name|acadSession
operator|==
literal|null
operator|||
name|examType
operator|==
literal|null
operator|||
name|getInstance
argument_list|()
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|checkSolver
condition|)
block|{
name|ExamSolverProxy
name|solver
init|=
name|WebSolver
operator|.
name|getExamSolver
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
operator|&&
name|solver
operator|.
name|getExamTypeId
argument_list|()
operator|.
name|equals
argument_list|(
name|examType
argument_list|)
condition|)
block|{
name|String
name|ts
init|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"RoomAvailability.TimeStamp"
argument_list|)
decl_stmt|;
name|ExamType
name|type
init|=
name|ExamTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|examType
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|ts
operator|==
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_WARN
argument_list|,
literal|"Room availability is not available for "
operator|+
name|type
operator|.
name|getLabel
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|" examinations."
argument_list|)
expr_stmt|;
else|else
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_MSSG
argument_list|,
literal|"Room availability for "
operator|+
name|type
operator|.
name|getLabel
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|" examination solver was updated on "
operator|+
name|ts
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|checkAvailability
condition|)
block|{
name|Date
index|[]
name|bounds
init|=
name|ExamPeriod
operator|.
name|getBounds
argument_list|(
name|acadSession
argument_list|,
name|examType
argument_list|)
decl_stmt|;
name|ExamType
name|type
init|=
name|ExamTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|examType
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
return|return;
name|String
name|exclude
init|=
operator|(
name|type
operator|.
name|getType
argument_list|()
operator|==
name|ExamType
operator|.
name|sExamTypeFinal
condition|?
name|RoomAvailabilityInterface
operator|.
name|sFinalExamType
else|:
name|RoomAvailabilityInterface
operator|.
name|sMidtermExamType
operator|)
decl_stmt|;
name|String
name|ts
init|=
name|getInstance
argument_list|()
operator|.
name|getTimeStamp
argument_list|(
name|bounds
index|[
literal|0
index|]
argument_list|,
name|bounds
index|[
literal|1
index|]
argument_list|,
name|exclude
argument_list|)
decl_stmt|;
if|if
condition|(
name|ts
operator|==
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_WARN
argument_list|,
literal|"Room availability is not available for "
operator|+
name|type
operator|.
name|getLabel
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|" examinations."
argument_list|)
expr_stmt|;
else|else
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_MSSG
argument_list|,
literal|"Room availability for "
operator|+
name|type
operator|.
name|getLabel
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|" examinations was updated on "
operator|+
name|ts
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|setAvailabilityWarning
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|Session
name|acadSession
parameter_list|,
name|boolean
name|checkSolver
parameter_list|,
name|boolean
name|checkAvailability
parameter_list|)
block|{
if|if
condition|(
name|acadSession
operator|==
literal|null
operator|||
name|getInstance
argument_list|()
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|checkSolver
condition|)
block|{
name|SolverProxy
name|solver
init|=
name|WebSolver
operator|.
name|getSolver
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
name|String
name|ts
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ts
operator|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"RoomAvailability.TimeStamp"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|ts
operator|==
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_WARN
argument_list|,
literal|"Room availability is not available for classes."
argument_list|)
expr_stmt|;
else|else
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_MSSG
argument_list|,
literal|"Room availability for course timetabling solver was updated on "
operator|+
name|ts
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|checkAvailability
condition|)
block|{
name|Date
index|[]
name|bounds
init|=
name|DatePattern
operator|.
name|getBounds
argument_list|(
name|acadSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|ts
init|=
name|getInstance
argument_list|()
operator|.
name|getTimeStamp
argument_list|(
name|bounds
index|[
literal|0
index|]
argument_list|,
name|bounds
index|[
literal|1
index|]
argument_list|,
name|RoomAvailabilityInterface
operator|.
name|sClassType
argument_list|)
decl_stmt|;
if|if
condition|(
name|ts
operator|==
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_WARN
argument_list|,
literal|"Room availability is not available for classes."
argument_list|)
expr_stmt|;
else|else
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_MSSG
argument_list|,
literal|"Room availability for classes was updated on "
operator|+
name|ts
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

