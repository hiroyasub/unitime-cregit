begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|CSVFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|PdfWebTable
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ExportUtils
block|{
specifier|public
specifier|static
name|OutputStream
name|getPdfOutputStream
parameter_list|(
name|HttpServletResponse
name|response
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|response
operator|.
name|setContentType
argument_list|(
literal|"application/pdf; charset=UTF-8"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCharacterEncoding
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
literal|"Content-Disposition"
argument_list|,
literal|"attachment; filename=\""
operator|+
name|name
operator|+
literal|".pdf\""
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|getOutputStream
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|OutputStream
name|getXmlOutputStream
parameter_list|(
name|HttpServletResponse
name|response
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|response
operator|.
name|setContentType
argument_list|(
literal|"application/xml; charset=UTF-8"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCharacterEncoding
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
literal|"Content-Disposition"
argument_list|,
literal|"attachment; filename=\""
operator|+
name|name
operator|+
literal|".xml\""
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|getOutputStream
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|PrintWriter
name|getCsvWriter
parameter_list|(
name|HttpServletResponse
name|response
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/csv; charset=UTF-8"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCharacterEncoding
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
literal|"Content-Disposition"
argument_list|,
literal|"attachment; filename=\""
operator|+
name|name
operator|+
literal|".csv\""
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|getWriter
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|PrintWriter
name|getPlainTextWriter
parameter_list|(
name|HttpServletResponse
name|response
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/plain; charset=UTF-8"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCharacterEncoding
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
literal|"Content-Disposition"
argument_list|,
literal|"attachment; filename=\""
operator|+
operator|(
name|name
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|<
literal|0
condition|?
name|name
operator|+
literal|".txt"
else|:
name|name
operator|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|getWriter
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|exportCSV
parameter_list|(
name|CSVFile
name|csv
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|PrintWriter
name|writer
init|=
name|getCsvWriter
argument_list|(
name|response
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|csv
operator|.
name|getHeader
argument_list|()
operator|!=
literal|null
condition|)
name|writer
operator|.
name|println
argument_list|(
name|csv
operator|.
name|getHeader
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|csv
operator|.
name|getLines
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|CSVFile
operator|.
name|CSVLine
name|line
range|:
name|csv
operator|.
name|getLines
argument_list|()
control|)
name|writer
operator|.
name|println
argument_list|(
name|line
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|exportPDF
parameter_list|(
name|PdfWebTable
name|table
parameter_list|,
name|int
name|ordCol
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|OutputStream
name|out
init|=
name|getPdfOutputStream
argument_list|(
name|response
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|table
operator|.
name|exportPdf
argument_list|(
name|out
argument_list|,
name|ordCol
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|exportCSV
parameter_list|(
name|WebTable
name|table
parameter_list|,
name|int
name|ordCol
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|exportCSV
argument_list|(
name|table
operator|.
name|printCsvTable
argument_list|(
name|ordCol
argument_list|)
argument_list|,
name|response
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

