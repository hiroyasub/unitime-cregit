begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicAreaClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassWaitList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseDemand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOfferingReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExactTimeMins
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|LastLikeCourseDemand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMinor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePatternModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|SchedulingSubpartComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Lecture
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|StudentSectioningLoader
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|StudentSectioningModel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|AcademicAreaCode
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|FreeTimeRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Offering
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Subpart
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|BatchStudentSectioningLoader
extends|extends
name|StudentSectioningLoader
block|{
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BatchStudentSectioningLoader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|iIncludeCourseDemands
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|iIncludeLastLikeStudents
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|iIncludeUseCommittedAssignments
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iMakeupAssignmentsFromRequiredPrefs
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|iInitiative
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iTerm
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iYear
init|=
literal|null
decl_stmt|;
specifier|private
name|long
name|iMakeupAssignmentId
init|=
literal|0
decl_stmt|;
specifier|public
name|BatchStudentSectioningLoader
parameter_list|(
name|StudentSectioningModel
name|model
parameter_list|)
block|{
name|super
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|iIncludeCourseDemands
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.IncludeCourseDemands"
argument_list|,
name|iIncludeCourseDemands
argument_list|)
expr_stmt|;
name|iIncludeLastLikeStudents
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.IncludeLastLikeStudents"
argument_list|,
name|iIncludeLastLikeStudents
argument_list|)
expr_stmt|;
name|iIncludeUseCommittedAssignments
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.IncludeUseCommittedAssignments"
argument_list|,
name|iIncludeUseCommittedAssignments
argument_list|)
expr_stmt|;
name|iMakeupAssignmentsFromRequiredPrefs
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.MakeupAssignmentsFromRequiredPrefs"
argument_list|,
name|iMakeupAssignmentsFromRequiredPrefs
argument_list|)
expr_stmt|;
name|iInitiative
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Data.Initiative"
argument_list|)
expr_stmt|;
name|iYear
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Data.Year"
argument_list|)
expr_stmt|;
name|iTerm
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Data.Term"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|load
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|iInitiative
argument_list|,
name|iYear
argument_list|,
name|iTerm
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Session "
operator|+
name|iInitiative
operator|+
literal|" "
operator|+
name|iTerm
operator|+
name|iYear
operator|+
literal|" not found!"
argument_list|)
throw|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Loading data for "
operator|+
name|iInitiative
operator|+
literal|" "
operator|+
name|iTerm
operator|+
name|iYear
operator|+
literal|"..."
argument_list|)
expr_stmt|;
name|load
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getInstructorIds
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
if|if
condition|(
operator|!
name|clazz
operator|.
name|isDisplayInstructor
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
return|return
literal|null
return|;
name|String
name|ret
init|=
literal|null
decl_stmt|;
name|TreeSet
name|ts
init|=
operator|new
name|TreeSet
argument_list|(
name|clazz
operator|.
name|getClassInstructors
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|ts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ci
operator|.
name|isLead
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
name|ret
operator|=
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
else|else
name|ret
operator|+=
literal|":"
operator|+
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|String
name|getInstructorNames
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
if|if
condition|(
operator|!
name|clazz
operator|.
name|isDisplayInstructor
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
return|return
literal|null
return|;
name|String
name|ret
init|=
literal|null
decl_stmt|;
name|TreeSet
name|ts
init|=
operator|new
name|TreeSet
argument_list|(
name|clazz
operator|.
name|getClassInstructors
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|ts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ci
operator|.
name|isLead
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
name|ret
operator|=
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|nameShort
argument_list|()
expr_stmt|;
else|else
name|ret
operator|+=
literal|":"
operator|+
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|nameShort
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|TimeLocation
name|makeupTime
parameter_list|(
name|Class_
name|c
parameter_list|)
block|{
name|DatePattern
name|datePattern
init|=
name|c
operator|.
name|effectiveDatePattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|datePattern
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"        -- makup time for "
operator|+
name|c
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|": no date pattern set"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|c
operator|.
name|getEffectiveTimePreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|tp
init|=
operator|(
name|TimePref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|TimePatternModel
name|pattern
init|=
name|tp
operator|.
name|getTimePatternModel
argument_list|()
decl_stmt|;
if|if
condition|(
name|pattern
operator|.
name|isExactTime
argument_list|()
condition|)
block|{
name|int
name|length
init|=
name|ExactTimeMins
operator|.
name|getNrSlotsPerMtg
argument_list|(
name|pattern
operator|.
name|getExactDays
argument_list|()
argument_list|,
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|breakTime
init|=
name|ExactTimeMins
operator|.
name|getBreakTime
argument_list|(
name|pattern
operator|.
name|getExactDays
argument_list|()
argument_list|,
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|TimeLocation
argument_list|(
name|pattern
operator|.
name|getExactDays
argument_list|()
argument_list|,
name|pattern
operator|.
name|getExactStartSlot
argument_list|()
argument_list|,
name|length
argument_list|,
name|PreferenceLevel
operator|.
name|sIntLevelNeutral
argument_list|,
literal|0
argument_list|,
name|datePattern
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|datePattern
operator|.
name|getName
argument_list|()
argument_list|,
name|datePattern
operator|.
name|getPatternBitSet
argument_list|()
argument_list|,
name|breakTime
argument_list|)
return|;
block|}
else|else
block|{
for|for
control|(
name|int
name|time
init|=
literal|0
init|;
name|time
operator|<
name|pattern
operator|.
name|getNrTimes
argument_list|()
condition|;
name|time
operator|++
control|)
block|{
for|for
control|(
name|int
name|day
init|=
literal|0
init|;
name|day
operator|<
name|pattern
operator|.
name|getNrDays
argument_list|()
condition|;
name|day
operator|++
control|)
block|{
name|String
name|pref
init|=
name|pattern
operator|.
name|getPreference
argument_list|(
name|day
argument_list|,
name|time
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
block|{
return|return
operator|new
name|TimeLocation
argument_list|(
name|pattern
operator|.
name|getDayCode
argument_list|(
name|day
argument_list|)
argument_list|,
name|pattern
operator|.
name|getStartSlot
argument_list|(
name|time
argument_list|)
argument_list|,
name|pattern
operator|.
name|getSlotsPerMtg
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|prolog2int
argument_list|(
name|pattern
operator|.
name|getPreference
argument_list|(
name|day
argument_list|,
name|time
argument_list|)
argument_list|)
argument_list|,
name|pattern
operator|.
name|getNormalizedPreference
argument_list|(
name|day
argument_list|,
name|time
argument_list|,
literal|0.77
argument_list|)
argument_list|,
name|datePattern
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|datePattern
operator|.
name|getName
argument_list|()
argument_list|,
name|datePattern
operator|.
name|getPatternBitSet
argument_list|()
argument_list|,
name|pattern
operator|.
name|getBreakTime
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|c
operator|.
name|getEffectiveTimePreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|sLog
operator|.
name|warn
argument_list|(
literal|"        -- makup time for "
operator|+
name|c
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|": no time preference set"
argument_list|)
expr_stmt|;
else|else
name|sLog
operator|.
name|warn
argument_list|(
literal|"        -- makup time for "
operator|+
name|c
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|": no required time set"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Vector
name|makeupRooms
parameter_list|(
name|Class_
name|c
parameter_list|)
block|{
name|Vector
name|rooms
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|c
operator|.
name|getEffectiveRoomPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomPref
name|rp
init|=
operator|(
name|RoomPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|rp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"        -- makup room for "
operator|+
name|c
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|": preference for "
operator|+
name|rp
operator|.
name|getRoom
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|" is not required"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Location
name|room
init|=
operator|(
name|Location
operator|)
name|rp
operator|.
name|getRoom
argument_list|()
decl_stmt|;
name|RoomLocation
name|roomLocation
init|=
operator|new
name|RoomLocation
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|room
operator|.
name|getLabel
argument_list|()
argument_list|,
operator|(
name|room
operator|instanceof
name|Room
condition|?
operator|(
operator|(
name|Room
operator|)
name|room
operator|)
operator|.
name|getBuilding
argument_list|()
operator|.
name|getUniqueId
argument_list|()
else|:
literal|null
operator|)
argument_list|,
literal|0
argument_list|,
name|room
operator|.
name|getCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|room
operator|.
name|getCoordinateX
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|room
operator|.
name|getCoordinateY
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|room
operator|.
name|isIgnoreTooFar
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|rooms
operator|.
name|addElement
argument_list|(
name|roomLocation
argument_list|)
expr_stmt|;
block|}
return|return
name|rooms
return|;
block|}
specifier|public
name|Placement
name|makeupPlacement
parameter_list|(
name|Class_
name|c
parameter_list|)
block|{
name|TimeLocation
name|time
init|=
name|makeupTime
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|time
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Vector
name|rooms
init|=
name|makeupRooms
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|Vector
name|times
init|=
operator|new
name|Vector
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|times
operator|.
name|addElement
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|Lecture
name|lecture
init|=
operator|new
name|Lecture
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|c
operator|.
name|getClassLabel
argument_list|()
argument_list|,
name|times
argument_list|,
name|rooms
argument_list|,
name|rooms
operator|.
name|size
argument_list|()
argument_list|,
operator|new
name|Placement
argument_list|(
literal|null
argument_list|,
name|time
argument_list|,
name|rooms
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1.0
argument_list|)
decl_stmt|;
name|lecture
operator|.
name|setNote
argument_list|(
name|c
operator|.
name|getNotes
argument_list|()
argument_list|)
expr_stmt|;
name|Placement
name|p
init|=
operator|(
name|Placement
operator|)
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
decl_stmt|;
name|p
operator|.
name|setAssignmentId
argument_list|(
operator|new
name|Long
argument_list|(
name|iMakeupAssignmentId
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|lecture
operator|.
name|setBestAssignment
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"        -- makup placement for "
operator|+
name|c
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|": "
operator|+
name|p
operator|.
name|getLongName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
specifier|private
name|Section
name|loadSection
parameter_list|(
name|Subpart
name|subpart
parameter_list|,
name|Section
name|parentSection
parameter_list|,
name|Class_
name|c
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|Placement
name|p
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iMakeupAssignmentsFromRequiredPrefs
condition|)
block|{
name|p
operator|=
name|makeupPlacement
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assignment
name|a
init|=
name|c
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
name|p
operator|=
operator|(
name|a
operator|==
literal|null
condition|?
literal|null
else|:
name|a
operator|.
name|getPlacement
argument_list|()
operator|)
expr_stmt|;
block|}
name|Section
name|section
init|=
operator|new
name|Section
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|limit
argument_list|,
name|c
operator|.
name|getClassLabel
argument_list|()
argument_list|,
name|subpart
argument_list|,
name|p
argument_list|,
name|getInstructorIds
argument_list|(
name|c
argument_list|)
argument_list|,
name|getInstructorNames
argument_list|(
name|c
argument_list|)
argument_list|,
name|parentSection
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
operator|&&
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternId
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultDatePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|setDatePattern
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternId
argument_list|()
argument_list|,
literal|""
argument_list|,
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getWeekCode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
operator|&&
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"generated"
argument_list|)
condition|)
block|{
name|SimpleDateFormat
name|sdf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd"
argument_list|)
decl_stmt|;
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|setDatePattern
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternId
argument_list|()
argument_list|,
name|sdf
operator|.
name|format
argument_list|(
name|c
operator|.
name|effectiveDatePattern
argument_list|()
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|sdf
operator|.
name|format
argument_list|(
name|c
operator|.
name|effectiveDatePattern
argument_list|()
operator|.
name|getEndDate
argument_list|()
argument_list|)
argument_list|,
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getWeekCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|section
return|;
block|}
specifier|private
name|Offering
name|loadOffering
parameter_list|(
name|InstructionalOffering
name|io
parameter_list|,
name|Hashtable
name|courseTable
parameter_list|,
name|Hashtable
name|classTable
parameter_list|)
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"Loading offering "
operator|+
name|io
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|io
operator|.
name|hasClasses
argument_list|()
condition|)
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- offering "
operator|+
name|io
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" has no class"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Offering
name|offering
init|=
operator|new
name|Offering
argument_list|(
name|io
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|io
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|unlimited
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|ioc
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ioc
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|unlimited
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|io
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|co
init|=
operator|(
name|CourseOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|projected
init|=
operator|(
name|co
operator|.
name|getProjectedDemand
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|co
operator|.
name|getProjectedDemand
argument_list|()
operator|.
name|intValue
argument_list|()
operator|)
decl_stmt|;
name|int
name|limit
init|=
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|unlimited
condition|)
name|limit
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseReservations
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOfferingReservation
name|reservation
init|=
operator|(
name|CourseOfferingReservation
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|reservation
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|equals
argument_list|(
name|co
argument_list|)
operator|&&
name|reservation
operator|.
name|getReserved
argument_list|()
operator|!=
literal|null
condition|)
name|limit
operator|=
name|reservation
operator|.
name|getReserved
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|Course
name|course
init|=
operator|new
name|Course
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|co
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|,
name|co
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|offering
argument_list|,
name|limit
argument_list|,
name|projected
argument_list|)
decl_stmt|;
name|courseTable
operator|.
name|put
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|course
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- created course "
operator|+
name|course
argument_list|)
expr_stmt|;
block|}
name|Hashtable
name|class2section
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Hashtable
name|ss2subpart
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|ioc
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ioc
operator|.
name|hasClasses
argument_list|()
condition|)
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- config "
operator|+
name|ioc
operator|.
name|getName
argument_list|()
operator|+
literal|" has no class"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Config
name|config
init|=
operator|new
name|Config
argument_list|(
name|ioc
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|ioc
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" ["
operator|+
name|ioc
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|,
name|offering
argument_list|)
decl_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- created config "
operator|+
name|config
argument_list|)
expr_stmt|;
name|TreeSet
name|subparts
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|SchedulingSubpartComparator
argument_list|()
argument_list|)
decl_stmt|;
name|subparts
operator|.
name|addAll
argument_list|(
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|subparts
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|sufix
init|=
name|ss
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
decl_stmt|;
name|Subpart
name|parentSubpart
init|=
operator|(
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|Subpart
operator|)
name|ss2subpart
operator|.
name|get
argument_list|(
name|ss
operator|.
name|getParentSubpart
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|!=
literal|null
operator|&&
name|parentSubpart
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"    -- subpart "
operator|+
name|ss
operator|.
name|getSchedulingSubpartLabel
argument_list|()
operator|+
literal|" has parent "
operator|+
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|.
name|getSchedulingSubpartLabel
argument_list|()
operator|+
literal|", but the appropriate parent subpart is not loaded."
argument_list|)
expr_stmt|;
block|}
name|Subpart
name|subpart
init|=
operator|new
name|Subpart
argument_list|(
name|ss
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|ss
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|sufix
argument_list|,
name|ss
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
operator|(
name|sufix
operator|==
literal|null
operator|||
name|sufix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
literal|" ("
operator|+
name|sufix
operator|+
literal|")"
operator|)
argument_list|,
name|config
argument_list|,
name|parentSubpart
argument_list|)
decl_stmt|;
name|ss2subpart
operator|.
name|put
argument_list|(
name|ss
argument_list|,
name|subpart
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"    -- created subpart "
operator|+
name|subpart
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|k
init|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|limit
init|=
name|c
operator|.
name|getClassLimit
argument_list|()
decl_stmt|;
if|if
condition|(
name|ioc
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|limit
operator|=
operator|-
literal|1
expr_stmt|;
name|Section
name|parentSection
init|=
operator|(
name|c
operator|.
name|getParentClass
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|Section
operator|)
name|class2section
operator|.
name|get
argument_list|(
name|c
operator|.
name|getParentClass
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
operator|&&
name|parentSection
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"    -- class "
operator|+
name|c
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" has parent "
operator|+
name|c
operator|.
name|getParentClass
argument_list|()
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|", but the appropriate parent section is not loaded."
argument_list|)
expr_stmt|;
block|}
name|Section
name|section
init|=
name|loadSection
argument_list|(
name|subpart
argument_list|,
name|parentSection
argument_list|,
name|c
argument_list|,
name|limit
argument_list|)
decl_stmt|;
name|class2section
operator|.
name|put
argument_list|(
name|c
argument_list|,
name|section
argument_list|)
expr_stmt|;
name|classTable
operator|.
name|put
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|section
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"      -- created section "
operator|+
name|section
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|offering
return|;
block|}
specifier|public
name|Student
name|loadStudent
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
parameter_list|,
name|Hashtable
name|courseTable
parameter_list|,
name|Hashtable
name|classTable
parameter_list|)
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"Loading student "
operator|+
name|s
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|" (id="
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|", name="
operator|+
name|s
operator|.
name|getFirstName
argument_list|()
operator|+
literal|" "
operator|+
name|s
operator|.
name|getMiddleName
argument_list|()
operator|+
literal|" "
operator|+
name|s
operator|.
name|getLastName
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|Student
name|student
init|=
operator|new
name|Student
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
decl_stmt|;
name|loadStudentInfo
argument_list|(
name|student
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|int
name|priority
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|TreeSet
argument_list|(
name|s
operator|.
name|getCourseDemands
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseDemand
name|cd
init|=
operator|(
name|CourseDemand
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Request
name|request
init|=
operator|new
name|FreeTimeRequest
argument_list|(
name|cd
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|priority
operator|++
argument_list|,
name|cd
operator|.
name|isAlternative
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|,
name|student
argument_list|,
operator|new
name|TimeLocation
argument_list|(
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getLength
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|s
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultDatePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|""
argument_list|,
name|s
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultDatePattern
argument_list|()
operator|.
name|getPatternBitSet
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- added request "
operator|+
name|request
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|cd
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Vector
name|courses
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|HashSet
name|selChoices
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|HashSet
name|wlChoices
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|HashSet
name|assignedSections
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|Config
name|assignedConfig
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
operator|new
name|TreeSet
argument_list|(
name|cd
operator|.
name|getCourseRequests
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|cr
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|Course
name|course
init|=
operator|(
name|Course
operator|)
name|courseTable
operator|.
name|get
argument_list|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"  -- course "
operator|+
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" not loaded"
argument_list|)
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|Iterator
name|k
init|=
name|cr
operator|.
name|getClassWaitLists
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassWaitList
name|cwl
init|=
operator|(
name|ClassWaitList
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
name|Section
name|section
init|=
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getSection
argument_list|(
name|cwl
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cwl
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|ClassWaitList
operator|.
name|TYPE_SELECTION
argument_list|)
condition|)
name|selChoices
operator|.
name|add
argument_list|(
name|section
operator|.
name|getChoice
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|cwl
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|ClassWaitList
operator|.
name|TYPE_WAITLIST
argument_list|)
condition|)
name|wlChoices
operator|.
name|add
argument_list|(
name|section
operator|.
name|getChoice
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|assignedConfig
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|k
init|=
name|cr
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StudentClassEnrollment
name|sce
init|=
operator|(
name|StudentClassEnrollment
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
name|Section
name|section
init|=
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getSection
argument_list|(
name|sce
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
name|assignedSections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
name|assignedConfig
operator|=
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|courses
operator|.
name|addElement
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|courses
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|CourseRequest
name|request
init|=
operator|new
name|CourseRequest
argument_list|(
name|cd
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|priority
operator|++
argument_list|,
name|cd
operator|.
name|isAlternative
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|,
name|student
argument_list|,
name|courses
argument_list|,
name|cd
operator|.
name|isWaitlist
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
decl_stmt|;
name|request
operator|.
name|getSelectedChoices
argument_list|()
operator|.
name|addAll
argument_list|(
name|selChoices
argument_list|)
expr_stmt|;
name|request
operator|.
name|getWaitlistedChoices
argument_list|()
operator|.
name|addAll
argument_list|(
name|wlChoices
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignedConfig
operator|!=
literal|null
operator|&&
name|assignedSections
operator|.
name|size
argument_list|()
operator|==
name|assignedConfig
operator|.
name|getSubparts
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|Enrollment
name|enrollment
init|=
operator|new
name|Enrollment
argument_list|(
name|request
argument_list|,
literal|0
argument_list|,
name|assignedConfig
argument_list|,
name|assignedSections
argument_list|)
decl_stmt|;
name|request
operator|.
name|setInitialAssignment
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
block|}
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- added request "
operator|+
name|request
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"  -- course demand "
operator|+
name|cd
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|" has no course requests"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|student
return|;
block|}
specifier|public
specifier|static
name|double
name|getLastLikeStudentWeight
parameter_list|(
name|Course
name|course
parameter_list|,
name|int
name|real
parameter_list|,
name|int
name|lastLike
parameter_list|)
block|{
name|int
name|projected
init|=
name|course
operator|.
name|getProjected
argument_list|()
decl_stmt|;
name|int
name|limit
init|=
name|course
operator|.
name|getLimit
argument_list|()
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|getLimit
argument_list|()
operator|<
literal|0
condition|)
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- Course "
operator|+
name|course
operator|.
name|getName
argument_list|()
operator|+
literal|" is unlimited."
argument_list|)
expr_stmt|;
return|return
literal|1.0
return|;
block|}
if|if
condition|(
name|projected
operator|<=
literal|0
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"  -- No projected demand for course "
operator|+
name|course
operator|.
name|getName
argument_list|()
operator|+
literal|", using course limit ("
operator|+
name|limit
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|projected
operator|=
name|limit
expr_stmt|;
block|}
if|else if
condition|(
name|limit
operator|<
name|projected
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"  -- Projected number of students is over course limit for course "
operator|+
name|course
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|Math
operator|.
name|round
argument_list|(
name|projected
argument_list|)
operator|+
literal|">"
operator|+
name|limit
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|projected
operator|=
name|limit
expr_stmt|;
block|}
if|if
condition|(
name|lastLike
operator|==
literal|0
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"  -- No last like info for course "
operator|+
name|course
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1.0
return|;
block|}
name|double
name|weight
init|=
operator|(
operator|(
name|double
operator|)
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|projected
operator|-
name|real
argument_list|)
operator|)
operator|/
name|lastLike
decl_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- last like student weight for "
operator|+
name|course
operator|.
name|getName
argument_list|()
operator|+
literal|" is "
operator|+
name|weight
operator|+
literal|" (lastLike="
operator|+
name|lastLike
operator|+
literal|", real="
operator|+
name|real
operator|+
literal|", projected="
operator|+
name|projected
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
name|weight
return|;
block|}
specifier|private
name|void
name|fixWeights
parameter_list|()
block|{
name|Hashtable
name|lastLike
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Hashtable
name|real
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|getModel
argument_list|()
operator|.
name|getStudents
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Student
name|student
init|=
operator|(
name|Student
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|f
init|=
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|f
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Request
name|request
init|=
operator|(
name|Request
operator|)
name|f
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|courseRequest
init|=
operator|(
name|CourseRequest
operator|)
name|request
decl_stmt|;
name|Course
name|course
init|=
operator|(
name|Course
operator|)
name|courseRequest
operator|.
name|getCourses
argument_list|()
operator|.
name|firstElement
argument_list|()
decl_stmt|;
name|Integer
name|cnt
init|=
operator|(
name|Integer
operator|)
operator|(
name|student
operator|.
name|isDummy
argument_list|()
condition|?
name|lastLike
else|:
name|real
operator|)
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
operator|(
name|student
operator|.
name|isDummy
argument_list|()
condition|?
name|lastLike
else|:
name|real
operator|)
operator|.
name|put
argument_list|(
name|course
argument_list|,
operator|new
name|Integer
argument_list|(
operator|(
name|cnt
operator|==
literal|null
condition|?
literal|0
else|:
name|cnt
operator|.
name|intValue
argument_list|()
operator|)
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Enumeration
name|e
init|=
operator|new
name|Vector
argument_list|(
name|getModel
argument_list|()
operator|.
name|getStudents
argument_list|()
argument_list|)
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Student
name|student
init|=
operator|(
name|Student
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|f
init|=
operator|new
name|Vector
argument_list|(
name|student
operator|.
name|getRequests
argument_list|()
argument_list|)
operator|.
name|elements
argument_list|()
init|;
name|f
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Request
name|request
init|=
operator|(
name|Request
operator|)
name|f
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|student
operator|.
name|isDummy
argument_list|()
condition|)
block|{
name|request
operator|.
name|setWeight
argument_list|(
literal|1.0
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|request
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|courseRequest
init|=
operator|(
name|CourseRequest
operator|)
name|request
decl_stmt|;
name|Course
name|course
init|=
operator|(
name|Course
operator|)
name|courseRequest
operator|.
name|getCourses
argument_list|()
operator|.
name|firstElement
argument_list|()
decl_stmt|;
name|Integer
name|lastLikeCnt
init|=
operator|(
name|Integer
operator|)
name|lastLike
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
name|Integer
name|realCnt
init|=
operator|(
name|Integer
operator|)
name|real
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
name|courseRequest
operator|.
name|setWeight
argument_list|(
name|getLastLikeStudentWeight
argument_list|(
name|course
argument_list|,
name|realCnt
operator|==
literal|null
condition|?
literal|0
else|:
name|realCnt
operator|.
name|intValue
argument_list|()
argument_list|,
name|lastLikeCnt
operator|==
literal|null
condition|?
literal|0
else|:
name|lastLikeCnt
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|request
operator|.
name|setWeight
argument_list|(
literal|1.0
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getWeight
argument_list|()
operator|<=
literal|0.0
condition|)
block|{
name|getModel
argument_list|()
operator|.
name|removeVariable
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|remove
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getModel
argument_list|()
operator|.
name|getStudents
argument_list|()
operator|.
name|remove
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|loadLastLikeStudent
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|LastLikeCourseDemand
name|d
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
parameter_list|,
name|CourseOffering
name|co
parameter_list|,
name|Hashtable
name|studentTable
parameter_list|,
name|Hashtable
name|courseTable
parameter_list|,
name|Hashtable
name|classTable
parameter_list|,
name|Hashtable
name|classAssignments
parameter_list|)
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"Loading last like demand of student "
operator|+
name|s
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|" (id="
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|", name="
operator|+
name|s
operator|.
name|getFirstName
argument_list|()
operator|+
literal|" "
operator|+
name|s
operator|.
name|getMiddleName
argument_list|()
operator|+
literal|" "
operator|+
name|s
operator|.
name|getLastName
argument_list|()
operator|+
literal|") for "
operator|+
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|Student
name|student
init|=
operator|(
name|Student
operator|)
name|studentTable
operator|.
name|get
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
block|{
name|student
operator|=
operator|new
name|Student
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|loadStudentInfo
argument_list|(
name|student
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|studentTable
operator|.
name|put
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|student
argument_list|)
expr_stmt|;
block|}
name|int
name|priority
init|=
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|Vector
name|courses
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|Course
name|course
init|=
operator|(
name|Course
operator|)
name|courseTable
operator|.
name|get
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"  -- course "
operator|+
name|co
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" not loaded"
argument_list|)
expr_stmt|;
return|return;
block|}
name|courses
operator|.
name|addElement
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|CourseRequest
name|request
init|=
operator|new
name|CourseRequest
argument_list|(
name|d
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|priority
operator|++
argument_list|,
literal|false
argument_list|,
name|student
argument_list|,
name|courses
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- added request "
operator|+
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|classAssignments
operator|!=
literal|null
operator|&&
operator|!
name|classAssignments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HashSet
name|assignedSections
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|HashSet
name|classIds
init|=
operator|(
name|HashSet
operator|)
name|classAssignments
operator|.
name|get
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|classIds
operator|!=
literal|null
condition|)
for|for
control|(
name|Iterator
name|i
init|=
name|classIds
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Long
name|classId
init|=
operator|(
name|Long
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Section
name|section
init|=
operator|(
name|Section
operator|)
name|request
operator|.
name|getSection
argument_list|(
name|classId
operator|.
name|longValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
name|assignedSections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|assignedSections
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"    -- committed assignment: "
operator|+
name|assignedSections
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|request
operator|.
name|values
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Enrollment
name|enrollment
init|=
operator|(
name|Enrollment
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|.
name|containsAll
argument_list|(
name|assignedSections
argument_list|)
condition|)
block|{
name|request
operator|.
name|setInitialAssignment
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"      -- found: "
operator|+
name|enrollment
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
specifier|public
name|void
name|loadStudentInfo
parameter_list|(
name|Student
name|student
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
parameter_list|)
block|{
name|HashSet
name|majors
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|HashSet
name|minors
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|s
operator|.
name|getAcademicAreaClassifications
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AcademicAreaClassification
name|aac
init|=
operator|(
name|AcademicAreaClassification
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|student
operator|.
name|getAcademicAreaClasiffications
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|AcademicAreaCode
argument_list|(
name|aac
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|aac
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- aac: "
operator|+
name|aac
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|":"
operator|+
name|aac
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|aac
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getPosMajors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PosMajor
name|major
init|=
operator|(
name|PosMajor
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|getPosMajors
argument_list|()
operator|.
name|contains
argument_list|(
name|major
argument_list|)
condition|)
block|{
name|student
operator|.
name|getMajors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|AcademicAreaCode
argument_list|(
name|aac
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|major
operator|.
name|getCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|majors
operator|.
name|add
argument_list|(
name|major
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- mj: "
operator|+
name|aac
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|":"
operator|+
name|major
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|j
init|=
name|aac
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getPosMinors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PosMinor
name|minor
init|=
operator|(
name|PosMinor
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|getPosMinors
argument_list|()
operator|.
name|contains
argument_list|(
name|minor
argument_list|)
condition|)
block|{
name|student
operator|.
name|getMinors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|AcademicAreaCode
argument_list|(
name|aac
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|minor
operator|.
name|getCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|minors
operator|.
name|add
argument_list|(
name|minor
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- mn: "
operator|+
name|aac
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|":"
operator|+
name|minor
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|s
operator|.
name|getPosMajors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PosMajor
name|major
init|=
operator|(
name|PosMajor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|majors
operator|.
name|contains
argument_list|(
name|major
argument_list|)
condition|)
block|{
name|student
operator|.
name|getMajors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|AcademicAreaCode
argument_list|(
literal|null
argument_list|,
name|major
operator|.
name|getCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- mj: "
operator|+
name|major
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|s
operator|.
name|getPosMinors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PosMinor
name|minor
init|=
operator|(
name|PosMinor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|minors
operator|.
name|contains
argument_list|(
name|minor
argument_list|)
condition|)
block|{
name|student
operator|.
name|getMajors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|AcademicAreaCode
argument_list|(
literal|null
argument_list|,
name|minor
operator|.
name|getCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- mj: "
operator|+
name|minor
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|load
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|new
name|SessionDAO
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
name|Hashtable
name|courseTable
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Hashtable
name|classTable
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|List
name|offerings
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct io from InstructionalOffering io "
operator|+
literal|"left join fetch io.courseOfferings as co "
operator|+
literal|"left join fetch io.instrOfferingConfigs as ioc "
operator|+
literal|"left join fetch ioc.schedulingSubparts as ss "
operator|+
literal|"left join fetch ss.classes as c "
operator|+
literal|"where "
operator|+
literal|"io.session.uniqueId=:sessionId and io.notOffered=false"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|offerings
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructionalOffering
name|io
init|=
operator|(
name|InstructionalOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Offering
name|offering
init|=
name|loadOffering
argument_list|(
name|io
argument_list|,
name|courseTable
argument_list|,
name|classTable
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|!=
literal|null
condition|)
name|getModel
argument_list|()
operator|.
name|addOffering
argument_list|(
name|offering
argument_list|)
expr_stmt|;
block|}
name|HashSet
name|loadedStudentIds
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|iIncludeCourseDemands
condition|)
block|{
name|List
name|students
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct s from Student s "
operator|+
literal|"left join fetch s.courseDemands as cd "
operator|+
literal|"left join fetch cd.courseRequests as cr "
operator|+
literal|"where s.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|students
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|getCourseDemands
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|Student
name|student
init|=
name|loadStudent
argument_list|(
name|s
argument_list|,
name|courseTable
argument_list|,
name|classTable
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|!=
literal|null
condition|)
name|getModel
argument_list|()
operator|.
name|addStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|loadedStudentIds
operator|.
name|add
argument_list|(
name|s
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iIncludeLastLikeStudents
condition|)
block|{
name|Hashtable
name|classAssignments
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iIncludeUseCommittedAssignments
condition|)
block|{
name|classAssignments
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct se.studentId, se.clazz.uniqueId from StudentEnrollment se where "
operator|+
literal|"se.solution.commited=true and se.solution.owner.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|classId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|HashSet
name|classIds
init|=
operator|(
name|HashSet
operator|)
name|classAssignments
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|classIds
operator|==
literal|null
condition|)
block|{
name|classIds
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|classAssignments
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|classIds
argument_list|)
expr_stmt|;
block|}
name|classIds
operator|.
name|add
argument_list|(
name|classId
argument_list|)
expr_stmt|;
block|}
block|}
name|Hashtable
name|lastLikeStudentTable
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select d, s, c from LastLikeCourseDemand d inner join d.student s, CourseOffering c left join c.demandOffering cx "
operator|+
literal|"where d.subjectArea.session.uniqueId=:sessionId and "
operator|+
literal|"((d.subjectArea=c.subjectArea and d.courseNbr=c.courseNbr ) or "
operator|+
literal|" (d.subjectArea=cx.subjectArea and d.courseNbr=cx.courseNbr)) "
operator|+
literal|"order by s.uniqueId, d.priority, d.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|LastLikeCourseDemand
name|d
init|=
operator|(
name|LastLikeCourseDemand
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|CourseOffering
name|co
init|=
operator|(
name|CourseOffering
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|loadedStudentIds
operator|.
name|contains
argument_list|(
name|s
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|loadLastLikeStudent
argument_list|(
name|hibSession
argument_list|,
name|d
argument_list|,
name|s
argument_list|,
name|co
argument_list|,
name|lastLikeStudentTable
argument_list|,
name|courseTable
argument_list|,
name|classTable
argument_list|,
name|classAssignments
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Enumeration
name|e
init|=
name|lastLikeStudentTable
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Student
name|student
init|=
operator|(
name|Student
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|getModel
argument_list|()
operator|.
name|addStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|classAssignments
operator|!=
literal|null
operator|&&
operator|!
name|classAssignments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Enumeration
name|e
init|=
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Request
name|request
init|=
operator|(
name|Request
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getInitialAssignment
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|Set
name|conflicts
init|=
name|getModel
argument_list|()
operator|.
name|conflictValues
argument_list|(
name|request
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|conflicts
operator|.
name|isEmpty
argument_list|()
condition|)
name|request
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|request
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|sLog
operator|.
name|debug
argument_list|(
literal|"Unable to assign "
operator|+
name|request
operator|.
name|getInitialAssignment
argument_list|()
operator|+
literal|", conflicts: "
operator|+
name|conflicts
argument_list|)
expr_stmt|;
block|}
block|}
name|fixWeights
argument_list|()
expr_stmt|;
block|}
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

