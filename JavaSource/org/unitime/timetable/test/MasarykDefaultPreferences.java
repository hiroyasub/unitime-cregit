begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2010 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PropertyConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|BuildingPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|NonUniversityLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroupPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePatternDays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePatternModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePatternTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|MasarykDefaultPreferences
block|{
specifier|protected
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|MasarykDefaultPreferences
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|ident
parameter_list|(
name|CourseOffering
name|co
parameter_list|,
name|Class_
name|c
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
if|if
condition|(
name|co
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|ext
init|=
name|co
operator|.
name|getExternalUniqueId
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getClassSuffix
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|c
operator|.
name|getClassSuffix
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|ext
operator|+=
literal|"/"
operator|+
name|c
operator|.
name|getClassSuffix
argument_list|()
expr_stmt|;
if|else if
condition|(
name|c
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|c
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|c
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|>=
literal|0
condition|)
name|ext
operator|+=
name|c
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|substring
argument_list|(
name|c
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ext
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
comment|// select count(p) from Preference p where p.owner not in (select g from PreferenceGroup g)
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.rootLogger"
argument_list|,
literal|"DEBUG, A1"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1"
argument_list|,
literal|"org.apache.log4j.ConsoleAppender"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1.layout"
argument_list|,
literal|"org.apache.log4j.PatternLayout"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1.layout.ConversionPattern"
argument_list|,
literal|"%-5p %c{2}: %m%n"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate.cfg"
argument_list|,
literal|"WARN"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate.cache.EhCacheProvider"
argument_list|,
literal|"ERROR"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.unitime.commons.hibernate"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.net"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|PropertyConfigurator
operator|.
name|configure
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|HibernateUtil
operator|.
name|configureHibernate
argument_list|(
name|ApplicationProperties
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"initiative"
argument_list|,
literal|"FF"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"year"
argument_list|,
literal|"2011"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"term"
argument_list|,
literal|"Jaro"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|incremental
init|=
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"incremental"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|addMeetWith
init|=
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"meetwith"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|useScheduleNote
init|=
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"note"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Academic session not found, use properties initiative, year, and term to set academic session."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Session: "
operator|+
name|session
argument_list|)
expr_stmt|;
block|}
name|Session
name|previous
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|session
operator|.
name|getAcademicYear
argument_list|()
argument_list|)
operator|-
literal|1
argument_list|)
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|oldRatios
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|previous
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SubjectArea
name|sa
range|:
name|previous
operator|.
name|getSubjectAreas
argument_list|()
control|)
block|{
for|for
control|(
name|CourseOffering
name|co
range|:
name|sa
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
for|for
control|(
name|InstrOfferingConfig
name|cfg
range|:
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
block|{
for|for
control|(
name|SchedulingSubpart
name|ss
range|:
name|cfg
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
block|{
for|for
control|(
name|Class_
name|c
range|:
name|ss
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getRoomRatio
argument_list|()
operator|==
literal|null
operator|||
name|c
operator|.
name|getRoomRatio
argument_list|()
operator|<=
literal|0f
operator|||
name|c
operator|.
name|getRoomRatio
argument_list|()
operator|>=
literal|1f
condition|)
continue|continue;
name|String
name|id
init|=
name|ident
argument_list|(
name|co
argument_list|,
name|c
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|Float
name|ratio
init|=
name|oldRatios
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|ratio
operator|==
literal|null
operator|||
name|ratio
operator|>
name|c
operator|.
name|getRoomRatio
argument_list|()
condition|)
block|{
name|oldRatios
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|c
operator|.
name|getRoomRatio
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
name|id
operator|+
literal|"<- "
operator|+
name|c
operator|.
name|getRoomRatio
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
name|MakeAssignmentsForClassEvents
name|makePattern
init|=
operator|new
name|MakeAssignmentsForClassEvents
argument_list|(
name|session
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
comment|/*             for (ExactTimeMins x: ExactTimeMinsDAO.getInstance().findAll(hibSession)) {             	x.setNrSlots(x.getMinsPerMtgMax() / 5);             	x.setBreakTime(5);             	hibSession.saveOrUpdate(x);             }             */
name|RoomGroup
name|poc
init|=
literal|null
decl_stmt|,
name|mult
init|=
literal|null
decl_stmt|,
name|bez
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RoomGroup
name|rg
range|:
name|RoomGroup
operator|.
name|getAllGlobalRoomGroups
argument_list|(
name|session
argument_list|)
control|)
block|{
if|if
condition|(
name|rg
operator|.
name|getAbbv
argument_list|()
operator|.
name|equals
argument_list|(
literal|"POÄ"
argument_list|)
condition|)
name|poc
operator|=
name|rg
expr_stmt|;
if|else if
condition|(
name|rg
operator|.
name|getAbbv
argument_list|()
operator|.
name|equals
argument_list|(
literal|"MULT"
argument_list|)
condition|)
name|mult
operator|=
name|rg
expr_stmt|;
if|else if
condition|(
name|rg
operator|.
name|getAbbv
argument_list|()
operator|.
name|equals
argument_list|(
literal|"BÄÅ½"
argument_list|)
condition|)
name|bez
operator|=
name|rg
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|incremental
condition|)
block|{
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"delete DistributionPref where owner in (from Department d where d.session.uniqueId = :sessionId)"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"delete DistributionPref where owner in (from Session s where s.uniqueId = :sessionId)"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Class_
argument_list|>
argument_list|>
name|meetWith
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Class_
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|DistributionType
name|sameDaysType
init|=
operator|(
name|DistributionType
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select d from DistributionType d where d.reference = :type"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"type"
argument_list|,
literal|"SAME_DAYS"
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
name|TimePattern
name|tp2h
init|=
operator|(
name|TimePattern
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select p from TimePattern as p where p.session.uniqueId=:sessionId and p.name=:name"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setText
argument_list|(
literal|"name"
argument_list|,
literal|"2h"
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
for|for
control|(
name|SchedulingSubpart
name|ss
range|:
operator|(
name|List
argument_list|<
name|SchedulingSubpart
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct s from SchedulingSubpart s inner join s.instrOfferingConfig.instructionalOffering.courseOfferings co where "
operator|+
literal|"co.subjectArea.department.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|boolean
name|hasPreferences
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|ss
operator|.
name|getPreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|hasPreferences
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Class_
name|c
range|:
name|ss
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|effectiveDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"import"
argument_list|)
operator|||
name|c
operator|.
name|getNbrRooms
argument_list|()
operator|==
literal|0
condition|)
block|{
name|hasPreferences
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|c
operator|.
name|getPreferences
argument_list|()
operator|.
name|size
argument_list|()
operator|>
name|c
operator|.
name|getPreferences
argument_list|(
name|TimePref
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
condition|)
name|hasPreferences
operator|=
literal|true
expr_stmt|;
else|else
for|for
control|(
name|Iterator
name|i
init|=
name|c
operator|.
name|getPreferences
argument_list|(
name|TimePref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
operator|!
name|hasPreferences
operator|&&
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|t
init|=
operator|(
name|TimePref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|TimePatternModel
name|m
init|=
name|t
operator|.
name|getTimePatternModel
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|isExactTime
argument_list|()
operator|&&
operator|!
name|m
operator|.
name|isDefault
argument_list|()
condition|)
block|{
name|hasPreferences
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|hasPreferences
operator|&&
name|incremental
condition|)
block|{
continue|continue;
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"Setting "
operator|+
name|ss
operator|.
name|getSchedulingSubpartLabel
argument_list|()
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
if|if
condition|(
name|ss
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|isUnlimitedEnrollment
argument_list|()
condition|)
block|{
name|ss
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|setUnlimitedEnrollment
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ss
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ss
operator|.
name|getChildSubparts
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|boolean
name|sameDay
init|=
literal|false
decl_stmt|;
name|boolean
name|hasConstraint
init|=
literal|false
decl_stmt|;
name|boolean
name|friday
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Class_
name|c
range|:
name|ss
operator|.
name|getClasses
argument_list|()
control|)
block|{
name|int
name|dayCode
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DistributionObject
name|d
range|:
name|c
operator|.
name|getDistributionObjects
argument_list|()
control|)
block|{
if|if
condition|(
name|d
operator|.
name|getDistributionPref
argument_list|()
operator|.
name|getDistributionType
argument_list|()
operator|.
name|equals
argument_list|(
name|sameDaysType
argument_list|)
condition|)
block|{
name|hasConstraint
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|Assignment
name|a
init|=
name|c
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|(
name|dayCode
operator|&
name|a
operator|.
name|getDays
argument_list|()
operator|)
operator|!=
literal|0
condition|)
block|{
name|sameDay
operator|=
literal|true
expr_stmt|;
block|}
name|dayCode
operator||=
name|a
operator|.
name|getDays
argument_list|()
expr_stmt|;
block|}
name|c
operator|=
name|c
operator|.
name|getParentClass
argument_list|()
expr_stmt|;
block|}
name|friday
operator|=
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_FRI
index|]
operator|)
operator|!=
literal|0
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasConstraint
operator|&&
operator|!
name|friday
operator|&&
operator|!
name|sameDay
condition|)
block|{
name|DistributionPref
name|dp
init|=
operator|new
name|DistributionPref
argument_list|()
decl_stmt|;
name|dp
operator|.
name|setDistributionType
argument_list|(
name|sameDaysType
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|sameDay
condition|?
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
else|:
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setDistributionObjects
argument_list|(
operator|new
name|HashSet
argument_list|<
name|DistributionObject
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setGrouping
argument_list|(
name|DistributionPref
operator|.
name|sGroupingProgressive
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setOwner
argument_list|(
name|ss
operator|.
name|getManagingDept
argument_list|()
argument_list|)
expr_stmt|;
name|SchedulingSubpart
name|x
init|=
name|ss
decl_stmt|;
name|int
name|index
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|x
operator|!=
literal|null
condition|)
block|{
name|DistributionObject
name|o
init|=
operator|new
name|DistributionObject
argument_list|()
decl_stmt|;
name|o
operator|.
name|setDistributionPref
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|o
operator|.
name|setPrefGroup
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|o
operator|.
name|setSequenceNumber
argument_list|(
name|index
operator|++
argument_list|)
expr_stmt|;
name|dp
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|x
operator|=
name|x
operator|.
name|getParentSubpart
argument_list|()
expr_stmt|;
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|dp
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Class_
name|c
range|:
name|ss
operator|.
name|getClasses
argument_list|()
control|)
block|{
name|Meeting
name|m
init|=
name|c
operator|.
name|getEvent
argument_list|()
operator|.
name|getMeetings
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|minPerMeeting
init|=
literal|5
operator|+
literal|5
operator|*
operator|(
name|m
operator|.
name|getStopPeriod
argument_list|()
operator|-
name|m
operator|.
name|getStartPeriod
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
operator|(
name|minPerMeeting
operator|+
literal|5
operator|)
operator|%
literal|50
operator|==
literal|0
condition|)
name|minPerMeeting
operator|+=
literal|5
expr_stmt|;
if|if
condition|(
operator|(
name|minPerMeeting
operator|-
literal|5
operator|)
operator|%
literal|50
operator|==
literal|0
condition|)
name|minPerMeeting
operator|-=
literal|5
expr_stmt|;
if|if
condition|(
name|ss
operator|.
name|getMinutesPerWk
argument_list|()
operator|!=
name|minPerMeeting
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|c
operator|.
name|getClassLabel
argument_list|(
name|hibSession
argument_list|)
operator|+
literal|" has "
operator|+
name|ss
operator|.
name|getMinutesPerWk
argument_list|()
operator|+
literal|" minutes per meeting (should have "
operator|+
name|minPerMeeting
operator|+
literal|")."
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getSectionNumber
argument_list|()
operator|==
literal|1
condition|)
block|{
name|ss
operator|.
name|setMinutesPerWk
argument_list|(
name|minPerMeeting
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Class_
name|c
range|:
name|ss
operator|.
name|getClasses
argument_list|()
control|)
block|{
name|Assignment
name|a
init|=
name|c
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|c
operator|.
name|effectiveDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"import"
argument_list|)
condition|)
block|{
name|c
operator|.
name|setDatePattern
argument_list|(
name|makePattern
operator|.
name|getDatePattern
argument_list|(
name|c
operator|.
name|getEvent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Location
name|location
range|:
name|a
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|location
operator|instanceof
name|Room
operator|)
condition|)
continue|continue;
name|String
name|code
init|=
name|location
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|":"
operator|+
name|a
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|":"
operator|+
name|a
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|":"
operator|+
name|a
operator|.
name|getDays
argument_list|()
operator|+
literal|":"
operator|+
name|a
operator|.
name|getStartSlot
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Class_
argument_list|>
name|classes
init|=
name|meetWith
operator|.
name|get
argument_list|(
name|code
argument_list|)
decl_stmt|;
if|if
condition|(
name|classes
operator|==
literal|null
condition|)
block|{
name|classes
operator|=
operator|new
name|HashSet
argument_list|<
name|Class_
argument_list|>
argument_list|()
expr_stmt|;
name|meetWith
operator|.
name|put
argument_list|(
name|code
argument_list|,
name|classes
argument_list|)
expr_stmt|;
block|}
name|classes
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
comment|// Reset room ratio
name|c
operator|.
name|setRoomRatio
argument_list|(
literal|1f
argument_list|)
expr_stmt|;
comment|// Reset preferences
name|c
operator|.
name|getPreferences
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Strongly preferred room
name|TimePattern
name|pattern
init|=
literal|null
decl_stmt|;
name|patterns
label|:
for|for
control|(
name|TimePattern
name|p
range|:
name|TimePattern
operator|.
name|findByMinPerWeek
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|,
literal|null
argument_list|)
control|)
block|{
for|for
control|(
name|TimePatternDays
name|d
range|:
name|p
operator|.
name|getDays
argument_list|()
control|)
if|if
condition|(
name|a
operator|.
name|getDays
argument_list|()
operator|.
name|equals
argument_list|(
name|d
operator|.
name|getDayCode
argument_list|()
argument_list|)
condition|)
for|for
control|(
name|TimePatternTime
name|t
range|:
name|p
operator|.
name|getTimes
argument_list|()
control|)
block|{
if|if
condition|(
name|t
operator|.
name|getStartSlot
argument_list|()
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getStartSlot
argument_list|()
argument_list|)
condition|)
block|{
name|pattern
operator|=
name|p
expr_stmt|;
break|break
name|patterns
break|;
block|}
block|}
block|}
name|boolean
name|extConv
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|pattern
operator|==
literal|null
condition|)
block|{
comment|// Exact time
name|pattern
operator|=
name|TimePattern
operator|.
name|findExactTime
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|TimePatternModel
name|m
init|=
name|pattern
operator|.
name|getTimePatternModel
argument_list|()
decl_stmt|;
name|m
operator|.
name|setExactDays
argument_list|(
name|a
operator|.
name|getDays
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setExactStartSlot
argument_list|(
name|a
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|TimePref
name|tp
init|=
operator|new
name|TimePref
argument_list|()
decl_stmt|;
name|tp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setTimePatternModel
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setOwner
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|tp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|pattern
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"2h ext"
argument_list|)
condition|)
block|{
name|pattern
operator|=
name|tp2h
expr_stmt|;
name|extConv
operator|=
literal|true
expr_stmt|;
block|}
name|TimePatternModel
name|m
init|=
name|pattern
operator|.
name|getTimePatternModel
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|m
operator|.
name|getNrDays
argument_list|()
condition|;
name|d
operator|++
control|)
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|m
operator|.
name|getNrTimes
argument_list|()
condition|;
name|t
operator|++
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getStartSlot
argument_list|()
operator|==
name|m
operator|.
name|getStartSlot
argument_list|(
name|t
argument_list|)
operator|&&
name|a
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDayCode
argument_list|()
operator|==
name|m
operator|.
name|getDayCode
argument_list|(
name|d
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|tt
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|t
operator|-
literal|1
argument_list|)
init|;
name|tt
operator|<
name|Math
operator|.
name|min
argument_list|(
name|m
operator|.
name|getNrTimes
argument_list|()
argument_list|,
name|t
operator|+
literal|2
argument_list|)
condition|;
name|tt
operator|++
control|)
for|for
control|(
name|int
name|dd
init|=
literal|0
init|;
name|dd
operator|<
name|m
operator|.
name|getNrDays
argument_list|()
condition|;
name|dd
operator|++
control|)
name|m
operator|.
name|setPreference
argument_list|(
name|dd
argument_list|,
name|tt
argument_list|,
name|PreferenceLevel
operator|.
name|sPreferred
argument_list|)
expr_stmt|;
name|m
operator|.
name|setPreference
argument_list|(
name|d
argument_list|,
name|t
argument_list|,
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|==
name|m
operator|.
name|getNrDays
argument_list|()
operator|-
literal|1
condition|)
block|{
for|for
control|(
name|int
name|dd
init|=
literal|0
init|;
name|dd
operator|<
name|m
operator|.
name|getNrDays
argument_list|()
operator|-
literal|1
condition|;
name|dd
operator|++
control|)
for|for
control|(
name|int
name|tt
init|=
literal|0
init|;
name|tt
operator|<
name|m
operator|.
name|getNrTimes
argument_list|()
condition|;
name|tt
operator|++
control|)
name|m
operator|.
name|setPreference
argument_list|(
name|dd
argument_list|,
name|tt
argument_list|,
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|tt
init|=
literal|0
init|;
name|tt
operator|<
name|m
operator|.
name|getNrTimes
argument_list|()
condition|;
name|tt
operator|++
control|)
name|m
operator|.
name|setPreference
argument_list|(
name|m
operator|.
name|getNrDays
argument_list|()
operator|-
literal|1
argument_list|,
name|tt
argument_list|,
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|extConv
operator|&&
name|t
operator|>
literal|0
operator|&&
name|a
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDayCode
argument_list|()
operator|==
name|m
operator|.
name|getDayCode
argument_list|(
name|d
argument_list|)
operator|&&
name|a
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getStartSlot
argument_list|()
operator|>
name|m
operator|.
name|getStartSlot
argument_list|(
name|t
operator|-
literal|1
argument_list|)
operator|&&
name|a
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getStartSlot
argument_list|()
operator|<
name|m
operator|.
name|getStartSlot
argument_list|(
name|t
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|dd
init|=
literal|0
init|;
name|dd
operator|<
name|m
operator|.
name|getNrDays
argument_list|()
condition|;
name|dd
operator|++
control|)
block|{
name|m
operator|.
name|setPreference
argument_list|(
name|dd
argument_list|,
name|t
operator|-
literal|1
argument_list|,
name|PreferenceLevel
operator|.
name|sPreferred
argument_list|)
expr_stmt|;
name|m
operator|.
name|setPreference
argument_list|(
name|dd
argument_list|,
name|t
argument_list|,
name|PreferenceLevel
operator|.
name|sPreferred
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|setPreference
argument_list|(
name|d
argument_list|,
name|t
operator|-
literal|1
argument_list|,
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
expr_stmt|;
name|m
operator|.
name|setPreference
argument_list|(
name|d
argument_list|,
name|t
argument_list|,
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
expr_stmt|;
block|}
block|}
name|TimePref
name|tp
init|=
operator|new
name|TimePref
argument_list|()
decl_stmt|;
name|tp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setTimePatternModel
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setOwner
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|tp
argument_list|)
expr_stmt|;
block|}
name|boolean
name|rgPref
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Location
name|l
range|:
name|a
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
name|l
operator|instanceof
name|NonUniversityLocation
condition|)
block|{
name|RoomPref
name|rp
init|=
operator|new
name|RoomPref
argument_list|()
decl_stmt|;
name|rp
operator|.
name|setOwner
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setRoom
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|c
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|rp
argument_list|)
expr_stmt|;
name|rgPref
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|RoomPref
name|rp
init|=
operator|new
name|RoomPref
argument_list|()
decl_stmt|;
name|rp
operator|.
name|setOwner
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|l
operator|.
name|getRoomGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
expr_stmt|;
name|rgPref
operator|=
literal|false
expr_stmt|;
block|}
if|else if
condition|(
name|l
operator|.
name|getCapacity
argument_list|()
operator|==
literal|0
condition|)
block|{
name|rp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sPreferred
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rp
operator|.
name|setRoom
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|c
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|rp
argument_list|)
expr_stmt|;
name|BuildingPref
name|bp
init|=
operator|new
name|BuildingPref
argument_list|()
decl_stmt|;
name|bp
operator|.
name|setOwner
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|bp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
argument_list|)
expr_stmt|;
name|bp
operator|.
name|setBuilding
argument_list|(
operator|(
operator|(
name|Room
operator|)
name|l
operator|)
operator|.
name|getBuilding
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|bp
argument_list|)
expr_stmt|;
name|Float
name|lastLikeRoomRatio
init|=
literal|null
decl_stmt|;
name|String
name|id
init|=
name|ident
argument_list|(
name|ss
operator|.
name|getControllingCourseOffering
argument_list|()
argument_list|,
name|c
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
name|lastLikeRoomRatio
operator|=
name|oldRatios
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastLikeRoomRatio
operator|!=
literal|null
condition|)
name|sLog
operator|.
name|info
argument_list|(
name|id
operator|+
literal|" had room ration "
operator|+
name|lastLikeRoomRatio
operator|+
literal|" last year."
argument_list|)
expr_stmt|;
if|if
condition|(
name|l
operator|.
name|getCapacity
argument_list|()
operator|>
literal|0
operator|&&
name|l
operator|.
name|getCapacity
argument_list|()
operator|<
name|c
operator|.
name|getClassLimit
argument_list|()
condition|)
block|{
name|c
operator|.
name|setRoomRatio
argument_list|(
operator|(
name|float
operator|)
name|Math
operator|.
name|floor
argument_list|(
literal|100
operator|*
name|l
operator|.
name|getCapacity
argument_list|()
operator|/
name|c
operator|.
name|getClassLimit
argument_list|()
argument_list|)
operator|/
literal|100f
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastLikeRoomRatio
operator|!=
literal|null
operator|&&
name|lastLikeRoomRatio
operator|<
name|c
operator|.
name|getRoomRatio
argument_list|()
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Setting room ratio for "
operator|+
name|c
operator|.
name|getClassLabel
argument_list|(
name|hibSession
argument_list|)
operator|+
literal|"<- "
operator|+
name|lastLikeRoomRatio
operator|+
literal|" (was "
operator|+
name|c
operator|.
name|getRoomRatio
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|c
operator|.
name|setRoomRatio
argument_list|(
name|lastLikeRoomRatio
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|l
operator|.
name|getCapacity
argument_list|()
operator|==
literal|0
condition|)
block|{
name|c
operator|.
name|setRoomRatio
argument_list|(
literal|0f
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|lastLikeRoomRatio
operator|!=
literal|null
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Setting room ratio for "
operator|+
name|c
operator|.
name|getClassLabel
argument_list|(
name|hibSession
argument_list|)
operator|+
literal|"<- "
operator|+
name|lastLikeRoomRatio
argument_list|)
expr_stmt|;
name|c
operator|.
name|setRoomRatio
argument_list|(
name|lastLikeRoomRatio
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|useScheduleNote
operator|&&
name|rgPref
condition|)
block|{
for|for
control|(
name|RoomGroup
name|rg
range|:
name|l
operator|.
name|getRoomGroups
argument_list|()
control|)
block|{
if|if
condition|(
name|rg
operator|.
name|isGlobal
argument_list|()
operator|&&
name|rg
operator|.
name|getAbbv
argument_list|()
operator|.
name|equals
argument_list|(
literal|"MULT"
argument_list|)
condition|)
block|{
name|RoomGroupPref
name|gp
init|=
operator|new
name|RoomGroupPref
argument_list|()
decl_stmt|;
name|gp
operator|.
name|setOwner
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|gp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
argument_list|)
expr_stmt|;
name|gp
operator|.
name|setRoomGroup
argument_list|(
name|rg
argument_list|)
expr_stmt|;
name|c
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|gp
argument_list|)
expr_stmt|;
name|RoomGroupPref
name|gp2
init|=
operator|new
name|RoomGroupPref
argument_list|()
decl_stmt|;
name|gp2
operator|.
name|setOwner
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|gp2
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sPreferred
argument_list|)
argument_list|)
expr_stmt|;
name|gp2
operator|.
name|setRoomGroup
argument_list|(
name|poc
argument_list|)
expr_stmt|;
name|c
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|gp2
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|rg
operator|.
name|isGlobal
argument_list|()
operator|&&
name|rg
operator|.
name|getAbbv
argument_list|()
operator|.
name|equals
argument_list|(
literal|"POÄ"
argument_list|)
condition|)
block|{
name|RoomGroupPref
name|gp
init|=
operator|new
name|RoomGroupPref
argument_list|()
decl_stmt|;
name|gp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
expr_stmt|;
name|gp
operator|.
name|setOwner
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|gp
operator|.
name|setRoomGroup
argument_list|(
name|rg
argument_list|)
expr_stmt|;
name|c
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|gp
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|rg
operator|.
name|isGlobal
argument_list|()
operator|&&
name|rg
operator|.
name|getAbbv
argument_list|()
operator|.
name|equals
argument_list|(
literal|"BÄÅ½"
argument_list|)
condition|)
block|{
name|RoomGroupPref
name|gp
init|=
operator|new
name|RoomGroupPref
argument_list|()
decl_stmt|;
name|gp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
argument_list|)
expr_stmt|;
name|gp
operator|.
name|setOwner
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|gp
operator|.
name|setRoomGroup
argument_list|(
name|rg
argument_list|)
expr_stmt|;
name|c
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|gp
argument_list|)
expr_stmt|;
name|RoomGroupPref
name|gp2
init|=
operator|new
name|RoomGroupPref
argument_list|()
decl_stmt|;
name|gp2
operator|.
name|setOwner
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|gp2
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|)
expr_stmt|;
name|gp2
operator|.
name|setRoomGroup
argument_list|(
name|poc
argument_list|)
expr_stmt|;
name|c
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|gp2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Room preferences
if|if
condition|(
name|useScheduleNote
operator|&&
name|rgPref
condition|)
block|{
if|if
condition|(
literal|"MM"
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getSchedulePrintNote
argument_list|()
argument_list|)
condition|)
block|{
name|RoomGroupPref
name|gp
init|=
operator|new
name|RoomGroupPref
argument_list|()
decl_stmt|;
name|gp
operator|.
name|setOwner
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|gp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
argument_list|)
expr_stmt|;
name|gp
operator|.
name|setRoomGroup
argument_list|(
name|mult
argument_list|)
expr_stmt|;
name|c
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|gp
argument_list|)
expr_stmt|;
name|RoomGroupPref
name|gp2
init|=
operator|new
name|RoomGroupPref
argument_list|()
decl_stmt|;
name|gp2
operator|.
name|setOwner
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|gp2
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sPreferred
argument_list|)
argument_list|)
expr_stmt|;
name|gp2
operator|.
name|setRoomGroup
argument_list|(
name|poc
argument_list|)
expr_stmt|;
name|c
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|gp2
argument_list|)
expr_stmt|;
name|RoomGroupPref
name|gp3
init|=
operator|new
name|RoomGroupPref
argument_list|()
decl_stmt|;
name|gp3
operator|.
name|setOwner
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|gp3
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
argument_list|)
expr_stmt|;
name|gp3
operator|.
name|setRoomGroup
argument_list|(
name|bez
argument_list|)
expr_stmt|;
name|c
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|gp3
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"PC"
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getSchedulePrintNote
argument_list|()
argument_list|)
condition|)
block|{
name|RoomGroupPref
name|gp
init|=
operator|new
name|RoomGroupPref
argument_list|()
decl_stmt|;
name|gp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
expr_stmt|;
name|gp
operator|.
name|setOwner
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|gp
operator|.
name|setRoomGroup
argument_list|(
name|poc
argument_list|)
expr_stmt|;
name|c
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|gp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|RoomGroupPref
name|gp
init|=
operator|new
name|RoomGroupPref
argument_list|()
decl_stmt|;
name|gp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
argument_list|)
expr_stmt|;
name|gp
operator|.
name|setOwner
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|gp
operator|.
name|setRoomGroup
argument_list|(
name|bez
argument_list|)
expr_stmt|;
name|c
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|gp
argument_list|)
expr_stmt|;
name|RoomGroupPref
name|gp2
init|=
operator|new
name|RoomGroupPref
argument_list|()
decl_stmt|;
name|gp2
operator|.
name|setOwner
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|gp2
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|)
expr_stmt|;
name|gp2
operator|.
name|setRoomGroup
argument_list|(
name|poc
argument_list|)
expr_stmt|;
name|c
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|gp2
argument_list|)
expr_stmt|;
block|}
block|}
name|c
operator|.
name|setNbrRooms
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|a
operator|.
name|getRooms
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|addMeetWith
condition|)
block|{
name|DistributionType
name|meetWithType
init|=
operator|(
name|DistributionType
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select d from DistributionType d where d.reference = :type"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"type"
argument_list|,
literal|"MEET_WITH"
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
for|for
control|(
name|Set
argument_list|<
name|Class_
argument_list|>
name|classes
range|:
name|meetWith
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|classes
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
continue|continue;
name|sLog
operator|.
name|info
argument_list|(
literal|"Adding meet with between: "
operator|+
name|classes
argument_list|)
expr_stmt|;
name|DistributionPref
name|dp
init|=
operator|new
name|DistributionPref
argument_list|()
decl_stmt|;
name|dp
operator|.
name|setDistributionType
argument_list|(
name|meetWithType
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setDistributionObjects
argument_list|(
operator|new
name|HashSet
argument_list|<
name|DistributionObject
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setGrouping
argument_list|(
name|DistributionPref
operator|.
name|sGroupingNone
argument_list|)
expr_stmt|;
name|int
name|index
init|=
literal|1
decl_stmt|;
name|int
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Class_
name|c
range|:
name|classes
control|)
block|{
if|if
condition|(
name|index
operator|==
literal|1
condition|)
name|dp
operator|.
name|setOwner
argument_list|(
name|c
operator|.
name|getManagingDept
argument_list|()
argument_list|)
expr_stmt|;
name|DistributionObject
name|o
init|=
operator|new
name|DistributionObject
argument_list|()
decl_stmt|;
name|o
operator|.
name|setDistributionPref
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|o
operator|.
name|setPrefGroup
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|o
operator|.
name|setSequenceNumber
argument_list|(
name|index
operator|++
argument_list|)
expr_stmt|;
name|dp
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|total
operator|+=
name|c
operator|.
name|getClassLimit
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Location
name|l
range|:
name|classes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getCommittedAssignment
argument_list|()
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
name|l
operator|instanceof
name|NonUniversityLocation
condition|)
continue|continue;
if|if
condition|(
name|l
operator|.
name|getCapacity
argument_list|()
operator|>
literal|0
operator|&&
name|l
operator|.
name|getCapacity
argument_list|()
operator|<
name|total
condition|)
block|{
name|double
name|roomRatio
init|=
name|Math
operator|.
name|floor
argument_list|(
literal|100.0
operator|*
name|l
operator|.
name|getCapacity
argument_list|()
operator|/
name|total
argument_list|)
operator|/
literal|100.0
decl_stmt|;
for|for
control|(
name|Class_
name|c
range|:
name|classes
control|)
block|{
name|double
name|roomLimit
init|=
name|Math
operator|.
name|floor
argument_list|(
name|roomRatio
operator|*
name|c
operator|.
name|getClassLimit
argument_list|()
argument_list|)
decl_stmt|;
name|c
operator|.
name|setRoomRatio
argument_list|(
operator|(
name|float
operator|)
name|Math
operator|.
name|floor
argument_list|(
literal|100f
operator|*
name|roomLimit
operator|/
name|c
operator|.
name|getClassLimit
argument_list|()
argument_list|)
operator|/
literal|100f
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|dp
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"All done."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

