begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Email
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|MockupEmail
extends|extends
name|Email
block|{
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MockupEmail
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|iSubject
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iFrom
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|iReplyTo
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|iRecipient
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|iRecipientCC
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|iRecipientBCC
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|iBody
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|iAttachments
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setSubject
parameter_list|(
name|String
name|subject
parameter_list|)
throws|throws
name|Exception
block|{
name|iSubject
operator|=
name|subject
expr_stmt|;
block|}
specifier|protected
name|String
name|format
parameter_list|(
name|String
name|email
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|email
return|;
return|return
name|name
operator|+
literal|"<"
operator|+
name|email
operator|+
literal|">"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setFrom
parameter_list|(
name|String
name|email
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|iFrom
operator|=
name|format
argument_list|(
name|email
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setReplyTo
parameter_list|(
name|String
name|email
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|iReplyTo
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iReplyTo
operator|.
name|add
argument_list|(
name|format
argument_list|(
name|email
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addReplyTo
parameter_list|(
name|String
name|email
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|iReplyTo
operator|.
name|add
argument_list|(
name|format
argument_list|(
name|email
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addRecipient
parameter_list|(
name|String
name|email
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|iRecipient
operator|.
name|add
argument_list|(
name|format
argument_list|(
name|email
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addRecipientCC
parameter_list|(
name|String
name|email
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|iRecipientCC
operator|.
name|add
argument_list|(
name|format
argument_list|(
name|email
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addRecipientBCC
parameter_list|(
name|String
name|email
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|iRecipientBCC
operator|.
name|add
argument_list|(
name|format
argument_list|(
name|email
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setBody
parameter_list|(
name|String
name|message
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|iBody
operator|=
name|message
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addAttachment
parameter_list|(
name|String
name|name
parameter_list|,
name|DataHandler
name|data
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|size
init|=
literal|0
decl_stmt|,
name|read
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|InputStream
name|in
init|=
name|data
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|read
operator|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>
literal|0
condition|)
name|size
operator|+=
name|read
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|iAttachments
operator|.
name|add
argument_list|(
name|name
operator|+
literal|" ("
operator|+
name|data
operator|.
name|getContentType
argument_list|()
operator|+
literal|", "
operator|+
name|size
operator|+
literal|" bytes)"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|space
parameter_list|(
name|StringBuffer
name|s
parameter_list|,
name|int
name|len
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
name|s
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|format
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|)
block|{
if|if
condition|(
name|list
operator|==
literal|null
operator|||
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|""
return|;
name|StringBuffer
name|ret
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
name|ret
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
else|else
name|space
argument_list|(
name|ret
argument_list|,
name|name
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|send
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuffer
name|message
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
if|if
condition|(
name|iSubject
operator|!=
literal|null
condition|)
name|message
operator|.
name|append
argument_list|(
literal|"Subject:  "
operator|+
name|iSubject
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iFrom
operator|!=
literal|null
condition|)
name|message
operator|.
name|append
argument_list|(
literal|"From:     "
operator|+
name|iFrom
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
name|format
argument_list|(
literal|"Reply-To: "
argument_list|,
name|iReplyTo
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
name|format
argument_list|(
literal|"To:       "
argument_list|,
name|iRecipient
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
name|format
argument_list|(
literal|"CC:       "
argument_list|,
name|iRecipientCC
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
name|format
argument_list|(
literal|"BCC:      "
argument_list|,
name|iRecipientBCC
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
name|format
argument_list|(
literal|"Attached: "
argument_list|,
name|iAttachments
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iBody
operator|!=
literal|null
condition|)
name|message
operator|.
name|append
argument_list|(
name|iBody
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"\n----- END OF EMAIL MESSAGE -----------------------------"
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
name|message
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setInReplyTo
parameter_list|(
name|String
name|messageId
parameter_list|)
throws|throws
name|Exception
block|{
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMessageId
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|"MESSAGE-ID"
return|;
block|}
block|}
end_class

end_unit

