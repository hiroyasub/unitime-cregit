begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SubjectAreaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_class
specifier|public
class|class
name|MakeAssignmentsForClassEvents
block|{
specifier|private
name|Session
name|iSession
init|=
literal|null
decl_stmt|;
specifier|private
name|Vector
argument_list|<
name|Date
argument_list|>
name|iWeekDate
init|=
literal|null
decl_stmt|;
specifier|private
name|org
operator|.
name|hibernate
operator|.
name|Session
name|iHibSession
init|=
literal|null
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|DatePattern
argument_list|>
name|iDatePatterns
init|=
literal|null
decl_stmt|;
specifier|private
name|TimePattern
name|iExactTimePattern
init|=
literal|null
decl_stmt|;
specifier|public
name|MakeAssignmentsForClassEvents
parameter_list|(
name|Session
name|session
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|iHibSession
operator|=
name|hibSession
expr_stmt|;
name|iSession
operator|=
name|session
expr_stmt|;
name|Calendar
name|date
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|date
operator|.
name|setLenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|date
operator|.
name|setTime
argument_list|(
name|iSession
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|iWeekDate
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
while|while
condition|(
name|date
operator|.
name|getTime
argument_list|()
operator|.
name|compareTo
argument_list|(
name|iSession
operator|.
name|getSessionEndDateTime
argument_list|()
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|iWeekDate
operator|.
name|add
argument_list|(
name|date
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|idx
operator|<
literal|7
condition|)
block|{
name|date
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSession
operator|.
name|getHoliday
argument_list|(
name|date
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
argument_list|,
name|date
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
argument_list|)
operator|!=
name|Session
operator|.
name|sHolidayTypeBreak
condition|)
name|idx
operator|++
expr_stmt|;
block|}
block|}
name|iWeekDate
operator|.
name|add
argument_list|(
name|date
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|iDatePatterns
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|DatePattern
operator|.
name|findAll
argument_list|(
name|iSession
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DatePattern
name|dp
init|=
operator|(
name|DatePattern
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|iDatePatterns
operator|.
name|put
argument_list|(
name|dp
operator|.
name|getName
argument_list|()
argument_list|,
name|dp
argument_list|)
expr_stmt|;
block|}
name|iExactTimePattern
operator|=
name|TimePattern
operator|.
name|findExactTime
argument_list|(
name|iSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|int
name|getWeek
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|+
literal|1
operator|<
name|iWeekDate
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
if|if
condition|(
name|date
operator|.
name|compareTo
argument_list|(
name|iWeekDate
operator|.
name|elementAt
argument_list|(
name|idx
argument_list|)
argument_list|)
operator|<
literal|0
condition|)
return|return
name|idx
return|;
return|return
name|iWeekDate
operator|.
name|size
argument_list|()
operator|-
literal|1
return|;
block|}
specifier|protected
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|getWeeks
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|weeks
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|weeks
operator|.
name|add
argument_list|(
name|getWeek
argument_list|(
name|meeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|weeks
return|;
block|}
specifier|protected
name|DatePattern
name|getDefaultDatePattern
parameter_list|()
block|{
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|weeks
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|+
literal|2
operator|<
name|iWeekDate
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|weeks
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
name|getDatePattern
argument_list|(
name|weeks
argument_list|)
return|;
block|}
specifier|protected
name|DatePattern
name|getDatePattern
parameter_list|(
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|weeks
parameter_list|)
block|{
if|if
condition|(
name|weeks
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|getDefaultDatePattern
argument_list|()
return|;
name|String
name|patternName
init|=
literal|null
decl_stmt|;
name|int
name|firstWeek
init|=
operator|-
literal|1
decl_stmt|,
name|lastWeek
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|Integer
name|week
range|:
name|weeks
control|)
block|{
if|if
condition|(
name|lastWeek
operator|<
literal|0
condition|)
block|{
name|firstWeek
operator|=
name|week
expr_stmt|;
block|}
if|else if
condition|(
name|lastWeek
operator|+
literal|1
operator|!=
name|week
condition|)
block|{
name|patternName
operator|=
operator|(
name|patternName
operator|==
literal|null
condition|?
literal|""
else|:
name|patternName
operator|+
literal|","
operator|)
operator|+
operator|(
name|lastWeek
operator|==
name|firstWeek
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|lastWeek
argument_list|)
else|:
name|firstWeek
operator|+
literal|"-"
operator|+
name|lastWeek
operator|)
expr_stmt|;
name|firstWeek
operator|=
name|week
expr_stmt|;
block|}
name|lastWeek
operator|=
name|week
expr_stmt|;
block|}
name|patternName
operator|=
literal|"Week "
operator|+
operator|(
name|patternName
operator|==
literal|null
condition|?
literal|""
else|:
name|patternName
operator|+
literal|","
operator|)
operator|+
operator|(
name|lastWeek
operator|==
name|firstWeek
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|lastWeek
argument_list|)
else|:
name|firstWeek
operator|+
literal|"-"
operator|+
name|lastWeek
operator|)
expr_stmt|;
name|DatePattern
name|dp
init|=
name|iDatePatterns
operator|.
name|get
argument_list|(
name|patternName
argument_list|)
decl_stmt|;
if|if
condition|(
name|dp
operator|!=
literal|null
condition|)
return|return
name|dp
return|;
name|dp
operator|=
operator|new
name|DatePattern
argument_list|()
expr_stmt|;
name|dp
operator|.
name|setName
argument_list|(
name|patternName
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setSession
argument_list|(
name|iSession
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setType
argument_list|(
name|DatePattern
operator|.
name|sTypeStandard
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Calendar
name|date
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|int
name|week
init|=
name|weeks
operator|.
name|first
argument_list|()
decl_stmt|;
name|date
operator|.
name|setTime
argument_list|(
name|iWeekDate
operator|.
name|get
argument_list|(
name|week
operator|==
literal|0
condition|?
literal|0
else|:
name|week
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|week
operator|==
literal|0
condition|)
name|date
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
operator|-
literal|7
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setPatternOffset
argument_list|(
name|date
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|pattern
init|=
literal|""
decl_stmt|;
while|while
condition|(
name|week
operator|<=
name|weeks
operator|.
name|last
argument_list|()
condition|)
block|{
while|while
condition|(
name|date
operator|.
name|getTime
argument_list|()
operator|.
name|compareTo
argument_list|(
name|iWeekDate
operator|.
name|elementAt
argument_list|(
name|week
argument_list|)
argument_list|)
operator|<
literal|0
condition|)
block|{
name|pattern
operator|+=
operator|(
operator|!
name|weeks
operator|.
name|contains
argument_list|(
name|week
argument_list|)
condition|?
literal|"0"
else|:
operator|(
name|iSession
operator|.
name|getHoliday
argument_list|(
name|date
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
argument_list|,
name|date
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
argument_list|)
operator|==
name|Session
operator|.
name|sHolidayTypeNone
condition|?
literal|"1"
else|:
literal|"0"
operator|)
operator|)
expr_stmt|;
name|date
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|week
operator|++
expr_stmt|;
block|}
name|dp
operator|.
name|setPattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|save
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|iDatePatterns
operator|.
name|put
argument_list|(
name|patternName
argument_list|,
name|dp
argument_list|)
expr_stmt|;
return|return
name|dp
return|;
block|}
specifier|public
name|int
name|getStartSlot
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
name|meeting
operator|.
name|getStartPeriod
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getDaysCode
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
name|int
name|daysCode
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Calendar
name|date
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|date
operator|.
name|setTime
argument_list|(
name|meeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|date
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_MON
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_TUE
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_WED
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_THU
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_FRI
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SAT
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SUN
index|]
expr_stmt|;
break|break;
block|}
block|}
return|return
name|daysCode
return|;
block|}
specifier|protected
name|SolverGroup
name|getSolverGroup
parameter_list|(
name|Department
name|department
parameter_list|)
block|{
if|if
condition|(
name|department
operator|.
name|getSolverGroup
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|department
operator|.
name|getSolverGroup
argument_list|()
return|;
name|SolverGroup
name|sg
init|=
operator|new
name|SolverGroup
argument_list|()
decl_stmt|;
name|sg
operator|.
name|setDepartments
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|sg
operator|.
name|getDepartments
argument_list|()
operator|.
name|add
argument_list|(
name|department
argument_list|)
expr_stmt|;
name|department
operator|.
name|setSolverGroup
argument_list|(
name|sg
argument_list|)
expr_stmt|;
name|sg
operator|.
name|setAbbv
argument_list|(
name|department
operator|.
name|getAbbreviation
argument_list|()
operator|==
literal|null
condition|?
name|department
operator|.
name|getDeptCode
argument_list|()
else|:
name|department
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|sg
operator|.
name|setName
argument_list|(
name|department
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sg
operator|.
name|setSession
argument_list|(
name|iSession
argument_list|)
expr_stmt|;
name|sg
operator|.
name|setTimetableManagers
argument_list|(
operator|new
name|HashSet
argument_list|(
name|department
operator|.
name|getTimetableManagers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sg
operator|.
name|setSolutions
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|save
argument_list|(
name|sg
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|update
argument_list|(
name|department
argument_list|)
expr_stmt|;
return|return
name|sg
return|;
block|}
specifier|protected
name|Solution
name|getSolution
parameter_list|(
name|SolverGroup
name|sg
parameter_list|)
block|{
if|if
condition|(
name|sg
operator|.
name|getCommittedSolution
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|sg
operator|.
name|getCommittedSolution
argument_list|()
return|;
name|Solution
name|solution
init|=
operator|new
name|Solution
argument_list|()
decl_stmt|;
name|solution
operator|.
name|setCommitDate
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|solution
operator|.
name|setCommited
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|solution
operator|.
name|setCreated
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|solution
operator|.
name|setCreator
argument_list|(
literal|"MakeAssignmentsForClassEvents"
argument_list|)
expr_stmt|;
name|solution
operator|.
name|setOwner
argument_list|(
name|sg
argument_list|)
expr_stmt|;
name|sg
operator|.
name|getSolutions
argument_list|()
operator|.
name|add
argument_list|(
name|solution
argument_list|)
expr_stmt|;
name|solution
operator|.
name|setValid
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|solution
operator|.
name|setAssignments
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|save
argument_list|(
name|solution
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|update
argument_list|(
name|sg
argument_list|)
expr_stmt|;
return|return
name|solution
return|;
block|}
specifier|public
name|Solution
name|getSolution
parameter_list|(
name|Department
name|dept
parameter_list|)
block|{
return|return
name|getSolution
argument_list|(
name|getSolverGroup
argument_list|(
name|dept
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Set
argument_list|<
name|Location
argument_list|>
name|getRooms
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
name|Set
argument_list|<
name|Location
argument_list|>
name|rooms
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|meeting
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
name|rooms
operator|.
name|add
argument_list|(
name|meeting
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|rooms
return|;
block|}
specifier|public
name|TimePattern
name|getTimePattern
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
if|if
condition|(
name|iExactTimePattern
operator|!=
literal|null
condition|)
return|return
name|iExactTimePattern
return|;
name|iExactTimePattern
operator|=
operator|new
name|TimePattern
argument_list|()
expr_stmt|;
name|iExactTimePattern
operator|.
name|setName
argument_list|(
literal|"Exact Time"
argument_list|)
expr_stmt|;
name|iExactTimePattern
operator|.
name|setBreakTime
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|iExactTimePattern
operator|.
name|setMinPerMtg
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|iExactTimePattern
operator|.
name|setNrMeetings
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|iExactTimePattern
operator|.
name|setSession
argument_list|(
name|iSession
argument_list|)
expr_stmt|;
name|iExactTimePattern
operator|.
name|setSlotsPerMtg
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|iExactTimePattern
operator|.
name|setType
argument_list|(
name|TimePattern
operator|.
name|sTypeExactTime
argument_list|)
expr_stmt|;
name|iExactTimePattern
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|save
argument_list|(
name|iExactTimePattern
argument_list|)
expr_stmt|;
return|return
name|iExactTimePattern
return|;
block|}
specifier|public
name|Assignment
name|createAssignment
parameter_list|(
name|Class_
name|clazz
parameter_list|,
name|Event
name|event
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|==
literal|null
operator|||
name|event
operator|==
literal|null
operator|||
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|clazz
operator|.
name|setDatePattern
argument_list|(
name|getDatePattern
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|Assignment
name|assignment
init|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|==
literal|null
condition|)
block|{
name|assignment
operator|=
operator|new
name|Assignment
argument_list|()
expr_stmt|;
name|assignment
operator|.
name|setClazz
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setSolution
argument_list|(
name|getSolution
argument_list|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setClassName
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setClassId
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setCommittedAssignment
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
block|}
name|assignment
operator|.
name|setDays
argument_list|(
name|getDaysCode
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setStartSlot
argument_list|(
name|getStartSlot
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setRooms
argument_list|(
name|getRooms
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setTimePattern
argument_list|(
name|getTimePattern
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|saveOrUpdate
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|saveOrUpdate
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
return|return
name|assignment
return|;
block|}
specifier|public
name|DatePattern
name|getDatePattern
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
return|return
name|getDatePattern
argument_list|(
name|getWeeks
argument_list|(
name|event
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
try|try
block|{
name|ToolBox
operator|.
name|configureLogging
argument_list|()
expr_stmt|;
name|HibernateUtil
operator|.
name|configureHibernate
argument_list|(
operator|new
name|Properties
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|List
name|subjects
init|=
operator|new
name|SubjectAreaDAO
argument_list|()
operator|.
name|findAll
argument_list|()
decl_stmt|;
name|boolean
name|excludeCommittedAssignments
init|=
operator|!
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"redo"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|subjects
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SubjectArea
name|sa
init|=
operator|(
name|SubjectArea
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Procession subject area "
operator|+
name|sa
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|" for "
operator|+
name|sa
operator|.
name|getSession
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|MakeAssignmentsForClassEvents
name|m
init|=
operator|new
name|MakeAssignmentsForClassEvents
argument_list|(
operator|new
name|SessionDAO
argument_list|()
operator|.
name|get
argument_list|(
name|sa
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c, e from "
operator|+
literal|"Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co, "
operator|+
literal|"Event e inner join e.relatedCourses r "
operator|+
literal|"where co.isControl=true and co.subjectArea.uniqueId=:subjectId and e.eventType.reference=:classType and "
operator|+
literal|"r.ownerType=:classOwner and r.ownerId=c.uniqueId"
operator|+
operator|(
name|excludeCommittedAssignments
condition|?
literal|" and c.committedAssignment is null"
else|:
literal|""
operator|)
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"subjectId"
argument_list|,
name|sa
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"classType"
argument_list|,
name|EventType
operator|.
name|sEventTypeClass
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"classOwner"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assignment
name|a
init|=
name|m
operator|.
name|createAssignment
argument_list|(
operator|(
name|Class_
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
name|Event
operator|)
name|o
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
operator|(
operator|(
name|Event
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|getEventName
argument_list|()
operator|+
literal|" -- "
operator|+
operator|(
name|a
operator|==
literal|null
condition|?
literal|"Not Assigned"
else|:
name|a
operator|.
name|getPlacement
argument_list|()
operator|.
name|getLongName
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

