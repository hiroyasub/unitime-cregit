begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|SAXReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|NonUniqueResultException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|criterion
operator|.
name|Restrictions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Building
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|BuildingPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ItypeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeaturePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroupPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Staff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePatternDays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePatternTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ImportPreferences
block|{
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ImportPreferences
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Hashtable
name|iAllClasses
init|=
literal|null
decl_stmt|;
specifier|private
name|Hashtable
name|iAllSubparts
init|=
literal|null
decl_stmt|;
specifier|private
name|Hashtable
name|iAllInstructionalOfferings
init|=
literal|null
decl_stmt|;
specifier|private
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
literal|null
decl_stmt|;
specifier|private
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
specifier|private
name|Session
name|iSession
init|=
literal|null
decl_stmt|;
specifier|private
name|SolverGroup
name|iManager
init|=
literal|null
decl_stmt|;
specifier|private
name|Solution
name|iSolution
init|=
literal|null
decl_stmt|;
specifier|public
name|TimePattern
name|importTimePattern
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|String
name|name
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|TimePattern
name|timePattern
init|=
name|TimePattern
operator|.
name|findByName
argument_list|(
name|iSession
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|timePattern
operator|!=
literal|null
condition|)
return|return
name|timePattern
return|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Creating time pattern "
operator|+
name|name
argument_list|)
expr_stmt|;
name|timePattern
operator|=
operator|new
name|TimePattern
argument_list|()
expr_stmt|;
name|timePattern
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|timePattern
operator|.
name|setSession
argument_list|(
name|iSession
argument_list|)
expr_stmt|;
name|timePattern
operator|.
name|setMinPerMtg
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"minPerMtg"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|timePattern
operator|.
name|setSlotsPerMtg
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"slotsPerMtg"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|timePattern
operator|.
name|setNrMeetings
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"nrMeetings"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|timePattern
operator|.
name|setVisible
argument_list|(
operator|new
name|Boolean
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"visible"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|timePattern
operator|.
name|setType
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|HashSet
name|days
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"dayCode"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePatternDays
name|d
init|=
operator|new
name|TimePatternDays
argument_list|()
decl_stmt|;
name|d
operator|.
name|setDayCode
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|days
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|HashSet
name|times
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"startSlot"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePatternTime
name|t
init|=
operator|new
name|TimePatternTime
argument_list|()
decl_stmt|;
name|t
operator|.
name|setStartSlot
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|times
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|timePattern
operator|.
name|setDays
argument_list|(
name|days
argument_list|)
expr_stmt|;
name|timePattern
operator|.
name|setTimes
argument_list|(
name|times
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|timePattern
argument_list|)
expr_stmt|;
return|return
name|timePattern
return|;
block|}
specifier|public
name|DatePattern
name|importDatePattern
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|String
name|name
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|DatePattern
name|datePattern
init|=
name|DatePattern
operator|.
name|findByName
argument_list|(
name|iSession
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|datePattern
operator|!=
literal|null
condition|)
return|return
name|datePattern
return|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Creating date pattern "
operator|+
name|name
argument_list|)
expr_stmt|;
name|datePattern
operator|=
operator|new
name|DatePattern
argument_list|()
expr_stmt|;
name|datePattern
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|datePattern
operator|.
name|setVisible
argument_list|(
operator|new
name|Boolean
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"visible"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|datePattern
operator|.
name|setType
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|datePattern
operator|.
name|setSession
argument_list|(
name|iSession
argument_list|)
expr_stmt|;
name|datePattern
operator|.
name|setOffset
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"offset"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|datePattern
operator|.
name|setPattern
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"pattern"
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|datePattern
argument_list|)
expr_stmt|;
return|return
name|datePattern
return|;
block|}
specifier|public
name|void
name|importPreferences
parameter_list|(
name|PreferenceGroup
name|owner
parameter_list|,
name|Element
name|element
parameter_list|)
block|{
if|if
condition|(
operator|!
name|owner
operator|.
name|getPreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- preference group "
operator|+
name|owner
operator|+
literal|" already has the following preferences:"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|owner
operator|.
name|getPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|p
init|=
operator|(
name|Preference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|instanceof
name|TimePref
condition|)
name|sLog
operator|.
name|info
argument_list|(
literal|"    -- "
operator|+
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefName
argument_list|()
operator|+
literal|" "
operator|+
operator|(
operator|(
name|TimePref
operator|)
name|p
operator|)
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
operator|(
operator|(
name|TimePref
operator|)
name|p
operator|)
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|p
operator|instanceof
name|RoomPref
condition|)
name|sLog
operator|.
name|info
argument_list|(
literal|"    -- "
operator|+
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefName
argument_list|()
operator|+
literal|" "
operator|+
operator|(
operator|(
name|RoomPref
operator|)
name|p
operator|)
operator|.
name|getRoom
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|p
operator|instanceof
name|BuildingPref
condition|)
name|sLog
operator|.
name|info
argument_list|(
literal|"    -- "
operator|+
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefName
argument_list|()
operator|+
literal|" "
operator|+
operator|(
operator|(
name|BuildingPref
operator|)
name|p
operator|)
operator|.
name|getBuilding
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|p
operator|instanceof
name|RoomFeaturePref
condition|)
name|sLog
operator|.
name|info
argument_list|(
literal|"    -- "
operator|+
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefName
argument_list|()
operator|+
literal|" "
operator|+
operator|(
operator|(
name|RoomFeaturePref
operator|)
name|p
operator|)
operator|.
name|getRoomFeature
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|p
operator|instanceof
name|RoomGroupPref
condition|)
name|sLog
operator|.
name|info
argument_list|(
literal|"    -- "
operator|+
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefName
argument_list|()
operator|+
literal|" "
operator|+
operator|(
operator|(
name|RoomGroupPref
operator|)
name|p
operator|)
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|sLog
operator|.
name|info
argument_list|(
literal|"    -- "
operator|+
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefName
argument_list|()
operator|+
literal|" "
operator|+
name|p
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|owner
operator|.
name|getPreferences
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"timePref"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|el
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|PreferenceLevel
name|level
init|=
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|el
operator|.
name|attributeValue
argument_list|(
literal|"level"
argument_list|)
argument_list|)
decl_stmt|;
name|TimePattern
name|timePattern
init|=
name|TimePattern
operator|.
name|findByName
argument_list|(
name|iSession
argument_list|,
name|el
operator|.
name|attributeValue
argument_list|(
literal|"timePattern"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|timePattern
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to find time pattern with name "
operator|+
name|el
operator|.
name|attributeValue
argument_list|(
literal|"timePattern"
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|TimePref
name|tp
init|=
operator|new
name|TimePref
argument_list|()
decl_stmt|;
name|tp
operator|.
name|setOwner
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setPrefLevel
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setTimePattern
argument_list|(
name|timePattern
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setPreference
argument_list|(
name|el
operator|.
name|attributeValue
argument_list|(
literal|"preference"
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|tp
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- added time preference "
operator|+
name|tp
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|tp
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"roomPref"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|el
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|PreferenceLevel
name|level
init|=
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|el
operator|.
name|attributeValue
argument_list|(
literal|"level"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|roomName
init|=
name|el
operator|.
name|attributeValue
argument_list|(
literal|"room"
argument_list|)
decl_stmt|;
name|Location
name|location
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|owner
operator|.
name|getAvailableRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|l
init|=
operator|(
name|Location
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|.
name|getLabel
argument_list|()
operator|.
name|equals
argument_list|(
name|roomName
argument_list|)
condition|)
block|{
name|location
operator|=
name|l
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|location
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to find room with name "
operator|+
name|roomName
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|RoomPref
name|rp
init|=
operator|new
name|RoomPref
argument_list|()
decl_stmt|;
name|rp
operator|.
name|setOwner
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setPrefLevel
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setRoom
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|rp
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- added room preference "
operator|+
name|rp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefName
argument_list|()
operator|+
literal|" "
operator|+
name|rp
operator|.
name|getRoom
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"buildingPref"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|el
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|PreferenceLevel
name|level
init|=
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|el
operator|.
name|attributeValue
argument_list|(
literal|"level"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|bldgName
init|=
name|el
operator|.
name|attributeValue
argument_list|(
literal|"building"
argument_list|)
decl_stmt|;
name|Building
name|building
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|owner
operator|.
name|getAvailableBuildings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Building
name|b
init|=
operator|(
name|Building
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
operator|.
name|getAbbreviation
argument_list|()
operator|.
name|equals
argument_list|(
name|bldgName
argument_list|)
condition|)
block|{
name|building
operator|=
name|b
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|building
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to find building with name "
operator|+
name|bldgName
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|BuildingPref
name|bp
init|=
operator|new
name|BuildingPref
argument_list|()
decl_stmt|;
name|bp
operator|.
name|setOwner
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|bp
operator|.
name|setPrefLevel
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|bp
operator|.
name|setBuilding
argument_list|(
name|building
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|bp
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- added building preference "
operator|+
name|bp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefName
argument_list|()
operator|+
literal|" "
operator|+
name|bp
operator|.
name|getBuilding
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"roomFeaturePref"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|el
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|PreferenceLevel
name|level
init|=
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|el
operator|.
name|attributeValue
argument_list|(
literal|"level"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|featureName
init|=
name|el
operator|.
name|attributeValue
argument_list|(
literal|"feature"
argument_list|)
decl_stmt|;
name|RoomFeature
name|feature
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|owner
operator|.
name|getAvailableRoomFeatures
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomFeature
name|f
init|=
operator|(
name|RoomFeature
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|getLabel
argument_list|()
operator|.
name|equals
argument_list|(
name|featureName
argument_list|)
condition|)
block|{
name|feature
operator|=
name|f
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|feature
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to find room feature with name "
operator|+
name|featureName
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|RoomFeaturePref
name|fp
init|=
operator|new
name|RoomFeaturePref
argument_list|()
decl_stmt|;
name|fp
operator|.
name|setOwner
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|fp
operator|.
name|setPrefLevel
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|fp
operator|.
name|setRoomFeature
argument_list|(
name|feature
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|fp
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- added room feature preference "
operator|+
name|fp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefName
argument_list|()
operator|+
literal|" "
operator|+
name|fp
operator|.
name|getRoomFeature
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"roomGroupPref"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|el
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|PreferenceLevel
name|level
init|=
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|el
operator|.
name|attributeValue
argument_list|(
literal|"level"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|groupName
init|=
name|el
operator|.
name|attributeValue
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|RoomGroup
name|group
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|owner
operator|.
name|getAvailableRoomGroups
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomGroup
name|g
init|=
operator|(
name|RoomGroup
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|g
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|groupName
argument_list|)
condition|)
block|{
name|group
operator|=
name|g
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to find room group with name "
operator|+
name|groupName
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|RoomGroupPref
name|gp
init|=
operator|new
name|RoomGroupPref
argument_list|()
decl_stmt|;
name|gp
operator|.
name|setOwner
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|gp
operator|.
name|setPrefLevel
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|gp
operator|.
name|setRoomGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|gp
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- added time preference "
operator|+
name|gp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefName
argument_list|()
operator|+
literal|" "
operator|+
name|gp
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Department
name|getDepartment
parameter_list|(
name|String
name|deptCode
parameter_list|)
block|{
if|if
condition|(
literal|"LLR"
operator|.
name|equals
argument_list|(
name|deptCode
argument_list|)
operator|||
literal|"LAB"
operator|.
name|equals
argument_list|(
name|deptCode
argument_list|)
condition|)
block|{
return|return
operator|(
name|Department
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select d from Department d where d.session.uniqueId=:sessionId and d.externalManager=1 and d.externalMgrAbbv=:deptCode"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSession
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"deptCode"
argument_list|,
name|deptCode
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
return|return
operator|(
name|Department
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select d from Department d where d.session.uniqueId=:sessionId and d.deptCode=:deptCode"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSession
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"deptCode"
argument_list|,
name|deptCode
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|public
name|Class_
name|importClass
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|String
name|subjectArea
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"subjectArea"
argument_list|)
decl_stmt|;
name|String
name|courseNbr
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"courseNbr"
argument_list|)
decl_stmt|;
name|String
name|itype
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"itype"
argument_list|)
decl_stmt|;
name|int
name|section
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"section"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|suffix
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"suffix"
argument_list|)
decl_stmt|;
name|String
name|notes
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"notes"
argument_list|)
decl_stmt|;
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|iAllClasses
operator|.
name|get
argument_list|(
operator|new
name|ClassHash
argument_list|(
name|element
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to find class "
operator|+
name|subjectArea
operator|+
literal|" "
operator|+
name|courseNbr
operator|+
literal|" "
operator|+
name|itype
operator|+
literal|" "
operator|+
name|section
operator|+
name|suffix
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"Processing class "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|manager
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"manager"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getDeptCode
argument_list|()
operator|.
name|equals
argument_list|(
name|manager
argument_list|)
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- changing managing department to "
operator|+
name|manager
operator|+
literal|" (was "
operator|+
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setManagingDept
argument_list|(
name|getDepartment
argument_list|(
name|manager
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
name|int
name|expectedCapacity
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"expectedCapacity"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|maxExpectedCapacity
init|=
name|expectedCapacity
decl_stmt|;
name|int
name|numberOfRooms
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"numberOfRooms"
argument_list|)
argument_list|)
decl_stmt|;
name|float
name|roomRatio
init|=
literal|1.0f
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"roomRatio"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|roomRatio
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"roomRatio"
argument_list|)
argument_list|)
expr_stmt|;
name|maxExpectedCapacity
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"maxExpectedCapacity"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|roomCapacity
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"roomCapacity"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedCapacity
operator|==
literal|0
condition|)
block|{
name|roomRatio
operator|=
literal|0.0f
expr_stmt|;
name|expectedCapacity
operator|=
name|roomCapacity
expr_stmt|;
block|}
else|else
block|{
name|roomRatio
operator|=
operator|(
operator|(
name|float
operator|)
name|roomCapacity
operator|)
operator|/
name|expectedCapacity
expr_stmt|;
block|}
block|}
if|if
condition|(
name|clazz
operator|.
name|getExpectedCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
operator|!=
name|expectedCapacity
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- changing min. class limit to "
operator|+
name|expectedCapacity
operator|+
literal|" (was "
operator|+
name|clazz
operator|.
name|getExpectedCapacity
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setExpectedCapacity
argument_list|(
operator|new
name|Integer
argument_list|(
name|expectedCapacity
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
operator|!=
name|maxExpectedCapacity
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- changing max. class limit to "
operator|+
name|maxExpectedCapacity
operator|+
literal|" (was "
operator|+
name|clazz
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setMaxExpectedCapacity
argument_list|(
operator|new
name|Integer
argument_list|(
name|maxExpectedCapacity
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|getNbrRooms
argument_list|()
operator|.
name|intValue
argument_list|()
operator|!=
name|numberOfRooms
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- changing number of rooms to "
operator|+
name|numberOfRooms
operator|+
literal|" (was "
operator|+
name|clazz
operator|.
name|getNbrRooms
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setNbrRooms
argument_list|(
operator|new
name|Integer
argument_list|(
name|numberOfRooms
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|getRoomRatio
argument_list|()
operator|.
name|floatValue
argument_list|()
operator|!=
name|roomRatio
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- changing room ratio to "
operator|+
name|roomRatio
operator|+
literal|" (was "
operator|+
name|clazz
operator|.
name|getRoomRatio
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setRoomRatio
argument_list|(
operator|new
name|Float
argument_list|(
name|roomRatio
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|notes
argument_list|,
name|clazz
operator|.
name|getNotes
argument_list|()
argument_list|)
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- changing notes to "
operator|+
name|notes
operator|+
literal|" (was "
operator|+
name|clazz
operator|.
name|getNotes
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setNotes
argument_list|(
name|notes
argument_list|)
expr_stmt|;
block|}
name|String
name|datePattern
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"datePattern"
argument_list|)
decl_stmt|;
if|if
condition|(
name|datePattern
operator|==
literal|null
operator|&&
name|clazz
operator|.
name|getDatePattern
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- changing date pattern to default (was "
operator|+
name|clazz
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setDatePattern
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|datePattern
operator|!=
literal|null
operator|&&
operator|(
name|clazz
operator|.
name|getDatePattern
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|clazz
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|datePattern
argument_list|)
operator|)
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- changing date pattern to "
operator|+
name|datePattern
operator|+
literal|" (was "
operator|+
operator|(
name|clazz
operator|.
name|getDatePattern
argument_list|()
operator|==
literal|null
condition|?
literal|"not set"
else|:
name|clazz
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
operator|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|DatePattern
name|dp
init|=
name|DatePattern
operator|.
name|findByName
argument_list|(
name|clazz
operator|.
name|getSession
argument_list|()
argument_list|,
name|datePattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|dp
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to find date pattern named '"
operator|+
name|datePattern
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clazz
operator|.
name|setDatePattern
argument_list|(
name|dp
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|clazz
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- class "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" already has the following instructors:"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|clazz
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"    -- "
operator|+
name|ci
operator|.
name|nameLastNameFirst
argument_list|()
operator|+
literal|" (lead:"
operator|+
name|ci
operator|.
name|isLead
argument_list|()
operator|+
literal|", share:"
operator|+
name|ci
operator|.
name|getPercentShare
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"instructor"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|el
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|puid
init|=
name|el
operator|.
name|attributeValue
argument_list|(
literal|"puid"
argument_list|)
decl_stmt|;
name|DepartmentalInstructor
name|instructor
init|=
literal|null
decl_stmt|;
try|try
block|{
name|instructor
operator|=
operator|(
name|DepartmentalInstructor
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select i from DepartmentalInstructor i where i.puid=:puid and i.department.uniqueId=:deptId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"puid"
argument_list|,
name|puid
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"deptId"
argument_list|,
name|clazz
operator|.
name|getControllingDept
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NonUniqueResultException
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Two or more instructors with puid "
operator|+
name|puid
operator|+
literal|" (department: "
operator|+
name|clazz
operator|.
name|getControllingDept
argument_list|()
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|instructor
operator|==
literal|null
condition|)
block|{
name|Staff
name|staff
init|=
literal|null
decl_stmt|;
try|try
block|{
name|staff
operator|=
operator|(
name|Staff
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct s from Staff s where s.dept=:dept and s.puid=:puid"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"dept"
argument_list|,
name|clazz
operator|.
name|getControllingDept
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"puid"
argument_list|,
name|puid
argument_list|)
operator|.
name|uniqueResult
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NonUniqueResultException
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Two or more staffs with puid "
operator|+
name|puid
operator|+
literal|" (department: "
operator|+
name|clazz
operator|.
name|getControllingDept
argument_list|()
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|staff
operator|==
literal|null
condition|)
block|{
name|List
name|staffs
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct s from Staff s where s.puid=:puid"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"puid"
argument_list|,
name|puid
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|staffs
operator|.
name|isEmpty
argument_list|()
condition|)
name|staff
operator|=
operator|(
name|Staff
operator|)
name|staffs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|staff
operator|!=
literal|null
condition|)
block|{
name|instructor
operator|=
operator|new
name|DepartmentalInstructor
argument_list|()
expr_stmt|;
name|instructor
operator|.
name|setExternalUniqueId
argument_list|(
name|staff
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setDepartment
argument_list|(
name|clazz
operator|.
name|getControllingDept
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|staff
operator|.
name|getFirstName
argument_list|()
operator|!=
literal|null
condition|)
name|instructor
operator|.
name|setFirstName
argument_list|(
name|staff
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|staff
operator|.
name|getMiddleName
argument_list|()
operator|!=
literal|null
condition|)
name|instructor
operator|.
name|setMiddleName
argument_list|(
name|staff
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|staff
operator|.
name|getLastName
argument_list|()
operator|!=
literal|null
condition|)
name|instructor
operator|.
name|setLastName
argument_list|(
name|staff
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|staff
operator|.
name|getPositionType
argument_list|()
operator|!=
literal|null
condition|)
name|instructor
operator|.
name|setPositionType
argument_list|(
name|staff
operator|.
name|getPositionType
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- instructor "
operator|+
name|instructor
operator|.
name|nameLastNameFirst
argument_list|()
operator|+
literal|" created"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|instructor
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to find instructor with puid "
operator|+
name|puid
operator|+
literal|" (department: "
operator|+
name|clazz
operator|.
name|getControllingDept
argument_list|()
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|ClassInstructor
name|ci
init|=
operator|new
name|ClassInstructor
argument_list|()
decl_stmt|;
name|ci
operator|.
name|setInstructor
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setLead
argument_list|(
operator|new
name|Boolean
argument_list|(
name|el
operator|.
name|attributeValue
argument_list|(
literal|"isLead"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setPercentShare
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|el
operator|.
name|attributeValue
argument_list|(
literal|"percentShare"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setLead
argument_list|(
operator|new
name|Boolean
argument_list|(
name|el
operator|.
name|attributeValue
argument_list|(
literal|"isTentative"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setInstructor
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setClassInstructing
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- added instructor "
operator|+
name|ci
operator|.
name|nameLastNameFirst
argument_list|()
operator|+
literal|" (lead:"
operator|+
name|ci
operator|.
name|isLead
argument_list|()
operator|+
literal|", share:"
operator|+
name|ci
operator|.
name|getPercentShare
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|importPreferences
argument_list|(
name|clazz
argument_list|,
name|element
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"assignedDays"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Assignment
name|assignment
init|=
operator|new
name|Assignment
argument_list|()
decl_stmt|;
name|assignment
operator|.
name|setClazz
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setSolution
argument_list|(
name|iSolution
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setClassName
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setDays
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"assignedDays"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setStartSlot
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"assignedSlot"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setTimePattern
argument_list|(
name|TimePattern
operator|.
name|findByName
argument_list|(
name|iSession
argument_list|,
name|element
operator|.
name|attributeValue
argument_list|(
literal|"assignedTimePattern"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|HashSet
name|rooms
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|element
operator|.
name|element
argument_list|(
literal|"assignedRooms"
argument_list|)
operator|.
name|elementIterator
argument_list|(
literal|"room"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|roomName
init|=
operator|(
name|String
operator|)
operator|(
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|Location
name|location
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|clazz
operator|.
name|getAvailableRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|l
init|=
operator|(
name|Location
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|.
name|getLabel
argument_list|()
operator|.
name|equals
argument_list|(
name|roomName
argument_list|)
condition|)
block|{
name|location
operator|=
name|l
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|location
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to find room with name "
operator|+
name|roomName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rooms
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
block|}
name|assignment
operator|.
name|setRooms
argument_list|(
name|rooms
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- assignment "
operator|+
name|assignment
operator|.
name|getPlacement
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|update
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
return|return
name|clazz
return|;
block|}
specifier|public
name|SchedulingSubpart
name|importSchedulingSubpart
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|String
name|subjectArea
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"subjectArea"
argument_list|)
decl_stmt|;
name|String
name|courseNbr
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"courseNbr"
argument_list|)
decl_stmt|;
name|String
name|itype
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"itype"
argument_list|)
decl_stmt|;
name|String
name|suffix
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"suffix"
argument_list|)
decl_stmt|;
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|iAllSubparts
operator|.
name|get
argument_list|(
operator|new
name|ClassHash
argument_list|(
name|element
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|subpart
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to find scheduling subpart "
operator|+
name|subjectArea
operator|+
literal|" "
operator|+
name|courseNbr
operator|+
literal|" "
operator|+
name|itype
operator|+
literal|" "
operator|+
operator|(
name|suffix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
literal|" ("
operator|+
name|suffix
operator|+
literal|")"
operator|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"Processing subpart "
operator|+
name|subjectArea
operator|+
literal|" "
operator|+
name|courseNbr
operator|+
literal|" "
operator|+
name|itype
operator|+
literal|" "
operator|+
operator|(
name|suffix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
literal|" ("
operator|+
name|suffix
operator|+
literal|")"
operator|)
argument_list|)
expr_stmt|;
name|String
name|datePattern
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"datePattern"
argument_list|)
decl_stmt|;
if|if
condition|(
name|datePattern
operator|==
literal|null
operator|&&
name|subpart
operator|.
name|getDatePattern
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- changing date pattern to default"
argument_list|)
expr_stmt|;
name|subpart
operator|.
name|setDatePattern
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|datePattern
operator|!=
literal|null
operator|&&
operator|(
name|subpart
operator|.
name|getDatePattern
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|subpart
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|datePattern
argument_list|)
operator|)
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- changing date pattern to "
operator|+
name|datePattern
argument_list|)
expr_stmt|;
name|DatePattern
name|dp
init|=
name|DatePattern
operator|.
name|findByName
argument_list|(
name|subpart
operator|.
name|getSession
argument_list|()
argument_list|,
name|datePattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|dp
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to find date pattern named '"
operator|+
name|datePattern
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|subpart
operator|.
name|setDatePattern
argument_list|(
name|dp
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|minutesPerWk
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"minutesPerWk"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|subpart
operator|.
name|getMinutesPerWk
argument_list|()
operator|.
name|intValue
argument_list|()
operator|!=
name|minutesPerWk
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- changing minutes per meeting to "
operator|+
name|minutesPerWk
operator|+
literal|" (was "
operator|+
name|subpart
operator|.
name|getMinutesPerWk
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|subpart
operator|.
name|setMinutesPerWk
argument_list|(
operator|new
name|Integer
argument_list|(
name|minutesPerWk
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|importPreferences
argument_list|(
name|subpart
argument_list|,
name|element
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|subpart
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|subpart
argument_list|)
expr_stmt|;
return|return
name|subpart
return|;
block|}
specifier|public
name|DepartmentalInstructor
name|importInstructor
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|String
name|deptCode
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"deptCode"
argument_list|)
decl_stmt|;
name|String
name|puid
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"puid"
argument_list|)
decl_stmt|;
name|DepartmentalInstructor
name|instructor
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select id from DepartmentalInstructor id where id.department.deptCode=:deptCode and id.department.sessionId=:sessionId and id.puid=:puid"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"deptCode"
argument_list|,
name|deptCode
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSession
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"puid"
argument_list|,
name|puid
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|instructor
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to find instructor "
operator|+
name|puid
operator|+
literal|" for department "
operator|+
name|deptCode
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"Processing instructor "
operator|+
name|instructor
operator|.
name|getLastName
argument_list|()
operator|+
literal|" (puid:"
operator|+
name|puid
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|importPreferences
argument_list|(
name|instructor
argument_list|,
name|element
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
return|return
name|instructor
return|;
block|}
specifier|public
name|void
name|clearExistingDistributionPrefs
parameter_list|()
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|iManager
operator|.
name|getDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|d
operator|.
name|getPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|p
init|=
operator|(
name|Preference
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|instanceof
name|DistributionPref
condition|)
block|{
name|DistributionPref
name|dp
init|=
operator|(
name|DistributionPref
operator|)
name|p
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Removing existing distribution preference "
operator|+
name|dp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefName
argument_list|()
operator|+
literal|" "
operator|+
name|dp
operator|.
name|getLabel
argument_list|()
operator|+
literal|" between"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|k
init|=
name|dp
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|dobj
init|=
operator|(
name|DistributionObject
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|dobj
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|Class_
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- class "
operator|+
operator|(
operator|(
name|Class_
operator|)
name|dobj
operator|.
name|getPrefGroup
argument_list|()
operator|)
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|dobj
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
name|SchedulingSubpart
name|s
init|=
operator|(
name|SchedulingSubpart
operator|)
name|dobj
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- scheduling subpart "
operator|+
name|s
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|s
operator|.
name|getItypeDesc
argument_list|()
operator|+
operator|(
name|s
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
literal|" ("
operator|+
name|s
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
operator|+
literal|")"
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|delete
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|DistributionPref
name|importDistributionPref
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|PreferenceLevel
name|level
init|=
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"level"
argument_list|)
argument_list|)
decl_stmt|;
name|DistributionType
name|type
init|=
operator|(
name|DistributionType
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select t from DistributionType t where t.reference=:reference"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"reference"
argument_list|,
name|element
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to find distribution preference type "
operator|+
name|element
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"Processing distribution preference "
operator|+
name|level
operator|.
name|getPrefName
argument_list|()
operator|+
literal|" "
operator|+
name|type
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|DistributionPref
name|distPref
init|=
operator|new
name|DistributionPref
argument_list|()
decl_stmt|;
name|distPref
operator|.
name|setDistributionType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|distPref
operator|.
name|setPrefLevel
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|distPref
operator|.
name|setGrouping
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"grouping"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"manager"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|distPref
operator|.
name|setOwner
argument_list|(
name|getDepartment
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"manager"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
name|distObjects
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"class"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|x
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|subjectArea
init|=
name|x
operator|.
name|attributeValue
argument_list|(
literal|"subjectArea"
argument_list|)
decl_stmt|;
name|String
name|courseNbr
init|=
name|x
operator|.
name|attributeValue
argument_list|(
literal|"courseNbr"
argument_list|)
decl_stmt|;
name|String
name|itype
init|=
name|x
operator|.
name|attributeValue
argument_list|(
literal|"itype"
argument_list|)
decl_stmt|;
name|int
name|section
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|x
operator|.
name|attributeValue
argument_list|(
literal|"section"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|suffix
init|=
name|x
operator|.
name|attributeValue
argument_list|(
literal|"suffix"
argument_list|)
decl_stmt|;
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|iAllClasses
operator|.
name|get
argument_list|(
operator|new
name|ClassHash
argument_list|(
name|x
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to find class "
operator|+
name|subjectArea
operator|+
literal|" "
operator|+
name|courseNbr
operator|+
literal|" "
operator|+
name|itype
operator|+
literal|" "
operator|+
name|section
operator|+
name|suffix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DistributionObject
name|dobj
init|=
operator|new
name|DistributionObject
argument_list|()
decl_stmt|;
name|dobj
operator|.
name|setPrefGroup
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|dobj
operator|.
name|setSequenceNumber
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|x
operator|.
name|attributeValue
argument_list|(
literal|"sequenceNumber"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dobj
operator|.
name|setDistributionPref
argument_list|(
name|distPref
argument_list|)
expr_stmt|;
name|distObjects
operator|.
name|add
argument_list|(
name|dobj
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- added clazz "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"manager"
argument_list|)
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|distPref
operator|.
name|getOwner
argument_list|()
operator|==
literal|null
condition|)
block|{
name|distPref
operator|.
name|setOwner
argument_list|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
operator|(
name|Department
operator|)
name|distPref
operator|.
name|getOwner
argument_list|()
operator|)
operator|.
name|isExternalManager
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|isExternalManager
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|distPref
operator|.
name|setOwner
argument_list|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"schedulingSubpart"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|x
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|subjectArea
init|=
name|x
operator|.
name|attributeValue
argument_list|(
literal|"subjectArea"
argument_list|)
decl_stmt|;
name|String
name|courseNbr
init|=
name|x
operator|.
name|attributeValue
argument_list|(
literal|"courseNbr"
argument_list|)
decl_stmt|;
name|String
name|itype
init|=
name|x
operator|.
name|attributeValue
argument_list|(
literal|"itype"
argument_list|)
decl_stmt|;
name|String
name|suffix
init|=
name|x
operator|.
name|attributeValue
argument_list|(
literal|"suffix"
argument_list|)
decl_stmt|;
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|iAllSubparts
operator|.
name|get
argument_list|(
operator|new
name|ClassHash
argument_list|(
name|x
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|subpart
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to find scheduling subpart "
operator|+
name|subjectArea
operator|+
literal|" "
operator|+
name|courseNbr
operator|+
literal|" "
operator|+
name|itype
operator|+
literal|" "
operator|+
operator|(
name|suffix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
literal|" ("
operator|+
name|suffix
operator|+
literal|")"
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DistributionObject
name|dobj
init|=
operator|new
name|DistributionObject
argument_list|()
decl_stmt|;
name|dobj
operator|.
name|setPrefGroup
argument_list|(
name|subpart
argument_list|)
expr_stmt|;
name|dobj
operator|.
name|setSequenceNumber
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|x
operator|.
name|attributeValue
argument_list|(
literal|"sequenceNumber"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dobj
operator|.
name|setDistributionPref
argument_list|(
name|distPref
argument_list|)
expr_stmt|;
name|distObjects
operator|.
name|add
argument_list|(
name|dobj
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- added subpart "
operator|+
name|subjectArea
operator|+
literal|" "
operator|+
name|courseNbr
operator|+
literal|" "
operator|+
name|itype
operator|+
literal|" "
operator|+
operator|(
name|suffix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
literal|" ("
operator|+
name|suffix
operator|+
literal|")"
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"manager"
argument_list|)
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|distPref
operator|.
name|getOwner
argument_list|()
operator|==
literal|null
condition|)
block|{
name|distPref
operator|.
name|setOwner
argument_list|(
name|subpart
operator|.
name|getManagingDept
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
operator|(
name|Department
operator|)
name|distPref
operator|.
name|getOwner
argument_list|()
operator|)
operator|.
name|isExternalManager
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|subpart
operator|.
name|getManagingDept
argument_list|()
operator|.
name|isExternalManager
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|distPref
operator|.
name|setOwner
argument_list|(
name|subpart
operator|.
name|getManagingDept
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|distObjects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"No distribution objects found for constraint "
operator|+
name|level
operator|.
name|getPrefName
argument_list|()
operator|+
literal|" "
operator|+
name|type
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|distPref
operator|.
name|setDistributionObjects
argument_list|(
name|distObjects
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|distPref
argument_list|)
expr_stmt|;
return|return
name|distPref
return|;
block|}
specifier|public
name|void
name|importInstructionalOffering
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|InstructionalOffering
name|io
init|=
operator|(
name|InstructionalOffering
operator|)
name|iAllInstructionalOfferings
operator|.
name|get
argument_list|(
operator|new
name|ClassHash
argument_list|(
name|element
argument_list|)
argument_list|)
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Processing instructional offering "
operator|+
name|element
operator|.
name|attributeValue
argument_list|(
literal|"subjectArea"
argument_list|)
operator|+
literal|" "
operator|+
name|element
operator|.
name|attributeValue
argument_list|(
literal|"courseNbr"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|io
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- creating new offering"
argument_list|)
expr_stmt|;
name|HashSet
name|courseOfferings
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"courseOffering"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|x
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|SubjectArea
name|sa
init|=
operator|(
name|SubjectArea
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select sa from SubjectArea sa where sa.subjectAreaAbbreviation=:subjectAreaAbbreviation and sa.sessionId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSession
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"subjectAreaAbbreviation"
argument_list|,
name|x
operator|.
name|attributeValue
argument_list|(
literal|"subjectArea"
argument_list|)
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
name|CourseOffering
name|co
init|=
operator|(
name|CourseOffering
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select co from CourseOffering co where co.subjectArea.uniqueId=:subjectAreaId and co.courseNbr=:courseNbr"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"subjectAreaId"
argument_list|,
name|sa
operator|.
name|getUniqueId
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"courseNbr"
argument_list|,
name|x
operator|.
name|attributeValue
argument_list|(
literal|"courseNbr"
argument_list|)
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|co
operator|==
literal|null
condition|)
block|{
name|co
operator|=
operator|new
name|CourseOffering
argument_list|()
expr_stmt|;
name|co
operator|.
name|setSubjectArea
argument_list|(
name|sa
argument_list|)
expr_stmt|;
name|co
operator|.
name|setCourseNbr
argument_list|(
name|x
operator|.
name|attributeValue
argument_list|(
literal|"courseNbr"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|co
operator|.
name|setProjectedDemand
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|x
operator|.
name|attributeValue
argument_list|(
literal|"projectedDemand"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|co
operator|.
name|setDemand
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|x
operator|.
name|attributeValue
argument_list|(
literal|"demand"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|co
operator|.
name|setIsControl
argument_list|(
operator|new
name|Boolean
argument_list|(
name|x
operator|.
name|attributeValue
argument_list|(
literal|"isControl"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|co
operator|.
name|setPermId
argument_list|(
name|x
operator|.
name|attributeValue
argument_list|(
literal|"permId"
argument_list|)
argument_list|)
expr_stmt|;
name|courseOfferings
operator|.
name|add
argument_list|(
name|co
argument_list|)
expr_stmt|;
block|}
name|io
operator|=
operator|new
name|InstructionalOffering
argument_list|()
expr_stmt|;
name|io
operator|.
name|setNotOffered
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|io
operator|.
name|setSession
argument_list|(
name|iSession
argument_list|)
expr_stmt|;
name|io
operator|.
name|setInstrOfferingPermId
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"instrOfferingPermId"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|io
operator|.
name|setCourseOfferings
argument_list|(
name|courseOfferings
argument_list|)
expr_stmt|;
name|io
operator|.
name|setByReservationOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|courseOfferings
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
operator|(
operator|(
name|CourseOffering
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|setInstructionalOffering
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|save
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|io
operator|.
name|isNotOffered
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- changing not offered offering"
argument_list|)
expr_stmt|;
name|io
operator|.
name|setNotOffered
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
name|Hashtable
name|classTable
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Iterator
name|i
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"instrOfferingConfig"
argument_list|)
decl_stmt|;
if|if
condition|(
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|j
init|=
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
operator|&&
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|c
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|Element
name|x
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|limit
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|x
operator|.
name|attributeValue
argument_list|(
literal|"limit"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|limit
operator|!=
name|c
operator|.
name|getLimit
argument_list|()
operator|.
name|intValue
argument_list|()
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- changing limit to "
operator|+
name|limit
operator|+
literal|" (was "
operator|+
name|c
operator|.
name|getLimit
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|c
operator|.
name|setLimit
argument_list|(
operator|new
name|Integer
argument_list|(
name|limit
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|update
argument_list|(
name|c
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|k
init|=
name|x
operator|.
name|elementIterator
argument_list|(
literal|"schedulingSubpart"
argument_list|)
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|importSchedulingSubpartStructure
argument_list|(
operator|(
name|Element
operator|)
name|k
operator|.
name|next
argument_list|()
argument_list|,
literal|null
argument_list|,
name|c
argument_list|,
name|classTable
argument_list|)
expr_stmt|;
block|}
block|}
block|}
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Element
name|x
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|InstrOfferingConfig
name|c
init|=
operator|new
name|InstrOfferingConfig
argument_list|()
decl_stmt|;
name|c
operator|.
name|setInstructionalOffering
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|c
operator|.
name|setLimit
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|x
operator|.
name|attributeValue
argument_list|(
literal|"limit"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|setUnlimitedEnrollment
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|.
name|attributeValue
argument_list|(
literal|"unlimitedEnrollment"
argument_list|)
operator|!=
literal|null
condition|)
name|c
operator|.
name|setUnlimitedEnrollment
argument_list|(
operator|new
name|Boolean
argument_list|(
name|x
operator|.
name|attributeValue
argument_list|(
literal|"unlimitedEnrollment"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|c
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|x
operator|.
name|elementIterator
argument_list|(
literal|"schedulingSubpart"
argument_list|)
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|importSchedulingSubpartStructure
argument_list|(
operator|(
name|Element
operator|)
name|j
operator|.
name|next
argument_list|()
argument_list|,
literal|null
argument_list|,
name|c
argument_list|,
name|classTable
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|importSchedulingSubpartStructure
parameter_list|(
name|Element
name|element
parameter_list|,
name|SchedulingSubpart
name|parent
parameter_list|,
name|InstrOfferingConfig
name|cfg
parameter_list|,
name|Hashtable
name|classTable
parameter_list|)
block|{
name|ClassHash
name|subpartHash
init|=
operator|new
name|ClassHash
argument_list|(
name|cfg
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|,
name|cfg
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|element
operator|.
name|attributeValue
argument_list|(
literal|"itype"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
name|element
operator|.
name|attributeValue
argument_list|(
literal|"suffix"
argument_list|)
argument_list|)
decl_stmt|;
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|iAllSubparts
operator|.
name|get
argument_list|(
name|subpartHash
argument_list|)
decl_stmt|;
if|if
condition|(
name|subpart
operator|==
literal|null
condition|)
block|{
name|subpart
operator|=
operator|new
name|SchedulingSubpart
argument_list|()
expr_stmt|;
name|subpart
operator|.
name|setItype
argument_list|(
operator|(
name|ItypeDesc
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select i from ItypeDesc i where i.abbv=:abbv"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"abbv"
argument_list|,
name|element
operator|.
name|attributeValue
argument_list|(
literal|"itype"
argument_list|)
argument_list|)
operator|.
name|uniqueResult
argument_list|()
argument_list|)
expr_stmt|;
name|subpart
operator|.
name|setParentSubpart
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|subpart
operator|.
name|setInstrOfferingConfig
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|subpart
operator|.
name|setMinutesPerWk
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"minutesPerWk"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|subpart
argument_list|)
expr_stmt|;
name|iAllSubparts
operator|.
name|put
argument_list|(
name|subpartHash
argument_list|,
name|subpart
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- subpart "
operator|+
name|subpartHash
operator|+
literal|" imported"
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|subpart
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"class"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|x
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ClassHash
name|clazzHash
init|=
operator|new
name|ClassHash
argument_list|(
name|cfg
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|,
name|cfg
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|subpart
operator|.
name|getItypeDesc
argument_list|()
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|x
operator|.
name|attributeValue
argument_list|(
literal|"sectionNumber"
argument_list|)
argument_list|)
argument_list|,
name|element
operator|.
name|attributeValue
argument_list|(
literal|"suffix"
argument_list|)
argument_list|)
decl_stmt|;
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|iAllClasses
operator|.
name|get
argument_list|(
name|clazzHash
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
name|clazz
operator|=
operator|new
name|Class_
argument_list|()
expr_stmt|;
name|clazz
operator|.
name|setSchedulingSubpart
argument_list|(
name|subpart
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setCancelled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|.
name|attributeValue
argument_list|(
literal|"manager"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|clazz
operator|.
name|setManagingDept
argument_list|(
name|getDepartment
argument_list|(
name|x
operator|.
name|attributeValue
argument_list|(
literal|"manager"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|expectedCapacity
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|x
operator|.
name|attributeValue
argument_list|(
literal|"expectedCapacity"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|maxExpectedCapacity
init|=
name|expectedCapacity
decl_stmt|;
name|int
name|numberOfRooms
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|x
operator|.
name|attributeValue
argument_list|(
literal|"nbrRooms"
argument_list|)
argument_list|)
decl_stmt|;
name|float
name|roomRatio
init|=
literal|1.0f
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|attributeValue
argument_list|(
literal|"roomRatio"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|roomRatio
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|x
operator|.
name|attributeValue
argument_list|(
literal|"roomRatio"
argument_list|)
argument_list|)
expr_stmt|;
name|maxExpectedCapacity
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|x
operator|.
name|attributeValue
argument_list|(
literal|"maxExpectedCapacity"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|roomCapacity
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|x
operator|.
name|attributeValue
argument_list|(
literal|"roomCapacity"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedCapacity
operator|==
literal|0
condition|)
block|{
name|roomRatio
operator|=
literal|0.0f
expr_stmt|;
name|expectedCapacity
operator|=
name|roomCapacity
expr_stmt|;
block|}
else|else
block|{
name|roomRatio
operator|=
operator|(
operator|(
name|float
operator|)
name|roomCapacity
operator|)
operator|/
name|expectedCapacity
expr_stmt|;
block|}
block|}
name|clazz
operator|.
name|setExpectedCapacity
argument_list|(
operator|new
name|Integer
argument_list|(
name|expectedCapacity
argument_list|)
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setMaxExpectedCapacity
argument_list|(
operator|new
name|Integer
argument_list|(
name|maxExpectedCapacity
argument_list|)
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setRoomRatio
argument_list|(
operator|new
name|Float
argument_list|(
name|roomRatio
argument_list|)
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setNbrRooms
argument_list|(
operator|new
name|Integer
argument_list|(
name|numberOfRooms
argument_list|)
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setDisplayInstructor
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setEnabledForStudentScheduling
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|.
name|attributeValue
argument_list|(
literal|"parent"
argument_list|)
operator|!=
literal|null
condition|)
name|clazz
operator|.
name|setParentClass
argument_list|(
operator|(
name|Class_
operator|)
name|classTable
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|x
operator|.
name|attributeValue
argument_list|(
literal|"parent"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"    -- class "
operator|+
name|clazzHash
operator|+
literal|" imported"
argument_list|)
expr_stmt|;
name|iAllClasses
operator|.
name|put
argument_list|(
name|clazzHash
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
name|classTable
operator|.
name|put
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|x
operator|.
name|attributeValue
argument_list|(
literal|"uniqueId"
argument_list|)
argument_list|)
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"schedulingSubpart"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|importSchedulingSubpartStructure
argument_list|(
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|,
name|subpart
argument_list|,
name|cfg
argument_list|,
name|classTable
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|importAll
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|Exception
block|{
name|hibSession
operator|=
operator|(
operator|new
name|SessionDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|Document
name|document
init|=
operator|(
operator|new
name|SAXReader
argument_list|()
operator|)
operator|.
name|read
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|document
operator|.
name|getRootElement
argument_list|()
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"academicYearTerm:"
operator|+
name|root
operator|.
name|attributeValue
argument_list|(
literal|"academicYearTerm"
argument_list|)
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"academicInitiative:"
operator|+
name|root
operator|.
name|attributeValue
argument_list|(
literal|"academicInitiative"
argument_list|)
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"puid:"
operator|+
name|root
operator|.
name|attributeValue
argument_list|(
literal|"puid"
argument_list|)
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"solverGroupName:"
operator|+
name|root
operator|.
name|attributeValue
argument_list|(
literal|"solverGroupName"
argument_list|)
argument_list|)
expr_stmt|;
name|iSession
operator|=
operator|(
name|Session
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s from Session s where s.academicYearTerm=:academicYearTerm and s.academicInitiative=:academicInitiative"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"academicYearTerm"
argument_list|,
name|root
operator|.
name|attributeValue
argument_list|(
literal|"academicYearTerm"
argument_list|)
argument_list|)
operator|.
name|setString
argument_list|(
literal|"academicInitiative"
argument_list|,
name|root
operator|.
name|attributeValue
argument_list|(
literal|"academicInitiative"
argument_list|)
argument_list|)
operator|.
name|uniqueResult
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"session:"
operator|+
name|iSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|root
operator|.
name|attributeValue
argument_list|(
literal|"solverGroupName"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|iManager
operator|=
name|SolverGroup
operator|.
name|findBySessionIdName
argument_list|(
name|iSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|root
operator|.
name|attributeValue
argument_list|(
literal|"solverGroupName"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|puid
init|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"puid"
argument_list|)
decl_stmt|;
while|while
condition|(
name|puid
operator|.
name|length
argument_list|()
operator|<
literal|10
condition|)
name|puid
operator|=
literal|"0"
operator|+
name|puid
expr_stmt|;
name|TimetableManager
name|mgr
init|=
operator|(
name|TimetableManager
operator|)
name|hibSession
operator|.
name|createCriteria
argument_list|(
name|TimetableManager
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
name|Restrictions
operator|.
name|eq
argument_list|(
literal|"puid"
argument_list|,
name|puid
argument_list|)
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"manager:"
operator|+
name|mgr
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|mgr
operator|.
name|getSolverGroups
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SolverGroup
name|sg
init|=
operator|(
name|SolverGroup
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|sg
operator|.
name|getSession
argument_list|()
operator|.
name|equals
argument_list|(
name|iSession
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|iManager
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Two or more solver groups associated with the manager."
argument_list|)
throw|;
name|iManager
operator|=
name|sg
expr_stmt|;
block|}
if|if
condition|(
name|iManager
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No solver group associated with the manager."
argument_list|)
throw|;
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"manager:"
operator|+
name|iManager
argument_list|)
expr_stmt|;
name|iAllClasses
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|Class_
operator|.
name|findAll
argument_list|(
name|iSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|!=
literal|null
operator|&&
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|!=
literal|null
condition|)
name|iAllClasses
operator|.
name|put
argument_list|(
operator|new
name|ClassHash
argument_list|(
name|c
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"all classes:"
operator|+
name|iAllClasses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|iAllSubparts
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|SchedulingSubpart
operator|.
name|findAll
argument_list|(
name|iSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|s
init|=
operator|(
name|SchedulingSubpart
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|getControllingCourseOffering
argument_list|()
operator|!=
literal|null
condition|)
name|iAllSubparts
operator|.
name|put
argument_list|(
operator|new
name|ClassHash
argument_list|(
name|s
argument_list|)
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"all subparts:"
operator|+
name|iAllSubparts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|iAllInstructionalOfferings
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|InstructionalOffering
operator|.
name|findAll
argument_list|(
name|iSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructionalOffering
name|io
init|=
operator|(
name|InstructionalOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|!=
literal|null
condition|)
name|iAllInstructionalOfferings
operator|.
name|put
argument_list|(
operator|new
name|ClassHash
argument_list|(
name|io
argument_list|)
argument_list|,
name|io
argument_list|)
expr_stmt|;
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"all instructional offerings:"
operator|+
name|iAllInstructionalOfferings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|iSolution
operator|=
operator|new
name|Solution
argument_list|()
expr_stmt|;
name|iSolution
operator|.
name|setCreated
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|iSolution
operator|.
name|setCommitDate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|iSolution
operator|.
name|setCommited
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|iSolution
operator|.
name|setCreator
argument_list|(
literal|"ImportPreferences"
argument_list|)
expr_stmt|;
name|iSolution
operator|.
name|setNote
argument_list|(
literal|"Imported solution."
argument_list|)
expr_stmt|;
name|iSolution
operator|.
name|setOwner
argument_list|(
name|iManager
argument_list|)
expr_stmt|;
name|iSolution
operator|.
name|setValid
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|iSolution
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|root
operator|.
name|elementIterator
argument_list|(
literal|"instructionalOffering"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|importInstructionalOffering
argument_list|(
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|root
operator|.
name|elementIterator
argument_list|(
literal|"timePattern"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|importTimePattern
argument_list|(
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|root
operator|.
name|elementIterator
argument_list|(
literal|"datePattern"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|importDatePattern
argument_list|(
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|root
operator|.
name|elementIterator
argument_list|(
literal|"class"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|importClass
argument_list|(
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|root
operator|.
name|elementIterator
argument_list|(
literal|"schedulingSubpart"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|importSchedulingSubpart
argument_list|(
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|root
operator|.
name|elementIterator
argument_list|(
literal|"instructor"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|importInstructor
argument_list|(
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|//clearExistingDistributionPrefs();
for|for
control|(
name|Iterator
name|i
init|=
name|root
operator|.
name|elementIterator
argument_list|(
literal|"distributionPref"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|importDistributionPref
argument_list|(
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
comment|// Example arguments: jdbc:oracle:thin:@tamarind.smas.purdue.edu:1521:sms8l c:\\export.xml
try|try
block|{
name|ToolBox
operator|.
name|configureLogging
argument_list|()
expr_stmt|;
name|HibernateUtil
operator|.
name|configureHibernate
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
operator|(
operator|new
name|ImportPreferences
argument_list|()
operator|)
operator|.
name|importAll
argument_list|(
operator|new
name|File
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ClassHash
block|{
name|String
name|subjectArea
init|=
literal|null
decl_stmt|;
name|String
name|courseNbr
init|=
literal|null
decl_stmt|;
name|String
name|itype
init|=
literal|null
decl_stmt|;
name|int
name|section
init|=
operator|-
literal|1
decl_stmt|;
name|String
name|suffix
init|=
literal|null
decl_stmt|;
name|Integer
name|hashCode
init|=
literal|null
decl_stmt|;
specifier|public
name|ClassHash
parameter_list|(
name|String
name|subjectArea
parameter_list|,
name|String
name|courseNbr
parameter_list|,
name|String
name|itype
parameter_list|,
name|int
name|section
parameter_list|,
name|String
name|suffix
parameter_list|)
block|{
name|this
operator|.
name|subjectArea
operator|=
name|subjectArea
expr_stmt|;
name|this
operator|.
name|courseNbr
operator|=
name|courseNbr
expr_stmt|;
name|this
operator|.
name|itype
operator|=
name|itype
expr_stmt|;
name|this
operator|.
name|section
operator|=
name|section
expr_stmt|;
name|this
operator|.
name|suffix
operator|=
name|suffix
expr_stmt|;
block|}
specifier|public
name|ClassHash
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|subjectArea
operator|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"subjectArea"
argument_list|)
expr_stmt|;
name|courseNbr
operator|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"courseNbr"
argument_list|)
expr_stmt|;
name|itype
operator|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"itype"
argument_list|)
expr_stmt|;
name|section
operator|=
operator|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"section"
argument_list|)
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"section"
argument_list|)
argument_list|)
operator|)
expr_stmt|;
name|suffix
operator|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"suffix"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ClassHash
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
name|subjectArea
operator|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
expr_stmt|;
name|courseNbr
operator|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
expr_stmt|;
name|itype
operator|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
expr_stmt|;
name|section
operator|=
name|clazz
operator|.
name|getSectionNumber
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|suffix
operator|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ClassHash
parameter_list|(
name|SchedulingSubpart
name|subpart
parameter_list|)
block|{
name|subjectArea
operator|=
name|subpart
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
expr_stmt|;
name|courseNbr
operator|=
name|subpart
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
expr_stmt|;
name|itype
operator|=
name|subpart
operator|.
name|getItypeDesc
argument_list|()
expr_stmt|;
name|suffix
operator|=
name|subpart
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ClassHash
parameter_list|(
name|InstructionalOffering
name|io
parameter_list|)
block|{
name|subjectArea
operator|=
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
expr_stmt|;
name|courseNbr
operator|=
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|ClassHash
operator|)
condition|)
return|return
literal|false
return|;
name|ClassHash
name|x
init|=
operator|(
name|ClassHash
operator|)
name|o
decl_stmt|;
return|return
name|ToolBox
operator|.
name|equals
argument_list|(
name|subjectArea
argument_list|,
name|x
operator|.
name|subjectArea
argument_list|)
operator|&&
name|ToolBox
operator|.
name|equals
argument_list|(
name|courseNbr
argument_list|,
name|x
operator|.
name|courseNbr
argument_list|)
operator|&&
name|ToolBox
operator|.
name|equals
argument_list|(
name|itype
argument_list|,
name|x
operator|.
name|itype
argument_list|)
operator|&&
name|section
operator|==
name|x
operator|.
name|section
operator|&&
name|ToolBox
operator|.
name|equals
argument_list|(
name|suffix
argument_list|,
name|x
operator|.
name|suffix
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|subjectArea
operator|+
literal|" "
operator|+
name|courseNbr
operator|+
literal|" "
operator|+
operator|(
name|itype
operator|==
literal|null
condition|?
literal|""
else|:
name|itype
operator|)
operator|+
literal|" "
operator|+
operator|(
name|section
operator|>=
literal|0
condition|?
literal|""
operator|+
name|section
else|:
literal|""
operator|)
operator|+
operator|(
name|suffix
operator|==
literal|null
condition|?
literal|""
else|:
name|suffix
operator|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
name|hashCode
operator|==
literal|null
condition|)
block|{
name|hashCode
operator|=
operator|new
name|Integer
argument_list|(
name|toString
argument_list|()
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|hashCode
operator|.
name|intValue
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

