begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|DocumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|SAXReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  *  */
end_comment

begin_class
specifier|public
class|class
name|UpdateSequencesFromXml
block|{
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|iSequences
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|iIdColumns
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|SAXReader
name|iSAXReader
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iSource
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iConfig
init|=
literal|"hibernate.cfg.xml"
decl_stmt|;
specifier|public
name|UpdateSequencesFromXml
parameter_list|()
throws|throws
name|DocumentException
block|{
name|iSAXReader
operator|=
operator|new
name|SAXReader
argument_list|()
expr_stmt|;
name|iSAXReader
operator|.
name|setEntityResolver
argument_list|(
name|iEntityResolver
argument_list|)
expr_stmt|;
block|}
specifier|private
name|EntityResolver
name|iEntityResolver
init|=
operator|new
name|EntityResolver
argument_list|()
block|{
specifier|public
name|InputSource
name|resolveEntity
parameter_list|(
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|)
block|{
if|if
condition|(
name|publicId
operator|.
name|equals
argument_list|(
literal|"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
argument_list|)
condition|)
block|{
return|return
operator|new
name|InputSource
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"org/hibernate/hibernate-mapping-3.0.dtd"
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|publicId
operator|.
name|equals
argument_list|(
literal|"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
argument_list|)
condition|)
block|{
return|return
operator|new
name|InputSource
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"org/hibernate/hibernate-configuration-3.0.dtd"
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
specifier|public
name|void
name|setSource
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|iSource
operator|=
name|source
expr_stmt|;
block|}
specifier|public
name|void
name|setConfig
parameter_list|(
name|String
name|config
parameter_list|)
block|{
name|iConfig
operator|=
name|config
expr_stmt|;
block|}
specifier|protected
name|Document
name|read
parameter_list|(
name|String
name|resource
parameter_list|)
throws|throws
name|IOException
throws|,
name|DocumentException
block|{
if|if
condition|(
name|iSource
operator|==
literal|null
condition|)
block|{
return|return
name|iSAXReader
operator|.
name|read
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|resource
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|iSAXReader
operator|.
name|read
argument_list|(
operator|new
name|File
argument_list|(
name|iSource
operator|+
name|File
operator|.
name|separator
operator|+
name|resource
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|public
name|void
name|load
parameter_list|()
throws|throws
name|IOException
throws|,
name|DocumentException
block|{
name|info
argument_list|(
literal|"Config: "
operator|+
operator|(
name|iSource
operator|==
literal|null
condition|?
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|iConfig
argument_list|)
else|:
name|iSource
operator|+
name|File
operator|.
name|separator
operator|+
name|iConfig
operator|)
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"Reading hibernate.cfg.xml ..."
argument_list|)
expr_stmt|;
name|Document
name|document
init|=
name|read
argument_list|(
name|iConfig
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|document
operator|.
name|getRootElement
argument_list|()
decl_stmt|;
name|Element
name|sessionFactoryElement
init|=
name|root
operator|.
name|element
argument_list|(
literal|"session-factory"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|i
init|=
name|sessionFactoryElement
operator|.
name|elementIterator
argument_list|(
literal|"mapping"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|m
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|resource
init|=
name|m
operator|.
name|attributeValue
argument_list|(
literal|"resource"
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
continue|continue;
name|info
argument_list|(
literal|"Processing "
operator|+
name|resource
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|Document
name|resDoc
init|=
name|read
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|Element
name|resRoot
init|=
name|resDoc
operator|.
name|getRootElement
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|j
init|=
name|resRoot
operator|.
name|elementIterator
argument_list|(
literal|"class"
argument_list|)
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|classEl
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|checkSequences
argument_list|(
name|classEl
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|print
parameter_list|()
throws|throws
name|IOException
throws|,
name|DocumentException
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|sequence
range|:
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|iSequences
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|+=
literal|"\nunion all "
expr_stmt|;
name|ret
operator|+=
literal|"select 'DROP SEQUENCE "
operator|+
name|sequence
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|"; CREATE SEQUENCE "
operator|+
name|sequence
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|" MINVALUE 1 MAXVALUE 99999999999999999999 INCREMENT BY 1 START WITH ' ||"
expr_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|tables
init|=
name|iSequences
operator|.
name|get
argument_list|(
name|sequence
argument_list|)
decl_stmt|;
if|if
condition|(
name|tables
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|String
name|table
init|=
name|tables
operator|.
name|first
argument_list|()
decl_stmt|;
name|String
name|idColumn
init|=
name|iIdColumns
operator|.
name|get
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|ret
operator|+=
literal|" case when max("
operator|+
name|idColumn
operator|+
literal|") is not null then max("
operator|+
name|idColumn
operator|+
literal|" + 1) else 1 end "
expr_stmt|;
name|ret
operator|+=
literal|"|| ' CACHE 20 NOORDER NOCYCLE; GRANT SELECT ON "
operator|+
name|sequence
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|" TO webuser;' from "
operator|+
name|table
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|+=
literal|" case when max(uniqueid) is not null then max(uniqueid + 1) else 1 end "
expr_stmt|;
name|ret
operator|+=
literal|"|| ' CACHE 20 NOORDER NOCYCLE; GRANT SELECT ON "
operator|+
name|sequence
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|" TO webuser;' from ("
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|table
range|:
name|tables
control|)
block|{
name|String
name|idColumn
init|=
name|iIdColumns
operator|.
name|get
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
condition|)
block|{
name|ret
operator|+=
literal|"\nselect max("
operator|+
name|idColumn
operator|+
literal|" + 1) as uniqueid from "
operator|+
name|table
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|+=
literal|"\nunion all select max("
operator|+
name|idColumn
operator|+
literal|" + 1) as uniqueid from "
operator|+
name|table
expr_stmt|;
block|}
block|}
name|ret
operator|+=
literal|"\n)"
expr_stmt|;
block|}
name|info
argument_list|(
name|sequence
operator|+
literal|": "
operator|+
name|iSequences
operator|.
name|get
argument_list|(
name|sequence
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|info
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"All done."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|checkSequences
parameter_list|(
name|Element
name|classEl
parameter_list|,
name|String
name|parentTable
parameter_list|,
name|String
name|parentIdColumn
parameter_list|,
name|String
name|parentSequence
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|table
init|=
name|classEl
operator|.
name|attributeValue
argument_list|(
literal|"table"
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
name|table
operator|=
name|parentTable
expr_stmt|;
name|String
name|sequence
init|=
literal|null
decl_stmt|,
name|idColumn
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|i
init|=
name|classEl
operator|.
name|elementIterator
argument_list|(
literal|"id"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|el
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|idColumn
operator|=
name|el
operator|.
name|attributeValue
argument_list|(
literal|"column"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
if|if
condition|(
name|el
operator|.
name|element
argument_list|(
literal|"generator"
argument_list|)
operator|!=
literal|null
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|j
init|=
name|el
operator|.
name|element
argument_list|(
literal|"generator"
argument_list|)
operator|.
name|elementIterator
argument_list|(
literal|"param"
argument_list|)
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|p
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"sequence"
operator|.
name|equals
argument_list|(
name|p
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
condition|)
name|sequence
operator|=
name|p
operator|.
name|getTextTrim
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sequence
operator|==
literal|null
condition|)
name|sequence
operator|=
name|parentSequence
expr_stmt|;
if|if
condition|(
name|idColumn
operator|==
literal|null
condition|)
name|idColumn
operator|=
name|parentIdColumn
expr_stmt|;
if|if
condition|(
name|sequence
operator|!=
literal|null
operator|&&
name|table
operator|!=
literal|null
condition|)
block|{
name|info
argument_list|(
literal|"  "
operator|+
name|table
operator|+
literal|"."
operator|+
name|idColumn
operator|+
literal|": "
operator|+
name|sequence
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|tables
init|=
name|iSequences
operator|.
name|get
argument_list|(
name|sequence
argument_list|)
decl_stmt|;
if|if
condition|(
name|tables
operator|==
literal|null
condition|)
block|{
name|tables
operator|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|iSequences
operator|.
name|put
argument_list|(
name|sequence
argument_list|,
name|tables
argument_list|)
expr_stmt|;
block|}
name|tables
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|iIdColumns
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|idColumn
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|i
init|=
name|classEl
operator|.
name|elementIterator
argument_list|(
literal|"union-subclass"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|checkSequences
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|,
name|table
argument_list|,
name|idColumn
argument_list|,
name|sequence
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|i
init|=
name|classEl
operator|.
name|elementIterator
argument_list|(
literal|"subclass"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|checkSequences
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|,
name|table
argument_list|,
name|idColumn
argument_list|,
name|sequence
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|info
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|warn
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|UpdateSequencesFromXml
name|update
init|=
operator|new
name|UpdateSequencesFromXml
argument_list|()
decl_stmt|;
name|update
operator|.
name|load
argument_list|()
expr_stmt|;
if|if
condition|(
operator|new
name|File
argument_list|(
literal|"../unitime-addons"
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|update
operator|.
name|setSource
argument_list|(
literal|"../unitime-addons/BannerAddOn/JavaSource"
argument_list|)
expr_stmt|;
name|update
operator|.
name|load
argument_list|()
expr_stmt|;
block|}
name|update
operator|.
name|print
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

