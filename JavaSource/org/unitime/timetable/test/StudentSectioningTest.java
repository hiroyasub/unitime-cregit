begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|StudentSctBBTest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Choice
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|FreeTimeRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Offering
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Subpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|DocumentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|SAXReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|XMLWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassWaitList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseDemand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|FreeTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SectioningInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentEnrollmentMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|WaitList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|SchedulingSubpartComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|StudentSectioningTest
block|{
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|StudentSectioningTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DecimalFormat
name|sTwoNumbersDF
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"00"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|sShuffle
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
name|double
name|sAvailableThreshold
init|=
literal|0.001
decl_stmt|;
specifier|public
specifier|static
name|Document
name|testSectioning
parameter_list|(
name|Document
name|request
parameter_list|)
block|{
name|Element
name|root
init|=
name|request
operator|.
name|getRootElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
literal|"request"
operator|.
name|equals
argument_list|(
name|root
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Root element is not 'request'."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|String
name|acadInitiative
init|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"campus"
argument_list|)
decl_stmt|;
name|String
name|acadYear
init|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"year"
argument_list|)
decl_stmt|;
name|String
name|acadTerm
init|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"term"
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|acadInitiative
argument_list|,
name|acadYear
argument_list|,
name|acadTerm
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Session not found."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Document
name|response
init|=
name|DocumentHelper
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|Element
name|responseEl
init|=
name|response
operator|.
name|addElement
argument_list|(
literal|"response"
argument_list|)
decl_stmt|;
name|responseEl
operator|.
name|addAttribute
argument_list|(
literal|"campus"
argument_list|,
name|acadInitiative
argument_list|)
expr_stmt|;
name|responseEl
operator|.
name|addAttribute
argument_list|(
literal|"year"
argument_list|,
name|acadYear
argument_list|)
expr_stmt|;
name|responseEl
operator|.
name|addAttribute
argument_list|(
literal|"term"
argument_list|,
name|acadTerm
argument_list|)
expr_stmt|;
name|responseEl
operator|.
name|addAttribute
argument_list|(
literal|"version"
argument_list|,
literal|"1.1"
argument_list|)
expr_stmt|;
name|responseEl
operator|.
name|addAttribute
argument_list|(
literal|"timestamp"
argument_list|,
operator|new
name|Date
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|List
name|students
init|=
name|root
operator|.
name|elements
argument_list|(
literal|"student"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sShuffle
condition|)
block|{
name|students
operator|=
operator|new
name|Vector
argument_list|(
name|students
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|students
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|students
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|testSectioning
argument_list|(
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|,
name|responseEl
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
specifier|private
specifier|static
name|HashSet
name|generateAvailableChoices
parameter_list|(
name|Offering
name|offering
parameter_list|,
name|Random
name|rnd
parameter_list|,
name|double
name|availProb
parameter_list|)
block|{
name|HashSet
name|ret
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|e
init|=
name|offering
operator|.
name|getConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Config
name|config
init|=
operator|(
name|Config
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
name|HashSet
name|touchedSubparts
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|Vector
name|subparts
init|=
operator|new
name|Vector
argument_list|(
name|config
operator|.
name|getSubparts
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|subparts
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|Subpart
name|subpart
init|=
operator|(
name|Subpart
operator|)
name|subparts
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|touchedSubparts
operator|.
name|add
argument_list|(
name|subpart
argument_list|)
condition|)
block|{
name|boolean
name|added
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|f
init|=
name|subpart
operator|.
name|getChoices
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|f
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Choice
name|choice
init|=
operator|(
name|Choice
operator|)
name|f
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|rnd
operator|.
name|nextDouble
argument_list|()
operator|<
name|availProb
condition|)
block|{
name|Vector
name|sections
init|=
operator|new
name|Vector
argument_list|(
name|choice
operator|.
name|getSections
argument_list|()
argument_list|)
decl_stmt|;
name|Section
name|section
init|=
operator|(
name|Section
operator|)
name|sections
operator|.
name|elementAt
argument_list|(
operator|(
name|int
operator|)
name|rnd
operator|.
name|nextDouble
argument_list|()
operator|*
name|sections
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
name|added
operator|=
literal|true
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|section
operator|.
name|getChoice
argument_list|()
argument_list|)
expr_stmt|;
name|touchedSubparts
operator|.
name|add
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
argument_list|)
expr_stmt|;
name|section
operator|=
name|section
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|added
operator|&&
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Section
name|section
init|=
operator|(
name|Section
operator|)
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|get
argument_list|(
operator|(
name|int
operator|)
name|rnd
operator|.
name|nextDouble
argument_list|()
operator|*
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|section
operator|.
name|getChoice
argument_list|()
argument_list|)
expr_stmt|;
name|touchedSubparts
operator|.
name|add
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
argument_list|)
expr_stmt|;
name|section
operator|=
name|section
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|private
specifier|static
name|TimeLocation
name|makeTime
parameter_list|(
name|DatePattern
name|dp
parameter_list|,
name|String
name|days
parameter_list|,
name|String
name|startTime
parameter_list|,
name|String
name|endTime
parameter_list|,
name|String
name|length
parameter_list|)
block|{
name|int
name|dayCode
init|=
literal|0
decl_stmt|,
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|DAY_NAMES_SHORT
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|days
operator|.
name|startsWith
argument_list|(
name|Constants
operator|.
name|DAY_NAMES_SHORT
index|[
name|i
index|]
argument_list|,
name|idx
argument_list|)
condition|)
block|{
name|dayCode
operator|+=
name|Constants
operator|.
name|DAY_CODES
index|[
name|i
index|]
expr_stmt|;
name|idx
operator|+=
name|Constants
operator|.
name|DAY_NAMES_SHORT
index|[
name|i
index|]
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
name|int
name|startSlot
init|=
operator|(
operator|(
operator|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|startTime
argument_list|)
operator|/
literal|100
operator|)
operator|*
literal|60
operator|+
name|Integer
operator|.
name|parseInt
argument_list|(
name|startTime
argument_list|)
operator|%
literal|100
operator|)
operator|-
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
name|int
name|nrSlots
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|length
operator|!=
literal|null
condition|)
block|{
name|nrSlots
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|length
argument_list|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
expr_stmt|;
block|}
else|else
block|{
name|nrSlots
operator|=
operator|(
operator|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|endTime
argument_list|)
operator|/
literal|100
operator|)
operator|*
literal|60
operator|+
name|Integer
operator|.
name|parseInt
argument_list|(
name|endTime
argument_list|)
operator|%
literal|100
operator|)
operator|-
operator|(
operator|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|startTime
argument_list|)
operator|/
literal|100
operator|)
operator|*
literal|60
operator|+
name|Integer
operator|.
name|parseInt
argument_list|(
name|startTime
argument_list|)
operator|%
literal|100
operator|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
expr_stmt|;
block|}
return|return
operator|new
name|TimeLocation
argument_list|(
name|dayCode
argument_list|,
name|startSlot
argument_list|,
name|nrSlots
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|dp
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|dp
operator|.
name|getName
argument_list|()
argument_list|,
name|dp
operator|.
name|getPatternBitSet
argument_list|()
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|dayCode2days
parameter_list|(
name|int
name|dayCode
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|i
index|]
operator|)
operator|!=
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|DAY_NAMES_SHORT
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|startSlot2startTime
parameter_list|(
name|int
name|startSlot
parameter_list|)
block|{
name|int
name|minHrs
init|=
name|startSlot
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
decl_stmt|;
return|return
name|sTwoNumbersDF
operator|.
name|format
argument_list|(
name|minHrs
operator|/
literal|60
argument_list|)
operator|+
name|sTwoNumbersDF
operator|.
name|format
argument_list|(
name|minHrs
operator|%
literal|60
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|timeLocation2endTime
parameter_list|(
name|TimeLocation
name|time
parameter_list|)
block|{
name|int
name|minHrs
init|=
operator|(
name|time
operator|.
name|getStartSlot
argument_list|()
operator|+
name|time
operator|.
name|getLength
argument_list|()
operator|)
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|-
name|time
operator|.
name|getBreakTime
argument_list|()
decl_stmt|;
return|return
name|sTwoNumbersDF
operator|.
name|format
argument_list|(
name|minHrs
operator|/
literal|60
argument_list|)
operator|+
name|sTwoNumbersDF
operator|.
name|format
argument_list|(
name|minHrs
operator|%
literal|60
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getInstructorIds
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
if|if
condition|(
operator|!
name|clazz
operator|.
name|isDisplayInstructor
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
return|return
literal|null
return|;
name|String
name|ret
init|=
literal|null
decl_stmt|;
name|TreeSet
name|ts
init|=
operator|new
name|TreeSet
argument_list|(
name|clazz
operator|.
name|getClassInstructors
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|ts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ci
operator|.
name|isLead
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
name|ret
operator|=
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
else|else
name|ret
operator|+=
literal|":"
operator|+
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
specifier|static
name|String
name|getInstructorNames
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
if|if
condition|(
operator|!
name|clazz
operator|.
name|isDisplayInstructor
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
return|return
literal|null
return|;
name|String
name|ret
init|=
literal|null
decl_stmt|;
name|TreeSet
name|ts
init|=
operator|new
name|TreeSet
argument_list|(
name|clazz
operator|.
name|getClassInstructors
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|ts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ci
operator|.
name|isLead
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
name|ret
operator|=
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|nameShort
argument_list|()
expr_stmt|;
else|else
name|ret
operator|+=
literal|":"
operator|+
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|nameShort
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|double
name|getPenalty
parameter_list|(
name|Section
name|section
parameter_list|,
name|Class_
name|clazz
parameter_list|,
name|long
name|studentId
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|clazz
operator|.
name|getStudentEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StudentClassEnrollment
name|sce
init|=
operator|(
name|StudentClassEnrollment
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|Long
operator|.
name|parseLong
argument_list|(
name|sce
operator|.
name|getStudent
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
operator|==
name|studentId
condition|)
return|return
literal|0.0
return|;
comment|//student already enrolled in this section
block|}
return|return
name|section
operator|.
name|getOnlineSectioningPenalty
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|updateSectioningInfos
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
parameter_list|,
name|CourseRequest
name|courseRequest
parameter_list|)
block|{
if|if
condition|(
name|courseRequest
operator|.
name|getAssignment
argument_list|()
operator|==
literal|null
condition|)
return|return;
comment|//not enrolled --> no update
name|Course
name|course
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|s
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
operator|&&
name|course
operator|!=
literal|null
condition|;
control|)
block|{
name|StudentClassEnrollment
name|sce
init|=
operator|(
name|StudentClassEnrollment
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Section
name|section
init|=
name|courseRequest
operator|.
name|getSection
argument_list|(
name|sce
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
name|course
operator|=
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|getCourse
argument_list|(
name|courseRequest
operator|.
name|getStudent
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|course
operator|!=
literal|null
condition|)
return|return;
comment|//student was already enrolled in the course --> no update
name|Enrollment
name|enrollment
init|=
operator|(
name|Enrollment
operator|)
name|courseRequest
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
operator|(
name|Section
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Class_
name|clazz
init|=
operator|new
name|Class_DAO
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|SectioningInfo
name|si
init|=
name|clazz
operator|.
name|getSectioningInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|si
operator|==
literal|null
operator|||
name|Math
operator|.
name|round
argument_list|(
name|si
operator|.
name|getNbrHoldingStudents
argument_list|()
operator|.
name|doubleValue
argument_list|()
argument_list|)
operator|<
literal|1
condition|)
continue|continue;
name|si
operator|.
name|setNbrHoldingStudents
argument_list|(
operator|new
name|Double
argument_list|(
name|si
operator|.
name|getNbrHoldingStudents
argument_list|()
operator|.
name|doubleValue
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|si
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- hold for "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" decreased by 1 (to "
operator|+
name|si
operator|.
name|getNbrHoldingStudents
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|Vector
name|feasibleEnrollments
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|g
init|=
name|courseRequest
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|g
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Enrollment
name|enrl
init|=
operator|(
name|Enrollment
operator|)
name|g
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|overlaps
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|h
init|=
name|courseRequest
operator|.
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|h
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Request
name|otherRequest
init|=
operator|(
name|Request
operator|)
name|h
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|otherRequest
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|otherCourseRequest
init|=
operator|(
name|CourseRequest
operator|)
name|otherRequest
decl_stmt|;
if|if
condition|(
name|otherCourseRequest
operator|.
name|equals
argument_list|(
name|courseRequest
argument_list|)
condition|)
continue|continue;
name|Enrollment
name|otherErollment
init|=
operator|(
name|Enrollment
operator|)
name|otherCourseRequest
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|otherErollment
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|enrl
operator|.
name|isOverlapping
argument_list|(
name|otherErollment
argument_list|)
condition|)
block|{
name|overlaps
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|overlaps
condition|)
name|feasibleEnrollments
operator|.
name|add
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
block|}
name|double
name|decrement
init|=
name|courseRequest
operator|.
name|getWeight
argument_list|()
operator|/
name|feasibleEnrollments
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|g
init|=
name|feasibleEnrollments
operator|.
name|iterator
argument_list|()
init|;
name|g
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Enrollment
name|feasibleEnrollment
init|=
operator|(
name|Enrollment
operator|)
name|g
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|feasibleEnrollment
operator|.
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
operator|(
name|Section
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Class_
name|clazz
init|=
operator|new
name|Class_DAO
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|SectioningInfo
name|si
init|=
name|clazz
operator|.
name|getSectioningInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|si
operator|==
literal|null
operator|||
name|si
operator|.
name|getNbrExpectedStudents
argument_list|()
operator|.
name|doubleValue
argument_list|()
operator|<=
literal|0.0
condition|)
continue|continue;
name|si
operator|.
name|setNbrExpectedStudents
argument_list|(
operator|new
name|Double
argument_list|(
name|si
operator|.
name|getNbrExpectedStudents
argument_list|()
operator|.
name|doubleValue
argument_list|()
operator|-
name|decrement
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|si
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- expected for "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" decreased by "
operator|+
name|decrement
operator|+
literal|" (to "
operator|+
name|si
operator|.
name|getNbrExpectedStudents
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|Course
name|loadCourse
parameter_list|(
name|CourseOffering
name|co
parameter_list|,
name|long
name|studentId
parameter_list|)
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- loading "
operator|+
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|Offering
name|offering
init|=
operator|new
name|Offering
argument_list|(
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|projected
init|=
operator|(
name|co
operator|.
name|getProjectedDemand
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|co
operator|.
name|getProjectedDemand
argument_list|()
operator|.
name|intValue
argument_list|()
operator|)
decl_stmt|;
name|int
name|courseLimit
init|=
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|co
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
name|courseLimit
operator|=
name|co
operator|.
name|getReservation
argument_list|()
expr_stmt|;
name|Course
name|course
init|=
operator|new
name|Course
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|co
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|,
name|co
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|offering
argument_list|,
name|courseLimit
argument_list|,
name|projected
argument_list|)
decl_stmt|;
name|Hashtable
name|class2section
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Hashtable
name|ss2subpart
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|ioc
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Config
name|config
init|=
operator|new
name|Config
argument_list|(
name|ioc
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
operator|(
name|ioc
operator|.
name|isUnlimitedEnrollment
argument_list|()
condition|?
operator|-
literal|1
else|:
name|ioc
operator|.
name|getLimit
argument_list|()
operator|)
argument_list|,
name|ioc
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" ["
operator|+
name|ioc
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|,
name|offering
argument_list|)
decl_stmt|;
name|TreeSet
name|subparts
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|SchedulingSubpartComparator
argument_list|()
argument_list|)
decl_stmt|;
name|subparts
operator|.
name|addAll
argument_list|(
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|subparts
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|sufix
init|=
name|ss
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
decl_stmt|;
name|Subpart
name|parentSubpart
init|=
operator|(
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|Subpart
operator|)
name|ss2subpart
operator|.
name|get
argument_list|(
name|ss
operator|.
name|getParentSubpart
argument_list|()
argument_list|)
operator|)
decl_stmt|;
name|Subpart
name|subpart
init|=
operator|new
name|Subpart
argument_list|(
name|ss
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|ss
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|sufix
argument_list|,
name|ss
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
operator|(
name|sufix
operator|==
literal|null
operator|||
name|sufix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
literal|" ("
operator|+
name|sufix
operator|+
literal|")"
operator|)
argument_list|,
name|config
argument_list|,
name|parentSubpart
argument_list|)
decl_stmt|;
name|subpart
operator|.
name|setAllowOverlap
argument_list|(
name|ss
operator|.
name|isStudentAllowOverlap
argument_list|()
argument_list|)
expr_stmt|;
name|ss2subpart
operator|.
name|put
argument_list|(
name|ss
argument_list|,
name|subpart
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|k
init|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assignment
name|a
init|=
name|c
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
name|int
name|usedSpace
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|studentId
operator|>=
literal|0
condition|)
for|for
control|(
name|Iterator
name|l
init|=
name|c
operator|.
name|getStudentEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|l
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StudentClassEnrollment
name|sce
init|=
operator|(
name|StudentClassEnrollment
operator|)
name|l
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|Long
operator|.
name|parseLong
argument_list|(
name|sce
operator|.
name|getStudent
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
operator|!=
name|studentId
condition|)
name|usedSpace
operator|++
expr_stmt|;
block|}
comment|/*                     Number usedSpace = (Number)new Class_DAO().getSession().createQuery(                             "select count(sce) from StudentClassEnrollment sce where " +                             "sce.clazz.uniqueId=:classId and sce.student.externalUniqueId!=:studentId").                             setLong("classId", c.getUniqueId()).                             setLong("studentId", studentId).uniqueResult();                     if (studentId<0) usedSpace = new Integer(0);                     */
name|int
name|limit
init|=
name|c
operator|.
name|getClassLimit
argument_list|()
operator|-
name|usedSpace
decl_stmt|;
if|if
condition|(
name|ioc
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|limit
operator|=
operator|-
literal|1
expr_stmt|;
name|Section
name|parentSection
init|=
operator|(
name|c
operator|.
name|getParentClass
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|Section
operator|)
name|class2section
operator|.
name|get
argument_list|(
name|c
operator|.
name|getParentClass
argument_list|()
argument_list|)
operator|)
decl_stmt|;
name|Section
name|section
init|=
operator|new
name|Section
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|limit
argument_list|,
name|c
operator|.
name|getClassLabel
argument_list|()
argument_list|,
name|subpart
argument_list|,
operator|(
name|a
operator|==
literal|null
condition|?
literal|null
else|:
name|a
operator|.
name|getPlacement
argument_list|()
operator|)
argument_list|,
name|getInstructorIds
argument_list|(
name|c
argument_list|)
argument_list|,
name|getInstructorNames
argument_list|(
name|c
argument_list|)
argument_list|,
name|parentSection
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getSectioningInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|section
operator|.
name|setSpaceExpected
argument_list|(
name|c
operator|.
name|getSectioningInfo
argument_list|()
operator|.
name|getNbrExpectedStudents
argument_list|()
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
name|section
operator|.
name|setSpaceHeld
argument_list|(
name|c
operator|.
name|getSectioningInfo
argument_list|()
operator|.
name|getNbrHoldingStudents
argument_list|()
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
name|section
operator|.
name|setPenalty
argument_list|(
name|getPenalty
argument_list|(
name|section
argument_list|,
name|c
argument_list|,
name|studentId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|class2section
operator|.
name|put
argument_list|(
name|c
argument_list|,
name|section
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"    -- section "
operator|+
name|section
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|course
return|;
block|}
specifier|private
specifier|static
name|void
name|exportDependencies
parameter_list|(
name|Element
name|choiceEl
parameter_list|,
name|Choice
name|choice
parameter_list|,
name|Set
name|parentSections
parameter_list|)
block|{
if|if
condition|(
name|parentSections
operator|==
literal|null
operator|||
name|parentSections
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|choice
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
return|return;
name|HashSet
name|configs
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|choice
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
operator|(
name|Section
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|configs
operator|.
name|add
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|choice
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|configs
operator|.
name|size
argument_list|()
condition|)
return|return;
name|HashSet
name|depends
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|e
init|=
name|choice
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Config
name|config
init|=
operator|(
name|Config
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|configs
operator|.
name|contains
argument_list|(
name|config
argument_list|)
condition|)
continue|continue;
name|Subpart
name|subpartThisConfig
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|f
init|=
name|config
operator|.
name|getSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|f
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Subpart
name|subpart
init|=
operator|(
name|Subpart
operator|)
name|f
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|subpart
operator|.
name|getInstructionalType
argument_list|()
operator|.
name|equals
argument_list|(
name|choice
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
condition|)
block|{
name|subpartThisConfig
operator|=
name|subpart
expr_stmt|;
break|break;
block|}
block|}
for|for
control|(
name|Iterator
name|f
init|=
name|config
operator|.
name|getSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|f
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Subpart
name|subpart
init|=
operator|(
name|Subpart
operator|)
name|f
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|subpart
operator|.
name|compareTo
argument_list|(
name|subpartThisConfig
argument_list|)
operator|>=
literal|0
condition|)
continue|continue;
if|if
condition|(
name|subpart
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
continue|continue;
for|for
control|(
name|Iterator
name|g
init|=
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|g
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
operator|(
name|Section
operator|)
name|g
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|depends
operator|.
name|add
argument_list|(
name|section
operator|.
name|getChoice
argument_list|()
argument_list|)
condition|)
block|{
name|Element
name|depEl
init|=
name|choiceEl
operator|.
name|addElement
argument_list|(
literal|"depends"
argument_list|)
decl_stmt|;
name|depEl
operator|.
name|addAttribute
argument_list|(
literal|"class"
argument_list|,
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
expr_stmt|;
name|depEl
operator|.
name|addAttribute
argument_list|(
literal|"choice"
argument_list|,
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|//depEl.addAttribute("name", section.getChoice().getName());
block|}
block|}
block|}
block|}
block|}
else|else
block|{
name|HashSet
name|parentChoices
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|parentSections
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|parentSection
init|=
operator|(
name|Section
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|parentChoices
operator|.
name|add
argument_list|(
name|parentSection
operator|.
name|getChoice
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|parentChoices
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Choice
name|parentChoice
init|=
operator|(
name|Choice
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Element
name|depEl
init|=
name|choiceEl
operator|.
name|addElement
argument_list|(
literal|"depends"
argument_list|)
decl_stmt|;
name|depEl
operator|.
name|addAttribute
argument_list|(
literal|"class"
argument_list|,
name|parentChoice
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
expr_stmt|;
name|depEl
operator|.
name|addAttribute
argument_list|(
literal|"choice"
argument_list|,
name|parentChoice
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|//depEl.addAttribute("name", parentChoice.getName());
name|HashSet
name|parentParentSections
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|parentSections
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|parentSection
init|=
operator|(
name|Section
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentSection
operator|.
name|getChoice
argument_list|()
operator|.
name|equals
argument_list|(
name|parentChoice
argument_list|)
operator|&&
name|parentSection
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
name|parentParentSections
operator|.
name|add
argument_list|(
name|parentSection
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|exportDependencies
argument_list|(
name|depEl
argument_list|,
name|parentChoice
argument_list|,
name|parentParentSections
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|loadStudent
parameter_list|(
name|Session
name|session
parameter_list|,
name|Student
name|student
parameter_list|,
name|Vector
name|messages
parameter_list|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
init|=
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
operator|.
name|findByExternalId
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"  Student "
operator|+
name|student
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|priority
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|TreeSet
argument_list|(
name|s
operator|.
name|getCourseDemands
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseDemand
name|cd
init|=
operator|(
name|CourseDemand
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Request
name|request
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|request
operator|=
operator|new
name|FreeTimeRequest
argument_list|(
name|cd
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|priority
operator|++
argument_list|,
name|cd
operator|.
name|isAlternative
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|,
name|student
argument_list|,
operator|new
name|TimeLocation
argument_list|(
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getLength
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|s
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultDatePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|s
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|s
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultDatePattern
argument_list|()
operator|.
name|getPatternBitSet
argument_list|()
argument_list|,
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getCategory
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- added request "
operator|+
name|request
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|cd
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Vector
name|courses
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|HashSet
name|wlChoices
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|HashSet
name|selChoices
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|HashSet
name|assignedSections
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|Config
name|assignedConfig
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
operator|new
name|TreeSet
argument_list|(
name|cd
operator|.
name|getCourseRequests
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|cr
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|Course
name|course
init|=
name|loadCourse
argument_list|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
argument_list|,
name|student
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|courses
operator|.
name|addElement
argument_list|(
name|course
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|k
init|=
name|cr
operator|.
name|getClassWaitLists
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassWaitList
name|cwl
init|=
operator|(
name|ClassWaitList
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
name|Section
name|section
init|=
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getSection
argument_list|(
name|cwl
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cwl
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|ClassWaitList
operator|.
name|TYPE_SELECTION
argument_list|)
condition|)
name|selChoices
operator|.
name|add
argument_list|(
name|section
operator|.
name|getChoice
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|cwl
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|ClassWaitList
operator|.
name|TYPE_WAITLIST
argument_list|)
condition|)
name|wlChoices
operator|.
name|add
argument_list|(
name|section
operator|.
name|getChoice
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|assignedConfig
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|k
init|=
name|cr
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StudentClassEnrollment
name|sce
init|=
operator|(
name|StudentClassEnrollment
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
name|Section
name|section
init|=
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getSection
argument_list|(
name|sce
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
name|assignedSections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
name|assignedConfig
operator|=
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|courses
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|request
operator|=
operator|new
name|CourseRequest
argument_list|(
name|cd
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|priority
operator|++
argument_list|,
name|cd
operator|.
name|isAlternative
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|,
name|student
argument_list|,
name|courses
argument_list|,
name|cd
operator|.
name|isWaitlist
argument_list|()
argument_list|,
name|cd
operator|.
name|getTimestamp
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CourseRequest
operator|)
name|request
operator|)
operator|.
name|getWaitlistedChoices
argument_list|()
operator|.
name|addAll
argument_list|(
name|wlChoices
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CourseRequest
operator|)
name|request
operator|)
operator|.
name|getSelectedChoices
argument_list|()
operator|.
name|addAll
argument_list|(
name|selChoices
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignedConfig
operator|!=
literal|null
operator|&&
name|assignedSections
operator|.
name|size
argument_list|()
operator|==
name|assignedConfig
operator|.
name|getSubparts
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|Enrollment
name|enrollment
init|=
operator|new
name|Enrollment
argument_list|(
name|request
argument_list|,
literal|0
argument_list|,
name|assignedConfig
argument_list|,
name|assignedSections
argument_list|)
decl_stmt|;
name|request
operator|.
name|setInitialAssignment
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- added request "
operator|+
name|request
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"  -- course demand "
operator|+
name|cd
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|" has no course requests"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|k
init|=
operator|new
name|TreeSet
argument_list|(
name|cd
operator|.
name|getEnrollmentMessages
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StudentEnrollmentMessage
name|m
init|=
operator|(
name|StudentEnrollmentMessage
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
name|messages
operator|.
name|add
argument_list|(
operator|new
name|StudentSctBBTest
operator|.
name|Message
argument_list|(
name|m
operator|.
name|getLevel
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|request
argument_list|,
name|m
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|saveStudent
parameter_list|(
name|Session
name|session
parameter_list|,
name|Student
name|student
parameter_list|,
name|Vector
name|messages
parameter_list|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
init|=
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
operator|.
name|findByExternalId
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"  Student "
operator|+
name|student
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
return|return;
block|}
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|new
name|StudentDAO
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
name|e
init|=
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Request
name|request
init|=
operator|(
name|Request
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|instanceof
name|CourseRequest
condition|)
name|updateSectioningInfos
argument_list|(
name|hibSession
argument_list|,
name|s
argument_list|,
operator|(
name|CourseRequest
operator|)
name|request
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|s
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StudentClassEnrollment
name|sce
init|=
operator|(
name|StudentClassEnrollment
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|sce
operator|.
name|getClazz
argument_list|()
operator|.
name|getStudentEnrollments
argument_list|()
operator|.
name|remove
argument_list|(
name|sce
argument_list|)
expr_stmt|;
comment|// sce.getClazz().setEnrollment(sce.getClazz().getEnrollment()-1);
name|hibSession
operator|.
name|delete
argument_list|(
name|sce
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|s
operator|.
name|getWaitlists
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|WaitList
name|wl
init|=
operator|(
name|WaitList
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|wl
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|s
operator|.
name|getCourseDemands
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseDemand
name|cd
init|=
operator|(
name|CourseDemand
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|!=
literal|null
condition|)
name|hibSession
operator|.
name|delete
argument_list|(
name|cd
operator|.
name|getFreeTime
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|e
init|=
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Request
name|request
init|=
operator|(
name|Request
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
name|CourseDemand
name|cd
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|instanceof
name|FreeTimeRequest
condition|)
block|{
name|FreeTimeRequest
name|freeTime
init|=
operator|(
name|FreeTimeRequest
operator|)
name|request
decl_stmt|;
name|FreeTime
name|ft
init|=
operator|new
name|FreeTime
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setCategory
argument_list|(
operator|new
name|Integer
argument_list|(
name|freeTime
operator|.
name|getTime
argument_list|()
operator|.
name|getBreakTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setDayCode
argument_list|(
operator|new
name|Integer
argument_list|(
name|freeTime
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setLength
argument_list|(
operator|new
name|Integer
argument_list|(
name|freeTime
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setName
argument_list|(
name|freeTime
operator|.
name|getTime
argument_list|()
operator|.
name|getLongName
argument_list|()
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setStartSlot
argument_list|(
operator|new
name|Integer
argument_list|(
name|freeTime
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|ft
argument_list|)
expr_stmt|;
name|cd
operator|=
operator|new
name|CourseDemand
argument_list|()
expr_stmt|;
name|cd
operator|.
name|setStudent
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setPriority
argument_list|(
operator|new
name|Integer
argument_list|(
name|request
operator|.
name|getPriority
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setAlternative
argument_list|(
operator|new
name|Boolean
argument_list|(
name|request
operator|.
name|isAlternative
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setWaitlist
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setTimestamp
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setFreeTime
argument_list|(
name|ft
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|request
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|courseRequest
init|=
operator|(
name|CourseRequest
operator|)
name|request
decl_stmt|;
name|cd
operator|=
operator|new
name|CourseDemand
argument_list|()
expr_stmt|;
name|cd
operator|.
name|setStudent
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setPriority
argument_list|(
operator|new
name|Integer
argument_list|(
name|request
operator|.
name|getPriority
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setAlternative
argument_list|(
operator|new
name|Boolean
argument_list|(
name|request
operator|.
name|isAlternative
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setWaitlist
argument_list|(
operator|new
name|Boolean
argument_list|(
name|courseRequest
operator|.
name|isWaitlist
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setTimestamp
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|int
name|ord
init|=
literal|0
decl_stmt|;
name|Enrollment
name|enrollment
init|=
operator|(
name|Enrollment
operator|)
name|request
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|crq
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|f
init|=
name|courseRequest
operator|.
name|getCourses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|f
operator|.
name|hasNext
argument_list|()
condition|;
name|ord
operator|++
control|)
block|{
name|Course
name|course
init|=
operator|(
name|Course
operator|)
name|f
operator|.
name|next
argument_list|()
decl_stmt|;
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|cr
init|=
operator|new
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
argument_list|()
decl_stmt|;
name|cr
operator|.
name|setOrder
argument_list|(
operator|new
name|Integer
argument_list|(
name|ord
argument_list|)
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setAllowOverlap
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setCourseDemand
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setCourseOffering
argument_list|(
operator|new
name|CourseOfferingDAO
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setCredit
argument_list|(
operator|new
name|Integer
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|cr
argument_list|)
expr_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
operator|&&
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|equals
argument_list|(
name|enrollment
operator|.
name|getOffering
argument_list|()
argument_list|)
condition|)
name|crq
operator|=
name|cr
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|courseRequest
operator|.
name|getSelectedChoices
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Choice
name|choice
init|=
operator|(
name|Choice
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|choice
operator|.
name|getOffering
argument_list|()
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getOffering
argument_list|()
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|Iterator
name|j
init|=
name|choice
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
operator|(
name|Section
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|ClassWaitList
name|cwl
init|=
operator|new
name|ClassWaitList
argument_list|()
decl_stmt|;
name|cwl
operator|.
name|setClazz
argument_list|(
operator|new
name|Class_DAO
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cwl
operator|.
name|setCourseRequest
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|cwl
operator|.
name|setStudent
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|cwl
operator|.
name|setTimestamp
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|cwl
operator|.
name|setType
argument_list|(
name|ClassWaitList
operator|.
name|TYPE_SELECTION
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|cwl
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|courseRequest
operator|.
name|getWaitlistedChoices
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Choice
name|choice
init|=
operator|(
name|Choice
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|choice
operator|.
name|getOffering
argument_list|()
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getOffering
argument_list|()
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|Iterator
name|j
init|=
name|choice
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
operator|(
name|Section
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|ClassWaitList
name|cwl
init|=
operator|new
name|ClassWaitList
argument_list|()
decl_stmt|;
name|cwl
operator|.
name|setClazz
argument_list|(
operator|new
name|Class_DAO
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cwl
operator|.
name|setCourseRequest
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|cwl
operator|.
name|setStudent
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|cwl
operator|.
name|setTimestamp
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|cwl
operator|.
name|setType
argument_list|(
name|ClassWaitList
operator|.
name|TYPE_WAITLIST
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|cwl
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|enrollment
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|courseRequest
operator|.
name|isWaitlist
argument_list|()
operator|&&
name|student
operator|.
name|canAssign
argument_list|(
name|courseRequest
argument_list|)
condition|)
block|{
name|WaitList
name|wl
init|=
operator|new
name|WaitList
argument_list|()
decl_stmt|;
name|wl
operator|.
name|setStudent
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|wl
operator|.
name|setCourseOffering
argument_list|(
operator|new
name|CourseOfferingDAO
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
operator|(
operator|(
name|Course
operator|)
name|courseRequest
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|wl
operator|.
name|setTimestamp
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|wl
operator|.
name|setType
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|wl
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
operator|(
name|Section
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|StudentClassEnrollment
name|sce
init|=
operator|new
name|StudentClassEnrollment
argument_list|()
decl_stmt|;
name|sce
operator|.
name|setStudent
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|Class_
name|clazz
init|=
operator|new
name|Class_DAO
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|sce
operator|.
name|setClazz
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|s
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|add
argument_list|(
name|sce
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getStudentEnrollments
argument_list|()
operator|.
name|add
argument_list|(
name|sce
argument_list|)
expr_stmt|;
name|sce
operator|.
name|setCourseRequest
argument_list|(
name|crq
argument_list|)
expr_stmt|;
name|sce
operator|.
name|setCourseOffering
argument_list|(
name|crq
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
expr_stmt|;
name|sce
operator|.
name|setTimestamp
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setEnrollment
argument_list|(
name|clazz
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|?
literal|1
else|:
name|clazz
operator|.
name|getEnrollment
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|sce
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|cd
operator|!=
literal|null
operator|&&
name|messages
operator|!=
literal|null
condition|)
block|{
name|int
name|ord
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|f
init|=
name|messages
operator|.
name|iterator
argument_list|()
init|;
name|f
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StudentSctBBTest
operator|.
name|Message
name|message
init|=
operator|(
name|StudentSctBBTest
operator|.
name|Message
operator|)
name|f
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|equals
argument_list|(
name|message
operator|.
name|getRequest
argument_list|()
argument_list|)
condition|)
block|{
name|StudentEnrollmentMessage
name|m
init|=
operator|new
name|StudentEnrollmentMessage
argument_list|()
decl_stmt|;
name|m
operator|.
name|setCourseDemand
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|m
operator|.
name|setLevel
argument_list|(
operator|new
name|Integer
argument_list|(
name|message
operator|.
name|getLevel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|setType
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|setTimestamp
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setMessage
argument_list|(
name|message
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setOrder
argument_list|(
operator|new
name|Integer
argument_list|(
name|ord
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|StudentSectioningQueue
operator|.
name|studentChanged
argument_list|(
name|hibSession
argument_list|,
literal|null
argument_list|,
name|s
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|hibSession
operator|.
name|refresh
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|testSectioning
parameter_list|(
name|Element
name|studentElement
parameter_list|,
name|Element
name|response
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Request:"
argument_list|)
expr_stmt|;
operator|new
name|XMLWriter
argument_list|(
name|System
operator|.
name|out
argument_list|,
name|OutputFormat
operator|.
name|createPrettyPrint
argument_list|()
argument_list|)
operator|.
name|write
argument_list|(
name|studentElement
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|Student
name|student
init|=
operator|new
name|Student
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|studentElement
operator|.
name|attributeValue
argument_list|(
literal|"key"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  loading student "
operator|+
name|student
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|courseNumbersMustBeUnique
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.courseNumber.unique"
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
name|StudentSctBBTest
name|sbt
init|=
literal|null
decl_stmt|;
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|Vector
name|messages
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
if|if
condition|(
name|studentElement
operator|.
name|element
argument_list|(
literal|"retrieveCourseRequests"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|loadStudent
argument_list|(
name|session
argument_list|,
name|student
argument_list|,
name|messages
argument_list|)
expr_stmt|;
name|sbt
operator|=
operator|new
name|StudentSctBBTest
argument_list|(
name|student
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|e
init|=
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Request
name|request
init|=
operator|(
name|Request
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|request
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|request
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|e
init|=
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Request
name|request
init|=
operator|(
name|Request
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|instanceof
name|FreeTimeRequest
condition|)
block|{
name|Enrollment
name|enrollment
init|=
operator|(
name|Enrollment
operator|)
name|request
operator|.
name|values
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|sbt
operator|.
name|conflictValues
argument_list|(
name|enrollment
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
name|request
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|enrollment
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Element
name|courseRequestsElement
init|=
name|studentElement
operator|.
name|element
argument_list|(
literal|"updateCourseRequests"
argument_list|)
decl_stmt|;
if|if
condition|(
name|courseRequestsElement
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"  No course requests for student "
operator|+
name|student
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|reqId
init|=
literal|0
decl_stmt|;
name|int
name|priority
init|=
literal|0
decl_stmt|;
name|commit
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|courseRequestsElement
operator|.
name|attributeValue
argument_list|(
literal|"commit"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|courseRequestsElement
operator|.
name|elementIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|requestElement
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|alternative
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"alternative"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"freeTime"
operator|.
name|equals
argument_list|(
name|requestElement
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|days
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"days"
argument_list|)
decl_stmt|;
name|String
name|startTime
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"startTime"
argument_list|)
decl_stmt|;
name|String
name|length
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"length"
argument_list|)
decl_stmt|;
name|String
name|endTime
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"endTime"
argument_list|)
decl_stmt|;
name|FreeTimeRequest
name|ftRequest
init|=
operator|new
name|FreeTimeRequest
argument_list|(
name|reqId
operator|++
argument_list|,
name|priority
operator|++
argument_list|,
name|alternative
argument_list|,
name|student
argument_list|,
name|makeTime
argument_list|(
name|session
operator|.
name|getDefaultDatePattern
argument_list|()
argument_list|,
name|days
argument_list|,
name|startTime
argument_list|,
name|endTime
argument_list|,
name|length
argument_list|)
argument_list|)
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"    added "
operator|+
name|ftRequest
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"courseOffering"
operator|.
name|equals
argument_list|(
name|requestElement
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|subjectArea
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"subjectArea"
argument_list|)
decl_stmt|;
name|String
name|courseNumber
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"courseNumber"
argument_list|)
decl_stmt|;
name|boolean
name|waitlist
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"waitlist"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
decl_stmt|;
name|Long
name|timeStamp
init|=
operator|(
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"timeStamp"
argument_list|)
operator|==
literal|null
condition|?
literal|null
else|:
name|Long
operator|.
name|parseLong
argument_list|(
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"timeStamp"
argument_list|)
argument_list|)
operator|)
decl_stmt|;
name|CourseOffering
name|co
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|courseNumbersMustBeUnique
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
name|co
operator|=
name|CourseOffering
operator|.
name|findBySessionSubjAreaAbbvCourseNbr
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|subjectArea
argument_list|,
name|courseNumber
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|title
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"title"
argument_list|)
decl_stmt|;
name|co
operator|=
name|CourseOffering
operator|.
name|findBySessionSubjAreaAbbvCourseNbrTitle
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|subjectArea
argument_list|,
name|courseNumber
argument_list|,
name|title
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|co
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"    Course "
operator|+
name|subjectArea
operator|+
literal|" "
operator|+
name|courseNumber
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Vector
name|courses
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|courses
operator|.
name|add
argument_list|(
name|loadCourse
argument_list|(
name|co
argument_list|,
name|student
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|requestElement
operator|.
name|elementIterator
argument_list|(
literal|"alternative"
argument_list|)
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|altElement
init|=
operator|(
name|Element
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|altSubjectArea
init|=
name|altElement
operator|.
name|attributeValue
argument_list|(
literal|"subjectArea"
argument_list|)
decl_stmt|;
name|String
name|altCourseNumber
init|=
name|altElement
operator|.
name|attributeValue
argument_list|(
literal|"courseNumber"
argument_list|)
decl_stmt|;
name|CourseOffering
name|aco
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|courseNumbersMustBeUnique
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
name|aco
operator|=
name|CourseOffering
operator|.
name|findBySessionSubjAreaAbbvCourseNbr
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|altSubjectArea
argument_list|,
name|altCourseNumber
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|altTitle
init|=
name|altElement
operator|.
name|attributeValue
argument_list|(
literal|"title"
argument_list|)
decl_stmt|;
name|aco
operator|=
name|CourseOffering
operator|.
name|findBySessionSubjAreaAbbvCourseNbrTitle
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|altSubjectArea
argument_list|,
name|altCourseNumber
argument_list|,
name|altTitle
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|aco
operator|!=
literal|null
condition|)
name|courses
operator|.
name|add
argument_list|(
name|loadCourse
argument_list|(
name|aco
argument_list|,
name|student
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CourseRequest
name|cRequest
init|=
operator|new
name|CourseRequest
argument_list|(
name|reqId
operator|++
argument_list|,
name|priority
operator|++
argument_list|,
name|alternative
argument_list|,
name|student
argument_list|,
name|courses
argument_list|,
name|waitlist
argument_list|,
name|timeStamp
argument_list|)
decl_stmt|;
name|cRequest
operator|.
name|values
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"    added "
operator|+
name|cRequest
argument_list|)
expr_stmt|;
block|}
block|}
name|Element
name|requestScheduleElement
init|=
name|studentElement
operator|.
name|element
argument_list|(
literal|"requestSchedule"
argument_list|)
decl_stmt|;
if|if
condition|(
name|requestScheduleElement
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|requestScheduleElement
operator|.
name|elementIterator
argument_list|(
literal|"courseOffering"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|courseOfferingElement
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|subjectArea
init|=
name|courseOfferingElement
operator|.
name|attributeValue
argument_list|(
literal|"subjectArea"
argument_list|)
decl_stmt|;
name|String
name|courseNumber
init|=
name|courseOfferingElement
operator|.
name|attributeValue
argument_list|(
literal|"courseNumber"
argument_list|)
decl_stmt|;
name|CourseOffering
name|co
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|courseNumbersMustBeUnique
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
name|co
operator|=
name|CourseOffering
operator|.
name|findBySessionSubjAreaAbbvCourseNbr
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|subjectArea
argument_list|,
name|courseNumber
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|title
init|=
name|courseOfferingElement
operator|.
name|attributeValue
argument_list|(
literal|"title"
argument_list|)
decl_stmt|;
name|co
operator|=
name|CourseOffering
operator|.
name|findBySessionSubjAreaAbbvCourseNbrTitle
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|subjectArea
argument_list|,
name|courseNumber
argument_list|,
name|title
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|co
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"    Course "
operator|+
name|subjectArea
operator|+
literal|" "
operator|+
name|courseNumber
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|Iterator
name|e
init|=
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Request
name|request
init|=
operator|(
name|Request
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|courseRequest
init|=
operator|(
name|CourseRequest
operator|)
name|request
decl_stmt|;
name|Course
name|course
init|=
name|courseRequest
operator|.
name|getCourse
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
decl_stmt|;
name|Config
name|config
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
name|Set
name|assignedSections
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|int
name|nrClasses
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|courseOfferingElement
operator|.
name|elementIterator
argument_list|(
literal|"class"
argument_list|)
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
name|nrClasses
operator|++
control|)
block|{
name|Element
name|classEl
init|=
operator|(
name|Element
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|assignmentId
init|=
name|classEl
operator|.
name|attributeValue
argument_list|(
literal|"assignmentId"
argument_list|)
decl_stmt|;
name|Section
name|section
init|=
operator|(
name|assignmentId
operator|==
literal|null
condition|?
literal|null
else|:
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getSection
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|assignmentId
argument_list|)
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
name|assignedSections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|==
literal|null
condition|)
name|config
operator|=
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|k
init|=
name|classEl
operator|.
name|elementIterator
argument_list|(
literal|"choice"
argument_list|)
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|choiceEl
init|=
operator|(
name|Element
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
name|Choice
name|choice
init|=
operator|new
name|Choice
argument_list|(
name|course
operator|.
name|getOffering
argument_list|()
argument_list|,
name|choiceEl
operator|.
name|attributeValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"select"
operator|.
name|equals
argument_list|(
name|choiceEl
operator|.
name|attributeValue
argument_list|(
literal|"selection"
argument_list|)
argument_list|)
condition|)
block|{
name|courseRequest
operator|.
name|getSelectedChoices
argument_list|()
operator|.
name|add
argument_list|(
name|choice
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"      add selection "
operator|+
name|choice
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|courseRequest
operator|.
name|getWaitlistedChoices
argument_list|()
operator|.
name|add
argument_list|(
name|choice
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"      add waitlist "
operator|+
name|choice
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|nrClasses
operator|==
name|assignedSections
operator|.
name|size
argument_list|()
condition|)
block|{
name|courseRequest
operator|.
name|setInitialAssignment
argument_list|(
operator|new
name|Enrollment
argument_list|(
name|request
argument_list|,
literal|0
argument_list|,
name|config
argument_list|,
name|assignedSections
argument_list|)
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"    initial assignment "
operator|+
name|courseRequest
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
else|else
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"  No schedule requests for student "
operator|+
name|student
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"  sectioning student "
operator|+
name|student
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|sbt
operator|=
operator|new
name|StudentSctBBTest
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|Model
name|model
init|=
name|sbt
operator|.
name|getSolution
argument_list|()
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|messages
operator|.
name|addAll
argument_list|(
name|sbt
operator|.
name|getMessages
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  info: "
operator|+
name|model
operator|.
name|getInfo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|commit
condition|)
name|saveStudent
argument_list|(
name|session
argument_list|,
name|student
argument_list|,
name|messages
argument_list|)
expr_stmt|;
block|}
name|Element
name|studentResponseElement
init|=
name|response
operator|.
name|addElement
argument_list|(
literal|"student"
argument_list|)
decl_stmt|;
name|studentResponseElement
operator|.
name|addAttribute
argument_list|(
literal|"key"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Element
name|ackResponseElement
init|=
name|studentResponseElement
operator|.
name|addElement
argument_list|(
literal|"acknowledgement"
argument_list|)
decl_stmt|;
name|ackResponseElement
operator|.
name|addAttribute
argument_list|(
literal|"result"
argument_list|,
literal|"ok"
argument_list|)
expr_stmt|;
name|Element
name|courseReqResponseElement
init|=
name|studentResponseElement
operator|.
name|addElement
argument_list|(
literal|"courseRequests"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|e
init|=
name|messages
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StudentSctBBTest
operator|.
name|Message
name|message
init|=
operator|(
name|StudentSctBBTest
operator|.
name|Message
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
name|ackResponseElement
operator|.
name|addElement
argument_list|(
literal|"message"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|message
operator|.
name|getLevelString
argument_list|()
argument_list|)
operator|.
name|setText
argument_list|(
name|message
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|e
init|=
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Request
name|request
init|=
operator|(
name|Request
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
name|Element
name|reqElement
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|instanceof
name|FreeTimeRequest
condition|)
block|{
name|FreeTimeRequest
name|ftRequest
init|=
operator|(
name|FreeTimeRequest
operator|)
name|request
decl_stmt|;
name|reqElement
operator|=
name|courseReqResponseElement
operator|.
name|addElement
argument_list|(
literal|"freeTime"
argument_list|)
expr_stmt|;
name|reqElement
operator|.
name|addAttribute
argument_list|(
literal|"days"
argument_list|,
name|dayCode2days
argument_list|(
name|ftRequest
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reqElement
operator|.
name|addAttribute
argument_list|(
literal|"startTime"
argument_list|,
name|startSlot2startTime
argument_list|(
name|ftRequest
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reqElement
operator|.
name|addAttribute
argument_list|(
literal|"endTime"
argument_list|,
name|timeLocation2endTime
argument_list|(
name|ftRequest
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reqElement
operator|.
name|addAttribute
argument_list|(
literal|"length"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|ftRequest
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  added "
operator|+
name|ftRequest
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CourseRequest
name|courseRequest
init|=
operator|(
name|CourseRequest
operator|)
name|request
decl_stmt|;
name|reqElement
operator|=
name|courseReqResponseElement
operator|.
name|addElement
argument_list|(
literal|"courseOffering"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|f
init|=
name|courseRequest
operator|.
name|getCourses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|f
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Course
name|course
init|=
operator|(
name|Course
operator|)
name|f
operator|.
name|next
argument_list|()
decl_stmt|;
name|Element
name|element
init|=
operator|(
name|reqElement
operator|.
name|attribute
argument_list|(
literal|"subjectArea"
argument_list|)
operator|==
literal|null
condition|?
name|reqElement
else|:
name|reqElement
operator|.
name|addElement
argument_list|(
literal|"alternative"
argument_list|)
operator|)
decl_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"subjectArea"
argument_list|,
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"courseNumber"
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
expr_stmt|;
name|CourseOffering
name|co
init|=
name|CourseOffering
operator|.
name|findByUniqueId
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"title"
argument_list|,
operator|(
name|co
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
condition|?
name|co
operator|.
name|getTitle
argument_list|()
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
name|reqElement
operator|.
name|addAttribute
argument_list|(
literal|"waitlist"
argument_list|,
name|courseRequest
operator|.
name|isWaitlist
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
if|if
condition|(
name|courseRequest
operator|.
name|getTimeStamp
argument_list|()
operator|!=
literal|null
condition|)
name|reqElement
operator|.
name|addAttribute
argument_list|(
literal|"timeStamp"
argument_list|,
name|courseRequest
operator|.
name|getTimeStamp
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  added "
operator|+
name|courseRequest
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|isAlternative
argument_list|()
condition|)
name|reqElement
operator|.
name|addAttribute
argument_list|(
literal|"alternative"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|Comparator
name|choiceComparator
init|=
operator|new
name|Comparator
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|Choice
name|c1
init|=
operator|(
name|Choice
operator|)
name|o1
decl_stmt|;
name|Choice
name|c2
init|=
operator|(
name|Choice
operator|)
name|o2
decl_stmt|;
if|if
condition|(
name|c1
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|c2
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
return|return
operator|-
literal|1
return|;
block|}
if|else if
condition|(
name|c2
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|c1
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|cmp
init|=
operator|-
name|Double
operator|.
name|compare
argument_list|(
name|c1
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|,
name|c2
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|Double
operator|.
name|compare
argument_list|(
name|c1
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|c2
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|c1
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
if|if
condition|(
name|c1
operator|.
name|getInstructorNames
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|c2
operator|.
name|getInstructorNames
argument_list|()
operator|!=
literal|null
condition|)
return|return
operator|-
literal|1
return|;
block|}
if|else if
condition|(
name|c2
operator|.
name|getInstructorNames
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|c1
operator|.
name|getInstructorNames
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|cmp
init|=
name|c1
operator|.
name|getInstructorNames
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getInstructorNames
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
return|return
name|c1
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|boolean
name|generateRandomAvailability
init|=
operator|(
name|student
operator|.
name|getId
argument_list|()
operator|<
literal|0
operator|)
decl_stmt|;
name|Element
name|scheduleResponseElement
init|=
name|studentResponseElement
operator|.
name|addElement
argument_list|(
literal|"schedule"
argument_list|)
decl_stmt|;
name|scheduleResponseElement
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
operator|(
name|commit
condition|?
literal|"actual"
else|:
literal|"proposed"
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|e
init|=
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Request
name|request
init|=
operator|(
name|Request
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getAssignment
argument_list|()
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"    request "
operator|+
name|request
operator|+
literal|" has no assignment"
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|instanceof
name|CourseRequest
operator|&&
operator|(
operator|(
name|CourseRequest
operator|)
name|request
operator|)
operator|.
name|isWaitlist
argument_list|()
operator|&&
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|canAssign
argument_list|(
name|request
argument_list|)
condition|)
block|{
name|Element
name|courseOfferingElement
init|=
name|scheduleResponseElement
operator|.
name|addElement
argument_list|(
literal|"courseOffering"
argument_list|)
decl_stmt|;
name|Course
name|course
init|=
operator|(
name|Course
operator|)
operator|(
operator|(
name|CourseRequest
operator|)
name|request
operator|)
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|courseOfferingElement
operator|.
name|addAttribute
argument_list|(
literal|"subjectArea"
argument_list|,
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
name|courseOfferingElement
operator|.
name|addAttribute
argument_list|(
literal|"courseNumber"
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
expr_stmt|;
name|CourseOffering
name|co
init|=
name|CourseOffering
operator|.
name|findByUniqueId
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|courseOfferingElement
operator|.
name|addAttribute
argument_list|(
literal|"title"
argument_list|,
name|co
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|courseOfferingElement
operator|.
name|addAttribute
argument_list|(
literal|"waitlist"
argument_list|,
operator|(
operator|(
name|CourseRequest
operator|)
name|request
operator|)
operator|.
name|isWaitlist
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|CourseRequest
operator|)
name|request
operator|)
operator|.
name|getTimeStamp
argument_list|()
operator|!=
literal|null
condition|)
name|courseOfferingElement
operator|.
name|addAttribute
argument_list|(
literal|"timeStamp"
argument_list|,
operator|(
operator|(
name|CourseRequest
operator|)
name|request
operator|)
operator|.
name|getTimeStamp
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
if|if
condition|(
name|request
operator|instanceof
name|FreeTimeRequest
condition|)
block|{
name|FreeTimeRequest
name|ftRequest
init|=
operator|(
name|FreeTimeRequest
operator|)
name|request
decl_stmt|;
name|Element
name|ftElement
init|=
name|scheduleResponseElement
operator|.
name|addElement
argument_list|(
literal|"freeTime"
argument_list|)
decl_stmt|;
name|ftElement
operator|.
name|addAttribute
argument_list|(
literal|"days"
argument_list|,
name|dayCode2days
argument_list|(
name|ftRequest
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ftElement
operator|.
name|addAttribute
argument_list|(
literal|"startTime"
argument_list|,
name|startSlot2startTime
argument_list|(
name|ftRequest
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ftElement
operator|.
name|addAttribute
argument_list|(
literal|"endTime"
argument_list|,
name|timeLocation2endTime
argument_list|(
name|ftRequest
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ftElement
operator|.
name|addAttribute
argument_list|(
literal|"length"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|ftRequest
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ftRequest
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
name|ftElement
operator|.
name|addAttribute
argument_list|(
literal|"time"
argument_list|,
name|ftRequest
operator|.
name|getTime
argument_list|()
operator|.
name|getDayHeader
argument_list|()
operator|+
literal|" "
operator|+
name|ftRequest
operator|.
name|getTime
argument_list|()
operator|.
name|getStartTimeHeader
argument_list|()
operator|+
literal|" - "
operator|+
name|ftRequest
operator|.
name|getTime
argument_list|()
operator|.
name|getEndTimeHeader
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|ftElement
operator|.
name|addAttribute
argument_list|(
literal|"time"
argument_list|,
literal|"Arr Hrs"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CourseRequest
name|courseRequest
init|=
operator|(
name|CourseRequest
operator|)
name|request
decl_stmt|;
name|Element
name|courseOfferingElement
init|=
name|scheduleResponseElement
operator|.
name|addElement
argument_list|(
literal|"courseOffering"
argument_list|)
decl_stmt|;
name|Enrollment
name|enrollment
init|=
operator|(
name|Enrollment
operator|)
name|request
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
name|Set
name|unusedInstructionalTypes
init|=
literal|null
decl_stmt|;
name|Offering
name|offering
init|=
literal|null
decl_stmt|;
name|HashSet
name|availableChoices
init|=
literal|null
decl_stmt|;
name|Vector
name|assignments
init|=
operator|new
name|Vector
argument_list|(
name|enrollment
operator|.
name|getAssignments
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|assignments
argument_list|,
operator|new
name|Comparator
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|Section
name|s1
init|=
operator|(
name|Section
operator|)
name|o1
decl_stmt|;
name|Section
name|s2
init|=
operator|(
name|Section
operator|)
name|o2
decl_stmt|;
return|return
name|s1
operator|.
name|getSubpart
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getSubpart
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|assignments
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
operator|(
name|Section
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|courseOfferingElement
operator|.
name|attribute
argument_list|(
literal|"subjectArea"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|Course
name|course
init|=
name|enrollment
operator|.
name|getCourse
argument_list|()
decl_stmt|;
name|courseOfferingElement
operator|.
name|addAttribute
argument_list|(
literal|"subjectArea"
argument_list|,
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
name|courseOfferingElement
operator|.
name|addAttribute
argument_list|(
literal|"courseNumber"
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
expr_stmt|;
name|CourseOffering
name|co
init|=
name|CourseOffering
operator|.
name|findByUniqueId
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|courseOfferingElement
operator|.
name|addAttribute
argument_list|(
literal|"title"
argument_list|,
name|co
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
block|{
name|offering
operator|=
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getOffering
argument_list|()
expr_stmt|;
if|if
condition|(
name|generateRandomAvailability
condition|)
block|{
name|availableChoices
operator|=
name|generateAvailableChoices
argument_list|(
name|offering
argument_list|,
operator|new
name|Random
argument_list|(
literal|13031978l
argument_list|)
argument_list|,
literal|0.75
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|availableChoices
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|courseRequest
operator|.
name|getAvaiableEnrollmentsSkipSameTime
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Enrollment
name|enr
init|=
operator|(
name|Enrollment
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|k
init|=
name|enr
operator|.
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|s
init|=
operator|(
name|Section
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|getLimit
argument_list|()
operator|>
literal|0
operator|&&
name|s
operator|.
name|getPenalty
argument_list|()
operator|<=
name|sAvailableThreshold
condition|)
name|availableChoices
operator|.
name|add
argument_list|(
name|s
operator|.
name|getChoice
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|unusedInstructionalTypes
operator|==
literal|null
condition|)
name|unusedInstructionalTypes
operator|=
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|getInstructionalTypes
argument_list|()
expr_stmt|;
name|unusedInstructionalTypes
operator|.
name|remove
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|classElement
init|=
name|courseOfferingElement
operator|.
name|addElement
argument_list|(
literal|"class"
argument_list|)
decl_stmt|;
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
expr_stmt|;
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"assignmentId"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"parent"
argument_list|,
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getParent
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
expr_stmt|;
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"days"
argument_list|,
name|dayCode2days
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"startTime"
argument_list|,
name|startSlot2startTime
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"endTime"
argument_list|,
name|timeLocation2endTime
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//classElement.addAttribute("length", String.valueOf(Constants.SLOT_LENGTH_MIN*section.getTime().getLength()));
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
operator|!=
literal|null
condition|)
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"date"
argument_list|,
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"time"
argument_list|,
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDayHeader
argument_list|()
operator|+
literal|" "
operator|+
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getStartTimeHeader
argument_list|()
operator|+
literal|" - "
operator|+
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getEndTimeHeader
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"time"
argument_list|,
literal|"Arr Hrs"
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getNrRooms
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|location
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
name|f
init|=
name|section
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|f
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomLocation
name|rl
init|=
operator|(
name|RoomLocation
operator|)
name|f
operator|.
name|next
argument_list|()
decl_stmt|;
name|location
operator|+=
name|rl
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|hasNext
argument_list|()
condition|)
name|location
operator|+=
literal|","
expr_stmt|;
block|}
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"location"
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|!=
literal|null
condition|)
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"instructor"
argument_list|,
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
argument_list|)
expr_stmt|;
name|Vector
name|choices
init|=
operator|new
name|Vector
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|getChoices
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|choices
argument_list|,
name|choiceComparator
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|f
init|=
name|choices
operator|.
name|iterator
argument_list|()
init|;
name|f
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Choice
name|choice
init|=
operator|(
name|Choice
operator|)
name|f
operator|.
name|next
argument_list|()
decl_stmt|;
name|Element
name|choiceEl
init|=
name|classElement
operator|.
name|addElement
argument_list|(
literal|"choice"
argument_list|)
decl_stmt|;
name|choiceEl
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|choice
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|choiceEl
operator|.
name|addAttribute
argument_list|(
literal|"available"
argument_list|,
operator|(
name|availableChoices
operator|==
literal|null
condition|?
literal|"true"
else|:
name|availableChoices
operator|.
name|contains
argument_list|(
name|choice
argument_list|)
condition|?
literal|"true"
else|:
literal|"false"
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|choice
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|choiceEl
operator|.
name|addAttribute
argument_list|(
literal|"days"
argument_list|,
name|dayCode2days
argument_list|(
name|choice
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|choiceEl
operator|.
name|addAttribute
argument_list|(
literal|"startTime"
argument_list|,
name|startSlot2startTime
argument_list|(
name|choice
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|choiceEl
operator|.
name|addAttribute
argument_list|(
literal|"endTime"
argument_list|,
name|timeLocation2endTime
argument_list|(
name|choice
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|choice
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
operator|!=
literal|null
condition|)
name|choiceEl
operator|.
name|addAttribute
argument_list|(
literal|"date"
argument_list|,
name|choice
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
name|choiceEl
operator|.
name|addAttribute
argument_list|(
literal|"time"
argument_list|,
name|choice
operator|.
name|getTime
argument_list|()
operator|.
name|getDayHeader
argument_list|()
operator|+
literal|" "
operator|+
name|choice
operator|.
name|getTime
argument_list|()
operator|.
name|getStartTimeHeader
argument_list|()
operator|+
literal|" - "
operator|+
name|choice
operator|.
name|getTime
argument_list|()
operator|.
name|getEndTimeHeader
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
name|choiceEl
operator|.
name|addAttribute
argument_list|(
literal|"time"
argument_list|,
literal|"Arr Hrs"
argument_list|)
expr_stmt|;
if|if
condition|(
name|choice
operator|.
name|equals
argument_list|(
name|section
operator|.
name|getChoice
argument_list|()
argument_list|)
condition|)
name|choiceEl
operator|.
name|addAttribute
argument_list|(
literal|"available"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
if|if
condition|(
name|courseRequest
operator|.
name|getSelectedChoices
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|choice
operator|.
name|equals
argument_list|(
name|section
operator|.
name|getChoice
argument_list|()
argument_list|)
condition|)
block|{
name|choiceEl
operator|.
name|addAttribute
argument_list|(
literal|"selection"
argument_list|,
literal|"select"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|courseRequest
operator|.
name|getSelectedChoices
argument_list|()
operator|.
name|contains
argument_list|(
name|choice
argument_list|)
condition|)
block|{
name|choiceEl
operator|.
name|addAttribute
argument_list|(
literal|"selection"
argument_list|,
literal|"select"
argument_list|)
expr_stmt|;
if|if
condition|(
name|generateRandomAvailability
condition|)
name|choiceEl
operator|.
name|addAttribute
argument_list|(
literal|"available"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|courseRequest
operator|.
name|getWaitlistedChoices
argument_list|()
operator|.
name|contains
argument_list|(
name|choice
argument_list|)
condition|)
block|{
name|choiceEl
operator|.
name|addAttribute
argument_list|(
literal|"selection"
argument_list|,
literal|"wait"
argument_list|)
expr_stmt|;
if|if
condition|(
name|generateRandomAvailability
condition|)
name|choiceEl
operator|.
name|addAttribute
argument_list|(
literal|"available"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|choice
operator|.
name|getInstructorNames
argument_list|()
operator|!=
literal|null
condition|)
name|choiceEl
operator|.
name|addAttribute
argument_list|(
literal|"instructor"
argument_list|,
name|choice
operator|.
name|getInstructorNames
argument_list|()
argument_list|)
expr_stmt|;
name|exportDependencies
argument_list|(
name|choiceEl
argument_list|,
name|choice
argument_list|,
name|choice
operator|.
name|getParentSections
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|unusedInstructionalTypes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|unusedInstructionalTypes
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|unusedInstructionalType
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Element
name|classElement
init|=
name|courseOfferingElement
operator|.
name|addElement
argument_list|(
literal|"class"
argument_list|)
decl_stmt|;
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|unusedInstructionalType
argument_list|)
expr_stmt|;
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
operator|(
operator|(
name|Subpart
operator|)
name|offering
operator|.
name|getSubparts
argument_list|(
name|unusedInstructionalType
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Vector
name|choices
init|=
operator|new
name|Vector
argument_list|(
name|offering
operator|.
name|getChoices
argument_list|(
name|unusedInstructionalType
argument_list|)
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|choices
argument_list|,
name|choiceComparator
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|f
init|=
name|choices
operator|.
name|iterator
argument_list|()
init|;
name|f
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Choice
name|choice
init|=
operator|(
name|Choice
operator|)
name|f
operator|.
name|next
argument_list|()
decl_stmt|;
name|Element
name|choiceEl
init|=
name|classElement
operator|.
name|addElement
argument_list|(
literal|"choice"
argument_list|)
decl_stmt|;
name|choiceEl
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|choice
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|choiceEl
operator|.
name|addAttribute
argument_list|(
literal|"available"
argument_list|,
operator|(
name|availableChoices
operator|==
literal|null
condition|?
literal|"true"
else|:
name|availableChoices
operator|.
name|contains
argument_list|(
name|choice
argument_list|)
condition|?
literal|"true"
else|:
literal|"false"
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|choice
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|choiceEl
operator|.
name|addAttribute
argument_list|(
literal|"days"
argument_list|,
name|dayCode2days
argument_list|(
name|choice
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|choiceEl
operator|.
name|addAttribute
argument_list|(
literal|"startTime"
argument_list|,
name|startSlot2startTime
argument_list|(
name|choice
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|choiceEl
operator|.
name|addAttribute
argument_list|(
literal|"endTime"
argument_list|,
name|timeLocation2endTime
argument_list|(
name|choice
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|choice
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
operator|!=
literal|null
condition|)
name|choiceEl
operator|.
name|addAttribute
argument_list|(
literal|"date"
argument_list|,
name|choice
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
name|choiceEl
operator|.
name|addAttribute
argument_list|(
literal|"time"
argument_list|,
name|choice
operator|.
name|getTime
argument_list|()
operator|.
name|getDayHeader
argument_list|()
operator|+
literal|" "
operator|+
name|choice
operator|.
name|getTime
argument_list|()
operator|.
name|getStartTimeHeader
argument_list|()
operator|+
literal|" - "
operator|+
name|choice
operator|.
name|getTime
argument_list|()
operator|.
name|getEndTimeHeader
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
name|choiceEl
operator|.
name|addAttribute
argument_list|(
literal|"time"
argument_list|,
literal|"Arr Hrs"
argument_list|)
expr_stmt|;
if|if
condition|(
name|courseRequest
operator|.
name|getWaitlistedChoices
argument_list|()
operator|.
name|contains
argument_list|(
name|choice
argument_list|)
condition|)
name|choiceEl
operator|.
name|addAttribute
argument_list|(
literal|"selection"
argument_list|,
literal|"wait"
argument_list|)
expr_stmt|;
if|if
condition|(
name|choice
operator|.
name|getInstructorNames
argument_list|()
operator|!=
literal|null
condition|)
name|choiceEl
operator|.
name|addAttribute
argument_list|(
literal|"instructor"
argument_list|,
name|choice
operator|.
name|getInstructorNames
argument_list|()
argument_list|)
expr_stmt|;
name|exportDependencies
argument_list|(
name|choiceEl
argument_list|,
name|choice
argument_list|,
name|choice
operator|.
name|getParentSections
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"    added "
operator|+
name|request
operator|.
name|getAssignment
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*         try {             System.out.print("Response:");             new XMLWriter(System.out,OutputFormat.createPrettyPrint()).write(studentResponseElement);         } catch (Exception e) {}         */
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"jdbc:oracle:thin:@tamarind.smas.purdue.edu:1521:xe"
block|,
literal|"c:\\test\\sectioningRequest.xml"
block|,
literal|"c:\\test\\sectioningResponse.xml"
block|}
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>=
literal|4
condition|)
name|ToolBox
operator|.
name|configureLogging
argument_list|(
name|args
index|[
literal|3
index|]
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
else|else
name|ToolBox
operator|.
name|configureLogging
argument_list|()
expr_stmt|;
name|HibernateUtil
operator|.
name|configureHibernate
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Loading "
operator|+
name|args
index|[
literal|1
index|]
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|Document
name|request
init|=
operator|(
operator|new
name|SAXReader
argument_list|()
operator|)
operator|.
name|read
argument_list|(
operator|new
name|File
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|response
init|=
name|testSectioning
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Saving "
operator|+
name|args
index|[
literal|2
index|]
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|XMLWriter
name|out
init|=
operator|new
name|XMLWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|args
index|[
literal|2
index|]
argument_list|)
argument_list|)
argument_list|,
name|OutputFormat
operator|.
name|createPrettyPrint
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

