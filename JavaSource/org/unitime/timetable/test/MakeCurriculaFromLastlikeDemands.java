begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2008 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PropertyConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicAreaClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Curriculum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumCourseGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumProjectionRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|MakeCurriculaFromLastlikeDemands
block|{
specifier|protected
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|MakeCurriculaFromLastlikeDemands
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Long
name|iSessionId
init|=
literal|null
decl_stmt|;
specifier|private
name|float
name|iShareLimit
init|=
literal|0.00f
decl_stmt|;
specifier|private
name|int
name|iEnrlLimit
init|=
literal|1
decl_stmt|;
specifier|private
name|float
name|iTotalShareLimit
init|=
literal|0.03f
decl_stmt|;
specifier|public
name|MakeCurriculaFromLastlikeDemands
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|float
name|totalShareLimit
parameter_list|,
name|float
name|shareLimit
parameter_list|,
name|int
name|enrlLimit
parameter_list|)
block|{
name|iSessionId
operator|=
name|sessionId
expr_stmt|;
name|iTotalShareLimit
operator|=
name|totalShareLimit
expr_stmt|;
name|iShareLimit
operator|=
name|shareLimit
expr_stmt|;
name|iEnrlLimit
operator|=
name|enrlLimit
expr_stmt|;
block|}
specifier|public
name|MakeCurriculaFromLastlikeDemands
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|this
argument_list|(
name|sessionId
argument_list|,
name|ApplicationProperty
operator|.
name|CurriculumLastLikeDemandsTotalShareLimit
operator|.
name|floatValue
argument_list|()
argument_list|,
name|ApplicationProperty
operator|.
name|CurriculumLastLikeDemandsShareLimit
operator|.
name|floatValue
argument_list|()
argument_list|,
name|ApplicationProperty
operator|.
name|CurriculumLastLikeDemandsEnrollmentLimit
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Hashtable
argument_list|<
name|AcademicArea
argument_list|,
name|Hashtable
argument_list|<
name|PosMajor
argument_list|,
name|Hashtable
argument_list|<
name|AcademicClassification
argument_list|,
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|loadLastLikeCurricula
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|Hashtable
argument_list|<
name|AcademicArea
argument_list|,
name|Hashtable
argument_list|<
name|PosMajor
argument_list|,
name|Hashtable
argument_list|<
name|AcademicClassification
argument_list|,
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|curricula
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|List
name|demands
init|=
operator|(
name|List
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select a2, f2, m2, c, d.student.uniqueId from LastLikeCourseDemand d inner join d.student.academicAreaClassifications a inner join d.student.posMajors m, CourseOffering c,"
operator|+
literal|"AcademicArea a2, AcademicClassification f2, PosMajor m2 where "
operator|+
literal|"a2.session.uniqueId=:sessionId and a2.academicAreaAbbreviation=a.academicArea.academicAreaAbbreviation and "
operator|+
literal|"f2.session.uniqueId=:sessionId and f2.code=a.academicClassification.code and "
operator|+
literal|"m2.session.uniqueId=:sessionId and m2.code=m.code and "
operator|+
literal|"d.subjectArea.session.uniqueId=:sessionId and c.subjectArea=d.subjectArea and "
operator|+
literal|"((d.coursePermId=null and c.courseNbr=d.courseNbr) or "
operator|+
literal|" (d.coursePermId!=null and d.coursePermId=c.permId))"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Processing "
operator|+
name|demands
operator|.
name|size
argument_list|()
operator|+
literal|" demands..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|demands
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|o
index|[]
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|AcademicArea
name|a
init|=
operator|(
name|AcademicArea
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|AcademicClassification
name|f
init|=
operator|(
name|AcademicClassification
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|PosMajor
name|m
init|=
operator|(
name|PosMajor
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|CourseOffering
name|c
init|=
operator|(
name|CourseOffering
operator|)
name|o
index|[
literal|3
index|]
decl_stmt|;
name|Long
name|s
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|4
index|]
decl_stmt|;
name|Hashtable
argument_list|<
name|PosMajor
argument_list|,
name|Hashtable
argument_list|<
name|AcademicClassification
argument_list|,
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|curacad
init|=
name|curricula
operator|.
name|get
argument_list|(
name|a
argument_list|)
decl_stmt|;
if|if
condition|(
name|curacad
operator|==
literal|null
condition|)
block|{
name|curacad
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|curricula
operator|.
name|put
argument_list|(
name|a
argument_list|,
name|curacad
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|AcademicClassification
argument_list|,
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
name|clasf
init|=
name|curacad
operator|.
name|get
argument_list|(
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|clasf
operator|==
literal|null
condition|)
block|{
name|clasf
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|curacad
operator|.
name|put
argument_list|(
name|m
argument_list|,
name|clasf
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|courses
init|=
name|clasf
operator|.
name|get
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|courses
operator|==
literal|null
condition|)
block|{
name|courses
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|clasf
operator|.
name|put
argument_list|(
name|f
argument_list|,
name|courses
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|students
init|=
name|courses
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|students
operator|==
literal|null
condition|)
block|{
name|students
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|courses
operator|.
name|put
argument_list|(
name|c
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
name|students
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|curricula
return|;
block|}
specifier|public
name|Hashtable
argument_list|<
name|AcademicArea
argument_list|,
name|Hashtable
argument_list|<
name|PosMajor
argument_list|,
name|Hashtable
argument_list|<
name|AcademicClassification
argument_list|,
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|loadRealCurricula
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|Hashtable
argument_list|<
name|AcademicArea
argument_list|,
name|Hashtable
argument_list|<
name|PosMajor
argument_list|,
name|Hashtable
argument_list|<
name|AcademicClassification
argument_list|,
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|curricula
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|List
name|demands
init|=
operator|(
name|List
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct a, m, c, s.uniqueId from CourseRequest r inner join r.courseDemand.student s inner join s.academicAreaClassifications a "
operator|+
literal|"inner join s.posMajors m inner join r.courseOffering c where "
operator|+
literal|"s.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Processing "
operator|+
name|demands
operator|.
name|size
argument_list|()
operator|+
literal|" demands..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|demands
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|o
index|[]
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|AcademicAreaClassification
name|a
init|=
operator|(
name|AcademicAreaClassification
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|PosMajor
name|m
init|=
operator|(
name|PosMajor
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|CourseOffering
name|c
init|=
operator|(
name|CourseOffering
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|Long
name|s
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|3
index|]
decl_stmt|;
name|Hashtable
argument_list|<
name|PosMajor
argument_list|,
name|Hashtable
argument_list|<
name|AcademicClassification
argument_list|,
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|curacad
init|=
name|curricula
operator|.
name|get
argument_list|(
name|a
operator|.
name|getAcademicArea
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|curacad
operator|==
literal|null
condition|)
block|{
name|curacad
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|curricula
operator|.
name|put
argument_list|(
name|a
operator|.
name|getAcademicArea
argument_list|()
argument_list|,
name|curacad
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|AcademicClassification
argument_list|,
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
name|clasf
init|=
name|curacad
operator|.
name|get
argument_list|(
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|clasf
operator|==
literal|null
condition|)
block|{
name|clasf
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|curacad
operator|.
name|put
argument_list|(
name|m
argument_list|,
name|clasf
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|courses
init|=
name|clasf
operator|.
name|get
argument_list|(
name|a
operator|.
name|getAcademicClassification
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|courses
operator|==
literal|null
condition|)
block|{
name|courses
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|clasf
operator|.
name|put
argument_list|(
name|a
operator|.
name|getAcademicClassification
argument_list|()
argument_list|,
name|courses
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|students
init|=
name|courses
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|students
operator|==
literal|null
condition|)
block|{
name|students
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|courses
operator|.
name|put
argument_list|(
name|c
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
name|students
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|curricula
return|;
block|}
specifier|private
name|void
name|sortCourses
parameter_list|(
name|Set
argument_list|<
name|CurriculumCourse
argument_list|>
name|courses
parameter_list|)
block|{
name|int
name|ord
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CurriculumCourse
name|c
range|:
operator|new
name|TreeSet
argument_list|<
name|CurriculumCourse
argument_list|>
argument_list|(
name|courses
argument_list|)
control|)
name|c
operator|.
name|setOrd
argument_list|(
name|ord
operator|++
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|sortClassifications
parameter_list|(
name|Set
argument_list|<
name|CurriculumClassification
argument_list|>
name|classf
parameter_list|)
block|{
name|int
name|ord
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CurriculumClassification
name|c
range|:
operator|new
name|TreeSet
argument_list|<
name|CurriculumClassification
argument_list|>
argument_list|(
name|classf
argument_list|)
control|)
name|c
operator|.
name|setOrd
argument_list|(
name|ord
operator|++
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
name|getRules
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Long
name|acadAreaId
parameter_list|)
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
name|clasf2major2proj
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CurriculumProjectionRule
name|rule
range|:
operator|(
name|List
argument_list|<
name|CurriculumProjectionRule
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select r from CurriculumProjectionRule r where r.academicArea.uniqueId=:acadAreaId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"acadAreaId"
argument_list|,
name|acadAreaId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|String
name|majorCode
init|=
operator|(
name|rule
operator|.
name|getMajor
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|rule
operator|.
name|getMajor
argument_list|()
operator|.
name|getCode
argument_list|()
operator|)
decl_stmt|;
name|String
name|clasfCode
init|=
name|rule
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
decl_stmt|;
name|Float
name|projection
init|=
name|rule
operator|.
name|getProjection
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|major2proj
init|=
name|clasf2major2proj
operator|.
name|get
argument_list|(
name|clasfCode
argument_list|)
decl_stmt|;
if|if
condition|(
name|major2proj
operator|==
literal|null
condition|)
block|{
name|major2proj
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|()
expr_stmt|;
name|clasf2major2proj
operator|.
name|put
argument_list|(
name|clasfCode
argument_list|,
name|major2proj
argument_list|)
expr_stmt|;
block|}
name|major2proj
operator|.
name|put
argument_list|(
name|majorCode
argument_list|,
name|projection
argument_list|)
expr_stmt|;
block|}
return|return
name|clasf2major2proj
return|;
block|}
specifier|public
name|float
name|getProjection
parameter_list|(
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
name|clasf2major2proj
parameter_list|,
name|String
name|majorCode
parameter_list|,
name|String
name|clasfCode
parameter_list|)
block|{
if|if
condition|(
name|clasf2major2proj
operator|==
literal|null
operator|||
name|clasf2major2proj
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|1.0f
return|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|major2proj
init|=
name|clasf2major2proj
operator|.
name|get
argument_list|(
name|clasfCode
argument_list|)
decl_stmt|;
if|if
condition|(
name|major2proj
operator|==
literal|null
condition|)
return|return
literal|1.0f
return|;
name|Float
name|projection
init|=
name|major2proj
operator|.
name|get
argument_list|(
name|majorCode
argument_list|)
decl_stmt|;
if|if
condition|(
name|projection
operator|==
literal|null
condition|)
name|projection
operator|=
name|major2proj
operator|.
name|get
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
operator|(
name|projection
operator|==
literal|null
condition|?
literal|1.0f
else|:
name|projection
operator|)
return|;
block|}
specifier|public
name|void
name|update
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|boolean
name|lastLike
parameter_list|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Deleting existing curricula..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Curriculum
argument_list|>
name|i
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from Curriculum c where c.department.session=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|hibSession
operator|.
name|delete
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Loading "
operator|+
operator|(
name|lastLike
condition|?
literal|"last-like"
else|:
literal|"current"
operator|)
operator|+
literal|" student enrollments..."
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|AcademicArea
argument_list|,
name|Hashtable
argument_list|<
name|PosMajor
argument_list|,
name|Hashtable
argument_list|<
name|AcademicClassification
argument_list|,
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|curricula
init|=
operator|(
name|lastLike
condition|?
name|loadLastLikeCurricula
argument_list|(
name|hibSession
argument_list|)
else|:
name|loadRealCurricula
argument_list|(
name|hibSession
argument_list|)
operator|)
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Creating curricula..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|AcademicArea
argument_list|,
name|Hashtable
argument_list|<
name|PosMajor
argument_list|,
name|Hashtable
argument_list|<
name|AcademicClassification
argument_list|,
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|e1
range|:
name|curricula
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
name|rules
init|=
name|getRules
argument_list|(
name|hibSession
argument_list|,
name|e1
operator|.
name|getKey
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|PosMajor
argument_list|,
name|Hashtable
argument_list|<
name|AcademicClassification
argument_list|,
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|e2
range|:
name|e1
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|e1
operator|.
name|getKey
argument_list|()
operator|.
name|getPosMajors
argument_list|()
operator|.
name|contains
argument_list|(
name|e2
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Academic area "
operator|+
name|e1
operator|.
name|getKey
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|" - "
operator|+
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|e1
operator|.
name|getKey
argument_list|()
operator|.
name|getTitle
argument_list|()
argument_list|)
operator|+
literal|" does not contain major "
operator|+
name|e2
operator|.
name|getKey
argument_list|()
operator|.
name|getCode
argument_list|()
operator|+
literal|" - "
operator|+
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|e2
operator|.
name|getKey
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"Creating curriculum "
operator|+
name|e1
operator|.
name|getKey
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|" ("
operator|+
name|e1
operator|.
name|getKey
argument_list|()
operator|.
name|getTitle
argument_list|()
operator|+
literal|") - "
operator|+
name|e2
operator|.
name|getKey
argument_list|()
operator|.
name|getCode
argument_list|()
operator|+
literal|" ("
operator|+
name|e2
operator|.
name|getKey
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|Department
argument_list|,
name|Integer
argument_list|>
name|deptCounter
init|=
operator|new
name|Hashtable
argument_list|<
name|Department
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Curriculum
name|curriculum
init|=
operator|new
name|Curriculum
argument_list|()
decl_stmt|;
name|curriculum
operator|.
name|setAcademicArea
argument_list|(
name|e1
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|setAbbv
argument_list|(
name|e1
operator|.
name|getKey
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|"/"
operator|+
name|e2
operator|.
name|getKey
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|e1
operator|.
name|getKey
argument_list|()
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
name|e1
operator|.
name|getKey
argument_list|()
operator|.
name|getTitle
argument_list|()
else|:
name|e1
operator|.
name|getKey
argument_list|()
operator|.
name|getTitle
argument_list|()
argument_list|)
operator|+
literal|" / "
operator|+
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|e2
operator|.
name|getKey
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|curriculum
operator|.
name|getName
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|60
condition|)
name|curriculum
operator|.
name|setName
argument_list|(
name|curriculum
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|60
argument_list|)
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|setClassifications
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|setMajors
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|getMajors
argument_list|()
operator|.
name|add
argument_list|(
name|e2
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|courseStudents
init|=
operator|new
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsThisCurricula
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|AcademicClassification
argument_list|,
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
name|e3
range|:
name|e2
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|e4
range|:
name|e3
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|studentsThisCurricula
operator|.
name|addAll
argument_list|(
name|e4
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsThisCourse
init|=
name|courseStudents
operator|.
name|get
argument_list|(
name|e4
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentsThisCourse
operator|==
literal|null
condition|)
block|{
name|studentsThisCourse
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|courseStudents
operator|.
name|put
argument_list|(
name|e4
operator|.
name|getKey
argument_list|()
argument_list|,
name|studentsThisCourse
argument_list|)
expr_stmt|;
block|}
name|studentsThisCourse
operator|.
name|addAll
argument_list|(
name|e4
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|AcademicClassification
argument_list|,
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
name|e3
range|:
name|e2
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsThisCurriculaClassification
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Set
argument_list|<
name|Long
argument_list|>
name|students
range|:
name|e3
operator|.
name|getValue
argument_list|()
operator|.
name|values
argument_list|()
control|)
name|studentsThisCurriculaClassification
operator|.
name|addAll
argument_list|(
name|students
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  "
operator|+
name|e3
operator|.
name|getKey
argument_list|()
operator|.
name|getCode
argument_list|()
operator|+
literal|" ("
operator|+
name|e3
operator|.
name|getKey
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|") -- "
operator|+
name|studentsThisCurriculaClassification
operator|.
name|size
argument_list|()
operator|+
literal|" students"
argument_list|)
expr_stmt|;
name|int
name|projNrStudents
init|=
name|Math
operator|.
name|round
argument_list|(
name|getProjection
argument_list|(
name|rules
argument_list|,
name|e2
operator|.
name|getKey
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|,
name|e3
operator|.
name|getKey
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
operator|*
name|studentsThisCurriculaClassification
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|projNrStudents
operator|<=
literal|0
condition|)
continue|continue;
name|CurriculumClassification
name|clasf
init|=
operator|new
name|CurriculumClassification
argument_list|()
decl_stmt|;
name|clasf
operator|.
name|setCurriculum
argument_list|(
name|curriculum
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|getClassifications
argument_list|()
operator|.
name|add
argument_list|(
name|clasf
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setAcademicClassification
argument_list|(
name|e3
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setName
argument_list|(
name|e3
operator|.
name|getKey
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setCourses
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setNrStudents
argument_list|(
name|projNrStudents
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|e4
range|:
name|e3
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|float
name|share
init|=
operator|(
operator|(
name|float
operator|)
name|e4
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|)
operator|/
name|studentsThisCurriculaClassification
operator|.
name|size
argument_list|()
decl_stmt|;
comment|//sLog.info("      "+e3.getKey().getCourseName()+" has "+e3.getValue().size()+" students ("+new DecimalFormat("0.0").format(100.0*share)+"%)");
if|if
condition|(
name|share
operator|<
name|iShareLimit
operator|&&
name|e4
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|<
name|iEnrlLimit
condition|)
continue|continue;
name|float
name|totalShare
init|=
operator|(
operator|(
name|float
operator|)
name|courseStudents
operator|.
name|get
argument_list|(
name|e4
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
operator|)
operator|/
name|studentsThisCurricula
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|totalShare
operator|<
name|iTotalShareLimit
condition|)
continue|continue;
name|CurriculumCourse
name|course
init|=
operator|new
name|CurriculumCourse
argument_list|()
decl_stmt|;
name|course
operator|.
name|setClassification
argument_list|(
name|clasf
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|course
operator|.
name|setCourse
argument_list|(
name|e4
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setPercShare
argument_list|(
name|share
argument_list|)
expr_stmt|;
name|Integer
name|cx
init|=
name|deptCounter
operator|.
name|get
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getDepartment
argument_list|()
argument_list|)
decl_stmt|;
name|deptCounter
operator|.
name|put
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getDepartment
argument_list|()
argument_list|,
operator|new
name|Integer
argument_list|(
name|courseStudents
operator|.
name|get
argument_list|(
name|e4
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
operator|+
operator|(
name|cx
operator|==
literal|null
condition|?
literal|0
else|:
name|cx
operator|.
name|intValue
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|sortClassifications
argument_list|(
name|curriculum
operator|.
name|getClassifications
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CurriculumCourseGroup
argument_list|>
name|createdGroups
init|=
operator|new
name|ArrayList
argument_list|<
name|CurriculumCourseGroup
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Group
index|[]
argument_list|>
name|course2group
init|=
operator|new
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Group
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
name|int
name|totalStudents
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|curriculum
operator|.
name|getClassifications
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CurriculumClassification
name|clasf
init|=
operator|(
name|CurriculumClassification
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|sortCourses
argument_list|(
name|clasf
operator|.
name|getCourses
argument_list|()
argument_list|)
expr_stmt|;
name|totalStudents
operator|+=
name|clasf
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|clasf
operator|.
name|getCourses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CurriculumCourse
name|course
init|=
operator|(
name|CurriculumCourse
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|Group
index|[]
name|g
init|=
name|course2group
operator|.
name|get
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|g
operator|==
literal|null
condition|)
block|{
name|g
operator|=
operator|new
name|Group
index|[]
block|{
operator|new
name|Group
argument_list|(
name|id
operator|++
argument_list|,
literal|0
argument_list|,
name|course
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
argument_list|)
block|,
operator|new
name|Group
argument_list|(
name|id
operator|++
argument_list|,
literal|1
argument_list|,
name|course
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
argument_list|)
block|}
expr_stmt|;
name|course2group
operator|.
name|put
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
argument_list|,
name|g
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|g
index|[
literal|0
index|]
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|g
index|[
literal|1
index|]
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|List
argument_list|<
name|Group
argument_list|>
name|groups
init|=
operator|new
name|ArrayList
argument_list|<
name|Group
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Group
index|[]
name|g
range|:
name|course2group
operator|.
name|values
argument_list|()
control|)
block|{
name|CourseOffering
name|course
init|=
name|g
index|[
literal|0
index|]
operator|.
name|getFistCourseOffering
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|students
init|=
name|courseStudents
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
name|double
name|share
init|=
literal|100.0f
operator|*
name|students
operator|.
name|size
argument_list|()
operator|/
name|totalStudents
decl_stmt|;
if|if
condition|(
name|students
operator|.
name|size
argument_list|()
operator|>
literal|5
operator|&&
name|share
operator|>=
literal|5.0f
condition|)
block|{
name|g
index|[
literal|0
index|]
operator|.
name|getStudents
argument_list|()
operator|.
name|addAll
argument_list|(
name|students
argument_list|)
expr_stmt|;
name|groups
operator|.
name|add
argument_list|(
name|g
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|g
index|[
literal|1
index|]
operator|.
name|getStudents
argument_list|()
operator|.
name|addAll
argument_list|(
name|students
argument_list|)
expr_stmt|;
name|groups
operator|.
name|add
argument_list|(
name|g
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|shrink
decl_stmt|;
do|do
block|{
name|shrink
operator|=
literal|false
expr_stmt|;
name|Group
name|b1
init|=
literal|null
decl_stmt|,
name|b2
init|=
literal|null
decl_stmt|;
name|double
name|best
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|Group
name|g1
range|:
name|groups
control|)
block|{
for|for
control|(
name|Group
name|g2
range|:
name|groups
control|)
block|{
if|if
condition|(
name|g1
operator|.
name|getId
argument_list|()
operator|<=
name|g2
operator|.
name|getId
argument_list|()
condition|)
continue|continue;
name|double
name|share
init|=
name|g1
operator|.
name|share
argument_list|(
name|g2
argument_list|)
decl_stmt|;
if|if
condition|(
name|share
operator|>
name|best
condition|)
block|{
name|b1
operator|=
name|g1
expr_stmt|;
name|b2
operator|=
name|g2
expr_stmt|;
name|best
operator|=
name|share
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|best
operator|>=
literal|0.9
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- merge "
operator|+
operator|new
name|DecimalFormat
argument_list|(
literal|"0.00"
argument_list|)
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|best
argument_list|)
operator|+
literal|" "
operator|+
name|b1
operator|+
literal|" w "
operator|+
name|b2
argument_list|)
expr_stmt|;
name|b1
operator|.
name|mergeWith
argument_list|(
name|b2
argument_list|)
expr_stmt|;
name|groups
operator|.
name|remove
argument_list|(
name|b2
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"     result: "
operator|+
name|b1
argument_list|)
expr_stmt|;
name|shrink
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- best NOT merge "
operator|+
operator|new
name|DecimalFormat
argument_list|(
literal|"0.00"
argument_list|)
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|best
argument_list|)
operator|+
literal|" "
operator|+
name|b1
operator|+
literal|" w "
operator|+
name|b2
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|shrink
condition|)
do|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|names
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Group
name|g
range|:
name|groups
control|)
block|{
if|if
condition|(
name|g
operator|.
name|countCourseOfferings
argument_list|()
operator|<=
literal|1
condition|)
continue|continue;
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- "
operator|+
name|g
argument_list|)
expr_stmt|;
name|CurriculumCourseGroup
name|gr
init|=
operator|new
name|CurriculumCourseGroup
argument_list|()
decl_stmt|;
name|String
name|clasf
init|=
name|g
operator|.
name|getLeadingClassificationName
argument_list|()
decl_stmt|;
name|Integer
name|cnt
init|=
name|names
operator|.
name|get
argument_list|(
operator|(
name|g
operator|.
name|isSameStudents
argument_list|()
condition|?
literal|"R"
else|:
literal|"O"
operator|)
operator|+
literal|" "
operator|+
name|clasf
argument_list|)
decl_stmt|;
if|if
condition|(
name|cnt
operator|==
literal|null
condition|)
name|cnt
operator|=
literal|1
expr_stmt|;
else|else
name|cnt
operator|++
expr_stmt|;
name|gr
operator|.
name|setName
argument_list|(
operator|(
name|g
operator|.
name|isSameStudents
argument_list|()
condition|?
literal|"R"
else|:
literal|"O"
operator|)
operator|+
literal|" "
operator|+
name|clasf
operator|+
literal|" "
operator|+
name|cnt
argument_list|)
expr_stmt|;
name|names
operator|.
name|put
argument_list|(
operator|(
name|g
operator|.
name|isSameStudents
argument_list|()
condition|?
literal|"R"
else|:
literal|"O"
operator|)
operator|+
literal|" "
operator|+
name|clasf
argument_list|,
name|cnt
argument_list|)
expr_stmt|;
name|gr
operator|.
name|setType
argument_list|(
name|g
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|gr
operator|.
name|setCurriculum
argument_list|(
name|curriculum
argument_list|)
expr_stmt|;
name|createdGroups
operator|.
name|add
argument_list|(
name|gr
argument_list|)
expr_stmt|;
for|for
control|(
name|CurriculumCourse
name|course
range|:
name|g
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|course
operator|.
name|getGroups
argument_list|()
operator|==
literal|null
condition|)
block|{
name|course
operator|.
name|setGroups
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|course
operator|.
name|getGroups
argument_list|()
operator|.
name|add
argument_list|(
name|gr
argument_list|)
expr_stmt|;
block|}
block|}
name|Department
name|dept
init|=
literal|null
decl_stmt|;
name|int
name|best
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Department
argument_list|,
name|Integer
argument_list|>
name|e3
range|:
name|deptCounter
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|dept
operator|==
literal|null
operator|||
name|best
operator|<
name|e3
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|dept
operator|=
name|e3
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|best
operator|=
name|e3
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
name|curriculum
operator|.
name|setDepartment
argument_list|(
name|dept
argument_list|)
expr_stmt|;
if|if
condition|(
name|dept
operator|==
literal|null
condition|)
continue|continue;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|curriculum
argument_list|)
expr_stmt|;
for|for
control|(
name|CurriculumCourseGroup
name|g
range|:
name|createdGroups
control|)
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"All done."
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|AcademicAreaMajor
block|{
specifier|private
name|AcademicArea
name|iArea
init|=
literal|null
decl_stmt|;
specifier|private
name|PosMajor
name|iMajor
init|=
literal|null
decl_stmt|;
name|AcademicAreaMajor
parameter_list|(
name|AcademicArea
name|area
parameter_list|,
name|PosMajor
name|major
parameter_list|)
block|{
name|iArea
operator|=
name|area
expr_stmt|;
name|iMajor
operator|=
name|major
expr_stmt|;
block|}
specifier|public
name|AcademicArea
name|getArea
parameter_list|()
block|{
return|return
name|iArea
return|;
block|}
specifier|public
name|PosMajor
name|getMajor
parameter_list|()
block|{
return|return
name|iMajor
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|AcademicAreaMajor
operator|)
condition|)
return|return
literal|false
return|;
name|AcademicAreaMajor
name|a
init|=
operator|(
name|AcademicAreaMajor
operator|)
name|o
decl_stmt|;
return|return
name|a
operator|.
name|getMajor
argument_list|()
operator|.
name|equals
argument_list|(
name|getMajor
argument_list|()
argument_list|)
operator|&&
name|a
operator|.
name|getArea
argument_list|()
operator|.
name|equals
argument_list|(
name|getArea
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getArea
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|^
name|getMajor
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Group
block|{
specifier|private
name|int
name|iId
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iType
init|=
literal|0
decl_stmt|;
specifier|private
name|List
argument_list|<
name|CurriculumCourse
argument_list|>
name|iCourses
init|=
operator|new
name|ArrayList
argument_list|<
name|CurriculumCourse
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Long
argument_list|>
name|iStudents
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|double
name|iShare
init|=
literal|1.0
decl_stmt|;
specifier|public
name|Group
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|type
parameter_list|,
name|CurriculumCourse
name|course
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|students
parameter_list|)
block|{
name|iId
operator|=
name|id
expr_stmt|;
name|iType
operator|=
name|type
expr_stmt|;
name|iStudents
operator|.
name|addAll
argument_list|(
name|students
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CourseOffering
name|getFistCourseOffering
parameter_list|()
block|{
return|return
name|iCourses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCourse
argument_list|()
return|;
block|}
specifier|protected
name|HashSet
argument_list|<
name|CourseOffering
argument_list|>
name|courses
parameter_list|()
block|{
name|HashSet
argument_list|<
name|CourseOffering
argument_list|>
name|courses
init|=
operator|new
name|HashSet
argument_list|<
name|CourseOffering
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CurriculumCourse
name|c
range|:
name|iCourses
control|)
name|courses
operator|.
name|add
argument_list|(
name|c
operator|.
name|getCourse
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|courses
return|;
block|}
specifier|public
name|int
name|countCourseOfferings
parameter_list|()
block|{
name|HashSet
argument_list|<
name|CourseOffering
argument_list|>
name|courses
init|=
operator|new
name|HashSet
argument_list|<
name|CourseOffering
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CurriculumCourse
name|c
range|:
name|iCourses
control|)
name|courses
operator|.
name|add
argument_list|(
name|c
operator|.
name|getCourse
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|courses
operator|.
name|size
argument_list|()
return|;
block|}
specifier|protected
name|Hashtable
argument_list|<
name|String
argument_list|,
name|int
index|[]
argument_list|>
name|getClassifications
parameter_list|()
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|int
index|[]
argument_list|>
name|cnt
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|int
index|[]
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CurriculumCourse
name|c
range|:
name|iCourses
control|)
block|{
name|int
index|[]
name|other
init|=
name|cnt
operator|.
name|get
argument_list|(
name|c
operator|.
name|getClassification
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|cnt
operator|.
name|put
argument_list|(
name|c
operator|.
name|getClassification
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|int
index|[]
block|{
name|Math
operator|.
name|round
argument_list|(
name|c
operator|.
name|getPercShare
argument_list|()
operator|*
name|c
operator|.
name|getClassification
argument_list|()
operator|.
name|getNrStudents
argument_list|()
argument_list|)
operator|+
operator|(
name|other
operator|==
literal|null
condition|?
literal|0
else|:
name|other
index|[
literal|0
index|]
operator|)
block|,
name|c
operator|.
name|getClassification
argument_list|()
operator|.
name|getNrStudents
argument_list|()
operator|+
operator|(
name|other
operator|==
literal|null
condition|?
literal|0
else|:
name|other
index|[
literal|1
index|]
operator|)
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|cnt
return|;
block|}
specifier|public
name|CurriculumClassification
name|getClassification
parameter_list|(
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|CurriculumCourse
name|c
range|:
name|iCourses
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getClassification
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
name|c
operator|.
name|getClassification
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getLeadingClassificationName
parameter_list|()
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|int
index|[]
argument_list|>
name|cnt
init|=
name|getClassifications
argument_list|()
decl_stmt|;
name|String
name|best
init|=
literal|null
decl_stmt|;
name|int
name|bestValue
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|int
index|[]
argument_list|>
name|e
range|:
name|cnt
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
index|[
literal|0
index|]
operator|>
name|bestValue
condition|)
block|{
name|bestValue
operator|=
name|e
operator|.
name|getValue
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
name|best
operator|=
name|e
operator|.
name|getKey
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|best
return|;
block|}
specifier|public
name|float
name|classificationShare
parameter_list|(
name|Group
name|g
parameter_list|)
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|int
index|[]
argument_list|>
name|a
init|=
name|getClassifications
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|int
index|[]
argument_list|>
name|b
init|=
name|g
operator|.
name|getClassifications
argument_list|()
decl_stmt|;
name|int
name|total1
init|=
literal|0
decl_stmt|,
name|total2
init|=
literal|0
decl_stmt|,
name|share
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|int
index|[]
argument_list|>
name|e
range|:
name|a
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|float
name|s1
init|=
operator|(
operator|(
name|float
operator|)
name|e
operator|.
name|getValue
argument_list|()
index|[
literal|0
index|]
operator|)
operator|/
name|e
operator|.
name|getValue
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
name|int
index|[]
name|c
init|=
name|b
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|float
name|s2
init|=
operator|(
name|c
operator|==
literal|null
condition|?
literal|0f
else|:
operator|(
operator|(
name|float
operator|)
name|c
index|[
literal|0
index|]
operator|)
operator|/
name|c
index|[
literal|1
index|]
operator|)
decl_stmt|;
name|int
name|x1
init|=
name|Math
operator|.
name|round
argument_list|(
name|s1
operator|*
name|getClassification
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|getNrStudents
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|x2
init|=
name|Math
operator|.
name|round
argument_list|(
name|s2
operator|*
name|getClassification
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|getNrStudents
argument_list|()
argument_list|)
decl_stmt|;
name|share
operator|+=
name|Math
operator|.
name|min
argument_list|(
name|x1
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|total1
operator|+=
name|x1
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|int
index|[]
argument_list|>
name|e
range|:
name|b
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|float
name|s1
init|=
operator|(
operator|(
name|float
operator|)
name|e
operator|.
name|getValue
argument_list|()
index|[
literal|0
index|]
operator|)
operator|/
name|e
operator|.
name|getValue
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
name|int
name|x1
init|=
name|Math
operator|.
name|round
argument_list|(
name|s1
operator|*
name|g
operator|.
name|getClassification
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|getNrStudents
argument_list|()
argument_list|)
decl_stmt|;
name|total2
operator|+=
name|x1
expr_stmt|;
block|}
return|return
operator|(
operator|(
name|float
operator|)
name|share
operator|)
operator|/
name|Math
operator|.
name|min
argument_list|(
name|total1
argument_list|,
name|total2
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|CurriculumCourse
argument_list|>
name|getCourses
parameter_list|()
block|{
return|return
name|iCourses
return|;
block|}
specifier|public
name|int
name|getId
parameter_list|()
block|{
return|return
name|iId
return|;
block|}
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|iType
return|;
block|}
specifier|public
name|Set
argument_list|<
name|Long
argument_list|>
name|getStudents
parameter_list|()
block|{
return|return
name|iStudents
return|;
block|}
specifier|public
name|boolean
name|isSameStudents
parameter_list|()
block|{
return|return
name|iType
operator|==
literal|1
return|;
block|}
specifier|public
name|double
name|getShare
parameter_list|()
block|{
return|return
name|iShare
return|;
block|}
specifier|public
name|double
name|share
parameter_list|(
name|Group
name|g
parameter_list|)
block|{
if|if
condition|(
name|g
operator|.
name|getType
argument_list|()
operator|!=
name|getType
argument_list|()
condition|)
return|return
literal|0.0
return|;
if|if
condition|(
name|classificationShare
argument_list|(
name|g
argument_list|)
operator|<
literal|0.66
condition|)
return|return
literal|0.0
return|;
name|int
name|minStudents
init|=
name|Math
operator|.
name|min
argument_list|(
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|g
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|maxStudents
init|=
name|Math
operator|.
name|max
argument_list|(
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|g
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|shareStudents
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Long
name|s
range|:
name|getStudents
argument_list|()
control|)
if|if
condition|(
name|g
operator|.
name|getStudents
argument_list|()
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
name|shareStudents
operator|++
expr_stmt|;
name|double
name|share
init|=
operator|(
operator|(
name|double
operator|)
name|shareStudents
operator|)
operator|/
operator|(
name|isSameStudents
argument_list|()
condition|?
name|maxStudents
else|:
name|minStudents
operator|)
decl_stmt|;
comment|// return getShare() * g.getShare() * (isSameStudents() ? share : 1.0 - share);
return|return
name|isSameStudents
argument_list|()
condition|?
name|share
else|:
literal|1.0
operator|-
name|share
return|;
block|}
specifier|public
name|void
name|mergeWith
parameter_list|(
name|Group
name|g
parameter_list|)
block|{
name|int
name|minStudents
init|=
name|Math
operator|.
name|min
argument_list|(
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|g
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|maxStudents
init|=
name|Math
operator|.
name|max
argument_list|(
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|g
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|shareStudents
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Long
name|s
range|:
name|getStudents
argument_list|()
control|)
if|if
condition|(
name|g
operator|.
name|getStudents
argument_list|()
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
name|shareStudents
operator|++
expr_stmt|;
name|double
name|share
init|=
operator|(
operator|(
name|double
operator|)
name|shareStudents
operator|)
operator|/
operator|(
name|isSameStudents
argument_list|()
condition|?
name|maxStudents
else|:
name|minStudents
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|isSameStudents
argument_list|()
condition|)
name|share
operator|=
literal|1.0
operator|-
name|share
expr_stmt|;
name|iStudents
operator|.
name|addAll
argument_list|(
name|g
operator|.
name|getStudents
argument_list|()
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|addAll
argument_list|(
name|g
operator|.
name|getCourses
argument_list|()
argument_list|)
expr_stmt|;
name|iShare
operator|*=
name|share
operator|*
name|g
operator|.
name|getShare
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|courses
init|=
literal|""
decl_stmt|;
for|for
control|(
name|CourseOffering
name|c
range|:
name|courses
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|courses
operator|.
name|isEmpty
argument_list|()
condition|)
name|courses
operator|+=
literal|" + "
expr_stmt|;
name|courses
operator|+=
name|c
operator|.
name|getCourseName
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|isSameStudents
argument_list|()
condition|?
literal|"Req"
else|:
literal|"Opt"
operator|)
operator|+
literal|"{"
operator|+
operator|new
name|DecimalFormat
argument_list|(
literal|"0.0"
argument_list|)
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|iShare
argument_list|)
operator|+
literal|"/"
operator|+
name|iStudents
operator|.
name|size
argument_list|()
operator|+
literal|" "
operator|+
name|courses
operator|+
literal|"}"
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
try|try
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.rootLogger"
argument_list|,
literal|"DEBUG, A1"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1"
argument_list|,
literal|"org.apache.log4j.ConsoleAppender"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1.layout"
argument_list|,
literal|"org.apache.log4j.PatternLayout"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1.layout.ConversionPattern"
argument_list|,
literal|"%-5p %c{2}: %m%n"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate.cfg"
argument_list|,
literal|"WARN"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate.cache.EhCacheProvider"
argument_list|,
literal|"ERROR"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.unitime.commons.hibernate"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.net"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|PropertyConfigurator
operator|.
name|configure
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|HibernateUtil
operator|.
name|configureHibernate
argument_list|(
name|ApplicationProperties
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"initiative"
argument_list|,
literal|"PWL"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"year"
argument_list|,
literal|"2010"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"term"
argument_list|,
literal|"Spring"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Academic session not found, use properties initiative, year, and term to set academic session."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Session: "
operator|+
name|session
argument_list|)
expr_stmt|;
block|}
operator|new
name|MakeCurriculaFromLastlikeDemands
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|update
argument_list|(
name|hibSession
argument_list|,
literal|"last-like"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.curriculum.lldemands.students"
argument_list|,
literal|"last-like"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

