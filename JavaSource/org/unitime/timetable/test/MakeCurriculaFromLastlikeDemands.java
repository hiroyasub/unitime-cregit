begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PropertyConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicAreaClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Curriculum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_class
specifier|public
class|class
name|MakeCurriculaFromLastlikeDemands
block|{
specifier|protected
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|MakeCurriculaFromLastlikeDemands
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Long
name|iSessionId
init|=
literal|null
decl_stmt|;
specifier|private
name|float
name|iShareLimit
init|=
literal|0.00f
decl_stmt|;
specifier|private
name|int
name|iEnrlLimit
init|=
literal|1
decl_stmt|;
specifier|public
name|MakeCurriculaFromLastlikeDemands
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|float
name|shareLimit
parameter_list|,
name|int
name|enrlLimit
parameter_list|)
block|{
name|iSessionId
operator|=
name|sessionId
expr_stmt|;
name|iShareLimit
operator|=
name|shareLimit
expr_stmt|;
name|iEnrlLimit
operator|=
name|enrlLimit
expr_stmt|;
block|}
specifier|public
name|MakeCurriculaFromLastlikeDemands
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|this
argument_list|(
name|sessionId
argument_list|,
name|Float
operator|.
name|parseFloat
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.curriculum.lldemands.shareLimit"
argument_list|,
literal|"0.05"
argument_list|)
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.curriculum.lldemands.enrlLimit"
argument_list|,
literal|"20"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Hashtable
argument_list|<
name|AcademicArea
argument_list|,
name|Hashtable
argument_list|<
name|PosMajor
argument_list|,
name|Hashtable
argument_list|<
name|AcademicClassification
argument_list|,
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|loadLastLikeCurricula
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|Hashtable
argument_list|<
name|AcademicArea
argument_list|,
name|Hashtable
argument_list|<
name|PosMajor
argument_list|,
name|Hashtable
argument_list|<
name|AcademicClassification
argument_list|,
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|curricula
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|List
name|demands
init|=
operator|(
name|List
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select a, m, c, d.student.uniqueId from LastLikeCourseDemand d inner join d.student.academicAreaClassifications a inner join d.student.posMajors m, CourseOffering c where "
operator|+
literal|"d.subjectArea.session.uniqueId=:sessionId and c.subjectArea=d.subjectArea and "
operator|+
literal|"((d.coursePermId=null and c.courseNbr=d.courseNbr) or "
operator|+
literal|" (d.coursePermId!=null and d.coursePermId=c.permId))"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Processing "
operator|+
name|demands
operator|.
name|size
argument_list|()
operator|+
literal|" demands..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|demands
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|o
index|[]
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|AcademicAreaClassification
name|a
init|=
operator|(
name|AcademicAreaClassification
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|PosMajor
name|m
init|=
operator|(
name|PosMajor
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|CourseOffering
name|c
init|=
operator|(
name|CourseOffering
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|Long
name|s
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|3
index|]
decl_stmt|;
name|Hashtable
argument_list|<
name|PosMajor
argument_list|,
name|Hashtable
argument_list|<
name|AcademicClassification
argument_list|,
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|curacad
init|=
name|curricula
operator|.
name|get
argument_list|(
name|a
operator|.
name|getAcademicArea
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|curacad
operator|==
literal|null
condition|)
block|{
name|curacad
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|curricula
operator|.
name|put
argument_list|(
name|a
operator|.
name|getAcademicArea
argument_list|()
argument_list|,
name|curacad
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|AcademicClassification
argument_list|,
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
name|clasf
init|=
name|curacad
operator|.
name|get
argument_list|(
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|clasf
operator|==
literal|null
condition|)
block|{
name|clasf
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|curacad
operator|.
name|put
argument_list|(
name|m
argument_list|,
name|clasf
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|courses
init|=
name|clasf
operator|.
name|get
argument_list|(
name|a
operator|.
name|getAcademicClassification
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|courses
operator|==
literal|null
condition|)
block|{
name|courses
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|clasf
operator|.
name|put
argument_list|(
name|a
operator|.
name|getAcademicClassification
argument_list|()
argument_list|,
name|courses
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|students
init|=
name|courses
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|students
operator|==
literal|null
condition|)
block|{
name|students
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|courses
operator|.
name|put
argument_list|(
name|c
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
name|students
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|curricula
return|;
block|}
specifier|public
name|Hashtable
argument_list|<
name|AcademicArea
argument_list|,
name|Hashtable
argument_list|<
name|PosMajor
argument_list|,
name|Hashtable
argument_list|<
name|AcademicClassification
argument_list|,
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|loadRealCurricula
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|Hashtable
argument_list|<
name|AcademicArea
argument_list|,
name|Hashtable
argument_list|<
name|PosMajor
argument_list|,
name|Hashtable
argument_list|<
name|AcademicClassification
argument_list|,
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|curricula
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|List
name|demands
init|=
operator|(
name|List
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct a, m, c, e.student.uniqueId from StudentClassEnrollment e inner join e.student.academicAreaClassifications a "
operator|+
literal|"inner join e.student.posMajors m inner join e.courseOffering c where "
operator|+
literal|"e.student.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Processing "
operator|+
name|demands
operator|.
name|size
argument_list|()
operator|+
literal|" demands..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|demands
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|o
index|[]
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|AcademicAreaClassification
name|a
init|=
operator|(
name|AcademicAreaClassification
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|PosMajor
name|m
init|=
operator|(
name|PosMajor
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|CourseOffering
name|c
init|=
operator|(
name|CourseOffering
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|Long
name|s
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|3
index|]
decl_stmt|;
name|Hashtable
argument_list|<
name|PosMajor
argument_list|,
name|Hashtable
argument_list|<
name|AcademicClassification
argument_list|,
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|curacad
init|=
name|curricula
operator|.
name|get
argument_list|(
name|a
operator|.
name|getAcademicArea
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|curacad
operator|==
literal|null
condition|)
block|{
name|curacad
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|curricula
operator|.
name|put
argument_list|(
name|a
operator|.
name|getAcademicArea
argument_list|()
argument_list|,
name|curacad
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|AcademicClassification
argument_list|,
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
name|clasf
init|=
name|curacad
operator|.
name|get
argument_list|(
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|clasf
operator|==
literal|null
condition|)
block|{
name|clasf
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|curacad
operator|.
name|put
argument_list|(
name|m
argument_list|,
name|clasf
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|courses
init|=
name|clasf
operator|.
name|get
argument_list|(
name|a
operator|.
name|getAcademicClassification
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|courses
operator|==
literal|null
condition|)
block|{
name|courses
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|clasf
operator|.
name|put
argument_list|(
name|a
operator|.
name|getAcademicClassification
argument_list|()
argument_list|,
name|courses
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|students
init|=
name|courses
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|students
operator|==
literal|null
condition|)
block|{
name|students
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|courses
operator|.
name|put
argument_list|(
name|c
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
name|students
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|curricula
return|;
block|}
specifier|private
name|void
name|sortCourses
parameter_list|(
name|Set
argument_list|<
name|CurriculumCourse
argument_list|>
name|courses
parameter_list|)
block|{
name|int
name|ord
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CurriculumCourse
name|c
range|:
operator|new
name|TreeSet
argument_list|<
name|CurriculumCourse
argument_list|>
argument_list|(
name|courses
argument_list|)
control|)
name|c
operator|.
name|setOrd
argument_list|(
name|ord
operator|++
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|sortClassifications
parameter_list|(
name|Set
argument_list|<
name|CurriculumClassification
argument_list|>
name|classf
parameter_list|)
block|{
name|int
name|ord
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CurriculumClassification
name|c
range|:
operator|new
name|TreeSet
argument_list|<
name|CurriculumClassification
argument_list|>
argument_list|(
name|classf
argument_list|)
control|)
name|c
operator|.
name|setOrd
argument_list|(
name|ord
operator|++
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|update
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|boolean
name|lastLike
parameter_list|)
block|{
name|Hashtable
argument_list|<
name|AcademicArea
argument_list|,
name|Hashtable
argument_list|<
name|PosMajor
argument_list|,
name|Hashtable
argument_list|<
name|AcademicClassification
argument_list|,
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|curricula
init|=
operator|(
name|lastLike
condition|?
name|loadLastLikeCurricula
argument_list|(
name|hibSession
argument_list|)
else|:
name|loadRealCurricula
argument_list|(
name|hibSession
argument_list|)
operator|)
decl_stmt|;
name|Hashtable
argument_list|<
name|AcademicArea
argument_list|,
name|Hashtable
argument_list|<
name|PosMajor
argument_list|,
name|Curriculum
argument_list|>
argument_list|>
name|remainingCurricula
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from Curriculum c where c.academicArea!=null and c.department.session=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Curriculum
name|c
init|=
operator|(
name|Curriculum
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|PosMajor
argument_list|,
name|Curriculum
argument_list|>
name|majors
init|=
operator|new
name|Hashtable
argument_list|<
name|PosMajor
argument_list|,
name|Curriculum
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|PosMajor
argument_list|>
name|j
init|=
name|c
operator|.
name|getMajors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PosMajor
name|m
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|majors
operator|.
name|put
argument_list|(
name|m
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
name|remainingCurricula
operator|.
name|put
argument_list|(
name|c
operator|.
name|getAcademicArea
argument_list|()
argument_list|,
name|majors
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|AcademicArea
argument_list|,
name|Hashtable
argument_list|<
name|PosMajor
argument_list|,
name|Hashtable
argument_list|<
name|AcademicClassification
argument_list|,
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|e1
range|:
name|curricula
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Hashtable
argument_list|<
name|PosMajor
argument_list|,
name|Curriculum
argument_list|>
name|remainingMajors
init|=
name|remainingCurricula
operator|.
name|get
argument_list|(
name|e1
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|PosMajor
argument_list|,
name|Hashtable
argument_list|<
name|AcademicClassification
argument_list|,
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|e2
range|:
name|e1
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Curriculum
name|curriculum
init|=
operator|(
name|remainingMajors
operator|==
literal|null
condition|?
literal|null
else|:
name|remainingMajors
operator|.
name|get
argument_list|(
name|e2
operator|.
name|getKey
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|curriculum
operator|!=
literal|null
operator|&&
name|curriculum
operator|.
name|getMajors
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|curriculum
operator|.
name|getMajors
argument_list|()
operator|.
name|remove
argument_list|(
name|e2
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|curriculum
operator|=
literal|null
expr_stmt|;
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"Updating curriculum "
operator|+
name|e1
operator|.
name|getKey
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|" ("
operator|+
name|e1
operator|.
name|getKey
argument_list|()
operator|.
name|getShortTitle
argument_list|()
operator|+
literal|") - "
operator|+
name|e2
operator|.
name|getKey
argument_list|()
operator|.
name|getCode
argument_list|()
operator|+
literal|" ("
operator|+
name|e2
operator|.
name|getKey
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|Department
argument_list|,
name|Integer
argument_list|>
name|deptCounter
init|=
literal|null
decl_stmt|;
name|Hashtable
argument_list|<
name|AcademicClassification
argument_list|,
name|CurriculumClassification
argument_list|>
name|remainingClassifications
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
if|if
condition|(
name|curriculum
operator|==
literal|null
condition|)
block|{
name|curriculum
operator|=
operator|new
name|Curriculum
argument_list|()
expr_stmt|;
name|curriculum
operator|.
name|setAcademicArea
argument_list|(
name|e1
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|setAbbv
argument_list|(
name|e1
operator|.
name|getKey
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|"-"
operator|+
name|e2
operator|.
name|getKey
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|setName
argument_list|(
name|e1
operator|.
name|getKey
argument_list|()
operator|.
name|getShortTitle
argument_list|()
operator|==
literal|null
condition|?
name|e1
operator|.
name|getKey
argument_list|()
operator|.
name|getLongTitle
argument_list|()
else|:
name|e1
operator|.
name|getKey
argument_list|()
operator|.
name|getShortTitle
argument_list|()
operator|+
literal|" - "
operator|+
name|e2
operator|.
name|getKey
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|setClassifications
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|setMajors
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|getMajors
argument_list|()
operator|.
name|add
argument_list|(
name|e2
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|deptCounter
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|remainingMajors
operator|.
name|remove
argument_list|(
name|e2
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|curriculum
operator|.
name|getClassifications
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CurriculumClassification
name|cc
init|=
operator|(
name|CurriculumClassification
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|remainingClassifications
operator|.
name|put
argument_list|(
name|cc
operator|.
name|getAcademicClassification
argument_list|()
argument_list|,
name|cc
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|AcademicClassification
argument_list|,
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
name|e3
range|:
name|e2
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|CurriculumClassification
name|clasf
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|curriculum
operator|.
name|getClassifications
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CurriculumClassification
name|cc
init|=
operator|(
name|CurriculumClassification
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|e3
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|cc
operator|.
name|getAcademicClassification
argument_list|()
argument_list|)
condition|)
block|{
name|clasf
operator|=
name|cc
expr_stmt|;
break|break;
block|}
block|}
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|CurriculumCourse
argument_list|>
name|remainingCourses
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
if|if
condition|(
name|clasf
operator|==
literal|null
condition|)
block|{
name|clasf
operator|=
operator|new
name|CurriculumClassification
argument_list|()
expr_stmt|;
name|clasf
operator|.
name|setCurriculum
argument_list|(
name|curriculum
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|getClassifications
argument_list|()
operator|.
name|add
argument_list|(
name|clasf
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setAcademicClassification
argument_list|(
name|e3
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setName
argument_list|(
name|e3
operator|.
name|getKey
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setCourses
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|clasf
operator|.
name|getCourses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CurriculumCourse
name|c
init|=
operator|(
name|CurriculumCourse
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|remainingCourses
operator|.
name|put
argument_list|(
name|c
operator|.
name|getCourse
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
name|remainingClassifications
operator|.
name|remove
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|allStudents
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Set
argument_list|<
name|Long
argument_list|>
name|students
range|:
name|e3
operator|.
name|getValue
argument_list|()
operator|.
name|values
argument_list|()
control|)
name|allStudents
operator|.
name|addAll
argument_list|(
name|students
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  "
operator|+
name|e3
operator|.
name|getKey
argument_list|()
operator|.
name|getCode
argument_list|()
operator|+
literal|" ("
operator|+
name|e3
operator|.
name|getKey
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|") -- "
operator|+
name|allStudents
operator|.
name|size
argument_list|()
operator|+
literal|" students"
argument_list|)
expr_stmt|;
if|if
condition|(
name|clasf
operator|.
name|getNrStudents
argument_list|()
operator|==
literal|null
condition|)
name|clasf
operator|.
name|setNrStudents
argument_list|(
name|allStudents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setLlStudents
argument_list|(
name|allStudents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|e4
range|:
name|e3
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|CurriculumCourse
name|course
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|clasf
operator|.
name|getCourses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CurriculumCourse
name|c
init|=
operator|(
name|CurriculumCourse
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getCourse
argument_list|()
operator|.
name|equals
argument_list|(
name|e4
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|course
operator|=
name|c
expr_stmt|;
break|break;
block|}
block|}
name|float
name|share
init|=
operator|(
operator|(
name|float
operator|)
name|e4
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|)
operator|/
name|allStudents
operator|.
name|size
argument_list|()
decl_stmt|;
comment|//sLog.info("      "+e3.getKey().getCourseName()+" has "+e3.getValue().size()+" students ("+new DecimalFormat("0.0").format(100.0*share)+"%)");
if|if
condition|(
name|course
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|share
operator|<
name|iShareLimit
operator|&&
name|e4
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|<
name|iEnrlLimit
condition|)
continue|continue;
name|course
operator|=
operator|new
name|CurriculumCourse
argument_list|()
expr_stmt|;
name|course
operator|.
name|setClassification
argument_list|(
name|clasf
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|course
operator|.
name|setCourse
argument_list|(
name|e4
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|remainingCourses
operator|.
name|remove
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|course
operator|.
name|getPercShare
argument_list|()
operator|==
literal|null
condition|)
name|course
operator|.
name|setPercShare
argument_list|(
name|share
argument_list|)
expr_stmt|;
name|course
operator|.
name|setLlShare
argument_list|(
name|share
argument_list|)
expr_stmt|;
if|if
condition|(
name|deptCounter
operator|!=
literal|null
condition|)
block|{
name|Integer
name|cx
init|=
name|deptCounter
operator|.
name|get
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getDepartment
argument_list|()
argument_list|)
decl_stmt|;
name|deptCounter
operator|.
name|put
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getDepartment
argument_list|()
argument_list|,
operator|new
name|Integer
argument_list|(
literal|1
operator|+
operator|(
name|cx
operator|==
literal|null
condition|?
literal|0
else|:
name|cx
operator|.
name|intValue
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|sortClassifications
argument_list|(
name|curriculum
operator|.
name|getClassifications
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|curriculum
operator|.
name|getClassifications
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CurriculumClassification
name|clasf
init|=
operator|(
name|CurriculumClassification
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|sortCourses
argument_list|(
name|clasf
operator|.
name|getCourses
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deptCounter
operator|!=
literal|null
condition|)
block|{
name|Department
name|dept
init|=
literal|null
decl_stmt|;
name|int
name|best
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Department
argument_list|,
name|Integer
argument_list|>
name|e3
range|:
name|deptCounter
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|dept
operator|==
literal|null
operator|||
name|best
operator|<
name|e3
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|dept
operator|=
name|e3
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|best
operator|=
name|e3
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
name|curriculum
operator|.
name|setDepartment
argument_list|(
name|dept
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|curriculum
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|AcademicAreaMajor
block|{
specifier|private
name|AcademicArea
name|iArea
init|=
literal|null
decl_stmt|;
specifier|private
name|PosMajor
name|iMajor
init|=
literal|null
decl_stmt|;
name|AcademicAreaMajor
parameter_list|(
name|AcademicArea
name|area
parameter_list|,
name|PosMajor
name|major
parameter_list|)
block|{
name|iArea
operator|=
name|area
expr_stmt|;
name|iMajor
operator|=
name|major
expr_stmt|;
block|}
specifier|public
name|AcademicArea
name|getArea
parameter_list|()
block|{
return|return
name|iArea
return|;
block|}
specifier|public
name|PosMajor
name|getMajor
parameter_list|()
block|{
return|return
name|iMajor
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|AcademicAreaMajor
operator|)
condition|)
return|return
literal|false
return|;
name|AcademicAreaMajor
name|a
init|=
operator|(
name|AcademicAreaMajor
operator|)
name|o
decl_stmt|;
return|return
name|a
operator|.
name|getMajor
argument_list|()
operator|.
name|equals
argument_list|(
name|getMajor
argument_list|()
argument_list|)
operator|&&
name|a
operator|.
name|getArea
argument_list|()
operator|.
name|equals
argument_list|(
name|getArea
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getArea
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|^
name|getMajor
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
try|try
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.rootLogger"
argument_list|,
literal|"DEBUG, A1"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1"
argument_list|,
literal|"org.apache.log4j.ConsoleAppender"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1.layout"
argument_list|,
literal|"org.apache.log4j.PatternLayout"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1.layout.ConversionPattern"
argument_list|,
literal|"%-5p %c{2}: %m%n"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate.cfg"
argument_list|,
literal|"WARN"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate.cache.EhCacheProvider"
argument_list|,
literal|"ERROR"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.unitime.commons.hibernate"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.net"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|PropertyConfigurator
operator|.
name|configure
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|HibernateUtil
operator|.
name|configureHibernate
argument_list|(
name|ApplicationProperties
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"initiative"
argument_list|,
literal|"PWL"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"year"
argument_list|,
literal|"2009"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"term"
argument_list|,
literal|"Fall"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Academic session not found, use properties initiative, year, and term to set academic session."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Session: "
operator|+
name|session
argument_list|)
expr_stmt|;
block|}
operator|new
name|MakeCurriculaFromLastlikeDemands
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|update
argument_list|(
name|hibSession
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

