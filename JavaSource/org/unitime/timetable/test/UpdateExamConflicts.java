begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PropertyConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|dataexchange
operator|.
name|DataExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
operator|.
name|BackToBackConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
operator|.
name|DirectConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
operator|.
name|MoreThanTwoADayConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
operator|.
name|Parameters
import|;
end_import

begin_class
specifier|public
class|class
name|UpdateExamConflicts
block|{
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|UpdateExamConflicts
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DecimalFormat
name|sDF
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.0"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|sDebug
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
name|int
name|sCreate
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
name|int
name|sUpdate
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
name|int
name|sDelete
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
name|int
name|sStudents
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
name|int
name|sInstructors
init|=
literal|1
decl_stmt|;
specifier|private
name|int
index|[]
index|[]
index|[]
name|iCnt
decl_stmt|;
specifier|private
name|int
index|[]
index|[]
name|iTotal
decl_stmt|;
specifier|private
name|DataExchangeHelper
name|iHelper
init|=
literal|null
decl_stmt|;
specifier|public
name|UpdateExamConflicts
parameter_list|()
block|{
block|}
specifier|public
name|UpdateExamConflicts
parameter_list|(
name|DataExchangeHelper
name|helper
parameter_list|)
block|{
name|iHelper
operator|=
name|helper
expr_stmt|;
block|}
specifier|private
name|void
name|debug
parameter_list|(
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
operator|!
name|sDebug
condition|)
return|return;
if|if
condition|(
name|iHelper
operator|==
literal|null
condition|)
name|sLog
operator|.
name|debug
argument_list|(
name|message
argument_list|)
expr_stmt|;
else|else
name|iHelper
operator|.
name|debug
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|info
parameter_list|(
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|iHelper
operator|==
literal|null
condition|)
name|sLog
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
else|else
name|iHelper
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateConflicts
parameter_list|(
name|ExamAssignmentInfo
name|assignment
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
throws|throws
name|Exception
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Exam
name|exam
init|=
name|assignment
operator|.
name|getExam
argument_list|(
name|hibSession
argument_list|)
decl_stmt|;
name|HashSet
argument_list|<
name|Exam
argument_list|>
name|otherExams
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|ExamConflict
argument_list|>
name|conflicts
init|=
operator|new
name|HashSet
argument_list|(
name|exam
operator|.
name|getConflicts
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|DirectConflict
name|dc
range|:
name|assignment
operator|.
name|getDirectConflicts
argument_list|()
control|)
block|{
if|if
condition|(
name|dc
operator|.
name|getOtherExam
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|ExamConflict
name|conf
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ExamConflict
name|c
range|:
name|conflicts
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getConflictType
argument_list|()
operator|!=
name|ExamConflict
operator|.
name|sConflictTypeDirect
condition|)
continue|continue;
if|if
condition|(
name|c
operator|.
name|getNrStudents
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
name|Exam
name|other
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|c
operator|.
name|getExams
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|x
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|dc
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getExamId
argument_list|()
argument_list|)
condition|)
block|{
name|other
operator|=
name|x
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|other
operator|==
literal|null
condition|)
continue|continue;
name|conf
operator|=
name|c
expr_stmt|;
break|break;
block|}
name|HashSet
argument_list|<
name|Student
argument_list|>
name|students
init|=
name|getStudents
argument_list|(
name|hibSession
argument_list|,
name|dc
operator|.
name|getStudents
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|exam
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|dc
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getExamId
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
name|iTotal
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeDirect
index|]
operator|+=
name|students
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|debug
argument_list|(
literal|"    new direct "
operator|+
name|assignment
operator|.
name|getExamName
argument_list|()
operator|+
literal|" "
operator|+
name|dc
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getExamName
argument_list|()
operator|+
literal|" ("
operator|+
name|students
operator|.
name|size
argument_list|()
operator|+
literal|" students)"
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|ExamConflict
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setConflictType
argument_list|(
name|ExamConflict
operator|.
name|sConflictTypeDirect
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStudents
argument_list|(
name|students
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNrStudents
argument_list|(
name|students
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|exam
operator|.
name|getConflicts
argument_list|()
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Exam
name|other
init|=
name|dc
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getExam
argument_list|(
name|hibSession
argument_list|)
decl_stmt|;
name|other
operator|.
name|getConflicts
argument_list|()
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|otherExams
operator|.
name|add
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setExams
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|getExams
argument_list|()
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|conf
operator|.
name|getExams
argument_list|()
operator|.
name|add
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|iCnt
index|[
name|sStudents
index|]
index|[
name|conf
operator|.
name|getConflictType
argument_list|()
index|]
index|[
name|sCreate
index|]
operator|+=
name|conf
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|conflicts
operator|.
name|remove
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|boolean
name|change
init|=
operator|(
name|students
operator|.
name|size
argument_list|()
operator|!=
name|conf
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
operator|||
operator|!
name|students
operator|.
name|containsAll
argument_list|(
name|conf
operator|.
name|getStudents
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|change
condition|)
block|{
name|debug
argument_list|(
literal|"    update direct "
operator|+
name|assignment
operator|.
name|getExamName
argument_list|()
operator|+
literal|" "
operator|+
name|dc
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getExamName
argument_list|()
operator|+
literal|" ("
operator|+
name|conf
operator|.
name|getNrStudents
argument_list|()
operator|+
literal|"->"
operator|+
name|students
operator|.
name|size
argument_list|()
operator|+
literal|" students)"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStudents
argument_list|(
name|students
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNrStudents
argument_list|(
name|students
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|iCnt
index|[
name|sStudents
index|]
index|[
name|conf
operator|.
name|getConflictType
argument_list|()
index|]
index|[
name|sUpdate
index|]
operator|+=
name|conf
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|DirectConflict
name|dc
range|:
name|assignment
operator|.
name|getInstructorDirectConflicts
argument_list|()
control|)
block|{
if|if
condition|(
name|dc
operator|.
name|getOtherExam
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|ExamConflict
name|conf
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ExamConflict
name|c
range|:
name|conflicts
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getConflictType
argument_list|()
operator|!=
name|ExamConflict
operator|.
name|sConflictTypeDirect
condition|)
continue|continue;
if|if
condition|(
name|c
operator|.
name|getNrInstructors
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
name|Exam
name|other
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|c
operator|.
name|getExams
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|x
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|dc
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getExamId
argument_list|()
argument_list|)
condition|)
block|{
name|other
operator|=
name|x
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|other
operator|==
literal|null
condition|)
continue|continue;
name|conf
operator|=
name|c
expr_stmt|;
break|break;
block|}
name|HashSet
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|instructors
init|=
name|getInstructors
argument_list|(
name|hibSession
argument_list|,
name|dc
operator|.
name|getStudents
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|exam
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|dc
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getExamId
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
name|iTotal
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeDirect
index|]
operator|+=
name|instructors
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|debug
argument_list|(
literal|"    new direct "
operator|+
name|assignment
operator|.
name|getExamName
argument_list|()
operator|+
literal|" "
operator|+
name|dc
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getExamName
argument_list|()
operator|+
literal|" ("
operator|+
name|instructors
operator|.
name|size
argument_list|()
operator|+
literal|" instructors)"
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|ExamConflict
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setConflictType
argument_list|(
name|ExamConflict
operator|.
name|sConflictTypeDirect
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInstructors
argument_list|(
name|instructors
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNrInstructors
argument_list|(
name|instructors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|exam
operator|.
name|getConflicts
argument_list|()
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Exam
name|other
init|=
name|dc
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getExam
argument_list|(
name|hibSession
argument_list|)
decl_stmt|;
name|other
operator|.
name|getConflicts
argument_list|()
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|otherExams
operator|.
name|add
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setExams
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|getExams
argument_list|()
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|conf
operator|.
name|getExams
argument_list|()
operator|.
name|add
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|iCnt
index|[
name|sInstructors
index|]
index|[
name|conf
operator|.
name|getConflictType
argument_list|()
index|]
index|[
name|sCreate
index|]
operator|+=
name|conf
operator|.
name|getNrInstructors
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|conflicts
operator|.
name|remove
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|boolean
name|change
init|=
operator|(
name|instructors
operator|.
name|size
argument_list|()
operator|!=
name|conf
operator|.
name|getInstructors
argument_list|()
operator|.
name|size
argument_list|()
operator|||
operator|!
name|instructors
operator|.
name|containsAll
argument_list|(
name|conf
operator|.
name|getInstructors
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|change
condition|)
block|{
name|debug
argument_list|(
literal|"    update direct "
operator|+
name|assignment
operator|.
name|getExamName
argument_list|()
operator|+
literal|" "
operator|+
name|dc
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getExamName
argument_list|()
operator|+
literal|" ("
operator|+
name|conf
operator|.
name|getNrInstructors
argument_list|()
operator|+
literal|"->"
operator|+
name|instructors
operator|.
name|size
argument_list|()
operator|+
literal|" instructors)"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInstructors
argument_list|(
name|instructors
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNrInstructors
argument_list|(
name|instructors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|iCnt
index|[
name|sInstructors
index|]
index|[
name|conf
operator|.
name|getConflictType
argument_list|()
index|]
index|[
name|sUpdate
index|]
operator|+=
name|conf
operator|.
name|getNrInstructors
argument_list|()
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|BackToBackConflict
name|btb
range|:
name|assignment
operator|.
name|getBackToBackConflicts
argument_list|()
control|)
block|{
name|int
name|type
init|=
operator|(
name|btb
operator|.
name|isDistance
argument_list|()
condition|?
name|ExamConflict
operator|.
name|sConflictTypeBackToBackDist
else|:
name|ExamConflict
operator|.
name|sConflictTypeBackToBack
operator|)
decl_stmt|;
if|if
condition|(
name|btb
operator|.
name|getOtherExam
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|ExamConflict
name|conf
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ExamConflict
name|c
range|:
name|conflicts
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getConflictType
argument_list|()
operator|!=
name|type
condition|)
continue|continue;
if|if
condition|(
name|c
operator|.
name|getNrStudents
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
name|Exam
name|other
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|c
operator|.
name|getExams
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|x
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|btb
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getExamId
argument_list|()
argument_list|)
condition|)
block|{
name|other
operator|=
name|x
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|other
operator|==
literal|null
condition|)
continue|continue;
name|conf
operator|=
name|c
expr_stmt|;
break|break;
block|}
name|HashSet
argument_list|<
name|Student
argument_list|>
name|students
init|=
name|getStudents
argument_list|(
name|hibSession
argument_list|,
name|btb
operator|.
name|getStudents
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|exam
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|btb
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getExamId
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
name|iTotal
index|[
name|sStudents
index|]
index|[
name|type
index|]
operator|+=
name|students
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|debug
argument_list|(
literal|"    new btb "
operator|+
name|assignment
operator|.
name|getExamName
argument_list|()
operator|+
literal|" "
operator|+
name|btb
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getExamName
argument_list|()
operator|+
literal|" ("
operator|+
name|students
operator|.
name|size
argument_list|()
operator|+
literal|" students)"
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|ExamConflict
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setConflictType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStudents
argument_list|(
name|students
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNrStudents
argument_list|(
name|students
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setDistance
argument_list|(
name|btb
operator|.
name|getDistance
argument_list|()
argument_list|)
expr_stmt|;
name|exam
operator|.
name|getConflicts
argument_list|()
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Exam
name|other
init|=
name|btb
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getExam
argument_list|(
name|hibSession
argument_list|)
decl_stmt|;
name|other
operator|.
name|getConflicts
argument_list|()
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|otherExams
operator|.
name|add
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setExams
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|getExams
argument_list|()
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|conf
operator|.
name|getExams
argument_list|()
operator|.
name|add
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|iCnt
index|[
name|sStudents
index|]
index|[
name|conf
operator|.
name|getConflictType
argument_list|()
index|]
index|[
name|sCreate
index|]
operator|+=
name|conf
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|conflicts
operator|.
name|remove
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|boolean
name|change
init|=
operator|(
name|students
operator|.
name|size
argument_list|()
operator|!=
name|conf
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
operator|||
operator|!
name|students
operator|.
name|containsAll
argument_list|(
name|conf
operator|.
name|getStudents
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|change
condition|)
block|{
name|debug
argument_list|(
literal|"    update btb "
operator|+
name|assignment
operator|.
name|getExamName
argument_list|()
operator|+
literal|" "
operator|+
name|btb
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getExamName
argument_list|()
operator|+
literal|" ("
operator|+
name|conf
operator|.
name|getNrStudents
argument_list|()
operator|+
literal|"->"
operator|+
name|students
operator|.
name|size
argument_list|()
operator|+
literal|" students)"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStudents
argument_list|(
name|students
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNrStudents
argument_list|(
name|students
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setDistance
argument_list|(
name|btb
operator|.
name|getDistance
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|iCnt
index|[
name|sStudents
index|]
index|[
name|conf
operator|.
name|getConflictType
argument_list|()
index|]
index|[
name|sUpdate
index|]
operator|+=
name|conf
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|conf
operator|.
name|getDistance
argument_list|()
operator|==
literal|null
operator|||
name|Math
operator|.
name|abs
argument_list|(
name|conf
operator|.
name|getDistance
argument_list|()
operator|-
name|btb
operator|.
name|getDistance
argument_list|()
argument_list|)
operator|>
literal|1.0
condition|)
block|{
name|debug
argument_list|(
literal|"    update btb "
operator|+
name|assignment
operator|.
name|getExamName
argument_list|()
operator|+
literal|" "
operator|+
name|btb
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getExamName
argument_list|()
operator|+
literal|" (distance "
operator|+
name|conf
operator|.
name|getDistance
argument_list|()
operator|+
literal|" -> "
operator|+
name|btb
operator|.
name|getDistance
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setDistance
argument_list|(
name|btb
operator|.
name|getDistance
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|iCnt
index|[
name|sStudents
index|]
index|[
name|conf
operator|.
name|getConflictType
argument_list|()
index|]
index|[
name|sUpdate
index|]
operator|+=
name|conf
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|BackToBackConflict
name|btb
range|:
name|assignment
operator|.
name|getInstructorBackToBackConflicts
argument_list|()
control|)
block|{
name|int
name|type
init|=
operator|(
name|btb
operator|.
name|isDistance
argument_list|()
condition|?
name|ExamConflict
operator|.
name|sConflictTypeBackToBackDist
else|:
name|ExamConflict
operator|.
name|sConflictTypeBackToBack
operator|)
decl_stmt|;
if|if
condition|(
name|btb
operator|.
name|getOtherExam
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|ExamConflict
name|conf
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ExamConflict
name|c
range|:
name|conflicts
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getConflictType
argument_list|()
operator|!=
name|type
condition|)
continue|continue;
if|if
condition|(
name|c
operator|.
name|getNrInstructors
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
name|Exam
name|other
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|c
operator|.
name|getExams
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|x
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|btb
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getExamId
argument_list|()
argument_list|)
condition|)
block|{
name|other
operator|=
name|x
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|other
operator|==
literal|null
condition|)
continue|continue;
name|conf
operator|=
name|c
expr_stmt|;
break|break;
block|}
name|HashSet
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|instructors
init|=
name|getInstructors
argument_list|(
name|hibSession
argument_list|,
name|btb
operator|.
name|getStudents
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|exam
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|btb
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getExamId
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
name|iTotal
index|[
name|sInstructors
index|]
index|[
name|type
index|]
operator|+=
name|instructors
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|debug
argument_list|(
literal|"    new btb "
operator|+
name|assignment
operator|.
name|getExamName
argument_list|()
operator|+
literal|" "
operator|+
name|btb
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getExamName
argument_list|()
operator|+
literal|" ("
operator|+
name|instructors
operator|.
name|size
argument_list|()
operator|+
literal|" instructors)"
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|ExamConflict
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setConflictType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInstructors
argument_list|(
name|instructors
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNrInstructors
argument_list|(
name|instructors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|btb
operator|.
name|isDistance
argument_list|()
condition|)
name|conf
operator|.
name|setDistance
argument_list|(
name|btb
operator|.
name|getDistance
argument_list|()
argument_list|)
expr_stmt|;
name|exam
operator|.
name|getConflicts
argument_list|()
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Exam
name|other
init|=
name|btb
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getExam
argument_list|(
name|hibSession
argument_list|)
decl_stmt|;
name|other
operator|.
name|getConflicts
argument_list|()
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|otherExams
operator|.
name|add
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setExams
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|getExams
argument_list|()
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|conf
operator|.
name|getExams
argument_list|()
operator|.
name|add
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|iCnt
index|[
name|sInstructors
index|]
index|[
name|conf
operator|.
name|getConflictType
argument_list|()
index|]
index|[
name|sCreate
index|]
operator|+=
name|conf
operator|.
name|getNrInstructors
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|conflicts
operator|.
name|remove
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|boolean
name|change
init|=
operator|(
name|instructors
operator|.
name|size
argument_list|()
operator|!=
name|conf
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
operator|||
operator|!
name|instructors
operator|.
name|containsAll
argument_list|(
name|conf
operator|.
name|getInstructors
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|change
condition|)
block|{
name|debug
argument_list|(
literal|"    update btb "
operator|+
name|assignment
operator|.
name|getExamName
argument_list|()
operator|+
literal|" "
operator|+
name|btb
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getExamName
argument_list|()
operator|+
literal|" ("
operator|+
name|conf
operator|.
name|getNrInstructors
argument_list|()
operator|+
literal|"->"
operator|+
name|instructors
operator|.
name|size
argument_list|()
operator|+
literal|" instructors)"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInstructors
argument_list|(
name|instructors
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNrInstructors
argument_list|(
name|instructors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setDistance
argument_list|(
name|btb
operator|.
name|getDistance
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|iCnt
index|[
name|sInstructors
index|]
index|[
name|conf
operator|.
name|getConflictType
argument_list|()
index|]
index|[
name|sUpdate
index|]
operator|+=
name|conf
operator|.
name|getNrInstructors
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|conf
operator|.
name|getDistance
argument_list|()
operator|==
literal|null
operator|||
name|Math
operator|.
name|abs
argument_list|(
name|conf
operator|.
name|getDistance
argument_list|()
operator|-
name|btb
operator|.
name|getDistance
argument_list|()
argument_list|)
operator|>
literal|1.0
condition|)
block|{
name|debug
argument_list|(
literal|"    update btb "
operator|+
name|assignment
operator|.
name|getExamName
argument_list|()
operator|+
literal|" "
operator|+
name|btb
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getExamName
argument_list|()
operator|+
literal|" (distance "
operator|+
name|conf
operator|.
name|getDistance
argument_list|()
operator|+
literal|" -> "
operator|+
name|btb
operator|.
name|getDistance
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setDistance
argument_list|(
name|btb
operator|.
name|getDistance
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|iCnt
index|[
name|sInstructors
index|]
index|[
name|conf
operator|.
name|getConflictType
argument_list|()
index|]
index|[
name|sUpdate
index|]
operator|+=
name|conf
operator|.
name|getNrInstructors
argument_list|()
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|MoreThanTwoADayConflict
name|m2d
range|:
name|assignment
operator|.
name|getMoreThanTwoADaysConflicts
argument_list|()
control|)
block|{
if|if
condition|(
name|m2d
operator|.
name|getOtherExams
argument_list|()
operator|==
literal|null
operator|||
name|m2d
operator|.
name|getOtherExams
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|ExamConflict
name|conf
init|=
literal|null
decl_stmt|;
name|conf
label|:
for|for
control|(
name|ExamConflict
name|c
range|:
name|conflicts
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getConflictType
argument_list|()
operator|!=
name|ExamConflict
operator|.
name|sConflictTypeMoreThanTwoADay
condition|)
continue|continue;
if|if
condition|(
name|c
operator|.
name|getNrStudents
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
if|if
condition|(
name|c
operator|.
name|getExams
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|+
name|m2d
operator|.
name|getOtherExams
argument_list|()
operator|.
name|size
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|Iterator
name|i
init|=
name|c
operator|.
name|getExams
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|other
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|exam
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|boolean
name|contain
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ExamAssignment
name|x
range|:
name|m2d
operator|.
name|getOtherExams
argument_list|()
control|)
block|{
if|if
condition|(
name|x
operator|.
name|getExamId
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|contain
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|contain
condition|)
continue|continue
name|conf
continue|;
block|}
name|conf
operator|=
name|c
expr_stmt|;
break|break;
block|}
name|HashSet
argument_list|<
name|Student
argument_list|>
name|students
init|=
name|getStudents
argument_list|(
name|hibSession
argument_list|,
name|m2d
operator|.
name|getStudents
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|smallest
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ExamAssignment
name|x
range|:
name|m2d
operator|.
name|getOtherExams
argument_list|()
control|)
if|if
condition|(
name|exam
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|x
operator|.
name|getExamId
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
block|{
name|smallest
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|smallest
condition|)
name|iTotal
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeMoreThanTwoADay
index|]
operator|+=
name|students
operator|.
name|size
argument_list|()
expr_stmt|;
name|String
name|name
init|=
name|assignment
operator|.
name|getExamName
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamAssignment
name|x
range|:
name|m2d
operator|.
name|getOtherExams
argument_list|()
control|)
block|{
name|name
operator|+=
literal|" "
operator|+
name|x
operator|.
name|getExamName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|debug
argument_list|(
literal|"    new m2d "
operator|+
name|name
operator|+
literal|" ("
operator|+
name|students
operator|.
name|size
argument_list|()
operator|+
literal|" students)"
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|ExamConflict
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setConflictType
argument_list|(
name|ExamConflict
operator|.
name|sConflictTypeMoreThanTwoADay
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStudents
argument_list|(
name|students
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNrStudents
argument_list|(
name|students
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|exam
operator|.
name|getConflicts
argument_list|()
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setExams
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|getExams
argument_list|()
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
for|for
control|(
name|ExamAssignment
name|x
range|:
name|m2d
operator|.
name|getOtherExams
argument_list|()
control|)
block|{
name|Exam
name|other
init|=
name|x
operator|.
name|getExam
argument_list|(
name|hibSession
argument_list|)
decl_stmt|;
name|other
operator|.
name|getConflicts
argument_list|()
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|otherExams
operator|.
name|add
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|conf
operator|.
name|getExams
argument_list|()
operator|.
name|add
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|save
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|iCnt
index|[
name|sStudents
index|]
index|[
name|conf
operator|.
name|getConflictType
argument_list|()
index|]
index|[
name|sCreate
index|]
operator|+=
name|conf
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|conflicts
operator|.
name|remove
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|boolean
name|change
init|=
operator|(
name|students
operator|.
name|size
argument_list|()
operator|!=
name|conf
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
operator|||
operator|!
name|students
operator|.
name|containsAll
argument_list|(
name|conf
operator|.
name|getStudents
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|change
condition|)
block|{
name|debug
argument_list|(
literal|"    update m2d "
operator|+
name|name
operator|+
literal|" ("
operator|+
name|conf
operator|.
name|getNrStudents
argument_list|()
operator|+
literal|"->"
operator|+
name|students
operator|.
name|size
argument_list|()
operator|+
literal|" students)"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStudents
argument_list|(
name|students
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNrStudents
argument_list|(
name|students
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|iCnt
index|[
name|sStudents
index|]
index|[
name|conf
operator|.
name|getConflictType
argument_list|()
index|]
index|[
name|sUpdate
index|]
operator|+=
name|conf
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|MoreThanTwoADayConflict
name|m2d
range|:
name|assignment
operator|.
name|getInstructorMoreThanTwoADaysConflicts
argument_list|()
control|)
block|{
if|if
condition|(
name|m2d
operator|.
name|getOtherExams
argument_list|()
operator|==
literal|null
operator|||
name|m2d
operator|.
name|getOtherExams
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|ExamConflict
name|conf
init|=
literal|null
decl_stmt|;
name|conf
label|:
for|for
control|(
name|ExamConflict
name|c
range|:
name|conflicts
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getConflictType
argument_list|()
operator|!=
name|ExamConflict
operator|.
name|sConflictTypeMoreThanTwoADay
condition|)
continue|continue;
if|if
condition|(
name|c
operator|.
name|getNrInstructors
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
if|if
condition|(
name|c
operator|.
name|getExams
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|+
name|m2d
operator|.
name|getOtherExams
argument_list|()
operator|.
name|size
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|Iterator
name|i
init|=
name|c
operator|.
name|getExams
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|other
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|exam
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|boolean
name|contain
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ExamAssignment
name|x
range|:
name|m2d
operator|.
name|getOtherExams
argument_list|()
control|)
block|{
if|if
condition|(
name|x
operator|.
name|getExamId
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|contain
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|contain
condition|)
continue|continue
name|conf
continue|;
block|}
name|conf
operator|=
name|c
expr_stmt|;
break|break;
block|}
name|HashSet
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|instructors
init|=
name|getInstructors
argument_list|(
name|hibSession
argument_list|,
name|m2d
operator|.
name|getStudents
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|smallest
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ExamAssignment
name|x
range|:
name|m2d
operator|.
name|getOtherExams
argument_list|()
control|)
if|if
condition|(
name|exam
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|x
operator|.
name|getExamId
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
block|{
name|smallest
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|smallest
condition|)
name|iTotal
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeMoreThanTwoADay
index|]
operator|+=
name|instructors
operator|.
name|size
argument_list|()
expr_stmt|;
name|String
name|name
init|=
name|assignment
operator|.
name|getExamName
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamAssignment
name|x
range|:
name|m2d
operator|.
name|getOtherExams
argument_list|()
control|)
block|{
name|name
operator|+=
literal|" "
operator|+
name|x
operator|.
name|getExamName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|debug
argument_list|(
literal|"    new btb "
operator|+
name|name
operator|+
literal|" ("
operator|+
name|instructors
operator|.
name|size
argument_list|()
operator|+
literal|" instructors)"
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|ExamConflict
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setConflictType
argument_list|(
name|ExamConflict
operator|.
name|sConflictTypeMoreThanTwoADay
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInstructors
argument_list|(
name|instructors
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNrInstructors
argument_list|(
name|instructors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|exam
operator|.
name|getConflicts
argument_list|()
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setExams
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|getExams
argument_list|()
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
for|for
control|(
name|ExamAssignment
name|x
range|:
name|m2d
operator|.
name|getOtherExams
argument_list|()
control|)
block|{
name|Exam
name|other
init|=
name|x
operator|.
name|getExam
argument_list|(
name|hibSession
argument_list|)
decl_stmt|;
name|other
operator|.
name|getConflicts
argument_list|()
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|otherExams
operator|.
name|add
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|conf
operator|.
name|getExams
argument_list|()
operator|.
name|add
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|save
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|iCnt
index|[
name|sInstructors
index|]
index|[
name|conf
operator|.
name|getConflictType
argument_list|()
index|]
index|[
name|sCreate
index|]
operator|+=
name|conf
operator|.
name|getNrInstructors
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|conflicts
operator|.
name|remove
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|boolean
name|change
init|=
operator|(
name|instructors
operator|.
name|size
argument_list|()
operator|!=
name|conf
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
operator|||
operator|!
name|instructors
operator|.
name|containsAll
argument_list|(
name|conf
operator|.
name|getInstructors
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|change
condition|)
block|{
name|debug
argument_list|(
literal|"    update btb "
operator|+
name|name
operator|+
literal|" ("
operator|+
name|conf
operator|.
name|getNrInstructors
argument_list|()
operator|+
literal|"->"
operator|+
name|instructors
operator|.
name|size
argument_list|()
operator|+
literal|" instructors)"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInstructors
argument_list|(
name|instructors
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNrInstructors
argument_list|(
name|instructors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|iCnt
index|[
name|sInstructors
index|]
index|[
name|conf
operator|.
name|getConflictType
argument_list|()
index|]
index|[
name|sUpdate
index|]
operator|+=
name|conf
operator|.
name|getNrInstructors
argument_list|()
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|ExamConflict
name|conf
range|:
name|conflicts
control|)
block|{
name|String
name|name
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getConflictType
argument_list|()
operator|==
name|ExamConflict
operator|.
name|sConflictTypeDirect
condition|)
name|name
operator|=
literal|"direct"
expr_stmt|;
if|else if
condition|(
name|conf
operator|.
name|getConflictType
argument_list|()
operator|==
name|ExamConflict
operator|.
name|sConflictTypeMoreThanTwoADay
condition|)
name|name
operator|=
literal|"m2d"
expr_stmt|;
if|else if
condition|(
name|conf
operator|.
name|getConflictType
argument_list|()
operator|==
name|ExamConflict
operator|.
name|sConflictTypeBackToBack
condition|)
name|name
operator|=
literal|"btb"
expr_stmt|;
if|else if
condition|(
name|conf
operator|.
name|getConflictType
argument_list|()
operator|==
name|ExamConflict
operator|.
name|sConflictTypeBackToBackDist
condition|)
name|name
operator|=
literal|"btb"
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|getNrInstructors
argument_list|()
operator|!=
literal|null
condition|)
name|iCnt
index|[
name|sInstructors
index|]
index|[
name|conf
operator|.
name|getConflictType
argument_list|()
index|]
index|[
name|sDelete
index|]
operator|+=
name|conf
operator|.
name|getNrInstructors
argument_list|()
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|getNrStudents
argument_list|()
operator|!=
literal|null
condition|)
name|iCnt
index|[
name|sStudents
index|]
index|[
name|conf
operator|.
name|getConflictType
argument_list|()
index|]
index|[
name|sDelete
index|]
operator|+=
name|conf
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|conf
operator|.
name|getExams
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|other
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|name
operator|+=
literal|" "
operator|+
name|other
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|other
operator|.
name|getConflicts
argument_list|()
operator|.
name|remove
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|other
operator|.
name|equals
argument_list|(
name|exam
argument_list|)
condition|)
name|otherExams
operator|.
name|add
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
name|debug
argument_list|(
literal|"  delete "
operator|+
name|name
operator|+
literal|" ("
operator|+
operator|(
name|conf
operator|.
name|getNrStudents
argument_list|()
operator|!=
literal|null
operator|&&
name|conf
operator|.
name|getNrStudents
argument_list|()
operator|>
literal|0
condition|?
name|conf
operator|.
name|getNrStudents
argument_list|()
operator|+
literal|" students"
else|:
literal|""
operator|)
operator|+
operator|(
name|conf
operator|.
name|getNrInstructors
argument_list|()
operator|!=
literal|null
operator|&&
name|conf
operator|.
name|getNrInstructors
argument_list|()
operator|>
literal|0
condition|?
name|conf
operator|.
name|getNrInstructors
argument_list|()
operator|+
literal|" instructors"
else|:
literal|""
operator|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|update
argument_list|(
name|exam
argument_list|)
expr_stmt|;
for|for
control|(
name|Exam
name|other
range|:
name|otherExams
control|)
name|hibSession
operator|.
name|update
argument_list|(
name|other
argument_list|)
expr_stmt|;
comment|//hibSession.flush();
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|protected
specifier|static
name|HashSet
argument_list|<
name|Student
argument_list|>
name|getStudents
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Collection
name|studentIds
parameter_list|)
block|{
name|HashSet
argument_list|<
name|Student
argument_list|>
name|students
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|studentIds
operator|==
literal|null
operator|||
name|studentIds
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|students
return|;
for|for
control|(
name|Iterator
name|i
init|=
name|studentIds
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Student
name|student
init|=
operator|new
name|StudentDAO
argument_list|()
operator|.
name|get
argument_list|(
name|studentId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|!=
literal|null
condition|)
name|students
operator|.
name|add
argument_list|(
name|student
argument_list|)
expr_stmt|;
else|else
name|sLog
operator|.
name|warn
argument_list|(
literal|"Student "
operator|+
name|studentId
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
block|}
return|return
name|students
return|;
block|}
specifier|protected
specifier|static
name|HashSet
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|getInstructors
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Collection
name|instructorIds
parameter_list|)
block|{
name|HashSet
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|instructors
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|instructorIds
operator|==
literal|null
operator|||
name|instructorIds
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|instructors
return|;
for|for
control|(
name|Iterator
name|i
init|=
name|instructorIds
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Long
name|instructorId
init|=
operator|(
name|Long
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|DepartmentalInstructor
name|instructor
init|=
operator|new
name|DepartmentalInstructorDAO
argument_list|()
operator|.
name|get
argument_list|(
name|instructorId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructor
operator|!=
literal|null
condition|)
name|instructors
operator|.
name|add
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
else|else
name|sLog
operator|.
name|warn
argument_list|(
literal|"Instructor "
operator|+
name|instructorId
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
block|}
return|return
name|instructors
return|;
block|}
specifier|public
name|void
name|simpleCheck
parameter_list|(
name|ExamAssignmentInfo
name|e1
parameter_list|,
name|ExamAssignmentInfo
name|e2
parameter_list|)
block|{
if|if
condition|(
name|e1
operator|.
name|getNrDirectConflicts
argument_list|()
operator|!=
name|e2
operator|.
name|getNrDirectConflicts
argument_list|()
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Wrong number of direct student conflicts for "
operator|+
name|e1
operator|.
name|getExamName
argument_list|()
operator|+
literal|" ("
operator|+
name|e1
operator|.
name|getNrDirectConflicts
argument_list|()
operator|+
literal|"!="
operator|+
name|e2
operator|.
name|getNrDirectConflicts
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|e1
operator|.
name|getNrBackToBackConflicts
argument_list|()
operator|!=
name|e2
operator|.
name|getNrBackToBackConflicts
argument_list|()
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Wrong number of back-to-back student conflicts for "
operator|+
name|e1
operator|.
name|getExamName
argument_list|()
operator|+
literal|" ("
operator|+
name|e1
operator|.
name|getNrBackToBackConflicts
argument_list|()
operator|+
literal|"!="
operator|+
name|e2
operator|.
name|getNrBackToBackConflicts
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|e1
operator|.
name|getNrMoreThanTwoConflicts
argument_list|()
operator|!=
name|e2
operator|.
name|getNrMoreThanTwoConflicts
argument_list|()
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Wrong number of>2 exams a day student conflicts for "
operator|+
name|e1
operator|.
name|getExamName
argument_list|()
operator|+
literal|" ("
operator|+
name|e1
operator|.
name|getNrMoreThanTwoConflicts
argument_list|()
operator|+
literal|"!="
operator|+
name|e2
operator|.
name|getNrMoreThanTwoConflicts
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|e1
operator|.
name|getNrInstructorDirectConflicts
argument_list|()
operator|!=
name|e2
operator|.
name|getNrInstructorDirectConflicts
argument_list|()
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Wrong number of direct instructor conflicts for "
operator|+
name|e1
operator|.
name|getExamName
argument_list|()
operator|+
literal|" ("
operator|+
name|e1
operator|.
name|getNrInstructorDirectConflicts
argument_list|()
operator|+
literal|"!="
operator|+
name|e2
operator|.
name|getNrInstructorDirectConflicts
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|e1
operator|.
name|getNrInstructorBackToBackConflicts
argument_list|()
operator|!=
name|e2
operator|.
name|getNrInstructorBackToBackConflicts
argument_list|()
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Wrong number of back-to-back instructor conflicts for "
operator|+
name|e1
operator|.
name|getExamName
argument_list|()
operator|+
literal|" ("
operator|+
name|e1
operator|.
name|getNrInstructorBackToBackConflicts
argument_list|()
operator|+
literal|"!="
operator|+
name|e2
operator|.
name|getNrInstructorBackToBackConflicts
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|e1
operator|.
name|getNrInstructorMoreThanTwoConflicts
argument_list|()
operator|!=
name|e2
operator|.
name|getNrInstructorMoreThanTwoConflicts
argument_list|()
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Wrong number of>2 exams a day instructor conflicts for "
operator|+
name|e1
operator|.
name|getExamName
argument_list|()
operator|+
literal|" ("
operator|+
name|e1
operator|.
name|getNrInstructorMoreThanTwoConflicts
argument_list|()
operator|+
literal|"!="
operator|+
name|e2
operator|.
name|getNrInstructorMoreThanTwoConflicts
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|loadExams
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|int
name|examType
parameter_list|)
throws|throws
name|Exception
block|{
name|info
argument_list|(
literal|"Loading exams..."
argument_list|)
expr_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Exam
argument_list|>
name|exams
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select x from Exam x where x.session.uniqueId=:sessionId and x.examType=:examType"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|examType
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|exams
operator|.
name|put
argument_list|(
name|exam
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|exam
argument_list|)
expr_stmt|;
block|}
name|info
argument_list|(
literal|"  Fetching related objects (class)..."
argument_list|)
expr_stmt|;
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c from Class_ c, ExamOwner o where o.exam.session.uniqueId=:sessionId and o.exam.examType=:examType and o.ownerType=:classType and c.uniqueId=o.ownerId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|examType
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"classType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
name|info
argument_list|(
literal|"  Fetching related objects (config)..."
argument_list|)
expr_stmt|;
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c from InstrOfferingConfig c, ExamOwner o where o.exam.session.uniqueId=:sessionId and o.exam.examType=:examType and o.ownerType=:configType and c.uniqueId=o.ownerId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|examType
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"configType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
name|info
argument_list|(
literal|"  Fetching related objects (course)..."
argument_list|)
expr_stmt|;
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c from CourseOffering c, ExamOwner o where o.exam.session.uniqueId=:sessionId and o.exam.examType=:examType and o.ownerType=:courseType and c.uniqueId=o.ownerId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|examType
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"courseType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
name|info
argument_list|(
literal|"  Fetching related objects (offering)..."
argument_list|)
expr_stmt|;
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c from InstructionalOffering c, ExamOwner o where o.exam.session.uniqueId=:sessionId and o.exam.examType=:examType and o.ownerType=:offeringType and c.uniqueId=o.ownerId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|examType
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"offeringType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|owner2students
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Exam
argument_list|>
argument_list|>
name|student2exams
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
name|owner2course2students
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|info
argument_list|(
literal|"  Loading students (class)..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select x.uniqueId, o.uniqueId, e.student.uniqueId, e.courseOffering.uniqueId from "
operator|+
literal|"Exam x inner join x.owners o, "
operator|+
literal|"StudentClassEnrollment e inner join e.clazz c "
operator|+
literal|"where x.session.uniqueId=:sessionId and x.examType=:examType and "
operator|+
literal|"o.ownerType="
operator|+
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
operator|.
name|sOwnerTypeClass
operator|+
literal|" and "
operator|+
literal|"o.ownerId=c.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|examType
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|examId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|ownerId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsOfOwner
init|=
name|owner2students
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentsOfOwner
operator|==
literal|null
condition|)
block|{
name|studentsOfOwner
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|owner2students
operator|.
name|put
argument_list|(
name|ownerId
argument_list|,
name|studentsOfOwner
argument_list|)
expr_stmt|;
block|}
name|studentsOfOwner
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Exam
argument_list|>
name|examsOfStudent
init|=
name|student2exams
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|examsOfStudent
operator|==
literal|null
condition|)
block|{
name|examsOfStudent
operator|=
operator|new
name|HashSet
argument_list|<
name|Exam
argument_list|>
argument_list|()
expr_stmt|;
name|student2exams
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|examsOfStudent
argument_list|)
expr_stmt|;
block|}
name|examsOfStudent
operator|.
name|add
argument_list|(
name|exams
operator|.
name|get
argument_list|(
name|examId
argument_list|)
argument_list|)
expr_stmt|;
name|Long
name|courseId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|3
index|]
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|course2students
init|=
name|owner2course2students
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|course2students
operator|==
literal|null
condition|)
block|{
name|course2students
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|owner2course2students
operator|.
name|put
argument_list|(
name|ownerId
argument_list|,
name|course2students
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsOfCourse
init|=
name|course2students
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentsOfCourse
operator|==
literal|null
condition|)
block|{
name|studentsOfCourse
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|course2students
operator|.
name|put
argument_list|(
name|courseId
argument_list|,
name|studentsOfCourse
argument_list|)
expr_stmt|;
block|}
name|studentsOfCourse
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
block|}
name|info
argument_list|(
literal|"  Loading students (config)..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select x.uniqueId, o.uniqueId, e.student.uniqueId, e.courseOffering.uniqueId from "
operator|+
literal|"Exam x inner join x.owners o, "
operator|+
literal|"StudentClassEnrollment e inner join e.clazz c "
operator|+
literal|"inner join c.schedulingSubpart.instrOfferingConfig ioc "
operator|+
literal|"where x.session.uniqueId=:sessionId and x.examType=:examType and "
operator|+
literal|"o.ownerType="
operator|+
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
operator|.
name|sOwnerTypeConfig
operator|+
literal|" and "
operator|+
literal|"o.ownerId=ioc.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|examType
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|examId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|ownerId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsOfOwner
init|=
name|owner2students
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentsOfOwner
operator|==
literal|null
condition|)
block|{
name|studentsOfOwner
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|owner2students
operator|.
name|put
argument_list|(
name|ownerId
argument_list|,
name|studentsOfOwner
argument_list|)
expr_stmt|;
block|}
name|studentsOfOwner
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Exam
argument_list|>
name|examsOfStudent
init|=
name|student2exams
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|examsOfStudent
operator|==
literal|null
condition|)
block|{
name|examsOfStudent
operator|=
operator|new
name|HashSet
argument_list|<
name|Exam
argument_list|>
argument_list|()
expr_stmt|;
name|student2exams
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|examsOfStudent
argument_list|)
expr_stmt|;
block|}
name|examsOfStudent
operator|.
name|add
argument_list|(
name|exams
operator|.
name|get
argument_list|(
name|examId
argument_list|)
argument_list|)
expr_stmt|;
name|Long
name|courseId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|3
index|]
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|course2students
init|=
name|owner2course2students
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|course2students
operator|==
literal|null
condition|)
block|{
name|course2students
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|owner2course2students
operator|.
name|put
argument_list|(
name|ownerId
argument_list|,
name|course2students
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsOfCourse
init|=
name|course2students
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentsOfCourse
operator|==
literal|null
condition|)
block|{
name|studentsOfCourse
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|course2students
operator|.
name|put
argument_list|(
name|courseId
argument_list|,
name|studentsOfCourse
argument_list|)
expr_stmt|;
block|}
name|studentsOfCourse
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
block|}
name|info
argument_list|(
literal|"  Loading students (course)..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select x.uniqueId, o.uniqueId, e.student.uniqueId, e.courseOffering.uniqueId from "
operator|+
literal|"Exam x inner join x.owners o, "
operator|+
literal|"StudentClassEnrollment e inner join e.courseOffering co "
operator|+
literal|"where x.session.uniqueId=:sessionId and x.examType=:examType and "
operator|+
literal|"o.ownerType="
operator|+
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
operator|.
name|sOwnerTypeCourse
operator|+
literal|" and "
operator|+
literal|"o.ownerId=co.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|examType
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|examId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|ownerId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsOfOwner
init|=
name|owner2students
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentsOfOwner
operator|==
literal|null
condition|)
block|{
name|studentsOfOwner
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|owner2students
operator|.
name|put
argument_list|(
name|ownerId
argument_list|,
name|studentsOfOwner
argument_list|)
expr_stmt|;
block|}
name|studentsOfOwner
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Exam
argument_list|>
name|examsOfStudent
init|=
name|student2exams
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|examsOfStudent
operator|==
literal|null
condition|)
block|{
name|examsOfStudent
operator|=
operator|new
name|HashSet
argument_list|<
name|Exam
argument_list|>
argument_list|()
expr_stmt|;
name|student2exams
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|examsOfStudent
argument_list|)
expr_stmt|;
block|}
name|examsOfStudent
operator|.
name|add
argument_list|(
name|exams
operator|.
name|get
argument_list|(
name|examId
argument_list|)
argument_list|)
expr_stmt|;
name|Long
name|courseId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|3
index|]
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|course2students
init|=
name|owner2course2students
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|course2students
operator|==
literal|null
condition|)
block|{
name|course2students
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|owner2course2students
operator|.
name|put
argument_list|(
name|ownerId
argument_list|,
name|course2students
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsOfCourse
init|=
name|course2students
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentsOfCourse
operator|==
literal|null
condition|)
block|{
name|studentsOfCourse
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|course2students
operator|.
name|put
argument_list|(
name|courseId
argument_list|,
name|studentsOfCourse
argument_list|)
expr_stmt|;
block|}
name|studentsOfCourse
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
block|}
name|info
argument_list|(
literal|"  Loading students (offering)..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select x.uniqueId, o.uniqueId, e.student.uniqueId, e.courseOffering.uniqueId from "
operator|+
literal|"Exam x inner join x.owners o, "
operator|+
literal|"StudentClassEnrollment e inner join e.courseOffering.instructionalOffering io "
operator|+
literal|"where x.session.uniqueId=:sessionId and x.examType=:examType and "
operator|+
literal|"o.ownerType="
operator|+
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
operator|.
name|sOwnerTypeOffering
operator|+
literal|" and "
operator|+
literal|"o.ownerId=io.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|examType
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|examId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|ownerId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsOfOwner
init|=
name|owner2students
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentsOfOwner
operator|==
literal|null
condition|)
block|{
name|studentsOfOwner
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|owner2students
operator|.
name|put
argument_list|(
name|ownerId
argument_list|,
name|studentsOfOwner
argument_list|)
expr_stmt|;
block|}
name|studentsOfOwner
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Exam
argument_list|>
name|examsOfStudent
init|=
name|student2exams
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|examsOfStudent
operator|==
literal|null
condition|)
block|{
name|examsOfStudent
operator|=
operator|new
name|HashSet
argument_list|<
name|Exam
argument_list|>
argument_list|()
expr_stmt|;
name|student2exams
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|examsOfStudent
argument_list|)
expr_stmt|;
block|}
name|examsOfStudent
operator|.
name|add
argument_list|(
name|exams
operator|.
name|get
argument_list|(
name|examId
argument_list|)
argument_list|)
expr_stmt|;
name|Long
name|courseId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|3
index|]
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|course2students
init|=
name|owner2course2students
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|course2students
operator|==
literal|null
condition|)
block|{
name|course2students
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|owner2course2students
operator|.
name|put
argument_list|(
name|ownerId
argument_list|,
name|course2students
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsOfCourse
init|=
name|course2students
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentsOfCourse
operator|==
literal|null
condition|)
block|{
name|studentsOfCourse
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|course2students
operator|.
name|put
argument_list|(
name|courseId
argument_list|,
name|studentsOfCourse
argument_list|)
expr_stmt|;
block|}
name|studentsOfCourse
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Meeting
argument_list|>
argument_list|>
name|period2meetings
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Parameters
name|p
init|=
operator|new
name|Parameters
argument_list|(
name|sessionId
argument_list|,
name|examType
argument_list|)
decl_stmt|;
name|info
argument_list|(
literal|"  Creating exam assignments..."
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|ret
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|Exam
argument_list|>
name|e
init|=
name|exams
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|ExamAssignmentInfo
name|info
init|=
operator|new
name|ExamAssignmentInfo
argument_list|(
name|exam
argument_list|,
name|owner2students
argument_list|,
name|owner2course2students
argument_list|,
name|student2exams
argument_list|,
name|period2meetings
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|info
argument_list|(
literal|"Exams loaded in "
operator|+
name|sDF
operator|.
name|format
argument_list|(
operator|(
name|t1
operator|-
name|t0
operator|)
operator|/
literal|1000.0
argument_list|)
operator|+
literal|"s."
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|void
name|update
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Integer
name|examType
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
throws|throws
name|Exception
block|{
name|iCnt
operator|=
operator|new
name|int
index|[]
index|[]
index|[]
block|{
block|{
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|}
expr_stmt|;
name|iTotal
operator|=
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
expr_stmt|;
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
init|=
name|loadExams
argument_list|(
name|sessionId
argument_list|,
name|examType
argument_list|)
decl_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
name|debug
argument_list|(
literal|"Checking "
operator|+
name|exam
operator|.
name|getExamName
argument_list|()
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|updateConflicts
argument_list|(
name|exam
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
comment|//simpleCheck(exam, new ExamAssignmentInfo(exam.getExam(),true));
block|}
if|if
condition|(
name|iTotal
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeDirect
index|]
operator|>
literal|0
condition|)
block|{
name|info
argument_list|(
literal|"Direct student conflicts: "
operator|+
name|iTotal
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeDirect
index|]
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"    created: "
operator|+
name|iCnt
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeDirect
index|]
index|[
name|sCreate
index|]
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"    updated: "
operator|+
name|iCnt
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeDirect
index|]
index|[
name|sUpdate
index|]
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"    deleted: "
operator|+
name|iCnt
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeDirect
index|]
index|[
name|sDelete
index|]
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"  unchanged: "
operator|+
operator|(
name|iTotal
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeDirect
index|]
operator|-
name|iCnt
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeDirect
index|]
index|[
name|sCreate
index|]
operator|-
name|iCnt
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeDirect
index|]
index|[
name|sUpdate
index|]
operator|-
name|iCnt
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeDirect
index|]
index|[
name|sDelete
index|]
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iTotal
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeMoreThanTwoADay
index|]
operator|>
literal|0
condition|)
block|{
name|info
argument_list|(
literal|">2 exams a day student conflicts: "
operator|+
name|iTotal
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeMoreThanTwoADay
index|]
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"    created: "
operator|+
name|iCnt
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeMoreThanTwoADay
index|]
index|[
name|sCreate
index|]
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"    updated: "
operator|+
name|iCnt
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeMoreThanTwoADay
index|]
index|[
name|sUpdate
index|]
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"    deleted: "
operator|+
name|iCnt
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeMoreThanTwoADay
index|]
index|[
name|sDelete
index|]
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"  unchanged: "
operator|+
operator|(
name|iTotal
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeMoreThanTwoADay
index|]
operator|-
name|iCnt
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeMoreThanTwoADay
index|]
index|[
name|sCreate
index|]
operator|-
name|iCnt
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeMoreThanTwoADay
index|]
index|[
name|sUpdate
index|]
operator|-
name|iCnt
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeMoreThanTwoADay
index|]
index|[
name|sDelete
index|]
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iTotal
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBack
index|]
operator|>
literal|0
condition|)
block|{
name|info
argument_list|(
literal|"Back-to-back student conflicts: "
operator|+
name|iTotal
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBack
index|]
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"    created: "
operator|+
name|iCnt
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBack
index|]
index|[
name|sCreate
index|]
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"    updated: "
operator|+
name|iCnt
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBack
index|]
index|[
name|sUpdate
index|]
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"    deleted: "
operator|+
name|iCnt
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBack
index|]
index|[
name|sDelete
index|]
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"  unchanged: "
operator|+
operator|(
name|iTotal
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBack
index|]
operator|-
name|iCnt
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBack
index|]
index|[
name|sCreate
index|]
operator|-
name|iCnt
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBack
index|]
index|[
name|sUpdate
index|]
operator|-
name|iCnt
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBack
index|]
index|[
name|sDelete
index|]
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iTotal
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBackDist
index|]
operator|>
literal|0
condition|)
block|{
name|info
argument_list|(
literal|"Distance back-to-back student conflicts: "
operator|+
name|iTotal
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBackDist
index|]
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"    created: "
operator|+
name|iCnt
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBackDist
index|]
index|[
name|sCreate
index|]
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"    updated: "
operator|+
name|iCnt
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBackDist
index|]
index|[
name|sUpdate
index|]
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"    deleted: "
operator|+
name|iCnt
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBackDist
index|]
index|[
name|sDelete
index|]
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"  unchanged: "
operator|+
operator|(
name|iTotal
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBackDist
index|]
operator|-
name|iCnt
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBackDist
index|]
index|[
name|sCreate
index|]
operator|-
name|iCnt
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBackDist
index|]
index|[
name|sUpdate
index|]
operator|-
name|iCnt
index|[
name|sStudents
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBackDist
index|]
index|[
name|sDelete
index|]
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iTotal
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeDirect
index|]
operator|>
literal|0
condition|)
block|{
name|info
argument_list|(
literal|"Direct instructor conflicts: "
operator|+
name|iTotal
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeDirect
index|]
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"    created: "
operator|+
name|iCnt
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeDirect
index|]
index|[
name|sCreate
index|]
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"    updated: "
operator|+
name|iCnt
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeDirect
index|]
index|[
name|sUpdate
index|]
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"    deleted: "
operator|+
name|iCnt
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeDirect
index|]
index|[
name|sDelete
index|]
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"  unchanged: "
operator|+
operator|(
name|iTotal
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeDirect
index|]
operator|-
name|iCnt
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeDirect
index|]
index|[
name|sCreate
index|]
operator|-
name|iCnt
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeDirect
index|]
index|[
name|sUpdate
index|]
operator|-
name|iCnt
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeDirect
index|]
index|[
name|sDelete
index|]
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iTotal
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeMoreThanTwoADay
index|]
operator|>
literal|0
condition|)
block|{
name|info
argument_list|(
literal|">2 exams a day instructor conflicts: "
operator|+
name|iTotal
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeMoreThanTwoADay
index|]
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"    created: "
operator|+
name|iCnt
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeMoreThanTwoADay
index|]
index|[
name|sCreate
index|]
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"    updated: "
operator|+
name|iCnt
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeMoreThanTwoADay
index|]
index|[
name|sUpdate
index|]
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"    deleted: "
operator|+
name|iCnt
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeMoreThanTwoADay
index|]
index|[
name|sDelete
index|]
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"  unchanged: "
operator|+
operator|(
name|iTotal
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeMoreThanTwoADay
index|]
operator|-
name|iCnt
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeMoreThanTwoADay
index|]
index|[
name|sCreate
index|]
operator|-
name|iCnt
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeMoreThanTwoADay
index|]
index|[
name|sUpdate
index|]
operator|-
name|iCnt
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeMoreThanTwoADay
index|]
index|[
name|sDelete
index|]
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iTotal
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBack
index|]
operator|>
literal|0
condition|)
block|{
name|info
argument_list|(
literal|"Back-to-back instructor conflicts: "
operator|+
name|iTotal
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBack
index|]
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"    created: "
operator|+
name|iCnt
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBack
index|]
index|[
name|sCreate
index|]
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"    updated: "
operator|+
name|iCnt
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBack
index|]
index|[
name|sUpdate
index|]
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"    deleted: "
operator|+
name|iCnt
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBack
index|]
index|[
name|sDelete
index|]
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"  unchanged: "
operator|+
operator|(
name|iTotal
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBack
index|]
operator|-
name|iCnt
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBack
index|]
index|[
name|sCreate
index|]
operator|-
name|iCnt
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBack
index|]
index|[
name|sUpdate
index|]
operator|-
name|iCnt
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBack
index|]
index|[
name|sDelete
index|]
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iTotal
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBackDist
index|]
operator|>
literal|0
condition|)
block|{
name|info
argument_list|(
literal|"Distance back-to-back instructor conflicts: "
operator|+
name|iTotal
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBackDist
index|]
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"    created: "
operator|+
name|iCnt
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBackDist
index|]
index|[
name|sCreate
index|]
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"    updated: "
operator|+
name|iCnt
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBackDist
index|]
index|[
name|sUpdate
index|]
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"    deleted: "
operator|+
name|iCnt
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBackDist
index|]
index|[
name|sDelete
index|]
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"  unchanged: "
operator|+
operator|(
name|iTotal
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBackDist
index|]
operator|-
name|iCnt
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBackDist
index|]
index|[
name|sCreate
index|]
operator|-
name|iCnt
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBackDist
index|]
index|[
name|sUpdate
index|]
operator|-
name|iCnt
index|[
name|sInstructors
index|]
index|[
name|ExamConflict
operator|.
name|sConflictTypeBackToBackDist
index|]
index|[
name|sDelete
index|]
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
try|try
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.rootLogger"
argument_list|,
literal|"DEBUG, A1"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1"
argument_list|,
literal|"org.apache.log4j.ConsoleAppender"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1.layout"
argument_list|,
literal|"org.apache.log4j.PatternLayout"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1.layout.ConversionPattern"
argument_list|,
literal|"%-5p %c{2}: %m%n"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate.cfg"
argument_list|,
literal|"WARN"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate.cache.EhCacheProvider"
argument_list|,
literal|"ERROR"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.unitime.commons.hibernate"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.net"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|PropertyConfigurator
operator|.
name|configure
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|HibernateUtil
operator|.
name|configureHibernate
argument_list|(
name|ApplicationProperties
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"initiative"
argument_list|,
literal|"PWL"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"year"
argument_list|,
literal|"2008"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"term"
argument_list|,
literal|"Fal"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Academic session not found, use properties initiative, year, and term to set academic session."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Session: "
operator|+
name|session
argument_list|)
expr_stmt|;
block|}
name|int
name|examType
init|=
operator|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"type"
argument_list|,
literal|"final"
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"final"
argument_list|)
condition|?
name|Exam
operator|.
name|sExamTypeFinal
else|:
name|Exam
operator|.
name|sExamTypeMidterm
operator|)
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
operator|new
name|UpdateExamConflicts
argument_list|()
operator|.
name|update
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|examType
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

