begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2010 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PropertyConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DistanceMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Building
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|BuildingPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomDept
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeaturePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroupPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomSharingModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePatternModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_comment
comment|/**  * Fix the most common course timetabling inconsistencies in the data. These are usually caused either by the use  * of the interactive solver (breaking hard constraints like required time or room) or by changing  * of the input data (e.g., class limit) after a solution is committed.   *   * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|FixCourseTimetablingInconsistencies
block|{
specifier|protected
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|FixCourseTimetablingInconsistencies
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Long
name|iSessionId
decl_stmt|;
specifier|private
name|org
operator|.
name|hibernate
operator|.
name|Session
name|iHibSession
decl_stmt|;
specifier|private
name|DistanceMetric
name|iDistanceMetric
decl_stmt|;
specifier|public
name|FixCourseTimetablingInconsistencies
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|iSessionId
operator|=
name|sessionId
expr_stmt|;
name|iDistanceMetric
operator|=
operator|new
name|DistanceMetric
argument_list|(
name|DistanceMetric
operator|.
name|Ellipsoid
operator|.
name|valueOf
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.distance.ellipsoid"
argument_list|,
name|DistanceMetric
operator|.
name|Ellipsoid
operator|.
name|LEGACY
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|fixAll
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|iHibSession
operator|=
name|hibSession
expr_stmt|;
name|List
argument_list|<
name|Assignment
argument_list|>
name|assignments
init|=
operator|(
name|List
argument_list|<
name|Assignment
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select a from Assignment a "
operator|+
literal|"where a.solution.commited = true and a.solution.owner.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Location
argument_list|,
name|List
argument_list|<
name|Assignment
argument_list|>
argument_list|>
name|roomAssignments
init|=
operator|new
name|Hashtable
argument_list|<
name|Location
argument_list|,
name|List
argument_list|<
name|Assignment
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Assignment
argument_list|>
argument_list|>
name|instructorAssignments
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Assignment
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Assignment
name|a
range|:
name|assignments
control|)
block|{
name|Class_
name|c
init|=
name|a
operator|.
name|getClazz
argument_list|()
decl_stmt|;
name|boolean
name|save
init|=
literal|false
decl_stmt|;
name|fixInstructors
argument_list|(
name|c
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|fixRoomSharing
argument_list|(
name|c
argument_list|,
name|a
argument_list|)
expr_stmt|;
if|if
condition|(
name|fixDatePattern
argument_list|(
name|c
argument_list|,
name|a
argument_list|)
condition|)
name|save
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|fixRequiredTime
argument_list|(
name|c
argument_list|,
name|a
argument_list|)
condition|)
name|save
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|fixNrAssignedRooms
argument_list|(
name|c
argument_list|,
name|a
argument_list|)
condition|)
name|save
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|fixRequiredRoom
argument_list|(
name|c
argument_list|,
name|a
argument_list|)
condition|)
name|save
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|fixRequiredBuilding
argument_list|(
name|c
argument_list|,
name|a
argument_list|)
condition|)
name|save
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|fixRoomSize
argument_list|(
name|c
argument_list|,
name|a
argument_list|)
condition|)
name|save
operator|=
literal|true
expr_stmt|;
name|fixRequiredFeatures
argument_list|(
name|c
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|fixRequiredGroups
argument_list|(
name|c
argument_list|,
name|a
argument_list|)
expr_stmt|;
for|for
control|(
name|Location
name|loc
range|:
name|a
operator|.
name|getRooms
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Assignment
argument_list|>
name|ax
init|=
name|roomAssignments
operator|.
name|get
argument_list|(
name|loc
argument_list|)
decl_stmt|;
if|if
condition|(
name|ax
operator|==
literal|null
condition|)
block|{
name|ax
operator|=
operator|new
name|ArrayList
argument_list|<
name|Assignment
argument_list|>
argument_list|()
expr_stmt|;
name|roomAssignments
operator|.
name|put
argument_list|(
name|loc
argument_list|,
name|ax
argument_list|)
expr_stmt|;
block|}
name|ax
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|DepartmentalInstructor
name|ins
range|:
name|a
operator|.
name|getInstructors
argument_list|()
control|)
block|{
if|if
condition|(
name|ins
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
operator|||
name|ins
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|List
argument_list|<
name|Assignment
argument_list|>
name|ax
init|=
name|instructorAssignments
operator|.
name|get
argument_list|(
name|ins
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ax
operator|==
literal|null
condition|)
block|{
name|ax
operator|=
operator|new
name|ArrayList
argument_list|<
name|Assignment
argument_list|>
argument_list|()
expr_stmt|;
name|instructorAssignments
operator|.
name|put
argument_list|(
name|ins
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|ax
argument_list|)
expr_stmt|;
block|}
name|ax
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|save
condition|)
block|{
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|checkRoomConstraints
argument_list|(
name|roomAssignments
argument_list|)
expr_stmt|;
name|checkInstructorAssignments
argument_list|(
name|instructorAssignments
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|checkRoomConstraints
parameter_list|(
name|Hashtable
argument_list|<
name|Location
argument_list|,
name|List
argument_list|<
name|Assignment
argument_list|>
argument_list|>
name|roomAssignments
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Location
argument_list|,
name|List
argument_list|<
name|Assignment
argument_list|>
argument_list|>
name|entry
range|:
name|roomAssignments
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Location
name|location
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
condition|)
continue|continue;
name|List
argument_list|<
name|Assignment
argument_list|>
name|ax
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|DistributionType
name|canShareRoomType
init|=
operator|(
name|DistributionType
operator|)
name|iHibSession
operator|.
name|createQuery
argument_list|(
literal|"select d from DistributionType d where d.reference = :type"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"type"
argument_list|,
literal|"CAN_SHARE_ROOM"
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
for|for
control|(
name|Assignment
name|a
range|:
name|ax
control|)
block|{
name|b
label|:
for|for
control|(
name|Assignment
name|b
range|:
name|ax
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getUniqueId
argument_list|()
operator|>=
name|b
operator|.
name|getUniqueId
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|a
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|hasIntersection
argument_list|(
name|b
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|DistributionPref
argument_list|>
name|dist
init|=
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|effectivePreferences
argument_list|(
name|DistributionPref
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|DistributionPref
name|d
range|:
name|dist
control|)
block|{
if|if
condition|(
name|d
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getReference
argument_list|()
operator|.
name|equals
argument_list|(
literal|"CAN_SHARE_ROOM"
argument_list|)
operator|||
name|d
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getReference
argument_list|()
operator|.
name|equals
argument_list|(
literal|"MEET_WITH"
argument_list|)
condition|)
block|{
for|for
control|(
name|DistributionObject
name|o
range|:
name|d
operator|.
name|getDistributionObjects
argument_list|()
control|)
block|{
if|if
condition|(
name|o
operator|.
name|getPrefGroup
argument_list|()
operator|.
name|equals
argument_list|(
name|b
operator|.
name|getClazz
argument_list|()
argument_list|)
operator|||
name|o
operator|.
name|getPrefGroup
argument_list|()
operator|.
name|equals
argument_list|(
name|b
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
condition|)
block|{
name|int
name|minSize
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|getRoomRatio
argument_list|()
operator|*
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|getExpectedCapacity
argument_list|()
operator|+
name|b
operator|.
name|getClazz
argument_list|()
operator|.
name|getRoomRatio
argument_list|()
operator|*
name|b
operator|.
name|getClazz
argument_list|()
operator|.
name|getExpectedCapacity
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|location
operator|.
name|getCapacity
argument_list|()
operator|<
name|minSize
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Allowed overlap of classes in room "
operator|+
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|":\n"
operator|+
literal|"  "
operator|+
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" "
operator|+
name|a
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getLongName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"  "
operator|+
name|b
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" "
operator|+
name|b
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getLongName
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|warn
argument_list|(
literal|"But the he room is too small ("
operator|+
name|location
operator|.
name|getCapacity
argument_list|()
operator|+
literal|"< "
operator|+
name|minSize
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|float
name|ratio
init|=
operator|(
operator|(
name|float
operator|)
name|location
operator|.
name|getCapacity
argument_list|()
operator|)
operator|/
name|minSize
decl_stmt|;
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|setRoomRatio
argument_list|(
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|getRoomRatio
argument_list|()
operator|*
name|ratio
argument_list|)
expr_stmt|;
name|b
operator|.
name|getClazz
argument_list|()
operator|.
name|setRoomRatio
argument_list|(
name|b
operator|.
name|getClazz
argument_list|()
operator|.
name|getRoomRatio
argument_list|()
operator|*
name|ratio
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|saveOrUpdate
argument_list|(
name|a
operator|.
name|getClazz
argument_list|()
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|saveOrUpdate
argument_list|(
name|b
operator|.
name|getClazz
argument_list|()
argument_list|)
expr_stmt|;
block|}
continue|continue
name|b
continue|;
block|}
block|}
block|}
block|}
name|sLog
operator|.
name|warn
argument_list|(
literal|"Overlapping classes in room "
operator|+
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|":\n"
operator|+
literal|"  "
operator|+
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" "
operator|+
name|a
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getLongName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"  "
operator|+
name|b
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" "
operator|+
name|b
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getLongName
argument_list|()
argument_list|)
expr_stmt|;
comment|/* 						for (RoomPref p: (Set<RoomPref>)a.getClazz().effectivePreferences(RoomPref.class)) 							if (p.weakenHardPreferences()) 								hibSession.save(p); 						for (RoomPref p: (Set<RoomPref>)b.getClazz().effectivePreferences(RoomPref.class)) 							if (p.weakenHardPreferences()) 								hibSession.save(p); 						*/
name|int
name|minSize
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|getRoomRatio
argument_list|()
operator|*
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|getExpectedCapacity
argument_list|()
argument_list|)
operator|+
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|b
operator|.
name|getClazz
argument_list|()
operator|.
name|getRoomRatio
argument_list|()
operator|*
name|b
operator|.
name|getClazz
argument_list|()
operator|.
name|getExpectedCapacity
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|location
operator|.
name|getCapacity
argument_list|()
operator|<
name|minSize
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Also the room is too small ("
operator|+
name|location
operator|.
name|getCapacity
argument_list|()
operator|+
literal|"< "
operator|+
name|minSize
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|float
name|ratio
init|=
operator|(
operator|(
name|float
operator|)
name|location
operator|.
name|getCapacity
argument_list|()
operator|)
operator|/
name|minSize
decl_stmt|;
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|setRoomRatio
argument_list|(
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|getRoomRatio
argument_list|()
operator|*
name|ratio
argument_list|)
expr_stmt|;
name|b
operator|.
name|getClazz
argument_list|()
operator|.
name|setRoomRatio
argument_list|(
name|b
operator|.
name|getClazz
argument_list|()
operator|.
name|getRoomRatio
argument_list|()
operator|*
name|ratio
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|saveOrUpdate
argument_list|(
name|a
operator|.
name|getClazz
argument_list|()
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|saveOrUpdate
argument_list|(
name|b
operator|.
name|getClazz
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DistributionPref
name|dp
init|=
operator|new
name|DistributionPref
argument_list|()
decl_stmt|;
name|dp
operator|.
name|setDistributionType
argument_list|(
name|canShareRoomType
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setOwner
argument_list|(
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|getManagingDept
argument_list|()
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setDistributionObjects
argument_list|(
operator|new
name|HashSet
argument_list|<
name|DistributionObject
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setGrouping
argument_list|(
name|DistributionPref
operator|.
name|sGroupingNone
argument_list|)
expr_stmt|;
name|DistributionObject
name|o1
init|=
operator|new
name|DistributionObject
argument_list|()
decl_stmt|;
name|o1
operator|.
name|setDistributionPref
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|o1
operator|.
name|setPrefGroup
argument_list|(
name|a
operator|.
name|getClazz
argument_list|()
argument_list|)
expr_stmt|;
name|o1
operator|.
name|setSequenceNumber
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dp
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|add
argument_list|(
name|o1
argument_list|)
expr_stmt|;
name|DistributionObject
name|o2
init|=
operator|new
name|DistributionObject
argument_list|()
decl_stmt|;
name|o2
operator|.
name|setDistributionPref
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|o2
operator|.
name|setPrefGroup
argument_list|(
name|b
operator|.
name|getClazz
argument_list|()
argument_list|)
expr_stmt|;
name|o2
operator|.
name|setSequenceNumber
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dp
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|add
argument_list|(
name|o2
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|saveOrUpdate
argument_list|(
name|dp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|checkInstructorAssignments
parameter_list|(
name|Hashtable
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Assignment
argument_list|>
argument_list|>
name|instructorAssignments
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Assignment
argument_list|>
argument_list|>
name|entry
range|:
name|instructorAssignments
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|instructorExternalId
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Assignment
argument_list|>
name|ax
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Assignment
name|a
range|:
name|ax
control|)
block|{
name|b
label|:
for|for
control|(
name|Assignment
name|b
range|:
name|ax
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getUniqueId
argument_list|()
operator|>=
name|b
operator|.
name|getUniqueId
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|a
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|hasIntersection
argument_list|(
name|b
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|DistributionPref
argument_list|>
name|dist
init|=
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|effectivePreferences
argument_list|(
name|DistributionPref
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|DistributionPref
name|d
range|:
name|dist
control|)
block|{
if|if
condition|(
name|d
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getReference
argument_list|()
operator|.
name|equals
argument_list|(
literal|"CAN_SHARE_ROOM"
argument_list|)
operator|||
name|d
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getReference
argument_list|()
operator|.
name|equals
argument_list|(
literal|"MEET_WITH"
argument_list|)
condition|)
block|{
for|for
control|(
name|DistributionObject
name|o
range|:
name|d
operator|.
name|getDistributionObjects
argument_list|()
control|)
block|{
if|if
condition|(
name|o
operator|.
name|getPrefGroup
argument_list|()
operator|.
name|equals
argument_list|(
name|b
operator|.
name|getClazz
argument_list|()
argument_list|)
operator|||
name|o
operator|.
name|getPrefGroup
argument_list|()
operator|.
name|equals
argument_list|(
name|b
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
condition|)
block|{
continue|continue
name|b
continue|;
block|}
block|}
block|}
block|}
name|ClassInstructor
name|ca
init|=
literal|null
decl_stmt|,
name|cb
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassInstructors
argument_list|()
control|)
block|{
if|if
condition|(
name|instructorExternalId
operator|.
name|equals
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
condition|)
name|ca
operator|=
name|ci
expr_stmt|;
block|}
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|b
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassInstructors
argument_list|()
control|)
block|{
if|if
condition|(
name|instructorExternalId
operator|.
name|equals
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
condition|)
name|cb
operator|=
name|ci
expr_stmt|;
block|}
if|if
condition|(
name|ca
operator|!=
literal|null
operator|&&
name|ca
operator|.
name|isLead
argument_list|()
operator|&&
name|cb
operator|!=
literal|null
operator|&&
name|cb
operator|.
name|isLead
argument_list|()
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Overlapping classes for instructor "
operator|+
name|instructorExternalId
operator|+
literal|":\n"
operator|+
literal|"  "
operator|+
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" "
operator|+
name|a
operator|.
name|getPlacement
argument_list|()
operator|.
name|getLongName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"  "
operator|+
name|b
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" "
operator|+
name|b
operator|.
name|getPlacement
argument_list|()
operator|.
name|getLongName
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setLead
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|saveOrUpdate
argument_list|(
name|ca
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|private
name|boolean
name|fixDatePattern
parameter_list|(
name|Class_
name|clazz
parameter_list|,
name|Assignment
name|assignment
parameter_list|)
block|{
if|if
condition|(
name|assignment
operator|.
name|getDatePattern
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|DatePattern
name|dp
init|=
name|clazz
operator|.
name|effectiveDatePattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|dp
operator|==
literal|null
operator|||
operator|!
name|dp
operator|.
name|equals
argument_list|(
name|assignment
operator|.
name|getDatePattern
argument_list|()
argument_list|)
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Class "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" had an inconsistent date pattern "
operator|+
name|dp
operator|.
name|getName
argument_list|()
operator|+
literal|" != "
operator|+
name|assignment
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setDatePattern
argument_list|(
name|assignment
operator|.
name|getDatePattern
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|fixRequiredTime
parameter_list|(
name|Class_
name|clazz
parameter_list|,
name|Assignment
name|assignment
parameter_list|)
block|{
name|TimeLocation
name|time
init|=
name|assignment
operator|.
name|getTimeLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|time
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|Set
argument_list|<
name|TimePref
argument_list|>
name|timePrefs
init|=
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|TimePref
operator|.
name|class
argument_list|)
decl_stmt|;
name|boolean
name|onlyReq
init|=
literal|false
decl_stmt|;
name|int
name|nrExact
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TimePref
name|p
range|:
name|timePrefs
control|)
block|{
name|TimePatternModel
name|pattern
init|=
name|p
operator|.
name|getTimePatternModel
argument_list|()
decl_stmt|;
if|if
condition|(
name|pattern
operator|.
name|isExactTime
argument_list|()
operator|||
name|pattern
operator|.
name|countPreferences
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|>
literal|0
condition|)
name|onlyReq
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|pattern
operator|.
name|isExactTime
argument_list|()
condition|)
block|{
if|if
condition|(
name|assignment
operator|.
name|getDays
argument_list|()
operator|==
name|pattern
operator|.
name|getExactDays
argument_list|()
operator|&&
name|assignment
operator|.
name|getStartSlot
argument_list|()
operator|==
name|pattern
operator|.
name|getExactStartSlot
argument_list|()
condition|)
return|return
literal|false
return|;
name|nrExact
operator|++
expr_stmt|;
block|}
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|pattern
operator|.
name|getNrTimes
argument_list|()
condition|;
name|t
operator|++
control|)
block|{
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|pattern
operator|.
name|getNrDays
argument_list|()
condition|;
name|d
operator|++
control|)
block|{
name|String
name|pref
init|=
name|pattern
operator|.
name|getPreference
argument_list|(
name|d
argument_list|,
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|pattern
operator|.
name|getDayCode
argument_list|(
name|d
argument_list|)
operator|==
name|assignment
operator|.
name|getDays
argument_list|()
operator|&&
name|pattern
operator|.
name|getStartSlot
argument_list|(
name|t
argument_list|)
operator|==
name|assignment
operator|.
name|getStartSlot
argument_list|()
condition|)
block|{
if|if
condition|(
name|onlyReq
condition|)
block|{
if|if
condition|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
return|return
literal|false
return|;
name|sLog
operator|.
name|warn
argument_list|(
literal|"Clazz "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" prohibits assigned time "
operator|+
name|time
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|setPreference
argument_list|(
name|d
argument_list|,
name|t
argument_list|,
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPreference
argument_list|(
name|pattern
operator|.
name|getPreferences
argument_list|()
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|saveOrUpdate
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|onlyReq
condition|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|TimePref
name|p
range|:
name|timePrefs
control|)
block|{
name|TimePatternModel
name|pattern
init|=
name|p
operator|.
name|getTimePatternModel
argument_list|()
decl_stmt|;
if|if
condition|(
name|pattern
operator|.
name|isExactTime
argument_list|()
condition|)
continue|continue;
name|pattern
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|pattern
operator|.
name|getNrTimes
argument_list|()
condition|;
name|t
operator|++
control|)
block|{
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|pattern
operator|.
name|getNrDays
argument_list|()
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
name|pattern
operator|.
name|getDayCode
argument_list|(
name|d
argument_list|)
operator|==
name|assignment
operator|.
name|getDays
argument_list|()
operator|&&
name|pattern
operator|.
name|getStartSlot
argument_list|(
name|t
argument_list|)
operator|==
name|assignment
operator|.
name|getStartSlot
argument_list|()
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Clazz "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" requires a different time "
operator|+
name|pattern
operator|.
name|getDayHeader
argument_list|(
name|d
argument_list|)
operator|+
literal|" "
operator|+
name|pattern
operator|.
name|getTimeHeaderShort
argument_list|(
name|t
argument_list|)
operator|+
literal|" than assigned "
operator|+
name|time
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|setPreference
argument_list|(
name|d
argument_list|,
name|t
argument_list|,
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|p
operator|.
name|setPreference
argument_list|(
name|pattern
operator|.
name|getPreferences
argument_list|()
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|saveOrUpdate
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|found
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
name|timePrefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Clazz "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" has no time preferences but assigned time "
operator|+
name|time
operator|.
name|getLongName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Clazz "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" has no time pattern for the assigned time "
operator|+
name|time
operator|.
name|getLongName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|nrExact
operator|==
literal|1
operator|&&
name|timePrefs
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|TimePref
name|p
init|=
name|timePrefs
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|TimePatternModel
name|pattern
init|=
name|p
operator|.
name|getTimePatternModel
argument_list|()
decl_stmt|;
name|pattern
operator|.
name|setExactDays
argument_list|(
name|assignment
operator|.
name|getDays
argument_list|()
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|setExactStartSlot
argument_list|(
name|assignment
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPreference
argument_list|(
name|pattern
operator|.
name|getPreferences
argument_list|()
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|saveOrUpdate
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
name|TimePref
name|p
init|=
operator|new
name|TimePref
argument_list|()
decl_stmt|;
name|p
operator|.
name|setOwner
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|p
operator|.
name|setTimePattern
argument_list|(
name|TimePattern
operator|.
name|findExactTime
argument_list|(
name|iSessionId
argument_list|)
argument_list|)
expr_stmt|;
name|TimePatternModel
name|pattern
init|=
name|p
operator|.
name|getTimePatternModel
argument_list|()
decl_stmt|;
name|pattern
operator|.
name|setExactDays
argument_list|(
name|assignment
operator|.
name|getDays
argument_list|()
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|setExactStartSlot
argument_list|(
name|assignment
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPreference
argument_list|(
name|pattern
operator|.
name|getPreferences
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|fixNrAssignedRooms
parameter_list|(
name|Class_
name|clazz
parameter_list|,
name|Assignment
name|assignment
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|.
name|getNbrRooms
argument_list|()
operator|!=
name|assignment
operator|.
name|getRooms
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Clazz "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" has assigned a wrong number of rooms "
operator|+
name|clazz
operator|.
name|getNbrRooms
argument_list|()
operator|+
literal|" != "
operator|+
name|assignment
operator|.
name|getRooms
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setNbrRooms
argument_list|(
name|assignment
operator|.
name|getRooms
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|fixRequiredRoom
parameter_list|(
name|Class_
name|clazz
parameter_list|,
name|Assignment
name|assignment
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|.
name|getNbrRooms
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|false
return|;
name|Set
argument_list|<
name|RoomPref
argument_list|>
name|roomPrefs
init|=
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|RoomPref
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Location
argument_list|>
name|remaining
init|=
operator|new
name|HashSet
argument_list|<
name|Location
argument_list|>
argument_list|(
name|assignment
operator|.
name|getRooms
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|hasReq
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RoomPref
name|p
range|:
name|roomPrefs
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
block|{
name|hasReq
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|remaining
operator|.
name|remove
argument_list|(
name|p
operator|.
name|getRoom
argument_list|()
argument_list|)
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Clazz "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" requires a room "
operator|+
name|p
operator|.
name|getRoom
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|" different from the assigned room "
operator|+
name|assignment
operator|.
name|getPlacement
argument_list|()
operator|.
name|getRoomName
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|save
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
condition|)
block|{
if|if
condition|(
name|assignment
operator|.
name|getRooms
argument_list|()
operator|.
name|contains
argument_list|(
name|p
operator|.
name|getRoom
argument_list|()
argument_list|)
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Clazz "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" prohibits the assigned room "
operator|+
name|p
operator|.
name|getRoom
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|save
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|RoomPref
name|p
range|:
name|roomPrefs
control|)
block|{
if|if
condition|(
name|hasReq
operator|&&
operator|!
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|&&
name|remaining
operator|.
name|remove
argument_list|(
name|p
operator|.
name|getRoom
argument_list|()
argument_list|)
condition|)
block|{
name|p
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|save
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|hasReq
operator|&&
operator|!
name|remaining
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Location
name|room
range|:
name|remaining
control|)
block|{
name|RoomPref
name|p
init|=
operator|new
name|RoomPref
argument_list|()
decl_stmt|;
name|p
operator|.
name|setOwner
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setRoom
argument_list|(
name|room
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|roomPrefs
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|ret
operator|=
literal|true
expr_stmt|;
block|}
name|loc
label|:
for|for
control|(
name|Location
name|loc
range|:
name|assignment
operator|.
name|getRooms
argument_list|()
control|)
block|{
for|for
control|(
name|RoomPref
name|px
range|:
operator|(
name|Set
argument_list|<
name|RoomPref
argument_list|>
operator|)
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getPreferences
argument_list|(
name|RoomPref
operator|.
name|class
argument_list|)
control|)
block|{
if|if
condition|(
name|px
operator|.
name|getRoom
argument_list|()
operator|.
name|equals
argument_list|(
name|loc
argument_list|)
condition|)
block|{
if|if
condition|(
name|px
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Class "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" is assigned to a room "
operator|+
name|loc
operator|.
name|getLabel
argument_list|()
operator|+
literal|" that is prohibited on a departmental level."
argument_list|)
expr_stmt|;
name|px
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|saveOrUpdate
argument_list|(
name|px
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|px
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
condition|)
block|{
for|for
control|(
name|RoomPref
name|p
range|:
name|roomPrefs
control|)
if|if
condition|(
name|p
operator|.
name|getRoom
argument_list|()
operator|.
name|equals
argument_list|(
name|loc
argument_list|)
condition|)
continue|continue
name|loc
continue|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Class "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" is assigned to a room "
operator|+
name|loc
operator|.
name|getLabel
argument_list|()
operator|+
literal|" that is strongly discouraged on a departmental level."
argument_list|)
expr_stmt|;
name|RoomPref
name|p
init|=
operator|new
name|RoomPref
argument_list|()
decl_stmt|;
name|p
operator|.
name|setOwner
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setRoom
argument_list|(
name|loc
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|boolean
name|fixRoomSize
parameter_list|(
name|Class_
name|clazz
parameter_list|,
name|Assignment
name|assignment
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|.
name|getNbrRooms
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|false
return|;
name|int
name|minSize
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|clazz
operator|.
name|getRoomRatio
argument_list|()
operator|*
name|clazz
operator|.
name|getExpectedCapacity
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Location
name|loc
range|:
name|assignment
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
name|loc
operator|.
name|getCapacity
argument_list|()
operator|<
name|minSize
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Clazz "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" has assigned a room "
operator|+
name|loc
operator|.
name|getLabel
argument_list|()
operator|+
literal|" that is too small ("
operator|+
name|loc
operator|.
name|getCapacity
argument_list|()
operator|+
literal|"< "
operator|+
name|minSize
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|minSize
operator|=
name|loc
operator|.
name|getCapacity
argument_list|()
expr_stmt|;
name|clazz
operator|.
name|setRoomRatio
argument_list|(
operator|(
operator|(
name|float
operator|)
name|loc
operator|.
name|getCapacity
argument_list|()
operator|)
operator|/
name|clazz
operator|.
name|getExpectedCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|boolean
name|fixRequiredBuilding
parameter_list|(
name|Class_
name|clazz
parameter_list|,
name|Assignment
name|assignment
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|.
name|getNbrRooms
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|false
return|;
name|Set
argument_list|<
name|BuildingPref
argument_list|>
name|bldgPrefs
init|=
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|BuildingPref
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Building
argument_list|>
name|remaining
init|=
operator|new
name|HashSet
argument_list|<
name|Building
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Location
name|room
range|:
name|assignment
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
name|room
operator|instanceof
name|Room
condition|)
name|remaining
operator|.
name|add
argument_list|(
operator|(
operator|(
name|Room
operator|)
name|room
operator|)
operator|.
name|getBuilding
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|hasReq
init|=
literal|false
decl_stmt|;
for|for
control|(
name|BuildingPref
name|p
range|:
name|bldgPrefs
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
block|{
name|hasReq
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|remaining
operator|.
name|remove
argument_list|(
name|p
operator|.
name|getBuilding
argument_list|()
argument_list|)
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Clazz "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" requires a building "
operator|+
name|p
operator|.
name|getBuilding
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|" different from the assigned building "
operator|+
name|assignment
operator|.
name|getPlacement
argument_list|()
operator|.
name|getRoomName
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|save
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
condition|)
block|{
if|if
condition|(
name|remaining
operator|.
name|contains
argument_list|(
name|p
operator|.
name|getBuilding
argument_list|()
argument_list|)
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Clazz "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" prohibits the assigned building "
operator|+
name|p
operator|.
name|getBuilding
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|save
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|BuildingPref
name|p
range|:
name|bldgPrefs
control|)
block|{
if|if
condition|(
name|hasReq
operator|&&
operator|!
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|&&
name|remaining
operator|.
name|remove
argument_list|(
name|p
operator|.
name|getBuilding
argument_list|()
argument_list|)
condition|)
block|{
name|p
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|save
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasReq
operator|&&
operator|!
name|remaining
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Building
name|bldg
range|:
name|remaining
control|)
block|{
name|BuildingPref
name|p
init|=
operator|new
name|BuildingPref
argument_list|()
decl_stmt|;
name|p
operator|.
name|setOwner
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setBuilding
argument_list|(
name|bldg
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isBackToBackTooFar
parameter_list|(
name|Placement
name|p1
parameter_list|,
name|Placement
name|p2
parameter_list|)
block|{
if|if
condition|(
operator|!
name|p1
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|shareDays
argument_list|(
name|p2
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|p1
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|shareWeeks
argument_list|(
name|p2
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
name|int
name|s1
init|=
name|p1
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getStartSlot
argument_list|()
operator|%
name|Constants
operator|.
name|SLOTS_PER_DAY
decl_stmt|;
name|int
name|s2
init|=
name|p2
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getStartSlot
argument_list|()
operator|%
name|Constants
operator|.
name|SLOTS_PER_DAY
decl_stmt|;
if|if
condition|(
name|s1
operator|+
name|p1
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getLength
argument_list|()
operator|!=
name|s2
operator|&&
name|s2
operator|+
name|p2
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getLength
argument_list|()
operator|!=
name|s1
condition|)
return|return
literal|false
return|;
name|double
name|distance
init|=
name|Placement
operator|.
name|getDistanceInMeters
argument_list|(
name|iDistanceMetric
argument_list|,
name|p1
argument_list|,
name|p2
argument_list|)
decl_stmt|;
return|return
operator|(
name|distance
operator|>
name|iDistanceMetric
operator|.
name|getInstructorProhibitedLimit
argument_list|()
operator|)
return|;
block|}
specifier|private
name|void
name|fixInstructors
parameter_list|(
name|Class_
name|clazz
parameter_list|,
name|Assignment
name|a
parameter_list|)
block|{
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|clazz
operator|.
name|getClassInstructors
argument_list|()
control|)
block|{
if|if
condition|(
name|ci
operator|.
name|getLead
argument_list|()
operator|!=
name|a
operator|.
name|getInstructors
argument_list|()
operator|.
name|contains
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
argument_list|)
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Correcting lead info from assignment for "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|", instructor "
operator|+
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatShort
argument_list|)
operator|+
literal|" ("
operator|+
name|ci
operator|.
name|getLead
argument_list|()
operator|+
literal|" -> "
operator|+
name|a
operator|.
name|getInstructors
argument_list|()
operator|.
name|contains
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setLead
argument_list|(
name|a
operator|.
name|getInstructors
argument_list|()
operator|.
name|contains
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|saveOrUpdate
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|clazz
operator|.
name|getClassInstructors
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ci
operator|.
name|isLead
argument_list|()
condition|)
continue|continue;
name|b
label|:
for|for
control|(
name|ClassInstructor
name|other
range|:
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|other
operator|.
name|equals
argument_list|(
name|ci
argument_list|)
operator|||
operator|!
name|other
operator|.
name|isLead
argument_list|()
condition|)
continue|continue;
name|Assignment
name|b
init|=
name|other
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|b
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|hasIntersection
argument_list|(
name|a
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Class "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" "
operator|+
name|a
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|a
operator|.
name|getPlacement
argument_list|()
operator|.
name|getRoomName
argument_list|(
literal|","
argument_list|)
operator|+
literal|" has an instructor "
operator|+
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatShort
argument_list|)
operator|+
literal|" overlapping with "
operator|+
name|other
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" "
operator|+
name|b
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"  "
operator|+
name|b
operator|.
name|getPlacement
argument_list|()
operator|.
name|getRoomName
argument_list|(
literal|","
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getLongName
argument_list|()
operator|.
name|equals
argument_list|(
name|b
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getLongName
argument_list|()
argument_list|)
operator|&&
name|a
operator|.
name|getPlacement
argument_list|()
operator|.
name|getRoomName
argument_list|(
literal|","
argument_list|)
operator|.
name|equals
argument_list|(
name|b
operator|.
name|getPlacement
argument_list|()
operator|.
name|getRoomName
argument_list|(
literal|","
argument_list|)
argument_list|)
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"  checking meet with constraint..."
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|DistributionPref
argument_list|>
name|dist
init|=
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|effectivePreferences
argument_list|(
name|DistributionPref
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|DistributionPref
name|d
range|:
name|dist
control|)
block|{
if|if
condition|(
name|d
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getReference
argument_list|()
operator|.
name|equals
argument_list|(
literal|"CAN_SHARE_ROOM"
argument_list|)
operator|||
name|d
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getReference
argument_list|()
operator|.
name|equals
argument_list|(
literal|"MEET_WITH"
argument_list|)
condition|)
block|{
for|for
control|(
name|DistributionObject
name|o
range|:
name|d
operator|.
name|getDistributionObjects
argument_list|()
control|)
block|{
if|if
condition|(
name|o
operator|.
name|getPrefGroup
argument_list|()
operator|.
name|equals
argument_list|(
name|b
operator|.
name|getClazz
argument_list|()
argument_list|)
operator|||
name|o
operator|.
name|getPrefGroup
argument_list|()
operator|.
name|equals
argument_list|(
name|b
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
condition|)
block|{
name|int
name|minSize
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|getRoomRatio
argument_list|()
operator|*
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|getExpectedCapacity
argument_list|()
operator|+
name|b
operator|.
name|getClazz
argument_list|()
operator|.
name|getRoomRatio
argument_list|()
operator|*
name|b
operator|.
name|getClazz
argument_list|()
operator|.
name|getExpectedCapacity
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Location
name|location
range|:
name|a
operator|.
name|getRooms
argument_list|()
control|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Allowed overlap of classes in room "
operator|+
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|":\n"
operator|+
literal|"  "
operator|+
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" "
operator|+
name|a
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getLongName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"  "
operator|+
name|b
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" "
operator|+
name|b
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getLongName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|.
name|getCapacity
argument_list|()
operator|<
name|minSize
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"But the he room is too small ("
operator|+
name|location
operator|.
name|getCapacity
argument_list|()
operator|+
literal|"< "
operator|+
name|minSize
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|float
name|ratio
init|=
operator|(
operator|(
name|float
operator|)
name|location
operator|.
name|getCapacity
argument_list|()
operator|)
operator|/
name|minSize
decl_stmt|;
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|setRoomRatio
argument_list|(
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|getRoomRatio
argument_list|()
operator|*
name|ratio
argument_list|)
expr_stmt|;
name|b
operator|.
name|getClazz
argument_list|()
operator|.
name|setRoomRatio
argument_list|(
name|b
operator|.
name|getClazz
argument_list|()
operator|.
name|getRoomRatio
argument_list|()
operator|*
name|ratio
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|saveOrUpdate
argument_list|(
name|a
operator|.
name|getClazz
argument_list|()
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|saveOrUpdate
argument_list|(
name|b
operator|.
name|getClazz
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
continue|continue
name|b
continue|;
block|}
block|}
block|}
block|}
name|int
name|minSize
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|getRoomRatio
argument_list|()
operator|*
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|getExpectedCapacity
argument_list|()
argument_list|)
operator|+
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|b
operator|.
name|getClazz
argument_list|()
operator|.
name|getRoomRatio
argument_list|()
operator|*
name|b
operator|.
name|getClazz
argument_list|()
operator|.
name|getExpectedCapacity
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Location
name|location
range|:
name|a
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
name|location
operator|.
name|getCapacity
argument_list|()
operator|<
name|minSize
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Also the room is too small ("
operator|+
name|location
operator|.
name|getCapacity
argument_list|()
operator|+
literal|"< "
operator|+
name|minSize
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|float
name|ratio
init|=
operator|(
operator|(
name|float
operator|)
name|location
operator|.
name|getCapacity
argument_list|()
operator|)
operator|/
name|minSize
decl_stmt|;
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|setRoomRatio
argument_list|(
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|getRoomRatio
argument_list|()
operator|*
name|ratio
argument_list|)
expr_stmt|;
name|b
operator|.
name|getClazz
argument_list|()
operator|.
name|setRoomRatio
argument_list|(
name|b
operator|.
name|getClazz
argument_list|()
operator|.
name|getRoomRatio
argument_list|()
operator|*
name|ratio
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|saveOrUpdate
argument_list|(
name|a
operator|.
name|getClazz
argument_list|()
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|saveOrUpdate
argument_list|(
name|b
operator|.
name|getClazz
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|DistributionType
name|meetWithType
init|=
operator|(
name|DistributionType
operator|)
name|iHibSession
operator|.
name|createQuery
argument_list|(
literal|"select d from DistributionType d where d.reference = :type"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"type"
argument_list|,
literal|"MEET_WITH"
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
name|DistributionPref
name|dp
init|=
operator|new
name|DistributionPref
argument_list|()
decl_stmt|;
name|dp
operator|.
name|setDistributionType
argument_list|(
name|meetWithType
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setOwner
argument_list|(
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|getManagingDept
argument_list|()
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setDistributionObjects
argument_list|(
operator|new
name|HashSet
argument_list|<
name|DistributionObject
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setGrouping
argument_list|(
name|DistributionPref
operator|.
name|sGroupingNone
argument_list|)
expr_stmt|;
name|DistributionObject
name|o1
init|=
operator|new
name|DistributionObject
argument_list|()
decl_stmt|;
name|o1
operator|.
name|setDistributionPref
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|o1
operator|.
name|setPrefGroup
argument_list|(
name|a
operator|.
name|getClazz
argument_list|()
argument_list|)
expr_stmt|;
name|o1
operator|.
name|setSequenceNumber
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dp
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|add
argument_list|(
name|o1
argument_list|)
expr_stmt|;
name|DistributionObject
name|o2
init|=
operator|new
name|DistributionObject
argument_list|()
decl_stmt|;
name|o2
operator|.
name|setDistributionPref
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|o2
operator|.
name|setPrefGroup
argument_list|(
name|b
operator|.
name|getClazz
argument_list|()
argument_list|)
expr_stmt|;
name|o2
operator|.
name|setSequenceNumber
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dp
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|add
argument_list|(
name|o2
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|saveOrUpdate
argument_list|(
name|dp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ci
operator|.
name|setLead
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|saveOrUpdate
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|!
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|isIgnoreToFar
argument_list|()
operator|&&
name|isBackToBackTooFar
argument_list|(
name|a
operator|.
name|getPlacement
argument_list|()
argument_list|,
name|b
operator|.
name|getPlacement
argument_list|()
argument_list|)
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Class "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" "
operator|+
name|a
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|a
operator|.
name|getPlacement
argument_list|()
operator|.
name|getRoomName
argument_list|(
literal|","
argument_list|)
operator|+
literal|" has an instructor "
operator|+
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatShort
argument_list|)
operator|+
literal|" and is too far back-to-back with "
operator|+
name|other
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" "
operator|+
name|b
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"  "
operator|+
name|b
operator|.
name|getPlacement
argument_list|()
operator|.
name|getRoomName
argument_list|(
literal|","
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|setIgnoreToFar
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|saveOrUpdate
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|fixRequiredFeatures
parameter_list|(
name|Class_
name|clazz
parameter_list|,
name|Assignment
name|a
parameter_list|)
block|{
name|Set
argument_list|<
name|RoomFeaturePref
argument_list|>
name|featurePrefs
init|=
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|RoomFeaturePref
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|RoomFeaturePref
name|p
range|:
name|featurePrefs
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
block|{
for|for
control|(
name|Location
name|loc
range|:
name|a
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|loc
operator|.
name|getFeatures
argument_list|()
operator|.
name|contains
argument_list|(
name|p
operator|.
name|getRoomFeature
argument_list|()
argument_list|)
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Class "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" requires feature "
operator|+
name|p
operator|.
name|getRoomFeature
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|" but assigned room "
operator|+
name|loc
operator|.
name|getLabel
argument_list|()
operator|+
literal|" does not have it."
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|saveOrUpdate
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
condition|)
block|{
for|for
control|(
name|Location
name|loc
range|:
name|a
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
name|loc
operator|.
name|getFeatures
argument_list|()
operator|.
name|contains
argument_list|(
name|p
operator|.
name|getRoomFeature
argument_list|()
argument_list|)
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Class "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" prohibits feature "
operator|+
name|p
operator|.
name|getRoomFeature
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|" but assigned room "
operator|+
name|loc
operator|.
name|getLabel
argument_list|()
operator|+
literal|" does have it."
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|saveOrUpdate
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|public
name|void
name|fixRequiredGroups
parameter_list|(
name|Class_
name|clazz
parameter_list|,
name|Assignment
name|a
parameter_list|)
block|{
name|Set
argument_list|<
name|RoomGroupPref
argument_list|>
name|roomGroopPrefs
init|=
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|RoomGroupPref
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|RoomGroupPref
name|p
range|:
name|roomGroopPrefs
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
block|{
for|for
control|(
name|Location
name|loc
range|:
name|a
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|loc
operator|.
name|getRoomGroups
argument_list|()
operator|.
name|contains
argument_list|(
name|p
operator|.
name|getRoomGroup
argument_list|()
argument_list|)
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Class "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" requires feature "
operator|+
name|p
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" but assigned room "
operator|+
name|loc
operator|.
name|getLabel
argument_list|()
operator|+
literal|" does not have it."
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|saveOrUpdate
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
condition|)
block|{
for|for
control|(
name|Location
name|loc
range|:
name|a
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
name|loc
operator|.
name|getRoomGroups
argument_list|()
operator|.
name|contains
argument_list|(
name|p
operator|.
name|getRoomGroup
argument_list|()
argument_list|)
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Class "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" prohibits feature "
operator|+
name|p
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" but assigned room "
operator|+
name|loc
operator|.
name|getLabel
argument_list|()
operator|+
literal|" does have it."
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|saveOrUpdate
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|public
name|void
name|fixRoomSharing
parameter_list|(
name|Class_
name|clazz
parameter_list|,
name|Assignment
name|a
parameter_list|)
block|{
name|Set
argument_list|<
name|Location
argument_list|>
name|locs
init|=
name|clazz
operator|.
name|getAvailableRooms
argument_list|()
decl_stmt|;
for|for
control|(
name|Location
name|loc
range|:
name|a
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|locs
operator|.
name|contains
argument_list|(
name|loc
argument_list|)
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Class "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" is assigned into a room "
operator|+
name|loc
operator|.
name|getLabel
argument_list|()
operator|+
literal|" that is not available for "
operator|+
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" - "
operator|+
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|RoomDept
name|rd
init|=
operator|new
name|RoomDept
argument_list|()
decl_stmt|;
name|rd
operator|.
name|setControl
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|rd
operator|.
name|setDepartment
argument_list|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
argument_list|)
expr_stmt|;
name|rd
operator|.
name|setRoom
argument_list|(
name|loc
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|add
argument_list|(
name|rd
argument_list|)
expr_stmt|;
name|loc
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|add
argument_list|(
name|rd
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|saveOrUpdate
argument_list|(
name|rd
argument_list|)
expr_stmt|;
name|RoomPref
name|rp
init|=
operator|new
name|RoomPref
argument_list|()
decl_stmt|;
name|rp
operator|.
name|setOwner
argument_list|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setRoom
argument_list|(
name|loc
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|rp
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|saveOrUpdate
argument_list|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RoomSharingModel
name|m
init|=
name|loc
operator|.
name|getRoomSharingModel
argument_list|()
decl_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|Department
name|d
init|=
name|clazz
operator|.
name|getManagingDept
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|Integer
argument_list|>
name|e
init|=
name|a
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getSlots
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|int
name|slot
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|isFreeForAll
argument_list|(
name|slot
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|m
operator|.
name|isNotAvailable
argument_list|(
name|slot
argument_list|)
operator|||
operator|!
name|d
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getDepartmentId
argument_list|(
name|slot
argument_list|)
argument_list|)
condition|)
block|{
name|m
operator|.
name|setPreference
argument_list|(
name|slot
operator|/
name|Constants
operator|.
name|SLOTS_PER_DAY
argument_list|,
operator|(
name|slot
operator|%
name|Constants
operator|.
name|SLOTS_PER_DAY
operator|)
operator|/
literal|6
argument_list|,
name|d
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Room sharing changed for room "
operator|+
name|loc
operator|.
name|getLabel
argument_list|()
operator|+
literal|" to allow class "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" "
operator|+
name|a
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getLongName
argument_list|()
operator|+
literal|" in."
argument_list|)
expr_stmt|;
name|loc
operator|.
name|setRoomSharingModel
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|iHibSession
operator|.
name|saveOrUpdate
argument_list|(
name|loc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
try|try
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.rootLogger"
argument_list|,
literal|"DEBUG, A1"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1"
argument_list|,
literal|"org.apache.log4j.ConsoleAppender"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1.layout"
argument_list|,
literal|"org.apache.log4j.PatternLayout"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1.layout.ConversionPattern"
argument_list|,
literal|"%-5p %c{2}: %m%n"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate.cfg"
argument_list|,
literal|"WARN"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate.cache.EhCacheProvider"
argument_list|,
literal|"ERROR"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.unitime.commons.hibernate"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.net"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|PropertyConfigurator
operator|.
name|configure
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|HibernateUtil
operator|.
name|configureHibernate
argument_list|(
name|ApplicationProperties
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"initiative"
argument_list|,
literal|"PWL"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"year"
argument_list|,
literal|"2010"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"term"
argument_list|,
literal|"Spring"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Academic session not found, use properties initiative, year, and term to set academic session."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Session: "
operator|+
name|session
argument_list|)
expr_stmt|;
block|}
operator|new
name|FixCourseTimetablingInconsistencies
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|fixAll
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

