begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|DocumentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|XMLWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroupReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ReadLearningCommunities
block|{
specifier|protected
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReadLearningCommunities
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|abbv
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|stk
init|=
operator|new
name|StringTokenizer
argument_list|(
name|name
argument_list|,
literal|" ."
argument_list|)
init|;
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|word
init|=
name|stk
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"and"
operator|.
name|equalsIgnoreCase
argument_list|(
name|word
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"in"
operator|.
name|equalsIgnoreCase
argument_list|(
name|word
argument_list|)
condition|)
block|{
block|}
if|else if
condition|(
name|word
operator|.
name|replaceAll
argument_list|(
literal|"[a-zA-Z\\.]*"
argument_list|,
literal|""
argument_list|)
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|word
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
name|word
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|i
operator|+
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
operator|(
name|i
operator|==
literal|1
operator|&&
name|word
operator|.
name|length
argument_list|()
operator|>
literal|3
operator|)
operator|||
operator|(
name|word
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|>=
literal|'A'
operator|&&
name|word
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|<=
literal|'Z'
operator|)
condition|)
name|sb
operator|.
name|append
argument_list|(
name|word
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|word
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|HibernateUtil
operator|.
name|configureHibernate
argument_list|(
name|ApplicationProperties
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"initiative"
argument_list|,
literal|"PWL"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"year"
argument_list|,
literal|"2011"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"term"
argument_list|,
literal|"Fall"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Academic session not found, use properties initiative, year, and term to set academic session."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Session: "
operator|+
name|session
argument_list|)
expr_stmt|;
block|}
name|DistributionType
name|linkedSections
init|=
operator|(
name|DistributionType
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select d from DistributionType d where d.reference = :type"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"type"
argument_list|,
literal|"LINKED_SECTIONS"
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
name|BufferedReader
name|r
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"file"
argument_list|,
literal|"/Users/muller/Downloads/Fall 2011 LC Course Matrix.csv"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|document
init|=
name|DocumentHelper
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|document
operator|.
name|addComment
argument_list|(
literal|"Learning comunities for "
operator|+
name|session
argument_list|)
expr_stmt|;
name|Element
name|root
init|=
name|document
operator|.
name|addElement
argument_list|(
literal|"constraints"
argument_list|)
decl_stmt|;
name|Element
name|group
init|=
literal|null
decl_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
name|DistributionPref
name|dpLinkedSections
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|DistributionPref
argument_list|>
name|distPrefs
init|=
operator|new
name|ArrayList
argument_list|<
name|DistributionPref
argument_list|>
argument_list|()
decl_stmt|;
name|StudentGroupReservation
name|reservation
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|StudentGroupReservation
argument_list|>
name|reservations
init|=
operator|new
name|ArrayList
argument_list|<
name|StudentGroupReservation
argument_list|>
argument_list|()
decl_stmt|;
name|StudentGroup
name|studentGroup
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|StudentGroup
argument_list|>
name|groups
init|=
operator|new
name|ArrayList
argument_list|<
name|StudentGroup
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|SchedulingSubpart
argument_list|,
name|Set
argument_list|<
name|Class_
argument_list|>
argument_list|>
name|classes
init|=
operator|new
name|HashMap
argument_list|<
name|SchedulingSubpart
argument_list|,
name|Set
argument_list|<
name|Class_
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|r
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Student
argument_list|>
name|students
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|SchedulingSubpart
argument_list|,
name|Set
argument_list|<
name|Class_
argument_list|>
argument_list|>
name|entry
range|:
name|classes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Student
argument_list|>
name|studentsThisSubpart
init|=
operator|new
name|HashSet
argument_list|<
name|Student
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Class_
name|c
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
for|for
control|(
name|StudentClassEnrollment
name|e
range|:
name|c
operator|.
name|getStudentEnrollments
argument_list|()
control|)
name|studentsThisSubpart
operator|.
name|add
argument_list|(
name|e
operator|.
name|getStudent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|students
operator|==
literal|null
condition|)
block|{
name|students
operator|=
name|studentsThisSubpart
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Student
argument_list|>
name|i
init|=
name|students
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
operator|!
name|studentsThisSubpart
operator|.
name|contains
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|studentGroup
operator|.
name|setStudents
argument_list|(
name|students
argument_list|)
expr_stmt|;
block|}
name|group
operator|=
literal|null
expr_stmt|;
continue|continue;
block|}
name|String
index|[]
name|cols
init|=
name|line
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|cols
operator|.
name|length
operator|<=
literal|9
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Skipping "
operator|+
name|line
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
name|group
operator|=
name|root
operator|.
name|addElement
argument_list|(
literal|"linked-sections"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cols
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|group
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|cols
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|dpLinkedSections
operator|=
operator|new
name|DistributionPref
argument_list|()
expr_stmt|;
name|dpLinkedSections
operator|.
name|setDistributionType
argument_list|(
name|linkedSections
argument_list|)
expr_stmt|;
name|dpLinkedSections
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
expr_stmt|;
name|dpLinkedSections
operator|.
name|setStructure
argument_list|(
name|DistributionPref
operator|.
name|Structure
operator|.
name|AllClasses
argument_list|)
expr_stmt|;
name|dpLinkedSections
operator|.
name|setDistributionObjects
argument_list|(
operator|new
name|HashSet
argument_list|<
name|DistributionObject
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|distPrefs
operator|.
name|add
argument_list|(
name|dpLinkedSections
argument_list|)
expr_stmt|;
name|studentGroup
operator|=
operator|new
name|StudentGroup
argument_list|()
expr_stmt|;
name|studentGroup
operator|.
name|setGroupName
argument_list|(
name|cols
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|studentGroup
operator|.
name|setGroupAbbreviation
argument_list|(
name|abbv
argument_list|(
name|cols
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|studentGroup
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
comment|// studentGroup.setStudents(new HashSet<Student>());
name|groups
operator|.
name|add
argument_list|(
name|studentGroup
argument_list|)
expr_stmt|;
name|reservation
operator|=
operator|new
name|StudentGroupReservation
argument_list|()
expr_stmt|;
name|reservation
operator|.
name|setClasses
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Class_
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|reservation
operator|.
name|setGroup
argument_list|(
name|studentGroup
argument_list|)
expr_stmt|;
name|reservations
operator|.
name|add
argument_list|(
name|reservation
argument_list|)
expr_stmt|;
name|classes
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|String
name|crn
init|=
name|cols
index|[
literal|2
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from Class_ c where c.classSuffix like :crn and "
operator|+
literal|"c.schedulingSubpart.instrOfferingConfig.instructionalOffering.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"crn"
argument_list|,
name|crn
operator|+
literal|"%"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
name|group
operator|.
name|addElement
argument_list|(
literal|"section"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"offering"
argument_list|,
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|clazz
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|clazz
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dpLinkedSections
operator|.
name|getOwner
argument_list|()
operator|==
literal|null
condition|)
name|dpLinkedSections
operator|.
name|setOwner
argument_list|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
operator|!
name|dpLinkedSections
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
argument_list|)
operator|&&
operator|(
operator|(
name|Department
operator|)
name|dpLinkedSections
operator|.
name|getOwner
argument_list|()
operator|)
operator|.
name|getDistributionPrefPriority
argument_list|()
operator|<
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getDistributionPrefPriority
argument_list|()
condition|)
name|dpLinkedSections
operator|.
name|setOwner
argument_list|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
argument_list|)
expr_stmt|;
comment|/*             		if (dpLinkedSections.getDistributionObjects().isEmpty()) {             			for (StudentClassEnrollment enrl: clazz.getStudentEnrollments()) {             				studentGroup.getStudents().add(enrl.getStudent());             			}             		} else {             			students: for (Iterator<Student> i = studentGroup.getStudents().iterator(); i.hasNext(); ) {             				Student student = i.next();             				for (StudentClassEnrollment enrl: clazz.getStudentEnrollments()) {             					if (student.equals(enrl.getStudent())) continue students;             				}             				i.remove();             			}             		}             		*/
name|reservation
operator|.
name|getClasses
argument_list|()
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Class_
argument_list|>
name|c
init|=
name|classes
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|c
operator|=
operator|new
name|HashSet
argument_list|<
name|Class_
argument_list|>
argument_list|()
expr_stmt|;
name|classes
operator|.
name|put
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
name|c
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|DistributionObject
name|o
init|=
operator|new
name|DistributionObject
argument_list|()
decl_stmt|;
name|o
operator|.
name|setDistributionPref
argument_list|(
name|dpLinkedSections
argument_list|)
expr_stmt|;
name|o
operator|.
name|setPrefGroup
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|o
operator|.
name|setSequenceNumber
argument_list|(
name|dpLinkedSections
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|dpLinkedSections
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Unable to find class "
operator|+
name|crn
operator|+
literal|" ("
operator|+
name|cols
index|[
literal|3
index|]
operator|+
literal|" "
operator|+
name|cols
index|[
literal|4
index|]
operator|+
literal|" "
operator|+
name|cols
index|[
literal|7
index|]
operator|+
literal|" "
operator|+
name|cols
index|[
literal|8
index|]
operator|+
literal|" "
operator|+
name|cols
index|[
literal|9
index|]
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
operator|(
operator|new
name|XMLWriter
argument_list|(
name|System
operator|.
name|out
argument_list|,
name|OutputFormat
operator|.
name|createPrettyPrint
argument_list|()
argument_list|)
operator|)
operator|.
name|write
argument_list|(
name|document
argument_list|)
expr_stmt|;
for|for
control|(
name|StudentGroup
name|g
range|:
name|groups
control|)
block|{
name|sLog
operator|.
name|info
argument_list|(
name|g
operator|.
name|getGroupAbbreviation
argument_list|()
operator|+
literal|": "
operator|+
name|g
operator|.
name|getGroupName
argument_list|()
operator|+
literal|" has "
operator|+
name|g
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" students."
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|DistributionPref
name|distPref
range|:
name|distPrefs
control|)
block|{
for|for
control|(
name|DistributionObject
name|obj
range|:
operator|new
name|ArrayList
argument_list|<
name|DistributionObject
argument_list|>
argument_list|(
name|distPref
operator|.
name|getDistributionObjects
argument_list|()
argument_list|)
control|)
block|{
name|Class_
name|p
init|=
operator|(
operator|(
name|Class_
operator|)
name|obj
operator|.
name|getPrefGroup
argument_list|()
operator|)
operator|.
name|getParentClass
argument_list|()
decl_stmt|;
while|while
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DistributionObject
name|x
range|:
name|distPref
operator|.
name|getDistributionObjects
argument_list|()
control|)
block|{
if|if
condition|(
name|x
operator|.
name|getPrefGroup
argument_list|()
operator|.
name|equals
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|distPref
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|remove
argument_list|(
name|x
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|p
operator|=
name|p
operator|.
name|getParentClass
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|distPref
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
continue|continue;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DistributionObject
name|obj
range|:
operator|new
name|TreeSet
argument_list|<
name|DistributionObject
argument_list|>
argument_list|(
name|distPref
operator|.
name|getDistributionObjects
argument_list|()
argument_list|)
control|)
name|obj
operator|.
name|setSequenceNumber
argument_list|(
name|idx
operator|++
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|distPref
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StudentGroup
name|g
range|:
name|groups
control|)
block|{
comment|// if (g.getStudents().isEmpty()) continue;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StudentGroupReservation
name|res
range|:
name|reservations
control|)
block|{
comment|// if (res.getGroup().getStudents().isEmpty()) continue;
name|Map
argument_list|<
name|InstructionalOffering
argument_list|,
name|StudentGroupReservation
argument_list|>
name|of2res
init|=
operator|new
name|HashMap
argument_list|<
name|InstructionalOffering
argument_list|,
name|StudentGroupReservation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Class_
name|clazz
range|:
name|res
operator|.
name|getClasses
argument_list|()
control|)
block|{
name|InstructionalOffering
name|offering
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
decl_stmt|;
name|StudentGroupReservation
name|x
init|=
name|of2res
operator|.
name|get
argument_list|(
name|offering
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|null
condition|)
block|{
name|x
operator|=
operator|new
name|StudentGroupReservation
argument_list|()
expr_stmt|;
name|x
operator|.
name|setClasses
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Class_
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|setGroup
argument_list|(
name|res
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|setConfigurations
argument_list|(
operator|new
name|HashSet
argument_list|<
name|InstrOfferingConfig
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|setInstructionalOffering
argument_list|(
name|offering
argument_list|)
expr_stmt|;
name|x
operator|.
name|setLimit
argument_list|(
name|res
operator|.
name|getGroup
argument_list|()
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|of2res
operator|.
name|put
argument_list|(
name|offering
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
name|x
operator|.
name|getClasses
argument_list|()
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
comment|// x.getConfigurations().add(clazz.getSchedulingSubpart().getInstrOfferingConfig());
block|}
for|for
control|(
name|StudentGroupReservation
name|x
range|:
name|of2res
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Class_
name|c
range|:
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|(
name|x
operator|.
name|getClasses
argument_list|()
argument_list|)
control|)
block|{
name|Class_
name|p
init|=
name|c
operator|.
name|getParentClass
argument_list|()
decl_stmt|;
while|while
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|x
operator|.
name|getClasses
argument_list|()
operator|.
name|contains
argument_list|(
name|p
argument_list|)
condition|)
name|x
operator|.
name|getClasses
argument_list|()
operator|.
name|remove
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
name|p
operator|.
name|getParentClass
argument_list|()
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"All done."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

