begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|DocumentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|XMLWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|purdue
operator|.
name|BannerTermProvider
import|;
end_import

begin_class
specifier|public
class|class
name|DegreeWorksImportTest
block|{
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DegreeWorksImportTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|int
name|guessEnrollmentFromLastLike
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Session
name|session
parameter_list|,
name|String
name|area
parameter_list|,
name|String
name|major
parameter_list|,
name|String
name|classification
parameter_list|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select count(distinct d.student) from LastLikeCourseDemand d inner join d.student.areaClasfMajors acm "
operator|+
literal|"where d.subjectArea.session = :sessionId and "
operator|+
literal|"acm.major.code=:major and acm.academicArea.academicAreaAbbreviation = :area and acm.academicClassification.code = :clasf"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"area"
argument_list|,
name|area
argument_list|)
operator|.
name|setString
argument_list|(
literal|"major"
argument_list|,
name|major
argument_list|)
operator|.
name|setString
argument_list|(
literal|"clasf"
argument_list|,
name|classification
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|int
name|guessEnrollmentFromReal
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Session
name|session
parameter_list|,
name|String
name|area
parameter_list|,
name|String
name|major
parameter_list|,
name|String
name|classification
parameter_list|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select count(distinct e.student) from StudentClassEnrollment e inner join e.student.areaClasfMajors acm "
operator|+
literal|"where e.student.session = :sessionId and "
operator|+
literal|"acm.major.code=:major and acm.academicArea.academicAreaAbbreviation = :area and acm.academicClassification.code = :clasf"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"area"
argument_list|,
name|area
argument_list|)
operator|.
name|setString
argument_list|(
literal|"major"
argument_list|,
name|major
argument_list|)
operator|.
name|setString
argument_list|(
literal|"clasf"
argument_list|,
name|classification
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|int
name|guessEnrollmentFromLastLike
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|CourseOffering
name|co
parameter_list|,
name|String
name|area
parameter_list|,
name|String
name|major
parameter_list|,
name|String
name|classification
parameter_list|)
block|{
if|if
condition|(
name|co
operator|.
name|getPermId
argument_list|()
operator|==
literal|null
condition|)
return|return
operator|(
operator|(
name|Number
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select count(distinct d.student) from LastLikeCourseDemand d inner join d.student.areaClasfMajors acm "
operator|+
literal|"where d.subjectArea.uniqueId = :subjectId and d.courseNbr = :courseNbr and "
operator|+
literal|"acm.major.code=:major and acm.academicArea.academicAreaAbbreviation = :area and acm.academicClassification.code = :clasf"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"subjectId"
argument_list|,
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"courseNbr"
argument_list|,
name|co
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"area"
argument_list|,
name|area
argument_list|)
operator|.
name|setString
argument_list|(
literal|"major"
argument_list|,
name|major
argument_list|)
operator|.
name|setString
argument_list|(
literal|"clasf"
argument_list|,
name|classification
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
return|;
else|else
return|return
operator|(
operator|(
name|Number
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select count(distinct d.student) from LastLikeCourseDemand d inner join d.student.areaClasfMajors acm "
operator|+
literal|"where d.subjectArea.session.uniqueId = :subjectId and d.coursePermId = :permId and "
operator|+
literal|"acm.major.code=:major and acm.academicArea.academicAreaAbbreviation = :area and acm.academicClassification.code = :clasf"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"permId"
argument_list|,
name|co
operator|.
name|getPermId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"area"
argument_list|,
name|area
argument_list|)
operator|.
name|setString
argument_list|(
literal|"major"
argument_list|,
name|major
argument_list|)
operator|.
name|setString
argument_list|(
literal|"clasf"
argument_list|,
name|classification
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|int
name|guessEnrollmentFromReal
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|CourseOffering
name|co
parameter_list|,
name|String
name|area
parameter_list|,
name|String
name|major
parameter_list|,
name|String
name|classification
parameter_list|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select count(distinct e.student) from StudentClassEnrollment e inner join e.student.areaClasfMajors acm "
operator|+
literal|"where e.courseOffering.uniqueId = :courseId and "
operator|+
literal|"acm.major.code=:major and acm.academicArea.academicAreaAbbreviation = :area and acm.academicClassification.code = :clasf"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"courseId"
argument_list|,
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"area"
argument_list|,
name|area
argument_list|)
operator|.
name|setString
argument_list|(
literal|"major"
argument_list|,
name|major
argument_list|)
operator|.
name|setString
argument_list|(
literal|"clasf"
argument_list|,
name|classification
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|CourseOffering
argument_list|>
name|getCourses
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Session
name|session
parameter_list|,
name|String
name|subject
parameter_list|,
name|String
name|courseNbr
parameter_list|)
block|{
name|List
argument_list|<
name|CourseOffering
argument_list|>
name|courses
init|=
operator|(
name|List
argument_list|<
name|CourseOffering
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from CourseOffering co where co.subjectArea.session.uniqueId = :sessionId and co.subjectArea.subjectAreaAbbreviation = :subject "
operator|+
literal|"and co.courseNbr like :courseNbr || '%' order by co.courseNbr"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"subject"
argument_list|,
name|subject
argument_list|)
operator|.
name|setString
argument_list|(
literal|"courseNbr"
argument_list|,
name|courseNbr
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
comment|// filter out not offered courses, if possible
name|boolean
name|hasOffered
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|CourseOffering
argument_list|>
name|i
init|=
name|courses
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|co
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getNotOffered
argument_list|()
condition|)
name|hasOffered
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|hasOffered
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|CourseOffering
argument_list|>
name|i
init|=
name|courses
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|co
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getNotOffered
argument_list|()
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
return|return
name|courses
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|ToolBox
operator|.
name|configureLogging
argument_list|()
expr_stmt|;
name|HibernateUtil
operator|.
name|configureHibernate
argument_list|(
name|ApplicationProperties
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|new
name|SessionDAO
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"initiative"
argument_list|,
literal|"PWL"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"year"
argument_list|,
literal|"2015"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"term"
argument_list|,
literal|"Spring"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Academic session not found, use properties initiative, year, and term to set academic session."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Session: "
operator|+
name|session
argument_list|)
expr_stmt|;
block|}
name|String
name|line
decl_stmt|;
name|int
name|bannerTerm
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|new
name|BannerTermProvider
argument_list|()
operator|.
name|getExternalTerm
argument_list|(
operator|new
name|AcademicSessionInfo
argument_list|(
name|session
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|NumberFormat
name|clasfFormat
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"00"
argument_list|)
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Banner term: "
operator|+
name|bannerTerm
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|test
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|counts
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
literal|"/Users/muller/Test/DegreeWorks/Student_counts_201510.csv"
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|in
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|data
init|=
name|line
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"SGBSTDN_MAJR_CODE_1"
operator|.
name|equals
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|)
condition|)
continue|continue;
name|String
name|major
init|=
name|data
index|[
literal|0
index|]
decl_stmt|;
name|int
name|term
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|data
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|term
operator|>
name|bannerTerm
condition|)
continue|continue;
name|int
name|code
init|=
operator|(
literal|"Fall"
operator|.
name|equals
argument_list|(
name|session
operator|.
name|getAcademicTerm
argument_list|()
argument_list|)
condition|?
literal|1
else|:
literal|2
operator|)
decl_stmt|;
while|while
condition|(
name|term
operator|<=
name|bannerTerm
operator|-
literal|100
condition|)
block|{
name|code
operator|+=
literal|2
expr_stmt|;
name|term
operator|+=
literal|100
expr_stmt|;
block|}
name|String
name|key
init|=
name|major
operator|+
literal|":"
operator|+
name|clasfFormat
operator|.
name|format
argument_list|(
name|code
argument_list|)
decl_stmt|;
name|Integer
name|count
init|=
name|counts
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|counts
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|count
operator|==
literal|null
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|data
index|[
literal|4
index|]
argument_list|)
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|data
index|[
literal|4
index|]
argument_list|)
operator|+
name|count
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|test
operator|.
name|put
argument_list|(
name|data
index|[
literal|2
index|]
argument_list|,
name|clasfFormat
operator|.
name|format
argument_list|(
name|code
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Mapping "
operator|+
name|ToolBox
operator|.
name|dict2string
argument_list|(
name|test
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
literal|"/Users/muller/Test/DegreeWorks/template_data.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Template
argument_list|>
name|templates
init|=
operator|new
name|ArrayList
argument_list|<
name|Template
argument_list|>
argument_list|()
decl_stmt|;
name|Template
name|template
init|=
literal|null
decl_stmt|;
name|Pattern
name|termPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
literal|" Term ([1-9]+)"
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|in
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|data
init|=
name|line
operator|.
name|split
argument_list|(
literal|"!"
argument_list|)
decl_stmt|;
name|String
name|recordType
init|=
name|data
index|[
literal|0
index|]
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
literal|"MST"
operator|.
name|equals
argument_list|(
name|recordType
argument_list|)
condition|)
block|{
name|template
operator|=
operator|new
name|Template
argument_list|(
name|data
index|[
literal|0
index|]
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|templates
operator|.
name|add
argument_list|(
name|template
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Processing template "
operator|+
name|template
operator|.
name|getId
argument_list|()
operator|+
literal|" (description: "
operator|+
name|data
index|[
literal|1
index|]
operator|+
literal|", active:"
operator|+
name|data
index|[
literal|2
index|]
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"TERM"
operator|.
name|equals
argument_list|(
name|recordType
argument_list|)
condition|)
block|{
name|Matcher
name|m
init|=
name|termPattern
operator|.
name|matcher
argument_list|(
name|data
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|int
name|code
init|=
literal|2
operator|*
operator|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|-
literal|1
operator|)
operator|+
operator|(
literal|"Fall"
operator|.
name|equals
argument_list|(
name|session
operator|.
name|getAcademicTerm
argument_list|()
argument_list|)
condition|?
literal|1
else|:
literal|2
operator|)
decl_stmt|;
name|Classification
name|c
init|=
operator|new
name|Classification
argument_list|(
name|template
argument_list|,
name|data
index|[
literal|1
index|]
argument_list|,
name|clasfFormat
operator|.
name|format
argument_list|(
name|code
argument_list|)
argument_list|)
decl_stmt|;
name|template
operator|.
name|addClassification
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  added classification "
operator|+
name|c
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|"TAG"
operator|.
name|equals
argument_list|(
name|recordType
argument_list|)
condition|)
block|{
name|String
name|code
init|=
name|data
index|[
literal|1
index|]
decl_stmt|;
name|String
name|value
init|=
name|data
index|[
literal|2
index|]
decl_stmt|;
if|if
condition|(
literal|"COLLEGE"
operator|.
name|equals
argument_list|(
name|code
argument_list|)
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"    -- academic area "
operator|+
name|value
argument_list|)
expr_stmt|;
name|template
operator|.
name|setArea
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"MAJOR"
operator|.
name|equals
argument_list|(
name|code
argument_list|)
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"    -- major "
operator|+
name|value
argument_list|)
expr_stmt|;
name|template
operator|.
name|setMajor
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|"GROUPMST"
operator|.
name|equals
argument_list|(
name|recordType
argument_list|)
condition|)
block|{
name|Classification
name|c
init|=
name|template
operator|.
name|getClassification
argument_list|(
name|data
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
continue|continue;
name|Group
name|g
init|=
operator|new
name|Group
argument_list|(
name|c
argument_list|,
name|data
index|[
literal|1
index|]
argument_list|,
literal|"R"
operator|+
name|c
operator|.
name|getCode
argument_list|()
argument_list|,
literal|"REQ"
argument_list|)
decl_stmt|;
name|c
operator|.
name|addGroup
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  select all of ("
operator|+
name|c
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"CHOICEGROUP"
operator|.
name|equals
argument_list|(
name|recordType
argument_list|)
condition|)
block|{
name|Classification
name|c
init|=
name|template
operator|.
name|getClassification
argument_list|(
name|data
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
continue|continue;
name|Group
name|g
init|=
operator|new
name|Group
argument_list|(
name|c
argument_list|,
name|data
index|[
literal|1
index|]
argument_list|,
literal|"O"
operator|+
name|c
operator|.
name|getCode
argument_list|()
operator|+
literal|"-"
operator|+
name|data
index|[
literal|5
index|]
argument_list|,
literal|"OPT"
argument_list|)
decl_stmt|;
name|c
operator|.
name|addGroup
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  select one of ("
operator|+
name|c
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"CLASSGROUP"
operator|.
name|equals
argument_list|(
name|recordType
argument_list|)
condition|)
block|{
name|Group
name|g
init|=
name|template
operator|.
name|getGroup
argument_list|(
name|data
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|g
operator|==
literal|null
condition|)
continue|continue;
name|Group
name|x
init|=
operator|new
name|Group
argument_list|(
name|g
operator|.
name|getClassification
argument_list|()
argument_list|,
name|data
index|[
literal|1
index|]
argument_list|,
literal|"X"
operator|+
name|g
operator|.
name|getClassification
argument_list|()
operator|.
name|getCode
argument_list|()
operator|+
literal|"-"
operator|+
name|data
index|[
literal|5
index|]
argument_list|,
literal|"REQ"
argument_list|)
decl_stmt|;
name|x
operator|.
name|setParentId
argument_list|(
name|g
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|g
operator|.
name|getClassification
argument_list|()
operator|.
name|addGroup
argument_list|(
name|x
argument_list|)
expr_stmt|;
empty_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"    all of ("
operator|+
name|x
operator|.
name|getClassification
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"CLASS"
operator|.
name|equals
argument_list|(
name|recordType
argument_list|)
condition|)
block|{
name|Group
name|g
init|=
name|template
operator|.
name|getGroup
argument_list|(
name|data
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|g
operator|==
literal|null
condition|)
continue|continue;
name|List
argument_list|<
name|CourseOffering
argument_list|>
name|courses
init|=
name|getCourses
argument_list|(
name|hibSession
argument_list|,
name|session
argument_list|,
name|data
index|[
literal|5
index|]
argument_list|,
name|data
index|[
literal|6
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|courses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Course "
operator|+
name|data
index|[
literal|5
index|]
operator|+
literal|" "
operator|+
name|data
index|[
literal|6
index|]
operator|+
literal|" does not exist."
argument_list|)
expr_stmt|;
continue|continue;
block|}
else|else
block|{
for|for
control|(
name|CourseOffering
name|course
range|:
name|courses
control|)
if|if
condition|(
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getNotOffered
argument_list|()
condition|)
name|sLog
operator|.
name|info
argument_list|(
literal|"Course "
operator|+
name|course
operator|.
name|getCourseNameWithTitle
argument_list|()
operator|+
literal|" is not offered."
argument_list|)
expr_stmt|;
block|}
name|Course
name|course
init|=
operator|new
name|Course
argument_list|(
name|g
argument_list|,
name|data
index|[
literal|5
index|]
argument_list|,
name|data
index|[
literal|6
index|]
argument_list|)
decl_stmt|;
name|g
operator|.
name|addCourse
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"    "
operator|+
name|course
operator|+
literal|" ("
operator|+
name|g
operator|.
name|getClassification
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"CLASSGRP"
operator|.
name|equals
argument_list|(
name|recordType
argument_list|)
condition|)
block|{
name|Group
name|g
init|=
name|template
operator|.
name|getGroup
argument_list|(
name|data
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|g
operator|==
literal|null
condition|)
continue|continue;
name|List
argument_list|<
name|CourseOffering
argument_list|>
name|courses
init|=
name|getCourses
argument_list|(
name|hibSession
argument_list|,
name|session
argument_list|,
name|data
index|[
literal|5
index|]
argument_list|,
name|data
index|[
literal|6
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|courses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Course "
operator|+
name|data
index|[
literal|5
index|]
operator|+
literal|" "
operator|+
name|data
index|[
literal|6
index|]
operator|+
literal|" does not exist."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Course
name|course
init|=
operator|new
name|Course
argument_list|(
name|g
argument_list|,
name|data
index|[
literal|5
index|]
argument_list|,
name|data
index|[
literal|6
index|]
argument_list|)
decl_stmt|;
name|g
operator|.
name|addCourse
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"        "
operator|+
name|course
operator|+
literal|" ("
operator|+
name|g
operator|.
name|getClassification
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"PLACEHOLDER"
operator|.
name|equals
argument_list|(
name|recordType
argument_list|)
condition|)
block|{
name|Group
name|g
init|=
name|template
operator|.
name|getGroup
argument_list|(
name|data
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|g
operator|==
literal|null
condition|)
continue|continue;
name|sLog
operator|.
name|info
argument_list|(
literal|"    placeholder "
operator|+
name|data
index|[
literal|3
index|]
operator|+
literal|" ("
operator|+
name|data
index|[
literal|4
index|]
operator|+
literal|", "
operator|+
name|g
operator|.
name|getClassification
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"NONCOURSE"
operator|.
name|equals
argument_list|(
name|recordType
argument_list|)
condition|)
block|{
block|}
if|else if
condition|(
literal|"GPA"
operator|.
name|equals
argument_list|(
name|recordType
argument_list|)
condition|)
block|{
block|}
if|else if
condition|(
literal|"TEST"
operator|.
name|equals
argument_list|(
name|recordType
argument_list|)
condition|)
block|{
block|}
else|else
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"  not recognized "
operator|+
name|recordType
argument_list|)
expr_stmt|;
block|}
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|Document
name|document
init|=
name|DocumentHelper
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|Element
name|root
init|=
name|document
operator|.
name|addElement
argument_list|(
literal|"curricula"
argument_list|)
decl_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"campus"
argument_list|,
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"term"
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"year"
argument_list|,
name|session
operator|.
name|getAcademicYear
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"created"
argument_list|,
operator|new
name|Date
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|NumberFormat
name|shareFormat
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.000"
argument_list|)
decl_stmt|;
for|for
control|(
name|Template
name|t
range|:
name|templates
control|)
block|{
name|Element
name|curriculum
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"curriculum"
argument_list|)
decl_stmt|;
name|curriculum
operator|.
name|addElement
argument_list|(
literal|"academicArea"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"abbreviation"
argument_list|,
name|t
operator|.
name|getArea
argument_list|()
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|addElement
argument_list|(
literal|"major"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"code"
argument_list|,
name|t
operator|.
name|getMajor
argument_list|()
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|addAttribute
argument_list|(
literal|"abbreviation"
argument_list|,
name|t
operator|.
name|getArea
argument_list|()
operator|+
literal|"/"
operator|+
name|t
operator|.
name|getMajor
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Classification
name|c
range|:
name|t
operator|.
name|getClassifications
argument_list|()
control|)
block|{
name|Element
name|clasf
init|=
name|curriculum
operator|.
name|addElement
argument_list|(
literal|"classification"
argument_list|)
decl_stmt|;
name|clasf
operator|.
name|addElement
argument_list|(
literal|"academicClassification"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"code"
argument_list|,
name|c
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// int enrollment = guessEnrollmentFromReal(hibSession, session, t.getArea(), t.getMajor(), c.getCode());
name|Integer
name|enrollment
init|=
name|counts
operator|.
name|get
argument_list|(
name|t
operator|.
name|getMajor
argument_list|()
operator|+
literal|":"
operator|+
name|c
operator|.
name|getCode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|enrollment
operator|==
literal|null
condition|)
name|enrollment
operator|=
literal|0
expr_stmt|;
name|clasf
operator|.
name|addAttribute
argument_list|(
literal|"enrollment"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|enrollment
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Group
name|g
range|:
name|c
operator|.
name|getGroups
argument_list|()
control|)
block|{
name|int
name|mIdx
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|g
operator|.
name|hasParentId
argument_list|()
condition|)
continue|continue;
name|int
name|total
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|enrollments
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|grtot
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"OPT"
operator|.
name|equals
argument_list|(
name|g
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Course
name|r
range|:
name|g
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|List
argument_list|<
name|CourseOffering
argument_list|>
name|courses
init|=
name|getCourses
argument_list|(
name|hibSession
argument_list|,
name|session
argument_list|,
name|r
operator|.
name|getSubject
argument_list|()
argument_list|,
name|r
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|CourseOffering
name|co
range|:
name|courses
control|)
block|{
name|int
name|e
init|=
name|guessEnrollmentFromReal
argument_list|(
name|hibSession
argument_list|,
name|co
argument_list|,
name|t
operator|.
name|getArea
argument_list|()
argument_list|,
name|t
operator|.
name|getMajor
argument_list|()
argument_list|,
name|c
operator|.
name|getCode
argument_list|()
argument_list|)
decl_stmt|;
name|total
operator|+=
name|e
expr_stmt|;
name|enrollments
operator|.
name|put
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|co
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
condition|)
break|break;
block|}
block|}
for|for
control|(
name|Group
name|h
range|:
name|c
operator|.
name|getChildGroups
argument_list|(
name|g
argument_list|)
control|)
block|{
name|int
name|m
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Course
name|r
range|:
name|h
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|int
name|tot
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|CourseOffering
argument_list|>
name|courses
init|=
name|getCourses
argument_list|(
name|hibSession
argument_list|,
name|session
argument_list|,
name|r
operator|.
name|getSubject
argument_list|()
argument_list|,
name|r
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|CourseOffering
name|co
range|:
name|courses
control|)
block|{
name|int
name|e
init|=
name|guessEnrollmentFromReal
argument_list|(
name|hibSession
argument_list|,
name|co
argument_list|,
name|t
operator|.
name|getArea
argument_list|()
argument_list|,
name|t
operator|.
name|getMajor
argument_list|()
argument_list|,
name|c
operator|.
name|getCode
argument_list|()
argument_list|)
decl_stmt|;
name|tot
operator|+=
name|e
expr_stmt|;
name|enrollments
operator|.
name|put
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|co
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
condition|)
break|break;
block|}
if|if
condition|(
name|m
operator|<
name|tot
condition|)
name|m
operator|=
name|tot
expr_stmt|;
block|}
name|grtot
operator|.
name|put
argument_list|(
name|h
operator|.
name|getId
argument_list|()
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|total
operator|+=
name|m
expr_stmt|;
block|}
block|}
name|int
name|size
init|=
name|g
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|Group
name|h
range|:
name|c
operator|.
name|getChildGroups
argument_list|(
name|g
argument_list|)
control|)
if|if
condition|(
operator|!
name|h
operator|.
name|getCourses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|size
operator|++
expr_stmt|;
for|for
control|(
name|Course
name|r
range|:
name|g
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|List
argument_list|<
name|CourseOffering
argument_list|>
name|courses
init|=
name|getCourses
argument_list|(
name|hibSession
argument_list|,
name|session
argument_list|,
name|r
operator|.
name|getSubject
argument_list|()
argument_list|,
name|r
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|courses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Course "
operator|+
name|r
operator|+
literal|" does not exist."
argument_list|)
expr_stmt|;
name|Element
name|ce
init|=
name|clasf
operator|.
name|addElement
argument_list|(
literal|"course"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"subject"
argument_list|,
name|r
operator|.
name|getSubject
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"courseNbr"
argument_list|,
name|r
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
decl_stmt|;
name|ce
operator|.
name|addElement
argument_list|(
literal|"group"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|g
operator|.
name|getId
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|g
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|g
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"REQ"
operator|.
name|equals
argument_list|(
name|g
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
name|ce
operator|.
name|addAttribute
argument_list|(
literal|"share"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
if|else if
condition|(
name|total
operator|>
literal|0
condition|)
name|ce
operator|.
name|addAttribute
argument_list|(
literal|"share"
argument_list|,
literal|"0.0"
argument_list|)
expr_stmt|;
else|else
name|ce
operator|.
name|addAttribute
argument_list|(
literal|"share"
argument_list|,
name|shareFormat
operator|.
name|format
argument_list|(
literal|1.0
operator|/
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|courses
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|||
name|courses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
condition|)
block|{
name|CourseOffering
name|co
init|=
name|courses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Element
name|ce
init|=
name|clasf
operator|.
name|addElement
argument_list|(
literal|"course"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"subject"
argument_list|,
name|co
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"courseNbr"
argument_list|,
name|co
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
decl_stmt|;
name|ce
operator|.
name|addElement
argument_list|(
literal|"group"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|g
operator|.
name|getId
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|g
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|g
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"REQ"
operator|.
name|equals
argument_list|(
name|g
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
name|ce
operator|.
name|addAttribute
argument_list|(
literal|"share"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
if|else if
condition|(
name|total
operator|>
literal|0
condition|)
block|{
name|Integer
name|e
init|=
name|enrollments
operator|.
name|get
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
name|ce
operator|.
name|addAttribute
argument_list|(
literal|"share"
argument_list|,
literal|"0.0"
argument_list|)
expr_stmt|;
else|else
block|{
name|ce
operator|.
name|addAttribute
argument_list|(
literal|"share"
argument_list|,
name|shareFormat
operator|.
name|format
argument_list|(
operator|(
operator|(
name|double
operator|)
name|e
operator|)
operator|/
name|total
argument_list|)
argument_list|)
expr_stmt|;
name|ce
operator|.
name|addAttribute
argument_list|(
literal|"enrollment"
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|ce
operator|.
name|addAttribute
argument_list|(
literal|"share"
argument_list|,
name|shareFormat
operator|.
name|format
argument_list|(
literal|1.0
operator|/
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Course "
operator|+
name|r
operator|+
literal|" has multiple matches."
argument_list|)
expr_stmt|;
name|mIdx
operator|++
expr_stmt|;
if|if
condition|(
literal|"REQ"
operator|.
name|equals
argument_list|(
name|g
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|total
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|CourseOffering
name|co
range|:
name|courses
control|)
block|{
name|int
name|e
init|=
name|guessEnrollmentFromReal
argument_list|(
name|hibSession
argument_list|,
name|co
argument_list|,
name|t
operator|.
name|getArea
argument_list|()
argument_list|,
name|t
operator|.
name|getMajor
argument_list|()
argument_list|,
name|c
operator|.
name|getCode
argument_list|()
argument_list|)
decl_stmt|;
name|total
operator|+=
name|e
expr_stmt|;
name|enrollments
operator|.
name|put
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|courses
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CourseOffering
name|co
init|=
name|courses
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- "
operator|+
name|co
operator|.
name|getCourseNameWithTitle
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|ce
init|=
name|clasf
operator|.
name|addElement
argument_list|(
literal|"course"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"subject"
argument_list|,
name|co
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"courseNbr"
argument_list|,
name|co
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
name|ce
operator|.
name|addElement
argument_list|(
literal|"group"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|g
operator|.
name|getId
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|g
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|g
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|ce
operator|.
name|addElement
argument_list|(
literal|"group"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|g
operator|.
name|getId
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|"-"
operator|+
name|mIdx
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|g
operator|.
name|getName
argument_list|()
operator|+
literal|"_"
operator|+
name|mIdx
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
literal|"OPT"
argument_list|)
expr_stmt|;
if|if
condition|(
name|total
operator|>
literal|0
condition|)
block|{
name|Integer
name|e
init|=
name|enrollments
operator|.
name|get
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
name|ce
operator|.
name|addAttribute
argument_list|(
literal|"share"
argument_list|,
literal|"0.0"
argument_list|)
expr_stmt|;
else|else
block|{
name|ce
operator|.
name|addAttribute
argument_list|(
literal|"share"
argument_list|,
name|shareFormat
operator|.
name|format
argument_list|(
operator|(
operator|(
name|double
operator|)
name|e
operator|)
operator|/
name|total
argument_list|)
argument_list|)
expr_stmt|;
name|ce
operator|.
name|addAttribute
argument_list|(
literal|"enrollment"
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|"REQ"
operator|.
name|equals
argument_list|(
name|g
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
name|ce
operator|.
name|addAttribute
argument_list|(
literal|"share"
argument_list|,
name|shareFormat
operator|.
name|format
argument_list|(
literal|1.0
operator|/
name|courses
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|ce
operator|.
name|addAttribute
argument_list|(
literal|"share"
argument_list|,
name|shareFormat
operator|.
name|format
argument_list|(
literal|1.0
operator|/
name|size
operator|/
name|courses
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Group
name|h
range|:
name|c
operator|.
name|getChildGroups
argument_list|(
name|g
argument_list|)
control|)
block|{
name|int
name|tot
init|=
name|grtot
operator|.
name|get
argument_list|(
name|h
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|h
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Course
name|r
init|=
name|h
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CourseOffering
argument_list|>
name|courses
init|=
name|getCourses
argument_list|(
name|hibSession
argument_list|,
name|session
argument_list|,
name|r
operator|.
name|getSubject
argument_list|()
argument_list|,
name|r
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|courses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Course "
operator|+
name|r
operator|+
literal|" does not exist."
argument_list|)
expr_stmt|;
name|Element
name|ce
init|=
name|clasf
operator|.
name|addElement
argument_list|(
literal|"course"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"subject"
argument_list|,
name|r
operator|.
name|getSubject
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"courseNbr"
argument_list|,
name|r
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|j
operator|==
literal|0
condition|)
name|ce
operator|.
name|addElement
argument_list|(
literal|"group"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|g
operator|.
name|getId
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|g
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|g
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|ce
operator|.
name|addElement
argument_list|(
literal|"group"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|h
operator|.
name|getId
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|h
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|h
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|total
operator|>
literal|0
condition|)
name|ce
operator|.
name|addAttribute
argument_list|(
literal|"share"
argument_list|,
name|shareFormat
operator|.
name|format
argument_list|(
operator|(
operator|(
name|double
operator|)
name|tot
operator|)
operator|/
name|total
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|ce
operator|.
name|addAttribute
argument_list|(
literal|"share"
argument_list|,
name|shareFormat
operator|.
name|format
argument_list|(
literal|1.0
operator|/
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|courses
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|||
name|courses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
condition|)
block|{
name|CourseOffering
name|co
init|=
name|courses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Element
name|ce
init|=
name|clasf
operator|.
name|addElement
argument_list|(
literal|"course"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"subject"
argument_list|,
name|co
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"courseNbr"
argument_list|,
name|co
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|j
operator|==
literal|0
condition|)
name|ce
operator|.
name|addElement
argument_list|(
literal|"group"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|g
operator|.
name|getId
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|g
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|g
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|ce
operator|.
name|addElement
argument_list|(
literal|"group"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|h
operator|.
name|getId
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|h
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|h
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|total
operator|>
literal|0
condition|)
name|ce
operator|.
name|addAttribute
argument_list|(
literal|"share"
argument_list|,
name|shareFormat
operator|.
name|format
argument_list|(
operator|(
operator|(
name|double
operator|)
name|tot
operator|)
operator|/
name|total
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|ce
operator|.
name|addAttribute
argument_list|(
literal|"share"
argument_list|,
name|shareFormat
operator|.
name|format
argument_list|(
literal|1.0
operator|/
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Course "
operator|+
name|r
operator|+
literal|" has multiple matches."
argument_list|)
expr_stmt|;
name|mIdx
operator|++
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|courses
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CourseOffering
name|co
init|=
name|courses
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- "
operator|+
name|co
operator|.
name|getCourseNameWithTitle
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|ce
init|=
name|clasf
operator|.
name|addElement
argument_list|(
literal|"course"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"subject"
argument_list|,
name|co
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"courseNbr"
argument_list|,
name|co
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|j
operator|==
literal|0
operator|&&
name|i
operator|==
literal|0
condition|)
name|ce
operator|.
name|addElement
argument_list|(
literal|"group"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|g
operator|.
name|getId
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|g
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|g
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
name|ce
operator|.
name|addElement
argument_list|(
literal|"group"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|h
operator|.
name|getId
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|h
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|h
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|ce
operator|.
name|addElement
argument_list|(
literal|"group"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|h
operator|.
name|getId
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|"-"
operator|+
name|mIdx
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|h
operator|.
name|getName
argument_list|()
operator|+
literal|"_"
operator|+
name|mIdx
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
literal|"OPT"
argument_list|)
expr_stmt|;
if|if
condition|(
name|total
operator|>
literal|0
condition|)
block|{
name|Integer
name|e
init|=
name|enrollments
operator|.
name|get
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
name|ce
operator|.
name|addAttribute
argument_list|(
literal|"share"
argument_list|,
literal|"0.0"
argument_list|)
expr_stmt|;
else|else
block|{
name|ce
operator|.
name|addAttribute
argument_list|(
literal|"share"
argument_list|,
name|shareFormat
operator|.
name|format
argument_list|(
operator|(
operator|(
name|double
operator|)
name|e
operator|)
operator|/
name|total
argument_list|)
argument_list|)
expr_stmt|;
name|ce
operator|.
name|addAttribute
argument_list|(
literal|"enrollment"
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|ce
operator|.
name|addAttribute
argument_list|(
literal|"share"
argument_list|,
name|shareFormat
operator|.
name|format
argument_list|(
literal|1.0
operator|/
name|size
operator|/
name|courses
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
name|FileWriter
name|out
init|=
operator|new
name|FileWriter
argument_list|(
literal|"/Users/muller/Test/DegreeWorks/curricula_"
operator|+
name|bannerTerm
operator|+
literal|".xml"
argument_list|)
decl_stmt|;
operator|new
name|XMLWriter
argument_list|(
name|out
argument_list|,
name|OutputFormat
operator|.
name|createPrettyPrint
argument_list|()
argument_list|)
operator|.
name|write
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|HibernateUtil
operator|.
name|closeHibernate
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"All done."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Test failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|Template
block|{
name|String
name|iId
decl_stmt|,
name|iArea
decl_stmt|,
name|iMajor
decl_stmt|;
name|List
argument_list|<
name|Classification
argument_list|>
name|iClassifications
init|=
operator|new
name|ArrayList
argument_list|<
name|Classification
argument_list|>
argument_list|()
decl_stmt|;
name|Template
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|iId
operator|=
name|id
expr_stmt|;
block|}
name|String
name|getId
parameter_list|()
block|{
return|return
name|iId
return|;
block|}
name|String
name|getArea
parameter_list|()
block|{
return|return
name|iArea
return|;
block|}
name|void
name|setArea
parameter_list|(
name|String
name|area
parameter_list|)
block|{
name|iArea
operator|=
name|area
expr_stmt|;
block|}
name|String
name|getMajor
parameter_list|()
block|{
return|return
name|iMajor
return|;
block|}
name|void
name|setMajor
parameter_list|(
name|String
name|major
parameter_list|)
block|{
name|iMajor
operator|=
name|major
expr_stmt|;
block|}
name|void
name|addClassification
parameter_list|(
name|Classification
name|c
parameter_list|)
block|{
name|iClassifications
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|Classification
name|getClassification
parameter_list|(
name|String
name|id
parameter_list|)
block|{
for|for
control|(
name|Classification
name|c
range|:
name|iClassifications
control|)
if|if
condition|(
name|c
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
return|return
name|c
return|;
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|Classification
argument_list|>
name|getClassifications
parameter_list|()
block|{
return|return
name|iClassifications
return|;
block|}
name|Group
name|getGroup
parameter_list|(
name|String
name|id
parameter_list|)
block|{
for|for
control|(
name|Classification
name|c
range|:
name|iClassifications
control|)
for|for
control|(
name|Group
name|g
range|:
name|c
operator|.
name|getGroups
argument_list|()
control|)
if|if
condition|(
name|g
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
return|return
name|g
return|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|iArea
operator|+
literal|"/"
operator|+
name|iMajor
return|;
block|}
block|}
specifier|static
class|class
name|Classification
block|{
name|Template
name|iTemplate
decl_stmt|;
name|String
name|iId
decl_stmt|;
name|String
name|iCode
decl_stmt|;
name|List
argument_list|<
name|Group
argument_list|>
name|iGroups
init|=
operator|new
name|ArrayList
argument_list|<
name|Group
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|iEnrollment
init|=
literal|0
decl_stmt|;
name|Classification
parameter_list|(
name|Template
name|template
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|code
parameter_list|)
block|{
name|iTemplate
operator|=
name|template
expr_stmt|;
name|iId
operator|=
name|id
expr_stmt|;
name|iCode
operator|=
name|code
expr_stmt|;
block|}
name|Template
name|getTemplate
parameter_list|()
block|{
return|return
name|iTemplate
return|;
block|}
name|String
name|getId
parameter_list|()
block|{
return|return
name|iId
return|;
block|}
name|String
name|getCode
parameter_list|()
block|{
return|return
name|iCode
return|;
block|}
name|void
name|addGroup
parameter_list|(
name|Group
name|c
parameter_list|)
block|{
name|iGroups
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|Group
name|getGroup
parameter_list|(
name|String
name|id
parameter_list|)
block|{
for|for
control|(
name|Group
name|c
range|:
name|iGroups
control|)
if|if
condition|(
name|c
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
return|return
name|c
return|;
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|Group
argument_list|>
name|getGroups
parameter_list|()
block|{
return|return
name|iGroups
return|;
block|}
name|List
argument_list|<
name|Group
argument_list|>
name|getChildGroups
parameter_list|(
name|Group
name|group
parameter_list|)
block|{
name|List
argument_list|<
name|Group
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|Group
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Group
name|g
range|:
name|iGroups
control|)
if|if
condition|(
name|group
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|g
operator|.
name|getParentId
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|g
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
name|int
name|getEnrollment
parameter_list|()
block|{
return|return
name|iEnrollment
return|;
block|}
name|void
name|setEnrollment
parameter_list|(
name|int
name|enrollment
parameter_list|)
block|{
name|iEnrollment
operator|=
name|enrollment
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|iCode
return|;
block|}
block|}
specifier|static
class|class
name|Group
block|{
name|Classification
name|iClassification
decl_stmt|;
name|String
name|iId
decl_stmt|;
name|String
name|iName
decl_stmt|;
name|String
name|iType
decl_stmt|;
name|String
name|iParentId
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Course
argument_list|>
name|iCourses
init|=
operator|new
name|ArrayList
argument_list|<
name|Course
argument_list|>
argument_list|()
decl_stmt|;
name|Group
parameter_list|(
name|Classification
name|classification
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|iClassification
operator|=
name|classification
expr_stmt|;
name|iId
operator|=
name|id
expr_stmt|;
name|iName
operator|=
name|name
expr_stmt|;
name|iType
operator|=
name|type
expr_stmt|;
block|}
name|Classification
name|getClassification
parameter_list|()
block|{
return|return
name|iClassification
return|;
block|}
name|String
name|getId
parameter_list|()
block|{
return|return
name|iId
return|;
block|}
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
name|String
name|getType
parameter_list|()
block|{
return|return
name|iType
return|;
block|}
name|boolean
name|hasParentId
parameter_list|()
block|{
return|return
name|iParentId
operator|!=
literal|null
return|;
block|}
name|String
name|getParentId
parameter_list|()
block|{
return|return
name|iParentId
return|;
block|}
name|void
name|setParentId
parameter_list|(
name|String
name|parentId
parameter_list|)
block|{
name|iParentId
operator|=
name|parentId
expr_stmt|;
block|}
name|void
name|addCourse
parameter_list|(
name|Course
name|course
parameter_list|)
block|{
name|iCourses
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Course
argument_list|>
name|getCourses
parameter_list|()
block|{
return|return
name|iCourses
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
block|}
specifier|static
class|class
name|Course
block|{
name|Group
name|iGroup
decl_stmt|;
name|String
name|iSubject
decl_stmt|;
name|String
name|iCourseNbr
decl_stmt|;
name|float
name|iShare
init|=
literal|1.0f
decl_stmt|;
name|Course
parameter_list|(
name|Group
name|group
parameter_list|,
name|String
name|subject
parameter_list|,
name|String
name|courseNbr
parameter_list|)
block|{
name|iGroup
operator|=
name|group
expr_stmt|;
name|iSubject
operator|=
name|subject
expr_stmt|;
name|iCourseNbr
operator|=
name|courseNbr
expr_stmt|;
block|}
name|Group
name|getGroup
parameter_list|()
block|{
return|return
name|iGroup
return|;
block|}
name|String
name|getSubject
parameter_list|()
block|{
return|return
name|iSubject
return|;
block|}
name|String
name|getCourseNbr
parameter_list|()
block|{
return|return
name|iCourseNbr
return|;
block|}
name|void
name|setShare
parameter_list|(
name|float
name|share
parameter_list|)
block|{
name|iShare
operator|=
name|share
expr_stmt|;
block|}
name|float
name|getShare
parameter_list|()
block|{
return|return
name|iShare
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getSubject
argument_list|()
operator|+
literal|" "
operator|+
name|getCourseNbr
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

