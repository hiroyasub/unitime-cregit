begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|DocumentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|XMLWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|BuildingPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeaturePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroupPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePatternDays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePatternTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolverGroupDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|CommitedClassAssignmentProxy
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ExportPreferences
block|{
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ExportPreferences
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|CommitedClassAssignmentProxy
name|proxy
init|=
operator|new
name|CommitedClassAssignmentProxy
argument_list|()
decl_stmt|;
specifier|public
name|Comparator
name|ioCmp
init|=
literal|null
decl_stmt|;
specifier|public
name|Comparator
name|subpartCmp
init|=
literal|null
decl_stmt|;
specifier|public
name|Comparator
name|classCmp
init|=
literal|null
decl_stmt|;
specifier|public
name|void
name|exportDatePattern
parameter_list|(
name|Element
name|parent
parameter_list|,
name|DatePattern
name|datePattern
parameter_list|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Exporting "
operator|+
name|datePattern
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|el
init|=
name|parent
operator|.
name|addElement
argument_list|(
literal|"datePattern"
argument_list|)
decl_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"uniqueId"
argument_list|,
name|datePattern
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|datePattern
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"pattern"
argument_list|,
name|datePattern
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"visible"
argument_list|,
name|datePattern
operator|.
name|isVisible
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|datePattern
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"offset"
argument_list|,
name|datePattern
operator|.
name|getOffset
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|exportTimePattern
parameter_list|(
name|Element
name|parent
parameter_list|,
name|TimePattern
name|timePattern
parameter_list|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Exporting "
operator|+
name|timePattern
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|el
init|=
name|parent
operator|.
name|addElement
argument_list|(
literal|"timePattern"
argument_list|)
decl_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"uniqueId"
argument_list|,
name|timePattern
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|timePattern
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"minPerMtg"
argument_list|,
name|timePattern
operator|.
name|getMinPerMtg
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"slotsPerMtg"
argument_list|,
name|timePattern
operator|.
name|getSlotsPerMtg
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"nrMeetings"
argument_list|,
name|timePattern
operator|.
name|getNrMeetings
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"visible"
argument_list|,
name|timePattern
operator|.
name|isVisible
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|timePattern
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|timePattern
operator|.
name|getDays
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePatternDays
name|d
init|=
operator|(
name|TimePatternDays
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|el
operator|.
name|addElement
argument_list|(
literal|"dayCode"
argument_list|)
operator|.
name|setText
argument_list|(
name|d
operator|.
name|getDayCode
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|timePattern
operator|.
name|getTimes
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePatternTime
name|t
init|=
operator|(
name|TimePatternTime
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|el
operator|.
name|addElement
argument_list|(
literal|"startSlot"
argument_list|)
operator|.
name|setText
argument_list|(
name|t
operator|.
name|getStartSlot
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|exportSubpartStructure
parameter_list|(
name|Element
name|parent
parameter_list|,
name|SchedulingSubpart
name|s
parameter_list|)
block|{
name|Element
name|el
init|=
name|parent
operator|.
name|addElement
argument_list|(
literal|"schedulingSubpart"
argument_list|)
decl_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"uniqueId"
argument_list|,
name|s
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"itype"
argument_list|,
name|s
operator|.
name|getItypeDesc
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"suffix"
argument_list|,
name|s
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"minutesPerWk"
argument_list|,
name|s
operator|.
name|getMinutesPerWk
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|TreeSet
name|subparts
init|=
operator|new
name|TreeSet
argument_list|(
name|subpartCmp
argument_list|)
decl_stmt|;
name|subparts
operator|.
name|addAll
argument_list|(
name|s
operator|.
name|getChildSubparts
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|subparts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|exportSubpartStructure
argument_list|(
name|el
argument_list|,
operator|(
name|SchedulingSubpart
operator|)
name|s
argument_list|)
expr_stmt|;
block|}
name|TreeSet
name|classes
init|=
operator|new
name|TreeSet
argument_list|(
name|classCmp
argument_list|)
decl_stmt|;
name|classes
operator|.
name|addAll
argument_list|(
name|s
operator|.
name|getClasses
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Element
name|x
init|=
name|el
operator|.
name|addElement
argument_list|(
literal|"class"
argument_list|)
decl_stmt|;
name|x
operator|.
name|addAttribute
argument_list|(
literal|"uniqueId"
argument_list|,
name|c
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
condition|)
name|x
operator|.
name|addAttribute
argument_list|(
literal|"parent"
argument_list|,
name|c
operator|.
name|getParentClass
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|addAttribute
argument_list|(
literal|"expectedCapacity"
argument_list|,
name|c
operator|.
name|getExpectedCapacity
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|addAttribute
argument_list|(
literal|"maxExpectedCapacity"
argument_list|,
name|c
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|addAttribute
argument_list|(
literal|"roomRatio"
argument_list|,
name|c
operator|.
name|getRoomRatio
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|addAttribute
argument_list|(
literal|"nbrRooms"
argument_list|,
name|c
operator|.
name|getNbrRooms
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|addAttribute
argument_list|(
literal|"manager"
argument_list|,
name|c
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|addAttribute
argument_list|(
literal|"sectionNumber"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|c
operator|.
name|getSectionNumber
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|exportInstructionalOffering
parameter_list|(
name|Element
name|parent
parameter_list|,
name|InstructionalOffering
name|io
parameter_list|)
throws|throws
name|Exception
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Exporting "
operator|+
name|io
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|el
init|=
name|parent
operator|.
name|addElement
argument_list|(
literal|"instructionalOffering"
argument_list|)
decl_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"uniqueId"
argument_list|,
name|io
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"subjectArea"
argument_list|,
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"courseNbr"
argument_list|,
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|io
operator|.
name|getInstrOfferingPermId
argument_list|()
operator|!=
literal|null
condition|)
name|el
operator|.
name|addAttribute
argument_list|(
literal|"instrOfferingPermId"
argument_list|,
name|io
operator|.
name|getInstrOfferingPermId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|io
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|co
init|=
operator|(
name|CourseOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Element
name|x
init|=
name|el
operator|.
name|addElement
argument_list|(
literal|"courseOffering"
argument_list|)
decl_stmt|;
name|x
operator|.
name|addAttribute
argument_list|(
literal|"uniqueId"
argument_list|,
name|co
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|addAttribute
argument_list|(
literal|"subjectArea"
argument_list|,
name|co
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|addAttribute
argument_list|(
literal|"courseNbr"
argument_list|,
name|co
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|addAttribute
argument_list|(
literal|"projectedDemand"
argument_list|,
name|co
operator|.
name|getProjectedDemand
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|addAttribute
argument_list|(
literal|"isControl"
argument_list|,
name|co
operator|.
name|getIsControl
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|co
operator|.
name|getPermId
argument_list|()
operator|!=
literal|null
condition|)
name|x
operator|.
name|addAttribute
argument_list|(
literal|"permId"
argument_list|,
name|co
operator|.
name|getPermId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|c
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Element
name|x
init|=
name|el
operator|.
name|addElement
argument_list|(
literal|"instrOfferingConfig"
argument_list|)
decl_stmt|;
name|x
operator|.
name|addAttribute
argument_list|(
literal|"uniqueId"
argument_list|,
name|c
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|addAttribute
argument_list|(
literal|"limit"
argument_list|,
name|c
operator|.
name|getLimit
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|TreeSet
name|subparts
init|=
operator|new
name|TreeSet
argument_list|(
name|subpartCmp
argument_list|)
decl_stmt|;
name|subparts
operator|.
name|addAll
argument_list|(
name|c
operator|.
name|getSchedulingSubparts
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|subparts
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|s
init|=
operator|(
name|SchedulingSubpart
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|getParentSubpart
argument_list|()
operator|==
literal|null
condition|)
name|exportSubpartStructure
argument_list|(
name|x
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|exportClass
parameter_list|(
name|Element
name|parent
parameter_list|,
name|Class_
name|clazz
parameter_list|)
throws|throws
name|Exception
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Exporting "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|el
init|=
name|parent
operator|.
name|addElement
argument_list|(
literal|"class"
argument_list|)
decl_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"uniqueId"
argument_list|,
name|clazz
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"subjectArea"
argument_list|,
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"courseNbr"
argument_list|,
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"itype"
argument_list|,
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"section"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|clazz
operator|.
name|getSectionNumber
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"suffix"
argument_list|,
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"manager"
argument_list|,
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"expectedCapacity"
argument_list|,
name|clazz
operator|.
name|getExpectedCapacity
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"numberOfRooms"
argument_list|,
name|clazz
operator|.
name|getNbrRooms
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"maxExpectedCapacity"
argument_list|,
name|clazz
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"roomRatio"
argument_list|,
name|clazz
operator|.
name|getRoomRatio
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"notes"
argument_list|,
name|clazz
operator|.
name|getNotes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getDatePattern
argument_list|()
operator|!=
literal|null
condition|)
name|el
operator|.
name|addAttribute
argument_list|(
literal|"datePattern"
argument_list|,
name|clazz
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"deptCode"
argument_list|,
name|clazz
operator|.
name|getControllingDept
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|clazz
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|exportClassInstructor
argument_list|(
name|el
argument_list|,
operator|(
name|ClassInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|clazz
operator|.
name|getPreferences
argument_list|(
name|TimePref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|exportTimePref
argument_list|(
name|el
argument_list|,
operator|(
name|TimePref
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|clazz
operator|.
name|getPreferences
argument_list|(
name|RoomPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|exportRoomPref
argument_list|(
name|el
argument_list|,
operator|(
name|RoomPref
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|clazz
operator|.
name|getPreferences
argument_list|(
name|BuildingPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|exportBuildingPref
argument_list|(
name|el
argument_list|,
operator|(
name|BuildingPref
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|clazz
operator|.
name|getPreferences
argument_list|(
name|RoomFeaturePref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|exportRoomFeaturePref
argument_list|(
name|el
argument_list|,
operator|(
name|RoomFeaturePref
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|clazz
operator|.
name|getPreferences
argument_list|(
name|RoomGroupPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|exportRoomGroupPref
argument_list|(
name|el
argument_list|,
operator|(
name|RoomGroupPref
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assignment
name|assignment
init|=
name|proxy
operator|.
name|getAssignment
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
name|el
operator|.
name|addAttribute
argument_list|(
literal|"assignedDays"
argument_list|,
name|assignment
operator|.
name|getDays
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"assignedSlot"
argument_list|,
name|assignment
operator|.
name|getStartSlot
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"assignedTimePattern"
argument_list|,
name|assignment
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|r
init|=
name|el
operator|.
name|addElement
argument_list|(
literal|"assignedRooms"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|assignment
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|r
operator|.
name|addElement
argument_list|(
literal|"room"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"uniqueId"
argument_list|,
name|location
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|exportSchedulingSubpart
parameter_list|(
name|Element
name|parent
parameter_list|,
name|SchedulingSubpart
name|subpart
parameter_list|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Exporting "
operator|+
name|subpart
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|subpart
operator|.
name|getItypeDesc
argument_list|()
operator|+
operator|(
name|subpart
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
literal|" ("
operator|+
name|subpart
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
operator|+
literal|")"
operator|)
argument_list|)
expr_stmt|;
name|Element
name|el
init|=
name|parent
operator|.
name|addElement
argument_list|(
literal|"schedulingSubpart"
argument_list|)
decl_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"uniqueId"
argument_list|,
name|subpart
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"subjectArea"
argument_list|,
name|subpart
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"courseNbr"
argument_list|,
name|subpart
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"itype"
argument_list|,
name|subpart
operator|.
name|getItypeDesc
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"suffix"
argument_list|,
name|subpart
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"manager"
argument_list|,
name|subpart
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"minutesPerWk"
argument_list|,
name|subpart
operator|.
name|getMinutesPerWk
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|subpart
operator|.
name|getDatePattern
argument_list|()
operator|!=
literal|null
condition|)
name|el
operator|.
name|addAttribute
argument_list|(
literal|"datePattern"
argument_list|,
name|subpart
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"deptCode"
argument_list|,
name|subpart
operator|.
name|getControllingDept
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|subpart
operator|.
name|getPreferences
argument_list|(
name|TimePref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|exportTimePref
argument_list|(
name|el
argument_list|,
operator|(
name|TimePref
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|subpart
operator|.
name|getPreferences
argument_list|(
name|RoomPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|exportRoomPref
argument_list|(
name|el
argument_list|,
operator|(
name|RoomPref
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|subpart
operator|.
name|getPreferences
argument_list|(
name|BuildingPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|exportBuildingPref
argument_list|(
name|el
argument_list|,
operator|(
name|BuildingPref
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|subpart
operator|.
name|getPreferences
argument_list|(
name|RoomFeaturePref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|exportRoomFeaturePref
argument_list|(
name|el
argument_list|,
operator|(
name|RoomFeaturePref
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|subpart
operator|.
name|getPreferences
argument_list|(
name|RoomGroupPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|exportRoomGroupPref
argument_list|(
name|el
argument_list|,
operator|(
name|RoomGroupPref
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|exportClassInstructor
parameter_list|(
name|Element
name|parent
parameter_list|,
name|ClassInstructor
name|classInstructor
parameter_list|)
block|{
name|Element
name|el
init|=
name|parent
operator|.
name|addElement
argument_list|(
literal|"instructor"
argument_list|)
decl_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"uniqueId"
argument_list|,
name|classInstructor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"isLead"
argument_list|,
name|classInstructor
operator|.
name|isLead
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"percentShare"
argument_list|,
name|classInstructor
operator|.
name|getPercentShare
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"puid"
argument_list|,
name|classInstructor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|exportTimePref
parameter_list|(
name|Element
name|parent
parameter_list|,
name|TimePref
name|timePref
parameter_list|)
block|{
name|Element
name|el
init|=
name|parent
operator|.
name|addElement
argument_list|(
literal|"timePref"
argument_list|)
decl_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"uniqueId"
argument_list|,
name|timePref
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"timePattern"
argument_list|,
name|timePref
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"level"
argument_list|,
name|timePref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"preference"
argument_list|,
name|timePref
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|exportRoomPref
parameter_list|(
name|Element
name|parent
parameter_list|,
name|RoomPref
name|roomPref
parameter_list|)
block|{
name|Element
name|el
init|=
name|parent
operator|.
name|addElement
argument_list|(
literal|"roomPref"
argument_list|)
decl_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"uniqueId"
argument_list|,
name|roomPref
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"level"
argument_list|,
name|roomPref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"room"
argument_list|,
name|roomPref
operator|.
name|getRoom
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|exportBuildingPref
parameter_list|(
name|Element
name|parent
parameter_list|,
name|BuildingPref
name|bldgPref
parameter_list|)
block|{
name|Element
name|el
init|=
name|parent
operator|.
name|addElement
argument_list|(
literal|"buildingPref"
argument_list|)
decl_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"uniqueId"
argument_list|,
name|bldgPref
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"level"
argument_list|,
name|bldgPref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"building"
argument_list|,
name|bldgPref
operator|.
name|getBuilding
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|exportRoomFeaturePref
parameter_list|(
name|Element
name|parent
parameter_list|,
name|RoomFeaturePref
name|roomFeaturePref
parameter_list|)
block|{
name|Element
name|el
init|=
name|parent
operator|.
name|addElement
argument_list|(
literal|"roomFeaturePref"
argument_list|)
decl_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"uniqueId"
argument_list|,
name|roomFeaturePref
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"level"
argument_list|,
name|roomFeaturePref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"feature"
argument_list|,
name|roomFeaturePref
operator|.
name|getRoomFeature
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|exportRoomGroupPref
parameter_list|(
name|Element
name|parent
parameter_list|,
name|RoomGroupPref
name|roomGroupPref
parameter_list|)
block|{
name|Element
name|el
init|=
name|parent
operator|.
name|addElement
argument_list|(
literal|"roomGroupPref"
argument_list|)
decl_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"uniqueId"
argument_list|,
name|roomGroupPref
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"level"
argument_list|,
name|roomGroupPref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"group"
argument_list|,
name|roomGroupPref
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|exportDistributionPref
parameter_list|(
name|Element
name|parent
parameter_list|,
name|DistributionPref
name|distributionPref
parameter_list|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Exporting "
operator|+
name|distributionPref
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|el
init|=
name|parent
operator|.
name|addElement
argument_list|(
literal|"distributionPref"
argument_list|)
decl_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"uniqueId"
argument_list|,
name|distributionPref
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"level"
argument_list|,
name|distributionPref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|distributionPref
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"manager"
argument_list|,
operator|(
operator|(
name|Department
operator|)
name|distributionPref
operator|.
name|getOwner
argument_list|()
operator|)
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"grouping"
argument_list|,
operator|(
name|distributionPref
operator|.
name|getGrouping
argument_list|()
operator|==
literal|null
condition|?
literal|"0"
else|:
name|distributionPref
operator|.
name|getGrouping
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|distributionPref
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|dobj
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|dobj
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|dobj
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|Element
name|x
init|=
name|el
operator|.
name|addElement
argument_list|(
literal|"class"
argument_list|)
decl_stmt|;
name|x
operator|.
name|addAttribute
argument_list|(
literal|"sequenceNumber"
argument_list|,
name|dobj
operator|.
name|getSequenceNumber
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|addAttribute
argument_list|(
literal|"uniqueId"
argument_list|,
name|clazz
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|addAttribute
argument_list|(
literal|"subjectArea"
argument_list|,
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|addAttribute
argument_list|(
literal|"courseNbr"
argument_list|,
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|addAttribute
argument_list|(
literal|"itype"
argument_list|,
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|addAttribute
argument_list|(
literal|"section"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|clazz
operator|.
name|getSectionNumber
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|addAttribute
argument_list|(
literal|"suffix"
argument_list|,
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|dobj
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|dobj
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|Element
name|x
init|=
name|el
operator|.
name|addElement
argument_list|(
literal|"schedulingSubpart"
argument_list|)
decl_stmt|;
name|x
operator|.
name|addAttribute
argument_list|(
literal|"sequenceNumber"
argument_list|,
name|dobj
operator|.
name|getSequenceNumber
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|addAttribute
argument_list|(
literal|"uniqueId"
argument_list|,
name|subpart
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|addAttribute
argument_list|(
literal|"subjectArea"
argument_list|,
name|subpart
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|addAttribute
argument_list|(
literal|"courseNbr"
argument_list|,
name|subpart
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|addAttribute
argument_list|(
literal|"itype"
argument_list|,
name|subpart
operator|.
name|getItypeDesc
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|addAttribute
argument_list|(
literal|"suffix"
argument_list|,
name|subpart
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|exportInstructor
parameter_list|(
name|Element
name|parent
parameter_list|,
name|DepartmentalInstructor
name|instructorDept
parameter_list|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Exporting "
operator|+
name|instructorDept
operator|.
name|getNameLastFirst
argument_list|()
operator|+
literal|" ("
operator|+
name|instructorDept
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|Element
name|el
init|=
name|parent
operator|.
name|addElement
argument_list|(
literal|"instructor"
argument_list|)
decl_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"uniqueId"
argument_list|,
name|instructorDept
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"deptCode"
argument_list|,
name|instructorDept
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"puid"
argument_list|,
name|instructorDept
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|instructorDept
operator|.
name|getPreferences
argument_list|(
name|TimePref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|exportTimePref
argument_list|(
name|el
argument_list|,
operator|(
name|TimePref
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|instructorDept
operator|.
name|getPreferences
argument_list|(
name|RoomPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|exportRoomPref
argument_list|(
name|el
argument_list|,
operator|(
name|RoomPref
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|instructorDept
operator|.
name|getPreferences
argument_list|(
name|BuildingPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|exportBuildingPref
argument_list|(
name|el
argument_list|,
operator|(
name|BuildingPref
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|instructorDept
operator|.
name|getPreferences
argument_list|(
name|RoomFeaturePref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|exportRoomFeaturePref
argument_list|(
name|el
argument_list|,
operator|(
name|RoomFeaturePref
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|instructorDept
operator|.
name|getPreferences
argument_list|(
name|RoomGroupPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|exportRoomGroupPref
argument_list|(
name|el
argument_list|,
operator|(
name|RoomGroupPref
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|exportInstructors
parameter_list|(
name|Element
name|parent
parameter_list|,
name|Department
name|dept
parameter_list|)
block|{
name|List
name|ids
init|=
operator|(
operator|new
name|DepartmentDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select id from DepartmentalInstructor id where id.department.deptCode=:deptCode and id.department.sessionId=:sessionId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"deptCode"
argument_list|,
name|dept
operator|.
name|getDeptCode
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|dept
operator|.
name|getSessionId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|ids
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|id
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|exportInstructor
argument_list|(
name|parent
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|exportAll
parameter_list|(
name|Long
name|solverGroupId
parameter_list|,
name|File
name|outFile
parameter_list|)
throws|throws
name|Exception
block|{
name|SolverGroup
name|solverGroup
init|=
operator|(
operator|new
name|SolverGroupDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|solverGroupId
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|solverGroup
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|DocumentHelper
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|Element
name|root
init|=
name|document
operator|.
name|addElement
argument_list|(
literal|"export"
argument_list|)
decl_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"solverGroup"
argument_list|,
name|solverGroup
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"solverGroupName"
argument_list|,
name|solverGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"session"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"academicYearTerm"
argument_list|,
name|session
operator|.
name|getAcademicYearTerm
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"academicInitiative"
argument_list|,
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|TimePattern
operator|.
name|findAll
argument_list|(
name|session
argument_list|,
literal|null
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePattern
name|t
init|=
operator|(
name|TimePattern
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|exportTimePattern
argument_list|(
name|root
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|DatePattern
operator|.
name|findAll
argument_list|(
name|session
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DatePattern
name|d
init|=
operator|(
name|DatePattern
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|exportDatePattern
argument_list|(
name|root
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
name|classCmp
operator|=
operator|new
name|Comparator
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|Class_
name|c1
init|=
operator|(
name|Class_
operator|)
name|o1
decl_stmt|;
name|Class_
name|c2
init|=
operator|(
name|Class_
operator|)
name|o2
decl_stmt|;
name|int
name|cmp
init|=
name|c1
operator|.
name|getCourseName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|c1
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|c1
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|c1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|TreeSet
name|classes
init|=
operator|new
name|TreeSet
argument_list|(
name|classCmp
argument_list|)
decl_stmt|;
name|subpartCmp
operator|=
operator|new
name|Comparator
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|SchedulingSubpart
name|s1
init|=
operator|(
name|SchedulingSubpart
operator|)
name|o1
decl_stmt|;
name|SchedulingSubpart
name|s2
init|=
operator|(
name|SchedulingSubpart
operator|)
name|o2
decl_stmt|;
name|int
name|cmp
init|=
name|s1
operator|.
name|getCourseName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|s1
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|s1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|TreeSet
name|subparts
init|=
operator|new
name|TreeSet
argument_list|(
name|subpartCmp
argument_list|)
decl_stmt|;
name|ioCmp
operator|=
operator|new
name|Comparator
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|InstructionalOffering
name|i1
init|=
operator|(
name|InstructionalOffering
operator|)
name|o1
decl_stmt|;
name|InstructionalOffering
name|i2
init|=
operator|(
name|InstructionalOffering
operator|)
name|o2
decl_stmt|;
name|int
name|cmp
init|=
name|i1
operator|.
name|getCourseName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|i2
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|i1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|i2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|TreeSet
name|offerings
init|=
operator|new
name|TreeSet
argument_list|(
name|ioCmp
argument_list|)
decl_stmt|;
name|classes
operator|.
name|addAll
argument_list|(
name|solverGroup
operator|.
name|getClasses
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|exportClass
argument_list|(
name|root
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|SchedulingSubpart
name|s
init|=
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
decl_stmt|;
name|offerings
operator|.
name|add
argument_list|(
name|s
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|solverGroup
operator|.
name|getDepartments
argument_list|()
operator|.
name|contains
argument_list|(
name|s
operator|.
name|getManagingDept
argument_list|()
argument_list|)
condition|)
block|{
name|subparts
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|subparts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|s
init|=
operator|(
name|SchedulingSubpart
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|exportSchedulingSubpart
argument_list|(
name|root
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|offerings
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructionalOffering
name|io
init|=
operator|(
name|InstructionalOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|exportInstructionalOffering
argument_list|(
name|root
argument_list|,
name|io
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|solverGroup
operator|.
name|getDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|exportInstructors
argument_list|(
name|root
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|solverGroup
operator|.
name|getDistributionPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionPref
name|d
init|=
operator|(
name|DistributionPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|exportDistributionPref
argument_list|(
name|root
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
name|FileOutputStream
name|fos
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fos
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|outFile
argument_list|)
expr_stmt|;
operator|(
operator|new
name|XMLWriter
argument_list|(
name|fos
argument_list|,
name|OutputFormat
operator|.
name|createPrettyPrint
argument_list|()
argument_list|)
operator|)
operator|.
name|write
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|fos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|fos
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|fos
operator|!=
literal|null
condition|)
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
comment|// Example arguments: jdbc:oracle:thin:@tamarind.smas.purdue.edu:1521:sms8l 1 c:\\export.xml
try|try
block|{
name|ToolBox
operator|.
name|configureLogging
argument_list|()
expr_stmt|;
name|HibernateUtil
operator|.
name|configureHibernate
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
operator|(
operator|new
name|ExportPreferences
argument_list|()
operator|)
operator|.
name|exportAll
argument_list|(
operator|new
name|Long
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|args
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

