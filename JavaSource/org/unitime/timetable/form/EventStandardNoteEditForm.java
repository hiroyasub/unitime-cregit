begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionErrors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StandardEventNote
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StandardEventNoteDAO
import|;
end_import

begin_comment
comment|/**  * @author Zuzana Mullerova  */
end_comment

begin_class
specifier|public
class|class
name|EventStandardNoteEditForm
extends|extends
name|ActionForm
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|4715197445617849102L
decl_stmt|;
specifier|private
name|String
name|iScreen
init|=
literal|"edit"
decl_stmt|;
specifier|private
name|String
name|iNote
decl_stmt|;
specifier|private
name|String
name|iReference
decl_stmt|;
specifier|private
name|String
name|iOp
decl_stmt|;
specifier|private
name|StandardEventNote
name|iStandardNote
decl_stmt|;
specifier|private
name|Long
name|iId
decl_stmt|;
specifier|public
name|ActionErrors
name|validate
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|ActionErrors
name|errors
init|=
operator|new
name|ActionErrors
argument_list|()
decl_stmt|;
if|if
condition|(
name|iNote
operator|==
literal|null
operator|||
name|iNote
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"note"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Please enter the text for the note."
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|StandardEventNote
operator|.
name|findAll
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StandardEventNote
name|sen2
init|=
operator|(
name|StandardEventNote
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|iNote
operator|.
name|compareToIgnoreCase
argument_list|(
name|sen2
operator|.
name|getNote
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|iId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|iId
operator|.
name|compareTo
argument_list|(
name|sen2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"noteExists"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Another standard note with this text already exists."
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"orgNameExists"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Another standard note with this text already exists."
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|iReference
operator|==
literal|null
operator|||
name|iReference
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"note"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Please enter the reference."
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|StandardEventNote
operator|.
name|findAll
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StandardEventNote
name|sen2
init|=
operator|(
name|StandardEventNote
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|iReference
operator|.
name|compareToIgnoreCase
argument_list|(
name|sen2
operator|.
name|getReference
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|iId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|iId
operator|.
name|compareTo
argument_list|(
name|sen2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"referenceExists"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Another standard note with this reference already exists."
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"orgNameExists"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Another standard note with this reference already exists."
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|errors
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
if|if
condition|(
literal|"add"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"op"
argument_list|)
argument_list|)
condition|)
block|{
name|iScreen
operator|=
literal|"add"
expr_stmt|;
name|iStandardNote
operator|=
literal|null
expr_stmt|;
block|}
if|else if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"id"
argument_list|)
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getParameter
argument_list|(
literal|"id"
argument_list|)
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|iId
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|iStandardNote
operator|=
name|StandardEventNoteDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|iId
argument_list|)
expr_stmt|;
block|}
name|iNote
operator|=
operator|(
name|iStandardNote
operator|==
literal|null
condition|?
literal|""
else|:
name|iStandardNote
operator|.
name|getNote
argument_list|()
operator|)
expr_stmt|;
name|iReference
operator|=
operator|(
name|iStandardNote
operator|==
literal|null
condition|?
literal|""
else|:
name|iStandardNote
operator|.
name|getReference
argument_list|()
operator|)
expr_stmt|;
block|}
specifier|public
name|String
name|getScreen
parameter_list|()
block|{
return|return
name|iScreen
return|;
block|}
specifier|public
name|void
name|setScreen
parameter_list|(
name|String
name|screen
parameter_list|)
block|{
name|iScreen
operator|=
name|screen
expr_stmt|;
block|}
specifier|public
name|String
name|getNote
parameter_list|()
block|{
return|return
name|iNote
return|;
block|}
specifier|public
name|void
name|setNote
parameter_list|(
name|String
name|note
parameter_list|)
block|{
name|iNote
operator|=
name|note
expr_stmt|;
block|}
specifier|public
name|String
name|getReference
parameter_list|()
block|{
return|return
name|iReference
return|;
block|}
specifier|public
name|void
name|setReference
parameter_list|(
name|String
name|reference
parameter_list|)
block|{
name|iReference
operator|=
name|reference
expr_stmt|;
block|}
specifier|public
name|String
name|getOp
parameter_list|()
block|{
return|return
name|iOp
return|;
block|}
specifier|public
name|void
name|setOp
parameter_list|(
name|String
name|op
parameter_list|)
block|{
name|iOp
operator|=
name|op
expr_stmt|;
block|}
specifier|public
name|Long
name|getId
parameter_list|()
block|{
return|return
name|iId
return|;
block|}
specifier|public
name|void
name|setId
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
name|iId
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|StandardEventNote
name|getStandardNote
parameter_list|()
block|{
return|return
name|iStandardNote
return|;
block|}
specifier|public
name|void
name|setStandardNote
parameter_list|(
name|StandardEventNote
name|sen
parameter_list|)
block|{
name|iStandardNote
operator|=
name|sen
expr_stmt|;
block|}
block|}
end_class

end_unit

