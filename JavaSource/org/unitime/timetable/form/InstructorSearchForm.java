begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionErrors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**   * MyEclipse Struts  * Creation date: 10-14-2005  *   * XDoclet definition:  * @struts:form name="instructorSearchForm"  */
end_comment

begin_class
specifier|public
class|class
name|InstructorSearchForm
extends|extends
name|ActionForm
block|{
comment|// --------------------------------------------------------- Instance Variables
comment|/** 	 *  	 */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|5750116865914272048L
decl_stmt|;
comment|/** deptCode property */
specifier|private
name|String
name|deptUniqueId
decl_stmt|;
comment|/** displayDeptList property */
specifier|private
name|boolean
name|displayDeptList
decl_stmt|;
comment|/** op property */
specifier|private
name|String
name|op
decl_stmt|;
comment|/** admin property */
specifier|private
name|String
name|admin
decl_stmt|;
specifier|private
name|boolean
name|editable
decl_stmt|;
comment|// --------------------------------------------------------- Methods
comment|/**  	 * Returns the deptUniqueId. 	 * @return String 	 */
specifier|public
name|String
name|getDeptUniqueId
parameter_list|()
block|{
return|return
name|deptUniqueId
return|;
block|}
comment|/**  	 * Set the deptUniqueId. 	 * @param deptUniqueId The deptUniqueId to set 	 */
specifier|public
name|void
name|setDeptUniqueId
parameter_list|(
name|String
name|deptUniqueId
parameter_list|)
block|{
name|this
operator|.
name|deptUniqueId
operator|=
name|deptUniqueId
expr_stmt|;
block|}
comment|/** 	 *  	 * @return 	 */
specifier|public
name|String
name|getOp
parameter_list|()
block|{
return|return
name|op
return|;
block|}
comment|/** 	 *  	 * @param op 	 */
specifier|public
name|void
name|setOp
parameter_list|(
name|String
name|op
parameter_list|)
block|{
name|this
operator|.
name|op
operator|=
name|op
expr_stmt|;
block|}
comment|/** 	 *  	 * @return 	 */
specifier|public
name|String
name|getAdmin
parameter_list|()
block|{
return|return
name|admin
return|;
block|}
comment|/** 	 *  	 * @param admin 	 */
specifier|public
name|void
name|setAdmin
parameter_list|(
name|String
name|admin
parameter_list|)
block|{
name|this
operator|.
name|admin
operator|=
name|admin
expr_stmt|;
block|}
comment|// --------------------------------------------------------- Methods
comment|/**  	 * Method reset 	 * @param mapping 	 * @param request 	 */
specifier|public
name|void
name|reset
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|deptUniqueId
operator|=
literal|""
expr_stmt|;
name|editable
operator|=
literal|false
expr_stmt|;
name|displayDeptList
operator|=
literal|false
expr_stmt|;
name|HttpSession
name|httpSession
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|Web
operator|.
name|isLoggedIn
argument_list|(
name|httpSession
argument_list|)
condition|)
block|{
name|displayDeptList
operator|=
name|displayDeptList
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * this function is used to determin whether there should be a dropdown list for departments on the instructor search page. 	 * if deptSize is 1, no dropdown list; otherwise, there should be a list. 	 * @param request 	 * @return 	 */
specifier|public
name|boolean
name|displayDeptList
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|setDisplayDeptList
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|sessionId
init|=
operator|(
name|Long
operator|)
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_ID_ATTR_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|user
operator|.
name|getRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|ADMIN_ROLE
argument_list|)
operator|&&
operator|!
name|user
operator|.
name|getCurrentRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|VIEW_ALL_ROLE
argument_list|)
operator|&&
operator|!
name|user
operator|.
name|getCurrentRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|EXAM_MGR_ROLE
argument_list|)
condition|)
block|{
name|TimetableManager
name|mgr
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Set
name|mgrDepts
init|=
name|mgr
operator|.
name|departmentsForSession
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|mgrDepts
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|setDisplayDeptList
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|isDisplayDeptList
argument_list|()
return|;
block|}
comment|/* (non-Javadoc)      * @see org.apache.struts.action.ActionForm#validate(org.apache.struts.action.ActionMapping, javax.servlet.http.HttpServletRequest)      */
specifier|public
name|ActionErrors
name|validate
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|ActionErrors
name|errors
init|=
operator|new
name|ActionErrors
argument_list|()
decl_stmt|;
if|if
condition|(
name|deptUniqueId
operator|==
literal|null
operator|||
name|deptUniqueId
operator|.
name|equalsIgnoreCase
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"deptUniqueId"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.required"
argument_list|,
literal|"Department"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|errors
return|;
block|}
specifier|public
name|boolean
name|isDisplayDeptList
parameter_list|()
block|{
return|return
name|displayDeptList
return|;
block|}
specifier|public
name|void
name|setDisplayDeptList
parameter_list|(
name|boolean
name|displayDeptList
parameter_list|)
block|{
name|this
operator|.
name|displayDeptList
operator|=
name|displayDeptList
expr_stmt|;
block|}
specifier|public
name|void
name|setEditable
parameter_list|(
name|boolean
name|editable
parameter_list|)
block|{
name|this
operator|.
name|editable
operator|=
name|editable
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEditable
parameter_list|()
block|{
return|return
name|editable
return|;
block|}
block|}
end_class

end_unit

