begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionErrors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CharacteristicReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DynamicList
import|;
end_import

begin_comment
comment|/**  * Base Characteristic Reservation Form  * Subclasses: StudentGroupReservation, AcademicAreaPosReservation,  * and CourseReservation forms  *   * @author Heston Fernandes  */
end_comment

begin_class
specifier|public
class|class
name|CharacteristicReservationForm
extends|extends
name|ReservationForm
block|{
comment|// --------------------------------------------------------- Instance Variables
specifier|private
name|List
name|reserved
decl_stmt|;
specifier|private
name|List
name|priorEnrollment
decl_stmt|;
specifier|private
name|List
name|projectedEnrollment
decl_stmt|;
specifier|private
name|List
name|requested
decl_stmt|;
comment|// --------------------------------------------------------- Methods
comment|/**       * Method validate      * @param mapping      * @param request      * @return ActionErrors      */
specifier|public
name|ActionErrors
name|validate
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|ActionErrors
name|errors
init|=
name|super
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
decl_stmt|;
comment|//TODO Reservations Bypass - to be removed later
if|if
condition|(
operator|!
name|getOwnerType
argument_list|()
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|RESV_OWNER_CLASS
argument_list|)
operator|&&
operator|!
name|checkReserved
argument_list|()
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"reserved"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Reserved Spaces must be a valid number. (&gt; 0 for new reservations,&gt;= 0 for pre-existing reservations)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// End Bypass
comment|//TODO Reservations - functionality to be made visible later
comment|/*         if(!checkListNumber(reserved, false, new Integer(1), null)) {             errors.add("reserved",                      new ActionMessage("errors.integerGt", "Reserved Spaces", "0") );         }         */
if|if
condition|(
operator|!
name|checkListNumber
argument_list|(
name|priorEnrollment
argument_list|,
literal|true
argument_list|,
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|)
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"priorEnrollment"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.integerGtEq"
argument_list|,
literal|"Prior Enrollment"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|checkListNumber
argument_list|(
name|projectedEnrollment
argument_list|,
literal|true
argument_list|,
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|)
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"projectedEnrollment"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.integerGtEq"
argument_list|,
literal|"Projected Enrollment"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|errors
return|;
block|}
comment|/**      * Checks valid value for reserved spaces      * Value can be equal to 0 only if it is not a pre-existing reservation      * (no projected enrollment data exists)      * @return true if all checks pass, false otherwise      */
specifier|private
name|boolean
name|checkReserved
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reserved
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|value
init|=
operator|(
operator|(
name|String
operator|)
name|reserved
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
decl_stmt|;
name|int
name|intval
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|BLANK_OPTION_VALUE
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// Check is number
try|try
block|{
name|intval
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
name|Object
name|o
init|=
name|projectedEnrollment
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|o
operator|==
literal|null
operator|||
name|o
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|BLANK_OPTION_VALUE
argument_list|)
operator|)
operator|&&
name|intval
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**       * Method reset      * @param mapping      * @param request      */
specifier|public
name|void
name|reset
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|super
operator|.
name|reset
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|reserved
operator|=
name|DynamicList
operator|.
name|getInstance
argument_list|(
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|factoryResv
argument_list|)
expr_stmt|;
name|priorEnrollment
operator|=
name|DynamicList
operator|.
name|getInstance
argument_list|(
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|factoryResv
argument_list|)
expr_stmt|;
name|projectedEnrollment
operator|=
name|DynamicList
operator|.
name|getInstance
argument_list|(
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|factoryResv
argument_list|)
expr_stmt|;
name|requested
operator|=
name|DynamicList
operator|.
name|getInstance
argument_list|(
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|factoryResv
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
name|getPriorEnrollment
parameter_list|()
block|{
return|return
name|priorEnrollment
return|;
block|}
specifier|public
name|void
name|setPriorEnrollment
parameter_list|(
name|List
name|priorEnrollment
parameter_list|)
block|{
name|this
operator|.
name|priorEnrollment
operator|=
name|priorEnrollment
expr_stmt|;
block|}
specifier|public
name|String
name|getPriorEnrollment
parameter_list|(
name|int
name|key
parameter_list|)
block|{
return|return
name|priorEnrollment
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|setPriorEnrollment
parameter_list|(
name|int
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|this
operator|.
name|priorEnrollment
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
name|getProjectedEnrollment
parameter_list|()
block|{
return|return
name|projectedEnrollment
return|;
block|}
specifier|public
name|void
name|setProjectedEnrollment
parameter_list|(
name|List
name|projectedEnrollment
parameter_list|)
block|{
name|this
operator|.
name|projectedEnrollment
operator|=
name|projectedEnrollment
expr_stmt|;
block|}
specifier|public
name|String
name|getProjectedEnrollment
parameter_list|(
name|int
name|key
parameter_list|)
block|{
return|return
name|projectedEnrollment
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|setProjectedEnrollment
parameter_list|(
name|int
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|this
operator|.
name|projectedEnrollment
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
name|getReserved
parameter_list|()
block|{
return|return
name|reserved
return|;
block|}
specifier|public
name|void
name|setReserved
parameter_list|(
name|List
name|reserved
parameter_list|)
block|{
name|this
operator|.
name|reserved
operator|=
name|reserved
expr_stmt|;
block|}
specifier|public
name|String
name|getReserved
parameter_list|(
name|int
name|key
parameter_list|)
block|{
return|return
name|reserved
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|setReserved
parameter_list|(
name|int
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|this
operator|.
name|reserved
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
name|getRequested
parameter_list|()
block|{
return|return
name|requested
return|;
block|}
specifier|public
name|void
name|setRequested
parameter_list|(
name|List
name|requested
parameter_list|)
block|{
name|this
operator|.
name|requested
operator|=
name|requested
expr_stmt|;
block|}
specifier|public
name|String
name|getRequested
parameter_list|(
name|int
name|key
parameter_list|)
block|{
return|return
name|requested
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|setRequested
parameter_list|(
name|int
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|this
operator|.
name|requested
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addToPriorEnrollment
parameter_list|(
name|String
name|priorEnrollment
parameter_list|)
block|{
name|this
operator|.
name|priorEnrollment
operator|.
name|add
argument_list|(
name|priorEnrollment
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addToProjectedEnrollment
parameter_list|(
name|String
name|projectedEnrollment
parameter_list|)
block|{
name|this
operator|.
name|projectedEnrollment
operator|.
name|add
argument_list|(
name|projectedEnrollment
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addToReserved
parameter_list|(
name|String
name|reserved
parameter_list|)
block|{
name|this
operator|.
name|reserved
operator|.
name|add
argument_list|(
name|reserved
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addToRequested
parameter_list|(
name|String
name|requested
parameter_list|)
block|{
name|this
operator|.
name|requested
operator|.
name|add
argument_list|(
name|requested
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addBlankRows
parameter_list|()
block|{
name|super
operator|.
name|addBlankRows
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|RESV_ROWS_ADDED
condition|;
name|i
operator|++
control|)
block|{
name|addToPriorEnrollment
argument_list|(
name|Constants
operator|.
name|BLANK_OPTION_VALUE
argument_list|)
expr_stmt|;
name|addToProjectedEnrollment
argument_list|(
name|Constants
operator|.
name|BLANK_OPTION_VALUE
argument_list|)
expr_stmt|;
name|addToReserved
argument_list|(
name|Constants
operator|.
name|BLANK_OPTION_VALUE
argument_list|)
expr_stmt|;
name|addToRequested
argument_list|(
name|Constants
operator|.
name|BLANK_OPTION_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|priorEnrollment
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|projectedEnrollment
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|reserved
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|requested
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|addReservation
parameter_list|(
name|CharacteristicReservation
name|resv
parameter_list|)
block|{
name|super
operator|.
name|addReservation
argument_list|(
name|resv
argument_list|)
expr_stmt|;
if|if
condition|(
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|!=
literal|null
condition|)
name|addToPriorEnrollment
argument_list|(
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|addToPriorEnrollment
argument_list|(
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|!=
literal|null
condition|)
name|addToProjectedEnrollment
argument_list|(
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|addToProjectedEnrollment
argument_list|(
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|resv
operator|.
name|getRequested
argument_list|()
operator|!=
literal|null
condition|)
name|addToRequested
argument_list|(
name|resv
operator|.
name|getRequested
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|addToRequested
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|addToReserved
argument_list|(
name|resv
operator|.
name|getReserved
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeRow
parameter_list|(
name|int
name|rowNum
parameter_list|)
block|{
if|if
condition|(
name|rowNum
operator|>=
literal|0
condition|)
block|{
name|super
operator|.
name|removeRow
argument_list|(
name|rowNum
argument_list|)
expr_stmt|;
name|priorEnrollment
operator|.
name|remove
argument_list|(
name|rowNum
argument_list|)
expr_stmt|;
name|projectedEnrollment
operator|.
name|remove
argument_list|(
name|rowNum
argument_list|)
expr_stmt|;
name|reserved
operator|.
name|remove
argument_list|(
name|rowNum
argument_list|)
expr_stmt|;
name|requested
operator|.
name|remove
argument_list|(
name|rowNum
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

