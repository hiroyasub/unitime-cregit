begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionErrors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamPeriodDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|PreferenceLevelDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|CalendarUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_comment
comment|/**   * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ExamPeriodEditForm
extends|extends
name|ActionForm
block|{
specifier|private
name|Long
name|iUniqueId
decl_stmt|;
specifier|private
name|String
name|iOp
decl_stmt|;
specifier|private
name|String
name|iDate
decl_stmt|;
specifier|private
name|Integer
name|iStart
decl_stmt|;
specifier|private
name|Integer
name|iLength
decl_stmt|;
specifier|private
name|Integer
name|iStart2
decl_stmt|;
specifier|private
name|Integer
name|iLength2
decl_stmt|;
specifier|private
name|Integer
name|iStart3
decl_stmt|;
specifier|private
name|Integer
name|iLength3
decl_stmt|;
specifier|private
name|Integer
name|iStart4
decl_stmt|;
specifier|private
name|Integer
name|iLength4
decl_stmt|;
specifier|private
name|Integer
name|iStart5
decl_stmt|;
specifier|private
name|Integer
name|iLength5
decl_stmt|;
specifier|private
name|String
name|iType
decl_stmt|;
specifier|private
name|Long
name|iPrefLevel
decl_stmt|;
specifier|private
name|boolean
name|iAutoSetup
decl_stmt|;
specifier|private
name|Session
name|iSession
decl_stmt|;
specifier|public
name|ActionErrors
name|validate
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|ActionErrors
name|errors
init|=
operator|new
name|ActionErrors
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|iAutoSetup
operator|&&
operator|!
name|CalendarUtils
operator|.
name|isValidDate
argument_list|(
name|iDate
argument_list|,
literal|"MM/dd/yyyy"
argument_list|)
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"date"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.invalidDate"
argument_list|,
literal|"Examination Date"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iStart
operator|==
literal|null
operator|||
name|iStart
operator|<=
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|iAutoSetup
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"start"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.required"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|hour
init|=
name|iStart
operator|/
literal|100
decl_stmt|;
name|int
name|min
init|=
name|iStart
operator|%
literal|100
decl_stmt|;
if|if
condition|(
name|hour
operator|>=
literal|24
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"start"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Invalid start time -- hour ("
operator|+
name|hour
operator|+
literal|") must be between 0 and 23."
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|min
operator|>=
literal|60
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"start"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Invalid start time -- minute ("
operator|+
name|min
operator|+
literal|") must be between 0 and 59."
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|min
operator|%
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|)
operator|!=
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"start"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Invalid start time -- minute ("
operator|+
name|min
operator|+
literal|") must be divisible by "
operator|+
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iLength
operator|==
literal|null
operator|||
name|iLength
operator|<=
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"length"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.required"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
operator|(
name|iLength
operator|%
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|)
operator|!=
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"length"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Invalid length -- period length must be divisible by "
operator|+
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iAutoSetup
condition|)
block|{
if|if
condition|(
name|iStart2
operator|!=
literal|null
operator|&&
name|iStart2
operator|>
literal|0
condition|)
block|{
name|int
name|hour
init|=
name|iStart2
operator|/
literal|100
decl_stmt|;
name|int
name|min
init|=
name|iStart2
operator|%
literal|100
decl_stmt|;
if|if
condition|(
name|hour
operator|>=
literal|24
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"start2"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Invalid start time -- hour ("
operator|+
name|hour
operator|+
literal|") must be between 0 and 23."
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|min
operator|>=
literal|60
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"start2"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Invalid start time -- minute ("
operator|+
name|min
operator|+
literal|") must be between 0 and 59."
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|min
operator|%
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|)
operator|!=
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"start2"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Invalid start time -- minute ("
operator|+
name|min
operator|+
literal|") must be divisible by "
operator|+
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iLength2
operator|==
literal|null
operator|||
name|iLength2
operator|<=
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"length2"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.required"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
operator|(
name|iLength2
operator|%
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|)
operator|!=
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"length2"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Invalid length -- period length must be divisible by "
operator|+
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iStart3
operator|!=
literal|null
operator|&&
name|iStart3
operator|>
literal|0
condition|)
block|{
name|int
name|hour
init|=
name|iStart3
operator|/
literal|100
decl_stmt|;
name|int
name|min
init|=
name|iStart3
operator|%
literal|100
decl_stmt|;
if|if
condition|(
name|hour
operator|>=
literal|24
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"start3"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Invalid start time -- hour ("
operator|+
name|hour
operator|+
literal|") must be between 0 and 23."
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|min
operator|>=
literal|60
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"start3"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Invalid start time -- minute ("
operator|+
name|min
operator|+
literal|") must be between 0 and 59."
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|min
operator|%
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|)
operator|!=
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"start3"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Invalid start time -- minute ("
operator|+
name|min
operator|+
literal|") must be divisible by "
operator|+
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iLength3
operator|==
literal|null
operator|||
name|iLength3
operator|<=
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"length3"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.required"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
operator|(
name|iLength3
operator|%
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|)
operator|!=
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"length3"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Invalid length -- period length must be divisible by "
operator|+
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iStart4
operator|!=
literal|null
operator|&&
name|iStart4
operator|>
literal|0
condition|)
block|{
name|int
name|hour
init|=
name|iStart4
operator|/
literal|100
decl_stmt|;
name|int
name|min
init|=
name|iStart4
operator|%
literal|100
decl_stmt|;
if|if
condition|(
name|hour
operator|>=
literal|24
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"start4"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Invalid start time -- hour ("
operator|+
name|hour
operator|+
literal|") must be between 0 and 23."
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|min
operator|>=
literal|60
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"start4"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Invalid start time -- minute ("
operator|+
name|min
operator|+
literal|") must be between 0 and 59."
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|min
operator|%
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|)
operator|!=
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"start4"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Invalid start time -- minute ("
operator|+
name|min
operator|+
literal|") must be divisible by "
operator|+
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iLength4
operator|==
literal|null
operator|||
name|iLength4
operator|<=
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"length4"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.required"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
operator|(
name|iLength4
operator|%
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|)
operator|!=
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"length4"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Invalid length -- period length must be divisible by "
operator|+
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iStart5
operator|!=
literal|null
operator|&&
name|iStart5
operator|>
literal|0
condition|)
block|{
name|int
name|hour
init|=
name|iStart5
operator|/
literal|100
decl_stmt|;
name|int
name|min
init|=
name|iStart5
operator|%
literal|100
decl_stmt|;
if|if
condition|(
name|hour
operator|>=
literal|24
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"start5"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Invalid start time -- hour ("
operator|+
name|hour
operator|+
literal|") must be between 0 and 23."
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|min
operator|>=
literal|60
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"start5"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Invalid start time -- minute ("
operator|+
name|min
operator|+
literal|") must be between 0 and 59."
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|min
operator|%
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|)
operator|!=
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"start5"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Invalid start time -- minute ("
operator|+
name|min
operator|+
literal|") must be divisible by "
operator|+
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iLength5
operator|==
literal|null
operator|||
name|iLength5
operator|<=
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"length5"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.required"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
operator|(
name|iLength5
operator|%
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|)
operator|!=
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"length5"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Invalid length -- period length must be divisible by "
operator|+
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
if|if
condition|(
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Date
name|startDate
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd/yyyy"
argument_list|)
operator|.
name|parse
argument_list|(
name|iDate
argument_list|)
decl_stmt|;
name|long
name|diff
init|=
name|startDate
operator|.
name|getTime
argument_list|()
operator|-
name|session
operator|.
name|getExamBeginDate
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|int
name|dateOffset
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|diff
operator|/
operator|(
literal|1000.0
operator|*
literal|60
operator|*
literal|60
operator|*
literal|24
operator|)
argument_list|)
decl_stmt|;
name|int
name|hour
init|=
name|iStart
operator|/
literal|100
decl_stmt|;
name|int
name|min
init|=
name|iStart
operator|%
literal|100
decl_stmt|;
name|int
name|slot
init|=
operator|(
name|hour
operator|*
literal|60
operator|+
name|min
operator|-
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
name|ExamPeriod
name|period
init|=
name|ExamPeriod
operator|.
name|findByDateStart
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|dateOffset
argument_list|,
name|slot
argument_list|)
decl_stmt|;
if|if
condition|(
name|period
operator|!=
literal|null
operator|&&
operator|!
name|period
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"date"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.exists"
argument_list|,
literal|"An examination period with given date and start time"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
return|return
name|errors
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|iOp
operator|=
literal|null
expr_stmt|;
name|iUniqueId
operator|=
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|iDate
operator|=
literal|null
expr_stmt|;
name|iStart
operator|=
literal|null
expr_stmt|;
name|iLength
operator|=
literal|null
expr_stmt|;
name|iStart2
operator|=
literal|null
expr_stmt|;
name|iLength2
operator|=
literal|null
expr_stmt|;
name|iStart3
operator|=
literal|null
expr_stmt|;
name|iLength3
operator|=
literal|null
expr_stmt|;
name|iStart4
operator|=
literal|null
expr_stmt|;
name|iLength4
operator|=
literal|null
expr_stmt|;
name|iStart5
operator|=
literal|null
expr_stmt|;
name|iLength5
operator|=
literal|null
expr_stmt|;
name|iPrefLevel
operator|=
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iType
operator|=
name|Exam
operator|.
name|sExamTypes
index|[
name|Exam
operator|.
name|sExamTypeFinal
index|]
expr_stmt|;
name|iAutoSetup
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|iSession
operator|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
specifier|public
name|void
name|load
parameter_list|(
name|ExamPeriod
name|ep
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|ep
operator|==
literal|null
condition|)
block|{
name|reset
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|iDate
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd/yyyy"
argument_list|)
operator|.
name|format
argument_list|(
name|session
operator|.
name|getExamBeginDate
argument_list|()
argument_list|)
expr_stmt|;
name|iLength
operator|=
literal|120
expr_stmt|;
name|TreeSet
name|periods
init|=
name|ExamPeriod
operator|.
name|findAll
argument_list|(
name|request
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|int
name|maxType
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|periods
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TreeSet
name|times
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|periods
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|p
init|=
operator|(
name|ExamPeriod
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|times
operator|.
name|add
argument_list|(
name|p
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|maxType
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxType
argument_list|,
name|p
operator|.
name|getExamType
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|times
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Integer
name|start
init|=
operator|(
name|Integer
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ExamPeriod
operator|)
name|periods
operator|.
name|last
argument_list|()
operator|)
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|&&
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|time
init|=
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
operator|(
name|Integer
operator|)
name|i
operator|.
name|next
argument_list|()
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
decl_stmt|;
name|iStart
operator|=
literal|100
operator|*
operator|(
name|time
operator|/
literal|60
operator|)
operator|+
operator|(
name|time
operator|%
literal|60
operator|)
expr_stmt|;
break|break;
block|}
block|}
name|iLength
operator|=
operator|(
operator|(
name|ExamPeriod
operator|)
name|periods
operator|.
name|last
argument_list|()
operator|)
operator|.
name|getLength
argument_list|()
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
expr_stmt|;
name|iDate
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd/yyyy"
argument_list|)
operator|.
name|format
argument_list|(
operator|(
operator|(
name|ExamPeriod
operator|)
name|periods
operator|.
name|last
argument_list|()
operator|)
operator|.
name|getStartDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iPrefLevel
operator|=
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iType
operator|=
name|Exam
operator|.
name|sExamTypes
index|[
name|maxType
index|]
expr_stmt|;
name|iOp
operator|=
literal|"Save"
expr_stmt|;
block|}
else|else
block|{
name|iUniqueId
operator|=
name|ep
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iDate
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd/yyyy"
argument_list|)
operator|.
name|format
argument_list|(
name|ep
operator|.
name|getStartDate
argument_list|()
argument_list|)
expr_stmt|;
name|iStart
operator|=
name|ep
operator|.
name|getStartHour
argument_list|()
operator|*
literal|100
operator|+
name|ep
operator|.
name|getStartMinute
argument_list|()
expr_stmt|;
name|iLength
operator|=
name|ep
operator|.
name|getLength
argument_list|()
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
expr_stmt|;
name|iPrefLevel
operator|=
name|ep
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iType
operator|=
name|Exam
operator|.
name|sExamTypes
index|[
name|ep
operator|.
name|getExamType
argument_list|()
index|]
expr_stmt|;
name|iOp
operator|=
literal|"Update"
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|update
parameter_list|(
name|ExamPeriod
name|ep
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
throws|throws
name|Exception
block|{
name|ep
operator|.
name|setStartDate
argument_list|(
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd/yyyy"
argument_list|)
operator|.
name|parse
argument_list|(
name|iDate
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|hour
init|=
name|iStart
operator|/
literal|100
decl_stmt|;
name|int
name|min
init|=
name|iStart
operator|%
literal|100
decl_stmt|;
name|int
name|slot
init|=
operator|(
name|hour
operator|*
literal|60
operator|+
name|min
operator|-
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
name|ep
operator|.
name|setStartSlot
argument_list|(
name|slot
argument_list|)
expr_stmt|;
name|ep
operator|.
name|setLength
argument_list|(
name|iLength
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
argument_list|)
expr_stmt|;
name|ep
operator|.
name|setPrefLevel
argument_list|(
operator|new
name|PreferenceLevelDAO
argument_list|()
operator|.
name|get
argument_list|(
name|iPrefLevel
argument_list|)
argument_list|)
expr_stmt|;
name|ep
operator|.
name|setExamType
argument_list|(
name|getExamTypeIdx
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|ep
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ExamPeriod
name|create
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
throws|throws
name|Exception
block|{
name|ExamPeriod
name|ep
init|=
operator|new
name|ExamPeriod
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|ep
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|ep
operator|.
name|setStartDate
argument_list|(
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd/yyyy"
argument_list|)
operator|.
name|parse
argument_list|(
name|iDate
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|hour
init|=
name|iStart
operator|/
literal|100
decl_stmt|;
name|int
name|min
init|=
name|iStart
operator|%
literal|100
decl_stmt|;
name|int
name|slot
init|=
operator|(
name|hour
operator|*
literal|60
operator|+
name|min
operator|-
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
name|ep
operator|.
name|setStartSlot
argument_list|(
name|slot
argument_list|)
expr_stmt|;
name|ep
operator|.
name|setLength
argument_list|(
name|iLength
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
argument_list|)
expr_stmt|;
name|ep
operator|.
name|setPrefLevel
argument_list|(
operator|new
name|PreferenceLevelDAO
argument_list|()
operator|.
name|get
argument_list|(
name|iPrefLevel
argument_list|)
argument_list|)
expr_stmt|;
name|ep
operator|.
name|setExamType
argument_list|(
name|getExamTypeIdx
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|ep
argument_list|)
expr_stmt|;
name|setUniqueId
argument_list|(
name|ep
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ep
return|;
block|}
specifier|public
name|ExamPeriod
name|saveOrUpdate
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|iSession
operator|==
literal|null
condition|)
name|iSession
operator|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|getAutoSetup
argument_list|()
condition|)
block|{
name|setDays
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|TreeSet
name|periods
init|=
name|ExamPeriod
operator|.
name|findAll
argument_list|(
name|request
argument_list|,
name|Exam
operator|.
name|sExamTypeMidterm
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|slots
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|TreeSet
name|oldDays
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|periods
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|slots
operator|.
name|add
argument_list|(
name|period
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iDays
operator|.
name|contains
argument_list|(
name|period
operator|.
name|getDateOffset
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
name|j
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select x from Exam x where x.assignedPeriod.uniqueId=:periodId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"periodId"
argument_list|,
name|period
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|exam
operator|.
name|unassign
argument_list|(
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|delete
argument_list|(
name|period
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|oldDays
operator|.
name|add
argument_list|(
name|period
operator|.
name|getDateOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Hashtable
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|length
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|translate
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|newStarts
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|it
init|=
name|slots
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|iStart
operator|!=
literal|null
operator|&&
name|iStart
operator|>
literal|0
condition|)
block|{
name|int
name|slot
init|=
operator|(
operator|(
name|iStart
operator|/
literal|100
operator|)
operator|*
literal|60
operator|+
operator|(
name|iStart
operator|%
literal|100
operator|)
operator|-
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
name|length
operator|.
name|put
argument_list|(
name|slot
argument_list|,
name|iLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
name|translate
operator|.
name|put
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|slot
argument_list|)
expr_stmt|;
else|else
name|newStarts
operator|.
name|add
argument_list|(
name|slot
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|iStart2
operator|!=
literal|null
operator|&&
name|iStart2
operator|>
literal|0
condition|)
block|{
name|int
name|slot
init|=
operator|(
operator|(
name|iStart2
operator|/
literal|100
operator|)
operator|*
literal|60
operator|+
operator|(
name|iStart2
operator|%
literal|100
operator|)
operator|-
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
name|length
operator|.
name|put
argument_list|(
name|slot
argument_list|,
name|iLength2
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
name|translate
operator|.
name|put
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|slot
argument_list|)
expr_stmt|;
else|else
name|newStarts
operator|.
name|add
argument_list|(
name|slot
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|iStart3
operator|!=
literal|null
operator|&&
name|iStart3
operator|>
literal|0
condition|)
block|{
name|int
name|slot
init|=
operator|(
operator|(
name|iStart3
operator|/
literal|100
operator|)
operator|*
literal|60
operator|+
operator|(
name|iStart3
operator|%
literal|100
operator|)
operator|-
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
name|length
operator|.
name|put
argument_list|(
name|slot
argument_list|,
name|iLength3
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
name|translate
operator|.
name|put
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|slot
argument_list|)
expr_stmt|;
else|else
name|newStarts
operator|.
name|add
argument_list|(
name|slot
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|iStart4
operator|!=
literal|null
operator|&&
name|iStart4
operator|>
literal|0
condition|)
block|{
name|int
name|slot
init|=
operator|(
operator|(
name|iStart4
operator|/
literal|100
operator|)
operator|*
literal|60
operator|+
operator|(
name|iStart4
operator|%
literal|100
operator|)
operator|-
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
name|length
operator|.
name|put
argument_list|(
name|slot
argument_list|,
name|iLength4
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
name|translate
operator|.
name|put
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|slot
argument_list|)
expr_stmt|;
else|else
name|newStarts
operator|.
name|add
argument_list|(
name|slot
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|iStart5
operator|!=
literal|null
operator|&&
name|iStart5
operator|>
literal|0
condition|)
block|{
name|int
name|slot
init|=
operator|(
operator|(
name|iStart5
operator|/
literal|100
operator|)
operator|*
literal|60
operator|+
operator|(
name|iStart5
operator|%
literal|100
operator|)
operator|-
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
name|length
operator|.
name|put
argument_list|(
name|slot
argument_list|,
name|iLength5
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
name|translate
operator|.
name|put
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|slot
argument_list|)
expr_stmt|;
else|else
name|newStarts
operator|.
name|add
argument_list|(
name|slot
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|periods
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Integer
name|start
init|=
name|translate
operator|.
name|get
argument_list|(
name|period
operator|.
name|getStartSlot
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|start
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|j
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select x from Exam x where x.assignedPeriod.uniqueId=:periodId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"periodId"
argument_list|,
name|period
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|exam
operator|.
name|unassign
argument_list|(
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|delete
argument_list|(
name|period
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|period
operator|.
name|setStartSlot
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|period
operator|.
name|setLength
argument_list|(
name|length
operator|.
name|get
argument_list|(
name|start
argument_list|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|period
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|iDays
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Integer
name|day
init|=
operator|(
name|Integer
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|start
range|:
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|length
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|oldDays
operator|.
name|contains
argument_list|(
name|day
argument_list|)
operator|&&
operator|!
name|newStarts
operator|.
name|contains
argument_list|(
name|start
argument_list|)
condition|)
continue|continue;
name|ExamPeriod
name|ep
init|=
operator|new
name|ExamPeriod
argument_list|()
decl_stmt|;
name|ep
operator|.
name|setSession
argument_list|(
name|iSession
argument_list|)
expr_stmt|;
name|ep
operator|.
name|setDateOffset
argument_list|(
name|day
argument_list|)
expr_stmt|;
name|ep
operator|.
name|setStartSlot
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|ep
operator|.
name|setLength
argument_list|(
name|length
operator|.
name|get
argument_list|(
name|start
argument_list|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
argument_list|)
expr_stmt|;
name|ep
operator|.
name|setExamType
argument_list|(
name|Exam
operator|.
name|sExamTypeMidterm
argument_list|)
expr_stmt|;
name|ep
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|ep
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
else|else
block|{
name|ExamPeriod
name|ep
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
operator|>=
literal|0
condition|)
name|ep
operator|=
operator|(
operator|new
name|ExamPeriodDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ep
operator|==
literal|null
condition|)
name|ep
operator|=
name|create
argument_list|(
name|request
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
else|else
name|update
argument_list|(
name|ep
argument_list|,
name|request
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
return|return
name|ep
return|;
block|}
block|}
specifier|public
name|void
name|delete
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
operator|<
literal|0
condition|)
return|return;
name|ExamPeriod
name|ep
init|=
operator|(
operator|new
name|ExamPeriodDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select x from Exam x where x.assignedPeriod.uniqueId=:periodId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"periodId"
argument_list|,
name|ep
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|exam
operator|.
name|unassign
argument_list|(
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|delete
argument_list|(
name|ep
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getOp
parameter_list|()
block|{
return|return
name|iOp
return|;
block|}
specifier|public
name|void
name|setOp
parameter_list|(
name|String
name|op
parameter_list|)
block|{
name|iOp
operator|=
name|op
expr_stmt|;
block|}
specifier|public
name|Long
name|getUniqueId
parameter_list|()
block|{
return|return
name|iUniqueId
return|;
block|}
specifier|public
name|void
name|setUniqueId
parameter_list|(
name|Long
name|uniqueId
parameter_list|)
block|{
name|iUniqueId
operator|=
name|uniqueId
expr_stmt|;
block|}
specifier|public
name|String
name|getDate
parameter_list|()
block|{
return|return
name|iDate
return|;
block|}
specifier|public
name|void
name|setDate
parameter_list|(
name|String
name|date
parameter_list|)
block|{
name|iDate
operator|=
name|date
expr_stmt|;
block|}
specifier|public
name|Integer
name|getStart
parameter_list|()
block|{
return|return
name|iStart
return|;
block|}
specifier|public
name|void
name|setStart
parameter_list|(
name|Integer
name|start
parameter_list|)
block|{
name|iStart
operator|=
name|start
expr_stmt|;
block|}
specifier|public
name|Integer
name|getLength
parameter_list|()
block|{
return|return
name|iLength
return|;
block|}
specifier|public
name|void
name|setLength
parameter_list|(
name|Integer
name|length
parameter_list|)
block|{
name|iLength
operator|=
name|length
expr_stmt|;
block|}
specifier|public
name|Integer
name|getStart2
parameter_list|()
block|{
return|return
name|iStart2
return|;
block|}
specifier|public
name|void
name|setStart2
parameter_list|(
name|Integer
name|start2
parameter_list|)
block|{
name|iStart2
operator|=
name|start2
expr_stmt|;
block|}
specifier|public
name|Integer
name|getLength2
parameter_list|()
block|{
return|return
name|iLength2
return|;
block|}
specifier|public
name|void
name|setLength2
parameter_list|(
name|Integer
name|length2
parameter_list|)
block|{
name|iLength2
operator|=
name|length2
expr_stmt|;
block|}
specifier|public
name|Integer
name|getStart3
parameter_list|()
block|{
return|return
name|iStart3
return|;
block|}
specifier|public
name|void
name|setStart3
parameter_list|(
name|Integer
name|start3
parameter_list|)
block|{
name|iStart3
operator|=
name|start3
expr_stmt|;
block|}
specifier|public
name|Integer
name|getLength3
parameter_list|()
block|{
return|return
name|iLength3
return|;
block|}
specifier|public
name|void
name|setLength3
parameter_list|(
name|Integer
name|length3
parameter_list|)
block|{
name|iLength3
operator|=
name|length3
expr_stmt|;
block|}
specifier|public
name|Integer
name|getStart4
parameter_list|()
block|{
return|return
name|iStart4
return|;
block|}
specifier|public
name|void
name|setStart4
parameter_list|(
name|Integer
name|start4
parameter_list|)
block|{
name|iStart4
operator|=
name|start4
expr_stmt|;
block|}
specifier|public
name|Integer
name|getLength4
parameter_list|()
block|{
return|return
name|iLength4
return|;
block|}
specifier|public
name|void
name|setLength4
parameter_list|(
name|Integer
name|length4
parameter_list|)
block|{
name|iLength4
operator|=
name|length4
expr_stmt|;
block|}
specifier|public
name|Integer
name|getStart5
parameter_list|()
block|{
return|return
name|iStart5
return|;
block|}
specifier|public
name|void
name|setStart5
parameter_list|(
name|Integer
name|start5
parameter_list|)
block|{
name|iStart5
operator|=
name|start5
expr_stmt|;
block|}
specifier|public
name|Integer
name|getLength5
parameter_list|()
block|{
return|return
name|iLength5
return|;
block|}
specifier|public
name|void
name|setLength5
parameter_list|(
name|Integer
name|length5
parameter_list|)
block|{
name|iLength5
operator|=
name|length5
expr_stmt|;
block|}
specifier|public
name|Long
name|getPrefLevel
parameter_list|()
block|{
return|return
name|iPrefLevel
return|;
block|}
specifier|public
name|void
name|setPrefLevel
parameter_list|(
name|Long
name|prefLevel
parameter_list|)
block|{
name|iPrefLevel
operator|=
name|prefLevel
expr_stmt|;
block|}
specifier|public
name|Vector
name|getPrefLevels
parameter_list|()
block|{
name|Vector
name|ret
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|PreferenceLevel
operator|.
name|getPreferenceLevelList
argument_list|(
literal|false
argument_list|)
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|PreferenceLevel
name|level
init|=
operator|(
name|PreferenceLevel
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|level
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
continue|continue;
name|ret
operator|.
name|addElement
argument_list|(
name|level
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|String
name|getExamType
parameter_list|()
block|{
return|return
name|iType
return|;
block|}
specifier|public
name|void
name|setExamType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|iType
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|String
index|[]
name|getExamTypes
parameter_list|()
block|{
return|return
name|Exam
operator|.
name|sExamTypes
return|;
block|}
specifier|public
name|int
name|getExamTypeIdx
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Exam
operator|.
name|sExamTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|Exam
operator|.
name|sExamTypes
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|getExamType
argument_list|()
argument_list|)
condition|)
return|return
name|i
return|;
block|}
return|return
name|Exam
operator|.
name|sExamTypeFinal
return|;
block|}
specifier|public
name|boolean
name|getAutoSetup
parameter_list|()
block|{
return|return
name|iAutoSetup
return|;
block|}
specifier|public
name|void
name|setAutoSetup
parameter_list|(
name|boolean
name|autoSetup
parameter_list|)
block|{
name|iAutoSetup
operator|=
name|autoSetup
expr_stmt|;
block|}
specifier|public
name|String
name|getBorder
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|month
parameter_list|)
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|iSession
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|day
operator|==
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
operator|&&
name|month
operator|==
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
condition|)
return|return
literal|"'blue 2px solid'"
return|;
name|cal
operator|.
name|setTime
argument_list|(
name|iSession
operator|.
name|getSessionEndDateTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|day
operator|==
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
operator|&&
name|month
operator|==
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
condition|)
return|return
literal|"'blue 2px solid'"
return|;
name|cal
operator|.
name|setTime
argument_list|(
name|iSession
operator|.
name|getExamBeginDate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|day
operator|==
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
operator|&&
name|month
operator|==
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
condition|)
return|return
literal|"'green 2px solid'"
return|;
name|int
name|holiday
init|=
name|iSession
operator|.
name|getHoliday
argument_list|(
name|day
argument_list|,
name|month
argument_list|)
decl_stmt|;
if|if
condition|(
name|holiday
operator|!=
name|Session
operator|.
name|sHolidayTypeNone
condition|)
return|return
literal|"'"
operator|+
name|Session
operator|.
name|sHolidayTypeColors
index|[
name|holiday
index|]
operator|+
literal|" 2px solid'"
return|;
return|return
literal|"null"
return|;
block|}
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|iDays
init|=
literal|null
decl_stmt|;
specifier|public
name|boolean
name|getCanAutoSetup
parameter_list|()
block|{
name|iDays
operator|=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|times
init|=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|lengths
init|=
operator|new
name|Hashtable
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|TreeSet
name|periods
init|=
name|ExamPeriod
operator|.
name|findAll
argument_list|(
name|iSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|Exam
operator|.
name|sExamTypeMidterm
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|periods
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|iDays
operator|.
name|add
argument_list|(
name|period
operator|.
name|getDateOffset
argument_list|()
argument_list|)
expr_stmt|;
name|times
operator|.
name|add
argument_list|(
name|period
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|Integer
name|length
init|=
name|lengths
operator|.
name|get
argument_list|(
name|period
operator|.
name|getStartSlot
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
operator|==
literal|null
condition|)
name|lengths
operator|.
name|put
argument_list|(
name|period
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|period
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
operator|!
name|length
operator|.
name|equals
argument_list|(
name|period
operator|.
name|getLength
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|periods
operator|.
name|size
argument_list|()
operator|!=
name|iDays
operator|.
name|size
argument_list|()
operator|*
name|times
operator|.
name|size
argument_list|()
operator|||
name|times
operator|.
name|size
argument_list|()
operator|>
literal|5
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|times
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iStart
operator|=
literal|1830
expr_stmt|;
name|iLength
operator|=
literal|60
expr_stmt|;
name|iStart2
operator|=
literal|2000
expr_stmt|;
name|iLength2
operator|=
literal|120
expr_stmt|;
name|iStart3
operator|=
literal|null
expr_stmt|;
name|iLength3
operator|=
literal|null
expr_stmt|;
name|iStart4
operator|=
literal|null
expr_stmt|;
name|iLength4
operator|=
literal|null
expr_stmt|;
name|iStart5
operator|=
literal|null
expr_stmt|;
name|iLength5
operator|=
literal|null
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|it
init|=
name|times
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|slot
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|min
init|=
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|times
operator|.
name|first
argument_list|()
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
decl_stmt|;
name|iStart
operator|=
literal|100
operator|*
operator|(
name|min
operator|/
literal|60
operator|)
operator|+
operator|(
name|min
operator|%
literal|60
operator|)
expr_stmt|;
name|iLength
operator|=
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|lengths
operator|.
name|get
argument_list|(
name|slot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iStart
operator|=
literal|null
expr_stmt|;
name|iLength
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|slot
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|min
init|=
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|slot
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
decl_stmt|;
name|iStart2
operator|=
literal|100
operator|*
operator|(
name|min
operator|/
literal|60
operator|)
operator|+
operator|(
name|min
operator|%
literal|60
operator|)
expr_stmt|;
name|iLength2
operator|=
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|lengths
operator|.
name|get
argument_list|(
name|slot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iStart2
operator|=
literal|null
expr_stmt|;
name|iLength2
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|slot
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|min
init|=
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|slot
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
decl_stmt|;
name|iStart3
operator|=
literal|100
operator|*
operator|(
name|min
operator|/
literal|60
operator|)
operator|+
operator|(
name|min
operator|%
literal|60
operator|)
expr_stmt|;
name|iLength3
operator|=
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|lengths
operator|.
name|get
argument_list|(
name|slot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iStart3
operator|=
literal|null
expr_stmt|;
name|iLength3
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|slot
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|min
init|=
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|slot
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
decl_stmt|;
name|iStart4
operator|=
literal|100
operator|*
operator|(
name|min
operator|/
literal|60
operator|)
operator|+
operator|(
name|min
operator|%
literal|60
operator|)
expr_stmt|;
name|iLength4
operator|=
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|lengths
operator|.
name|get
argument_list|(
name|slot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iStart4
operator|=
literal|null
expr_stmt|;
name|iLength4
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|slot
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|min
init|=
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|slot
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
decl_stmt|;
name|iStart5
operator|=
literal|100
operator|*
operator|(
name|min
operator|/
literal|60
operator|)
operator|+
operator|(
name|min
operator|%
literal|60
operator|)
expr_stmt|;
name|iLength5
operator|=
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|lengths
operator|.
name|get
argument_list|(
name|slot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iStart5
operator|=
literal|null
expr_stmt|;
name|iLength5
operator|=
literal|null
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|getExamOffset
parameter_list|()
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|iSession
operator|.
name|getExamBeginDate
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|DateUtils
operator|.
name|getDayOfYear
argument_list|(
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
argument_list|,
name|DateUtils
operator|.
name|getStartMonth
argument_list|(
name|iSession
operator|.
name|getExamBeginDate
argument_list|()
argument_list|,
name|iSession
operator|.
name|getSessionStartYear
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|,
name|iSession
operator|.
name|getSessionStartYear
argument_list|()
argument_list|)
operator|+
literal|1
operator|)
return|;
block|}
specifier|public
name|boolean
name|hasExam
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|month
parameter_list|)
block|{
comment|//TODO: checked OK
return|return
name|iDays
operator|.
name|contains
argument_list|(
literal|1
operator|+
name|iSession
operator|.
name|getDayOfYear
argument_list|(
name|day
argument_list|,
name|month
argument_list|)
operator|-
name|getExamOffset
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getPatternHtml
parameter_list|()
block|{
try|try
block|{
name|int
name|startMonth
init|=
name|iSession
operator|.
name|getStartMonth
argument_list|()
decl_stmt|;
name|int
name|endMonth
init|=
name|iSession
operator|.
name|getEndMonth
argument_list|()
decl_stmt|;
name|StringBuffer
name|border
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
name|StringBuffer
name|pattern
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
name|startMonth
init|;
name|m
operator|<=
name|endMonth
condition|;
name|m
operator|++
control|)
block|{
if|if
condition|(
name|m
operator|!=
name|startMonth
condition|)
block|{
name|border
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|border
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
comment|//TODO: checked OK
name|int
name|daysOfMonth
init|=
name|DateUtils
operator|.
name|getNrDaysOfMonth
argument_list|(
name|m
argument_list|,
name|iSession
operator|.
name|getSessionStartYear
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<=
name|daysOfMonth
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
name|d
operator|>
literal|1
condition|)
block|{
name|border
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|border
operator|.
name|append
argument_list|(
name|getBorder
argument_list|(
name|d
argument_list|,
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|append
argument_list|(
name|hasExam
argument_list|(
name|d
argument_list|,
name|m
argument_list|)
condition|?
literal|"'1'"
else|:
literal|"'0'"
argument_list|)
expr_stmt|;
block|}
name|border
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|border
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<script language='JavaScript' type='text/javascript' src='scripts/datepatt.js'></script>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<script language='JavaScript'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"calGenerate("
operator|+
name|iSession
operator|.
name|getSessionStartYear
argument_list|()
operator|+
literal|","
operator|+
name|iSession
operator|.
name|getStartMonth
argument_list|()
operator|+
literal|","
operator|+
name|iSession
operator|.
name|getEndMonth
argument_list|()
operator|+
literal|","
operator|+
name|pattern
operator|+
literal|","
operator|+
literal|"['1','0'],"
operator|+
literal|"['Midterm exams offered','Midterm exams not offered'],"
operator|+
literal|"['rgb(240,240,50)','rgb(240,240,240)'],"
operator|+
literal|"'1',"
operator|+
name|border
operator|+
literal|","
operator|+
literal|true
operator|+
literal|","
operator|+
literal|true
operator|+
literal|");"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</script>"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|void
name|setDays
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|int
name|startMonth
init|=
name|iSession
operator|.
name|getStartMonth
argument_list|()
decl_stmt|;
name|int
name|endMonth
init|=
name|iSession
operator|.
name|getEndMonth
argument_list|()
decl_stmt|;
name|int
name|firstOne
init|=
literal|0
decl_stmt|,
name|lastOne
init|=
literal|0
decl_stmt|;
name|iDays
operator|=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|m
init|=
name|startMonth
init|;
name|m
operator|<=
name|endMonth
condition|;
name|m
operator|++
control|)
block|{
comment|//TODO: checked OK, tested OK
name|int
name|yr
init|=
name|DateUtils
operator|.
name|calculateActualYear
argument_list|(
name|m
argument_list|,
name|iSession
operator|.
name|getSessionStartYear
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|daysOfMonth
init|=
name|DateUtils
operator|.
name|getNrDaysOfMonth
argument_list|(
name|m
argument_list|,
name|iSession
operator|.
name|getSessionStartYear
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<=
name|daysOfMonth
condition|;
name|d
operator|++
control|)
block|{
name|String
name|exam
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"cal_val_"
operator|+
name|yr
operator|+
literal|"_"
operator|+
operator|(
operator|(
literal|12
operator|+
name|m
operator|)
operator|%
literal|12
operator|)
operator|+
literal|"_"
operator|+
name|d
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"1"
operator|.
name|equals
argument_list|(
name|exam
argument_list|)
condition|)
block|{
comment|//TODO: checked OK, tested OK
name|iDays
operator|.
name|add
argument_list|(
literal|1
operator|+
name|iSession
operator|.
name|getDayOfYear
argument_list|(
name|d
argument_list|,
name|m
argument_list|)
operator|-
name|getExamOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

