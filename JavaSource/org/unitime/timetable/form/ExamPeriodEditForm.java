begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionErrors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamPeriodDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|PreferenceLevelDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|CalendarUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**   * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ExamPeriodEditForm
extends|extends
name|ActionForm
block|{
specifier|private
name|Long
name|iUniqueId
decl_stmt|;
specifier|private
name|String
name|iOp
decl_stmt|;
specifier|private
name|String
name|iDate
decl_stmt|;
specifier|private
name|Integer
name|iStart
decl_stmt|;
specifier|private
name|Integer
name|iLength
decl_stmt|;
specifier|private
name|Long
name|iPrefLevel
decl_stmt|;
specifier|public
name|ActionErrors
name|validate
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|ActionErrors
name|errors
init|=
operator|new
name|ActionErrors
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|CalendarUtils
operator|.
name|isValidDate
argument_list|(
name|iDate
argument_list|,
literal|"MM/dd/yyyy"
argument_list|)
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"date"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.invalidDate"
argument_list|,
literal|"Examination Date"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iStart
operator|==
literal|null
operator|||
name|iStart
operator|<=
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"start"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.required"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
else|else
block|{
name|int
name|hour
init|=
name|iStart
operator|/
literal|100
decl_stmt|;
name|int
name|min
init|=
name|iStart
operator|%
literal|100
decl_stmt|;
if|if
condition|(
name|hour
operator|>=
literal|24
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"start"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Invalid start time -- hour ("
operator|+
name|hour
operator|+
literal|") must be between 0 and 23."
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|min
operator|>=
literal|60
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"start"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Invalid start time -- minute ("
operator|+
name|min
operator|+
literal|") must be between 0 and 59."
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|min
operator|%
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|)
operator|!=
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"start"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Invalid start time -- minute ("
operator|+
name|min
operator|+
literal|") must be divisible by "
operator|+
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iLength
operator|==
literal|null
operator|||
name|iLength
operator|<=
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"length"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.required"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
operator|(
name|iLength
operator|%
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|)
operator|!=
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"length"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Invalid length -- period length must be divisible by "
operator|+
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Date
name|startDate
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd/yyyy"
argument_list|)
operator|.
name|parse
argument_list|(
name|iDate
argument_list|)
decl_stmt|;
name|long
name|diff
init|=
name|startDate
operator|.
name|getTime
argument_list|()
operator|-
name|session
operator|.
name|getExamBeginDate
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|int
name|dateOffset
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|diff
operator|/
operator|(
literal|1000.0
operator|*
literal|60
operator|*
literal|60
operator|*
literal|24
operator|)
argument_list|)
decl_stmt|;
name|int
name|hour
init|=
name|iStart
operator|/
literal|100
decl_stmt|;
name|int
name|min
init|=
name|iStart
operator|%
literal|100
decl_stmt|;
name|int
name|slot
init|=
operator|(
name|hour
operator|*
literal|60
operator|+
name|min
operator|-
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
name|ExamPeriod
name|period
init|=
name|ExamPeriod
operator|.
name|findByDateStart
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|dateOffset
argument_list|,
name|slot
argument_list|)
decl_stmt|;
if|if
condition|(
name|period
operator|!=
literal|null
operator|&&
operator|!
name|period
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"date"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.exists"
argument_list|,
literal|"An examination period with given date and start time"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
return|return
name|errors
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|iOp
operator|=
literal|null
expr_stmt|;
name|iUniqueId
operator|=
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|iDate
operator|=
literal|null
expr_stmt|;
name|iStart
operator|=
literal|null
expr_stmt|;
name|iLength
operator|=
literal|null
expr_stmt|;
name|iPrefLevel
operator|=
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|load
parameter_list|(
name|ExamPeriod
name|ep
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|ep
operator|==
literal|null
condition|)
block|{
name|reset
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|iDate
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd/yyyy"
argument_list|)
operator|.
name|format
argument_list|(
name|session
operator|.
name|getExamBeginDate
argument_list|()
argument_list|)
expr_stmt|;
name|iLength
operator|=
literal|120
expr_stmt|;
name|TreeSet
name|periods
init|=
name|ExamPeriod
operator|.
name|findAll
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|periods
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TreeSet
name|times
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|periods
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|p
init|=
operator|(
name|ExamPeriod
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|times
operator|.
name|add
argument_list|(
name|p
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|times
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Integer
name|start
init|=
operator|(
name|Integer
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ExamPeriod
operator|)
name|periods
operator|.
name|last
argument_list|()
operator|)
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|&&
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|time
init|=
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
operator|(
name|Integer
operator|)
name|i
operator|.
name|next
argument_list|()
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
decl_stmt|;
name|iStart
operator|=
literal|100
operator|*
operator|(
name|time
operator|/
literal|60
operator|)
operator|+
operator|(
name|time
operator|%
literal|60
operator|)
expr_stmt|;
break|break;
block|}
block|}
name|iLength
operator|=
operator|(
operator|(
name|ExamPeriod
operator|)
name|periods
operator|.
name|last
argument_list|()
operator|)
operator|.
name|getLength
argument_list|()
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
expr_stmt|;
name|iDate
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd/yyyy"
argument_list|)
operator|.
name|format
argument_list|(
operator|(
operator|(
name|ExamPeriod
operator|)
name|periods
operator|.
name|last
argument_list|()
operator|)
operator|.
name|getStartDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iPrefLevel
operator|=
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iOp
operator|=
literal|"Save"
expr_stmt|;
block|}
else|else
block|{
name|iUniqueId
operator|=
name|ep
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iDate
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd/yyyy"
argument_list|)
operator|.
name|format
argument_list|(
name|ep
operator|.
name|getStartDate
argument_list|()
argument_list|)
expr_stmt|;
name|iStart
operator|=
name|ep
operator|.
name|getStartHour
argument_list|()
operator|*
literal|100
operator|+
name|ep
operator|.
name|getStartMinute
argument_list|()
expr_stmt|;
name|iLength
operator|=
name|ep
operator|.
name|getLength
argument_list|()
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
expr_stmt|;
name|iPrefLevel
operator|=
name|ep
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iOp
operator|=
literal|"Update"
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|update
parameter_list|(
name|ExamPeriod
name|ep
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
throws|throws
name|Exception
block|{
name|ep
operator|.
name|setStartDate
argument_list|(
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd/yyyy"
argument_list|)
operator|.
name|parse
argument_list|(
name|iDate
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|hour
init|=
name|iStart
operator|/
literal|100
decl_stmt|;
name|int
name|min
init|=
name|iStart
operator|%
literal|100
decl_stmt|;
name|int
name|slot
init|=
operator|(
name|hour
operator|*
literal|60
operator|+
name|min
operator|-
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
name|ep
operator|.
name|setStartSlot
argument_list|(
name|slot
argument_list|)
expr_stmt|;
name|ep
operator|.
name|setLength
argument_list|(
name|iLength
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
argument_list|)
expr_stmt|;
name|ep
operator|.
name|setPrefLevel
argument_list|(
operator|new
name|PreferenceLevelDAO
argument_list|()
operator|.
name|get
argument_list|(
name|iPrefLevel
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|ep
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ExamPeriod
name|create
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
throws|throws
name|Exception
block|{
name|ExamPeriod
name|ep
init|=
operator|new
name|ExamPeriod
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|ep
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|ep
operator|.
name|setStartDate
argument_list|(
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd/yyyy"
argument_list|)
operator|.
name|parse
argument_list|(
name|iDate
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|hour
init|=
name|iStart
operator|/
literal|100
decl_stmt|;
name|int
name|min
init|=
name|iStart
operator|%
literal|100
decl_stmt|;
name|int
name|slot
init|=
operator|(
name|hour
operator|*
literal|60
operator|+
name|min
operator|-
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
name|ep
operator|.
name|setStartSlot
argument_list|(
name|slot
argument_list|)
expr_stmt|;
name|ep
operator|.
name|setLength
argument_list|(
name|iLength
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
argument_list|)
expr_stmt|;
name|ep
operator|.
name|setPrefLevel
argument_list|(
operator|new
name|PreferenceLevelDAO
argument_list|()
operator|.
name|get
argument_list|(
name|iPrefLevel
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|ep
argument_list|)
expr_stmt|;
name|setUniqueId
argument_list|(
name|ep
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ep
return|;
block|}
specifier|public
name|ExamPeriod
name|saveOrUpdate
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
throws|throws
name|Exception
block|{
name|ExamPeriod
name|ep
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
operator|>=
literal|0
condition|)
name|ep
operator|=
operator|(
operator|new
name|ExamPeriodDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ep
operator|==
literal|null
condition|)
name|ep
operator|=
name|create
argument_list|(
name|request
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
else|else
name|update
argument_list|(
name|ep
argument_list|,
name|request
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
return|return
name|ep
return|;
block|}
specifier|public
name|void
name|delete
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
operator|<
literal|0
condition|)
return|return;
name|ExamPeriod
name|ep
init|=
operator|(
operator|new
name|ExamPeriodDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|ep
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getOp
parameter_list|()
block|{
return|return
name|iOp
return|;
block|}
specifier|public
name|void
name|setOp
parameter_list|(
name|String
name|op
parameter_list|)
block|{
name|iOp
operator|=
name|op
expr_stmt|;
block|}
specifier|public
name|Long
name|getUniqueId
parameter_list|()
block|{
return|return
name|iUniqueId
return|;
block|}
specifier|public
name|void
name|setUniqueId
parameter_list|(
name|Long
name|uniqueId
parameter_list|)
block|{
name|iUniqueId
operator|=
name|uniqueId
expr_stmt|;
block|}
specifier|public
name|String
name|getDate
parameter_list|()
block|{
return|return
name|iDate
return|;
block|}
specifier|public
name|void
name|setDate
parameter_list|(
name|String
name|date
parameter_list|)
block|{
name|iDate
operator|=
name|date
expr_stmt|;
block|}
specifier|public
name|Integer
name|getStart
parameter_list|()
block|{
return|return
name|iStart
return|;
block|}
specifier|public
name|void
name|setStart
parameter_list|(
name|Integer
name|start
parameter_list|)
block|{
name|iStart
operator|=
name|start
expr_stmt|;
block|}
specifier|public
name|Integer
name|getLength
parameter_list|()
block|{
return|return
name|iLength
return|;
block|}
specifier|public
name|void
name|setLength
parameter_list|(
name|Integer
name|length
parameter_list|)
block|{
name|iLength
operator|=
name|length
expr_stmt|;
block|}
specifier|public
name|Long
name|getPrefLevel
parameter_list|()
block|{
return|return
name|iPrefLevel
return|;
block|}
specifier|public
name|void
name|setPrefLevel
parameter_list|(
name|Long
name|prefLevel
parameter_list|)
block|{
name|iPrefLevel
operator|=
name|prefLevel
expr_stmt|;
block|}
specifier|public
name|Vector
name|getPrefLevels
parameter_list|()
block|{
name|Vector
name|ret
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|PreferenceLevel
operator|.
name|getPreferenceLevelList
argument_list|(
literal|false
argument_list|)
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|PreferenceLevel
name|level
init|=
operator|(
name|PreferenceLevel
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|level
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
continue|continue;
name|ret
operator|.
name|addElement
argument_list|(
name|level
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

