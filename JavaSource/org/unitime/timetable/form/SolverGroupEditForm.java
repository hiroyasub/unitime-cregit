begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionErrors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolverGroupDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TimetableManagerDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|context
operator|.
name|HttpSessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DynamicList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DynamicListObjectFactory
import|;
end_import

begin_comment
comment|/**   * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SolverGroupEditForm
extends|extends
name|ActionForm
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|150007237399797836L
decl_stmt|;
specifier|private
name|String
name|iOp
decl_stmt|;
specifier|private
name|Long
name|iUniqueId
decl_stmt|;
specifier|private
name|String
name|iName
decl_stmt|;
specifier|private
name|String
name|iAbbv
decl_stmt|;
specifier|private
name|boolean
name|iDepartmentsEditable
decl_stmt|;
specifier|private
name|List
name|iDepartmentIds
decl_stmt|;
specifier|private
name|List
name|iDepartmentNames
decl_stmt|;
specifier|private
name|List
name|iAssignedDepartments
decl_stmt|;
specifier|private
name|List
name|iManagerIds
decl_stmt|;
specifier|private
name|List
name|iManagerNames
decl_stmt|;
specifier|private
name|List
name|iAssignedManagers
decl_stmt|;
specifier|public
name|ActionErrors
name|validate
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|ActionErrors
name|errors
init|=
operator|new
name|ActionErrors
argument_list|()
decl_stmt|;
try|try
block|{
name|Long
name|sessionId
init|=
name|HttpSessionContext
operator|.
name|getSessionContext
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|getServletContext
argument_list|()
argument_list|)
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|iName
operator|==
literal|null
operator|||
name|iName
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"name"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.required"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
else|else
block|{
try|try
block|{
name|SolverGroup
name|g
init|=
name|SolverGroup
operator|.
name|findBySessionIdName
argument_list|(
name|sessionId
argument_list|,
name|iName
argument_list|)
decl_stmt|;
if|if
condition|(
name|g
operator|!=
literal|null
operator|&&
operator|!
name|g
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|iUniqueId
argument_list|)
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"name"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.exists"
argument_list|,
name|iName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"name"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iAbbv
operator|==
literal|null
operator|||
name|iAbbv
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"abbv"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.required"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
else|else
block|{
try|try
block|{
name|SolverGroup
name|g
init|=
name|SolverGroup
operator|.
name|findBySessionIdAbbv
argument_list|(
name|sessionId
argument_list|,
name|iAbbv
argument_list|)
decl_stmt|;
if|if
condition|(
name|g
operator|!=
literal|null
operator|&&
operator|!
name|g
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|iUniqueId
argument_list|)
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"abbv"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.exists"
argument_list|,
name|iAbbv
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"abbv"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"name"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|errors
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|iOp
operator|=
literal|null
expr_stmt|;
name|iUniqueId
operator|=
literal|null
expr_stmt|;
name|iName
operator|=
literal|null
expr_stmt|;
name|iAbbv
operator|=
literal|null
expr_stmt|;
name|iAssignedDepartments
operator|=
name|DynamicList
operator|.
name|getInstance
argument_list|(
operator|new
name|Vector
argument_list|()
argument_list|,
name|iDynamicListFactory
argument_list|)
expr_stmt|;
name|iAssignedManagers
operator|=
name|DynamicList
operator|.
name|getInstance
argument_list|(
operator|new
name|Vector
argument_list|()
argument_list|,
name|iDynamicListFactory
argument_list|)
expr_stmt|;
name|iManagerIds
operator|=
name|DynamicList
operator|.
name|getInstance
argument_list|(
operator|new
name|Vector
argument_list|()
argument_list|,
name|iDynamicListFactory
argument_list|)
expr_stmt|;
name|iManagerNames
operator|=
name|DynamicList
operator|.
name|getInstance
argument_list|(
operator|new
name|Vector
argument_list|()
argument_list|,
name|iDynamicListFactory
argument_list|)
expr_stmt|;
name|iDepartmentIds
operator|=
name|DynamicList
operator|.
name|getInstance
argument_list|(
operator|new
name|Vector
argument_list|()
argument_list|,
name|iDynamicListFactory
argument_list|)
expr_stmt|;
name|iDepartmentNames
operator|=
name|DynamicList
operator|.
name|getInstance
argument_list|(
operator|new
name|Vector
argument_list|()
argument_list|,
name|iDynamicListFactory
argument_list|)
expr_stmt|;
name|iDepartmentsEditable
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|void
name|load
parameter_list|(
name|SolverGroup
name|group
parameter_list|,
name|Session
name|session
parameter_list|)
throws|throws
name|Exception
block|{
name|Collection
name|departments
init|=
name|Department
operator|.
name|findAllBeingUsed
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|Collection
name|managers
init|=
operator|new
name|TreeSet
argument_list|(
operator|(
operator|new
name|TimetableManagerDAO
argument_list|()
operator|)
operator|.
name|findAll
argument_list|()
argument_list|)
decl_stmt|;
name|iDepartmentIds
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iDepartmentNames
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iManagerIds
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iManagerNames
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iAssignedDepartments
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iAssignedManagers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iDepartmentsEditable
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
name|iUniqueId
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|iName
operator|=
literal|null
expr_stmt|;
name|iAbbv
operator|=
literal|null
expr_stmt|;
name|iOp
operator|=
literal|"Save"
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|departments
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|.
name|getSolverGroup
argument_list|()
operator|==
literal|null
condition|)
block|{
name|iAssignedDepartments
operator|.
name|add
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|iDepartmentIds
operator|.
name|add
argument_list|(
name|d
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|iDepartmentNames
operator|.
name|add
argument_list|(
name|d
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" - "
operator|+
name|d
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|managers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimetableManager
name|m
init|=
operator|(
name|TimetableManager
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|iAssignedManagers
operator|.
name|add
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|iManagerIds
operator|.
name|add
argument_list|(
name|m
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|deptStr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
operator|(
operator|new
name|TreeSet
argument_list|(
name|m
operator|.
name|departmentsForSession
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
operator|)
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|deptStr
operator|+=
literal|"<span title='"
operator|+
name|d
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" - "
operator|+
name|d
operator|.
name|getName
argument_list|()
operator|+
literal|"'>"
operator|+
name|d
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|"</span>"
expr_stmt|;
if|if
condition|(
name|j
operator|.
name|hasNext
argument_list|()
condition|)
name|deptStr
operator|+=
literal|", "
expr_stmt|;
block|}
name|iManagerNames
operator|.
name|add
argument_list|(
name|m
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|deptStr
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
literal|" ("
operator|+
name|deptStr
operator|+
literal|")"
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|iUniqueId
operator|=
name|group
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iName
operator|=
name|group
operator|.
name|getName
argument_list|()
expr_stmt|;
name|iAbbv
operator|=
name|group
operator|.
name|getAbbv
argument_list|()
expr_stmt|;
name|iOp
operator|=
literal|"Update"
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|departments
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|group
operator|.
name|equals
argument_list|(
name|d
operator|.
name|getSolverGroup
argument_list|()
argument_list|)
condition|)
block|{
name|iAssignedDepartments
operator|.
name|add
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|iDepartmentIds
operator|.
name|add
argument_list|(
name|d
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|iDepartmentNames
operator|.
name|add
argument_list|(
name|d
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" - "
operator|+
name|d
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|d
operator|.
name|getSolverGroup
argument_list|()
operator|==
literal|null
condition|)
block|{
name|iAssignedDepartments
operator|.
name|add
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|iDepartmentIds
operator|.
name|add
argument_list|(
name|d
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|iDepartmentNames
operator|.
name|add
argument_list|(
name|d
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" - "
operator|+
name|d
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|managers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimetableManager
name|m
init|=
operator|(
name|TimetableManager
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|deptStr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
operator|(
operator|new
name|TreeSet
argument_list|(
name|m
operator|.
name|departmentsForSession
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
operator|)
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|deptStr
operator|+=
literal|"<span title='"
operator|+
name|d
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" - "
operator|+
name|d
operator|.
name|getName
argument_list|()
operator|+
literal|"'>"
operator|+
name|d
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|"</span>"
expr_stmt|;
if|if
condition|(
name|j
operator|.
name|hasNext
argument_list|()
condition|)
name|deptStr
operator|+=
literal|", "
expr_stmt|;
block|}
name|iManagerIds
operator|.
name|add
argument_list|(
name|m
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|iManagerNames
operator|.
name|add
argument_list|(
name|m
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|deptStr
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
literal|" ("
operator|+
name|deptStr
operator|+
literal|")"
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|.
name|getTimetableManagers
argument_list|()
operator|.
name|contains
argument_list|(
name|m
argument_list|)
condition|)
block|{
name|iAssignedManagers
operator|.
name|add
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iAssignedManagers
operator|.
name|add
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|group
operator|.
name|getSolutions
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|iDepartmentsEditable
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|public
name|SolverGroup
name|saveOrUpdate
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|SessionContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|SolverGroup
name|group
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iUniqueId
operator|.
name|longValue
argument_list|()
operator|>=
literal|0
condition|)
name|group
operator|=
operator|(
operator|new
name|SolverGroupDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|iUniqueId
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
name|group
operator|=
name|create
argument_list|(
name|hibSession
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
name|group
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|SOLVER_GROUP_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|CREATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|update
argument_list|(
name|group
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
name|group
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|SOLVER_GROUP_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|group
return|;
block|}
specifier|public
name|SolverGroup
name|create
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Long
name|sessionId
parameter_list|)
throws|throws
name|Exception
block|{
name|SolverGroup
name|group
init|=
operator|new
name|SolverGroup
argument_list|()
decl_stmt|;
name|group
operator|.
name|setName
argument_list|(
name|iName
argument_list|)
expr_stmt|;
name|group
operator|.
name|setAbbv
argument_list|(
name|iAbbv
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
operator|(
operator|new
name|SessionDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|sessionId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|group
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|Set
name|newDepartments
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iAssignedDepartments
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|deptId
init|=
operator|(
name|String
operator|)
name|iDepartmentIds
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Department
name|dept
init|=
operator|(
operator|new
name|DepartmentDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|deptId
argument_list|)
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|dept
operator|==
literal|null
condition|)
continue|continue;
name|String
name|add
init|=
operator|(
name|String
operator|)
name|iAssignedDepartments
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"on"
operator|.
name|equals
argument_list|(
name|add
argument_list|)
operator|||
literal|"true"
operator|.
name|equals
argument_list|(
name|add
argument_list|)
operator|||
literal|"1"
operator|.
name|equals
argument_list|(
name|add
argument_list|)
condition|)
name|newDepartments
operator|.
name|add
argument_list|(
name|dept
argument_list|)
expr_stmt|;
block|}
name|group
operator|.
name|setDepartments
argument_list|(
name|newDepartments
argument_list|)
expr_stmt|;
name|Set
name|newManagers
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iAssignedManagers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|mgrId
init|=
operator|(
name|String
operator|)
name|iManagerIds
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|TimetableManager
name|mgr
init|=
operator|(
operator|new
name|TimetableManagerDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|mgrId
argument_list|)
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|mgr
operator|==
literal|null
condition|)
continue|continue;
name|String
name|add
init|=
operator|(
name|String
operator|)
name|iAssignedManagers
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"on"
operator|.
name|equals
argument_list|(
name|add
argument_list|)
operator|||
literal|"true"
operator|.
name|equals
argument_list|(
name|add
argument_list|)
operator|||
literal|"1"
operator|.
name|equals
argument_list|(
name|add
argument_list|)
condition|)
name|newManagers
operator|.
name|add
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
block|}
name|group
operator|.
name|setTimetableManagers
argument_list|(
name|newManagers
argument_list|)
expr_stmt|;
name|group
operator|.
name|setSolutions
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Solution
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|group
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|newDepartments
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|d
operator|.
name|setSolverGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|newManagers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimetableManager
name|mgr
init|=
operator|(
name|TimetableManager
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|mgr
operator|.
name|getSolverGroups
argument_list|()
operator|.
name|add
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
block|}
name|iUniqueId
operator|=
name|group
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
return|return
name|group
return|;
block|}
specifier|public
name|void
name|update
parameter_list|(
name|SolverGroup
name|group
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
throws|throws
name|Exception
block|{
name|group
operator|.
name|setName
argument_list|(
name|iName
argument_list|)
expr_stmt|;
name|group
operator|.
name|setAbbv
argument_list|(
name|iAbbv
argument_list|)
expr_stmt|;
if|if
condition|(
name|iDepartmentsEditable
condition|)
block|{
name|HashSet
name|oldDepartments
init|=
operator|new
name|HashSet
argument_list|(
name|group
operator|.
name|getDepartments
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iAssignedDepartments
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|deptId
init|=
operator|(
name|String
operator|)
name|iDepartmentIds
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Department
name|dept
init|=
operator|(
operator|new
name|DepartmentDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|deptId
argument_list|)
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|dept
operator|==
literal|null
condition|)
continue|continue;
name|String
name|add
init|=
operator|(
name|String
operator|)
name|iAssignedDepartments
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"on"
operator|.
name|equals
argument_list|(
name|add
argument_list|)
operator|||
literal|"true"
operator|.
name|equals
argument_list|(
name|add
argument_list|)
operator|||
literal|"1"
operator|.
name|equals
argument_list|(
name|add
argument_list|)
condition|)
block|{
if|if
condition|(
name|oldDepartments
operator|.
name|remove
argument_list|(
name|dept
argument_list|)
condition|)
block|{
comment|//not changed -> do nothing
block|}
else|else
block|{
name|group
operator|.
name|getDepartments
argument_list|()
operator|.
name|add
argument_list|(
name|dept
argument_list|)
expr_stmt|;
name|dept
operator|.
name|setSolverGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|dept
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|oldDepartments
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|dept
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|group
operator|.
name|getDepartments
argument_list|()
operator|.
name|remove
argument_list|(
name|dept
argument_list|)
expr_stmt|;
name|dept
operator|.
name|setSolverGroup
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|dept
argument_list|)
expr_stmt|;
block|}
block|}
name|HashSet
name|oldManagers
init|=
operator|new
name|HashSet
argument_list|(
name|group
operator|.
name|getTimetableManagers
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iAssignedManagers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|mgrId
init|=
operator|(
name|String
operator|)
name|iManagerIds
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|TimetableManager
name|mgr
init|=
operator|(
operator|new
name|TimetableManagerDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|mgrId
argument_list|)
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|mgr
operator|==
literal|null
condition|)
continue|continue;
name|String
name|add
init|=
operator|(
name|String
operator|)
name|iAssignedManagers
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"on"
operator|.
name|equals
argument_list|(
name|add
argument_list|)
operator|||
literal|"true"
operator|.
name|equals
argument_list|(
name|add
argument_list|)
operator|||
literal|"1"
operator|.
name|equals
argument_list|(
name|add
argument_list|)
condition|)
block|{
if|if
condition|(
name|oldManagers
operator|.
name|remove
argument_list|(
name|mgr
argument_list|)
condition|)
block|{
comment|//not changed -> do nothing
block|}
else|else
block|{
name|group
operator|.
name|getTimetableManagers
argument_list|()
operator|.
name|add
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|oldManagers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimetableManager
name|mgr
init|=
operator|(
name|TimetableManager
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|group
operator|.
name|getTimetableManagers
argument_list|()
operator|.
name|remove
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|getSolverGroups
argument_list|()
operator|.
name|remove
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|group
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|group
operator|.
name|getDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|hibSession
operator|.
name|refresh
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|group
operator|.
name|getTimetableManagers
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|hibSession
operator|.
name|refresh
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|delete
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|SessionContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|iUniqueId
operator|.
name|longValue
argument_list|()
operator|<
literal|0
condition|)
return|return;
if|if
condition|(
operator|!
name|iDepartmentsEditable
condition|)
return|return;
name|SolverGroup
name|group
init|=
operator|(
operator|new
name|SolverGroupDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|iUniqueId
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|Iterator
name|i
init|=
name|group
operator|.
name|getDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|dept
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|dept
operator|.
name|setSolverGroup
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|dept
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|group
operator|.
name|getTimetableManagers
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimetableManager
name|mgr
init|=
operator|(
name|TimetableManager
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|mgr
operator|.
name|getSolverGroups
argument_list|()
operator|.
name|remove
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
block|}
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|context
argument_list|,
name|group
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|SOLVER_GROUP_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getOp
parameter_list|()
block|{
return|return
name|iOp
return|;
block|}
specifier|public
name|void
name|setOp
parameter_list|(
name|String
name|op
parameter_list|)
block|{
name|iOp
operator|=
name|op
expr_stmt|;
block|}
specifier|public
name|Long
name|getUniqueId
parameter_list|()
block|{
return|return
name|iUniqueId
return|;
block|}
specifier|public
name|void
name|setUniqueId
parameter_list|(
name|Long
name|uniqueId
parameter_list|)
block|{
name|iUniqueId
operator|=
name|uniqueId
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getAbbv
parameter_list|()
block|{
return|return
name|iAbbv
return|;
block|}
specifier|public
name|void
name|setAbbv
parameter_list|(
name|String
name|abbv
parameter_list|)
block|{
name|iAbbv
operator|=
name|abbv
expr_stmt|;
block|}
specifier|public
name|boolean
name|getDepartmentsEditable
parameter_list|()
block|{
return|return
name|iDepartmentsEditable
return|;
block|}
specifier|public
name|void
name|setDepartmentsEditable
parameter_list|(
name|boolean
name|departmentsEditable
parameter_list|)
block|{
name|iDepartmentsEditable
operator|=
name|departmentsEditable
expr_stmt|;
block|}
specifier|public
name|List
name|getDepartmentIds
parameter_list|()
block|{
return|return
name|iDepartmentIds
return|;
block|}
specifier|public
name|void
name|setDepartmentIds
parameter_list|(
name|List
name|departmentIds
parameter_list|)
block|{
name|iDepartmentIds
operator|=
name|departmentIds
expr_stmt|;
block|}
specifier|public
name|List
name|getDepartmentNames
parameter_list|()
block|{
return|return
name|iDepartmentNames
return|;
block|}
specifier|public
name|void
name|setDepartmentNames
parameter_list|(
name|List
name|departmentNames
parameter_list|)
block|{
name|iDepartmentNames
operator|=
name|departmentNames
expr_stmt|;
block|}
specifier|public
name|List
name|getAssignedDepartments
parameter_list|()
block|{
return|return
name|iAssignedDepartments
return|;
block|}
specifier|public
name|void
name|setAssignedDepartments
parameter_list|(
name|List
name|assignedDepartments
parameter_list|)
block|{
name|iAssignedDepartments
operator|=
name|assignedDepartments
expr_stmt|;
block|}
specifier|public
name|List
name|getManagerIds
parameter_list|()
block|{
return|return
name|iManagerIds
return|;
block|}
specifier|public
name|void
name|setManagerIds
parameter_list|(
name|List
name|managerIds
parameter_list|)
block|{
name|iManagerIds
operator|=
name|managerIds
expr_stmt|;
block|}
specifier|public
name|List
name|getManagerNames
parameter_list|()
block|{
return|return
name|iManagerNames
return|;
block|}
specifier|public
name|void
name|setManagerNames
parameter_list|(
name|List
name|managerNames
parameter_list|)
block|{
name|iManagerNames
operator|=
name|managerNames
expr_stmt|;
block|}
specifier|public
name|List
name|getAssignedManagers
parameter_list|()
block|{
return|return
name|iAssignedManagers
return|;
block|}
specifier|public
name|void
name|setAssignedManagers
parameter_list|(
name|List
name|assignedManagers
parameter_list|)
block|{
name|iAssignedManagers
operator|=
name|assignedManagers
expr_stmt|;
block|}
specifier|protected
name|DynamicListObjectFactory
name|iDynamicListFactory
init|=
operator|new
name|DynamicListObjectFactory
argument_list|()
block|{
specifier|public
name|Object
name|create
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
return|;
block|}
block|}
decl_stmt|;
block|}
end_class

end_unit

