begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionErrors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|EventDetailForm
operator|.
name|ContactBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|EventDetailForm
operator|.
name|MeetingBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|EventRoomAvailabilityForm
operator|.
name|DateLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|EventContact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|EventNote
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RelatedCourseInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SpecialEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|InstrOfferingConfigComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|SchedulingSubpartComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseEventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|EventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstrOfferingConfigDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SchedulingSubpartDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DynamicList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DynamicListObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|IdValue
import|;
end_import

begin_class
specifier|public
class|class
name|EventAddInfoForm
extends|extends
name|ActionForm
block|{
specifier|private
name|TreeSet
argument_list|<
name|DateLocation
argument_list|>
name|iDateLocations
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
specifier|private
name|int
name|iStartTime
decl_stmt|;
specifier|private
name|int
name|iStopTime
decl_stmt|;
specifier|private
name|String
name|iOp
decl_stmt|;
specifier|private
name|String
name|iStartTimeString
decl_stmt|;
specifier|private
name|String
name|iStopTimeString
decl_stmt|;
specifier|private
name|String
name|iEventName
decl_stmt|;
specifier|private
name|ContactBean
name|iMainContact
decl_stmt|;
specifier|private
name|String
name|iAdditionalInfo
decl_stmt|;
specifier|private
name|String
name|iMainContactEmail
decl_stmt|;
specifier|private
name|String
name|iMainContactPhone
decl_stmt|;
specifier|private
name|String
name|iMainContactFirstName
decl_stmt|;
specifier|private
name|String
name|iMainContactLastName
decl_stmt|;
specifier|private
name|String
name|iEventType
decl_stmt|;
specifier|private
name|List
name|iSubjectArea
decl_stmt|;
specifier|private
name|Collection
name|iSubjectAreas
decl_stmt|;
specifier|private
name|List
name|iCourseNbr
decl_stmt|;
specifier|private
name|List
name|iItype
decl_stmt|;
specifier|private
name|List
name|iClassNumber
decl_stmt|;
specifier|private
name|boolean
name|iAttendanceRequired
decl_stmt|;
comment|//if adding meetings to an existing event
specifier|private
name|Long
name|iEventId
decl_stmt|;
specifier|private
name|boolean
name|iIsAddMeetings
decl_stmt|;
specifier|private
name|Event
name|iEvent
decl_stmt|;
specifier|private
name|Vector
argument_list|<
name|MeetingBean
argument_list|>
name|iExistingMeetings
init|=
operator|new
name|Vector
argument_list|<
name|MeetingBean
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|ActionErrors
name|validate
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|ActionErrors
name|errors
init|=
operator|new
name|ActionErrors
argument_list|()
decl_stmt|;
if|if
condition|(
name|iEventName
operator|==
literal|null
operator|||
name|iEventName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"eventName"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"The event name is mandatory."
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iMainContactEmail
operator|==
literal|null
operator|||
name|iMainContactEmail
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"mcEmail"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"The contact email is mandatory."
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iMainContactPhone
operator|==
literal|null
operator|||
name|iMainContactPhone
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"mcPhone"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"The contact phone number is mandatory."
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iAdditionalInfo
operator|.
name|length
argument_list|()
operator|>
literal|999
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"note"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Additional information is too long. Please, limit it to no more than 1000 characters."
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|errors
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|iDateLocations
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iStartTime
operator|=
literal|90
expr_stmt|;
name|iStopTime
operator|=
literal|210
expr_stmt|;
name|iOp
operator|=
literal|null
expr_stmt|;
name|iStartTimeString
operator|=
literal|null
expr_stmt|;
name|iStopTimeString
operator|=
literal|null
expr_stmt|;
name|iEventName
operator|=
literal|null
expr_stmt|;
name|iMainContact
operator|=
literal|null
expr_stmt|;
name|iAdditionalInfo
operator|=
literal|""
expr_stmt|;
name|iMainContactEmail
operator|=
literal|null
expr_stmt|;
name|iMainContactPhone
operator|=
literal|null
expr_stmt|;
name|iMainContactFirstName
operator|=
literal|null
expr_stmt|;
name|iMainContactLastName
operator|=
literal|null
expr_stmt|;
name|iEventType
operator|=
literal|null
expr_stmt|;
name|iSubjectArea
operator|=
name|DynamicList
operator|.
name|getInstance
argument_list|(
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|idfactory
argument_list|)
expr_stmt|;
name|iCourseNbr
operator|=
name|DynamicList
operator|.
name|getInstance
argument_list|(
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|idfactory
argument_list|)
expr_stmt|;
name|iItype
operator|=
name|DynamicList
operator|.
name|getInstance
argument_list|(
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|idfactory
argument_list|)
expr_stmt|;
name|iClassNumber
operator|=
name|DynamicList
operator|.
name|getInstance
argument_list|(
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|idfactory
argument_list|)
expr_stmt|;
name|iAttendanceRequired
operator|=
literal|false
expr_stmt|;
name|iExistingMeetings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|load
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|load
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|HttpSession
name|session
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|iDateLocations
operator|=
operator|(
name|TreeSet
argument_list|<
name|DateLocation
argument_list|>
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.DateLocations"
argument_list|)
expr_stmt|;
name|iStartTime
operator|=
operator|(
name|Integer
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.StartTime"
argument_list|)
expr_stmt|;
name|iStopTime
operator|=
operator|(
name|Integer
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.StopTime"
argument_list|)
expr_stmt|;
name|iEventType
operator|=
operator|(
name|String
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.EventType"
argument_list|)
expr_stmt|;
if|if
condition|(
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.SubjectArea"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|iSubjectArea
operator|=
operator|(
name|List
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.SubjectArea"
argument_list|)
expr_stmt|;
name|iSubjectAreas
operator|=
operator|(
name|Collection
operator|)
name|iSubjectArea
expr_stmt|;
name|iCourseNbr
operator|=
operator|(
name|List
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.CourseNbr"
argument_list|)
expr_stmt|;
name|iItype
operator|=
operator|(
name|List
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.SubjectItype"
argument_list|)
expr_stmt|;
name|iClassNumber
operator|=
operator|(
name|List
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.ClassNumber"
argument_list|)
expr_stmt|;
name|iAttendanceRequired
operator|=
operator|(
name|Boolean
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.AttendanceRequired"
argument_list|)
expr_stmt|;
block|}
name|TimetableManager
name|tm
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|iIsAddMeetings
operator|=
operator|(
name|Boolean
operator|)
operator|(
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.IsAddMeetings"
argument_list|)
operator|)
expr_stmt|;
name|iEventId
operator|=
operator|(
name|Long
operator|)
operator|(
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.EventId"
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
name|iIsAddMeetings
condition|)
block|{
name|iEvent
operator|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|iEventId
argument_list|)
expr_stmt|;
name|iEventName
operator|=
name|iEvent
operator|.
name|getEventName
argument_list|()
expr_stmt|;
name|iEventType
operator|=
name|iEvent
operator|.
name|getEventTypeLabel
argument_list|()
expr_stmt|;
name|iMainContactFirstName
operator|=
name|iEvent
operator|.
name|getMainContact
argument_list|()
operator|.
name|getFirstName
argument_list|()
expr_stmt|;
name|iMainContactLastName
operator|=
name|iEvent
operator|.
name|getMainContact
argument_list|()
operator|.
name|getLastName
argument_list|()
expr_stmt|;
name|iMainContactEmail
operator|=
name|iEvent
operator|.
name|getMainContact
argument_list|()
operator|.
name|getEmailAddress
argument_list|()
expr_stmt|;
name|iMainContactPhone
operator|=
name|iEvent
operator|.
name|getMainContact
argument_list|()
operator|.
name|getPhone
argument_list|()
expr_stmt|;
name|loadExistingMeetings
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|tm
operator|!=
literal|null
condition|)
block|{
name|iMainContactFirstName
operator|=
operator|(
name|tm
operator|.
name|getFirstName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|tm
operator|.
name|getFirstName
argument_list|()
operator|)
expr_stmt|;
name|iMainContactLastName
operator|=
operator|(
name|tm
operator|.
name|getLastName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|tm
operator|.
name|getLastName
argument_list|()
operator|)
expr_stmt|;
name|iMainContactEmail
operator|=
operator|(
name|tm
operator|.
name|getEmailAddress
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|tm
operator|.
name|getEmailAddress
argument_list|()
operator|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Event Id: "
operator|+
name|iEventId
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Event Type: "
operator|+
name|iEventType
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"Course Event"
operator|.
name|equals
argument_list|(
name|iEventType
argument_list|)
operator|&&
name|iIsAddMeetings
condition|)
block|{
name|CourseEvent
name|courseEvent
init|=
operator|new
name|CourseEventDAO
argument_list|()
operator|.
name|get
argument_list|(
name|iEventId
argument_list|)
decl_stmt|;
empty_stmt|;
if|if
condition|(
operator|!
name|courseEvent
operator|.
name|getRelatedCourses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|WebTable
name|table
init|=
operator|new
name|WebTable
argument_list|(
literal|3
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Object"
block|,
literal|"Type"
block|,
literal|"Title"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|TreeSet
argument_list|(
name|courseEvent
operator|.
name|getRelatedCourses
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RelatedCourseInfo
name|rci
init|=
operator|(
name|RelatedCourseInfo
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|onclick
init|=
literal|null
decl_stmt|,
name|name
init|=
literal|null
decl_stmt|,
name|type
init|=
literal|null
decl_stmt|,
name|title
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|rci
operator|.
name|getOwnerType
argument_list|()
condition|)
block|{
case|case
name|ExamOwner
operator|.
name|sOwnerTypeClass
case|:
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|rci
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isViewableBy
argument_list|(
name|user
argument_list|)
condition|)
name|onclick
operator|=
literal|"onClick=\"document.location='classDetail.do?cid="
operator|+
name|clazz
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"';\""
expr_stmt|;
name|name
operator|=
name|rci
operator|.
name|getLabel
argument_list|()
expr_stmt|;
comment|//clazz.getClassLabel();
name|type
operator|=
literal|"Class"
expr_stmt|;
name|title
operator|=
name|clazz
operator|.
name|getSchedulePrintNote
argument_list|()
expr_stmt|;
if|if
condition|(
name|title
operator|==
literal|null
operator|||
name|title
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|title
operator|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getTitle
argument_list|()
expr_stmt|;
break|break;
case|case
name|ExamOwner
operator|.
name|sOwnerTypeConfig
case|:
name|InstrOfferingConfig
name|config
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|rci
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|isViewableBy
argument_list|(
name|user
argument_list|)
condition|)
name|onclick
operator|=
literal|"onClick=\"document.location='instructionalOfferingDetail.do?io="
operator|+
name|config
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"';\""
expr_stmt|;
empty_stmt|;
name|name
operator|=
name|rci
operator|.
name|getLabel
argument_list|()
expr_stmt|;
comment|//config.getCourseName()+" ["+config.getName()+"]";
name|type
operator|=
literal|"Configuration"
expr_stmt|;
name|title
operator|=
name|config
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getTitle
argument_list|()
expr_stmt|;
break|break;
case|case
name|ExamOwner
operator|.
name|sOwnerTypeOffering
case|:
name|InstructionalOffering
name|offering
init|=
operator|(
name|InstructionalOffering
operator|)
name|rci
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|offering
operator|.
name|isViewableBy
argument_list|(
name|user
argument_list|)
condition|)
name|onclick
operator|=
literal|"onClick=\"document.location='instructionalOfferingDetail.do?io="
operator|+
name|offering
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"';\""
expr_stmt|;
empty_stmt|;
name|name
operator|=
name|rci
operator|.
name|getLabel
argument_list|()
expr_stmt|;
comment|//offering.getCourseName();
name|type
operator|=
literal|"Offering"
expr_stmt|;
name|title
operator|=
name|offering
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getTitle
argument_list|()
expr_stmt|;
break|break;
case|case
name|ExamOwner
operator|.
name|sOwnerTypeCourse
case|:
name|CourseOffering
name|course
init|=
operator|(
name|CourseOffering
operator|)
name|rci
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|isViewableBy
argument_list|(
name|user
argument_list|)
condition|)
name|onclick
operator|=
literal|"onClick=\"document.location='instructionalOfferingDetail.do?io="
operator|+
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"';\""
expr_stmt|;
empty_stmt|;
name|name
operator|=
name|rci
operator|.
name|getLabel
argument_list|()
expr_stmt|;
comment|//course.getCourseName();
name|type
operator|=
literal|"Course"
expr_stmt|;
name|title
operator|=
name|course
operator|.
name|getTitle
argument_list|()
expr_stmt|;
break|break;
block|}
name|table
operator|.
name|addLine
argument_list|(
name|onclick
argument_list|,
operator|new
name|String
index|[]
block|{
name|name
block|,
name|type
block|,
name|title
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
literal|"EventDetail.table"
argument_list|,
name|table
operator|.
name|printTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|save
parameter_list|(
name|HttpSession
name|session
parameter_list|)
block|{
block|}
specifier|public
name|void
name|submit
parameter_list|(
name|HttpSession
name|session
parameter_list|)
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Session
name|hibSession
init|=
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
comment|// create event
name|Event
name|event
init|=
literal|null
decl_stmt|;
comment|//getEvent();
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
comment|// search database for a contact with this e-mail
comment|// if not in db, create a new contact
comment|// update information from non-empty fields
name|EventContact
name|mainContact
init|=
name|EventContact
operator|.
name|findByEmail
argument_list|(
name|iMainContactEmail
argument_list|)
decl_stmt|;
if|if
condition|(
name|mainContact
operator|==
literal|null
condition|)
name|mainContact
operator|=
operator|new
name|EventContact
argument_list|()
expr_stmt|;
if|if
condition|(
name|iMainContactFirstName
operator|!=
literal|null
operator|&&
name|iMainContactFirstName
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|mainContact
operator|.
name|setFirstName
argument_list|(
name|iMainContactFirstName
argument_list|)
expr_stmt|;
if|if
condition|(
name|iMainContactLastName
operator|!=
literal|null
operator|&&
name|iMainContactLastName
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|mainContact
operator|.
name|setLastName
argument_list|(
name|iMainContactLastName
argument_list|)
expr_stmt|;
if|if
condition|(
name|iMainContactEmail
operator|!=
literal|null
operator|&&
name|iMainContactEmail
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|mainContact
operator|.
name|setEmailAddress
argument_list|(
name|iMainContactEmail
argument_list|)
expr_stmt|;
if|if
condition|(
name|iMainContactPhone
operator|!=
literal|null
operator|&&
name|iMainContactPhone
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|mainContact
operator|.
name|setPhone
argument_list|(
name|iMainContactPhone
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|mainContact
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"Course Event"
operator|.
name|equals
argument_list|(
name|iEventType
argument_list|)
condition|)
block|{
name|event
operator|=
operator|new
name|CourseEvent
argument_list|()
expr_stmt|;
operator|(
operator|(
name|CourseEvent
operator|)
name|event
operator|)
operator|.
name|setReqAttendance
argument_list|(
name|iAttendanceRequired
argument_list|)
expr_stmt|;
name|setRelatedCourseInfos
argument_list|(
operator|(
name|CourseEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|event
operator|=
operator|new
name|SpecialEvent
argument_list|()
expr_stmt|;
block|}
name|event
operator|.
name|setEventName
argument_list|(
name|iEventName
argument_list|)
expr_stmt|;
name|event
operator|.
name|setMainContact
argument_list|(
name|mainContact
argument_list|)
expr_stmt|;
comment|// add event note (additional info)
name|EventNote
name|en
init|=
operator|new
name|EventNote
argument_list|()
decl_stmt|;
name|en
operator|.
name|setEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|en
operator|.
name|setTextNote
argument_list|(
name|iAdditionalInfo
argument_list|)
expr_stmt|;
comment|// attach the note to event
name|event
operator|.
name|setNotes
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|getNotes
argument_list|()
operator|.
name|add
argument_list|(
name|en
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|event
argument_list|)
expr_stmt|;
comment|//hibSession.saveOrUpdate(en);
name|event
operator|.
name|setMeetings
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// create event meetings
for|for
control|(
name|Iterator
name|i
init|=
name|iDateLocations
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DateLocation
name|dl
init|=
operator|(
name|DateLocation
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Meeting
name|m
init|=
operator|new
name|Meeting
argument_list|()
decl_stmt|;
name|m
operator|.
name|setMeetingDate
argument_list|(
name|dl
operator|.
name|getDate
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setStartPeriod
argument_list|(
name|iStartTime
argument_list|)
expr_stmt|;
name|m
operator|.
name|setStopPeriod
argument_list|(
name|iStopTime
argument_list|)
expr_stmt|;
name|m
operator|.
name|setLocationPermanentId
argument_list|(
name|dl
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setClassCanOverride
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|m
operator|.
name|setEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|m
argument_list|)
expr_stmt|;
comment|// save each meeting to db
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
comment|// link each meeting with event
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|iEventId
operator|=
name|event
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|update
parameter_list|(
name|HttpSession
name|session
parameter_list|)
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Session
name|hibSession
init|=
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
comment|// create event meetings
for|for
control|(
name|Iterator
name|i
init|=
name|iDateLocations
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DateLocation
name|dl
init|=
operator|(
name|DateLocation
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Meeting
name|m
init|=
operator|new
name|Meeting
argument_list|()
decl_stmt|;
name|m
operator|.
name|setMeetingDate
argument_list|(
name|dl
operator|.
name|getDate
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setStartPeriod
argument_list|(
name|iStartTime
argument_list|)
expr_stmt|;
name|m
operator|.
name|setStopPeriod
argument_list|(
name|iStopTime
argument_list|)
expr_stmt|;
name|m
operator|.
name|setLocationPermanentId
argument_list|(
name|dl
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setClassCanOverride
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|m
operator|.
name|setEvent
argument_list|(
name|iEvent
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|m
argument_list|)
expr_stmt|;
comment|// save each meeting to db
name|iEvent
operator|.
name|getMeetings
argument_list|()
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
comment|// link each meeting with event
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|iEvent
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Long
name|getEventId
parameter_list|()
block|{
return|return
name|iEventId
return|;
block|}
specifier|public
name|int
name|getStartTime
parameter_list|()
block|{
return|return
name|iStartTime
return|;
block|}
specifier|public
name|int
name|getStopTime
parameter_list|()
block|{
return|return
name|iStopTime
return|;
block|}
specifier|public
name|String
name|getOp
parameter_list|()
block|{
return|return
name|iOp
return|;
block|}
specifier|public
name|void
name|setOp
parameter_list|(
name|String
name|op
parameter_list|)
block|{
name|iOp
operator|=
name|op
expr_stmt|;
block|}
specifier|public
name|boolean
name|getAttendanceRequired
parameter_list|()
block|{
return|return
name|iAttendanceRequired
return|;
block|}
specifier|public
name|void
name|setAttendanceRequired
parameter_list|(
name|boolean
name|save
parameter_list|)
block|{
name|iAttendanceRequired
operator|=
name|save
expr_stmt|;
block|}
specifier|public
name|TreeSet
argument_list|<
name|DateLocation
argument_list|>
name|getDateLocations
parameter_list|()
block|{
return|return
name|iDateLocations
return|;
block|}
specifier|public
name|String
name|getTimeString
parameter_list|(
name|int
name|time
parameter_list|)
block|{
name|int
name|hour
init|=
operator|(
name|time
operator|/
literal|12
operator|)
operator|%
literal|12
decl_stmt|;
if|if
condition|(
name|hour
operator|==
literal|0
condition|)
name|hour
operator|=
literal|12
expr_stmt|;
name|int
name|minute
init|=
name|time
operator|%
literal|12
operator|*
literal|5
decl_stmt|;
name|String
name|ampm
init|=
operator|(
name|time
operator|/
literal|144
operator|==
literal|0
condition|?
literal|"am"
else|:
literal|"pm"
operator|)
decl_stmt|;
return|return
name|hour
operator|+
literal|":"
operator|+
operator|(
name|minute
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|minute
operator|+
literal|" "
operator|+
name|ampm
return|;
block|}
specifier|public
name|String
name|getStartTimeString
parameter_list|()
block|{
return|return
name|getTimeString
argument_list|(
name|iStartTime
argument_list|)
return|;
block|}
specifier|public
name|String
name|getStopTimeString
parameter_list|()
block|{
return|return
name|getTimeString
argument_list|(
name|iStopTime
argument_list|)
return|;
block|}
specifier|public
name|String
name|getEventType
parameter_list|()
block|{
return|return
name|iEventType
return|;
block|}
specifier|public
name|void
name|setEventType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|iEventType
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|String
name|getEventName
parameter_list|()
block|{
return|return
name|iEventName
return|;
block|}
specifier|public
name|void
name|setEventName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|iEventName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|ContactBean
name|getMainContact
parameter_list|()
block|{
return|return
name|iMainContact
return|;
block|}
specifier|public
name|void
name|setMainContact
parameter_list|(
name|ContactBean
name|contact
parameter_list|)
block|{
name|iMainContact
operator|=
name|contact
expr_stmt|;
block|}
specifier|public
name|String
name|getMainContactEmail
parameter_list|()
block|{
return|return
name|iMainContactEmail
return|;
block|}
specifier|public
name|void
name|setMainContactEmail
parameter_list|(
name|String
name|email
parameter_list|)
block|{
name|iMainContactEmail
operator|=
name|email
expr_stmt|;
block|}
specifier|public
name|String
name|getMainContactPhone
parameter_list|()
block|{
return|return
name|iMainContactPhone
return|;
block|}
specifier|public
name|void
name|setMainContactPhone
parameter_list|(
name|String
name|phone
parameter_list|)
block|{
name|iMainContactPhone
operator|=
name|phone
expr_stmt|;
block|}
specifier|public
name|String
name|getAdditionalInfo
parameter_list|()
block|{
return|return
name|iAdditionalInfo
return|;
block|}
specifier|public
name|void
name|setAdditionalInfo
parameter_list|(
name|String
name|info
parameter_list|)
block|{
name|iAdditionalInfo
operator|=
name|info
expr_stmt|;
block|}
specifier|public
name|String
name|getMainContactFirstName
parameter_list|()
block|{
return|return
name|iMainContactFirstName
return|;
block|}
specifier|public
name|void
name|setMainContactFirstName
parameter_list|(
name|String
name|firstName
parameter_list|)
block|{
name|iMainContactFirstName
operator|=
name|firstName
expr_stmt|;
block|}
specifier|public
name|String
name|getMainContactLastName
parameter_list|()
block|{
return|return
name|iMainContactLastName
return|;
block|}
specifier|public
name|void
name|setMainContactLastName
parameter_list|(
name|String
name|lastName
parameter_list|)
block|{
name|iMainContactLastName
operator|=
name|lastName
expr_stmt|;
block|}
specifier|public
name|Event
name|getEvent
parameter_list|()
block|{
return|return
name|iEvent
return|;
block|}
specifier|public
name|void
name|setEvent
parameter_list|(
name|Event
name|e
parameter_list|)
block|{
name|iEvent
operator|=
name|e
expr_stmt|;
block|}
specifier|public
name|boolean
name|getIsAddMeetings
parameter_list|()
block|{
return|return
name|iIsAddMeetings
return|;
block|}
specifier|public
name|void
name|setIsAddMeetings
parameter_list|(
name|boolean
name|isAdd
parameter_list|)
block|{
name|iIsAddMeetings
operator|=
name|isAdd
expr_stmt|;
block|}
specifier|public
name|void
name|loadExistingMeetings
parameter_list|()
block|{
name|SimpleDateFormat
name|iDateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE MM/dd, yyyy"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|TreeSet
argument_list|(
name|iEvent
operator|.
name|getMeetings
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|MeetingBean
name|mb
init|=
operator|new
name|MeetingBean
argument_list|()
decl_stmt|;
name|int
name|start
init|=
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|meeting
operator|.
name|getStartPeriod
argument_list|()
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|+
operator|(
name|meeting
operator|.
name|getStartOffset
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|meeting
operator|.
name|getStartOffset
argument_list|()
operator|)
decl_stmt|;
name|int
name|startHour
init|=
name|start
operator|/
literal|60
decl_stmt|;
name|int
name|startMin
init|=
name|start
operator|%
literal|60
decl_stmt|;
name|int
name|end
init|=
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|meeting
operator|.
name|getStopPeriod
argument_list|()
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|+
operator|(
name|meeting
operator|.
name|getStopOffset
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|meeting
operator|.
name|getStopOffset
argument_list|()
operator|)
decl_stmt|;
name|int
name|endHour
init|=
name|end
operator|/
literal|60
decl_stmt|;
name|int
name|endMin
init|=
name|end
operator|%
literal|60
decl_stmt|;
comment|//			String location = (meeting.getLocation()==null?"":meeting.getLocation().getLabel());
name|String
name|date
init|=
name|iDateFormat
operator|.
name|format
argument_list|(
name|meeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
decl_stmt|;
name|mb
operator|.
name|setDate
argument_list|(
name|date
argument_list|)
expr_stmt|;
name|mb
operator|.
name|setStartTime
argument_list|(
operator|(
name|startHour
operator|>
literal|12
condition|?
name|startHour
operator|-
literal|12
else|:
name|startHour
operator|)
operator|+
literal|":"
operator|+
operator|(
name|startMin
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|startMin
operator|+
operator|(
name|startHour
operator|>=
literal|12
condition|?
literal|" pm"
else|:
literal|" am"
operator|)
argument_list|)
expr_stmt|;
name|mb
operator|.
name|setEndTime
argument_list|(
operator|(
name|endHour
operator|>
literal|12
condition|?
name|endHour
operator|-
literal|12
else|:
name|endHour
operator|)
operator|+
literal|":"
operator|+
operator|(
name|endMin
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|endMin
operator|+
operator|(
name|endHour
operator|>=
literal|12
condition|?
literal|" pm"
else|:
literal|" am"
operator|)
argument_list|)
expr_stmt|;
name|mb
operator|.
name|setLocation
argument_list|(
operator|(
name|meeting
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|meeting
operator|.
name|getLocation
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|iExistingMeetings
operator|.
name|add
argument_list|(
name|mb
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Vector
argument_list|<
name|MeetingBean
argument_list|>
name|getExistingMeetings
parameter_list|()
block|{
return|return
name|iExistingMeetings
return|;
block|}
specifier|public
name|void
name|cleanSessionAttributes
parameter_list|(
name|HttpSession
name|session
parameter_list|)
block|{
name|session
operator|.
name|removeAttribute
argument_list|(
literal|"Event.DateLocations"
argument_list|)
expr_stmt|;
name|session
operator|.
name|removeAttribute
argument_list|(
literal|"Event.StartTime"
argument_list|)
expr_stmt|;
name|session
operator|.
name|removeAttribute
argument_list|(
literal|"Event.StopTime"
argument_list|)
expr_stmt|;
name|session
operator|.
name|removeAttribute
argument_list|(
literal|"Event.MeetingDates"
argument_list|)
expr_stmt|;
name|session
operator|.
name|removeAttribute
argument_list|(
literal|"Event.MinCapacity"
argument_list|)
expr_stmt|;
name|session
operator|.
name|removeAttribute
argument_list|(
literal|"Event.MaxCapacity"
argument_list|)
expr_stmt|;
name|session
operator|.
name|removeAttribute
argument_list|(
literal|"Event.BuildingId"
argument_list|)
expr_stmt|;
name|session
operator|.
name|removeAttribute
argument_list|(
literal|"Event.RoomNumber"
argument_list|)
expr_stmt|;
name|session
operator|.
name|removeAttribute
argument_list|(
literal|"Event.SessionId"
argument_list|)
expr_stmt|;
name|session
operator|.
name|removeAttribute
argument_list|(
literal|"back"
argument_list|)
expr_stmt|;
name|session
operator|.
name|removeAttribute
argument_list|(
literal|"Event.LookAtNearLocations"
argument_list|)
expr_stmt|;
name|session
operator|.
name|removeAttribute
argument_list|(
literal|"Event.SubjectArea"
argument_list|)
expr_stmt|;
name|session
operator|.
name|removeAttribute
argument_list|(
literal|"Event.CourseNbr"
argument_list|)
expr_stmt|;
name|session
operator|.
name|removeAttribute
argument_list|(
literal|"Event.SubjectItype"
argument_list|)
expr_stmt|;
name|session
operator|.
name|removeAttribute
argument_list|(
literal|"Event.ClassNumber"
argument_list|)
expr_stmt|;
name|session
operator|.
name|removeAttribute
argument_list|(
literal|"Event.EventId"
argument_list|)
expr_stmt|;
name|session
operator|.
name|removeAttribute
argument_list|(
literal|"Event.IsAddMeetings"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|DynamicListObjectFactory
name|idfactory
init|=
operator|new
name|DynamicListObjectFactory
argument_list|()
block|{
specifier|public
name|Object
name|create
parameter_list|()
block|{
return|return
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|public
name|Collection
name|getSubjectAreas
parameter_list|()
block|{
return|return
name|iSubjectAreas
return|;
block|}
specifier|public
name|void
name|setSubjectAreas
parameter_list|(
name|Collection
name|subjectAreas
parameter_list|)
block|{
name|this
operator|.
name|iSubjectAreas
operator|=
name|subjectAreas
expr_stmt|;
block|}
specifier|public
name|List
name|getSubjectAreaList
parameter_list|()
block|{
return|return
name|iSubjectArea
return|;
block|}
specifier|public
name|List
name|getSubjectArea
parameter_list|()
block|{
return|return
name|iSubjectArea
return|;
block|}
specifier|public
name|Long
name|getSubjectArea
parameter_list|(
name|int
name|key
parameter_list|)
block|{
return|return
operator|(
name|Long
operator|)
name|iSubjectArea
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|void
name|setSubjectArea
parameter_list|(
name|int
name|key
parameter_list|,
name|Long
name|value
parameter_list|)
block|{
name|this
operator|.
name|iSubjectArea
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setSubjectArea
parameter_list|(
name|List
name|subjectArea
parameter_list|)
block|{
name|this
operator|.
name|iSubjectArea
operator|=
name|subjectArea
expr_stmt|;
block|}
specifier|public
name|List
name|getCourseNbr
parameter_list|()
block|{
return|return
name|iCourseNbr
return|;
block|}
specifier|public
name|Long
name|getCourseNbr
parameter_list|(
name|int
name|key
parameter_list|)
block|{
return|return
operator|(
name|Long
operator|)
name|iCourseNbr
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|void
name|setCourseNbr
parameter_list|(
name|int
name|key
parameter_list|,
name|Long
name|value
parameter_list|)
block|{
name|this
operator|.
name|iCourseNbr
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setCourseNbr
parameter_list|(
name|List
name|courseNbr
parameter_list|)
block|{
name|this
operator|.
name|iCourseNbr
operator|=
name|courseNbr
expr_stmt|;
block|}
specifier|public
name|List
name|getItype
parameter_list|()
block|{
return|return
name|iItype
return|;
block|}
specifier|public
name|Long
name|getItype
parameter_list|(
name|int
name|key
parameter_list|)
block|{
return|return
operator|(
name|Long
operator|)
name|iItype
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|void
name|setItype
parameter_list|(
name|int
name|key
parameter_list|,
name|Long
name|value
parameter_list|)
block|{
name|this
operator|.
name|iItype
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setItype
parameter_list|(
name|List
name|itype
parameter_list|)
block|{
name|this
operator|.
name|iItype
operator|=
name|itype
expr_stmt|;
block|}
specifier|public
name|List
name|getClassNumber
parameter_list|()
block|{
return|return
name|iClassNumber
return|;
block|}
specifier|public
name|Long
name|getClassNumber
parameter_list|(
name|int
name|key
parameter_list|)
block|{
return|return
operator|(
name|Long
operator|)
name|iClassNumber
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|void
name|setClassNumber
parameter_list|(
name|int
name|key
parameter_list|,
name|Long
name|value
parameter_list|)
block|{
name|this
operator|.
name|iClassNumber
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setClassNumber
parameter_list|(
name|List
name|classNumber
parameter_list|)
block|{
name|this
operator|.
name|iClassNumber
operator|=
name|classNumber
expr_stmt|;
block|}
specifier|public
name|Collection
name|getCourseNbrs
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
name|Vector
name|ret
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|boolean
name|contains
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|getSubjectArea
argument_list|(
name|idx
argument_list|)
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select co.uniqueId, co.courseNbr from CourseOffering co "
operator|+
literal|"where co.uniqueCourseNbr.subjectArea.uniqueId = :subjectAreaId "
operator|+
literal|"and co.instructionalOffering.notOffered = false "
operator|+
literal|"order by co.courseNbr "
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|200
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"subjectAreaId"
argument_list|,
name|getSubjectArea
argument_list|(
name|idx
argument_list|)
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|IdValue
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|o
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|o
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|getCourseNbr
argument_list|(
name|idx
argument_list|)
argument_list|)
condition|)
name|contains
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|contains
condition|)
name|setCourseNbr
argument_list|(
name|idx
argument_list|,
operator|-
literal|1L
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|setCourseNbr
argument_list|(
name|idx
argument_list|,
operator|(
operator|(
name|IdValue
operator|)
name|ret
operator|.
name|firstElement
argument_list|()
operator|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|ret
operator|.
name|insertElementAt
argument_list|(
operator|new
name|IdValue
argument_list|(
operator|-
literal|1L
argument_list|,
literal|"-"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|Collection
name|getItypes
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
name|Vector
name|ret
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|boolean
name|contains
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|getCourseNbr
argument_list|(
name|idx
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|CourseOffering
name|course
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
operator|.
name|get
argument_list|(
name|getCourseNbr
argument_list|(
name|idx
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|isIsControl
argument_list|()
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|IdValue
argument_list|(
name|Long
operator|.
name|MIN_VALUE
operator|+
literal|1
argument_list|,
literal|"Offering"
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|IdValue
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
literal|"Course"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|course
operator|.
name|isIsControl
argument_list|()
condition|)
block|{
name|setItype
argument_list|(
name|idx
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
name|TreeSet
name|configs
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|InstrOfferingConfigComparator
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|configs
operator|.
name|addAll
argument_list|(
operator|new
name|InstrOfferingConfigDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct c from "
operator|+
literal|"InstrOfferingConfig c inner join c.instructionalOffering.courseOfferings co "
operator|+
literal|"where co.uniqueId = :courseOfferingId"
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|200
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"courseOfferingId"
argument_list|,
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|configs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|IdValue
argument_list|(
name|Long
operator|.
name|MIN_VALUE
operator|+
literal|2
argument_list|,
literal|"-- Configurations --"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|configs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|c
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|getItype
argument_list|(
name|idx
argument_list|)
argument_list|)
condition|)
name|contains
operator|=
literal|true
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|IdValue
argument_list|(
operator|-
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|c
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|TreeSet
name|subparts
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|SchedulingSubpartComparator
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|subparts
operator|.
name|addAll
argument_list|(
operator|new
name|SchedulingSubpartDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct s from "
operator|+
literal|"SchedulingSubpart s inner join s.instrOfferingConfig.instructionalOffering.courseOfferings co "
operator|+
literal|"where co.uniqueId = :courseOfferingId"
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|200
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"courseOfferingId"
argument_list|,
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|configs
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|subparts
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|IdValue
argument_list|(
name|Long
operator|.
name|MIN_VALUE
operator|+
literal|2
argument_list|,
literal|"-- Subparts --"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|subparts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|s
init|=
operator|(
name|SchedulingSubpart
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|sid
init|=
name|s
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|s
operator|.
name|getItype
argument_list|()
operator|.
name|getAbbv
argument_list|()
decl_stmt|;
name|String
name|sufix
init|=
name|s
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|getParentSubpart
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
literal|"&nbsp;&nbsp;&nbsp;&nbsp;"
operator|+
name|name
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|getParentSubpart
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
name|name
operator|+=
literal|" ["
operator|+
name|s
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
expr_stmt|;
if|if
condition|(
name|sid
operator|.
name|equals
argument_list|(
name|getItype
argument_list|(
name|idx
argument_list|)
argument_list|)
condition|)
name|contains
operator|=
literal|true
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|IdValue
argument_list|(
name|sid
argument_list|,
name|name
operator|+
operator|(
name|sufix
operator|==
literal|null
operator|||
name|sufix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
literal|" ("
operator|+
name|sufix
operator|+
literal|")"
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ret
operator|.
name|addElement
argument_list|(
operator|new
name|IdValue
argument_list|(
literal|0L
argument_list|,
literal|"N/A"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|contains
condition|)
name|setItype
argument_list|(
name|idx
argument_list|,
operator|(
operator|(
name|IdValue
operator|)
name|ret
operator|.
name|firstElement
argument_list|()
operator|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|RelatedCourseInfo
name|getRelatedCourseInfo
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
if|if
condition|(
name|getSubjectArea
argument_list|(
name|idx
argument_list|)
operator|<
literal|0
operator|||
name|getCourseNbr
argument_list|(
name|idx
argument_list|)
operator|<
literal|0
condition|)
return|return
literal|null
return|;
name|CourseOffering
name|course
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
operator|.
name|get
argument_list|(
name|getCourseNbr
argument_list|(
name|idx
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|getItype
argument_list|(
name|idx
argument_list|)
operator|==
name|Long
operator|.
name|MIN_VALUE
condition|)
block|{
comment|//course
name|RelatedCourseInfo
name|owner
init|=
operator|new
name|RelatedCourseInfo
argument_list|()
decl_stmt|;
name|owner
operator|.
name|setOwner
argument_list|(
name|course
argument_list|)
expr_stmt|;
return|return
name|owner
return|;
block|}
if|else if
condition|(
name|getItype
argument_list|(
name|idx
argument_list|)
operator|==
name|Long
operator|.
name|MIN_VALUE
operator|+
literal|1
operator|||
name|getItype
argument_list|(
name|idx
argument_list|)
operator|==
name|Long
operator|.
name|MIN_VALUE
operator|+
literal|2
condition|)
block|{
comment|//offering
name|RelatedCourseInfo
name|owner
init|=
operator|new
name|RelatedCourseInfo
argument_list|()
decl_stmt|;
name|owner
operator|.
name|setOwner
argument_list|(
name|course
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|owner
return|;
block|}
if|else if
condition|(
name|getItype
argument_list|(
name|idx
argument_list|)
operator|<
literal|0
condition|)
block|{
comment|//config
name|InstrOfferingConfig
name|config
init|=
operator|new
name|InstrOfferingConfigDAO
argument_list|()
operator|.
name|get
argument_list|(
operator|-
name|getItype
argument_list|(
name|idx
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|RelatedCourseInfo
name|owner
init|=
operator|new
name|RelatedCourseInfo
argument_list|()
decl_stmt|;
name|owner
operator|.
name|setOwner
argument_list|(
name|config
argument_list|)
expr_stmt|;
return|return
name|owner
return|;
block|}
if|else if
condition|(
name|getClassNumber
argument_list|(
name|idx
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|//class
name|Class_
name|clazz
init|=
operator|new
name|Class_DAO
argument_list|()
operator|.
name|get
argument_list|(
name|getClassNumber
argument_list|(
name|idx
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|RelatedCourseInfo
name|owner
init|=
operator|new
name|RelatedCourseInfo
argument_list|()
decl_stmt|;
name|owner
operator|.
name|setOwner
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
return|return
name|owner
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setRelatedCourseInfos
parameter_list|(
name|CourseEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getRelatedCourses
argument_list|()
operator|==
literal|null
condition|)
name|event
operator|.
name|setRelatedCourses
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|getRelatedCourses
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|getSubjectArea
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|RelatedCourseInfo
name|course
init|=
name|getRelatedCourseInfo
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|!=
literal|null
condition|)
block|{
name|event
operator|.
name|getRelatedCourses
argument_list|()
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|course
operator|.
name|setEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|String
name|getRelatedCoursesTable
parameter_list|()
block|{
name|WebTable
name|table
init|=
operator|new
name|WebTable
argument_list|(
literal|3
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Object"
block|,
literal|"Type"
block|,
literal|"Title"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|iSubjectArea
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|RelatedCourseInfo
name|rci
init|=
name|getRelatedCourseInfo
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|rci
operator|==
literal|null
condition|)
continue|continue;
name|String
name|onclick
init|=
literal|null
decl_stmt|,
name|name
init|=
literal|null
decl_stmt|,
name|type
init|=
literal|null
decl_stmt|,
name|students
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|rci
operator|.
name|countStudents
argument_list|()
argument_list|)
decl_stmt|,
name|limit
init|=
comment|/*String.valueOf(rci.getLimit())*/
literal|"no limit"
decl_stmt|,
name|manager
init|=
literal|null
decl_stmt|,
name|assignment
init|=
literal|null
decl_stmt|,
name|title
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|rci
operator|.
name|getOwnerType
argument_list|()
condition|)
block|{
case|case
name|ExamOwner
operator|.
name|sOwnerTypeClass
case|:
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|rci
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
comment|//        if (clazz.isViewableBy(user))
comment|//            onclick = "onClick=\"document.location='classDetail.do?cid="+clazz.getUniqueId()+"';\"";
name|name
operator|=
name|rci
operator|.
name|getLabel
argument_list|()
expr_stmt|;
comment|//clazz.getClassLabel();
name|type
operator|=
literal|"Class"
expr_stmt|;
name|manager
operator|=
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getShortLabel
argument_list|()
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|assignment
operator|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|.
name|getPlacement
argument_list|()
operator|.
name|getLongName
argument_list|()
expr_stmt|;
name|title
operator|=
name|clazz
operator|.
name|getSchedulePrintNote
argument_list|()
expr_stmt|;
if|if
condition|(
name|title
operator|==
literal|null
operator|||
name|title
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|title
operator|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getTitle
argument_list|()
expr_stmt|;
break|break;
case|case
name|ExamOwner
operator|.
name|sOwnerTypeConfig
case|:
name|InstrOfferingConfig
name|config
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|rci
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
comment|//        if (config.isViewableBy(user))
comment|//            onclick = "onClick=\"document.location='instructionalOfferingDetail.do?io="+config.getInstructionalOffering().getUniqueId()+"';\"";;
name|name
operator|=
name|rci
operator|.
name|getLabel
argument_list|()
expr_stmt|;
comment|//config.getCourseName()+" ["+config.getName()+"]";
name|type
operator|=
literal|"Configuration"
expr_stmt|;
name|manager
operator|=
name|config
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getShortLabel
argument_list|()
expr_stmt|;
name|title
operator|=
name|config
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getTitle
argument_list|()
expr_stmt|;
break|break;
case|case
name|ExamOwner
operator|.
name|sOwnerTypeOffering
case|:
name|InstructionalOffering
name|offering
init|=
operator|(
name|InstructionalOffering
operator|)
name|rci
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
comment|//        if (offering.isViewableBy(user))
comment|//            onclick = "onClick=\"document.location='instructionalOfferingDetail.do?io="+offering.getUniqueId()+"';\"";;
name|name
operator|=
name|rci
operator|.
name|getLabel
argument_list|()
expr_stmt|;
comment|//offering.getCourseName();
name|type
operator|=
literal|"Offering"
expr_stmt|;
name|manager
operator|=
name|offering
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getShortLabel
argument_list|()
expr_stmt|;
name|title
operator|=
name|offering
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getTitle
argument_list|()
expr_stmt|;
break|break;
case|case
name|ExamOwner
operator|.
name|sOwnerTypeCourse
case|:
name|CourseOffering
name|course
init|=
operator|(
name|CourseOffering
operator|)
name|rci
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
comment|//       if (course.isViewableBy(user))
comment|//           onclick = "onClick=\"document.location='instructionalOfferingDetail.do?io="+course.getInstructionalOffering().getUniqueId()+"';\"";;
name|name
operator|=
name|rci
operator|.
name|getLabel
argument_list|()
expr_stmt|;
comment|//course.getCourseName();
name|type
operator|=
literal|"Course"
expr_stmt|;
name|manager
operator|=
name|course
operator|.
name|getDepartment
argument_list|()
operator|.
name|getShortLabel
argument_list|()
expr_stmt|;
name|title
operator|=
name|course
operator|.
name|getTitle
argument_list|()
expr_stmt|;
break|break;
block|}
name|table
operator|.
name|addLine
argument_list|(
name|onclick
argument_list|,
operator|new
name|String
index|[]
block|{
name|name
block|,
name|type
block|,
name|title
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|table
operator|.
name|getLines
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|table
operator|.
name|printTable
argument_list|()
operator|)
return|;
block|}
block|}
end_class

end_unit

