begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionErrors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|MeetingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * @author Zuzana Mullerova  */
end_comment

begin_class
specifier|public
class|class
name|EventRoomAvailabilityForm
extends|extends
name|EventAddForm
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|956757598845929764L
decl_stmt|;
comment|//data calculated
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Location
argument_list|>
name|iLocations
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Date
argument_list|,
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
argument_list|>
argument_list|>
name|iOverlappingMeetings
decl_stmt|;
comment|// meetings that are in conflict with desired times/dates
specifier|private
name|Set
argument_list|<
name|Long
argument_list|>
name|iStudentIds
init|=
literal|null
decl_stmt|;
comment|//data collected in this screen (form)
specifier|private
name|TreeSet
argument_list|<
name|DateLocation
argument_list|>
name|iDateLocations
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
specifier|public
name|ActionErrors
name|validate
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|ActionErrors
name|errors
init|=
operator|new
name|ActionErrors
argument_list|()
decl_stmt|;
if|if
condition|(
name|iDateLocations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"dateLocations"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"No meeting selected."
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|errors
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|super
operator|.
name|reset
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|iLocations
operator|=
literal|null
expr_stmt|;
name|iDateLocations
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|load
parameter_list|(
name|HttpSession
name|session
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|load
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|iLocations
operator|=
name|getPossibleLocations
argument_list|()
expr_stmt|;
if|if
condition|(
name|iLocations
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No room is matching your criteria."
argument_list|)
throw|;
name|iOverlappingMeetings
operator|=
name|getOverlappingMeetings
argument_list|(
name|iLocations
argument_list|,
name|getMeetingDates
argument_list|()
argument_list|,
name|getStartTime
argument_list|()
argument_list|,
name|getStopTime
argument_list|()
argument_list|)
expr_stmt|;
name|iDateLocations
operator|=
operator|(
name|TreeSet
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.DateLocations"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iDateLocations
operator|==
literal|null
condition|)
name|iDateLocations
operator|=
operator|new
name|TreeSet
argument_list|()
expr_stmt|;
name|iStudentIds
operator|=
operator|(
name|Set
argument_list|<
name|Long
argument_list|>
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.StudentIds"
argument_list|)
expr_stmt|;
block|}
comment|// collect date/location combinations selected by the user in this screen
specifier|public
name|void
name|loadData
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|iDateLocations
operator|.
name|clear
argument_list|()
expr_stmt|;
name|SimpleDateFormat
name|df2
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd"
argument_list|)
decl_stmt|;
for|for
control|(
name|Date
name|date
range|:
name|getMeetingDates
argument_list|()
control|)
block|{
for|for
control|(
name|Enumeration
argument_list|<
name|Location
argument_list|>
name|e
init|=
name|iLocations
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"1"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"x"
operator|+
name|df2
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"_"
operator|+
name|location
operator|.
name|getPermanentId
argument_list|()
argument_list|)
argument_list|)
condition|)
name|iDateLocations
operator|.
name|add
argument_list|(
operator|new
name|DateLocation
argument_list|(
name|date
argument_list|,
name|location
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|save
parameter_list|(
name|HttpSession
name|session
parameter_list|)
block|{
name|session
operator|.
name|setAttribute
argument_list|(
literal|"Event.DateLocations"
argument_list|,
name|iDateLocations
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"Event.MaxRooms"
argument_list|,
name|getMaxRooms
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// get events that have been already scheduled in the possible locations during requested times/dates
specifier|public
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Date
argument_list|,
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
argument_list|>
argument_list|>
name|getOverlappingMeetings
parameter_list|(
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Location
argument_list|>
name|locations
parameter_list|,
name|TreeSet
argument_list|<
name|Date
argument_list|>
name|meetingDates
parameter_list|,
name|int
name|startTime
parameter_list|,
name|int
name|stopTime
parameter_list|)
block|{
comment|// get meetings
name|String
name|locIds
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Long
name|permId
range|:
name|locations
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|locIds
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|locIds
operator|+=
literal|","
expr_stmt|;
name|locIds
operator|+=
name|permId
expr_stmt|;
block|}
name|String
name|dates
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|meetingDates
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|dates
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|dates
operator|+=
literal|","
expr_stmt|;
name|dates
operator|+=
literal|":md"
operator|+
name|idx
expr_stmt|;
block|}
name|String
name|query
init|=
literal|"Select m from Meeting m where "
operator|+
literal|"m.startPeriod<:stopTime and 	"
operator|+
literal|"m.stopPeriod>:startTime and "
operator|+
literal|"m.locationPermanentId in ("
operator|+
name|locIds
operator|+
literal|") and "
operator|+
literal|"m.meetingDate in ("
operator|+
name|dates
operator|+
literal|")"
decl_stmt|;
name|Query
name|hibQuery
init|=
operator|new
name|MeetingDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|hibQuery
operator|.
name|setInteger
argument_list|(
literal|"startTime"
argument_list|,
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|hibQuery
operator|.
name|setInteger
argument_list|(
literal|"stopTime"
argument_list|,
name|getStopTime
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Date
name|md
range|:
name|meetingDates
control|)
block|{
name|hibQuery
operator|.
name|setDate
argument_list|(
literal|"md"
operator|+
name|idx
argument_list|,
name|md
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|List
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibQuery
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
comment|// sort meetings by location and date
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Date
argument_list|,
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
argument_list|>
argument_list|>
name|locationDateMeetings
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Date
argument_list|,
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Meeting
name|meeting
range|:
name|meetings
control|)
block|{
name|Hashtable
argument_list|<
name|Date
argument_list|,
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
argument_list|>
name|dateMeetings
init|=
name|locationDateMeetings
operator|.
name|get
argument_list|(
name|meeting
operator|.
name|getLocationPermanentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dateMeetings
operator|==
literal|null
condition|)
block|{
name|dateMeetings
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|locationDateMeetings
operator|.
name|put
argument_list|(
name|meeting
operator|.
name|getLocationPermanentId
argument_list|()
argument_list|,
name|dateMeetings
argument_list|)
expr_stmt|;
block|}
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
name|myMeetings
init|=
name|dateMeetings
operator|.
name|get
argument_list|(
operator|new
name|Date
argument_list|(
name|meeting
operator|.
name|getMeetingDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|myMeetings
operator|==
literal|null
condition|)
block|{
name|myMeetings
operator|=
operator|new
name|TreeSet
argument_list|()
expr_stmt|;
name|dateMeetings
operator|.
name|put
argument_list|(
operator|new
name|Date
argument_list|(
name|meeting
operator|.
name|getMeetingDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|,
name|myMeetings
argument_list|)
expr_stmt|;
block|}
name|myMeetings
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
return|return
name|locationDateMeetings
return|;
block|}
comment|// return overlapping meetings for a specific date and location (to be displayed in the table)
specifier|public
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
name|getOverlappingMeetings
parameter_list|(
name|Location
name|location
parameter_list|,
name|Date
name|meetingDate
parameter_list|)
block|{
name|Hashtable
argument_list|<
name|Date
argument_list|,
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
argument_list|>
name|dateMeetings
init|=
name|iOverlappingMeetings
operator|.
name|get
argument_list|(
name|location
operator|.
name|getPermanentId
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|dateMeetings
operator|==
literal|null
condition|?
literal|null
else|:
name|dateMeetings
operator|.
name|get
argument_list|(
name|meetingDate
argument_list|)
operator|)
return|;
block|}
comment|// draw the table with locations on top and dates on the left
specifier|public
name|String
name|getAvailabilityTable
parameter_list|()
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
name|ret
operator|+=
literal|"<table border='1'>"
expr_stmt|;
name|int
name|maxRooms
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|maxRooms
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|getMaxRooms
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|TreeSet
argument_list|<
name|Location
argument_list|>
name|locations
init|=
operator|new
name|TreeSet
argument_list|<
name|Location
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|Location
argument_list|>
argument_list|()
block|{
comment|// sort locations first by number of available slots, then by name
specifier|public
name|int
name|compare
parameter_list|(
name|Location
name|l1
parameter_list|,
name|Location
name|l2
parameter_list|)
block|{
name|int
name|availableL1
init|=
literal|0
decl_stmt|;
name|int
name|availableL2
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Date
name|meetingDate
range|:
name|getMeetingDates
argument_list|()
control|)
block|{
if|if
condition|(
name|getOverlappingMeetings
argument_list|(
name|l1
argument_list|,
name|meetingDate
argument_list|)
operator|==
literal|null
condition|)
name|availableL1
operator|++
expr_stmt|;
if|if
condition|(
name|getOverlappingMeetings
argument_list|(
name|l2
argument_list|,
name|meetingDate
argument_list|)
operator|==
literal|null
condition|)
name|availableL2
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|availableL1
operator|<
name|availableL2
condition|)
return|return
literal|1
return|;
if|else if
condition|(
name|availableL1
operator|>
name|availableL2
condition|)
return|return
operator|-
literal|1
return|;
else|else
return|return
name|l1
operator|.
name|compareTo
argument_list|(
name|l2
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|Location
argument_list|>
name|e
init|=
name|iLocations
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
name|locations
operator|.
name|add
argument_list|(
name|e
operator|.
name|nextElement
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|maxRooms
operator|>
literal|0
operator|&&
name|locations
operator|.
name|size
argument_list|()
operator|>
name|maxRooms
condition|)
name|locations
operator|.
name|remove
argument_list|(
name|locations
operator|.
name|last
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|+=
literal|"<tr align='middle'><td></td>"
expr_stmt|;
name|String
name|jsLocations
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Location
name|location
range|:
name|locations
control|)
block|{
name|ret
operator|+=
literal|"<td onClick=\"tAll('"
operator|+
name|location
operator|.
name|getPermanentId
argument_list|()
operator|+
literal|"',false);\" "
operator|+
literal|"onMouseOver=\"this.style.cursor='hand';this.style.cursor='pointer';\">"
operator|+
literal|"<b>"
operator|+
name|location
operator|.
name|getLabelWithHint
argument_list|()
operator|+
literal|"</b><br>("
operator|+
name|location
operator|.
name|getCapacity
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|")<br><font size=\"-1\">"
operator|+
name|location
operator|.
name|getRoomTypeLabel
argument_list|()
operator|+
literal|"</font></td>"
expr_stmt|;
name|jsLocations
operator|+=
operator|(
name|jsLocations
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
literal|","
else|:
literal|""
operator|)
operator|+
literal|"'"
operator|+
name|location
operator|.
name|getPermanentId
argument_list|()
operator|+
literal|"'"
expr_stmt|;
block|}
name|ret
operator|+=
literal|"</tr>"
expr_stmt|;
name|String
name|jsDates
init|=
literal|""
decl_stmt|;
name|SimpleDateFormat
name|df1
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE, MMM d"
argument_list|)
decl_stmt|;
name|SimpleDateFormat
name|df2
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd"
argument_list|)
decl_stmt|;
for|for
control|(
name|Date
name|date
range|:
name|getMeetingDates
argument_list|()
control|)
block|{
name|jsDates
operator|+=
operator|(
name|jsDates
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
literal|","
else|:
literal|""
operator|)
operator|+
literal|"'"
operator|+
name|df2
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"'"
expr_stmt|;
name|Hashtable
argument_list|<
name|Event
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|conflicts
init|=
name|Event
operator|.
name|findStudentConflicts
argument_list|(
name|date
argument_list|,
name|getStartTime
argument_list|()
argument_list|,
name|getStopTime
argument_list|()
argument_list|,
name|iStudentIds
argument_list|)
decl_stmt|;
name|HashSet
argument_list|<
name|Long
argument_list|>
name|studentsInConflict
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|String
name|conflictsTitle
init|=
literal|""
decl_stmt|;
name|TreeSet
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Event
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
name|conflictEntries
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|Comparator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Event
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|Event
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|e1
parameter_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|Event
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|e2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|Double
operator|.
name|compare
argument_list|(
name|e1
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|e2
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|-
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getKey
argument_list|()
operator|.
name|getEventName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getKey
argument_list|()
operator|.
name|getEventName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|e1
operator|.
name|getKey
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getKey
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|conflictEntries
operator|.
name|addAll
argument_list|(
name|conflicts
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Event
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|entry
range|:
name|conflictEntries
control|)
block|{
name|studentsInConflict
operator|.
name|addAll
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|<
literal|3
condition|)
block|{
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
name|conflictsTitle
operator|+=
literal|"; "
expr_stmt|;
name|conflictsTitle
operator|+=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|"&times; "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getEventName
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|idx
operator|==
literal|3
condition|)
name|conflictsTitle
operator|+=
literal|";..."
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|ret
operator|+=
literal|"<tr><td align='center' title=\""
operator|+
name|conflictsTitle
operator|+
literal|"\"><b>"
operator|+
name|df1
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"</b>"
operator|+
operator|(
operator|!
name|studentsInConflict
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"<br><i>("
operator|+
name|studentsInConflict
operator|.
name|size
argument_list|()
operator|+
literal|" conflicts)</i>"
else|:
literal|""
operator|)
operator|+
literal|"</td>"
expr_stmt|;
for|for
control|(
name|Location
name|location
range|:
name|locations
control|)
block|{
name|boolean
name|selected
init|=
name|iDateLocations
operator|.
name|contains
argument_list|(
operator|new
name|DateLocation
argument_list|(
name|date
argument_list|,
name|location
argument_list|)
argument_list|)
decl_stmt|;
name|ret
operator|+=
literal|"<input type='hidden' name='x"
operator|+
name|df2
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"_"
operator|+
name|location
operator|.
name|getPermanentId
argument_list|()
operator|+
literal|"' id='x"
operator|+
name|df2
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"_"
operator|+
name|location
operator|.
name|getPermanentId
argument_list|()
operator|+
literal|"' value='"
operator|+
operator|(
name|selected
condition|?
literal|"1"
else|:
literal|"0"
operator|)
operator|+
literal|"'>"
expr_stmt|;
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
name|getOverlappingMeetings
argument_list|(
name|location
argument_list|,
name|date
argument_list|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|==
literal|null
operator|||
name|meetings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ret
operator|+=
literal|"<td style='background-color:"
operator|+
operator|(
name|selected
condition|?
literal|"yellow"
else|:
literal|"transparent"
operator|)
operator|+
literal|";' align='center' valign='top' id='td"
operator|+
name|df2
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"_"
operator|+
name|location
operator|.
name|getPermanentId
argument_list|()
operator|+
literal|"' "
operator|+
literal|"onClick=\"tClick('"
operator|+
name|df2
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"','"
operator|+
name|location
operator|.
name|getPermanentId
argument_list|()
operator|+
literal|"');\" "
operator|+
literal|"onMouseOver=\"tOver(this,'"
operator|+
name|df2
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"','"
operator|+
name|location
operator|.
name|getPermanentId
argument_list|()
operator|+
literal|"');\" "
operator|+
literal|"onMouseOut=\"tOut('"
operator|+
name|df2
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"','"
operator|+
name|location
operator|.
name|getPermanentId
argument_list|()
operator|+
literal|"');\">&nbsp;</td>"
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|+=
literal|"<td style='background-color:"
operator|+
operator|(
name|selected
condition|?
literal|"yellow"
else|:
literal|"rgb(200,200,200)"
operator|)
operator|+
literal|";' valign='top' align='center' id='td"
operator|+
name|df2
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"_"
operator|+
name|location
operator|.
name|getPermanentId
argument_list|()
operator|+
literal|"' "
expr_stmt|;
if|if
condition|(
name|isAdmin
argument_list|()
operator|||
operator|(
name|getManagingDepartments
argument_list|()
operator|!=
literal|null
operator|&&
name|location
operator|.
name|getControllingDepartment
argument_list|()
operator|!=
literal|null
operator|&&
name|getManagingDepartments
argument_list|()
operator|.
name|contains
argument_list|(
name|location
operator|.
name|getControllingDepartment
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|ret
operator|+=
literal|"onClick=\"tClick('"
operator|+
name|df2
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"','"
operator|+
name|location
operator|.
name|getPermanentId
argument_list|()
operator|+
literal|"');\" "
operator|+
literal|"onMouseOver=\"tOver(this,'"
operator|+
name|df2
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"','"
operator|+
name|location
operator|.
name|getPermanentId
argument_list|()
operator|+
literal|"');\" "
operator|+
literal|"onMouseOut=\"tOut('"
operator|+
name|df2
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"','"
operator|+
name|location
operator|.
name|getPermanentId
argument_list|()
operator|+
literal|"');\" "
expr_stmt|;
block|}
name|ret
operator|+=
literal|">"
expr_stmt|;
name|idx
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Meeting
name|meeting
range|:
name|meetings
control|)
block|{
if|if
condition|(
name|idx
operator|>
literal|2
condition|)
block|{
name|ret
operator|+=
literal|"<br>..."
expr_stmt|;
break|break;
block|}
name|ret
operator|+=
operator|(
name|idx
operator|>
literal|0
condition|?
literal|"<br>"
else|:
literal|""
operator|)
operator|+
literal|"<span title='"
operator|+
name|meeting
operator|.
name|getTimeLabel
argument_list|()
operator|+
literal|"'>"
operator|+
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventName
argument_list|()
operator|+
literal|"</span>"
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|ret
operator|+=
literal|"</td>"
expr_stmt|;
block|}
block|}
name|ret
operator|+=
literal|"</tr>"
expr_stmt|;
block|}
name|ret
operator|+=
literal|"</table>"
expr_stmt|;
name|ret
operator|+=
literal|"<script language='javascript'>"
expr_stmt|;
name|ret
operator|+=
literal|"var tDates=["
operator|+
name|jsDates
operator|+
literal|"];"
expr_stmt|;
name|ret
operator|+=
literal|"var tLocations=["
operator|+
name|jsLocations
operator|+
literal|"];"
expr_stmt|;
name|ret
operator|+=
literal|"</script>"
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Location
argument_list|>
name|getLocations
parameter_list|()
block|{
return|return
name|iLocations
return|;
block|}
specifier|public
name|void
name|setLocations
parameter_list|(
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Location
argument_list|>
name|locations
parameter_list|)
block|{
name|iLocations
operator|=
name|locations
expr_stmt|;
block|}
specifier|public
name|String
name|getTimeString
parameter_list|()
block|{
return|return
operator|(
name|getStartTime
argument_list|()
operator|==
literal|0
operator|&&
name|getStopTime
argument_list|()
operator|==
name|Constants
operator|.
name|SLOTS_PER_DAY
condition|?
literal|"All Day"
else|:
name|Constants
operator|.
name|toTime
argument_list|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|getStartTime
argument_list|()
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
argument_list|)
operator|+
literal|" - "
operator|+
name|Constants
operator|.
name|toTime
argument_list|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|getStopTime
argument_list|()
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
argument_list|)
operator|)
return|;
block|}
comment|// a class for storing selected date/location combinations
specifier|public
specifier|static
class|class
name|DateLocation
implements|implements
name|Serializable
implements|,
name|Comparable
argument_list|<
name|DateLocation
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1866259259759963493L
decl_stmt|;
specifier|private
name|Date
name|iDate
decl_stmt|;
specifier|private
name|Long
name|iLocation
decl_stmt|;
comment|//permanentId
specifier|private
name|Long
name|iLocUniqueId
decl_stmt|;
specifier|private
name|String
name|iLocationLabel
decl_stmt|;
specifier|private
name|SimpleDateFormat
name|sdf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE MM/dd, yyyy"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
specifier|private
name|int
name|iStartTime
init|=
operator|-
literal|1
decl_stmt|,
name|iStopTime
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|DateLocation
parameter_list|(
name|Date
name|date
parameter_list|,
name|Location
name|location
parameter_list|)
block|{
name|this
argument_list|(
name|date
argument_list|,
name|location
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DateLocation
parameter_list|(
name|Date
name|date
parameter_list|,
name|Location
name|location
parameter_list|,
name|int
name|startTime
parameter_list|,
name|int
name|stopTime
parameter_list|)
block|{
name|iDate
operator|=
name|date
expr_stmt|;
name|iLocation
operator|=
name|location
operator|.
name|getPermanentId
argument_list|()
expr_stmt|;
name|iLocUniqueId
operator|=
name|location
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iLocationLabel
operator|=
name|location
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|iStartTime
operator|=
name|startTime
expr_stmt|;
name|iStopTime
operator|=
name|stopTime
expr_stmt|;
block|}
specifier|public
name|Date
name|getDate
parameter_list|()
block|{
return|return
name|iDate
return|;
block|}
specifier|public
name|String
name|getDateLabel
parameter_list|()
block|{
return|return
name|sdf
operator|.
name|format
argument_list|(
name|iDate
argument_list|)
return|;
block|}
specifier|public
name|Long
name|getLocation
parameter_list|()
block|{
return|return
name|iLocation
return|;
block|}
specifier|public
name|Long
name|getLocUniqueId
parameter_list|()
block|{
return|return
name|iLocUniqueId
return|;
block|}
specifier|public
name|String
name|getLocationLabel
parameter_list|()
block|{
return|return
name|iLocationLabel
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getDate
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|^
name|getLocation
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|DateLocation
operator|)
condition|)
return|return
literal|false
return|;
name|DateLocation
name|dl
init|=
operator|(
name|DateLocation
operator|)
name|o
decl_stmt|;
return|return
name|getDate
argument_list|()
operator|.
name|equals
argument_list|(
name|dl
operator|.
name|getDate
argument_list|()
argument_list|)
operator|&&
name|getLocation
argument_list|()
operator|.
name|equals
argument_list|(
name|dl
operator|.
name|getLocation
argument_list|()
argument_list|)
operator|&&
name|getStartTime
argument_list|()
operator|==
name|dl
operator|.
name|getStartTime
argument_list|()
operator|&&
name|getStopTime
argument_list|()
operator|==
name|dl
operator|.
name|getStopTime
argument_list|()
return|;
block|}
specifier|public
name|int
name|getStartTime
parameter_list|()
block|{
return|return
name|iStartTime
return|;
block|}
specifier|public
name|void
name|setStartTime
parameter_list|(
name|int
name|startTime
parameter_list|)
block|{
name|iStartTime
operator|=
name|startTime
expr_stmt|;
block|}
specifier|public
name|int
name|getStopTime
parameter_list|()
block|{
return|return
name|iStopTime
return|;
block|}
specifier|public
name|void
name|setStopTime
parameter_list|(
name|int
name|stopTime
parameter_list|)
block|{
name|iStopTime
operator|=
name|stopTime
expr_stmt|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|DateLocation
name|dl
parameter_list|)
block|{
name|int
name|cmp
init|=
name|iDate
operator|.
name|compareTo
argument_list|(
name|dl
operator|.
name|getDate
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|Double
operator|.
name|compare
argument_list|(
name|iStartTime
argument_list|,
name|dl
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|iLocationLabel
operator|.
name|compareTo
argument_list|(
name|dl
operator|.
name|getLocationLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|iLocation
operator|.
name|compareTo
argument_list|(
name|dl
operator|.
name|getLocation
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

