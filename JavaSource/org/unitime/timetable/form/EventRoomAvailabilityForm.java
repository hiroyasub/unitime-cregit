begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|LocationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|MeetingDAO
import|;
end_import

begin_comment
comment|/**  * @author Zuzana Mullerova  */
end_comment

begin_class
specifier|public
class|class
name|EventRoomAvailabilityForm
extends|extends
name|ActionForm
block|{
comment|// data loaded from Add Event
comment|//	private String iLocationType;
specifier|private
name|int
name|iStartTime
decl_stmt|;
comment|// start time from Add Event
specifier|private
name|int
name|iStopTime
decl_stmt|;
comment|// stop time from Add Event
specifier|private
name|TreeSet
argument_list|<
name|Date
argument_list|>
name|iMeetingDates
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
comment|//meeting dates selected in Add Event
specifier|private
name|Long
name|iBuildingId
decl_stmt|;
comment|// building selected in Add Event
specifier|private
name|String
name|iRoomNumber
decl_stmt|;
comment|// room number entered in Add Event (can include wild cards such as "1*")
specifier|private
name|String
name|iMinCapacity
decl_stmt|;
comment|// minimum required room capacity entered in Add Event
specifier|private
name|String
name|iMaxCapacity
decl_stmt|;
comment|// maximum required room capacity entered in Add Event
specifier|private
name|String
name|iOp
decl_stmt|;
specifier|private
name|Long
name|iSessionId
decl_stmt|;
specifier|private
name|boolean
name|iLookAtNearLocations
decl_stmt|;
comment|//data calculated
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Location
argument_list|>
name|iLocations
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Date
argument_list|,
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
argument_list|>
argument_list|>
name|iOverlappingMeetings
decl_stmt|;
comment|// meetings that are in conflict with desired times/dates
specifier|private
name|String
name|iStartTimeString
decl_stmt|;
specifier|private
name|String
name|iStopTimeString
decl_stmt|;
comment|//data collected in this screen (form)
specifier|private
name|TreeSet
argument_list|<
name|DateLocation
argument_list|>
name|iDateLocations
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
comment|//other
name|boolean
name|iIsAdmin
init|=
literal|false
decl_stmt|;
specifier|public
name|void
name|reset
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|iLocations
operator|=
literal|null
expr_stmt|;
name|iOp
operator|=
literal|null
expr_stmt|;
name|iStartTime
operator|=
literal|90
expr_stmt|;
name|iStopTime
operator|=
literal|210
expr_stmt|;
comment|//		iLocationType = null;
name|iMeetingDates
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iMinCapacity
operator|=
literal|null
expr_stmt|;
name|iMaxCapacity
operator|=
literal|null
expr_stmt|;
name|iDateLocations
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iSessionId
operator|=
literal|null
expr_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|iIsAdmin
operator|=
name|user
operator|.
name|isAdmin
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|load
parameter_list|(
name|HttpSession
name|session
parameter_list|)
throws|throws
name|Exception
block|{
name|iMeetingDates
operator|=
operator|(
name|TreeSet
argument_list|<
name|Date
argument_list|>
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.MeetingDates"
argument_list|)
expr_stmt|;
name|iStartTime
operator|=
operator|(
name|Integer
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.StartTime"
argument_list|)
expr_stmt|;
name|iStopTime
operator|=
operator|(
name|Integer
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.StopTime"
argument_list|)
expr_stmt|;
comment|//		iLocationType = (String) session.getAttribute("Event.LocationType");
name|iMeetingDates
operator|=
operator|(
name|TreeSet
argument_list|<
name|Date
argument_list|>
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.MeetingDates"
argument_list|)
expr_stmt|;
name|iMinCapacity
operator|=
operator|(
name|String
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.MinCapacity"
argument_list|)
expr_stmt|;
name|iMaxCapacity
operator|=
operator|(
name|String
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.MaxCapacity"
argument_list|)
expr_stmt|;
name|iBuildingId
operator|=
operator|(
name|Long
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.BuildingId"
argument_list|)
expr_stmt|;
name|iRoomNumber
operator|=
operator|(
name|String
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.RoomNumber"
argument_list|)
expr_stmt|;
name|iLookAtNearLocations
operator|=
operator|(
operator|(
name|Boolean
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.LookAtNearLocations"
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
name|iLocations
operator|=
name|getPossibleLocations
argument_list|()
expr_stmt|;
if|if
condition|(
name|iLocations
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No room is matching your criteria."
argument_list|)
throw|;
name|iOverlappingMeetings
operator|=
name|getOverlappingMeetings
argument_list|(
name|iLocations
argument_list|,
name|iMeetingDates
argument_list|,
name|iStartTime
argument_list|,
name|iStopTime
argument_list|)
expr_stmt|;
name|iDateLocations
operator|=
operator|(
name|TreeSet
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.DateLocations"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iDateLocations
operator|==
literal|null
condition|)
name|iDateLocations
operator|=
operator|new
name|TreeSet
argument_list|()
expr_stmt|;
name|iSessionId
operator|=
operator|(
name|Long
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.SessionId"
argument_list|)
expr_stmt|;
block|}
comment|// collect date/location combinations selected by the user in this screen
specifier|public
name|void
name|loadData
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|iDateLocations
operator|.
name|clear
argument_list|()
expr_stmt|;
name|SimpleDateFormat
name|df2
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd"
argument_list|)
decl_stmt|;
for|for
control|(
name|Date
name|date
range|:
name|iMeetingDates
control|)
block|{
for|for
control|(
name|Enumeration
argument_list|<
name|Location
argument_list|>
name|e
init|=
name|iLocations
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"1"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"x"
operator|+
name|df2
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"_"
operator|+
name|location
operator|.
name|getPermanentId
argument_list|()
argument_list|)
argument_list|)
condition|)
name|iDateLocations
operator|.
name|add
argument_list|(
operator|new
name|DateLocation
argument_list|(
name|date
argument_list|,
name|location
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|save
parameter_list|(
name|HttpSession
name|session
parameter_list|)
block|{
name|session
operator|.
name|setAttribute
argument_list|(
literal|"Event.DateLocations"
argument_list|,
name|iDateLocations
argument_list|)
expr_stmt|;
block|}
comment|// apply parameters from the Add Event screen to get possible locations for the event
specifier|public
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Location
argument_list|>
name|getPossibleLocations
parameter_list|()
block|{
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Location
argument_list|>
name|locations
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|String
name|query
decl_stmt|;
if|if
condition|(
name|iLookAtNearLocations
condition|)
block|{
name|query
operator|=
literal|"select r from Room r, Building b where b.uniqueId = :buildingId and "
operator|+
literal|"(r.building=b or ((((r.coordinateX - b.coordinateX)*(r.coordinateX - b.coordinateX)) +"
operator|+
literal|"((r.coordinateY - b.coordinateY)*(r.coordinateY - b.coordinateY)))"
operator|+
literal|"< 67*67))"
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
literal|"select r from Room r where r.building.uniqueId = :buildingId"
expr_stmt|;
block|}
if|if
condition|(
name|iMinCapacity
operator|!=
literal|null
operator|&&
name|iMinCapacity
operator|!=
literal|""
condition|)
block|{
name|query
operator|+=
literal|" and r.capacity>= :minCapacity"
expr_stmt|;
block|}
if|if
condition|(
name|iMaxCapacity
operator|!=
literal|null
operator|&&
name|iMaxCapacity
operator|!=
literal|""
condition|)
block|{
name|query
operator|+=
literal|" and r.capacity<= :maxCapacity"
expr_stmt|;
block|}
if|if
condition|(
name|iRoomNumber
operator|!=
literal|null
operator|&&
name|iRoomNumber
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|query
operator|+=
literal|" and r.roomNumber like (:roomNumber)"
expr_stmt|;
block|}
name|Query
name|hibQuery
init|=
operator|new
name|LocationDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|hibQuery
operator|.
name|setLong
argument_list|(
literal|"buildingId"
argument_list|,
name|iBuildingId
argument_list|)
expr_stmt|;
if|if
condition|(
name|iMinCapacity
operator|!=
literal|null
operator|&&
name|iMinCapacity
operator|!=
literal|""
condition|)
block|{
name|hibQuery
operator|.
name|setInteger
argument_list|(
literal|"minCapacity"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|iMinCapacity
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iMaxCapacity
operator|!=
literal|null
operator|&&
name|iMaxCapacity
operator|!=
literal|""
condition|)
block|{
name|hibQuery
operator|.
name|setInteger
argument_list|(
literal|"maxCapacity"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|iMaxCapacity
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iRoomNumber
operator|!=
literal|null
operator|&&
name|iRoomNumber
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|hibQuery
operator|.
name|setString
argument_list|(
literal|"roomNumber"
argument_list|,
name|iRoomNumber
operator|.
name|replaceAll
argument_list|(
literal|"\\*"
argument_list|,
literal|"%"
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|hibQuery
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|location
operator|.
name|getPermanentId
argument_list|()
operator|!=
literal|null
condition|)
name|locations
operator|.
name|put
argument_list|(
name|location
operator|.
name|getPermanentId
argument_list|()
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
return|return
name|locations
return|;
block|}
comment|// get events that have been already scheduled in the possible locations during requested times/dates
specifier|public
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Date
argument_list|,
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
argument_list|>
argument_list|>
name|getOverlappingMeetings
parameter_list|(
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Location
argument_list|>
name|locations
parameter_list|,
name|TreeSet
argument_list|<
name|Date
argument_list|>
name|meetingDates
parameter_list|,
name|int
name|startTime
parameter_list|,
name|int
name|stopTime
parameter_list|)
block|{
comment|// get meetings
name|String
name|locIds
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Long
name|permId
range|:
name|locations
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|locIds
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|locIds
operator|+=
literal|","
expr_stmt|;
name|locIds
operator|+=
name|permId
expr_stmt|;
block|}
name|String
name|dates
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|meetingDates
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|dates
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|dates
operator|+=
literal|","
expr_stmt|;
name|dates
operator|+=
literal|":md"
operator|+
name|idx
expr_stmt|;
block|}
name|String
name|query
init|=
literal|"Select m from Meeting m where "
operator|+
literal|"m.startPeriod<=:stopTime and 	"
operator|+
literal|"m.stopPeriod>=:startTime and "
operator|+
literal|"m.locationPermanentId in ("
operator|+
name|locIds
operator|+
literal|") and "
operator|+
literal|"m.meetingDate in ("
operator|+
name|dates
operator|+
literal|")"
decl_stmt|;
name|Query
name|hibQuery
init|=
operator|new
name|MeetingDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|hibQuery
operator|.
name|setInteger
argument_list|(
literal|"startTime"
argument_list|,
name|iStartTime
argument_list|)
expr_stmt|;
name|hibQuery
operator|.
name|setInteger
argument_list|(
literal|"stopTime"
argument_list|,
name|iStopTime
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Date
name|md
range|:
name|meetingDates
control|)
block|{
name|hibQuery
operator|.
name|setDate
argument_list|(
literal|"md"
operator|+
name|idx
argument_list|,
name|md
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|List
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibQuery
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
comment|// sort meetings by location and date
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Date
argument_list|,
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
argument_list|>
argument_list|>
name|locationDateMeetings
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Date
argument_list|,
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Meeting
name|meeting
range|:
name|meetings
control|)
block|{
name|Hashtable
argument_list|<
name|Date
argument_list|,
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
argument_list|>
name|dateMeetings
init|=
name|locationDateMeetings
operator|.
name|get
argument_list|(
name|meeting
operator|.
name|getLocationPermanentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dateMeetings
operator|==
literal|null
condition|)
block|{
name|dateMeetings
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|locationDateMeetings
operator|.
name|put
argument_list|(
name|meeting
operator|.
name|getLocationPermanentId
argument_list|()
argument_list|,
name|dateMeetings
argument_list|)
expr_stmt|;
block|}
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
name|myMeetings
init|=
name|dateMeetings
operator|.
name|get
argument_list|(
operator|new
name|Date
argument_list|(
name|meeting
operator|.
name|getMeetingDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|myMeetings
operator|==
literal|null
condition|)
block|{
name|myMeetings
operator|=
operator|new
name|TreeSet
argument_list|()
expr_stmt|;
name|dateMeetings
operator|.
name|put
argument_list|(
operator|new
name|Date
argument_list|(
name|meeting
operator|.
name|getMeetingDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|,
name|myMeetings
argument_list|)
expr_stmt|;
block|}
name|myMeetings
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
return|return
name|locationDateMeetings
return|;
block|}
comment|// return overlapping meetings for a specific date and location (to be displayed in the table)
specifier|public
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
name|getOverlappingMeetings
parameter_list|(
name|Location
name|location
parameter_list|,
name|Date
name|meetingDate
parameter_list|)
block|{
name|Hashtable
argument_list|<
name|Date
argument_list|,
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
argument_list|>
name|dateMeetings
init|=
name|iOverlappingMeetings
operator|.
name|get
argument_list|(
name|location
operator|.
name|getPermanentId
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|dateMeetings
operator|==
literal|null
condition|?
literal|null
else|:
name|dateMeetings
operator|.
name|get
argument_list|(
name|meetingDate
argument_list|)
operator|)
return|;
block|}
comment|// draw the table with locations on top and dates on the left
specifier|public
name|String
name|getAvailabilityTable
parameter_list|()
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
name|ret
operator|+=
literal|"<table border='1'>"
expr_stmt|;
name|TreeSet
argument_list|<
name|Location
argument_list|>
name|locations
init|=
operator|new
name|TreeSet
argument_list|<
name|Location
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|Location
argument_list|>
argument_list|()
block|{
comment|// sort locations first by number of available slots, then by name
specifier|public
name|int
name|compare
parameter_list|(
name|Location
name|l1
parameter_list|,
name|Location
name|l2
parameter_list|)
block|{
name|int
name|availableL1
init|=
literal|0
decl_stmt|;
name|int
name|availableL2
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Date
name|meetingDate
range|:
name|iMeetingDates
control|)
block|{
if|if
condition|(
name|getOverlappingMeetings
argument_list|(
name|l1
argument_list|,
name|meetingDate
argument_list|)
operator|==
literal|null
condition|)
name|availableL1
operator|++
expr_stmt|;
if|if
condition|(
name|getOverlappingMeetings
argument_list|(
name|l2
argument_list|,
name|meetingDate
argument_list|)
operator|==
literal|null
condition|)
name|availableL2
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|availableL1
operator|<
name|availableL2
condition|)
return|return
literal|1
return|;
if|else if
condition|(
name|availableL1
operator|>
name|availableL2
condition|)
return|return
operator|-
literal|1
return|;
else|else
return|return
name|l1
operator|.
name|compareTo
argument_list|(
name|l2
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|Location
argument_list|>
name|e
init|=
name|iLocations
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
name|locations
operator|.
name|add
argument_list|(
name|e
operator|.
name|nextElement
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|+=
literal|"<tr><td></td>"
expr_stmt|;
name|String
name|jsLocations
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Location
name|location
range|:
name|locations
control|)
block|{
name|ret
operator|+=
literal|"<th onClick=\"tAll('"
operator|+
name|location
operator|.
name|getPermanentId
argument_list|()
operator|+
literal|"',false);\" onMouseOver=\"this.style.cursor='hand';this.style.cursor='pointer';\">"
operator|+
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|"</th>"
expr_stmt|;
name|jsLocations
operator|+=
operator|(
name|jsLocations
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
literal|","
else|:
literal|""
operator|)
operator|+
literal|"'"
operator|+
name|location
operator|.
name|getPermanentId
argument_list|()
operator|+
literal|"'"
expr_stmt|;
block|}
name|ret
operator|+=
literal|"</tr>"
expr_stmt|;
name|String
name|jsDates
init|=
literal|""
decl_stmt|;
name|SimpleDateFormat
name|df1
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE, MMM dd"
argument_list|)
decl_stmt|;
name|SimpleDateFormat
name|df2
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd"
argument_list|)
decl_stmt|;
for|for
control|(
name|Date
name|date
range|:
name|iMeetingDates
control|)
block|{
name|jsDates
operator|+=
operator|(
name|jsDates
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
literal|","
else|:
literal|""
operator|)
operator|+
literal|"'"
operator|+
name|df2
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"'"
expr_stmt|;
name|ret
operator|+=
literal|"<tr><th align='left'>"
operator|+
name|df1
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"</th>"
expr_stmt|;
for|for
control|(
name|Location
name|location
range|:
name|locations
control|)
block|{
name|boolean
name|selected
init|=
name|iDateLocations
operator|.
name|contains
argument_list|(
operator|new
name|DateLocation
argument_list|(
name|date
argument_list|,
name|location
argument_list|)
argument_list|)
decl_stmt|;
name|ret
operator|+=
literal|"<input type='hidden' name='x"
operator|+
name|df2
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"_"
operator|+
name|location
operator|.
name|getPermanentId
argument_list|()
operator|+
literal|"' id='x"
operator|+
name|df2
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"_"
operator|+
name|location
operator|.
name|getPermanentId
argument_list|()
operator|+
literal|"' value='"
operator|+
operator|(
name|selected
condition|?
literal|"1"
else|:
literal|"0"
operator|)
operator|+
literal|"'>"
expr_stmt|;
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
name|getOverlappingMeetings
argument_list|(
name|location
argument_list|,
name|date
argument_list|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|==
literal|null
operator|||
name|meetings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ret
operator|+=
literal|"<td style='background-color:"
operator|+
operator|(
name|selected
condition|?
literal|"yellow"
else|:
literal|"transparent"
operator|)
operator|+
literal|";' align='center' valign='top' id='td"
operator|+
name|df2
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"_"
operator|+
name|location
operator|.
name|getPermanentId
argument_list|()
operator|+
literal|"' "
operator|+
literal|"onClick=\"tClick('"
operator|+
name|df2
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"','"
operator|+
name|location
operator|.
name|getPermanentId
argument_list|()
operator|+
literal|"');\" "
operator|+
literal|"onMouseOver=\"tOver(this,'"
operator|+
name|df2
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"','"
operator|+
name|location
operator|.
name|getPermanentId
argument_list|()
operator|+
literal|"');\" "
operator|+
literal|"onMouseOut=\"tOut('"
operator|+
name|df2
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"','"
operator|+
name|location
operator|.
name|getPermanentId
argument_list|()
operator|+
literal|"');\" "
operator|+
literal|">&nbsp;</td>"
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|+=
literal|"<td style='background-color:"
operator|+
operator|(
name|selected
condition|?
literal|"yellow"
else|:
literal|"rgb(200,200,200)"
operator|)
operator|+
literal|";' valign='top' align='center' id='td"
operator|+
name|df2
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"_"
operator|+
name|location
operator|.
name|getPermanentId
argument_list|()
operator|+
literal|"' "
expr_stmt|;
if|if
condition|(
name|iIsAdmin
condition|)
block|{
name|ret
operator|+=
literal|"onClick=\"tClick('"
operator|+
name|df2
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"','"
operator|+
name|location
operator|.
name|getPermanentId
argument_list|()
operator|+
literal|"');\" "
operator|+
literal|"onMouseOver=\"tOver(this,'"
operator|+
name|df2
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"','"
operator|+
name|location
operator|.
name|getPermanentId
argument_list|()
operator|+
literal|"');\" "
operator|+
literal|"onMouseOut=\"tOut('"
operator|+
name|df2
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"','"
operator|+
name|location
operator|.
name|getPermanentId
argument_list|()
operator|+
literal|"');\" "
expr_stmt|;
block|}
name|ret
operator|+=
literal|">"
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Meeting
name|meeting
range|:
name|meetings
control|)
block|{
if|if
condition|(
name|idx
operator|>
literal|2
condition|)
block|{
name|ret
operator|+=
literal|"<br>..."
expr_stmt|;
break|break;
block|}
name|ret
operator|+=
operator|(
name|idx
operator|>
literal|0
condition|?
literal|"<br>"
else|:
literal|""
operator|)
operator|+
literal|"<span title='"
operator|+
name|meeting
operator|.
name|getTimeLabel
argument_list|()
operator|+
literal|"'>"
operator|+
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventName
argument_list|()
operator|+
literal|"</span>"
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|ret
operator|+=
literal|"</td>"
expr_stmt|;
block|}
block|}
name|ret
operator|+=
literal|"</tr>"
expr_stmt|;
block|}
name|ret
operator|+=
literal|"</table>"
expr_stmt|;
name|ret
operator|+=
literal|"<script language='javascript'>"
expr_stmt|;
name|ret
operator|+=
literal|"var tDates=["
operator|+
name|jsDates
operator|+
literal|"];"
expr_stmt|;
name|ret
operator|+=
literal|"var tLocations=["
operator|+
name|jsLocations
operator|+
literal|"];"
expr_stmt|;
name|ret
operator|+=
literal|"</script>"
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Location
argument_list|>
name|getLocations
parameter_list|()
block|{
return|return
name|iLocations
return|;
block|}
specifier|public
name|void
name|setLocations
parameter_list|(
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Location
argument_list|>
name|locations
parameter_list|)
block|{
name|iLocations
operator|=
name|locations
expr_stmt|;
block|}
specifier|public
name|int
name|getStartTime
parameter_list|()
block|{
return|return
name|iStartTime
return|;
block|}
specifier|public
name|void
name|setStartTime
parameter_list|(
name|int
name|startTime
parameter_list|)
block|{
name|iStartTime
operator|=
name|startTime
expr_stmt|;
block|}
specifier|public
name|int
name|getStopTime
parameter_list|()
block|{
return|return
name|iStopTime
return|;
block|}
specifier|public
name|void
name|setStopTime
parameter_list|(
name|int
name|stopTime
parameter_list|)
block|{
name|iStopTime
operator|=
name|stopTime
expr_stmt|;
block|}
specifier|public
name|String
name|getOp
parameter_list|()
block|{
return|return
name|iOp
return|;
block|}
specifier|public
name|void
name|setOp
parameter_list|(
name|String
name|op
parameter_list|)
block|{
name|iOp
operator|=
name|op
expr_stmt|;
block|}
specifier|public
name|String
name|getTimeString
parameter_list|(
name|int
name|time
parameter_list|)
block|{
name|int
name|hour
init|=
operator|(
name|time
operator|/
literal|12
operator|)
operator|%
literal|12
decl_stmt|;
name|int
name|minute
init|=
name|time
operator|%
literal|12
operator|*
literal|5
decl_stmt|;
name|String
name|ampm
init|=
operator|(
name|time
operator|/
literal|144
operator|==
literal|0
condition|?
literal|"am"
else|:
literal|"pm"
operator|)
decl_stmt|;
return|return
name|hour
operator|+
literal|":"
operator|+
operator|(
name|minute
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|minute
operator|+
literal|" "
operator|+
name|ampm
return|;
block|}
specifier|public
name|String
name|getStartTimeString
parameter_list|()
block|{
return|return
name|getTimeString
argument_list|(
name|iStartTime
argument_list|)
return|;
block|}
specifier|public
name|String
name|getStopTimeString
parameter_list|()
block|{
return|return
name|getTimeString
argument_list|(
name|iStopTime
argument_list|)
return|;
block|}
comment|// a class for storing selected date/location combinations
specifier|public
specifier|static
class|class
name|DateLocation
implements|implements
name|Serializable
implements|,
name|Comparable
argument_list|<
name|DateLocation
argument_list|>
block|{
specifier|private
name|Date
name|iDate
decl_stmt|;
specifier|private
name|Long
name|iLocation
decl_stmt|;
comment|//permanentId
specifier|private
name|String
name|iLocationLabel
decl_stmt|;
specifier|private
name|SimpleDateFormat
name|sdf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE MM/dd, yyyy"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
specifier|public
name|DateLocation
parameter_list|(
name|Date
name|date
parameter_list|,
name|Location
name|location
parameter_list|)
block|{
name|iDate
operator|=
name|date
expr_stmt|;
name|iLocation
operator|=
name|location
operator|.
name|getPermanentId
argument_list|()
expr_stmt|;
name|iLocationLabel
operator|=
name|location
operator|.
name|getLabel
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Date
name|getDate
parameter_list|()
block|{
return|return
name|iDate
return|;
block|}
specifier|public
name|String
name|getDateLabel
parameter_list|()
block|{
return|return
name|sdf
operator|.
name|format
argument_list|(
name|iDate
argument_list|)
return|;
block|}
specifier|public
name|Long
name|getLocation
parameter_list|()
block|{
return|return
name|iLocation
return|;
block|}
specifier|public
name|String
name|getLocationLabel
parameter_list|()
block|{
return|return
name|iLocationLabel
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getDate
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|^
name|getLocation
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|DateLocation
operator|)
condition|)
return|return
literal|false
return|;
name|DateLocation
name|dl
init|=
operator|(
name|DateLocation
operator|)
name|o
decl_stmt|;
return|return
name|getDate
argument_list|()
operator|.
name|equals
argument_list|(
name|dl
operator|.
name|getDate
argument_list|()
argument_list|)
operator|&&
name|getLocation
argument_list|()
operator|.
name|equals
argument_list|(
name|dl
operator|.
name|getLocation
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|DateLocation
name|dl
parameter_list|)
block|{
name|int
name|cmp
init|=
name|iDate
operator|.
name|compareTo
argument_list|(
name|dl
operator|.
name|getDate
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|iLocationLabel
operator|.
name|compareTo
argument_list|(
name|dl
operator|.
name|getLocationLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|iLocation
operator|.
name|compareTo
argument_list|(
name|dl
operator|.
name|getLocation
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

