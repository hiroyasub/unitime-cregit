begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionErrors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|upload
operator|.
name|FormFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_comment
comment|/**   * MyEclipse Struts  * Creation date: 01-24-2007  *   * XDoclet definition:  * @struts.form name="dataImportForm"  */
end_comment

begin_class
specifier|public
class|class
name|DataImportForm
extends|extends
name|ActionForm
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|7165669008085313647L
decl_stmt|;
specifier|private
name|FormFile
name|iFile
decl_stmt|;
specifier|private
name|String
name|iOp
decl_stmt|;
specifier|private
name|String
name|iExport
decl_stmt|;
specifier|private
name|boolean
name|iEmail
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|iAddr
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|ExportType
block|{
name|COURSES
argument_list|(
literal|"offerings"
argument_list|,
literal|"Course Offerings"
argument_list|,
literal|"tmtbl.export.timetable"
argument_list|,
literal|"false"
argument_list|,
literal|"tmtbl.export.exam.type"
argument_list|,
literal|"none"
argument_list|)
block|,
name|COURSES_WITH_TIME
argument_list|(
literal|"offerings"
argument_list|,
literal|"Course Offerings (including course timetable)"
argument_list|,
literal|"tmtbl.export.timetable"
argument_list|,
literal|"true"
argument_list|,
literal|"tmtbl.export.exam.type"
argument_list|,
literal|"none"
argument_list|)
block|,
name|COURSES_WITH_EXAMS
argument_list|(
literal|"offerings"
argument_list|,
literal|"Course Offerings (including exams)"
argument_list|,
literal|"tmtbl.export.timetable"
argument_list|,
literal|"false"
argument_list|,
literal|"tmtbl.export.exam.type"
argument_list|,
literal|"all"
argument_list|)
block|,
name|COURSES_ALL
argument_list|(
literal|"offerings"
argument_list|,
literal|"Course Offerings (including course timetable and exams)"
argument_list|,
literal|"tmtbl.export.timetable"
argument_list|,
literal|"true"
argument_list|,
literal|"tmtbl.export.exam.type"
argument_list|,
literal|"all"
argument_list|)
block|,
name|TIMETABLE
argument_list|(
literal|"timetable"
argument_list|,
literal|"Course Timetable"
argument_list|)
block|,
name|EXAMS
argument_list|(
literal|"exams"
argument_list|,
literal|"Examinations"
argument_list|,
literal|"tmtbl.export.exam"
argument_list|,
literal|"true"
argument_list|,
literal|"tmtbl.export.exam.type"
argument_list|,
literal|"all"
argument_list|)
block|,
name|EXAMS_FINAL
argument_list|(
literal|"exams"
argument_list|,
literal|"Examinations (only finals)"
argument_list|,
literal|"tmtbl.export.exam"
argument_list|,
literal|"true"
argument_list|,
literal|"tmtbl.export.exam.type"
argument_list|,
literal|"final"
argument_list|)
block|,
name|EXAMS_MIDTERM
argument_list|(
literal|"exams"
argument_list|,
literal|"Examinations (only midterm)"
argument_list|,
literal|"tmtbl.export.exam"
argument_list|,
literal|"true"
argument_list|,
literal|"tmtbl.export.exam.type"
argument_list|,
literal|"midterm"
argument_list|)
block|,
name|CURRICULA
argument_list|(
literal|"curricula"
argument_list|,
literal|"Curricula"
argument_list|)
block|,
name|STUDENT_ENRL
argument_list|(
literal|"studentEnrollments"
argument_list|,
literal|"Student class enrollments"
argument_list|)
block|,
name|STUDENTS
argument_list|(
literal|"students"
argument_list|,
literal|"Students"
argument_list|)
block|,
name|SESSION
argument_list|(
literal|"session"
argument_list|,
literal|"Academic Session"
argument_list|)
block|,     	;
specifier|private
name|String
name|iType
decl_stmt|,
name|iLabel
decl_stmt|;
specifier|private
name|String
index|[]
name|iOptions
decl_stmt|;
name|ExportType
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|label
parameter_list|,
name|String
modifier|...
name|options
parameter_list|)
block|{
name|iType
operator|=
name|type
expr_stmt|;
name|iLabel
operator|=
name|label
expr_stmt|;
name|iOptions
operator|=
name|options
expr_stmt|;
block|}
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|iType
return|;
block|}
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
name|iLabel
return|;
block|}
specifier|public
name|void
name|setOptions
parameter_list|(
name|Properties
name|config
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iOptions
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
name|config
operator|.
name|put
argument_list|(
name|iOptions
index|[
name|i
index|]
argument_list|,
name|iOptions
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ActionErrors
name|validate
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|ActionErrors
name|errors
init|=
operator|new
name|ActionErrors
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"Import"
operator|.
name|equals
argument_list|(
name|iOp
argument_list|)
operator|&&
operator|(
name|iFile
operator|==
literal|null
operator|||
name|iFile
operator|.
name|getFileSize
argument_list|()
operator|<=
literal|0
operator|)
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"name"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.required"
argument_list|,
literal|"File"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Export"
operator|.
name|equals
argument_list|(
name|iOp
argument_list|)
operator|&&
name|getExportType
argument_list|()
operator|==
literal|null
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"export"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Nothing to export"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|errors
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|iFile
operator|=
literal|null
expr_stmt|;
name|iExport
operator|=
literal|null
expr_stmt|;
name|iEmail
operator|=
literal|false
expr_stmt|;
name|iAddr
operator|=
literal|null
expr_stmt|;
name|TimetableManager
name|manager
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|manager
operator|!=
literal|null
operator|&&
name|manager
operator|.
name|getEmailAddress
argument_list|()
operator|!=
literal|null
condition|)
name|setAddress
argument_list|(
name|manager
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FormFile
name|getFile
parameter_list|()
block|{
return|return
name|iFile
return|;
block|}
specifier|public
name|void
name|setFile
parameter_list|(
name|FormFile
name|file
parameter_list|)
block|{
name|iFile
operator|=
name|file
expr_stmt|;
block|}
specifier|public
name|String
name|getOp
parameter_list|()
block|{
return|return
name|iOp
return|;
block|}
specifier|public
name|void
name|setOp
parameter_list|(
name|String
name|op
parameter_list|)
block|{
name|iOp
operator|=
name|op
expr_stmt|;
block|}
specifier|public
name|String
name|getExport
parameter_list|()
block|{
return|return
name|iExport
return|;
block|}
specifier|public
name|void
name|setExport
parameter_list|(
name|String
name|export
parameter_list|)
block|{
name|iExport
operator|=
name|export
expr_stmt|;
block|}
specifier|public
name|boolean
name|getEmail
parameter_list|()
block|{
return|return
name|iEmail
return|;
block|}
specifier|public
name|void
name|setEmail
parameter_list|(
name|boolean
name|email
parameter_list|)
block|{
name|iEmail
operator|=
name|email
expr_stmt|;
block|}
specifier|public
name|String
name|getAddress
parameter_list|()
block|{
return|return
name|iAddr
return|;
block|}
specifier|public
name|void
name|setAddress
parameter_list|(
name|String
name|addr
parameter_list|)
block|{
name|iAddr
operator|=
name|addr
expr_stmt|;
block|}
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|DataImportForm
name|form
init|=
operator|new
name|DataImportForm
argument_list|()
decl_stmt|;
name|form
operator|.
name|iFile
operator|=
name|iFile
expr_stmt|;
name|form
operator|.
name|iOp
operator|=
name|iOp
expr_stmt|;
name|form
operator|.
name|iExport
operator|=
name|iExport
expr_stmt|;
name|form
operator|.
name|iEmail
operator|=
name|iEmail
expr_stmt|;
name|form
operator|.
name|iAddr
operator|=
name|iAddr
expr_stmt|;
return|return
name|form
return|;
block|}
specifier|public
name|List
argument_list|<
name|ListItem
argument_list|>
name|getExportTypes
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|ListItem
argument_list|>
name|items
init|=
operator|new
name|ArrayList
argument_list|<
name|ListItem
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ExportType
name|t
range|:
name|ExportType
operator|.
name|values
argument_list|()
control|)
name|items
operator|.
name|add
argument_list|(
operator|new
name|ListItem
argument_list|(
name|t
operator|.
name|name
argument_list|()
argument_list|,
name|t
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|items
return|;
block|}
specifier|public
name|ExportType
name|getExportType
parameter_list|()
block|{
if|if
condition|(
name|getExport
argument_list|()
operator|==
literal|null
operator|||
name|getExport
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
name|ExportType
operator|.
name|valueOf
argument_list|(
name|getExport
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|ListItem
block|{
name|String
name|iValue
decl_stmt|,
name|iText
decl_stmt|;
specifier|public
name|ListItem
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|iValue
operator|=
name|value
expr_stmt|;
name|iText
operator|=
name|text
expr_stmt|;
block|}
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|iValue
return|;
block|}
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
name|iText
return|;
block|}
block|}
block|}
end_class

end_unit

