begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionErrors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameterDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverPredefinedSetting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolverParameterDefDAO
import|;
end_import

begin_comment
comment|/**   * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SolverSettingsForm
extends|extends
name|ActionForm
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|9205033432561871308L
decl_stmt|;
specifier|private
name|String
name|op
decl_stmt|;
specifier|private
name|Long
name|uniqueId
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|String
name|description
decl_stmt|;
specifier|private
name|String
name|appearance
decl_stmt|;
specifier|private
name|Map
name|params
decl_stmt|;
specifier|private
name|Map
name|useDefaults
decl_stmt|;
specifier|public
name|ActionErrors
name|validate
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|ActionErrors
name|errors
init|=
operator|new
name|ActionErrors
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"name"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.required"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
else|else
block|{
if|if
condition|(
literal|"Add New"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|SolverPredefinedSetting
name|set
init|=
name|SolverPredefinedSetting
operator|.
name|findByName
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|!=
literal|null
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"name"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.exists"
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|description
operator|==
literal|null
operator|||
name|description
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"description"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.required"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|appearance
operator|==
literal|null
operator|||
name|appearance
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"appearance"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.required"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|params
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|parm
init|=
operator|(
name|Long
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|val
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Boolean
name|useDefault
init|=
operator|(
name|Boolean
operator|)
name|useDefaults
operator|.
name|get
argument_list|(
name|parm
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|useDefault
operator|.
name|booleanValue
argument_list|()
operator|&&
operator|(
name|val
operator|==
literal|null
operator|||
name|val
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"parameter["
operator|+
name|parm
operator|+
literal|"]"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.required"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|errors
return|;
block|}
comment|/**  	 * Method reset 	 * @param mapping 	 * @param request 	 */
specifier|public
name|void
name|reset
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|name
operator|=
literal|""
expr_stmt|;
name|description
operator|=
literal|""
expr_stmt|;
name|op
operator|=
literal|null
expr_stmt|;
name|uniqueId
operator|=
literal|null
expr_stmt|;
name|params
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|useDefaults
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|(
operator|new
name|SolverParameterDefDAO
argument_list|()
operator|)
operator|.
name|findAll
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SolverParameterDef
name|def
init|=
operator|(
name|SolverParameterDef
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|def
operator|.
name|isVisible
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
continue|continue;
if|if
condition|(
literal|"boolean"
operator|.
name|equals
argument_list|(
name|def
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
name|params
operator|.
name|put
argument_list|(
name|def
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
else|else
name|params
operator|.
name|put
argument_list|(
name|def
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|useDefaults
operator|.
name|put
argument_list|(
name|def
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**  	 * Method reset 	 * @param mapping 	 * @param request 	 */
specifier|public
name|void
name|loadDefaults
parameter_list|()
block|{
for|for
control|(
name|Iterator
name|i
init|=
operator|(
operator|new
name|SolverParameterDefDAO
argument_list|()
operator|)
operator|.
name|findAll
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SolverParameterDef
name|def
init|=
operator|(
name|SolverParameterDef
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|def
operator|.
name|isVisible
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
continue|continue;
name|params
operator|.
name|put
argument_list|(
name|def
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|def
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|useDefaults
operator|.
name|put
argument_list|(
name|def
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|loadDefaults
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
operator|(
operator|new
name|SolverParameterDefDAO
argument_list|()
operator|)
operator|.
name|findAll
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SolverParameterDef
name|def
init|=
operator|(
name|SolverParameterDef
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|def
operator|.
name|isVisible
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
continue|continue;
name|params
operator|.
name|put
argument_list|(
name|def
operator|.
name|getUniqueId
argument_list|()
argument_list|,
operator|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"parameter["
operator|+
name|def
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"]"
argument_list|)
operator|==
literal|null
condition|?
name|def
operator|.
name|getDefault
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"parameter["
operator|+
name|def
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"]"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|useDefaults
operator|.
name|put
argument_list|(
name|def
operator|.
name|getUniqueId
argument_list|()
argument_list|,
operator|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"useDefault["
operator|+
name|def
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"]"
argument_list|)
operator|==
literal|null
operator|||
literal|"false"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"useDefault["
operator|+
name|def
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"]"
argument_list|)
argument_list|)
condition|?
name|Boolean
operator|.
name|FALSE
else|:
name|Boolean
operator|.
name|TRUE
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getOp
parameter_list|()
block|{
return|return
name|op
return|;
block|}
specifier|public
name|void
name|setOp
parameter_list|(
name|String
name|op
parameter_list|)
block|{
name|this
operator|.
name|op
operator|=
name|op
expr_stmt|;
block|}
specifier|public
name|Long
name|getUniqueId
parameter_list|()
block|{
return|return
name|uniqueId
return|;
block|}
specifier|public
name|void
name|setUniqueId
parameter_list|(
name|Long
name|uniqueId
parameter_list|)
block|{
name|this
operator|.
name|uniqueId
operator|=
name|uniqueId
expr_stmt|;
block|}
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
specifier|public
name|void
name|setDescription
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
specifier|public
name|String
name|getAppearance
parameter_list|()
block|{
return|return
name|appearance
return|;
block|}
specifier|public
name|void
name|setAppearance
parameter_list|(
name|String
name|appearance
parameter_list|)
block|{
name|this
operator|.
name|appearance
operator|=
name|appearance
expr_stmt|;
block|}
specifier|public
name|int
name|getAppearanceIdx
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SolverPredefinedSetting
operator|.
name|sAppearances
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|SolverPredefinedSetting
operator|.
name|sAppearances
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|appearance
argument_list|)
condition|)
return|return
name|i
return|;
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|void
name|setAppearanceIdx
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
name|appearance
operator|=
literal|""
expr_stmt|;
name|appearance
operator|=
name|SolverPredefinedSetting
operator|.
name|sAppearances
index|[
name|idx
index|]
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|Boolean
name|getUseDefault
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|useDefaults
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
specifier|public
name|void
name|setUseDefault
parameter_list|(
name|Long
name|id
parameter_list|,
name|Boolean
name|useDefault
parameter_list|)
block|{
name|useDefaults
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|useDefault
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|getUseDefault
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|getUseDefault
argument_list|(
operator|new
name|Long
argument_list|(
name|id
argument_list|)
argument_list|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
specifier|public
name|void
name|setUseDefault
parameter_list|(
name|int
name|id
parameter_list|,
name|boolean
name|useDefault
parameter_list|)
block|{
name|setUseDefault
argument_list|(
operator|new
name|Long
argument_list|(
name|id
argument_list|)
argument_list|,
operator|new
name|Boolean
argument_list|(
name|useDefault
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getParameter
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
return|return
operator|(
name|String
operator|)
name|params
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
specifier|public
name|void
name|setParameter
parameter_list|(
name|Long
name|id
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|params
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getParameter
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|getParameter
argument_list|(
operator|new
name|Long
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|setParameter
parameter_list|(
name|int
name|id
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|setParameter
argument_list|(
operator|new
name|Long
argument_list|(
name|id
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
index|[]
name|getAppearances
parameter_list|()
block|{
return|return
name|SolverPredefinedSetting
operator|.
name|sAppearances
return|;
block|}
specifier|public
name|Collection
name|getEnum
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|Vector
name|options
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|StringTokenizer
name|stk
init|=
operator|new
name|StringTokenizer
argument_list|(
name|type
argument_list|,
literal|","
argument_list|)
decl_stmt|;
while|while
condition|(
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|)
name|options
operator|.
name|add
argument_list|(
name|stk
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|options
return|;
block|}
block|}
end_class

end_unit

