begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
package|;
end_package

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|CourseMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
operator|.
name|UniTimeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ItypeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ItypeDescDAO
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ItypeDescEditForm
implements|implements
name|UniTimeForm
block|{
specifier|protected
specifier|static
name|CourseMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|CourseMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Integer
name|iUniqueId
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iId
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iReference
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iName
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iAbbreviation
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iType
init|=
literal|1
decl_stmt|;
specifier|private
name|boolean
name|iOrganized
init|=
literal|false
decl_stmt|;
specifier|private
name|Integer
name|iParent
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|validate
parameter_list|(
name|UniTimeAction
name|action
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|iAbbreviation
operator|==
literal|null
operator|||
name|iAbbreviation
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|action
operator|.
name|addFieldError
argument_list|(
literal|"form.abbreviation"
argument_list|,
name|MSG
operator|.
name|errorRequiredField
argument_list|(
name|MSG
operator|.
name|fieldAbbreviation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iName
operator|==
literal|null
operator|||
name|iName
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|action
operator|.
name|addFieldError
argument_list|(
literal|"form.name"
argument_list|,
name|MSG
operator|.
name|errorRequiredField
argument_list|(
name|MSG
operator|.
name|fieldName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|iId
operator|==
literal|null
operator|||
name|iId
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|action
operator|.
name|addFieldError
argument_list|(
literal|"form.id"
argument_list|,
name|MSG
operator|.
name|errorRequiredField
argument_list|(
name|MSG
operator|.
name|fieldIType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Integer
name|id
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|iId
argument_list|)
decl_stmt|;
name|ItypeDesc
name|itype
init|=
operator|new
name|ItypeDescDAO
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|itype
operator|!=
literal|null
operator|&&
operator|(
name|iUniqueId
operator|==
literal|null
operator|||
name|iUniqueId
operator|<
literal|0
operator|||
name|itype
operator|.
name|equals
argument_list|(
name|iUniqueId
argument_list|)
operator|)
condition|)
name|action
operator|.
name|addFieldError
argument_list|(
literal|"form.id"
argument_list|,
name|MSG
operator|.
name|errorAlreadyExists
argument_list|(
name|iId
argument_list|)
argument_list|)
expr_stmt|;
name|itype
operator|=
operator|(
name|ItypeDesc
operator|)
name|ItypeDescDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from ItypeDesc x where x.abbv = :abbv and x.id != :id"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"abbv"
argument_list|,
name|iAbbreviation
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
expr_stmt|;
if|if
condition|(
name|itype
operator|!=
literal|null
condition|)
name|action
operator|.
name|addFieldError
argument_list|(
literal|"abbreviation"
argument_list|,
name|MSG
operator|.
name|errorAlreadyExists
argument_list|(
name|iAbbreviation
argument_list|)
argument_list|)
expr_stmt|;
name|itype
operator|=
operator|(
name|ItypeDesc
operator|)
name|ItypeDescDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from ItypeDesc x where x.desc = :name and x.id != :id"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|iName
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
expr_stmt|;
if|if
condition|(
name|itype
operator|!=
literal|null
condition|)
name|action
operator|.
name|addFieldError
argument_list|(
literal|"form.name"
argument_list|,
name|MSG
operator|.
name|errorAlreadyExists
argument_list|(
name|iName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|action
operator|.
name|addFieldError
argument_list|(
literal|"form.id"
argument_list|,
name|MSG
operator|.
name|errorNotNumber
argument_list|(
name|iId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|action
operator|.
name|addFieldError
argument_list|(
literal|"form.id"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|iId
operator|=
literal|null
expr_stmt|;
name|iUniqueId
operator|=
operator|-
literal|1
expr_stmt|;
name|iAbbreviation
operator|=
literal|null
expr_stmt|;
name|iReference
operator|=
literal|null
expr_stmt|;
name|iName
operator|=
literal|null
expr_stmt|;
name|iType
operator|=
literal|1
expr_stmt|;
name|iOrganized
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|Integer
name|getUniqueId
parameter_list|()
block|{
return|return
name|iUniqueId
return|;
block|}
specifier|public
name|void
name|setUniqueId
parameter_list|(
name|Integer
name|uniqueId
parameter_list|)
block|{
name|iUniqueId
operator|=
name|uniqueId
expr_stmt|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|iId
return|;
block|}
specifier|public
name|void
name|setId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|iId
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|String
name|getAbbreviation
parameter_list|()
block|{
return|return
name|iAbbreviation
return|;
block|}
specifier|public
name|void
name|setAbbreviation
parameter_list|(
name|String
name|abbreviation
parameter_list|)
block|{
name|iAbbreviation
operator|=
name|abbreviation
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getReference
parameter_list|()
block|{
return|return
name|iReference
return|;
block|}
specifier|public
name|void
name|setReference
parameter_list|(
name|String
name|reference
parameter_list|)
block|{
name|iReference
operator|=
name|reference
expr_stmt|;
block|}
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|ItypeDesc
operator|.
name|sBasicTypes
index|[
name|iType
index|]
return|;
block|}
specifier|public
name|void
name|setType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ItypeDesc
operator|.
name|sBasicTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|ItypeDesc
operator|.
name|sBasicTypes
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
name|iType
operator|=
name|i
expr_stmt|;
block|}
specifier|public
name|int
name|getBasicType
parameter_list|()
block|{
return|return
name|iType
return|;
block|}
specifier|public
name|void
name|setBasicType
parameter_list|(
name|int
name|type
parameter_list|)
block|{
name|iType
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|String
index|[]
name|getTypes
parameter_list|()
block|{
return|return
name|ItypeDesc
operator|.
name|sBasicTypes
return|;
block|}
specifier|public
name|boolean
name|getOrganized
parameter_list|()
block|{
return|return
name|iOrganized
return|;
block|}
specifier|public
name|void
name|setOrganized
parameter_list|(
name|boolean
name|organized
parameter_list|)
block|{
name|iOrganized
operator|=
name|organized
expr_stmt|;
block|}
specifier|public
name|Integer
name|getParent
parameter_list|()
block|{
return|return
name|iParent
return|;
block|}
specifier|public
name|void
name|setParent
parameter_list|(
name|Integer
name|parent
parameter_list|)
block|{
name|iParent
operator|=
name|parent
expr_stmt|;
block|}
specifier|public
name|void
name|load
parameter_list|(
name|ItypeDesc
name|itype
parameter_list|)
block|{
name|setId
argument_list|(
name|itype
operator|.
name|getItype
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|setUniqueId
argument_list|(
name|itype
operator|.
name|getItype
argument_list|()
argument_list|)
expr_stmt|;
name|setAbbreviation
argument_list|(
name|itype
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|setName
argument_list|(
name|itype
operator|.
name|getDesc
argument_list|()
argument_list|)
expr_stmt|;
name|setReference
argument_list|(
name|itype
operator|.
name|getSis_ref
argument_list|()
argument_list|)
expr_stmt|;
name|setBasicType
argument_list|(
name|itype
operator|.
name|getBasic
argument_list|()
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|setParent
argument_list|(
name|itype
operator|.
name|getParent
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|itype
operator|.
name|getParent
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
expr_stmt|;
name|setOrganized
argument_list|(
name|itype
operator|.
name|isOrganized
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|saveOrUpdate
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
throws|throws
name|Exception
block|{
name|ItypeDesc
name|itype
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|itype
operator|=
operator|new
name|ItypeDescDAO
argument_list|()
operator|.
name|get
argument_list|(
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|itype
operator|==
literal|null
condition|)
name|itype
operator|=
operator|new
name|ItypeDesc
argument_list|()
expr_stmt|;
name|itype
operator|.
name|setItype
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|itype
operator|.
name|setAbbv
argument_list|(
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|itype
operator|.
name|setDesc
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|itype
operator|.
name|setSis_ref
argument_list|(
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|itype
operator|.
name|setBasic
argument_list|(
name|getBasicType
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|itype
operator|.
name|setParent
argument_list|(
name|getParent
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|ItypeDescDAO
argument_list|()
operator|.
name|get
argument_list|(
name|getParent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|itype
operator|.
name|setOrganized
argument_list|(
name|getOrganized
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|itype
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|delete
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|ItypeDesc
name|itype
init|=
operator|new
name|ItypeDescDAO
argument_list|()
operator|.
name|get
argument_list|(
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|itype
operator|!=
literal|null
condition|)
name|hibSession
operator|.
name|delete
argument_list|(
name|itype
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

