begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionErrors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePatternDays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePatternTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TimePatternDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|RequiredTimeTable
import|;
end_import

begin_comment
comment|/**   * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|TimePatternEditForm
extends|extends
name|ActionForm
block|{
specifier|private
name|String
name|iOp
decl_stmt|;
specifier|private
name|Long
name|iUniqueId
decl_stmt|;
specifier|private
name|String
name|iType
decl_stmt|;
specifier|private
name|String
name|iNrMtgs
decl_stmt|;
specifier|private
name|String
name|iMinPerMtg
decl_stmt|;
specifier|private
name|String
name|iSlotsPerMtg
decl_stmt|;
specifier|private
name|String
name|iDayCodes
decl_stmt|;
specifier|private
name|String
name|iStartTimes
decl_stmt|;
specifier|private
name|boolean
name|iEditable
decl_stmt|;
specifier|private
name|boolean
name|iVisible
decl_stmt|;
specifier|private
name|String
name|iName
decl_stmt|;
specifier|private
name|Vector
name|iDepartmentIds
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
specifier|private
name|Long
name|iDepartmentId
decl_stmt|;
specifier|private
name|String
name|iBreakTime
decl_stmt|;
specifier|public
name|ActionErrors
name|validate
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|ActionErrors
name|errors
init|=
operator|new
name|ActionErrors
argument_list|()
decl_stmt|;
if|if
condition|(
name|iName
operator|==
literal|null
operator|||
name|iName
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"name"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.required"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
else|else
block|{
try|try
block|{
name|TimePattern
name|pat
init|=
name|TimePattern
operator|.
name|findByName
argument_list|(
name|request
argument_list|,
name|iName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pat
operator|!=
literal|null
operator|&&
operator|!
name|pat
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|iUniqueId
argument_list|)
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"name"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.exists"
argument_list|,
name|iName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"name"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
if|if
condition|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|getNrMtgs
argument_list|()
argument_list|)
operator|<=
literal|0
operator|&&
name|getTypeInt
argument_list|()
operator|!=
name|TimePattern
operator|.
name|sTypeExactTime
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"nrMtgs"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.required"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"nrMtgs"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.required"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|getMinPerMtg
argument_list|()
argument_list|)
operator|<=
literal|0
operator|&&
name|getTypeInt
argument_list|()
operator|!=
name|TimePattern
operator|.
name|sTypeExactTime
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"minPerMtg"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.required"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"minPerMtg"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.required"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|getSlotsPerMtg
argument_list|()
argument_list|)
operator|<=
literal|0
operator|&&
name|getTypeInt
argument_list|()
operator|!=
name|TimePattern
operator|.
name|sTypeExactTime
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"slotsPerMtg"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.required"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"slotsPerMtg"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.required"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getTypeInt
argument_list|()
operator|<
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"type"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.required"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|str2dayCodes
argument_list|(
name|iDayCodes
argument_list|,
literal|"\n, "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"dayCodes"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|str2startSlots
argument_list|(
name|iStartTimes
argument_list|,
literal|"\n, "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"startTimes"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getTypeInt
argument_list|()
operator|!=
name|TimePattern
operator|.
name|sTypeExtended
operator|&&
name|getTypeInt
argument_list|()
operator|!=
name|TimePattern
operator|.
name|sTypeExactTime
operator|&&
operator|!
name|iDepartmentIds
operator|.
name|isEmpty
argument_list|()
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"type"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Only extended or exact time pattern can contain relations with departments."
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|errors
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|iOp
operator|=
literal|null
expr_stmt|;
name|iUniqueId
operator|=
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|iType
operator|=
name|TimePattern
operator|.
name|sTypes
index|[
literal|0
index|]
expr_stmt|;
name|iNrMtgs
operator|=
literal|""
expr_stmt|;
name|iMinPerMtg
operator|=
literal|""
expr_stmt|;
name|iSlotsPerMtg
operator|=
literal|""
expr_stmt|;
name|iDayCodes
operator|=
literal|""
expr_stmt|;
name|iStartTimes
operator|=
literal|""
expr_stmt|;
name|iEditable
operator|=
literal|false
expr_stmt|;
name|iVisible
operator|=
literal|false
expr_stmt|;
name|iName
operator|=
literal|""
expr_stmt|;
name|iBreakTime
operator|=
literal|""
expr_stmt|;
name|iDepartmentId
operator|=
literal|null
expr_stmt|;
name|iDepartmentIds
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|load
parameter_list|(
name|TimePattern
name|tp
parameter_list|,
name|Long
name|sessionId
parameter_list|)
block|{
if|if
condition|(
name|tp
operator|==
literal|null
condition|)
block|{
name|reset
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|iOp
operator|=
literal|"Save"
expr_stmt|;
name|iVisible
operator|=
literal|true
expr_stmt|;
name|iEditable
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|setName
argument_list|(
name|tp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|setVisible
argument_list|(
name|tp
operator|.
name|isVisible
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|setEditable
argument_list|(
name|tp
operator|.
name|isEditable
argument_list|()
argument_list|)
expr_stmt|;
name|setTypeInt
argument_list|(
name|tp
operator|.
name|getType
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|setMinPerMtg
argument_list|(
name|tp
operator|.
name|getMinPerMtg
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|setNrMtgs
argument_list|(
name|tp
operator|.
name|getNrMeetings
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|setBreakTime
argument_list|(
name|tp
operator|.
name|getBreakTime
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|setSlotsPerMtg
argument_list|(
name|tp
operator|.
name|getSlotsPerMtg
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|setUniqueId
argument_list|(
name|tp
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|setDayCodes
argument_list|(
name|dayCodes2str
argument_list|(
name|tp
operator|.
name|getDays
argument_list|()
argument_list|,
operator|(
name|getEditable
argument_list|()
condition|?
literal|"\n"
else|:
literal|", "
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|setStartTimes
argument_list|(
name|startSlots2str
argument_list|(
name|tp
operator|.
name|getTimes
argument_list|()
argument_list|,
operator|(
name|getEditable
argument_list|()
condition|?
literal|"\n"
else|:
literal|", "
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|iDepartmentIds
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|tp
operator|.
name|getDepartments
argument_list|(
name|sessionId
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|iDepartmentIds
operator|.
name|add
argument_list|(
name|d
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iOp
operator|=
literal|"Update"
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|update
parameter_list|(
name|TimePattern
name|tp
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Long
name|sessionId
parameter_list|)
throws|throws
name|Exception
block|{
name|tp
operator|.
name|setName
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setVisible
argument_list|(
operator|new
name|Boolean
argument_list|(
name|getVisible
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setType
argument_list|(
operator|new
name|Integer
argument_list|(
name|getTypeInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setBreakTime
argument_list|(
operator|new
name|Integer
argument_list|(
name|getBreakTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|getEditable
argument_list|()
condition|)
block|{
name|tp
operator|.
name|setMinPerMtg
argument_list|(
operator|new
name|Integer
argument_list|(
name|getMinPerMtg
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setNrMeetings
argument_list|(
operator|new
name|Integer
argument_list|(
name|getNrMtgs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setSlotsPerMtg
argument_list|(
operator|new
name|Integer
argument_list|(
name|getSlotsPerMtg
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|tp
operator|.
name|getTimes
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePatternTime
name|t
init|=
operator|(
name|TimePatternTime
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|tp
operator|.
name|getDays
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePatternDays
name|d
init|=
operator|(
name|TimePatternDays
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|tp
operator|.
name|setTimes
argument_list|(
name|str2startSlots
argument_list|(
name|getStartTimes
argument_list|()
argument_list|,
literal|"\n, "
argument_list|)
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setDays
argument_list|(
name|str2dayCodes
argument_list|(
name|getDayCodes
argument_list|()
argument_list|,
literal|"\n, "
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|tp
operator|.
name|getTimes
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePatternTime
name|t
init|=
operator|(
name|TimePatternTime
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|tp
operator|.
name|getDays
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePatternDays
name|d
init|=
operator|(
name|TimePatternDays
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|DepartmentStatusType
name|statusType
init|=
name|DepartmentStatusType
operator|.
name|findByRef
argument_list|(
literal|"initial"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tp
operator|.
name|getSession
argument_list|()
operator|!=
literal|null
operator|&&
name|tp
operator|.
name|getSession
argument_list|()
operator|.
name|getStatusType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|statusType
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|List
name|l
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from TimePref tp where tp.timePattern.uniqueId = :tpid"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"tpid"
argument_list|,
name|tp
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|l
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|tpref
init|=
operator|(
name|TimePref
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|tpref
operator|.
name|setPreference
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|tpref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|HashSet
name|oldDepts
init|=
operator|new
name|HashSet
argument_list|(
name|tp
operator|.
name|getDepartments
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|iDepartmentIds
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Long
name|departmentId
init|=
operator|(
name|Long
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Department
name|d
init|=
operator|(
operator|new
name|DepartmentDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|departmentId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|oldDepts
operator|.
name|remove
argument_list|(
name|d
argument_list|)
condition|)
block|{
comment|//not changed -> do nothing
block|}
else|else
block|{
name|tp
operator|.
name|getDepartments
argument_list|()
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|.
name|getTimePatterns
argument_list|()
operator|.
name|add
argument_list|(
name|tp
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|oldDepts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|.
name|getSessionId
argument_list|()
operator|.
name|equals
argument_list|(
name|sessionId
argument_list|)
condition|)
continue|continue;
name|tp
operator|.
name|getDepartments
argument_list|()
operator|.
name|remove
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|.
name|getTimePatterns
argument_list|()
operator|.
name|remove
argument_list|(
name|tp
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|tp
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TimePattern
name|create
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
throws|throws
name|Exception
block|{
name|TimePattern
name|tp
init|=
operator|new
name|TimePattern
argument_list|()
decl_stmt|;
name|tp
operator|.
name|setName
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setVisible
argument_list|(
operator|new
name|Boolean
argument_list|(
name|getVisible
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setType
argument_list|(
operator|new
name|Integer
argument_list|(
name|getTypeInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setMinPerMtg
argument_list|(
operator|new
name|Integer
argument_list|(
name|getMinPerMtg
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setNrMeetings
argument_list|(
operator|new
name|Integer
argument_list|(
name|getNrMtgs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setBreakTime
argument_list|(
operator|new
name|Integer
argument_list|(
name|getBreakTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setSlotsPerMtg
argument_list|(
operator|new
name|Integer
argument_list|(
name|getSlotsPerMtg
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setTimes
argument_list|(
name|str2startSlots
argument_list|(
name|getStartTimes
argument_list|()
argument_list|,
literal|"\n, "
argument_list|)
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setDays
argument_list|(
name|str2dayCodes
argument_list|(
name|getDayCodes
argument_list|()
argument_list|,
literal|"\n, "
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
condition|)
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|tp
operator|.
name|setSession
argument_list|(
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|tp
operator|.
name|getTimes
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePatternTime
name|t
init|=
operator|(
name|TimePatternTime
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|tp
operator|.
name|getDays
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePatternDays
name|d
init|=
operator|(
name|TimePatternDays
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|HashSet
name|newDepts
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|iDepartmentIds
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Long
name|departmentId
init|=
operator|(
name|Long
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Department
name|d
init|=
operator|(
operator|new
name|DepartmentDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|departmentId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|==
literal|null
condition|)
continue|continue;
name|newDepts
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|tp
operator|.
name|setDepartments
argument_list|(
name|newDepts
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|tp
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|newDepts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|d
operator|.
name|getTimePatterns
argument_list|()
operator|.
name|add
argument_list|(
name|tp
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|setUniqueId
argument_list|(
name|tp
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tp
return|;
block|}
specifier|public
name|TimePattern
name|saveOrUpdate
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Long
name|sessionId
parameter_list|)
throws|throws
name|Exception
block|{
name|TimePattern
name|tp
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getUniqueId
argument_list|()
operator|.
name|intValue
argument_list|()
operator|>=
literal|0
condition|)
name|tp
operator|=
operator|(
operator|new
name|TimePatternDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tp
operator|==
literal|null
condition|)
block|{
name|tp
operator|=
name|create
argument_list|(
name|request
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|request
argument_list|,
name|tp
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|TIME_PATTERN_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|CREATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|update
argument_list|(
name|tp
argument_list|,
name|hibSession
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|request
argument_list|,
name|tp
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|TIME_PATTERN_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|tp
return|;
block|}
specifier|public
name|void
name|delete
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|getUniqueId
argument_list|()
operator|.
name|intValue
argument_list|()
operator|<
literal|0
condition|)
return|return;
if|if
condition|(
operator|!
name|getEditable
argument_list|()
condition|)
return|return;
name|TimePattern
name|tp
init|=
operator|(
operator|new
name|TimePatternDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|tp
operator|.
name|getDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|d
operator|.
name|getTimePatterns
argument_list|()
operator|.
name|remove
argument_list|(
name|tp
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|request
argument_list|,
name|tp
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|TIME_PATTERN_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|tp
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getOp
parameter_list|()
block|{
return|return
name|iOp
return|;
block|}
specifier|public
name|void
name|setOp
parameter_list|(
name|String
name|op
parameter_list|)
block|{
name|iOp
operator|=
name|op
expr_stmt|;
block|}
specifier|public
name|Long
name|getUniqueId
parameter_list|()
block|{
return|return
name|iUniqueId
return|;
block|}
specifier|public
name|void
name|setUniqueId
parameter_list|(
name|Long
name|uniqueId
parameter_list|)
block|{
name|iUniqueId
operator|=
name|uniqueId
expr_stmt|;
block|}
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|iType
return|;
block|}
specifier|public
name|void
name|setType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|iType
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|String
index|[]
name|getTypes
parameter_list|()
block|{
return|return
name|TimePattern
operator|.
name|sTypes
return|;
block|}
specifier|public
name|int
name|getTypeInt
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TimePattern
operator|.
name|sTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|TimePattern
operator|.
name|sTypes
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|iType
argument_list|)
condition|)
return|return
name|i
return|;
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|void
name|setTypeInt
parameter_list|(
name|int
name|type
parameter_list|)
block|{
name|iType
operator|=
operator|(
name|type
operator|<
literal|0
condition|?
literal|""
else|:
name|TimePattern
operator|.
name|sTypes
index|[
name|type
index|]
operator|)
expr_stmt|;
block|}
specifier|public
name|String
name|getNrMtgs
parameter_list|()
block|{
return|return
name|iNrMtgs
return|;
block|}
specifier|public
name|void
name|setNrMtgs
parameter_list|(
name|String
name|nrMtgs
parameter_list|)
block|{
name|iNrMtgs
operator|=
name|nrMtgs
expr_stmt|;
block|}
specifier|public
name|String
name|getBreakTime
parameter_list|()
block|{
return|return
name|iBreakTime
return|;
block|}
specifier|public
name|void
name|setBreakTime
parameter_list|(
name|String
name|breakTime
parameter_list|)
block|{
name|iBreakTime
operator|=
name|breakTime
expr_stmt|;
block|}
specifier|public
name|String
name|getMinPerMtg
parameter_list|()
block|{
return|return
name|iMinPerMtg
return|;
block|}
specifier|public
name|void
name|setMinPerMtg
parameter_list|(
name|String
name|minPerMtg
parameter_list|)
block|{
name|iMinPerMtg
operator|=
name|minPerMtg
expr_stmt|;
block|}
specifier|public
name|String
name|getSlotsPerMtg
parameter_list|()
block|{
return|return
name|iSlotsPerMtg
return|;
block|}
specifier|public
name|void
name|setSlotsPerMtg
parameter_list|(
name|String
name|slotsPerMtg
parameter_list|)
block|{
name|iSlotsPerMtg
operator|=
name|slotsPerMtg
expr_stmt|;
block|}
specifier|public
name|String
name|getDayCodes
parameter_list|()
block|{
return|return
name|iDayCodes
return|;
block|}
specifier|public
name|void
name|setDayCodes
parameter_list|(
name|String
name|dayCodes
parameter_list|)
block|{
name|iDayCodes
operator|=
name|dayCodes
expr_stmt|;
block|}
specifier|public
name|String
name|getStartTimes
parameter_list|()
block|{
return|return
name|iStartTimes
return|;
block|}
specifier|public
name|void
name|setStartTimes
parameter_list|(
name|String
name|startTimes
parameter_list|)
block|{
name|iStartTimes
operator|=
name|startTimes
expr_stmt|;
block|}
specifier|public
name|boolean
name|getEditable
parameter_list|()
block|{
return|return
name|iEditable
return|;
block|}
specifier|public
name|void
name|setEditable
parameter_list|(
name|boolean
name|editable
parameter_list|)
block|{
name|iEditable
operator|=
name|editable
expr_stmt|;
block|}
specifier|public
name|boolean
name|getVisible
parameter_list|()
block|{
return|return
name|iVisible
return|;
block|}
specifier|public
name|void
name|setVisible
parameter_list|(
name|boolean
name|visible
parameter_list|)
block|{
name|iVisible
operator|=
name|visible
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|Vector
name|getDepartmentIds
parameter_list|()
block|{
return|return
name|iDepartmentIds
return|;
block|}
specifier|public
name|void
name|setDepartmentIds
parameter_list|(
name|Vector
name|departmentIds
parameter_list|)
block|{
name|iDepartmentIds
operator|=
name|departmentIds
expr_stmt|;
block|}
specifier|public
name|Long
name|getDepartmentId
parameter_list|()
block|{
return|return
name|iDepartmentId
return|;
block|}
specifier|public
name|void
name|setDepartmentId
parameter_list|(
name|Long
name|deptId
parameter_list|)
block|{
name|iDepartmentId
operator|=
name|deptId
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|dayCodes2str
parameter_list|(
name|Collection
name|dayCodes
parameter_list|,
name|String
name|delim
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|(
operator|new
name|TreeSet
argument_list|(
name|dayCodes
argument_list|)
operator|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|int
name|dayCode
init|=
operator|(
operator|(
name|TimePatternDays
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getDayCode
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|nrDays
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|Constants
operator|.
name|NR_DAYS
condition|;
name|j
operator|++
control|)
if|if
condition|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|j
index|]
operator|)
operator|!=
literal|0
condition|)
name|nrDays
operator|++
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|Constants
operator|.
name|NR_DAYS
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|Constants
operator|.
name|DAY_CODES
index|[
name|j
index|]
operator|&
name|dayCode
operator|)
operator|==
literal|0
condition|)
continue|continue;
name|sb
operator|.
name|append
argument_list|(
name|nrDays
operator|==
literal|1
condition|?
name|Constants
operator|.
name|DAY_NAME
index|[
name|j
index|]
else|:
name|Constants
operator|.
name|DAY_NAMES_SHORT
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
name|delim
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|startSlots2str
parameter_list|(
name|Collection
name|startSlots
parameter_list|,
name|String
name|delim
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|(
operator|new
name|TreeSet
argument_list|(
name|startSlots
argument_list|)
operator|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|int
name|startSlot
init|=
operator|(
operator|(
name|TimePatternTime
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getStartSlot
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|min
init|=
name|startSlot
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
decl_stmt|;
name|int
name|time
init|=
literal|100
operator|*
operator|(
name|min
operator|/
literal|60
operator|)
operator|+
operator|(
name|min
operator|%
literal|60
operator|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|time
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
name|delim
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|int
name|getDayCode
parameter_list|(
name|String
name|token
parameter_list|,
name|int
name|day
parameter_list|,
name|int
name|dayCode
parameter_list|)
block|{
if|if
condition|(
name|day
operator|==
name|Constants
operator|.
name|NR_DAYS
condition|)
block|{
if|if
condition|(
name|token
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
name|dayCode
return|;
else|else
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|token
operator|.
name|startsWith
argument_list|(
name|Constants
operator|.
name|DAY_NAMES_SHORT
index|[
name|day
index|]
argument_list|)
condition|)
block|{
name|int
name|code
init|=
name|getDayCode
argument_list|(
name|token
operator|.
name|substring
argument_list|(
name|Constants
operator|.
name|DAY_NAMES_SHORT
index|[
name|day
index|]
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|day
operator|+
literal|1
argument_list|,
name|dayCode
operator|+
name|Constants
operator|.
name|DAY_CODES
index|[
name|day
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|code
operator|>=
literal|0
condition|)
return|return
name|code
return|;
block|}
if|if
condition|(
name|token
operator|.
name|startsWith
argument_list|(
name|Constants
operator|.
name|DAY_NAME
index|[
name|day
index|]
argument_list|)
condition|)
block|{
name|int
name|code
init|=
name|getDayCode
argument_list|(
name|token
operator|.
name|substring
argument_list|(
name|Constants
operator|.
name|DAY_NAME
index|[
name|day
index|]
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|day
operator|+
literal|1
argument_list|,
name|dayCode
operator|+
name|Constants
operator|.
name|DAY_CODES
index|[
name|day
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|code
operator|>=
literal|0
condition|)
return|return
name|code
return|;
block|}
return|return
name|getDayCode
argument_list|(
name|token
argument_list|,
name|day
operator|+
literal|1
argument_list|,
name|dayCode
argument_list|)
return|;
block|}
specifier|public
name|Set
name|str2dayCodes
parameter_list|(
name|String
name|dayCodes
parameter_list|,
name|String
name|delim
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
name|ret
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|StringTokenizer
name|stk
init|=
operator|new
name|StringTokenizer
argument_list|(
name|dayCodes
argument_list|,
operator|(
name|delim
operator|==
literal|null
condition|?
literal|" ,\t\n\r\f"
else|:
name|delim
operator|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|token
init|=
name|stk
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
name|int
name|dayCode
init|=
name|getDayCode
argument_list|(
name|token
operator|.
name|trim
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|dayCode
operator|<
literal|0
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Invalid days '"
operator|+
name|token
operator|+
literal|"'."
argument_list|)
throw|;
name|int
name|nrDays
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|NR_DAYS
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|i
index|]
operator|)
operator|!=
literal|0
condition|)
name|nrDays
operator|++
expr_stmt|;
try|try
block|{
if|if
condition|(
name|nrDays
operator|!=
name|Integer
operator|.
name|parseInt
argument_list|(
name|getNrMtgs
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Days '"
operator|+
name|token
operator|+
literal|"' invalid -- wrong number of days."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
name|TimePatternDays
name|days
init|=
operator|new
name|TimePatternDays
argument_list|()
decl_stmt|;
name|days
operator|.
name|setDayCode
argument_list|(
operator|new
name|Integer
argument_list|(
name|dayCode
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|.
name|contains
argument_list|(
name|days
argument_list|)
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Days '"
operator|+
name|token
operator|+
literal|"' included more than once."
argument_list|)
throw|;
name|ret
operator|.
name|add
argument_list|(
name|days
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|Set
name|str2startSlots
parameter_list|(
name|String
name|startTimes
parameter_list|,
name|String
name|delim
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
name|ret
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|StringTokenizer
name|stk
init|=
operator|new
name|StringTokenizer
argument_list|(
name|startTimes
argument_list|,
operator|(
name|delim
operator|==
literal|null
condition|?
literal|" ,\t\n\r\f"
else|:
name|delim
operator|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|token
init|=
name|stk
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
name|int
name|slot
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|int
name|time
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|token
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|hour
init|=
name|time
operator|/
literal|100
decl_stmt|;
name|int
name|min
init|=
name|time
operator|%
literal|100
decl_stmt|;
if|if
condition|(
name|hour
operator|>=
literal|24
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Invalid time '"
operator|+
name|token
operator|+
literal|"' -- hour ("
operator|+
name|hour
operator|+
literal|") must be between 0 and 23."
argument_list|)
throw|;
if|if
condition|(
name|min
operator|>=
literal|60
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Invalid time '"
operator|+
name|token
operator|+
literal|"' -- minute ("
operator|+
name|min
operator|+
literal|") must be between 0 and 59."
argument_list|)
throw|;
if|if
condition|(
operator|(
name|min
operator|%
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|)
operator|!=
literal|0
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Invalid time '"
operator|+
name|token
operator|+
literal|"' -- minute ("
operator|+
name|min
operator|+
literal|") must be divisible by "
operator|+
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
literal|"."
argument_list|)
throw|;
try|try
block|{
name|int
name|endTime
init|=
name|hour
operator|*
literal|60
operator|+
name|min
operator|+
name|Integer
operator|.
name|parseInt
argument_list|(
name|getSlotsPerMtg
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|endTime
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|-
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|>=
name|Constants
operator|.
name|SLOTS_PER_DAY
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Invalid time '"
operator|+
name|token
operator|+
literal|"' -- end time ("
operator|+
operator|(
literal|100
operator|*
operator|(
name|endTime
operator|/
literal|60
operator|)
operator|+
name|endTime
operator|%
literal|60
operator|)
operator|+
literal|") exceeds maximum available time."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
name|slot
operator|=
operator|(
name|hour
operator|*
literal|60
operator|+
name|min
operator|-
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Invalid time '"
operator|+
name|token
operator|+
literal|"' -- not a number."
argument_list|)
throw|;
block|}
if|if
condition|(
name|slot
operator|<
literal|0
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Invalid time '"
operator|+
name|token
operator|+
literal|"'."
argument_list|)
throw|;
name|TimePatternTime
name|time
init|=
operator|new
name|TimePatternTime
argument_list|()
decl_stmt|;
name|time
operator|.
name|setStartSlot
argument_list|(
operator|new
name|Integer
argument_list|(
name|slot
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|.
name|contains
argument_list|(
name|time
argument_list|)
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Time '"
operator|+
name|token
operator|+
literal|"' included more than once."
argument_list|)
throw|;
name|ret
operator|.
name|add
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|String
name|getExample
parameter_list|()
block|{
try|try
block|{
name|TimePattern
name|tp
init|=
operator|new
name|TimePattern
argument_list|(
operator|new
name|Long
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
decl_stmt|;
name|tp
operator|.
name|setName
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setVisible
argument_list|(
operator|new
name|Boolean
argument_list|(
name|getVisible
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setType
argument_list|(
operator|new
name|Integer
argument_list|(
name|getTypeInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setMinPerMtg
argument_list|(
operator|new
name|Integer
argument_list|(
name|getMinPerMtg
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setNrMeetings
argument_list|(
operator|new
name|Integer
argument_list|(
name|getNrMtgs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setBreakTime
argument_list|(
operator|new
name|Integer
argument_list|(
name|getBreakTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setSlotsPerMtg
argument_list|(
operator|new
name|Integer
argument_list|(
name|getSlotsPerMtg
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setTimes
argument_list|(
name|str2startSlots
argument_list|(
name|getStartTimes
argument_list|()
argument_list|,
literal|"\n, "
argument_list|)
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setDays
argument_list|(
name|str2dayCodes
argument_list|(
name|getDayCodes
argument_list|()
argument_list|,
literal|"\n, "
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|tp
operator|.
name|getTimes
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|tp
operator|.
name|getDays
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|RequiredTimeTable
name|rtt
init|=
name|tp
operator|.
name|getRequiredTimeTable
argument_list|(
literal|true
argument_list|)
decl_stmt|;
return|return
name|rtt
operator|.
name|print
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

