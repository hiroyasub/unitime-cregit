begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionErrors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Building
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RelatedCourseInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|InstrOfferingConfigComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|SchedulingSubpartComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstrOfferingConfigDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|LocationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SchedulingSubpartDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|ComboBoxLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DynamicList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DynamicListObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|IdValue
import|;
end_import

begin_comment
comment|/*  * A large part of this file reuses code from the ExamEditForm.java  */
end_comment

begin_class
specifier|public
class|class
name|EventAddForm
extends|extends
name|PreferencesForm
block|{
specifier|private
name|String
name|iOp
decl_stmt|;
specifier|private
name|String
name|iEventType
decl_stmt|;
specifier|private
name|Long
name|iSessionId
decl_stmt|;
specifier|private
name|boolean
name|iAttendanceRequired
decl_stmt|;
specifier|private
name|int
name|iStartTime
decl_stmt|;
specifier|private
name|int
name|iStopTime
decl_stmt|;
comment|//	private String iLocationType;
comment|//	private Vector<String> iLocationTypes = new Vector<String>();
specifier|private
name|Long
name|iBuildingId
decl_stmt|;
specifier|private
name|String
name|iRoomNumber
decl_stmt|;
specifier|private
name|TreeSet
argument_list|<
name|Date
argument_list|>
name|iMeetingDates
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
specifier|private
name|String
name|iMinCapacity
decl_stmt|;
specifier|private
name|String
name|iMaxCapacity
decl_stmt|;
specifier|private
name|boolean
name|iLookAtNearLocations
decl_stmt|;
comment|// courses/classes for course related events
specifier|private
name|List
name|iSubjectArea
decl_stmt|;
specifier|private
name|List
name|iCourseNbr
decl_stmt|;
specifier|private
name|List
name|iItype
decl_stmt|;
specifier|private
name|List
name|iClassNumber
decl_stmt|;
specifier|private
name|Collection
name|iSubjectAreas
decl_stmt|;
specifier|private
name|int
name|iSelected
decl_stmt|;
specifier|public
name|ActionErrors
name|validate
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|ActionErrors
name|errors
init|=
operator|new
name|ActionErrors
argument_list|()
decl_stmt|;
if|if
condition|(
name|iStartTime
operator|>
name|iStopTime
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"stopDate"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Start Time must be earlier than Stop Time. It is not possible to enter overnight events."
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSessionId
operator|==
literal|null
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"session"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"No academic session is selected."
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iMeetingDates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"dates"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"No event dates are selected."
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iBuildingId
operator|==
operator|-
literal|1
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"building"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"No building has been selected."
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|min
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|iMinCapacity
operator|!=
literal|null
operator|&&
name|iMinCapacity
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|min
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|iMinCapacity
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"minCapacity"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Minimum room capacity should be a number or blank (no lower limit)."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|max
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|iMaxCapacity
operator|!=
literal|null
operator|&&
name|iMaxCapacity
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|min
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|iMaxCapacity
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"maxCapacity"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Maximum room capacity should be a number or blank (no upper limit)."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|min
operator|>
name|max
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"minMaxCapacity"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Maximum room capacity should not be smaller than minimum room capacity."
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Course Event"
operator|.
name|equals
argument_list|(
name|iEventType
argument_list|)
condition|)
block|{
name|boolean
name|hasRci
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|getSubjectArea
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|RelatedCourseInfo
name|rci
init|=
name|getRelatedCourseInfo
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|rci
operator|!=
literal|null
condition|)
block|{
name|hasRci
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|hasRci
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"relatedCourseInfo"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"At least one class/course has to be specified."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|getPossibleLocations
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"noLocation"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"There is no location matching your criteria."
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|errors
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|iOp
operator|=
literal|null
expr_stmt|;
name|iEventType
operator|=
name|Event
operator|.
name|sEventTypes
index|[
name|Event
operator|.
name|sEventTypeSpecial
index|]
expr_stmt|;
name|iSessionId
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|iSessionId
operator|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|iStartTime
operator|=
literal|90
expr_stmt|;
name|iStopTime
operator|=
literal|210
expr_stmt|;
comment|//		iLocationType = null;
name|iMeetingDates
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iMinCapacity
operator|=
literal|null
expr_stmt|;
name|iMaxCapacity
operator|=
literal|null
expr_stmt|;
name|iLookAtNearLocations
operator|=
literal|false
expr_stmt|;
name|iAttendanceRequired
operator|=
literal|false
expr_stmt|;
name|iSubjectArea
operator|=
name|DynamicList
operator|.
name|getInstance
argument_list|(
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|idfactory
argument_list|)
expr_stmt|;
name|iCourseNbr
operator|=
name|DynamicList
operator|.
name|getInstance
argument_list|(
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|idfactory
argument_list|)
expr_stmt|;
name|iItype
operator|=
name|DynamicList
operator|.
name|getInstance
argument_list|(
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|idfactory
argument_list|)
expr_stmt|;
name|iClassNumber
operator|=
name|DynamicList
operator|.
name|getInstance
argument_list|(
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|idfactory
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|PREF_ROWS_ADDED
condition|;
name|i
operator|++
control|)
block|{
name|addRelatedCourseInfo
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|// load event info from session attribute Event
specifier|public
name|void
name|load
parameter_list|(
name|HttpSession
name|session
parameter_list|)
block|{
name|iEventType
operator|=
operator|(
name|String
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.EventType"
argument_list|)
expr_stmt|;
name|iSessionId
operator|=
operator|(
name|Long
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.SessionId"
argument_list|)
expr_stmt|;
name|iStartTime
operator|=
operator|(
name|Integer
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.StartTime"
argument_list|)
expr_stmt|;
name|iStopTime
operator|=
operator|(
name|Integer
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.StopTime"
argument_list|)
expr_stmt|;
comment|//		iLocationType = (String) session.getAttribute("Event.LocationType");
comment|//		iLocationTypes = (Vector<String>) session.getAttribute("Event.LocationTypes");
name|iMeetingDates
operator|=
operator|(
name|TreeSet
argument_list|<
name|Date
argument_list|>
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.MeetingDates"
argument_list|)
expr_stmt|;
name|iMinCapacity
operator|=
operator|(
name|String
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.MinCapacity"
argument_list|)
expr_stmt|;
name|iMaxCapacity
operator|=
operator|(
name|String
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.MaxCapacity"
argument_list|)
expr_stmt|;
name|iBuildingId
operator|=
operator|(
name|Long
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.BuildingId"
argument_list|)
expr_stmt|;
name|iRoomNumber
operator|=
operator|(
name|String
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.RoomNumber"
argument_list|)
expr_stmt|;
name|iLookAtNearLocations
operator|=
operator|(
name|Boolean
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.LookAtNearLocations"
argument_list|)
expr_stmt|;
name|iAttendanceRequired
operator|=
operator|(
name|Boolean
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.AttendanceRequired"
argument_list|)
expr_stmt|;
if|if
condition|(
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.SubjectArea"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|iSubjectArea
operator|=
operator|(
name|List
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.SubjectArea"
argument_list|)
expr_stmt|;
name|iCourseNbr
operator|=
operator|(
name|List
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.CourseNbr"
argument_list|)
expr_stmt|;
name|iItype
operator|=
operator|(
name|List
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.SubjectItype"
argument_list|)
expr_stmt|;
name|iClassNumber
operator|=
operator|(
name|List
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.ClassNumber"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// save event parameters to session attribute Event
specifier|public
name|void
name|save
parameter_list|(
name|HttpSession
name|session
parameter_list|)
block|{
name|session
operator|.
name|setAttribute
argument_list|(
literal|"Event.EventType"
argument_list|,
name|iEventType
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"Event.SessionId"
argument_list|,
name|iSessionId
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"Event.StartTime"
argument_list|,
name|iStartTime
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"Event.StopTime"
argument_list|,
name|iStopTime
argument_list|)
expr_stmt|;
comment|//		session.setAttribute("Event.LocationType", iLocationType);
comment|//		session.setAttribute("Event.LocationTypes", iLocationTypes);
name|session
operator|.
name|setAttribute
argument_list|(
literal|"Event.MeetingDates"
argument_list|,
name|iMeetingDates
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"Event.MinCapacity"
argument_list|,
name|iMinCapacity
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"Event.MaxCapacity"
argument_list|,
name|iMaxCapacity
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"Event.BuildingId"
argument_list|,
name|iBuildingId
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"Event.RoomNumber"
argument_list|,
name|iRoomNumber
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"Event.LookAtNearLocations"
argument_list|,
operator|(
name|Boolean
operator|)
name|iLookAtNearLocations
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"Event.SubjectArea"
argument_list|,
name|iSubjectArea
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"Event.CourseNbr"
argument_list|,
name|iCourseNbr
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"Event.SubjectItype"
argument_list|,
name|iItype
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"Event.ClassNumber"
argument_list|,
name|iClassNumber
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"Event.StudentIds"
argument_list|,
name|getStudentIds
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"Event.AttendanceRequired"
argument_list|,
name|iAttendanceRequired
argument_list|)
expr_stmt|;
block|}
comment|// load event dates selected by user
specifier|public
name|void
name|loadDates
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|iMeetingDates
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|iSessionId
operator|==
literal|null
condition|)
return|return;
name|Session
name|s
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|iSessionId
argument_list|)
decl_stmt|;
name|int
name|startMonth
init|=
name|s
operator|.
name|getStartMonth
argument_list|()
decl_stmt|;
name|int
name|endMonth
init|=
name|s
operator|.
name|getEndMonth
argument_list|()
decl_stmt|;
name|int
name|year
init|=
name|s
operator|.
name|getYear
argument_list|()
decl_stmt|;
name|Calendar
name|today
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|today
operator|.
name|setTime
argument_list|(
name|s
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|today
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|today
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|,
operator|(
name|startMonth
operator|+
literal|12
operator|)
operator|%
literal|12
argument_list|)
expr_stmt|;
name|today
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|,
name|year
operator|+
operator|(
name|startMonth
operator|<
literal|0
condition|?
operator|-
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
name|startMonth
operator|>=
literal|12
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|m
init|=
name|startMonth
init|;
name|m
operator|<=
name|endMonth
condition|;
name|m
operator|++
control|)
block|{
name|int
name|daysOfMonth
init|=
name|DateUtils
operator|.
name|getNrDaysOfMonth
argument_list|(
name|m
argument_list|,
name|year
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<=
name|daysOfMonth
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
literal|"1"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"cal_val_"
operator|+
operator|(
operator|(
literal|12
operator|+
name|m
operator|)
operator|%
literal|12
operator|)
operator|+
literal|"_"
operator|+
name|d
argument_list|)
argument_list|)
condition|)
block|{
name|iMeetingDates
operator|.
name|add
argument_list|(
name|today
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|today
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|TreeSet
argument_list|<
name|Date
argument_list|>
name|getMeetingDates
parameter_list|()
block|{
return|return
name|iMeetingDates
return|;
block|}
comment|// display calendar for event dates
specifier|public
name|String
name|getDatesTable
parameter_list|()
block|{
if|if
condition|(
name|iSessionId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Session
name|s
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|iSessionId
argument_list|)
decl_stmt|;
name|int
name|startMonth
init|=
name|s
operator|.
name|getStartMonth
argument_list|()
decl_stmt|;
name|int
name|endMonth
init|=
name|s
operator|.
name|getEndMonth
argument_list|()
decl_stmt|;
name|int
name|year
init|=
name|s
operator|.
name|getYear
argument_list|()
decl_stmt|;
name|Calendar
name|today
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|today
operator|.
name|setTime
argument_list|(
name|s
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|today
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|today
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|,
operator|(
name|startMonth
operator|+
literal|12
operator|)
operator|%
literal|12
argument_list|)
expr_stmt|;
name|today
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|,
name|year
operator|+
operator|(
name|startMonth
operator|<
literal|0
condition|?
operator|-
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
name|startMonth
operator|>=
literal|12
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
name|String
name|pattern
init|=
literal|"["
decl_stmt|,
name|border
init|=
literal|"["
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
name|startMonth
init|;
name|m
operator|<=
name|endMonth
condition|;
name|m
operator|++
control|)
block|{
if|if
condition|(
name|m
operator|!=
name|startMonth
condition|)
block|{
name|pattern
operator|+=
literal|","
expr_stmt|;
name|border
operator|+=
literal|","
expr_stmt|;
block|}
name|pattern
operator|+=
literal|"["
expr_stmt|;
name|border
operator|+=
literal|"["
expr_stmt|;
name|int
name|daysOfMonth
init|=
name|DateUtils
operator|.
name|getNrDaysOfMonth
argument_list|(
name|m
argument_list|,
name|year
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<=
name|daysOfMonth
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
name|d
operator|>
literal|1
condition|)
block|{
name|pattern
operator|+=
literal|","
expr_stmt|;
name|border
operator|+=
literal|","
expr_stmt|;
block|}
name|pattern
operator|+=
operator|(
name|iMeetingDates
operator|.
name|contains
argument_list|(
name|today
operator|.
name|getTime
argument_list|()
argument_list|)
condition|?
literal|"'1'"
else|:
literal|"'0'"
operator|)
expr_stmt|;
name|today
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|border
operator|+=
name|s
operator|.
name|getBorder
argument_list|(
name|d
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
name|pattern
operator|+=
literal|"]"
expr_stmt|;
name|border
operator|+=
literal|"]"
expr_stmt|;
block|}
name|pattern
operator|+=
literal|"]"
expr_stmt|;
name|border
operator|+=
literal|"]"
expr_stmt|;
return|return
literal|"<script language='JavaScript' type='text/javascript' src='scripts/datepatt.js'></script>"
operator|+
literal|"<script language='JavaScript'>"
operator|+
literal|"calGenerate("
operator|+
name|year
operator|+
literal|","
operator|+
name|startMonth
operator|+
literal|","
operator|+
name|endMonth
operator|+
literal|","
operator|+
name|pattern
operator|+
literal|","
operator|+
literal|"['1','0'],"
operator|+
literal|"['Selected','Not Selected'],"
operator|+
literal|"['rgb(240,240,50)','rgb(240,240,240)'],"
operator|+
literal|"'1',"
operator|+
name|border
operator|+
literal|",true,true);"
operator|+
literal|"</script>"
return|;
block|}
specifier|public
name|String
name|getOp
parameter_list|()
block|{
return|return
name|iOp
return|;
block|}
specifier|public
name|void
name|setOp
parameter_list|(
name|String
name|op
parameter_list|)
block|{
name|iOp
operator|=
name|op
expr_stmt|;
block|}
specifier|public
name|String
index|[]
name|getEventTypes
parameter_list|()
block|{
name|String
index|[]
name|types
init|=
operator|new
name|String
index|[]
block|{
name|Event
operator|.
name|sEventTypes
index|[
name|Event
operator|.
name|sEventTypeCourse
index|]
block|,
name|Event
operator|.
name|sEventTypes
index|[
name|Event
operator|.
name|sEventTypeSpecial
index|]
block|}
decl_stmt|;
return|return
name|types
return|;
block|}
specifier|public
name|String
name|getEventType
parameter_list|()
block|{
return|return
name|iEventType
return|;
block|}
specifier|public
name|void
name|setEventType
parameter_list|(
name|String
name|eventType
parameter_list|)
block|{
name|iEventType
operator|=
name|eventType
expr_stmt|;
block|}
specifier|public
name|Vector
argument_list|<
name|ComboBoxLookup
argument_list|>
name|getAcademicSessions
parameter_list|()
block|{
name|Vector
argument_list|<
name|ComboBoxLookup
argument_list|>
name|aSessions
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|Date
name|today
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|Session
operator|.
name|getAllSessions
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Session
name|session
init|=
operator|(
name|Session
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//if (!session.getStatusType().canOwnerView()) continue;
comment|//if (session.getClassesEndDateTime().compareTo(today)<0) continue;
name|aSessions
operator|.
name|add
argument_list|(
operator|new
name|ComboBoxLookup
argument_list|(
name|session
operator|.
name|getLabel
argument_list|()
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|aSessions
return|;
block|}
specifier|public
name|Long
name|getSessionId
parameter_list|()
block|{
return|return
name|iSessionId
return|;
block|}
specifier|public
name|void
name|setSessionId
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|iSessionId
operator|=
name|sessionId
expr_stmt|;
block|}
specifier|public
name|boolean
name|getAttendanceRequired
parameter_list|()
block|{
return|return
name|iAttendanceRequired
return|;
block|}
specifier|public
name|void
name|setAttendanceRequired
parameter_list|(
name|boolean
name|attReq
parameter_list|)
block|{
name|iAttendanceRequired
operator|=
name|attReq
expr_stmt|;
block|}
specifier|public
name|int
name|getStartTime
parameter_list|()
block|{
return|return
name|iStartTime
return|;
block|}
specifier|public
name|void
name|setStartTime
parameter_list|(
name|int
name|startTime
parameter_list|)
block|{
name|iStartTime
operator|=
name|startTime
expr_stmt|;
block|}
specifier|public
name|int
name|getStopTime
parameter_list|()
block|{
return|return
name|iStopTime
return|;
block|}
specifier|public
name|void
name|setStopTime
parameter_list|(
name|int
name|stopTime
parameter_list|)
block|{
name|iStopTime
operator|=
name|stopTime
expr_stmt|;
block|}
specifier|public
name|Vector
argument_list|<
name|ComboBoxLookup
argument_list|>
name|getLocationTypes
parameter_list|()
block|{
name|Vector
argument_list|<
name|ComboBoxLookup
argument_list|>
name|ltypes
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|ltypes
operator|.
name|add
argument_list|(
operator|new
name|ComboBoxLookup
argument_list|(
literal|"N/A yet"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ltypes
return|;
block|}
comment|//	public String getLocationType() {return iLocationType; }
comment|//    public void setLocationType(String locationType) {iLocationType = locationType;}
comment|//the index i goes in five minute increments, but displayed are 15 minute increments
specifier|public
name|Vector
argument_list|<
name|ComboBoxLookup
argument_list|>
name|getTimes
parameter_list|()
block|{
name|Vector
argument_list|<
name|ComboBoxLookup
argument_list|>
name|times
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|int
name|hour
decl_stmt|;
name|int
name|minute
decl_stmt|;
name|String
name|ampm
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|288
condition|;
name|i
operator|=
name|i
operator|+
literal|3
control|)
block|{
name|hour
operator|=
operator|(
name|i
operator|/
literal|12
operator|)
operator|%
literal|12
expr_stmt|;
if|if
condition|(
name|hour
operator|==
literal|0
condition|)
name|hour
operator|=
literal|12
expr_stmt|;
name|minute
operator|=
name|i
operator|%
literal|12
operator|*
literal|5
expr_stmt|;
if|if
condition|(
name|i
operator|/
literal|144
operator|==
literal|0
condition|)
name|ampm
operator|=
literal|"am"
expr_stmt|;
else|else
name|ampm
operator|=
literal|"pm"
expr_stmt|;
name|times
operator|.
name|add
argument_list|(
operator|new
name|ComboBoxLookup
argument_list|(
name|hour
operator|+
literal|":"
operator|+
operator|(
name|minute
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|minute
operator|+
literal|" "
operator|+
name|ampm
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|times
return|;
block|}
specifier|public
name|List
name|getBuildings
parameter_list|()
block|{
return|return
operator|(
name|iSessionId
operator|==
literal|null
condition|?
literal|null
else|:
name|Building
operator|.
name|findAll
argument_list|(
name|iSessionId
argument_list|)
operator|)
return|;
block|}
specifier|public
name|Long
name|getBuildingId
parameter_list|()
block|{
return|return
name|iBuildingId
return|;
block|}
specifier|public
name|void
name|setBuildingId
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
name|iBuildingId
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|String
name|getRoomNumber
parameter_list|()
block|{
return|return
name|iRoomNumber
return|;
block|}
specifier|public
name|void
name|setRoomNumber
parameter_list|(
name|String
name|roomNr
parameter_list|)
block|{
name|iRoomNumber
operator|=
name|roomNr
expr_stmt|;
block|}
specifier|public
name|String
name|getMinCapacity
parameter_list|()
block|{
return|return
name|iMinCapacity
return|;
block|}
specifier|public
name|void
name|setMinCapacity
parameter_list|(
name|String
name|minCapacity
parameter_list|)
block|{
name|iMinCapacity
operator|=
name|minCapacity
expr_stmt|;
block|}
specifier|public
name|String
name|getMaxCapacity
parameter_list|()
block|{
return|return
name|iMaxCapacity
return|;
block|}
specifier|public
name|void
name|setMaxCapacity
parameter_list|(
name|String
name|minCapacity
parameter_list|)
block|{
name|iMaxCapacity
operator|=
name|minCapacity
expr_stmt|;
block|}
specifier|public
name|Boolean
name|getLookAtNearLocations
parameter_list|()
block|{
return|return
name|iLookAtNearLocations
return|;
block|}
specifier|public
name|void
name|setLookAtNearLocations
parameter_list|(
name|Boolean
name|look
parameter_list|)
block|{
name|iLookAtNearLocations
operator|=
name|look
expr_stmt|;
block|}
comment|// Methods related to course events with conflict checking
specifier|public
name|String
index|[]
name|getObjectTypes
parameter_list|()
block|{
return|return
name|ExamOwner
operator|.
name|sOwnerTypes
return|;
block|}
specifier|protected
name|DynamicListObjectFactory
name|factory
init|=
operator|new
name|DynamicListObjectFactory
argument_list|()
block|{
specifier|public
name|Object
name|create
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|protected
name|DynamicListObjectFactory
name|idfactory
init|=
operator|new
name|DynamicListObjectFactory
argument_list|()
block|{
specifier|public
name|Object
name|create
parameter_list|()
block|{
return|return
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|public
name|List
name|getSubjectAreaList
parameter_list|()
block|{
return|return
name|iSubjectArea
return|;
block|}
specifier|public
name|List
name|getSubjectArea
parameter_list|()
block|{
return|return
name|iSubjectArea
return|;
block|}
specifier|public
name|Long
name|getSubjectArea
parameter_list|(
name|int
name|key
parameter_list|)
block|{
return|return
operator|(
name|Long
operator|)
name|iSubjectArea
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|void
name|setSubjectArea
parameter_list|(
name|int
name|key
parameter_list|,
name|Long
name|value
parameter_list|)
block|{
name|this
operator|.
name|iSubjectArea
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setSubjectArea
parameter_list|(
name|List
name|subjectArea
parameter_list|)
block|{
name|this
operator|.
name|iSubjectArea
operator|=
name|subjectArea
expr_stmt|;
block|}
specifier|public
name|List
name|getCourseNbr
parameter_list|()
block|{
return|return
name|iCourseNbr
return|;
block|}
specifier|public
name|Long
name|getCourseNbr
parameter_list|(
name|int
name|key
parameter_list|)
block|{
return|return
operator|(
name|Long
operator|)
name|iCourseNbr
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|void
name|setCourseNbr
parameter_list|(
name|int
name|key
parameter_list|,
name|Long
name|value
parameter_list|)
block|{
name|this
operator|.
name|iCourseNbr
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setCourseNbr
parameter_list|(
name|List
name|courseNbr
parameter_list|)
block|{
name|this
operator|.
name|iCourseNbr
operator|=
name|courseNbr
expr_stmt|;
block|}
specifier|public
name|List
name|getItype
parameter_list|()
block|{
return|return
name|iItype
return|;
block|}
specifier|public
name|Long
name|getItype
parameter_list|(
name|int
name|key
parameter_list|)
block|{
return|return
operator|(
name|Long
operator|)
name|iItype
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|void
name|setItype
parameter_list|(
name|int
name|key
parameter_list|,
name|Long
name|value
parameter_list|)
block|{
name|this
operator|.
name|iItype
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setItype
parameter_list|(
name|List
name|itype
parameter_list|)
block|{
name|this
operator|.
name|iItype
operator|=
name|itype
expr_stmt|;
block|}
specifier|public
name|List
name|getClassNumber
parameter_list|()
block|{
return|return
name|iClassNumber
return|;
block|}
specifier|public
name|Long
name|getClassNumber
parameter_list|(
name|int
name|key
parameter_list|)
block|{
return|return
operator|(
name|Long
operator|)
name|iClassNumber
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|void
name|setClassNumber
parameter_list|(
name|int
name|key
parameter_list|,
name|Long
name|value
parameter_list|)
block|{
name|this
operator|.
name|iClassNumber
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setClassNumber
parameter_list|(
name|List
name|classNumber
parameter_list|)
block|{
name|this
operator|.
name|iClassNumber
operator|=
name|classNumber
expr_stmt|;
block|}
specifier|public
name|int
name|getSelected
parameter_list|()
block|{
return|return
name|iSelected
return|;
block|}
specifier|public
name|void
name|setSelected
parameter_list|(
name|int
name|selected
parameter_list|)
block|{
name|iSelected
operator|=
name|selected
expr_stmt|;
block|}
specifier|public
name|void
name|deleteRelatedCourseInfo
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
name|getSubjectArea
argument_list|()
operator|.
name|remove
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|getCourseNbr
argument_list|()
operator|.
name|remove
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|getItype
argument_list|()
operator|.
name|remove
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|getClassNumber
argument_list|()
operator|.
name|remove
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addRelatedCourseInfo
parameter_list|(
name|RelatedCourseInfo
name|rci
parameter_list|)
block|{
if|if
condition|(
name|rci
operator|==
literal|null
condition|)
block|{
name|getSubjectArea
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|getCourseNbr
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|getItype
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|getClassNumber
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|rci
operator|.
name|getOwnerType
argument_list|()
condition|)
block|{
case|case
name|ExamOwner
operator|.
name|sOwnerTypeClass
case|:
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|rci
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
name|getSubjectArea
argument_list|()
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|getCourseNbr
argument_list|()
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|getItype
argument_list|()
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|getClassNumber
argument_list|()
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|ExamOwner
operator|.
name|sOwnerTypeConfig
case|:
name|InstrOfferingConfig
name|config
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|rci
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
name|getSubjectArea
argument_list|()
operator|.
name|add
argument_list|(
name|config
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|getCourseNbr
argument_list|()
operator|.
name|add
argument_list|(
name|config
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|getItype
argument_list|()
operator|.
name|add
argument_list|(
operator|-
name|config
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|getClassNumber
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|ExamOwner
operator|.
name|sOwnerTypeCourse
case|:
name|CourseOffering
name|course
init|=
operator|(
name|CourseOffering
operator|)
name|rci
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
name|getSubjectArea
argument_list|()
operator|.
name|add
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|getCourseNbr
argument_list|()
operator|.
name|add
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|getItype
argument_list|()
operator|.
name|add
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|getClassNumber
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|ExamOwner
operator|.
name|sOwnerTypeOffering
case|:
name|InstructionalOffering
name|offering
init|=
operator|(
name|InstructionalOffering
operator|)
name|rci
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
name|getSubjectArea
argument_list|()
operator|.
name|add
argument_list|(
name|offering
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|getCourseNbr
argument_list|()
operator|.
name|add
argument_list|(
name|offering
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|getItype
argument_list|()
operator|.
name|add
argument_list|(
name|Long
operator|.
name|MIN_VALUE
operator|+
literal|1
argument_list|)
expr_stmt|;
name|getClassNumber
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
specifier|public
name|Collection
name|getSubjectAreas
parameter_list|()
block|{
return|return
name|iSubjectAreas
return|;
block|}
specifier|public
name|void
name|setSubjectAreas
parameter_list|(
name|Collection
name|subjectAreas
parameter_list|)
block|{
name|this
operator|.
name|iSubjectAreas
operator|=
name|subjectAreas
expr_stmt|;
block|}
specifier|public
name|Collection
name|getCourseNbrs
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
name|Vector
name|ret
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|boolean
name|contains
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|getSubjectArea
argument_list|(
name|idx
argument_list|)
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select co.uniqueId, co.courseNbr from CourseOffering co "
operator|+
literal|"where co.uniqueCourseNbr.subjectArea.uniqueId = :subjectAreaId "
operator|+
literal|"and co.instructionalOffering.notOffered = false "
operator|+
literal|"order by co.courseNbr "
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|200
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"subjectAreaId"
argument_list|,
name|getSubjectArea
argument_list|(
name|idx
argument_list|)
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|IdValue
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|o
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|o
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|getCourseNbr
argument_list|(
name|idx
argument_list|)
argument_list|)
condition|)
name|contains
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|contains
condition|)
name|setCourseNbr
argument_list|(
name|idx
argument_list|,
operator|-
literal|1L
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|setCourseNbr
argument_list|(
name|idx
argument_list|,
operator|(
operator|(
name|IdValue
operator|)
name|ret
operator|.
name|firstElement
argument_list|()
operator|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|ret
operator|.
name|insertElementAt
argument_list|(
operator|new
name|IdValue
argument_list|(
operator|-
literal|1L
argument_list|,
literal|"-"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|Collection
name|getItypes
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
name|Vector
name|ret
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|boolean
name|contains
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|getCourseNbr
argument_list|(
name|idx
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|CourseOffering
name|course
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
operator|.
name|get
argument_list|(
name|getCourseNbr
argument_list|(
name|idx
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|isIsControl
argument_list|()
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|IdValue
argument_list|(
name|Long
operator|.
name|MIN_VALUE
operator|+
literal|1
argument_list|,
literal|"Offering"
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|IdValue
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
literal|"Course"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|course
operator|.
name|isIsControl
argument_list|()
condition|)
block|{
name|setItype
argument_list|(
name|idx
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
name|TreeSet
name|configs
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|InstrOfferingConfigComparator
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|configs
operator|.
name|addAll
argument_list|(
operator|new
name|InstrOfferingConfigDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct c from "
operator|+
literal|"InstrOfferingConfig c inner join c.instructionalOffering.courseOfferings co "
operator|+
literal|"where co.uniqueId = :courseOfferingId"
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|200
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"courseOfferingId"
argument_list|,
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|configs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|IdValue
argument_list|(
name|Long
operator|.
name|MIN_VALUE
operator|+
literal|2
argument_list|,
literal|"-- Configurations --"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|configs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|c
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|getItype
argument_list|(
name|idx
argument_list|)
argument_list|)
condition|)
name|contains
operator|=
literal|true
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|IdValue
argument_list|(
operator|-
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|c
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|TreeSet
name|subparts
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|SchedulingSubpartComparator
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|subparts
operator|.
name|addAll
argument_list|(
operator|new
name|SchedulingSubpartDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct s from "
operator|+
literal|"SchedulingSubpart s inner join s.instrOfferingConfig.instructionalOffering.courseOfferings co "
operator|+
literal|"where co.uniqueId = :courseOfferingId"
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|200
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"courseOfferingId"
argument_list|,
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|configs
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|subparts
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|IdValue
argument_list|(
name|Long
operator|.
name|MIN_VALUE
operator|+
literal|2
argument_list|,
literal|"-- Subparts --"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|subparts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|s
init|=
operator|(
name|SchedulingSubpart
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|sid
init|=
name|s
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|s
operator|.
name|getItype
argument_list|()
operator|.
name|getAbbv
argument_list|()
decl_stmt|;
name|String
name|sufix
init|=
name|s
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|getParentSubpart
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
literal|"&nbsp;&nbsp;&nbsp;&nbsp;"
operator|+
name|name
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|getParentSubpart
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
name|name
operator|+=
literal|" ["
operator|+
name|s
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
expr_stmt|;
if|if
condition|(
name|sid
operator|.
name|equals
argument_list|(
name|getItype
argument_list|(
name|idx
argument_list|)
argument_list|)
condition|)
name|contains
operator|=
literal|true
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|IdValue
argument_list|(
name|sid
argument_list|,
name|name
operator|+
operator|(
name|sufix
operator|==
literal|null
operator|||
name|sufix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
literal|" ("
operator|+
name|sufix
operator|+
literal|")"
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ret
operator|.
name|addElement
argument_list|(
operator|new
name|IdValue
argument_list|(
literal|0L
argument_list|,
literal|"N/A"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|contains
condition|)
name|setItype
argument_list|(
name|idx
argument_list|,
operator|(
operator|(
name|IdValue
operator|)
name|ret
operator|.
name|firstElement
argument_list|()
operator|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|RelatedCourseInfo
name|getRelatedCourseInfo
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
if|if
condition|(
name|getSubjectArea
argument_list|(
name|idx
argument_list|)
operator|<
literal|0
operator|||
name|getCourseNbr
argument_list|(
name|idx
argument_list|)
operator|<
literal|0
condition|)
return|return
literal|null
return|;
name|CourseOffering
name|course
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
operator|.
name|get
argument_list|(
name|getCourseNbr
argument_list|(
name|idx
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|getItype
argument_list|(
name|idx
argument_list|)
operator|==
name|Long
operator|.
name|MIN_VALUE
condition|)
block|{
comment|//course
name|RelatedCourseInfo
name|owner
init|=
operator|new
name|RelatedCourseInfo
argument_list|()
decl_stmt|;
name|owner
operator|.
name|setOwner
argument_list|(
name|course
argument_list|)
expr_stmt|;
return|return
name|owner
return|;
block|}
if|else if
condition|(
name|getItype
argument_list|(
name|idx
argument_list|)
operator|==
name|Long
operator|.
name|MIN_VALUE
operator|+
literal|1
operator|||
name|getItype
argument_list|(
name|idx
argument_list|)
operator|==
name|Long
operator|.
name|MIN_VALUE
operator|+
literal|2
condition|)
block|{
comment|//offering
name|RelatedCourseInfo
name|owner
init|=
operator|new
name|RelatedCourseInfo
argument_list|()
decl_stmt|;
name|owner
operator|.
name|setOwner
argument_list|(
name|course
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|owner
return|;
block|}
if|else if
condition|(
name|getItype
argument_list|(
name|idx
argument_list|)
operator|<
literal|0
condition|)
block|{
comment|//config
name|InstrOfferingConfig
name|config
init|=
operator|new
name|InstrOfferingConfigDAO
argument_list|()
operator|.
name|get
argument_list|(
operator|-
name|getItype
argument_list|(
name|idx
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|RelatedCourseInfo
name|owner
init|=
operator|new
name|RelatedCourseInfo
argument_list|()
decl_stmt|;
name|owner
operator|.
name|setOwner
argument_list|(
name|config
argument_list|)
expr_stmt|;
return|return
name|owner
return|;
block|}
if|else if
condition|(
name|getClassNumber
argument_list|(
name|idx
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|//class
name|Class_
name|clazz
init|=
operator|new
name|Class_DAO
argument_list|()
operator|.
name|get
argument_list|(
name|getClassNumber
argument_list|(
name|idx
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|RelatedCourseInfo
name|owner
init|=
operator|new
name|RelatedCourseInfo
argument_list|()
decl_stmt|;
name|owner
operator|.
name|setOwner
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
return|return
name|owner
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setRelatedCourseInfos
parameter_list|(
name|CourseEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getRelatedCourses
argument_list|()
operator|==
literal|null
condition|)
name|event
operator|.
name|setRelatedCourses
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|getRelatedCourses
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|getSubjectArea
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|RelatedCourseInfo
name|course
init|=
name|getRelatedCourseInfo
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|!=
literal|null
condition|)
block|{
name|event
operator|.
name|getRelatedCourses
argument_list|()
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|course
operator|.
name|setEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Set
argument_list|<
name|Long
argument_list|>
name|getStudentIds
parameter_list|()
block|{
name|HashSet
argument_list|<
name|Long
argument_list|>
name|ret
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|getSubjectArea
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|RelatedCourseInfo
name|course
init|=
name|getRelatedCourseInfo
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|addAll
argument_list|(
name|course
operator|.
name|getStudentIds
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|Collection
name|getClassNumbers
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
name|Vector
name|ret
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|boolean
name|contains
init|=
literal|false
decl_stmt|;
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|getItype
argument_list|(
name|idx
argument_list|)
operator|>
literal|0
condition|?
operator|new
name|SchedulingSubpartDAO
argument_list|()
operator|.
name|get
argument_list|(
name|getItype
argument_list|(
name|idx
argument_list|)
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|subpart
operator|!=
literal|null
condition|)
block|{
name|TreeSet
name|classes
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
argument_list|)
decl_stmt|;
name|classes
operator|.
name|addAll
argument_list|(
operator|new
name|Class_DAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct c from Class_ c "
operator|+
literal|"where c.schedulingSubpart.uniqueId=:schedulingSubpartId"
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|200
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"schedulingSubpartId"
argument_list|,
name|getItype
argument_list|(
name|idx
argument_list|)
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|getClassNumber
argument_list|(
name|idx
argument_list|)
argument_list|)
condition|)
name|contains
operator|=
literal|true
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|IdValue
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|c
operator|.
name|getSectionNumberString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|IdValue
argument_list|(
operator|-
literal|1L
argument_list|,
literal|"N/A"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|contains
condition|)
name|setClassNumber
argument_list|(
name|idx
argument_list|,
operator|-
literal|1L
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|setClassNumber
argument_list|(
name|idx
argument_list|,
operator|(
operator|(
name|IdValue
operator|)
name|ret
operator|.
name|firstElement
argument_list|()
operator|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|ret
operator|.
name|insertElementAt
argument_list|(
operator|new
name|IdValue
argument_list|(
operator|-
literal|1L
argument_list|,
literal|"-"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|// get possible locations for the event based on entered criteria
specifier|public
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Location
argument_list|>
name|getPossibleLocations
parameter_list|()
block|{
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Location
argument_list|>
name|locations
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|String
name|query
decl_stmt|;
if|if
condition|(
name|iLookAtNearLocations
condition|)
block|{
name|query
operator|=
literal|"select r from Room r, Building b where b.uniqueId = :buildingId and "
operator|+
literal|"(r.building=b or ((((r.coordinateX - b.coordinateX)*(r.coordinateX - b.coordinateX)) +"
operator|+
literal|"((r.coordinateY - b.coordinateY)*(r.coordinateY - b.coordinateY)))"
operator|+
literal|"< 67*67))"
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
literal|"select r from Room r where r.building.uniqueId = :buildingId"
expr_stmt|;
block|}
if|if
condition|(
name|iMinCapacity
operator|!=
literal|null
operator|&&
name|iMinCapacity
operator|!=
literal|""
condition|)
block|{
name|query
operator|+=
literal|" and r.capacity>= :minCapacity"
expr_stmt|;
block|}
if|if
condition|(
name|iMaxCapacity
operator|!=
literal|null
operator|&&
name|iMaxCapacity
operator|!=
literal|""
condition|)
block|{
name|query
operator|+=
literal|" and r.capacity<= :maxCapacity"
expr_stmt|;
block|}
if|if
condition|(
name|iRoomNumber
operator|!=
literal|null
operator|&&
name|iRoomNumber
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|query
operator|+=
literal|" and r.roomNumber like (:roomNumber)"
expr_stmt|;
block|}
name|Query
name|hibQuery
init|=
operator|new
name|LocationDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|hibQuery
operator|.
name|setLong
argument_list|(
literal|"buildingId"
argument_list|,
name|iBuildingId
argument_list|)
expr_stmt|;
if|if
condition|(
name|iMinCapacity
operator|!=
literal|null
operator|&&
name|iMinCapacity
operator|!=
literal|""
condition|)
block|{
name|hibQuery
operator|.
name|setInteger
argument_list|(
literal|"minCapacity"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|iMinCapacity
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iMaxCapacity
operator|!=
literal|null
operator|&&
name|iMaxCapacity
operator|!=
literal|""
condition|)
block|{
name|hibQuery
operator|.
name|setInteger
argument_list|(
literal|"maxCapacity"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|iMaxCapacity
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iRoomNumber
operator|!=
literal|null
operator|&&
name|iRoomNumber
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|hibQuery
operator|.
name|setString
argument_list|(
literal|"roomNumber"
argument_list|,
name|iRoomNumber
operator|.
name|replaceAll
argument_list|(
literal|"\\*"
argument_list|,
literal|"%"
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|hibQuery
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|location
operator|.
name|getPermanentId
argument_list|()
operator|!=
literal|null
condition|)
name|locations
operator|.
name|put
argument_list|(
name|location
operator|.
name|getPermanentId
argument_list|()
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
return|return
name|locations
return|;
block|}
block|}
end_class

end_unit

