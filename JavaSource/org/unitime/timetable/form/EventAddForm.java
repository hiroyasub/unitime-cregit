begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionErrors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Building
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|ComboBoxLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_comment
comment|/**  * @author Zuzana Mullerova  */
end_comment

begin_class
specifier|public
class|class
name|EventAddForm
extends|extends
name|ActionForm
block|{
comment|//	private EventModel iModel;
specifier|private
name|String
name|iOp
decl_stmt|;
specifier|private
name|String
name|iEventType
decl_stmt|;
specifier|private
name|Long
name|iSessionId
decl_stmt|;
specifier|private
name|int
name|iStartTime
decl_stmt|;
specifier|private
name|int
name|iStopTime
decl_stmt|;
specifier|private
name|String
name|iLocationType
decl_stmt|;
specifier|private
name|Vector
argument_list|<
name|String
argument_list|>
name|iLocationTypes
init|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Long
name|iBuildingId
decl_stmt|;
specifier|private
name|String
name|iRoomNumber
decl_stmt|;
specifier|private
name|TreeSet
argument_list|<
name|Date
argument_list|>
name|iMeetingDates
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
specifier|private
name|String
name|iMinCapacity
decl_stmt|;
specifier|private
name|String
name|iMaxCapacity
decl_stmt|;
specifier|public
name|ActionErrors
name|validate
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|ActionErrors
name|errors
init|=
operator|new
name|ActionErrors
argument_list|()
decl_stmt|;
if|if
condition|(
name|iStartTime
operator|>
name|iStopTime
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"stopDate"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Start Time must be earlier than Stop Time. It is not possible to enter overnight events."
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSessionId
operator|==
literal|null
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"session"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"No academic session is selected."
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iMeetingDates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"dates"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"No event dates are selected."
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iBuildingId
operator|==
operator|-
literal|1
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"building"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"No building has been selected."
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|min
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|iMinCapacity
operator|!=
literal|null
operator|&&
name|iMinCapacity
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|min
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|iMinCapacity
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"minCapacity"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Minimum room capacity should be a number or blank (no lower limit)."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|max
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|iMaxCapacity
operator|!=
literal|null
operator|&&
name|iMaxCapacity
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|min
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|iMaxCapacity
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"maxCapacity"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Maximum room capacity should be a number or blank (no upper limit)."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|min
operator|>
name|max
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"minMaxCapacity"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Maximum room capacity should not be smaller than minimum room capacity."
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|errors
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
comment|//		iModel = null;
name|iOp
operator|=
literal|null
expr_stmt|;
name|iEventType
operator|=
name|Event
operator|.
name|sEventTypes
index|[
name|Event
operator|.
name|sEventTypeSpecial
index|]
expr_stmt|;
name|iSessionId
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|iSessionId
operator|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|iStartTime
operator|=
literal|90
expr_stmt|;
name|iStopTime
operator|=
literal|210
expr_stmt|;
name|iLocationType
operator|=
literal|null
expr_stmt|;
name|iMeetingDates
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iMinCapacity
operator|=
literal|null
expr_stmt|;
name|iMaxCapacity
operator|=
literal|null
expr_stmt|;
block|}
comment|// load event info from session attribute Event
specifier|public
name|void
name|load
parameter_list|(
name|HttpSession
name|session
parameter_list|)
block|{
name|iEventType
operator|=
operator|(
name|String
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.EventType"
argument_list|)
expr_stmt|;
name|iSessionId
operator|=
operator|(
name|Long
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.SessionId"
argument_list|)
expr_stmt|;
name|iStartTime
operator|=
operator|(
name|Integer
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.StartTime"
argument_list|)
expr_stmt|;
name|iStopTime
operator|=
operator|(
name|Integer
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.StopTime"
argument_list|)
expr_stmt|;
name|iLocationType
operator|=
operator|(
name|String
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.LocationType"
argument_list|)
expr_stmt|;
name|iLocationTypes
operator|=
operator|(
name|Vector
argument_list|<
name|String
argument_list|>
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.LocationTypes"
argument_list|)
expr_stmt|;
name|iMeetingDates
operator|=
operator|(
name|TreeSet
argument_list|<
name|Date
argument_list|>
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.MeetingDates"
argument_list|)
expr_stmt|;
name|iMinCapacity
operator|=
operator|(
name|String
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.MinCapacity"
argument_list|)
expr_stmt|;
name|iMaxCapacity
operator|=
operator|(
name|String
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.MaxCapacity"
argument_list|)
expr_stmt|;
name|iBuildingId
operator|=
operator|(
name|Long
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.BuildingId"
argument_list|)
expr_stmt|;
name|iRoomNumber
operator|=
operator|(
name|String
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Event.RoomNumber"
argument_list|)
expr_stmt|;
block|}
comment|// save event parameters to session attribute Event
specifier|public
name|void
name|save
parameter_list|(
name|HttpSession
name|session
parameter_list|)
block|{
name|session
operator|.
name|setAttribute
argument_list|(
literal|"Event.EventType"
argument_list|,
name|iEventType
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"Event.SessionId"
argument_list|,
name|iSessionId
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"Event.StartTime"
argument_list|,
name|iStartTime
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"Event.StopTime"
argument_list|,
name|iStopTime
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"Event.LocationType"
argument_list|,
name|iLocationType
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"Event.LocationTypes"
argument_list|,
name|iLocationTypes
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"Event.MeetingDates"
argument_list|,
name|iMeetingDates
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"Event.MinCapacity"
argument_list|,
name|iMinCapacity
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"Event.MaxCapacity"
argument_list|,
name|iMaxCapacity
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"Event.BuildingId"
argument_list|,
name|iBuildingId
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"Event.RoomNumber"
argument_list|,
name|iRoomNumber
argument_list|)
expr_stmt|;
comment|//		session.setAttribute("Event.");
comment|//		session.setAttribute("Event.");
block|}
comment|// load event dates selected by user
specifier|public
name|void
name|loadDates
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|iMeetingDates
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|iSessionId
operator|==
literal|null
condition|)
return|return;
name|Session
name|s
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|iSessionId
argument_list|)
decl_stmt|;
name|int
name|startMonth
init|=
name|s
operator|.
name|getStartMonth
argument_list|()
decl_stmt|;
name|int
name|endMonth
init|=
name|s
operator|.
name|getEndMonth
argument_list|()
decl_stmt|;
name|int
name|year
init|=
name|s
operator|.
name|getYear
argument_list|()
decl_stmt|;
name|Calendar
name|today
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|today
operator|.
name|setTime
argument_list|(
name|s
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|today
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|today
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|,
operator|(
name|startMonth
operator|+
literal|12
operator|)
operator|%
literal|12
argument_list|)
expr_stmt|;
name|today
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|,
name|year
operator|+
operator|(
name|startMonth
operator|<
literal|0
condition|?
operator|-
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
name|startMonth
operator|>=
literal|12
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|m
init|=
name|startMonth
init|;
name|m
operator|<=
name|endMonth
condition|;
name|m
operator|++
control|)
block|{
name|int
name|daysOfMonth
init|=
name|DateUtils
operator|.
name|getNrDaysOfMonth
argument_list|(
name|m
argument_list|,
name|year
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<=
name|daysOfMonth
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
literal|"1"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"cal_val_"
operator|+
operator|(
operator|(
literal|12
operator|+
name|m
operator|)
operator|%
literal|12
operator|)
operator|+
literal|"_"
operator|+
name|d
argument_list|)
argument_list|)
condition|)
block|{
name|iMeetingDates
operator|.
name|add
argument_list|(
name|today
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|today
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|TreeSet
argument_list|<
name|Date
argument_list|>
name|getMeetingDates
parameter_list|()
block|{
return|return
name|iMeetingDates
return|;
block|}
comment|// display calendar for event dates
specifier|public
name|String
name|getDatesTable
parameter_list|()
block|{
if|if
condition|(
name|iSessionId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Session
name|s
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|iSessionId
argument_list|)
decl_stmt|;
name|int
name|startMonth
init|=
name|s
operator|.
name|getStartMonth
argument_list|()
decl_stmt|;
name|int
name|endMonth
init|=
name|s
operator|.
name|getEndMonth
argument_list|()
decl_stmt|;
name|int
name|year
init|=
name|s
operator|.
name|getYear
argument_list|()
decl_stmt|;
name|Calendar
name|today
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|today
operator|.
name|setTime
argument_list|(
name|s
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|today
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|today
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|,
operator|(
name|startMonth
operator|+
literal|12
operator|)
operator|%
literal|12
argument_list|)
expr_stmt|;
name|today
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|,
name|year
operator|+
operator|(
name|startMonth
operator|<
literal|0
condition|?
operator|-
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
name|startMonth
operator|>=
literal|12
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
name|String
name|pattern
init|=
literal|"["
decl_stmt|,
name|border
init|=
literal|"["
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
name|startMonth
init|;
name|m
operator|<=
name|endMonth
condition|;
name|m
operator|++
control|)
block|{
if|if
condition|(
name|m
operator|!=
name|startMonth
condition|)
block|{
name|pattern
operator|+=
literal|","
expr_stmt|;
name|border
operator|+=
literal|","
expr_stmt|;
block|}
name|pattern
operator|+=
literal|"["
expr_stmt|;
name|border
operator|+=
literal|"["
expr_stmt|;
name|int
name|daysOfMonth
init|=
name|DateUtils
operator|.
name|getNrDaysOfMonth
argument_list|(
name|m
argument_list|,
name|year
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<=
name|daysOfMonth
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
name|d
operator|>
literal|1
condition|)
block|{
name|pattern
operator|+=
literal|","
expr_stmt|;
name|border
operator|+=
literal|","
expr_stmt|;
block|}
name|pattern
operator|+=
operator|(
name|iMeetingDates
operator|.
name|contains
argument_list|(
name|today
operator|.
name|getTime
argument_list|()
argument_list|)
condition|?
literal|"'1'"
else|:
literal|"'0'"
operator|)
expr_stmt|;
name|today
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|border
operator|+=
name|s
operator|.
name|getBorder
argument_list|(
name|d
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
name|pattern
operator|+=
literal|"]"
expr_stmt|;
name|border
operator|+=
literal|"]"
expr_stmt|;
block|}
name|pattern
operator|+=
literal|"]"
expr_stmt|;
name|border
operator|+=
literal|"]"
expr_stmt|;
return|return
literal|"<script language='JavaScript' type='text/javascript' src='scripts/datepatt.js'></script>"
operator|+
literal|"<script language='JavaScript'>"
operator|+
literal|"calGenerate("
operator|+
name|year
operator|+
literal|","
operator|+
name|startMonth
operator|+
literal|","
operator|+
name|endMonth
operator|+
literal|","
operator|+
name|pattern
operator|+
literal|","
operator|+
literal|"['1','0'],"
operator|+
literal|"['Selected','Not Selected'],"
operator|+
literal|"['rgb(240,240,50)','rgb(240,240,240)'],"
operator|+
literal|"'1',"
operator|+
name|border
operator|+
literal|",true,true);"
operator|+
literal|"</script>"
return|;
block|}
comment|//	public EventModel getModel() {return iModel;}
comment|//	public void setModel(EventModel model) {iModel=model;}
specifier|public
name|String
name|getOp
parameter_list|()
block|{
return|return
name|iOp
return|;
block|}
specifier|public
name|void
name|setOp
parameter_list|(
name|String
name|op
parameter_list|)
block|{
name|iOp
operator|=
name|op
expr_stmt|;
block|}
specifier|public
name|String
index|[]
name|getEventTypes
parameter_list|()
block|{
name|String
index|[]
name|types
init|=
operator|new
name|String
index|[]
block|{
name|Event
operator|.
name|sEventTypes
index|[
name|Event
operator|.
name|sEventTypeCourse
index|]
block|,
name|Event
operator|.
name|sEventTypes
index|[
name|Event
operator|.
name|sEventTypeSpecial
index|]
block|}
decl_stmt|;
return|return
name|types
return|;
block|}
specifier|public
name|String
name|getEventType
parameter_list|()
block|{
return|return
name|iEventType
return|;
block|}
specifier|public
name|void
name|setEventType
parameter_list|(
name|String
name|eventType
parameter_list|)
block|{
name|iEventType
operator|=
name|eventType
expr_stmt|;
block|}
specifier|public
name|Vector
argument_list|<
name|ComboBoxLookup
argument_list|>
name|getAcademicSessions
parameter_list|()
block|{
name|Vector
argument_list|<
name|ComboBoxLookup
argument_list|>
name|aSessions
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|Date
name|today
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|Session
operator|.
name|getAllSessions
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Session
name|session
init|=
operator|(
name|Session
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//if (!session.getStatusType().canOwnerView()) continue;
comment|//if (session.getClassesEndDateTime().compareTo(today)<0) continue;
name|aSessions
operator|.
name|add
argument_list|(
operator|new
name|ComboBoxLookup
argument_list|(
name|session
operator|.
name|getLabel
argument_list|()
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|aSessions
return|;
block|}
specifier|public
name|Long
name|getSessionId
parameter_list|()
block|{
return|return
name|iSessionId
return|;
block|}
specifier|public
name|void
name|setSessionId
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|iSessionId
operator|=
name|sessionId
expr_stmt|;
block|}
specifier|public
name|int
name|getStartTime
parameter_list|()
block|{
return|return
name|iStartTime
return|;
block|}
specifier|public
name|void
name|setStartTime
parameter_list|(
name|int
name|startTime
parameter_list|)
block|{
name|iStartTime
operator|=
name|startTime
expr_stmt|;
block|}
specifier|public
name|int
name|getStopTime
parameter_list|()
block|{
return|return
name|iStopTime
return|;
block|}
specifier|public
name|void
name|setStopTime
parameter_list|(
name|int
name|stopTime
parameter_list|)
block|{
name|iStopTime
operator|=
name|stopTime
expr_stmt|;
block|}
specifier|public
name|Vector
argument_list|<
name|ComboBoxLookup
argument_list|>
name|getLocationTypes
parameter_list|()
block|{
name|Vector
argument_list|<
name|ComboBoxLookup
argument_list|>
name|ltypes
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|ltypes
operator|.
name|add
argument_list|(
operator|new
name|ComboBoxLookup
argument_list|(
literal|"N/A yet"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ltypes
return|;
block|}
specifier|public
name|String
name|getLocationType
parameter_list|()
block|{
return|return
name|iLocationType
return|;
block|}
specifier|public
name|void
name|setLocationType
parameter_list|(
name|String
name|locationType
parameter_list|)
block|{
name|iLocationType
operator|=
name|locationType
expr_stmt|;
block|}
comment|//the index i goes in five minute increments, but displayed are 15 minute increments
specifier|public
name|Vector
argument_list|<
name|ComboBoxLookup
argument_list|>
name|getTimes
parameter_list|()
block|{
name|Vector
argument_list|<
name|ComboBoxLookup
argument_list|>
name|times
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|int
name|hour
decl_stmt|;
name|int
name|minute
decl_stmt|;
name|String
name|ampm
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|288
condition|;
name|i
operator|=
name|i
operator|+
literal|3
control|)
block|{
name|hour
operator|=
operator|(
name|i
operator|/
literal|12
operator|)
operator|%
literal|12
expr_stmt|;
if|if
condition|(
name|hour
operator|==
literal|0
condition|)
name|hour
operator|=
literal|12
expr_stmt|;
name|minute
operator|=
name|i
operator|%
literal|12
operator|*
literal|5
expr_stmt|;
if|if
condition|(
name|i
operator|/
literal|144
operator|==
literal|0
condition|)
name|ampm
operator|=
literal|"am"
expr_stmt|;
else|else
name|ampm
operator|=
literal|"pm"
expr_stmt|;
name|times
operator|.
name|add
argument_list|(
operator|new
name|ComboBoxLookup
argument_list|(
name|hour
operator|+
literal|":"
operator|+
operator|(
name|minute
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|minute
operator|+
literal|" "
operator|+
name|ampm
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|times
return|;
block|}
specifier|public
name|List
name|getBuildings
parameter_list|()
block|{
return|return
operator|(
name|iSessionId
operator|==
literal|null
condition|?
literal|null
else|:
name|Building
operator|.
name|findAll
argument_list|(
name|iSessionId
argument_list|)
operator|)
return|;
block|}
specifier|public
name|Long
name|getBuildingId
parameter_list|()
block|{
return|return
name|iBuildingId
return|;
block|}
specifier|public
name|void
name|setBuildingId
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
name|iBuildingId
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|String
name|getRoomNumber
parameter_list|()
block|{
return|return
name|iRoomNumber
return|;
block|}
specifier|public
name|void
name|setRoomNumber
parameter_list|(
name|String
name|roomNr
parameter_list|)
block|{
name|iRoomNumber
operator|=
name|roomNr
expr_stmt|;
block|}
specifier|public
name|String
name|getMinCapacity
parameter_list|()
block|{
return|return
name|iMinCapacity
return|;
block|}
specifier|public
name|void
name|setMinCapacity
parameter_list|(
name|String
name|minCapacity
parameter_list|)
block|{
name|iMinCapacity
operator|=
name|minCapacity
expr_stmt|;
block|}
specifier|public
name|String
name|getMaxCapacity
parameter_list|()
block|{
return|return
name|iMaxCapacity
return|;
block|}
specifier|public
name|void
name|setMaxCapacity
parameter_list|(
name|String
name|minCapacity
parameter_list|)
block|{
name|iMaxCapacity
operator|=
name|minCapacity
expr_stmt|;
block|}
block|}
end_class

end_unit

