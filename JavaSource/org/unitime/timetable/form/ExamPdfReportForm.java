begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionErrors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|exam
operator|.
name|AbbvExamScheduleByCourseReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|exam
operator|.
name|AbbvScheduleByCourseReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|exam
operator|.
name|ConflictsByCourseAndInstructorReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|exam
operator|.
name|ConflictsByCourseAndStudentReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|exam
operator|.
name|ExamScheduleByPeriodReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|exam
operator|.
name|ExamVerificationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|exam
operator|.
name|PeriodChartReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|exam
operator|.
name|ScheduleByCourseReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|exam
operator|.
name|ScheduleByPeriodReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|exam
operator|.
name|ScheduleByRoomReport
import|;
end_import

begin_comment
comment|/*  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ExamPdfReportForm
extends|extends
name|ExamReportForm
block|{
specifier|private
name|String
index|[]
name|iReports
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iMode
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iAll
init|=
literal|false
decl_stmt|;
specifier|private
name|String
index|[]
name|iSubjects
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iDispRooms
init|=
literal|true
decl_stmt|;
specifier|private
name|String
name|iNoRoom
init|=
literal|""
decl_stmt|;
specifier|private
name|boolean
name|iDirect
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|iM2d
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|iBtb
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|iLimit
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iTotals
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|iRoomCodes
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|sRegisteredReports
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|String
index|[]
name|sModes
init|=
block|{
literal|"PDF (Letter)"
block|,
literal|"PDF (Ledger)"
block|,
literal|"Text"
block|}
decl_stmt|;
static|static
block|{
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"Schedule by Course"
argument_list|,
name|ScheduleByCourseReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"Student Conflicts"
argument_list|,
name|ConflictsByCourseAndStudentReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"Instuctor Conflicts"
argument_list|,
name|ConflictsByCourseAndInstructorReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"Schedule by Period"
argument_list|,
name|ScheduleByPeriodReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"Schedule by Period (Exams)"
argument_list|,
name|ExamScheduleByPeriodReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"Schedule by Room"
argument_list|,
name|ScheduleByRoomReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"Period Chart"
argument_list|,
name|PeriodChartReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"Verification"
argument_list|,
name|ExamVerificationReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"Abbreviated Schedule"
argument_list|,
name|AbbvScheduleByCourseReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"Abbreviated Schedule (Exams)"
argument_list|,
name|AbbvExamScheduleByCourseReport
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ActionErrors
name|validate
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|ActionErrors
name|errors
init|=
name|super
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|iReports
operator|==
literal|null
operator|||
name|iReports
operator|.
name|length
operator|==
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"reports"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"No report selected."
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iAll
operator|&&
operator|(
name|iSubjects
operator|==
literal|null
operator|||
name|iSubjects
operator|.
name|length
operator|==
literal|0
operator|)
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"subjects"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"No subject area selected."
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|errors
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|super
operator|.
name|reset
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|iReports
operator|=
literal|null
expr_stmt|;
name|iMode
operator|=
name|sModes
index|[
literal|0
index|]
expr_stmt|;
name|iAll
operator|=
literal|false
expr_stmt|;
name|iDispRooms
operator|=
literal|false
expr_stmt|;
name|iNoRoom
operator|=
literal|null
expr_stmt|;
name|iDirect
operator|=
literal|false
expr_stmt|;
name|iM2d
operator|=
literal|false
expr_stmt|;
name|iBtb
operator|=
literal|false
expr_stmt|;
name|iLimit
operator|=
literal|null
expr_stmt|;
name|iTotals
operator|=
literal|false
expr_stmt|;
name|iRoomCodes
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|setDefaults
parameter_list|()
block|{
name|iAll
operator|=
literal|true
expr_stmt|;
name|iDispRooms
operator|=
literal|true
expr_stmt|;
name|iNoRoom
operator|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.report.noroom"
argument_list|)
expr_stmt|;
name|iDirect
operator|=
literal|true
expr_stmt|;
name|iM2d
operator|=
operator|(
name|getExamType
argument_list|()
operator|==
name|Exam
operator|.
name|sExamTypeFinal
condition|?
literal|true
else|:
literal|false
operator|)
expr_stmt|;
name|iTotals
operator|=
operator|(
name|getExamType
argument_list|()
operator|==
name|Exam
operator|.
name|sExamTypeFinal
condition|?
literal|true
else|:
literal|false
operator|)
expr_stmt|;
name|iRoomCodes
operator|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.report.roomcode"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
index|[]
name|getReports
parameter_list|()
block|{
return|return
name|iReports
return|;
block|}
specifier|public
name|void
name|setReports
parameter_list|(
name|String
index|[]
name|reports
parameter_list|)
block|{
name|iReports
operator|=
name|reports
expr_stmt|;
block|}
specifier|public
name|String
name|getMode
parameter_list|()
block|{
return|return
name|iMode
return|;
block|}
specifier|public
name|void
name|setMode
parameter_list|(
name|String
name|mode
parameter_list|)
block|{
name|iMode
operator|=
name|mode
expr_stmt|;
block|}
specifier|public
name|int
name|getModeIdx
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sModes
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|sModes
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|iMode
argument_list|)
condition|)
return|return
name|i
return|;
return|return
literal|0
return|;
block|}
specifier|public
name|boolean
name|getAll
parameter_list|()
block|{
return|return
name|iAll
return|;
block|}
specifier|public
name|void
name|setAll
parameter_list|(
name|boolean
name|all
parameter_list|)
block|{
name|iAll
operator|=
name|all
expr_stmt|;
block|}
specifier|public
name|String
index|[]
name|getSubjects
parameter_list|()
block|{
return|return
name|iSubjects
return|;
block|}
specifier|public
name|void
name|setSubjects
parameter_list|(
name|String
index|[]
name|subjects
parameter_list|)
block|{
name|iSubjects
operator|=
name|subjects
expr_stmt|;
block|}
specifier|public
name|boolean
name|getDispRooms
parameter_list|()
block|{
return|return
name|iDispRooms
return|;
block|}
specifier|public
name|void
name|setDispRooms
parameter_list|(
name|boolean
name|dispRooms
parameter_list|)
block|{
name|iDispRooms
operator|=
name|dispRooms
expr_stmt|;
block|}
specifier|public
name|String
name|getNoRoom
parameter_list|()
block|{
return|return
name|iNoRoom
return|;
block|}
specifier|public
name|void
name|setNoRoom
parameter_list|(
name|String
name|noRoom
parameter_list|)
block|{
name|iNoRoom
operator|=
name|noRoom
expr_stmt|;
block|}
specifier|public
name|boolean
name|getBtb
parameter_list|()
block|{
return|return
name|iBtb
return|;
block|}
specifier|public
name|void
name|setBtb
parameter_list|(
name|boolean
name|btb
parameter_list|)
block|{
name|iBtb
operator|=
name|btb
expr_stmt|;
block|}
specifier|public
name|boolean
name|getM2d
parameter_list|()
block|{
return|return
name|iM2d
return|;
block|}
specifier|public
name|void
name|setM2d
parameter_list|(
name|boolean
name|m2d
parameter_list|)
block|{
name|iM2d
operator|=
name|m2d
expr_stmt|;
block|}
specifier|public
name|boolean
name|getDirect
parameter_list|()
block|{
return|return
name|iDirect
return|;
block|}
specifier|public
name|void
name|setDirect
parameter_list|(
name|boolean
name|direct
parameter_list|)
block|{
name|iDirect
operator|=
name|direct
expr_stmt|;
block|}
specifier|public
name|String
name|getLimit
parameter_list|()
block|{
return|return
name|iLimit
return|;
block|}
specifier|public
name|void
name|setLimit
parameter_list|(
name|String
name|limit
parameter_list|)
block|{
name|iLimit
operator|=
name|limit
expr_stmt|;
block|}
specifier|public
name|boolean
name|getTotals
parameter_list|()
block|{
return|return
name|iTotals
return|;
block|}
specifier|public
name|void
name|setTotals
parameter_list|(
name|boolean
name|totals
parameter_list|)
block|{
name|iTotals
operator|=
name|totals
expr_stmt|;
block|}
specifier|public
name|String
name|getRoomCodes
parameter_list|()
block|{
return|return
name|iRoomCodes
return|;
block|}
specifier|public
name|void
name|setRoomCodes
parameter_list|(
name|String
name|roomCodes
parameter_list|)
block|{
name|iRoomCodes
operator|=
name|roomCodes
expr_stmt|;
block|}
specifier|public
name|TreeSet
argument_list|<
name|String
argument_list|>
name|getAllReports
parameter_list|()
block|{
return|return
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|sRegisteredReports
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
index|[]
name|getModes
parameter_list|()
block|{
return|return
name|sModes
return|;
block|}
block|}
end_class

end_unit

