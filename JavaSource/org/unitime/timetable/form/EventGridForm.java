begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Building
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_class
specifier|public
class|class
name|EventGridForm
extends|extends
name|EventAddForm
block|{
specifier|private
name|String
name|iTable
init|=
literal|null
decl_stmt|;
specifier|public
name|void
name|setTable
parameter_list|(
name|String
name|table
parameter_list|)
block|{
name|iTable
operator|=
name|table
expr_stmt|;
block|}
specifier|public
name|String
name|getTable
parameter_list|()
block|{
return|return
name|iTable
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|RoomType
argument_list|>
name|getAllRoomTypes
parameter_list|()
block|{
name|Collection
argument_list|<
name|RoomType
argument_list|>
name|ret
init|=
name|RoomType
operator|.
name|findAll
argument_list|()
decl_stmt|;
if|if
condition|(
name|getSessionId
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|RoomType
argument_list|>
name|i
init|=
name|ret
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomType
name|t
init|=
operator|(
name|RoomType
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|countManagableRooms
argument_list|(
name|getSessionId
argument_list|()
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|boolean
name|isHasOutsideLocations
parameter_list|()
block|{
if|if
condition|(
name|getSessionId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|Session
name|session
init|=
operator|new
name|SessionDAO
argument_list|()
operator|.
name|get
argument_list|(
name|getSessionId
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|hasRoomType
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RoomType
name|roomType
range|:
name|RoomType
operator|.
name|findAll
argument_list|(
literal|false
argument_list|)
control|)
block|{
if|if
condition|(
name|roomType
operator|.
name|countManagableRooms
argument_list|(
name|getSessionId
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|List
name|getBuildings
parameter_list|()
block|{
if|if
condition|(
name|getSessionId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|List
name|ret
init|=
name|Building
operator|.
name|findAll
argument_list|(
name|getSessionId
argument_list|()
argument_list|)
decl_stmt|;
name|buildings
label|:
for|for
control|(
name|Iterator
name|i
init|=
name|ret
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Building
name|b
init|=
operator|(
name|Building
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|RoomType
name|roomType
range|:
name|RoomType
operator|.
name|findAll
argument_list|(
literal|true
argument_list|)
control|)
block|{
if|if
condition|(
name|roomType
operator|.
name|countManagableRoomsOfBuilding
argument_list|(
name|b
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
continue|continue
name|buildings
continue|;
block|}
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

