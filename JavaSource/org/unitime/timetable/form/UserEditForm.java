begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionErrors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|authentication
operator|.
name|encoding
operator|.
name|MessageDigestPasswordEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|User
import|;
end_import

begin_comment
comment|/**   *   * @author Tomas Muller  *   */
end_comment

begin_class
specifier|public
class|class
name|UserEditForm
extends|extends
name|ActionForm
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|8703608968811726905L
decl_stmt|;
specifier|private
name|String
name|iOp
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iExternalId
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iName
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iPassword
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iToken
init|=
literal|null
decl_stmt|;
specifier|public
name|ActionErrors
name|validate
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|ActionErrors
name|errors
init|=
operator|new
name|ActionErrors
argument_list|()
decl_stmt|;
if|if
condition|(
name|iExternalId
operator|==
literal|null
operator|||
name|iExternalId
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"externalId"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.required"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
operator|!
literal|"Update"
operator|.
name|equals
argument_list|(
name|getOp
argument_list|()
argument_list|)
operator|&&
name|User
operator|.
name|findByExternalId
argument_list|(
name|getExternalId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"externalId"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.exists"
argument_list|,
name|iExternalId
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iName
operator|==
literal|null
operator|||
name|iName
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"name"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.required"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
else|else
block|{
try|try
block|{
name|User
name|user
init|=
name|User
operator|.
name|findByUserName
argument_list|(
name|iName
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
operator|&&
operator|!
name|user
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|iExternalId
argument_list|)
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"name"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.exists"
argument_list|,
name|iName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"name"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iPassword
operator|==
literal|null
operator|||
name|iPassword
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"password"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.required"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|errors
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|iOp
operator|=
literal|"List"
expr_stmt|;
name|iExternalId
operator|=
literal|null
expr_stmt|;
name|iName
operator|=
literal|null
expr_stmt|;
name|iPassword
operator|=
literal|null
expr_stmt|;
name|iToken
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getOp
parameter_list|()
block|{
return|return
name|iOp
return|;
block|}
specifier|public
name|void
name|setOp
parameter_list|(
name|String
name|op
parameter_list|)
block|{
name|iOp
operator|=
name|op
expr_stmt|;
block|}
specifier|public
name|String
name|getExternalId
parameter_list|()
block|{
return|return
name|iExternalId
return|;
block|}
specifier|public
name|void
name|setExternalId
parameter_list|(
name|String
name|externalId
parameter_list|)
block|{
name|iExternalId
operator|=
name|externalId
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|iPassword
return|;
block|}
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|iPassword
operator|=
name|password
expr_stmt|;
block|}
specifier|public
name|String
name|getToken
parameter_list|()
block|{
return|return
name|iToken
return|;
block|}
specifier|public
name|void
name|setToken
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|iToken
operator|=
name|token
expr_stmt|;
block|}
specifier|public
name|void
name|load
parameter_list|(
name|User
name|user
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
name|setOp
argument_list|(
literal|"Save"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setOp
argument_list|(
literal|"Update"
argument_list|)
expr_stmt|;
name|setExternalId
argument_list|(
name|user
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|setName
argument_list|(
name|user
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|setPassword
argument_list|(
name|user
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|String
name|encodePassword
parameter_list|(
name|String
name|clearTextPassword
parameter_list|)
block|{
return|return
operator|new
name|MessageDigestPasswordEncoder
argument_list|(
literal|"MD5"
argument_list|,
literal|true
argument_list|)
operator|.
name|encodePassword
argument_list|(
name|clearTextPassword
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|void
name|saveOrUpdate
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
literal|"Update"
operator|.
name|equals
argument_list|(
name|getOp
argument_list|()
argument_list|)
condition|)
block|{
name|User
name|u
init|=
name|User
operator|.
name|findByExternalId
argument_list|(
name|getExternalId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|u
operator|.
name|getUsername
argument_list|()
operator|.
name|equals
argument_list|(
name|getName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|getPassword
argument_list|()
operator|.
name|equals
argument_list|(
name|u
operator|.
name|getPassword
argument_list|()
argument_list|)
condition|)
block|{
name|u
operator|.
name|setPassword
argument_list|(
name|encodePassword
argument_list|(
name|getPassword
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|update
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|User
name|w
init|=
operator|new
name|User
argument_list|()
decl_stmt|;
name|w
operator|.
name|setExternalUniqueId
argument_list|(
name|u
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|.
name|setUsername
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getPassword
argument_list|()
operator|.
name|equals
argument_list|(
name|u
operator|.
name|getPassword
argument_list|()
argument_list|)
condition|)
block|{
name|w
operator|.
name|setPassword
argument_list|(
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|w
operator|.
name|setPassword
argument_list|(
name|encodePassword
argument_list|(
name|getPassword
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|delete
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|User
name|u
init|=
operator|new
name|User
argument_list|()
decl_stmt|;
name|u
operator|.
name|setExternalUniqueId
argument_list|(
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|u
operator|.
name|setUsername
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|u
operator|.
name|setPassword
argument_list|(
name|encodePassword
argument_list|(
name|getPassword
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|delete
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|User
name|u
init|=
name|User
operator|.
name|findByExternalId
argument_list|(
name|getExternalId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|u
operator|!=
literal|null
condition|)
name|hibSession
operator|.
name|delete
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

