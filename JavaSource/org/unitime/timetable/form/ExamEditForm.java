begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionErrors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|InstrOfferingConfigComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|SchedulingSubpartComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstrOfferingConfigDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SchedulingSubpartDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DynamicList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DynamicListObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|IdValue
import|;
end_import

begin_class
specifier|public
class|class
name|ExamEditForm
extends|extends
name|PreferencesForm
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|5083087578026654516L
decl_stmt|;
specifier|private
name|String
name|examId
decl_stmt|;
specifier|private
name|String
name|label
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|String
name|note
decl_stmt|;
specifier|private
name|Integer
name|maxNbrRooms
decl_stmt|;
specifier|private
name|Integer
name|length
decl_stmt|;
specifier|private
name|String
name|size
decl_stmt|;
specifier|private
name|String
name|sizeNote
decl_stmt|;
specifier|private
name|String
name|seatingType
decl_stmt|;
specifier|private
name|String
name|printOffset
decl_stmt|;
specifier|private
name|List
name|instructors
decl_stmt|;
specifier|private
name|List
name|subjectArea
decl_stmt|;
specifier|private
name|List
name|courseNbr
decl_stmt|;
specifier|private
name|List
name|itype
decl_stmt|;
specifier|private
name|List
name|classNumber
decl_stmt|;
specifier|private
name|Collection
name|subjectAreas
decl_stmt|;
specifier|private
name|Long
name|examType
decl_stmt|;
specifier|private
name|String
name|avgPeriod
decl_stmt|;
specifier|private
name|boolean
name|clone
decl_stmt|;
specifier|public
name|String
name|getExamId
parameter_list|()
block|{
return|return
name|examId
return|;
block|}
specifier|public
name|void
name|setExamId
parameter_list|(
name|String
name|examId
parameter_list|)
block|{
name|this
operator|.
name|examId
operator|=
name|examId
expr_stmt|;
block|}
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
name|label
return|;
block|}
specifier|public
name|void
name|setLabel
parameter_list|(
name|String
name|label
parameter_list|)
block|{
name|this
operator|.
name|label
operator|=
name|label
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getNote
parameter_list|()
block|{
return|return
name|note
return|;
block|}
specifier|public
name|void
name|setNote
parameter_list|(
name|String
name|note
parameter_list|)
block|{
name|this
operator|.
name|note
operator|=
name|note
expr_stmt|;
block|}
specifier|public
name|Integer
name|getMaxNbrRooms
parameter_list|()
block|{
return|return
name|maxNbrRooms
return|;
block|}
specifier|public
name|void
name|setMaxNbrRooms
parameter_list|(
name|Integer
name|maxNbrRooms
parameter_list|)
block|{
name|this
operator|.
name|maxNbrRooms
operator|=
name|maxNbrRooms
expr_stmt|;
block|}
specifier|public
name|Integer
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
specifier|public
name|void
name|setLength
parameter_list|(
name|Integer
name|length
parameter_list|)
block|{
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
specifier|public
name|String
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
specifier|public
name|void
name|setSize
parameter_list|(
name|String
name|size
parameter_list|)
block|{
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
specifier|public
name|String
name|getSizeNote
parameter_list|()
block|{
return|return
name|sizeNote
return|;
block|}
specifier|public
name|void
name|setSizeNote
parameter_list|(
name|String
name|sizeNote
parameter_list|)
block|{
name|this
operator|.
name|sizeNote
operator|=
name|sizeNote
expr_stmt|;
block|}
specifier|public
name|String
name|getPrintOffset
parameter_list|()
block|{
return|return
name|printOffset
return|;
block|}
specifier|public
name|void
name|setPrintOffset
parameter_list|(
name|String
name|printOffset
parameter_list|)
block|{
name|this
operator|.
name|printOffset
operator|=
name|printOffset
expr_stmt|;
block|}
specifier|public
name|String
name|getSeatingType
parameter_list|()
block|{
return|return
name|seatingType
return|;
block|}
specifier|public
name|void
name|setSeatingType
parameter_list|(
name|String
name|seatingType
parameter_list|)
block|{
name|this
operator|.
name|seatingType
operator|=
name|seatingType
expr_stmt|;
block|}
specifier|public
name|String
index|[]
name|getSeatingTypes
parameter_list|()
block|{
return|return
name|Exam
operator|.
name|sSeatingTypes
return|;
block|}
specifier|public
name|int
name|getSeatingTypeIdx
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Exam
operator|.
name|sSeatingTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|Exam
operator|.
name|sSeatingTypes
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|seatingType
argument_list|)
condition|)
return|return
name|i
return|;
return|return
name|Exam
operator|.
name|sSeatingTypeExam
return|;
block|}
specifier|public
name|String
index|[]
name|getObjectTypes
parameter_list|()
block|{
return|return
name|ExamOwner
operator|.
name|sOwnerTypes
return|;
block|}
specifier|protected
name|DynamicListObjectFactory
name|factory
init|=
operator|new
name|DynamicListObjectFactory
argument_list|()
block|{
specifier|public
name|Object
name|create
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|protected
name|DynamicListObjectFactory
name|idfactory
init|=
operator|new
name|DynamicListObjectFactory
argument_list|()
block|{
specifier|public
name|Object
name|create
parameter_list|()
block|{
return|return
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|public
name|void
name|reset
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|examId
operator|=
literal|null
expr_stmt|;
name|name
operator|=
literal|null
expr_stmt|;
name|note
operator|=
literal|null
expr_stmt|;
name|maxNbrRooms
operator|=
literal|1
expr_stmt|;
name|length
operator|=
literal|null
expr_stmt|;
name|size
operator|=
literal|null
expr_stmt|;
name|sizeNote
operator|=
literal|null
expr_stmt|;
name|printOffset
operator|=
literal|null
expr_stmt|;
name|avgPeriod
operator|=
literal|null
expr_stmt|;
name|seatingType
operator|=
name|Exam
operator|.
name|sSeatingTypes
index|[
name|Exam
operator|.
name|sSeatingTypeExam
index|]
expr_stmt|;
name|instructors
operator|=
name|DynamicList
operator|.
name|getInstance
argument_list|(
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|subjectArea
operator|=
name|DynamicList
operator|.
name|getInstance
argument_list|(
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|idfactory
argument_list|)
expr_stmt|;
name|courseNbr
operator|=
name|DynamicList
operator|.
name|getInstance
argument_list|(
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|idfactory
argument_list|)
expr_stmt|;
name|itype
operator|=
name|DynamicList
operator|.
name|getInstance
argument_list|(
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|idfactory
argument_list|)
expr_stmt|;
name|classNumber
operator|=
name|DynamicList
operator|.
name|getInstance
argument_list|(
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|idfactory
argument_list|)
expr_stmt|;
name|examType
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"Exam.Type"
argument_list|)
operator|!=
literal|null
condition|)
name|examType
operator|=
operator|(
name|Long
operator|)
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"Exam.Type"
argument_list|)
expr_stmt|;
name|clone
operator|=
literal|false
expr_stmt|;
name|super
operator|.
name|reset
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
name|getInstructors
parameter_list|()
block|{
return|return
name|instructors
return|;
block|}
specifier|public
name|String
name|getInstructors
parameter_list|(
name|int
name|key
parameter_list|)
block|{
return|return
name|instructors
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|setInstructors
parameter_list|(
name|int
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|this
operator|.
name|instructors
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setInstructors
parameter_list|(
name|List
name|instructors
parameter_list|)
block|{
name|this
operator|.
name|instructors
operator|=
name|instructors
expr_stmt|;
block|}
specifier|public
name|List
name|getSubjectAreaList
parameter_list|()
block|{
return|return
name|subjectArea
return|;
block|}
specifier|public
name|List
name|getSubjectArea
parameter_list|()
block|{
return|return
name|subjectArea
return|;
block|}
specifier|public
name|Long
name|getSubjectArea
parameter_list|(
name|int
name|key
parameter_list|)
block|{
return|return
operator|(
name|Long
operator|)
name|subjectArea
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|void
name|setSubjectArea
parameter_list|(
name|int
name|key
parameter_list|,
name|Long
name|value
parameter_list|)
block|{
name|this
operator|.
name|subjectArea
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setSubjectArea
parameter_list|(
name|List
name|subjectArea
parameter_list|)
block|{
name|this
operator|.
name|subjectArea
operator|=
name|subjectArea
expr_stmt|;
block|}
specifier|public
name|List
name|getCourseNbr
parameter_list|()
block|{
return|return
name|courseNbr
return|;
block|}
specifier|public
name|Long
name|getCourseNbr
parameter_list|(
name|int
name|key
parameter_list|)
block|{
return|return
operator|(
name|Long
operator|)
name|courseNbr
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|void
name|setCourseNbr
parameter_list|(
name|int
name|key
parameter_list|,
name|Long
name|value
parameter_list|)
block|{
name|this
operator|.
name|courseNbr
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setCourseNbr
parameter_list|(
name|List
name|courseNbr
parameter_list|)
block|{
name|this
operator|.
name|courseNbr
operator|=
name|courseNbr
expr_stmt|;
block|}
specifier|public
name|List
name|getItype
parameter_list|()
block|{
return|return
name|itype
return|;
block|}
specifier|public
name|Long
name|getItype
parameter_list|(
name|int
name|key
parameter_list|)
block|{
return|return
operator|(
name|Long
operator|)
name|itype
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|void
name|setItype
parameter_list|(
name|int
name|key
parameter_list|,
name|Long
name|value
parameter_list|)
block|{
name|this
operator|.
name|itype
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setItype
parameter_list|(
name|List
name|itype
parameter_list|)
block|{
name|this
operator|.
name|itype
operator|=
name|itype
expr_stmt|;
block|}
specifier|public
name|List
name|getClassNumber
parameter_list|()
block|{
return|return
name|classNumber
return|;
block|}
specifier|public
name|Long
name|getClassNumber
parameter_list|(
name|int
name|key
parameter_list|)
block|{
return|return
operator|(
name|Long
operator|)
name|classNumber
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|void
name|setClassNumber
parameter_list|(
name|int
name|key
parameter_list|,
name|Long
name|value
parameter_list|)
block|{
name|this
operator|.
name|classNumber
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setClassNumber
parameter_list|(
name|List
name|classNumber
parameter_list|)
block|{
name|this
operator|.
name|classNumber
operator|=
name|classNumber
expr_stmt|;
block|}
specifier|public
name|void
name|deleteExamOwner
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
name|getSubjectArea
argument_list|()
operator|.
name|remove
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|getCourseNbr
argument_list|()
operator|.
name|remove
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|getItype
argument_list|()
operator|.
name|remove
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|getClassNumber
argument_list|()
operator|.
name|remove
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addExamOwner
parameter_list|(
name|ExamOwner
name|owner
parameter_list|)
block|{
if|if
condition|(
name|owner
operator|==
literal|null
condition|)
block|{
name|getSubjectArea
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|getCourseNbr
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|getItype
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|getClassNumber
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|owner
operator|.
name|getOwnerType
argument_list|()
condition|)
block|{
case|case
name|ExamOwner
operator|.
name|sOwnerTypeClass
case|:
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|owner
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
name|getSubjectArea
argument_list|()
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|getCourseNbr
argument_list|()
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|getItype
argument_list|()
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|getClassNumber
argument_list|()
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|ExamOwner
operator|.
name|sOwnerTypeConfig
case|:
name|InstrOfferingConfig
name|config
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|owner
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
name|getSubjectArea
argument_list|()
operator|.
name|add
argument_list|(
name|config
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|getCourseNbr
argument_list|()
operator|.
name|add
argument_list|(
name|config
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|getItype
argument_list|()
operator|.
name|add
argument_list|(
operator|-
name|config
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|getClassNumber
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|ExamOwner
operator|.
name|sOwnerTypeCourse
case|:
name|CourseOffering
name|course
init|=
operator|(
name|CourseOffering
operator|)
name|owner
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
name|getSubjectArea
argument_list|()
operator|.
name|add
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|getCourseNbr
argument_list|()
operator|.
name|add
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|getItype
argument_list|()
operator|.
name|add
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|getClassNumber
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|ExamOwner
operator|.
name|sOwnerTypeOffering
case|:
name|InstructionalOffering
name|offering
init|=
operator|(
name|InstructionalOffering
operator|)
name|owner
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
name|getSubjectArea
argument_list|()
operator|.
name|add
argument_list|(
name|offering
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|getCourseNbr
argument_list|()
operator|.
name|add
argument_list|(
name|offering
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|getItype
argument_list|()
operator|.
name|add
argument_list|(
name|Long
operator|.
name|MIN_VALUE
operator|+
literal|1
argument_list|)
expr_stmt|;
name|getClassNumber
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
specifier|public
name|Collection
name|getSubjectAreas
parameter_list|()
block|{
return|return
name|subjectAreas
return|;
block|}
specifier|public
name|void
name|setSubjectAreas
parameter_list|(
name|Collection
name|subjectAreas
parameter_list|)
block|{
name|this
operator|.
name|subjectAreas
operator|=
name|subjectAreas
expr_stmt|;
block|}
specifier|public
name|Collection
name|getCourseNbrs
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
name|Vector
name|ret
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|boolean
name|contains
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|getSubjectArea
argument_list|(
name|idx
argument_list|)
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select co.uniqueId, co.courseNbr, co.title from CourseOffering co "
operator|+
literal|"where co.subjectArea.uniqueId = :subjectAreaId "
operator|+
literal|"and co.instructionalOffering.notOffered = false "
operator|+
literal|"order by co.courseNbr "
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|200
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"subjectAreaId"
argument_list|,
name|getSubjectArea
argument_list|(
name|idx
argument_list|)
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|IdValue
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
operator|(
name|String
operator|)
name|o
index|[
literal|1
index|]
operator|+
literal|" - "
operator|+
operator|(
name|String
operator|)
name|o
index|[
literal|2
index|]
operator|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|o
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|getCourseNbr
argument_list|(
name|idx
argument_list|)
argument_list|)
condition|)
name|contains
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|contains
condition|)
name|setCourseNbr
argument_list|(
name|idx
argument_list|,
operator|-
literal|1L
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|setCourseNbr
argument_list|(
name|idx
argument_list|,
operator|(
operator|(
name|IdValue
operator|)
name|ret
operator|.
name|firstElement
argument_list|()
operator|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|ret
operator|.
name|insertElementAt
argument_list|(
operator|new
name|IdValue
argument_list|(
operator|-
literal|1L
argument_list|,
literal|"-"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|Collection
name|getItypes
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
name|Vector
name|ret
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|boolean
name|contains
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|getCourseNbr
argument_list|(
name|idx
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|CourseOffering
name|course
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
operator|.
name|get
argument_list|(
name|getCourseNbr
argument_list|(
name|idx
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|isIsControl
argument_list|()
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|IdValue
argument_list|(
name|Long
operator|.
name|MIN_VALUE
operator|+
literal|1
argument_list|,
literal|"Offering"
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|IdValue
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
literal|"Course"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|course
operator|.
name|isIsControl
argument_list|()
condition|)
block|{
name|setItype
argument_list|(
name|idx
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
name|TreeSet
name|configs
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|InstrOfferingConfigComparator
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|configs
operator|.
name|addAll
argument_list|(
operator|new
name|InstrOfferingConfigDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct c from "
operator|+
literal|"InstrOfferingConfig c inner join c.instructionalOffering.courseOfferings co "
operator|+
literal|"where co.uniqueId = :courseOfferingId"
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|200
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"courseOfferingId"
argument_list|,
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|configs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|IdValue
argument_list|(
name|Long
operator|.
name|MIN_VALUE
operator|+
literal|2
argument_list|,
literal|"-- Configurations --"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|configs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|c
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|getItype
argument_list|(
name|idx
argument_list|)
argument_list|)
condition|)
name|contains
operator|=
literal|true
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|IdValue
argument_list|(
operator|-
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|c
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|TreeSet
name|subparts
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|SchedulingSubpartComparator
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|subparts
operator|.
name|addAll
argument_list|(
operator|new
name|SchedulingSubpartDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct s from "
operator|+
literal|"SchedulingSubpart s inner join s.instrOfferingConfig.instructionalOffering.courseOfferings co "
operator|+
literal|"where co.uniqueId = :courseOfferingId"
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|200
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"courseOfferingId"
argument_list|,
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|configs
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|subparts
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|IdValue
argument_list|(
name|Long
operator|.
name|MIN_VALUE
operator|+
literal|2
argument_list|,
literal|"-- Subparts --"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|subparts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|s
init|=
operator|(
name|SchedulingSubpart
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|sid
init|=
name|s
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|s
operator|.
name|getItype
argument_list|()
operator|.
name|getAbbv
argument_list|()
decl_stmt|;
name|String
name|sufix
init|=
name|s
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|getParentSubpart
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
literal|"&nbsp;&nbsp;&nbsp;&nbsp;"
operator|+
name|name
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|getParentSubpart
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
name|name
operator|+=
literal|" ["
operator|+
name|s
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
expr_stmt|;
if|if
condition|(
name|sid
operator|.
name|equals
argument_list|(
name|getItype
argument_list|(
name|idx
argument_list|)
argument_list|)
condition|)
name|contains
operator|=
literal|true
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|IdValue
argument_list|(
name|sid
argument_list|,
name|name
operator|+
operator|(
name|sufix
operator|==
literal|null
operator|||
name|sufix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
literal|" ("
operator|+
name|sufix
operator|+
literal|")"
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ret
operator|.
name|addElement
argument_list|(
operator|new
name|IdValue
argument_list|(
literal|0L
argument_list|,
literal|"N/A"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|contains
condition|)
name|setItype
argument_list|(
name|idx
argument_list|,
operator|(
operator|(
name|IdValue
operator|)
name|ret
operator|.
name|firstElement
argument_list|()
operator|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|ExamOwner
name|getExamOwner
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
if|if
condition|(
name|getSubjectArea
argument_list|(
name|idx
argument_list|)
operator|<
literal|0
operator|||
name|getCourseNbr
argument_list|(
name|idx
argument_list|)
operator|<
literal|0
condition|)
return|return
literal|null
return|;
name|CourseOffering
name|course
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
operator|.
name|get
argument_list|(
name|getCourseNbr
argument_list|(
name|idx
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|getItype
argument_list|(
name|idx
argument_list|)
operator|==
name|Long
operator|.
name|MIN_VALUE
condition|)
block|{
comment|//course
name|ExamOwner
name|owner
init|=
operator|new
name|ExamOwner
argument_list|()
decl_stmt|;
name|owner
operator|.
name|setOwner
argument_list|(
name|course
argument_list|)
expr_stmt|;
return|return
name|owner
return|;
block|}
if|else if
condition|(
name|getItype
argument_list|(
name|idx
argument_list|)
operator|==
name|Long
operator|.
name|MIN_VALUE
operator|+
literal|1
operator|||
name|getItype
argument_list|(
name|idx
argument_list|)
operator|==
name|Long
operator|.
name|MIN_VALUE
operator|+
literal|2
condition|)
block|{
comment|//offering
name|ExamOwner
name|owner
init|=
operator|new
name|ExamOwner
argument_list|()
decl_stmt|;
name|owner
operator|.
name|setOwner
argument_list|(
name|course
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|owner
return|;
block|}
if|else if
condition|(
name|getItype
argument_list|(
name|idx
argument_list|)
operator|<
literal|0
condition|)
block|{
comment|//config
name|InstrOfferingConfig
name|config
init|=
operator|new
name|InstrOfferingConfigDAO
argument_list|()
operator|.
name|get
argument_list|(
operator|-
name|getItype
argument_list|(
name|idx
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|ExamOwner
name|owner
init|=
operator|new
name|ExamOwner
argument_list|()
decl_stmt|;
name|owner
operator|.
name|setOwner
argument_list|(
name|config
argument_list|)
expr_stmt|;
return|return
name|owner
return|;
block|}
if|else if
condition|(
name|getClassNumber
argument_list|(
name|idx
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|//class
name|Class_
name|clazz
init|=
operator|new
name|Class_DAO
argument_list|()
operator|.
name|get
argument_list|(
name|getClassNumber
argument_list|(
name|idx
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|ExamOwner
name|owner
init|=
operator|new
name|ExamOwner
argument_list|()
decl_stmt|;
name|owner
operator|.
name|setOwner
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
return|return
name|owner
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setExamOwners
parameter_list|(
name|Exam
name|exam
parameter_list|)
block|{
if|if
condition|(
name|exam
operator|.
name|getOwners
argument_list|()
operator|==
literal|null
condition|)
name|exam
operator|.
name|setOwners
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|exam
operator|.
name|getOwners
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|getSubjectAreaList
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|ExamOwner
name|owner
init|=
name|getExamOwner
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|owner
operator|!=
literal|null
condition|)
block|{
name|exam
operator|.
name|getOwners
argument_list|()
operator|.
name|add
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|owner
operator|.
name|setExam
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Collection
name|getClassNumbers
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
name|Vector
name|ret
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|boolean
name|contains
init|=
literal|false
decl_stmt|;
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|getItype
argument_list|(
name|idx
argument_list|)
operator|>
literal|0
condition|?
operator|new
name|SchedulingSubpartDAO
argument_list|()
operator|.
name|get
argument_list|(
name|getItype
argument_list|(
name|idx
argument_list|)
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
name|CourseOffering
name|co
init|=
operator|(
name|getItype
argument_list|(
name|idx
argument_list|)
operator|>
literal|0
condition|?
operator|new
name|CourseOfferingDAO
argument_list|()
operator|.
name|get
argument_list|(
name|getCourseNbr
argument_list|(
name|idx
argument_list|)
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|subpart
operator|!=
literal|null
condition|)
block|{
name|TreeSet
name|classes
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
argument_list|)
decl_stmt|;
name|classes
operator|.
name|addAll
argument_list|(
operator|new
name|Class_DAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct c from Class_ c "
operator|+
literal|"where c.schedulingSubpart.uniqueId=:schedulingSubpartId"
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|200
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"schedulingSubpartId"
argument_list|,
name|getItype
argument_list|(
name|idx
argument_list|)
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|getClassNumber
argument_list|(
name|idx
argument_list|)
argument_list|)
condition|)
name|contains
operator|=
literal|true
expr_stmt|;
name|String
name|extId
init|=
name|c
operator|.
name|getClassSuffix
argument_list|(
name|co
argument_list|)
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|IdValue
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|c
operator|.
name|getSectionNumberString
argument_list|()
operator|+
operator|(
name|extId
operator|==
literal|null
operator|||
name|extId
operator|.
name|isEmpty
argument_list|()
operator|||
name|extId
operator|.
name|equalsIgnoreCase
argument_list|(
name|c
operator|.
name|getSectionNumberString
argument_list|()
argument_list|)
condition|?
literal|""
else|:
literal|" - "
operator|+
name|extId
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|IdValue
argument_list|(
operator|-
literal|1L
argument_list|,
literal|"N/A"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|contains
condition|)
name|setClassNumber
argument_list|(
name|idx
argument_list|,
operator|-
literal|1L
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|setClassNumber
argument_list|(
name|idx
argument_list|,
operator|(
operator|(
name|IdValue
operator|)
name|ret
operator|.
name|firstElement
argument_list|()
operator|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|ret
operator|.
name|insertElementAt
argument_list|(
operator|new
name|IdValue
argument_list|(
operator|-
literal|1L
argument_list|,
literal|"-"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|ActionErrors
name|validate
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|ActionErrors
name|errors
init|=
operator|new
name|ActionErrors
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxNbrRooms
operator|!=
literal|null
operator|&&
name|maxNbrRooms
operator|.
name|intValue
argument_list|()
operator|<
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"maxNbrRooms"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.integerGtEq"
argument_list|,
literal|"Maximal Number of Rooms"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|length
operator|==
literal|null
operator|||
name|length
operator|.
name|intValue
argument_list|()
operator|<
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"length"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.integerGtEq"
argument_list|,
literal|"Length"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
operator|!=
literal|null
operator|&&
name|size
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Integer
operator|.
name|parseInt
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"size"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.numeric"
argument_list|,
literal|"Size"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|printOffset
operator|!=
literal|null
operator|&&
name|printOffset
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Integer
operator|.
name|parseInt
argument_list|(
name|printOffset
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"printOffset"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.numeric"
argument_list|,
literal|"Print Offset"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Notes has 1000 character limit
if|if
condition|(
name|note
operator|!=
literal|null
operator|&&
name|note
operator|.
name|length
argument_list|()
operator|>
literal|999
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"note"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.maxlength"
argument_list|,
literal|"Note"
argument_list|,
literal|"999"
argument_list|)
argument_list|)
expr_stmt|;
comment|// At least one instructor is selected
if|if
condition|(
name|instructors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// Check no duplicates or blank instructors
name|super
operator|.
name|checkPrefs
argument_list|(
name|instructors
argument_list|)
expr_stmt|;
block|}
name|boolean
name|hasOwner
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|getSubjectAreaList
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|ExamOwner
name|owner
init|=
name|getExamOwner
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|owner
operator|!=
literal|null
condition|)
block|{
name|hasOwner
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|hasOwner
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"owners"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"At least one class/course has to be specified."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Check Other Preferences
name|errors
operator|.
name|add
argument_list|(
name|super
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|errors
return|;
block|}
specifier|public
name|void
name|addBlankPrefRows
parameter_list|()
block|{
name|super
operator|.
name|addBlankPrefRows
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Long
name|getExamType
parameter_list|()
block|{
return|return
name|examType
return|;
block|}
specifier|public
name|void
name|setExamType
parameter_list|(
name|Long
name|examType
parameter_list|)
block|{
name|this
operator|.
name|examType
operator|=
name|examType
expr_stmt|;
block|}
specifier|public
name|String
name|getAvgPeriod
parameter_list|()
block|{
return|return
name|avgPeriod
return|;
block|}
specifier|public
name|void
name|setAvgPeriod
parameter_list|(
name|String
name|avgPeriod
parameter_list|)
block|{
name|this
operator|.
name|avgPeriod
operator|=
name|avgPeriod
expr_stmt|;
block|}
specifier|public
name|String
name|getEmail
parameter_list|(
name|String
name|instructorId
parameter_list|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
operator|new
name|DepartmentalInstructorDAO
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|instructorId
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|instructor
operator|.
name|getEmail
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|instructor
operator|.
name|getEmail
argument_list|()
operator|)
return|;
block|}
specifier|public
name|boolean
name|getClone
parameter_list|()
block|{
return|return
name|clone
return|;
block|}
specifier|public
name|void
name|setClone
parameter_list|(
name|boolean
name|clone
parameter_list|)
block|{
name|this
operator|.
name|clone
operator|=
name|clone
expr_stmt|;
block|}
block|}
end_class

end_unit

