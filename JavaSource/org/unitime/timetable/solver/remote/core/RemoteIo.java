begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|remote
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectStreamClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPOutputStream
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|RemoteIo
block|{
specifier|public
specifier|static
name|boolean
name|sZip
init|=
literal|true
decl_stmt|;
specifier|public
specifier|static
name|boolean
name|sDebug
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
name|long
name|sTotalSent
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|long
name|sTotalRead
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|void
name|writeObject
parameter_list|(
name|Socket
name|socket
parameter_list|,
name|Object
name|obj
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|socket
operator|==
literal|null
condition|)
return|return;
name|OutputStream
name|out
init|=
name|socket
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|MyByteArrayOutputStream
name|bytes
init|=
literal|null
decl_stmt|;
name|int
name|size
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
name|bytes
operator|=
operator|new
name|MyByteArrayOutputStream
argument_list|()
expr_stmt|;
name|ObjectOutputStream
name|objOut
init|=
operator|(
name|sZip
condition|?
operator|new
name|ObjectOutputStream
argument_list|(
operator|new
name|GZIPOutputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
else|:
operator|new
name|ObjectOutputStream
argument_list|(
name|bytes
argument_list|)
operator|)
decl_stmt|;
name|objOut
operator|.
name|writeObject
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|objOut
operator|.
name|flush
argument_list|()
expr_stmt|;
name|objOut
operator|.
name|close
argument_list|()
expr_stmt|;
name|size
operator|=
name|bytes
operator|.
name|size
argument_list|()
expr_stmt|;
name|bytes
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|sDebug
condition|)
block|{
name|sTotalSent
operator|+=
name|size
operator|+
literal|4
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -- "
operator|+
operator|(
name|size
operator|+
literal|4
operator|)
operator|+
literal|" bytes sent (total "
operator|+
operator|(
name|sTotalSent
operator|/
literal|1024
operator|)
operator|+
literal|" kB)"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|Object
name|readObject
parameter_list|(
name|Socket
name|socket
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
if|if
condition|(
name|socket
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|InputStream
name|in
init|=
name|socket
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|ch
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|int
name|read
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|read
operator|+=
name|in
operator|.
name|read
argument_list|(
name|ch
argument_list|,
name|read
argument_list|,
literal|4
argument_list|)
operator|)
operator|<
literal|4
condition|)
empty_stmt|;
name|int
name|size
init|=
operator|(
name|ch
index|[
literal|0
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|24
operator||
operator|(
name|ch
index|[
literal|1
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|16
operator||
operator|(
name|ch
index|[
literal|2
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|8
operator||
operator|(
name|ch
index|[
literal|3
index|]
operator|&
literal|0xFF
operator|)
decl_stmt|;
if|if
condition|(
name|size
operator|<=
literal|0
condition|)
return|return
literal|null
return|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|read
operator|=
literal|0
expr_stmt|;
while|while
condition|(
operator|(
name|read
operator|+=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|read
argument_list|,
name|size
operator|-
name|read
argument_list|)
operator|)
operator|<
name|size
condition|)
empty_stmt|;
name|ObjectInputStream
name|objIn
init|=
operator|(
name|sZip
condition|?
operator|new
name|MyObjectInputStream
argument_list|(
operator|new
name|GZIPInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|buffer
argument_list|)
argument_list|)
argument_list|)
else|:
operator|new
name|MyObjectInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|buffer
argument_list|)
argument_list|)
operator|)
decl_stmt|;
name|Object
name|ret
init|=
name|objIn
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|objIn
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|sDebug
condition|)
block|{
name|sTotalRead
operator|+=
name|size
operator|+
literal|4
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -- "
operator|+
operator|(
name|size
operator|+
literal|4
operator|)
operator|+
literal|" bytes read (total "
operator|+
operator|(
name|sTotalRead
operator|/
literal|1024
operator|)
operator|+
literal|" kB)"
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
class|class
name|MyObjectInputStream
extends|extends
name|ObjectInputStream
block|{
specifier|public
name|MyObjectInputStream
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Class
name|resolveClass
parameter_list|(
name|ObjectStreamClass
name|clazz
parameter_list|)
throws|throws
name|ClassNotFoundException
throws|,
name|IOException
block|{
try|try
block|{
return|return
name|ServerClassLoader
operator|.
name|getInstance
argument_list|()
operator|.
name|loadClass
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
return|return
name|super
operator|.
name|resolveClass
argument_list|(
name|clazz
argument_list|)
return|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|MyByteArrayOutputStream
extends|extends
name|ByteArrayOutputStream
block|{
specifier|public
name|MyByteArrayOutputStream
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|buf
index|[
literal|0
index|]
operator|=
name|buf
index|[
literal|1
index|]
operator|=
name|buf
index|[
literal|2
index|]
operator|=
name|buf
index|[
literal|3
index|]
operator|=
literal|0
expr_stmt|;
name|count
operator|=
literal|4
expr_stmt|;
block|}
specifier|public
name|void
name|writeTo
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|size
init|=
name|count
operator|-
literal|4
decl_stmt|;
name|buf
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|size
operator|>>>
literal|24
operator|)
operator|&
literal|0xFF
operator|)
expr_stmt|;
name|buf
index|[
literal|1
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|size
operator|>>>
literal|16
operator|)
operator|&
literal|0xFF
operator|)
expr_stmt|;
name|buf
index|[
literal|2
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|size
operator|>>>
literal|8
operator|)
operator|&
literal|0xFF
operator|)
expr_stmt|;
name|buf
index|[
literal|3
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
name|size
operator|&
literal|0xFF
operator|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|count
operator|-
literal|4
return|;
block|}
block|}
block|}
end_class

end_unit

