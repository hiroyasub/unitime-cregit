begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|remote
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|RemoteSolverServer
implements|implements
name|Runnable
block|{
specifier|private
specifier|static
name|ServerLogger
name|sLogger
init|=
operator|new
name|ServerLogger
argument_list|(
name|RemoteSolverServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ServerThread
name|sServerThread
decl_stmt|;
specifier|private
name|Socket
name|iSocket
decl_stmt|;
specifier|private
specifier|static
name|Class
name|sRemoteSolverClass
init|=
literal|null
decl_stmt|;
specifier|protected
name|RemoteSolverServer
parameter_list|(
name|Socket
name|socket
parameter_list|)
block|{
name|iSocket
operator|=
name|socket
expr_stmt|;
block|}
specifier|public
name|Socket
name|getSocket
parameter_list|()
block|{
return|return
name|iSocket
return|;
block|}
specifier|public
specifier|static
name|void
name|startService
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
if|if
condition|(
name|sServerThread
operator|!=
literal|null
condition|)
name|stopService
argument_list|()
expr_stmt|;
name|sServerThread
operator|=
operator|new
name|ServerThread
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|sServerThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|stopService
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|sServerThread
operator|!=
literal|null
condition|)
block|{
name|sServerThread
operator|.
name|close
argument_list|()
expr_stmt|;
name|sServerThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLogger
operator|.
name|warn
argument_list|(
literal|"Unable to stop solver, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|ServerThread
name|getServerThread
parameter_list|()
block|{
return|return
name|sServerThread
return|;
block|}
specifier|protected
name|Object
name|answer
parameter_list|(
name|Object
name|cmd
parameter_list|)
block|{
try|try
block|{
return|return
name|sRemoteSolverClass
operator|.
name|getMethod
argument_list|(
literal|"answer"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Object
operator|.
name|class
block|}
argument_list|)
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
operator|new
name|Object
index|[]
block|{
name|cmd
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLogger
operator|.
name|warn
argument_list|(
literal|"Exception '"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"' seen."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|e
return|;
block|}
block|}
specifier|public
specifier|static
name|Object
name|query
parameter_list|(
name|Object
name|cmd
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|sServerThread
operator|.
name|getControlThread
argument_list|()
operator|.
name|query
argument_list|(
name|cmd
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|ShutdownHook
extends|extends
name|Thread
block|{
specifier|public
name|ShutdownHook
parameter_list|()
block|{
name|setName
argument_list|(
literal|"RemoteSolver.ShutdownHook"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Server shutdown."
argument_list|)
expr_stmt|;
name|sLogger
operator|.
name|info
argument_list|(
literal|"shutdown"
argument_list|)
expr_stmt|;
name|stopService
argument_list|()
expr_stmt|;
try|try
block|{
name|sRemoteSolverClass
operator|.
name|getMethod
argument_list|(
literal|"backupAll"
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLogger
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|sRemoteSolverClass
operator|!=
literal|null
condition|)
name|sRemoteSolverClass
operator|.
name|getMethod
argument_list|(
literal|"finish"
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLogger
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|initServer
parameter_list|(
name|ResourceProvider
name|provider
parameter_list|,
name|String
name|url
parameter_list|,
name|Properties
name|webServerProperties
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|sServerThread
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"sServerThread is null!!!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|sRemoteSolverClass
operator|==
literal|null
condition|)
block|{
name|ClassLoader
name|cl
init|=
name|RemoteSolverServer
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|RemoteSolverServer
operator|.
name|sRemoteSolverClass
operator|=
name|cl
operator|.
name|loadClass
argument_list|(
literal|"org.unitime.timetable.solver.remote.RemoteSolver"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ex
parameter_list|)
block|{
name|ServerClassLoader
operator|.
name|getInstance
argument_list|()
operator|.
name|setResourceProvicer
argument_list|(
name|provider
argument_list|)
expr_stmt|;
name|sRemoteSolverClass
operator|=
name|ServerClassLoader
operator|.
name|getInstance
argument_list|()
operator|.
name|loadClass
argument_list|(
literal|"org.unitime.timetable.solver.remote.RemoteSolver"
argument_list|)
expr_stmt|;
block|}
block|}
name|Properties
name|properties
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|webServerProperties
operator|!=
literal|null
condition|)
block|{
name|properties
operator|=
name|webServerProperties
expr_stmt|;
name|properties
operator|.
name|putAll
argument_list|(
name|sServerThread
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|properties
operator|=
name|sServerThread
operator|.
name|getProperties
argument_list|()
expr_stmt|;
block|}
name|sRemoteSolverClass
operator|.
name|getMethod
argument_list|(
literal|"init"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Properties
operator|.
name|class
block|,
name|String
operator|.
name|class
block|}
argument_list|)
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
operator|new
name|Object
index|[]
block|{
name|properties
block|,
name|url
block|}
argument_list|)
expr_stmt|;
name|ServerLogger
operator|.
name|setInitialized
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|Object
name|command
init|=
literal|null
decl_stmt|;
try|try
block|{
name|command
operator|=
name|RemoteIo
operator|.
name|readObject
argument_list|(
name|iSocket
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|EOFException
name|ex
parameter_list|)
block|{
block|}
empty_stmt|;
if|if
condition|(
name|command
operator|==
literal|null
condition|)
break|break;
if|if
condition|(
literal|"disconnect"
operator|.
name|equals
argument_list|(
name|command
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
literal|"quit"
operator|.
name|equals
argument_list|(
name|command
argument_list|)
condition|)
block|{
name|RemoteIo
operator|.
name|writeObject
argument_list|(
name|iSocket
argument_list|,
literal|"ack"
argument_list|)
expr_stmt|;
name|stopService
argument_list|()
expr_stmt|;
break|break;
block|}
if|if
condition|(
literal|"kill"
operator|.
name|equals
argument_list|(
name|command
argument_list|)
condition|)
block|{
name|RemoteIo
operator|.
name|writeObject
argument_list|(
name|iSocket
argument_list|,
literal|"ack"
argument_list|)
expr_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|halt
argument_list|(
literal|9
argument_list|)
expr_stmt|;
break|break;
block|}
name|Object
name|ret
init|=
name|answer
argument_list|(
name|command
argument_list|)
decl_stmt|;
name|RemoteIo
operator|.
name|writeObject
argument_list|(
name|iSocket
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLogger
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|iSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
specifier|public
name|void
name|destroy
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|iSocket
operator|!=
literal|null
condition|)
name|iSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|iSocket
operator|=
literal|null
expr_stmt|;
block|}
specifier|protected
name|void
name|finalize
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
if|if
condition|(
name|iSocket
operator|!=
literal|null
condition|)
name|iSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|iSocket
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|finalize
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|String
name|solverHome
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.solver.home"
argument_list|)
decl_stmt|;
if|if
condition|(
name|solverHome
operator|==
literal|null
condition|)
name|solverHome
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
operator|+
name|File
operator|.
name|separator
operator|+
literal|"solver"
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.solver.backup.dir"
argument_list|)
operator|==
literal|null
condition|)
name|System
operator|.
name|setProperty
argument_list|(
literal|"tmtbl.solver.backup.dir"
argument_list|,
name|solverHome
operator|+
name|File
operator|.
name|separator
operator|+
literal|"backup"
argument_list|)
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.solver.temp.dir"
argument_list|)
operator|==
literal|null
condition|)
name|System
operator|.
name|setProperty
argument_list|(
literal|"tmtbl.solver.temp.dir"
argument_list|,
name|solverHome
operator|+
name|File
operator|.
name|separator
operator|+
literal|"log"
argument_list|)
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.solver.passivation.dir"
argument_list|)
operator|==
literal|null
condition|)
name|System
operator|.
name|setProperty
argument_list|(
literal|"tmtbl.solver.passivation.dir"
argument_list|,
name|solverHome
operator|+
name|File
operator|.
name|separator
operator|+
literal|"passivate"
argument_list|)
expr_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|ClassLoader
name|classLoader
init|=
name|RemoteSolverServer
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|URL
name|propertiesUrl
init|=
name|classLoader
operator|.
name|getResource
argument_list|(
literal|"application.properties"
argument_list|)
decl_stmt|;
if|if
condition|(
name|propertiesUrl
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Reading "
operator|+
name|propertiesUrl
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|propertiesUrl
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|propertiesUrl
operator|=
name|classLoader
operator|.
name|getResource
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.custom.properties"
argument_list|,
literal|"custom.properties"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|propertiesUrl
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Reading "
operator|+
name|propertiesUrl
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|propertiesUrl
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.custom.properties"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|FileInputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Reading "
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.custom.properties"
argument_list|)
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|Properties
name|x
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|in
operator|=
operator|new
name|FileInputStream
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.custom.properties"
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|load
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|properties
operator|.
name|putAll
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unable to read properties file "
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.custom.properties"
argument_list|)
operator|+
literal|", message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|properties
operator|.
name|putAll
argument_list|(
name|System
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>=
literal|1
condition|)
block|{
name|String
name|host
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|host
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
literal|"tmtbl.solver.register.host"
argument_list|,
name|host
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|host
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"tmtbl.solver.register.port"
argument_list|,
name|host
operator|.
name|substring
argument_list|(
name|host
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|properties
operator|.
name|setProperty
argument_list|(
literal|"tmtbl.solver.register.host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|args
operator|.
name|length
operator|>=
literal|2
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
literal|"tmtbl.solver.remote.port"
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|args
operator|.
name|length
operator|>=
literal|3
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.Output"
argument_list|,
name|args
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.solver.temp.dir"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.Output"
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.solver.temp.dir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.Output"
argument_list|,
literal|"."
operator|+
name|File
operator|.
name|separator
operator|+
literal|"server"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|args
operator|.
name|length
operator|>=
literal|4
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
literal|"tmtbl.solver.backup.dir"
argument_list|,
name|args
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
name|startService
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|ShutdownHook
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
literal|"false"
operator|.
name|equals
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.solver.remote.join"
argument_list|)
argument_list|)
condition|)
name|getServerThread
argument_list|()
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLogger
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

