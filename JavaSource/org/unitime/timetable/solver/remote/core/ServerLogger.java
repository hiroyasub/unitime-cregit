begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|remote
operator|.
name|core
package|;
end_package

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ServerLogger
block|{
specifier|public
name|Object
name|iLoggerObject
init|=
literal|null
decl_stmt|;
specifier|public
name|Class
name|iCaller
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
name|boolean
name|sInitialized
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
name|void
name|setInitialized
parameter_list|(
name|boolean
name|initialized
parameter_list|)
block|{
name|sInitialized
operator|=
name|initialized
expr_stmt|;
block|}
specifier|public
name|ServerLogger
parameter_list|(
name|Class
name|caller
parameter_list|)
block|{
name|iCaller
operator|=
name|caller
expr_stmt|;
block|}
specifier|public
name|void
name|x
parameter_list|(
name|String
name|method
parameter_list|,
name|Object
name|message
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|iLoggerObject
operator|==
literal|null
operator|&&
name|sInitialized
condition|)
block|{
name|iLoggerObject
operator|=
name|ServerClassLoader
operator|.
name|getInstance
argument_list|()
operator|.
name|loadClass
argument_list|(
literal|"org.apache.log4j.Logger"
argument_list|)
operator|.
name|getMethod
argument_list|(
literal|"getLogger"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Class
operator|.
name|class
block|}
argument_list|)
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
operator|new
name|Object
index|[]
block|{
name|iCaller
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iLoggerObject
operator|!=
literal|null
condition|)
name|iLoggerObject
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|method
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Object
operator|.
name|class
block|,
name|Throwable
operator|.
name|class
block|}
argument_list|)
operator|.
name|invoke
argument_list|(
name|iLoggerObject
argument_list|,
operator|new
name|Object
index|[]
block|{
name|message
block|,
name|e
block|}
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|method
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|": "
operator|+
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|error
parameter_list|(
name|Object
name|msg
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|x
argument_list|(
literal|"error"
argument_list|,
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|error
parameter_list|(
name|Object
name|msg
parameter_list|)
block|{
name|x
argument_list|(
literal|"error"
argument_list|,
name|msg
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|debug
parameter_list|(
name|Object
name|msg
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|x
argument_list|(
literal|"debug"
argument_list|,
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|debug
parameter_list|(
name|Object
name|msg
parameter_list|)
block|{
name|x
argument_list|(
literal|"debug"
argument_list|,
name|msg
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|info
parameter_list|(
name|Object
name|msg
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|x
argument_list|(
literal|"info"
argument_list|,
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|info
parameter_list|(
name|Object
name|msg
parameter_list|)
block|{
name|x
argument_list|(
literal|"info"
argument_list|,
name|msg
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|warn
parameter_list|(
name|Object
name|msg
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|x
argument_list|(
literal|"warn"
argument_list|,
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|warn
parameter_list|(
name|Object
name|msg
parameter_list|)
block|{
name|x
argument_list|(
literal|"warn"
argument_list|,
name|msg
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

