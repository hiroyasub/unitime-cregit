begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|remote
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLStreamHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ServerClassLoader
extends|extends
name|ClassLoader
block|{
specifier|private
name|ResourceProvider
name|iResourceProvider
decl_stmt|;
specifier|private
name|Hashtable
name|iCache
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|ServerClassLoader
name|sInstance
init|=
literal|null
decl_stmt|;
specifier|private
name|ServerClassLoader
parameter_list|()
block|{
name|super
argument_list|(
name|ServerClassLoader
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|ServerClassLoader
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|sInstance
operator|==
literal|null
condition|)
name|sInstance
operator|=
operator|new
name|ServerClassLoader
argument_list|()
expr_stmt|;
return|return
name|sInstance
return|;
block|}
specifier|public
name|void
name|setResourceProvicer
parameter_list|(
name|ResourceProvider
name|resourceProvider
parameter_list|)
block|{
name|iResourceProvider
operator|=
name|resourceProvider
expr_stmt|;
block|}
specifier|public
name|ResourceProvider
name|getResourceProvicer
parameter_list|()
block|{
return|return
name|iResourceProvider
return|;
block|}
specifier|public
name|URL
name|getResource
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|URL
name|res
init|=
name|getParent
argument_list|()
operator|.
name|getResource
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
return|return
name|res
return|;
try|try
block|{
name|byte
index|[]
name|data
init|=
operator|(
name|byte
index|[]
operator|)
name|getResourceBytes
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
return|return
operator|new
name|URL
argument_list|(
literal|"file"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
name|name
argument_list|,
operator|new
name|MyURLStreamHandler
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|byte
index|[]
name|getResourceBytes
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|iResourceProvider
operator|!=
literal|null
condition|)
return|return
name|iResourceProvider
operator|.
name|getResource
argument_list|(
name|name
argument_list|)
return|;
name|URL
name|res
init|=
name|super
operator|.
name|getResource
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|read
init|=
literal|0
decl_stmt|;
name|InputStream
name|in
init|=
name|res
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|read
operator|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>=
literal|0
condition|)
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|out
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|protected
name|Class
name|findClass
parameter_list|(
name|String
name|className
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
try|try
block|{
name|Class
name|clazz
init|=
name|super
operator|.
name|findClass
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
return|return
name|clazz
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|iResourceProvider
operator|==
literal|null
condition|)
return|return
name|getParent
argument_list|()
operator|.
name|loadClass
argument_list|(
name|className
argument_list|)
return|;
name|Class
name|clazz
init|=
operator|(
name|Class
operator|)
name|iCache
operator|.
name|get
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
return|return
name|clazz
return|;
try|try
block|{
name|byte
index|[]
name|classBytes
init|=
name|getResourceBytes
argument_list|(
name|formatClassName
argument_list|(
name|className
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|classBytes
operator|!=
literal|null
condition|)
block|{
name|clazz
operator|=
name|defineClass
argument_list|(
name|className
argument_list|,
name|classBytes
argument_list|,
literal|0
argument_list|,
name|classBytes
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
name|iCache
operator|.
name|put
argument_list|(
name|className
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
return|return
name|clazz
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|super
operator|.
name|findClass
argument_list|(
name|className
argument_list|)
return|;
block|}
specifier|protected
name|String
name|formatClassName
parameter_list|(
name|String
name|className
parameter_list|)
block|{
return|return
name|className
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
literal|".class"
return|;
block|}
specifier|public
specifier|static
class|class
name|MyURLConnection
extends|extends
name|URLConnection
block|{
specifier|private
name|ByteArrayInputStream
name|iInput
init|=
literal|null
decl_stmt|;
specifier|private
name|byte
index|[]
name|iData
decl_stmt|;
specifier|protected
name|MyURLConnection
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|URL
name|url
parameter_list|)
block|{
name|super
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|iInput
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|connect
parameter_list|()
throws|throws
name|IOException
block|{
block|}
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|iInput
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MyURLStreamHandler
extends|extends
name|URLStreamHandler
block|{
specifier|private
name|byte
index|[]
name|iData
decl_stmt|;
specifier|public
name|MyURLStreamHandler
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
name|iData
operator|=
name|data
expr_stmt|;
block|}
specifier|protected
name|URLConnection
name|openConnection
parameter_list|(
name|URL
name|u
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MyURLConnection
argument_list|(
name|iData
argument_list|,
name|u
argument_list|)
return|;
block|}
specifier|protected
name|String
name|toExternalForm
parameter_list|(
name|URL
name|u
parameter_list|)
block|{
try|try
block|{
name|File
name|f
init|=
name|File
operator|.
name|createTempFile
argument_list|(
name|u
operator|.
name|getFile
argument_list|()
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'_'
argument_list|)
argument_list|,
literal|".tmp"
argument_list|)
decl_stmt|;
name|f
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|FileOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|iData
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
name|String
name|ret
init|=
name|f
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

