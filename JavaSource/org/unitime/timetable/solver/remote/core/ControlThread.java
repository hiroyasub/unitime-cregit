begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|remote
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ControlThread
extends|extends
name|Thread
implements|implements
name|ResourceProvider
block|{
specifier|private
specifier|static
name|ServerLogger
name|sLogger
init|=
operator|new
name|ServerLogger
argument_list|(
name|ControlThread
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ServerThread
name|iServer
decl_stmt|;
specifier|private
name|Socket
name|iSocket
init|=
literal|null
decl_stmt|;
specifier|private
name|Hashtable
name|iResourceCache
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|public
name|ControlThread
parameter_list|(
name|ServerThread
name|server
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setName
argument_list|(
literal|"RemoteSolver.ControlThread"
argument_list|)
expr_stmt|;
name|iServer
operator|=
name|server
expr_stmt|;
block|}
specifier|public
name|boolean
name|register
parameter_list|()
block|{
name|Object
name|answer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|sLogger
operator|.
name|debug
argument_list|(
literal|"Trying to register at "
operator|+
name|iServer
operator|.
name|getServerHost
argument_list|()
operator|+
literal|":"
operator|+
name|iServer
operator|.
name|getServerPort
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Trying to register at "
operator|+
name|iServer
operator|.
name|getServerHost
argument_list|()
operator|+
literal|":"
operator|+
name|iServer
operator|.
name|getServerPort
argument_list|()
argument_list|)
expr_stmt|;
name|iSocket
operator|=
name|ConnectionFactory
operator|.
name|getSocketFactory
argument_list|()
operator|.
name|createSocket
argument_list|(
name|iServer
operator|.
name|getServerHost
argument_list|()
argument_list|,
name|iServer
operator|.
name|getServerPort
argument_list|()
argument_list|)
expr_stmt|;
name|sLogger
operator|.
name|debug
argument_list|(
literal|"server connected"
argument_list|)
expr_stmt|;
name|answer
operator|=
name|query
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"connect"
block|,
operator|new
name|Integer
argument_list|(
name|iServer
operator|.
name|getPort
argument_list|()
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|sLogger
operator|.
name|debug
argument_list|(
literal|" -- answer "
operator|+
name|answer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLogger
operator|.
name|error
argument_list|(
literal|"Unable to register server, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
literal|"ack"
operator|.
name|equals
argument_list|(
name|answer
argument_list|)
condition|)
block|{
if|if
condition|(
name|iSocket
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|iSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
name|iSocket
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|iSocket
operator|!=
literal|null
condition|)
block|{
name|sLogger
operator|.
name|debug
argument_list|(
literal|"server registered"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Server registered."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|synchronized
name|Object
name|query
parameter_list|(
name|Object
name|command
parameter_list|)
throws|throws
name|Exception
block|{
comment|//System.out.println("q:"+(command instanceof Object[]?((Object[])command)[0]:command));
name|Object
name|answer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|RemoteIo
operator|.
name|writeObject
argument_list|(
name|iSocket
argument_list|,
name|command
argument_list|)
expr_stmt|;
try|try
block|{
name|answer
operator|=
name|RemoteIo
operator|.
name|readObject
argument_list|(
name|iSocket
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|EOFException
name|ex
parameter_list|)
block|{
block|}
empty_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLogger
operator|.
name|error
argument_list|(
literal|"Unable to query, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|//System.out.println("a:"+(answer!=null&& answer instanceof Object[]?((Object[])answer)[0]:answer));
if|if
condition|(
name|answer
operator|!=
literal|null
operator|&&
name|answer
operator|instanceof
name|Exception
condition|)
throw|throw
operator|(
name|Exception
operator|)
name|answer
throw|;
return|return
name|answer
return|;
block|}
specifier|public
specifier|synchronized
name|Object
name|query
parameter_list|(
name|Object
name|command
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|timeout
operator|<=
literal|0
condition|)
return|return
name|query
argument_list|(
name|command
argument_list|)
return|;
name|ExecThread
name|et
init|=
operator|new
name|ExecThread
argument_list|(
name|command
argument_list|)
decl_stmt|;
name|et
operator|.
name|start
argument_list|()
expr_stmt|;
name|et
operator|.
name|join
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
if|if
condition|(
name|et
operator|.
name|isAlive
argument_list|()
condition|)
name|et
operator|.
name|interrupt
argument_list|()
expr_stmt|;
if|if
condition|(
name|et
operator|.
name|getAnswer
argument_list|()
operator|!=
literal|null
operator|&&
name|et
operator|.
name|getAnswer
argument_list|()
operator|instanceof
name|Exception
condition|)
throw|throw
operator|(
name|Exception
operator|)
name|et
operator|.
name|getAnswer
argument_list|()
throw|;
return|return
name|et
operator|.
name|getAnswer
argument_list|()
return|;
block|}
specifier|public
name|void
name|ping
parameter_list|()
block|{
name|sLogger
operator|.
name|debug
argument_list|(
literal|"ping"
argument_list|)
expr_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Object
name|answer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|answer
operator|=
name|query
argument_list|(
literal|"ping"
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|sLogger
operator|.
name|debug
argument_list|(
literal|" -- answer ("
operator|+
name|answer
operator|+
literal|") received in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
operator|)
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
literal|"ack"
operator|.
name|equals
argument_list|(
name|answer
argument_list|)
condition|)
block|{
name|sLogger
operator|.
name|debug
argument_list|(
literal|"   -- answer is not ack, disconnecting"
argument_list|)
expr_stmt|;
try|try
block|{
name|iSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|iSocket
operator|=
literal|null
expr_stmt|;
name|sLogger
operator|.
name|debug
argument_list|(
literal|"   -- disconnected"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|byte
index|[]
name|getResource
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|res
init|=
operator|(
name|byte
index|[]
operator|)
name|iResourceCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
literal|null
condition|)
block|{
name|res
operator|=
operator|(
name|byte
index|[]
operator|)
name|query
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"resource"
block|,
name|name
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
name|iResourceCache
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|iSocket
operator|==
literal|null
operator|||
name|iSocket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
if|if
condition|(
name|SolverTray
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
name|SolverTray
operator|.
name|getInstance
argument_list|()
operator|.
name|setStatus
argument_list|(
literal|"not connected"
argument_list|,
name|SolverTray
operator|.
name|sSolverDiscIcon
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|register
argument_list|()
condition|)
block|{
if|if
condition|(
name|SolverTray
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
name|SolverTray
operator|.
name|getInstance
argument_list|()
operator|.
name|setStatus
argument_list|(
literal|"initializing"
argument_list|,
name|SolverTray
operator|.
name|sSolverPauseIcon
argument_list|)
expr_stmt|;
block|}
name|Properties
name|webServerProperties
init|=
literal|null
decl_stmt|;
try|try
block|{
name|webServerProperties
operator|=
operator|(
name|Properties
operator|)
name|query
argument_list|(
literal|"properties"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|RemoteSolverServer
operator|.
name|initServer
argument_list|(
name|this
argument_list|,
operator|(
name|String
operator|)
name|query
argument_list|(
literal|"url"
argument_list|)
argument_list|,
name|webServerProperties
argument_list|)
expr_stmt|;
if|if
condition|(
name|SolverTray
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
name|SolverTray
operator|.
name|getInstance
argument_list|()
operator|.
name|setStatus
argument_list|(
literal|"running at "
operator|+
name|iSocket
operator|.
name|getLocalAddress
argument_list|()
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|iServer
operator|.
name|getPort
argument_list|()
argument_list|,
name|SolverTray
operator|.
name|sSolverRunIcon
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ping
argument_list|()
expr_stmt|;
try|try
block|{
name|sleep
argument_list|(
literal|30000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|sLogger
operator|.
name|debug
argument_list|(
literal|"Control thread interrupted."
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|iSocket
operator|!=
literal|null
operator|&&
operator|!
name|iSocket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Server disconnected."
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"disconnect"
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|iSocket
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|SolverTray
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
name|SolverTray
operator|.
name|getInstance
argument_list|()
operator|.
name|setStatus
argument_list|(
literal|"disconnected"
argument_list|,
name|SolverTray
operator|.
name|sSolverDiscIcon
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLogger
operator|.
name|warn
argument_list|(
literal|"Error during disconnect: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLogger
operator|.
name|error
argument_list|(
literal|"Unable to register and/or initialize: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|SolverTray
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
name|SolverTray
operator|.
name|getInstance
argument_list|()
operator|.
name|setStatus
argument_list|(
literal|"initialization failed"
argument_list|,
name|SolverTray
operator|.
name|sSolverStopIcon
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|serverStopped
parameter_list|()
block|{
name|interrupt
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|finalize
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
if|if
condition|(
name|iSocket
operator|!=
literal|null
condition|)
name|iSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|iSocket
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|finalize
argument_list|()
expr_stmt|;
block|}
class|class
name|ExecThread
extends|extends
name|Thread
block|{
name|Object
name|iCommand
init|=
literal|null
decl_stmt|;
name|Object
name|iAnswer
init|=
literal|null
decl_stmt|;
name|ExecThread
parameter_list|(
name|Object
name|command
parameter_list|)
block|{
name|iCommand
operator|=
name|command
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
try|try
block|{
name|RemoteIo
operator|.
name|writeObject
argument_list|(
name|iSocket
argument_list|,
name|iCommand
argument_list|)
expr_stmt|;
try|try
block|{
name|iAnswer
operator|=
name|RemoteIo
operator|.
name|readObject
argument_list|(
name|iSocket
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|EOFException
name|ex
parameter_list|)
block|{
block|}
empty_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLogger
operator|.
name|error
argument_list|(
literal|"Unable to query, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|iAnswer
operator|=
name|e
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iAnswer
operator|=
name|e
expr_stmt|;
block|}
block|}
specifier|public
name|Object
name|getAnswer
parameter_list|()
block|{
return|return
name|iAnswer
return|;
block|}
block|}
block|}
end_class

end_unit

