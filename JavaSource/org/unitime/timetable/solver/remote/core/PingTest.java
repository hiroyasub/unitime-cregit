begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|remote
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|PingTest
block|{
specifier|private
specifier|static
name|int
name|sPort
init|=
literal|1205
decl_stmt|;
specifier|private
specifier|static
name|int
name|sPacketSize
init|=
literal|10
decl_stmt|;
specifier|public
specifier|static
class|class
name|Listener
extends|extends
name|Thread
block|{
specifier|private
name|ServerSocket
name|iSocket
init|=
literal|null
decl_stmt|;
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|setName
argument_list|(
literal|"Listener"
argument_list|)
expr_stmt|;
name|iSocket
operator|=
operator|new
name|ServerSocket
argument_list|(
name|sPort
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Listener started at port "
operator|+
name|sPort
operator|+
literal|"."
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
operator|(
operator|new
name|PingServer
argument_list|(
name|iSocket
operator|.
name|accept
argument_list|()
argument_list|)
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|iSocket
operator|!=
literal|null
condition|)
name|iSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|iSocket
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|finalize
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
if|if
condition|(
name|iSocket
operator|!=
literal|null
condition|)
name|iSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|iSocket
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|finalize
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|PingServer
extends|extends
name|Thread
block|{
name|Socket
name|iSocket
init|=
literal|null
decl_stmt|;
specifier|public
name|PingServer
parameter_list|(
name|Socket
name|socket
parameter_list|)
block|{
name|iSocket
operator|=
name|socket
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|setName
argument_list|(
literal|"PingServer"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Ping server created."
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Object
name|command
init|=
name|RemoteIo
operator|.
name|readObject
argument_list|(
name|iSocket
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"ping"
operator|.
name|equals
argument_list|(
name|command
argument_list|)
condition|)
block|{
name|RemoteIo
operator|.
name|writeObject
argument_list|(
name|iSocket
argument_list|,
literal|"ack"
argument_list|)
expr_stmt|;
block|}
else|else
break|break;
block|}
name|iSocket
operator|.
name|close
argument_list|()
expr_stmt|;
name|iSocket
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|iSocket
operator|!=
literal|null
condition|)
name|iSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|iSocket
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|finalize
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
if|if
condition|(
name|iSocket
operator|!=
literal|null
condition|)
name|iSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|iSocket
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|finalize
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|PingClient
extends|extends
name|Thread
block|{
name|Socket
name|socket
init|=
literal|null
decl_stmt|;
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|setName
argument_list|(
literal|"PingClient"
argument_list|)
expr_stmt|;
name|socket
operator|=
operator|new
name|Socket
argument_list|(
literal|"localhost"
argument_list|,
name|sPort
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Client connected."
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|25
condition|;
name|i
operator|++
control|)
block|{
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|RemoteIo
operator|.
name|writeObject
argument_list|(
name|socket
argument_list|,
literal|"ping"
argument_list|)
expr_stmt|;
name|Object
name|response
init|=
name|RemoteIo
operator|.
name|readObject
argument_list|(
name|socket
argument_list|)
decl_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Ping recieved in "
operator|+
operator|(
name|t1
operator|-
name|t0
operator|)
operator|+
literal|" ms."
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
name|RemoteIo
operator|.
name|writeObject
argument_list|(
name|socket
argument_list|,
literal|"quit"
argument_list|)
expr_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
name|socket
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|socket
operator|!=
literal|null
condition|)
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|socket
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|finalize
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
if|if
condition|(
name|socket
operator|!=
literal|null
condition|)
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|socket
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|finalize
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
literal|"server"
operator|.
name|equals
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|Listener
name|listener
init|=
operator|new
name|Listener
argument_list|()
decl_stmt|;
name|listener
operator|.
name|start
argument_list|()
expr_stmt|;
name|listener
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|"client"
operator|.
name|equals
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|PingClient
name|clt
init|=
operator|new
name|PingClient
argument_list|()
decl_stmt|;
name|clt
operator|.
name|start
argument_list|()
expr_stmt|;
name|clt
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

