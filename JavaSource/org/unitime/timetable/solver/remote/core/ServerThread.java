begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|remote
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ServerThread
extends|extends
name|Thread
block|{
specifier|private
specifier|static
name|ServerLogger
name|sLogger
init|=
operator|new
name|ServerLogger
argument_list|(
name|ServerThread
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ControlThread
name|iControlThread
decl_stmt|;
specifier|private
name|ServerSocket
name|iServerSocket
decl_stmt|;
specifier|private
name|String
name|iServerHost
decl_stmt|;
specifier|private
name|int
name|iServerPort
decl_stmt|,
name|iPort
decl_stmt|;
specifier|private
name|Properties
name|iProperties
decl_stmt|;
specifier|private
name|Class
name|iRemoteSolverClass
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iKeyStore
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iKeyStorePasswd
init|=
literal|null
decl_stmt|;
specifier|public
name|String
name|getServerHost
parameter_list|()
block|{
return|return
name|iServerHost
return|;
block|}
specifier|public
name|int
name|getServerPort
parameter_list|()
block|{
return|return
name|iServerPort
return|;
block|}
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|iPort
return|;
block|}
specifier|public
name|ControlThread
name|getControlThread
parameter_list|()
block|{
return|return
name|iControlThread
return|;
block|}
specifier|public
name|ServerThread
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setName
argument_list|(
literal|"RemoteSolver.ServerThread"
argument_list|)
expr_stmt|;
name|iProperties
operator|=
name|properties
expr_stmt|;
name|iServerHost
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.solver.register.host"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|iServerPort
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.solver.register.port"
argument_list|,
literal|"9998"
argument_list|)
argument_list|)
expr_stmt|;
name|iPort
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.solver.remote.port"
argument_list|,
literal|"1200"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Properties
name|getProperties
parameter_list|()
block|{
return|return
name|iProperties
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|iServerSocket
operator|!=
literal|null
condition|)
name|iServerSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|iServerSocket
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|ConnectionFactory
operator|.
name|init
argument_list|(
name|iProperties
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|iServerSocket
operator|=
name|ConnectionFactory
operator|.
name|getServerSocketFactory
argument_list|()
operator|.
name|createServerSocket
argument_list|(
name|iPort
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLogger
operator|.
name|debug
argument_list|(
literal|"Unable to connect to port "
operator|+
name|iPort
argument_list|)
expr_stmt|;
name|iPort
operator|++
expr_stmt|;
block|}
block|}
name|sLogger
operator|.
name|debug
argument_list|(
literal|"Connected to port "
operator|+
name|iServerSocket
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Connected to port "
operator|+
name|iServerSocket
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|iControlThread
operator|=
operator|new
name|ControlThread
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|iControlThread
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Socket
name|socket
init|=
name|iServerSocket
operator|.
name|accept
argument_list|()
decl_stmt|;
name|sLogger
operator|.
name|debug
argument_list|(
literal|"Client "
operator|+
name|socket
operator|.
name|getInetAddress
argument_list|()
operator|+
literal|" connected."
argument_list|)
expr_stmt|;
name|Thread
name|remoteServer
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|RemoteSolverServer
argument_list|(
name|socket
argument_list|)
argument_list|)
decl_stmt|;
name|remoteServer
operator|.
name|setName
argument_list|(
literal|"RemoteSolver.Server"
argument_list|)
expr_stmt|;
name|remoteServer
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|remoteServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SocketException
name|e
parameter_list|)
block|{
name|sLogger
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLogger
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|iControlThread
operator|!=
literal|null
condition|)
name|iControlThread
operator|.
name|serverStopped
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|iServerSocket
operator|!=
literal|null
operator|&&
operator|!
name|iServerSocket
operator|.
name|isClosed
argument_list|()
condition|)
name|iServerSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
name|sLogger
operator|.
name|debug
argument_list|(
literal|"Server finished."
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initServer
parameter_list|(
name|ResourceProvider
name|provider
parameter_list|,
name|String
name|url
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|iRemoteSolverClass
operator|==
literal|null
condition|)
block|{
name|ClassLoader
name|cl
init|=
name|RemoteSolverServer
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|iRemoteSolverClass
operator|=
name|cl
operator|.
name|loadClass
argument_list|(
literal|"org.unitime.timetable.solver.remote.RemoteSolver"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ex
parameter_list|)
block|{
name|ServerClassLoader
operator|.
name|getInstance
argument_list|()
operator|.
name|setResourceProvicer
argument_list|(
name|provider
argument_list|)
expr_stmt|;
name|iRemoteSolverClass
operator|=
name|ServerClassLoader
operator|.
name|getInstance
argument_list|()
operator|.
name|loadClass
argument_list|(
literal|"org.unitime.timetable.solver.remote.RemoteSolver"
argument_list|)
expr_stmt|;
block|}
block|}
name|iRemoteSolverClass
operator|.
name|getMethod
argument_list|(
literal|"init"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Properties
operator|.
name|class
block|,
name|String
operator|.
name|class
block|}
argument_list|)
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
operator|new
name|Object
index|[]
block|{
name|getProperties
argument_list|()
block|,
name|url
block|}
argument_list|)
expr_stmt|;
name|ServerLogger
operator|.
name|setInitialized
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|finalize
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
if|if
condition|(
name|iServerSocket
operator|!=
literal|null
condition|)
name|iServerSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|iServerSocket
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|finalize
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

