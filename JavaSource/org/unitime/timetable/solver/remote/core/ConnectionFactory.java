begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|remote
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ServerSocketFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|X509TrustManager
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ConnectionFactory
block|{
specifier|private
specifier|static
name|boolean
name|sInitialized
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
name|ServerSocketFactory
name|sServerSocketFactory
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|SocketFactory
name|sSocketFactory
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
name|void
name|init
parameter_list|(
name|Properties
name|properties
parameter_list|)
throws|throws
name|Exception
block|{
name|init
argument_list|(
name|properties
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|init
parameter_list|(
name|Properties
name|properties
parameter_list|,
name|File
name|defaultKeyFolder
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|sInitialized
condition|)
return|return;
name|String
name|keyStore
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.solver.register.keystore"
argument_list|)
decl_stmt|;
name|String
name|keyStorePasswd
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.solver.register.keystore.passwd"
argument_list|,
literal|"Fh3g1H03e95kf54xZ"
argument_list|)
decl_stmt|;
name|InputStream
name|keyStoreIs
init|=
literal|null
decl_stmt|;
name|File
name|keyFile
init|=
operator|(
name|keyStore
operator|!=
literal|null
condition|?
operator|new
name|File
argument_list|(
name|keyStore
argument_list|)
else|:
name|defaultKeyFolder
operator|!=
literal|null
condition|?
operator|new
name|File
argument_list|(
name|defaultKeyFolder
argument_list|,
literal|"solver.key"
argument_list|)
else|:
operator|new
name|File
argument_list|(
literal|"solver.key"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|keyFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|keyStoreIs
operator|=
operator|new
name|FileInputStream
argument_list|(
name|keyFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keyStoreIs
operator|=
name|ServerThread
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"solver.key"
argument_list|)
expr_stmt|;
block|}
name|SSLContext
name|ctx
init|=
name|SSLContext
operator|.
name|getInstance
argument_list|(
literal|"SSL"
argument_list|)
decl_stmt|;
name|KeyStore
name|ks
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
literal|"JKS"
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyStoreIs
operator|!=
literal|null
condition|)
block|{
name|ks
operator|.
name|load
argument_list|(
name|keyStoreIs
argument_list|,
name|keyStorePasswd
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|keyStoreIs
operator|!=
literal|null
condition|)
name|keyStoreIs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
comment|/* 		TrustManagerFactory tmf = TrustManagerFactory.getInstance("SunX509"); 		tmf.init(ks); 		*/
name|TrustManager
index|[]
name|trustAllCerts
init|=
operator|new
name|TrustManager
index|[]
block|{
operator|new
name|X509TrustManager
argument_list|()
block|{
specifier|public
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
index|[]
name|getAcceptedIssuers
parameter_list|()
block|{
return|return
literal|null
return|;
block_content|}
block|public void checkClientTrusted(java.security.cert.X509Certificate[] certs
operator|,
function|String authType
block|)
block|{
block|}
specifier|public
name|void
name|checkServerTrusted
parameter_list|(
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
index|[]
name|certs
parameter_list|,
name|String
name|authType
parameter_list|)
block|{
block_content|}
block|} 		}
function|;
name|KeyManagerFactory
name|kmf
operator|=
name|KeyManagerFactory
operator|.
name|getInstance
argument_list|(
name|KeyManagerFactory
operator|.
name|getDefaultAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
name|kmf
operator|.
name|init
argument_list|(
name|ks
argument_list|,
name|keyStorePasswd
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|init
argument_list|(
name|kmf
operator|.
name|getKeyManagers
argument_list|()
argument_list|,
name|trustAllCerts
argument_list|,
operator|new
name|SecureRandom
argument_list|()
argument_list|)
expr_stmt|;
name|sServerSocketFactory
operator|=
name|ctx
operator|.
name|getServerSocketFactory
argument_list|()
expr_stmt|;
name|sSocketFactory
operator|=
name|ctx
operator|.
name|getSocketFactory
argument_list|()
expr_stmt|;
name|sInitialized
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
specifier|static
name|SocketFactory
name|getSocketFactory
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|sInitialized
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Connection factory not initialized."
argument_list|)
throw|;
return|return
name|sSocketFactory
return|;
block|}
specifier|public
specifier|static
name|ServerSocketFactory
name|getServerSocketFactory
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|sInitialized
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Connection factory not initialized."
argument_list|)
throw|;
return|return
name|sServerSocketFactory
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isInitialized
parameter_list|()
block|{
return|return
name|sInitialized
return|;
block|}
block|}
end_class

end_unit

