begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|base
operator|.
name|_BaseRootDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|SolverPassivationThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|SolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|TimetableSolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ExamSolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ExamSolver
operator|.
name|ExamSolverDisposeListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|remote
operator|.
name|core
operator|.
name|RemoteSolverServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|remote
operator|.
name|core
operator|.
name|SolverTray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|TimetableInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|TimetableInfoFileProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|RemoteSolver
extends|extends
name|TimetableSolver
implements|implements
name|TimetableInfoFileProxy
block|{
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RemoteSolver
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|File
name|sBackupDir
init|=
operator|new
name|File
argument_list|(
literal|"."
operator|+
name|File
operator|.
name|separator
operator|+
literal|"restore"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|File
name|sPassivationDir
init|=
operator|new
name|File
argument_list|(
literal|"."
operator|+
name|File
operator|.
name|separator
operator|+
literal|"passivate"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|sInitialized
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|sBackupWhenDone
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
name|int
name|sUsageBase
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
name|Date
name|sStartTime
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Hashtable
name|sSolvers
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|SolverPassivationThread
name|sSolverPassivationThread
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|ExamSolver
name|sExamSolver
init|=
literal|null
decl_stmt|;
specifier|public
name|RemoteSolver
parameter_list|(
name|DataProperties
name|properties
parameter_list|)
block|{
name|super
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
literal|"remote"
return|;
block|}
specifier|public
name|String
name|getHostLabel
parameter_list|()
block|{
return|return
name|getHost
argument_list|()
return|;
block|}
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|dispose
argument_list|(
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dispose
parameter_list|(
name|String
name|puid
parameter_list|)
block|{
name|super
operator|.
name|dispose
argument_list|()
expr_stmt|;
if|if
condition|(
name|puid
operator|!=
literal|null
condition|)
name|sSolvers
operator|.
name|remove
argument_list|(
name|puid
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|exec
parameter_list|(
name|Object
index|[]
name|cmd
parameter_list|)
throws|throws
name|Exception
block|{
name|Class
index|[]
name|types
init|=
operator|new
name|Class
index|[
operator|(
name|cmd
operator|.
name|length
operator|-
literal|2
operator|)
operator|/
literal|2
index|]
decl_stmt|;
name|Object
index|[]
name|args
init|=
operator|new
name|Object
index|[
operator|(
name|cmd
operator|.
name|length
operator|-
literal|2
operator|)
operator|/
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|types
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|types
index|[
name|i
index|]
operator|=
operator|(
name|Class
operator|)
name|cmd
index|[
literal|2
operator|*
name|i
operator|+
literal|2
index|]
expr_stmt|;
name|args
index|[
name|i
index|]
operator|=
name|cmd
index|[
literal|2
operator|*
name|i
operator|+
literal|3
index|]
expr_stmt|;
block|}
return|return
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
operator|(
name|String
operator|)
name|cmd
index|[
literal|0
index|]
argument_list|,
name|types
argument_list|)
operator|.
name|invoke
argument_list|(
name|this
argument_list|,
name|args
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Object
name|answer
parameter_list|(
name|Object
name|cmd
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|cmd
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|cmd
operator|instanceof
name|Object
index|[]
condition|)
block|{
name|Object
index|[]
name|arr
init|=
operator|(
name|Object
index|[]
operator|)
name|cmd
decl_stmt|;
if|if
condition|(
literal|"hasExamSolver"
operator|.
name|equals
argument_list|(
name|arr
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
return|return
operator|new
name|Boolean
argument_list|(
name|sExamSolver
operator|!=
literal|null
argument_list|)
return|;
block|}
if|if
condition|(
literal|"createExamSolver"
operator|.
name|equals
argument_list|(
name|arr
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|sExamSolver
operator|!=
literal|null
condition|)
name|sExamSolver
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|sExamSolver
operator|=
operator|new
name|ExamSolver
argument_list|(
operator|(
name|DataProperties
operator|)
name|arr
index|[
literal|1
index|]
argument_list|,
operator|new
name|ExamSolverDisposeListener
argument_list|()
block|{
specifier|public
name|void
name|onDispose
parameter_list|()
block|{
name|sExamSolver
operator|=
literal|null
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|arr
operator|.
name|length
operator|>=
literal|2
operator|&&
literal|"EXAM"
operator|.
name|equals
argument_list|(
name|arr
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"exists"
operator|.
name|equals
argument_list|(
name|arr
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
return|return
operator|new
name|Boolean
argument_list|(
name|sExamSolver
operator|!=
literal|null
argument_list|)
return|;
block|}
if|if
condition|(
name|sExamSolver
operator|!=
literal|null
condition|)
return|return
name|sExamSolver
operator|.
name|exec
argument_list|(
name|arr
argument_list|)
return|;
else|else
return|return
literal|null
return|;
block|}
name|RemoteSolver
name|solver
init|=
literal|null
decl_stmt|;
name|String
name|puid
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|arr
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|puid
operator|=
operator|(
name|String
operator|)
name|arr
index|[
literal|1
index|]
expr_stmt|;
name|solver
operator|=
operator|(
name|RemoteSolver
operator|)
name|sSolvers
operator|.
name|get
argument_list|(
name|puid
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"getSolvers"
operator|.
name|equals
argument_list|(
name|arr
index|[
literal|0
index|]
argument_list|)
condition|)
return|return
operator|new
name|HashSet
argument_list|(
name|sSolvers
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
if|if
condition|(
literal|"create"
operator|.
name|equals
argument_list|(
name|arr
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
name|solver
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|solver
operator|=
operator|new
name|RemoteSolver
argument_list|(
operator|(
name|DataProperties
operator|)
name|arr
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|sSolvers
operator|.
name|put
argument_list|(
name|puid
argument_list|,
name|solver
argument_list|)
expr_stmt|;
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
if|if
condition|(
literal|"dispose"
operator|.
name|equals
argument_list|(
name|arr
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
name|solver
operator|.
name|dispose
argument_list|(
name|puid
argument_list|)
expr_stmt|;
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
else|else
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
if|if
condition|(
literal|"exists"
operator|.
name|equals
argument_list|(
name|arr
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
return|return
operator|new
name|Boolean
argument_list|(
name|solver
operator|!=
literal|null
argument_list|)
return|;
block|}
if|if
condition|(
literal|"getAvailableMemory"
operator|.
name|equals
argument_list|(
name|arr
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
return|return
operator|new
name|Long
argument_list|(
name|getAvailableMemory
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
literal|"getVersion"
operator|.
name|equals
argument_list|(
name|arr
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
return|return
name|Constants
operator|.
name|VERSION
operator|+
literal|"."
operator|+
name|Constants
operator|.
name|BLD_NUMBER
return|;
block|}
if|if
condition|(
literal|"getStartTime"
operator|.
name|equals
argument_list|(
name|arr
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
return|return
name|sStartTime
return|;
block|}
if|if
condition|(
literal|"getUsage"
operator|.
name|equals
argument_list|(
name|arr
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
return|return
operator|new
name|Long
argument_list|(
name|getUsage
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
literal|"stopUsing"
operator|.
name|equals
argument_list|(
name|arr
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|sUsageBase
operator|=
literal|1000
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
literal|"startUsing"
operator|.
name|equals
argument_list|(
name|arr
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|sUsageBase
operator|=
literal|0
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
return|return
name|solver
operator|.
name|exec
argument_list|(
name|arr
argument_list|)
return|;
block|}
name|sLog
operator|.
name|warn
argument_list|(
literal|"Unknown command:"
operator|+
name|cmd
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|_BaseRootDAO
operator|.
name|closeCurrentThreadSessions
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|backupAll
parameter_list|()
block|{
name|backup
argument_list|(
name|sBackupDir
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|backup
parameter_list|(
name|File
name|folder
parameter_list|)
block|{
synchronized|synchronized
init|(
name|sSolvers
init|)
block|{
if|if
condition|(
name|folder
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|folder
operator|.
name|isDirectory
argument_list|()
condition|)
return|return;
name|folder
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
index|[]
name|old
init|=
name|folder
operator|.
name|listFiles
argument_list|(
operator|new
name|BackupFileFilter
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|old
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|old
index|[
name|i
index|]
operator|.
name|delete
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|sSolvers
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|puid
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RemoteSolver
name|solver
init|=
operator|(
name|RemoteSolver
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|solver
operator|.
name|backup
argument_list|(
name|folder
argument_list|,
name|puid
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sExamSolver
operator|!=
literal|null
condition|)
block|{
name|sExamSolver
operator|.
name|backup
argument_list|(
name|folder
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|restore
parameter_list|(
name|File
name|folder
parameter_list|,
name|File
name|passivateFolder
parameter_list|)
block|{
if|if
condition|(
operator|!
name|folder
operator|.
name|exists
argument_list|()
operator|||
operator|!
name|folder
operator|.
name|isDirectory
argument_list|()
condition|)
return|return;
synchronized|synchronized
init|(
name|sSolvers
init|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|sSolvers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RemoteSolver
name|solver
init|=
operator|(
name|RemoteSolver
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|solver
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
name|sSolvers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|File
index|[]
name|files
init|=
name|folder
operator|.
name|listFiles
argument_list|(
operator|new
name|BackupFileFilter
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|file
init|=
name|files
index|[
name|i
index|]
decl_stmt|;
name|String
name|puid
init|=
name|file
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|file
operator|.
name|getName
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"exam"
operator|.
name|equals
argument_list|(
name|puid
argument_list|)
condition|)
block|{
name|ExamSolver
name|solver
init|=
operator|new
name|ExamSolver
argument_list|(
operator|new
name|DataProperties
argument_list|()
argument_list|,
operator|new
name|ExamSolverDisposeListener
argument_list|()
block|{
specifier|public
name|void
name|onDispose
parameter_list|()
block|{
name|sExamSolver
operator|=
literal|null
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|.
name|restore
argument_list|(
name|folder
argument_list|)
condition|)
block|{
name|sExamSolver
operator|=
name|solver
expr_stmt|;
block|}
continue|continue;
block|}
name|RemoteSolver
name|solver
init|=
operator|new
name|RemoteSolver
argument_list|(
operator|new
name|DataProperties
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|.
name|restore
argument_list|(
name|folder
argument_list|,
name|puid
argument_list|)
condition|)
block|{
if|if
condition|(
name|passivateFolder
operator|!=
literal|null
condition|)
name|solver
operator|.
name|passivate
argument_list|(
name|passivateFolder
argument_list|,
name|puid
argument_list|)
expr_stmt|;
name|sSolvers
operator|.
name|put
argument_list|(
name|puid
argument_list|,
name|solver
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|backup
parameter_list|()
block|{
if|if
condition|(
operator|!
name|sBackupWhenDone
condition|)
return|return;
name|String
name|puid
init|=
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|)
decl_stmt|;
if|if
condition|(
name|puid
operator|!=
literal|null
condition|)
name|backup
argument_list|(
name|sBackupDir
argument_list|,
name|puid
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|onFinish
parameter_list|()
block|{
name|super
operator|.
name|onFinish
argument_list|()
expr_stmt|;
name|backup
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|onStop
parameter_list|()
block|{
name|super
operator|.
name|onStop
argument_list|()
expr_stmt|;
name|backup
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|afterLoad
parameter_list|()
block|{
name|super
operator|.
name|afterLoad
argument_list|()
expr_stmt|;
name|backup
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|afterFinalSectioning
parameter_list|()
block|{
name|super
operator|.
name|afterFinalSectioning
argument_list|()
expr_stmt|;
name|backup
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|restoreBest
parameter_list|()
block|{
name|super
operator|.
name|restoreBest
argument_list|()
expr_stmt|;
name|backup
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|saveBest
parameter_list|()
block|{
name|super
operator|.
name|saveBest
argument_list|()
expr_stmt|;
name|backup
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|saveToFile
parameter_list|(
name|String
name|name
parameter_list|,
name|TimetableInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|RemoteSolverServer
operator|.
name|query
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"saveToFile"
block|,
name|name
block|,
name|info
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TimetableInfo
name|loadFromFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|TimetableInfo
operator|)
name|RemoteSolverServer
operator|.
name|query
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"loadFromFile"
block|,
name|name
block|}
argument_list|)
return|;
block|}
specifier|public
name|void
name|deleteFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|RemoteSolverServer
operator|.
name|query
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"deleteFile"
block|,
name|name
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|refreshSolution
parameter_list|(
name|Long
name|solutionId
parameter_list|)
throws|throws
name|Exception
block|{
name|RemoteSolverServer
operator|.
name|query
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"refreshSolution"
block|,
name|solutionId
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|init
parameter_list|(
name|Properties
name|properties
parameter_list|,
name|String
name|url
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|sInitialized
condition|)
return|return;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"configure "
operator|+
name|properties
operator|.
name|getProperty
argument_list|(
literal|"General.Output"
argument_list|,
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|logFile
init|=
name|ToolBox
operator|.
name|configureLogging
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"General.Output"
argument_list|,
literal|"."
argument_list|)
argument_list|,
name|properties
argument_list|)
decl_stmt|;
if|if
condition|(
name|SolverTray
operator|.
name|isInitialized
argument_list|()
condition|)
name|SolverTray
operator|.
name|getInstance
argument_list|()
operator|.
name|setLogFile
argument_list|(
name|logFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.solver.backup.dir"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|sBackupDir
operator|=
operator|new
name|File
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.solver.backup.dir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.solver.passivation.dir"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|sPassivationDir
operator|=
operator|new
name|File
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.solver.passivation.dir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|properties
operator|.
name|setProperty
argument_list|(
literal|"connection.url"
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|HibernateUtil
operator|.
name|configureHibernate
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|restore
argument_list|(
name|sBackupDir
argument_list|,
name|sPassivationDir
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- backuped solver instances restored"
argument_list|)
expr_stmt|;
name|sSolverPassivationThread
operator|=
operator|new
name|SolverPassivationThread
argument_list|(
name|sPassivationDir
argument_list|,
name|sSolvers
argument_list|)
expr_stmt|;
name|sSolverPassivationThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- solver passivation thread started"
argument_list|)
expr_stmt|;
comment|//ensure that all classes needed for correct shutdown (backup) are loaded
name|ClassLoader
name|classLoader
init|=
name|RemoteSolver
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|classLoader
operator|.
name|loadClass
argument_list|(
literal|"org.apache.log4j.spi.ThrowableInformation"
argument_list|)
expr_stmt|;
name|classLoader
operator|.
name|loadClass
argument_list|(
literal|"org.apache.log4j.spi.VectorWriter"
argument_list|)
expr_stmt|;
name|classLoader
operator|.
name|loadClass
argument_list|(
literal|"org.apache.log4j.spi.NullWriter"
argument_list|)
expr_stmt|;
name|classLoader
operator|.
name|loadClass
argument_list|(
literal|"net.sf.cpsolver.coursett.TimetableXMLSaver"
argument_list|)
expr_stmt|;
name|classLoader
operator|.
name|loadClass
argument_list|(
literal|"org.dom4j.DocumentHelper"
argument_list|)
expr_stmt|;
name|classLoader
operator|.
name|loadClass
argument_list|(
literal|"org.unitime.commons.ToolBox"
argument_list|)
expr_stmt|;
name|classLoader
operator|.
name|loadClass
argument_list|(
literal|"org.unitime.commons.ToolBox$LineOutputStream"
argument_list|)
expr_stmt|;
name|classLoader
operator|.
name|loadClass
argument_list|(
literal|"org.dom4j.io.XMLWriter"
argument_list|)
expr_stmt|;
name|classLoader
operator|.
name|loadClass
argument_list|(
literal|"org.hibernate.proxy.HibernateProxy"
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- classes needed by shutdown hooks loaded"
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Solver ready."
argument_list|)
expr_stmt|;
name|sInitialized
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|finish
parameter_list|()
throws|throws
name|Exception
block|{
name|HibernateUtil
operator|.
name|closeHibernate
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Solver finished."
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|long
name|getAvailableMemory
parameter_list|()
block|{
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
return|return
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|maxMemory
argument_list|()
operator|-
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|totalMemory
argument_list|()
operator|+
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|freeMemory
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|long
name|getUsage
parameter_list|()
block|{
name|int
name|ret
init|=
name|sUsageBase
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|sSolvers
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|SolverProxy
name|solver
init|=
operator|(
name|SolverProxy
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ret
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|solver
operator|.
name|isPassivated
argument_list|()
condition|)
name|ret
operator|++
expr_stmt|;
try|try
block|{
if|if
condition|(
name|solver
operator|.
name|isWorking
argument_list|()
condition|)
name|ret
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
empty_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

