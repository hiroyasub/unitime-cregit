begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_interface
specifier|public
interface|interface
name|StudentCourseDemands
block|{
comment|/** 	 * Called only once 	 * @param hibSession opened hibernate session 	 * @param progress progress to print messages 	 * @param session current academic session 	 * @param offerings instructional offerings of the problem that is being loaded 	 */
specifier|public
name|void
name|init
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Progress
name|progress
parameter_list|,
name|Session
name|session
parameter_list|,
name|Collection
argument_list|<
name|InstructionalOffering
argument_list|>
name|offerings
parameter_list|)
function_decl|;
comment|/** 	 * Called once for each course 	 * @param course course for which demands are requested 	 * @return set of students (their unique ids, and weights) that request the course 	 */
specifier|public
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
name|getDemands
parameter_list|(
name|CourseOffering
name|course
parameter_list|)
function_decl|;
comment|/** 	 * Return true if students are made up (i.e, it does not make any sense to save them with the solution). 	 */
specifier|public
name|boolean
name|isMakingUpStudents
parameter_list|()
function_decl|;
comment|/** 	 * Return true if students are real students (not last-like) for which the student class enrollments 	 * apply (real student class enrollments can be loaded instead of solution's student class assignments). 	 */
specifier|public
name|boolean
name|canUseStudentClassEnrollmentsAsSolution
parameter_list|()
function_decl|;
comment|/** 	 * Return true if students should be weghted so that the offering is filled in completely. 	 */
specifier|public
name|boolean
name|isWeightStudentsToFillUpOffering
parameter_list|()
function_decl|;
comment|/** 	 * List of courses for a student 	 */
specifier|public
name|Set
argument_list|<
name|WeightedCourseOffering
argument_list|>
name|getCourses
parameter_list|(
name|Long
name|studentId
parameter_list|)
function_decl|;
specifier|public
specifier|static
class|class
name|WeightedStudentId
block|{
specifier|private
name|long
name|iStudentId
decl_stmt|;
specifier|private
name|float
name|iWeight
decl_stmt|;
specifier|private
name|String
name|iAreaAbbv
decl_stmt|,
name|iClasfCode
decl_stmt|,
name|iMajorCode
decl_stmt|,
name|iCurriculum
decl_stmt|;
specifier|public
name|WeightedStudentId
parameter_list|(
name|long
name|studentId
parameter_list|,
name|float
name|weight
parameter_list|)
block|{
name|iStudentId
operator|=
name|studentId
expr_stmt|;
name|iWeight
operator|=
name|weight
expr_stmt|;
block|}
specifier|public
name|WeightedStudentId
parameter_list|(
name|long
name|studentId
parameter_list|)
block|{
name|this
argument_list|(
name|studentId
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getStudentId
parameter_list|()
block|{
return|return
name|iStudentId
return|;
block|}
specifier|public
name|float
name|getWeight
parameter_list|()
block|{
return|return
name|iWeight
return|;
block|}
specifier|public
name|void
name|setWeight
parameter_list|(
name|float
name|weight
parameter_list|)
block|{
name|iWeight
operator|=
name|weight
expr_stmt|;
block|}
specifier|public
name|void
name|setStats
parameter_list|(
name|String
name|areaAbbv
parameter_list|,
name|String
name|clasfCode
parameter_list|,
name|String
name|majorCode
parameter_list|)
block|{
name|iAreaAbbv
operator|=
name|areaAbbv
expr_stmt|;
name|iClasfCode
operator|=
name|clasfCode
expr_stmt|;
name|iMajorCode
operator|=
name|majorCode
expr_stmt|;
block|}
specifier|public
name|void
name|setCurriculum
parameter_list|(
name|String
name|curriculum
parameter_list|)
block|{
name|iCurriculum
operator|=
name|curriculum
expr_stmt|;
block|}
specifier|public
name|String
name|getArea
parameter_list|()
block|{
return|return
name|iAreaAbbv
return|;
block|}
specifier|public
name|String
name|getClasf
parameter_list|()
block|{
return|return
name|iClasfCode
return|;
block|}
specifier|public
name|String
name|getMajor
parameter_list|()
block|{
return|return
name|iMajorCode
return|;
block|}
specifier|public
name|String
name|getCurriculum
parameter_list|()
block|{
return|return
name|iCurriculum
return|;
block|}
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|areaAbbv
parameter_list|,
name|String
name|clasfCode
parameter_list|,
name|String
name|majorCode
parameter_list|)
block|{
return|return
name|areaAbbv
operator|.
name|equals
argument_list|(
name|iAreaAbbv
argument_list|)
operator|&&
name|clasfCode
operator|.
name|equals
argument_list|(
name|iClasfCode
argument_list|)
operator|&&
name|majorCode
operator|.
name|equals
argument_list|(
name|iMajorCode
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|match
parameter_list|(
name|CurriculumClassification
name|clasf
parameter_list|)
block|{
if|if
condition|(
operator|!
name|clasf
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|.
name|equals
argument_list|(
name|iAreaAbbv
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
operator|.
name|equals
argument_list|(
name|iClasfCode
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|clasf
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getMajors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
for|for
control|(
name|PosMajor
name|m
range|:
name|clasf
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getMajors
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getCode
argument_list|()
operator|.
name|equals
argument_list|(
name|iMajorCode
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|new
name|Long
argument_list|(
name|getStudentId
argument_list|()
argument_list|)
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|WeightedStudentId
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|getStudentId
argument_list|()
operator|==
operator|(
operator|(
name|WeightedStudentId
operator|)
name|o
operator|)
operator|.
name|getStudentId
argument_list|()
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|getStudentId
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|WeightedCourseOffering
block|{
specifier|private
specifier|transient
name|CourseOffering
name|iCourseOffering
init|=
literal|null
decl_stmt|;
specifier|private
name|long
name|iCourseOfferingId
decl_stmt|;
specifier|private
name|float
name|iWeight
init|=
literal|1.0f
decl_stmt|;
specifier|public
name|WeightedCourseOffering
parameter_list|(
name|CourseOffering
name|courseOffering
parameter_list|)
block|{
name|iCourseOffering
operator|=
name|courseOffering
expr_stmt|;
name|iCourseOfferingId
operator|=
name|courseOffering
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
block|}
specifier|public
name|WeightedCourseOffering
parameter_list|(
name|Long
name|courseOfferingId
parameter_list|)
block|{
name|iCourseOfferingId
operator|=
name|courseOfferingId
expr_stmt|;
block|}
specifier|public
name|WeightedCourseOffering
parameter_list|(
name|CourseOffering
name|courseOffering
parameter_list|,
name|float
name|weight
parameter_list|)
block|{
name|this
argument_list|(
name|courseOffering
argument_list|)
expr_stmt|;
name|iWeight
operator|=
name|weight
expr_stmt|;
block|}
specifier|public
name|WeightedCourseOffering
parameter_list|(
name|Long
name|courseOfferingId
parameter_list|,
name|float
name|weight
parameter_list|)
block|{
name|this
argument_list|(
name|courseOfferingId
argument_list|)
expr_stmt|;
name|iWeight
operator|=
name|weight
expr_stmt|;
block|}
specifier|public
name|Long
name|getCourseOfferingId
parameter_list|()
block|{
return|return
name|iCourseOfferingId
return|;
block|}
specifier|public
name|CourseOffering
name|getCourseOffering
parameter_list|()
block|{
if|if
condition|(
name|iCourseOffering
operator|==
literal|null
condition|)
name|iCourseOffering
operator|=
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|iCourseOfferingId
argument_list|)
expr_stmt|;
return|return
name|iCourseOffering
return|;
block|}
specifier|public
name|float
name|getWeight
parameter_list|()
block|{
return|return
name|iWeight
return|;
block|}
block|}
block|}
end_interface

end_unit

