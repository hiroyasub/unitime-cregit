begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
operator|.
name|students
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Variable
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CurVariable
extends|extends
name|Variable
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
block|{
specifier|private
name|CurCourse
name|iCourse
decl_stmt|;
specifier|public
name|CurVariable
parameter_list|(
name|CurModel
name|model
parameter_list|,
name|CurCourse
name|course
parameter_list|,
name|int
name|first
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|iCourse
operator|=
name|course
expr_stmt|;
name|List
argument_list|<
name|CurValue
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|CurValue
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
name|values
operator|.
name|add
argument_list|(
operator|new
name|CurValue
argument_list|(
name|this
argument_list|,
name|model
operator|.
name|getStudents
argument_list|()
operator|.
name|get
argument_list|(
name|first
operator|+
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setValues
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CurCourse
name|getCourse
parameter_list|()
block|{
return|return
name|iCourse
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

