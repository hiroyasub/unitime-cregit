begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2010 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
operator|.
name|students
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Variable
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CurVariable
extends|extends
name|Variable
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
block|{
specifier|private
name|CurCourse
name|iCourse
decl_stmt|;
specifier|public
name|CurVariable
parameter_list|(
name|CurModel
name|model
parameter_list|,
name|CurCourse
name|course
parameter_list|,
name|int
name|first
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|iCourse
operator|=
name|course
expr_stmt|;
name|List
argument_list|<
name|CurValue
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|CurValue
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
name|values
operator|.
name|add
argument_list|(
operator|new
name|CurValue
argument_list|(
name|this
argument_list|,
name|model
operator|.
name|getStudents
argument_list|()
operator|.
name|get
argument_list|(
name|first
operator|+
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setValues
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CurCourse
name|getCourse
parameter_list|()
block|{
return|return
name|iCourse
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

