begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
operator|.
name|students
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormatSymbols
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|Configurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|DefaultSingleAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|context
operator|.
name|AssignmentConstraintContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|context
operator|.
name|ModelWithContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Neighbour
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solution
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solution
operator|.
name|SolutionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solver
operator|.
name|Solver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|DocumentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|XMLWriter
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CurModel
extends|extends
name|ModelWithContext
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|,
name|CurModel
operator|.
name|CurModelContext
argument_list|>
block|{
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CurModel
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DecimalFormat
name|sDF
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.000"
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|CurStudent
argument_list|>
name|iStudents
init|=
operator|new
name|ArrayList
argument_list|<
name|CurStudent
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|CurCourse
argument_list|>
name|iCourses
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|CurCourse
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|CurCourse
argument_list|>
name|iSwapableCourses
init|=
operator|new
name|ArrayList
argument_list|<
name|CurCourse
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|CurStudentLimit
name|iStudentLimit
init|=
literal|null
decl_stmt|;
specifier|private
name|double
name|iMinStudentWeight
init|=
name|Float
operator|.
name|MAX_VALUE
decl_stmt|,
name|iMaxStudentWeight
init|=
literal|0.0
decl_stmt|,
name|iTotalStudentWeight
init|=
literal|0.0
decl_stmt|;
specifier|private
name|double
name|iBestAssignedWeight
init|=
literal|0.0
decl_stmt|,
name|iMaxAssignedWeight
init|=
literal|0.0
decl_stmt|;
specifier|public
name|CurModel
parameter_list|(
name|Collection
argument_list|<
name|CurStudent
argument_list|>
name|students
parameter_list|)
block|{
for|for
control|(
name|CurStudent
name|student
range|:
name|students
control|)
name|student
operator|.
name|setModel
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|iStudents
operator|.
name|addAll
argument_list|(
name|students
argument_list|)
expr_stmt|;
name|iStudentLimit
operator|=
operator|new
name|CurStudentLimit
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
for|for
control|(
name|CurStudent
name|student
range|:
name|getStudents
argument_list|()
control|)
block|{
name|iMinStudentWeight
operator|=
name|Math
operator|.
name|min
argument_list|(
name|iMinStudentWeight
argument_list|,
name|student
operator|.
name|getWeight
argument_list|()
argument_list|)
expr_stmt|;
name|iMaxStudentWeight
operator|=
name|Math
operator|.
name|max
argument_list|(
name|iMaxStudentWeight
argument_list|,
name|student
operator|.
name|getWeight
argument_list|()
argument_list|)
expr_stmt|;
name|iTotalStudentWeight
operator|+=
name|student
operator|.
name|getWeight
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|double
name|getMinStudentWidth
parameter_list|()
block|{
return|return
name|iMinStudentWeight
return|;
block|}
specifier|public
name|double
name|getMaxStudentWidth
parameter_list|()
block|{
return|return
name|iMaxStudentWeight
return|;
block|}
specifier|public
name|void
name|addCourse
parameter_list|(
name|Long
name|courseId
parameter_list|,
name|String
name|courseName
parameter_list|,
name|double
name|size
parameter_list|,
name|Double
name|priority
parameter_list|)
block|{
name|CurCourse
name|course
init|=
operator|new
name|CurCourse
argument_list|(
name|this
argument_list|,
name|courseId
argument_list|,
name|courseName
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|iStudents
operator|.
name|size
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|size
operator|/
name|getMinStudentWidth
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|size
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|iCourses
operator|.
name|put
argument_list|(
name|courseId
argument_list|,
name|course
argument_list|)
expr_stmt|;
if|if
condition|(
name|course
operator|.
name|getNrStudents
argument_list|()
operator|<
name|iStudents
operator|.
name|size
argument_list|()
condition|)
name|iSwapableCourses
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|iMaxAssignedWeight
operator|+=
name|course
operator|.
name|getOriginalMaxSize
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setTargetShare
parameter_list|(
name|Long
name|c1
parameter_list|,
name|Long
name|c2
parameter_list|,
name|double
name|share
parameter_list|,
name|boolean
name|round
parameter_list|)
block|{
name|CurCourse
name|course1
init|=
name|iCourses
operator|.
name|get
argument_list|(
name|c1
argument_list|)
decl_stmt|;
name|CurCourse
name|course2
init|=
name|iCourses
operator|.
name|get
argument_list|(
name|c2
argument_list|)
decl_stmt|;
name|double
name|ub
init|=
name|Math
operator|.
name|min
argument_list|(
name|course1
operator|.
name|getOriginalMaxSize
argument_list|()
argument_list|,
name|course2
operator|.
name|getOriginalMaxSize
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|lb
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|course1
operator|.
name|getOriginalMaxSize
argument_list|()
operator|+
name|course2
operator|.
name|getOriginalMaxSize
argument_list|()
operator|-
name|iTotalStudentWeight
argument_list|)
decl_stmt|;
name|double
name|ts
init|=
name|Math
operator|.
name|max
argument_list|(
name|lb
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|ub
argument_list|,
name|share
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ts
operator|!=
name|share
condition|)
name|sLog
operator|.
name|debug
argument_list|(
literal|"Target share between "
operator|+
name|course1
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" and "
operator|+
name|course2
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" changed to "
operator|+
name|ts
operator|+
literal|" (was: "
operator|+
name|share
operator|+
literal|", lb:"
operator|+
name|lb
operator|+
literal|", ub:"
operator|+
name|ub
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|course1
operator|.
name|setTargetShare
argument_list|(
name|c2
argument_list|,
name|round
condition|?
name|Math
operator|.
name|round
argument_list|(
name|ts
argument_list|)
else|:
name|ts
argument_list|)
expr_stmt|;
name|course2
operator|.
name|setTargetShare
argument_list|(
name|c1
argument_list|,
name|round
condition|?
name|Math
operator|.
name|round
argument_list|(
name|ts
argument_list|)
else|:
name|ts
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setTargetShareNoAdjustments
parameter_list|(
name|Long
name|c1
parameter_list|,
name|Long
name|c2
parameter_list|,
name|double
name|share
parameter_list|)
block|{
name|CurCourse
name|course1
init|=
name|iCourses
operator|.
name|get
argument_list|(
name|c1
argument_list|)
decl_stmt|;
name|CurCourse
name|course2
init|=
name|iCourses
operator|.
name|get
argument_list|(
name|c2
argument_list|)
decl_stmt|;
name|course1
operator|.
name|setTargetShare
argument_list|(
name|c2
argument_list|,
name|share
argument_list|)
expr_stmt|;
name|course2
operator|.
name|setTargetShare
argument_list|(
name|c1
argument_list|,
name|share
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setStudentLimits
parameter_list|()
block|{
name|double
name|nrStudentCourses
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CurCourse
name|course
range|:
name|getCourses
argument_list|()
control|)
block|{
name|nrStudentCourses
operator|+=
name|course
operator|.
name|getOriginalMaxSize
argument_list|()
expr_stmt|;
block|}
name|double
name|studentWeight
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CurStudent
name|student
range|:
name|getStudents
argument_list|()
control|)
block|{
name|studentWeight
operator|+=
name|student
operator|.
name|getWeight
argument_list|()
expr_stmt|;
block|}
name|double
name|avg
init|=
name|nrStudentCourses
operator|/
name|studentWeight
decl_stmt|;
name|int
name|maxLimit
init|=
literal|1
operator|+
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|avg
argument_list|)
decl_stmt|;
name|int
name|minLimit
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|avg
argument_list|)
operator|-
literal|1
decl_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"Student course limit<"
operator|+
name|minLimit
operator|+
literal|","
operator|+
name|maxLimit
operator|+
literal|">"
argument_list|)
expr_stmt|;
name|iStudentLimit
operator|=
operator|new
name|CurStudentLimit
argument_list|(
name|minLimit
argument_list|,
name|maxLimit
argument_list|)
expr_stmt|;
name|addGlobalConstraint
argument_list|(
name|iStudentLimit
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CurStudentLimit
name|getStudentLimit
parameter_list|()
block|{
return|return
name|iStudentLimit
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|CurCourse
argument_list|>
name|getCourses
parameter_list|()
block|{
return|return
name|iCourses
operator|.
name|values
argument_list|()
return|;
block|}
specifier|public
name|CurCourse
name|getCourse
parameter_list|(
name|Long
name|courseId
parameter_list|)
block|{
return|return
name|iCourses
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|CurStudent
argument_list|>
name|getStudents
parameter_list|()
block|{
return|return
name|iStudents
return|;
block|}
specifier|public
name|List
argument_list|<
name|CurCourse
argument_list|>
name|getSwapCourses
parameter_list|()
block|{
return|return
name|iSwapableCourses
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getInfo
parameter_list|(
name|Assignment
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|assignment
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ret
init|=
name|super
operator|.
name|getInfo
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"Students"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"Courses"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|avgEnrollment
init|=
operator|(
operator|(
name|double
operator|)
name|variables
argument_list|()
operator|.
name|size
argument_list|()
operator|)
operator|/
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|double
name|rmsEnrollment
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|CurCourse
name|c1
range|:
name|getCourses
argument_list|()
control|)
name|rmsEnrollment
operator|+=
operator|(
name|c1
operator|.
name|getNrStudents
argument_list|()
operator|-
name|avgEnrollment
operator|)
operator|*
operator|(
name|c1
operator|.
name|getNrStudents
argument_list|()
operator|-
name|avgEnrollment
operator|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"Course size"
argument_list|,
name|sDF
operator|.
name|format
argument_list|(
name|avgEnrollment
argument_list|)
operator|+
literal|" Â± "
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|rmsEnrollment
operator|/
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|totalCourses
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CurStudent
name|student
range|:
name|getStudents
argument_list|()
control|)
name|totalCourses
operator|+=
name|student
operator|.
name|getCourses
argument_list|(
name|assignment
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|double
name|avgCourses
init|=
operator|(
operator|(
name|double
operator|)
name|totalCourses
operator|)
operator|/
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|double
name|rmsCourses
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|CurStudent
name|student
range|:
name|getStudents
argument_list|()
control|)
name|rmsCourses
operator|+=
operator|(
name|student
operator|.
name|getCourses
argument_list|(
name|assignment
argument_list|)
operator|.
name|size
argument_list|()
operator|-
name|avgCourses
operator|)
operator|*
operator|(
name|student
operator|.
name|getCourses
argument_list|(
name|assignment
argument_list|)
operator|.
name|size
argument_list|()
operator|-
name|avgCourses
operator|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"Courses per student"
argument_list|,
name|sDF
operator|.
name|format
argument_list|(
name|avgCourses
argument_list|)
operator|+
literal|" Â± "
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|rmsCourses
operator|/
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|" (limit: "
operator|+
name|getStudentLimit
argument_list|()
operator|.
name|getMinLimit
argument_list|()
operator|+
literal|" .. "
operator|+
name|getStudentLimit
argument_list|()
operator|.
name|getMaxLimit
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|int
name|totalShare
init|=
literal|0
decl_stmt|;
name|double
name|totalError
init|=
literal|0
decl_stmt|;
name|double
name|rmsError
init|=
literal|0.0
decl_stmt|;
name|int
name|pairs
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CurCourse
name|c1
range|:
name|getCourses
argument_list|()
control|)
for|for
control|(
name|CurCourse
name|c2
range|:
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|c1
operator|.
name|getCourseId
argument_list|()
operator|<
name|c2
operator|.
name|getCourseId
argument_list|()
condition|)
block|{
name|double
name|share
init|=
name|c1
operator|.
name|share
argument_list|(
name|assignment
argument_list|,
name|c2
argument_list|)
decl_stmt|;
name|double
name|target
init|=
name|c1
operator|.
name|getTargetShare
argument_list|(
name|c2
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
name|totalError
operator|+=
name|Math
operator|.
name|abs
argument_list|(
name|share
operator|-
name|target
argument_list|)
expr_stmt|;
name|rmsError
operator|+=
operator|(
name|share
operator|-
name|target
operator|)
operator|*
operator|(
name|share
operator|-
name|target
operator|)
expr_stmt|;
name|pairs
operator|++
expr_stmt|;
name|totalShare
operator|+=
name|share
expr_stmt|;
block|}
name|ret
operator|.
name|put
argument_list|(
literal|"Errors"
argument_list|,
name|sDF
operator|.
name|format
argument_list|(
name|totalError
argument_list|)
operator|+
literal|" ("
operator|+
name|sDF
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|totalError
operator|/
name|totalShare
argument_list|)
operator|+
literal|"% of total share, avg: "
operator|+
name|sDF
operator|.
name|format
argument_list|(
operator|(
operator|(
name|double
operator|)
name|totalError
operator|)
operator|/
name|pairs
argument_list|)
operator|+
literal|", rms: "
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|rmsError
operator|/
name|pairs
argument_list|)
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"Assigned Student Weight"
argument_list|,
name|sDF
operator|.
name|format
argument_list|(
name|getContext
argument_list|(
name|assignment
argument_list|)
operator|.
name|getAssignedWeight
argument_list|()
argument_list|)
operator|+
literal|"/"
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|getMaxWeight
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|totalStudentWeight
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CurStudent
name|student
range|:
name|getStudents
argument_list|()
control|)
block|{
name|totalStudentWeight
operator|+=
name|student
operator|.
name|getWeight
argument_list|()
expr_stmt|;
block|}
name|double
name|avgStudentWeight
init|=
name|totalStudentWeight
operator|/
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|double
name|rmsStudentWeight
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CurStudent
name|student
range|:
name|getStudents
argument_list|()
control|)
block|{
name|rmsStudentWeight
operator|+=
operator|(
name|student
operator|.
name|getWeight
argument_list|()
operator|-
name|avgStudentWeight
operator|)
operator|*
operator|(
name|student
operator|.
name|getWeight
argument_list|()
operator|-
name|avgStudentWeight
operator|)
expr_stmt|;
block|}
name|ret
operator|.
name|put
argument_list|(
literal|"Student Weight"
argument_list|,
name|sDF
operator|.
name|format
argument_list|(
name|getMinStudentWidth
argument_list|()
argument_list|)
operator|+
literal|" .. "
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|getMaxStudentWidth
argument_list|()
argument_list|)
operator|+
literal|" (avg: "
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|avgStudentWeight
argument_list|)
operator|+
literal|", rms: "
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|rmsStudentWeight
operator|/
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|double
name|getTotalValue
parameter_list|(
name|Assignment
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|assignment
parameter_list|)
block|{
name|double
name|value
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CurCourse
name|c1
range|:
name|iCourses
operator|.
name|values
argument_list|()
control|)
for|for
control|(
name|CurCourse
name|c2
range|:
name|iCourses
operator|.
name|values
argument_list|()
control|)
if|if
condition|(
name|c1
operator|.
name|getCourseId
argument_list|()
operator|<
name|c2
operator|.
name|getCourseId
argument_list|()
condition|)
name|value
operator|+=
name|c1
operator|.
name|penalty
argument_list|(
name|assignment
argument_list|,
name|c2
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
specifier|public
name|double
name|getMaxWeight
parameter_list|()
block|{
return|return
name|iMaxAssignedWeight
return|;
block|}
specifier|public
name|double
name|getBestWeight
parameter_list|()
block|{
return|return
name|iBestAssignedWeight
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|saveBest
parameter_list|(
name|Assignment
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|assignment
parameter_list|)
block|{
name|super
operator|.
name|saveBest
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
name|iBestAssignedWeight
operator|=
name|getContext
argument_list|(
name|assignment
argument_list|)
operator|.
name|getAssignedWeight
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearBest
parameter_list|()
block|{
name|super
operator|.
name|clearBest
argument_list|()
expr_stmt|;
name|iBestAssignedWeight
operator|=
literal|0.0
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|(
name|Assignment
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|assignment
parameter_list|)
block|{
return|return
name|assignedVariables
argument_list|(
name|assignment
argument_list|)
operator|.
name|size
argument_list|()
operator|+
literal|"/"
operator|+
name|variables
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" V:"
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|getTotalValue
argument_list|(
name|assignment
argument_list|)
argument_list|)
operator|+
literal|" A:"
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|getContext
argument_list|(
name|assignment
argument_list|)
operator|.
name|getAssignedWeight
argument_list|()
argument_list|)
operator|+
literal|"/"
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|getMaxWeight
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|ifs
parameter_list|(
name|Assignment
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|assignment
parameter_list|)
block|{
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
name|cfg
init|=
operator|new
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"Termination.Class"
argument_list|,
literal|"org.unitime.timetable.solver.curricula.students.CurTermination"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"Termination.StopWhenComplete"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"Termination.TimeOut"
argument_list|,
literal|"60"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"Termination.MaxIdle"
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"Comparator.Class"
argument_list|,
literal|"org.unitime.timetable.solver.curricula.students.CurComparator"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"Variable.Class"
argument_list|,
literal|"org.unitime.timetable.solver.curricula.students.CurVariableSelection"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"Value.Class"
argument_list|,
literal|"org.unitime.timetable.solver.curricula.students.CurValueSelection"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setProperty
argument_list|(
literal|"General.SaveBestUnassigned"
argument_list|,
literal|"-1"
argument_list|)
expr_stmt|;
name|Solver
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|solver
init|=
operator|new
name|Solver
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|solver
operator|.
name|setInitalSolution
argument_list|(
operator|new
name|Solution
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
argument_list|(
name|this
argument_list|,
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|addSolutionListener
argument_list|(
operator|new
name|SolutionListener
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|solutionUpdated
parameter_list|(
name|Solution
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|solution
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|getInfo
parameter_list|(
name|Solution
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|solution
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
parameter_list|,
name|Collection
argument_list|<
name|CurVariable
argument_list|>
name|variables
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|getInfo
parameter_list|(
name|Solution
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|solution
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|bestSaved
parameter_list|(
name|Solution
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|solution
parameter_list|)
block|{
name|sLog
operator|.
name|debug
argument_list|(
operator|(
operator|(
name|CurModel
operator|)
name|solution
operator|.
name|getModel
argument_list|()
operator|)
operator|.
name|toString
argument_list|(
name|solution
operator|.
name|getAssignment
argument_list|()
argument_list|)
operator|+
literal|", i:"
operator|+
name|solution
operator|.
name|getIteration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|bestRestored
parameter_list|(
name|Solution
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|solution
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|bestCleared
parameter_list|(
name|Solution
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|solution
parameter_list|)
block|{
block|}
block|}
argument_list|)
expr_stmt|;
name|solver
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|solver
operator|.
name|getSolverThread
argument_list|()
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
name|Solution
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|solution
init|=
name|solver
operator|.
name|lastSolution
argument_list|()
decl_stmt|;
name|solution
operator|.
name|restoreBest
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"Best solution found after "
operator|+
name|solution
operator|.
name|getBestTime
argument_list|()
operator|+
literal|" seconds ("
operator|+
name|solution
operator|.
name|getBestIteration
argument_list|()
operator|+
literal|" iterations)."
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"Number of assigned variables is "
operator|+
name|solution
operator|.
name|getAssignment
argument_list|()
operator|.
name|nrAssignedVariables
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"Total value of the solution is "
operator|+
name|solution
operator|.
name|getModel
argument_list|()
operator|.
name|getTotalValue
argument_list|(
name|solution
operator|.
name|getAssignment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|saveAsXml
parameter_list|(
name|Element
name|root
parameter_list|,
name|Assignment
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|assignment
parameter_list|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|courses
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|DecimalFormat
name|df
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.##########"
argument_list|,
operator|new
name|DecimalFormatSymbols
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|CurCourse
name|course
range|:
name|getCourses
argument_list|()
control|)
block|{
name|Element
name|courseElement
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"course"
argument_list|)
decl_stmt|;
name|courseElement
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|course
operator|.
name|getCourseId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|courseElement
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|courseElement
operator|.
name|addAttribute
argument_list|(
literal|"limit"
argument_list|,
name|df
operator|.
name|format
argument_list|(
name|course
operator|.
name|getOriginalMaxSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|course
operator|.
name|getPriority
argument_list|()
operator|!=
literal|null
condition|)
name|courseElement
operator|.
name|addAttribute
argument_list|(
literal|"priority"
argument_list|,
name|course
operator|.
name|getPriority
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|courses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|share
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Long
name|other
range|:
name|courses
control|)
block|{
name|share
operator|+=
operator|(
name|share
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
name|df
operator|.
name|format
argument_list|(
name|course
operator|.
name|getTargetShare
argument_list|(
name|other
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|courseElement
operator|.
name|addAttribute
argument_list|(
literal|"share"
argument_list|,
name|share
argument_list|)
expr_stmt|;
block|}
name|courses
operator|.
name|add
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CurStudent
name|student
range|:
name|getStudents
argument_list|()
control|)
block|{
name|Element
name|studentElement
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"student"
argument_list|)
decl_stmt|;
name|studentElement
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|student
operator|.
name|getStudentId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getWeight
argument_list|()
operator|!=
literal|1.0
condition|)
name|studentElement
operator|.
name|addAttribute
argument_list|(
literal|"weight"
argument_list|,
name|df
operator|.
name|format
argument_list|(
name|student
operator|.
name|getWeight
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|courseIds
init|=
literal|""
decl_stmt|;
for|for
control|(
name|CurCourse
name|course
range|:
name|student
operator|.
name|getCourses
argument_list|(
name|assignment
argument_list|)
control|)
block|{
name|courseIds
operator|+=
operator|(
name|courseIds
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
name|course
operator|.
name|getCourseId
argument_list|()
expr_stmt|;
block|}
name|studentElement
operator|.
name|setText
argument_list|(
name|courseIds
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|Solution
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|loadFromXml
parameter_list|(
name|Element
name|root
parameter_list|)
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|studentElements
init|=
name|root
operator|.
name|elements
argument_list|(
literal|"student"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CurStudent
argument_list|>
name|students
init|=
operator|new
name|ArrayList
argument_list|<
name|CurStudent
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Element
name|studentElement
range|:
name|studentElements
control|)
block|{
name|students
operator|.
name|add
argument_list|(
operator|new
name|CurStudent
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|studentElement
operator|.
name|attributeValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
argument_list|,
name|Float
operator|.
name|parseFloat
argument_list|(
name|studentElement
operator|.
name|attributeValue
argument_list|(
literal|"weight"
argument_list|,
literal|"1.0"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CurModel
name|m
init|=
operator|new
name|CurModel
argument_list|(
name|students
argument_list|)
decl_stmt|;
name|Assignment
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|a
init|=
operator|new
name|DefaultSingleAssignment
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|courses
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|i
init|=
name|root
operator|.
name|elementIterator
argument_list|(
literal|"course"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|courseElement
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|courseId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|courseElement
operator|.
name|attributeValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|courseName
init|=
name|courseElement
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|double
name|size
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|courseElement
operator|.
name|attributeValue
argument_list|(
literal|"limit"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|priority
init|=
name|courseElement
operator|.
name|attributeValue
argument_list|(
literal|"priority"
argument_list|)
decl_stmt|;
name|m
operator|.
name|addCourse
argument_list|(
name|courseId
argument_list|,
name|courseName
argument_list|,
name|size
argument_list|,
name|priority
operator|==
literal|null
condition|?
literal|null
else|:
name|Double
operator|.
name|valueOf
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|courses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|share
index|[]
init|=
name|courseElement
operator|.
name|attributeValue
argument_list|(
literal|"share"
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|courses
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
name|m
operator|.
name|setTargetShareNoAdjustments
argument_list|(
name|courseId
argument_list|,
name|courses
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|,
name|Float
operator|.
name|parseFloat
argument_list|(
name|share
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|courses
operator|.
name|add
argument_list|(
name|courseId
argument_list|)
expr_stmt|;
block|}
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Element
name|studentElement
range|:
name|studentElements
control|)
block|{
name|CurStudent
name|student
init|=
name|students
operator|.
name|get
argument_list|(
name|idx
operator|++
argument_list|)
decl_stmt|;
name|String
name|courseIds
init|=
name|studentElement
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|courseIds
operator|!=
literal|null
operator|&&
operator|!
name|courseIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|courseId
range|:
name|courseIds
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|CurCourse
name|course
init|=
name|m
operator|.
name|getCourse
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|courseId
argument_list|)
argument_list|)
decl_stmt|;
name|CurVariable
name|var
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CurVariable
name|v
range|:
name|course
operator|.
name|variables
argument_list|()
control|)
if|if
condition|(
name|a
operator|.
name|getValue
argument_list|(
name|v
argument_list|)
operator|==
literal|null
condition|)
block|{
name|var
operator|=
name|v
expr_stmt|;
break|break;
block|}
name|a
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
operator|new
name|CurValue
argument_list|(
name|var
argument_list|,
name|student
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|Solution
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
argument_list|(
name|m
argument_list|,
name|a
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|canContinue
parameter_list|()
block|{
return|return
operator|!
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
return|;
block|}
specifier|public
name|void
name|naive
parameter_list|(
name|DataProperties
name|cfg
parameter_list|,
name|Assignment
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|assignment
parameter_list|)
block|{
name|int
name|maxIdle
init|=
name|cfg
operator|.
name|getPropertyInt
argument_list|(
literal|"Curriculum.Naive.MaxIdle"
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- running naive"
argument_list|)
expr_stmt|;
name|int
name|idle
init|=
literal|0
decl_stmt|,
name|it
init|=
literal|0
decl_stmt|;
name|double
name|best
init|=
name|getTotalValue
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
name|CurStudentSwap
name|sw
init|=
operator|new
name|CurStudentSwap
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|Solution
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|solution
init|=
operator|new
name|Solution
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
argument_list|(
name|this
argument_list|,
name|assignment
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|getSwapCourses
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|idle
operator|<
name|maxIdle
operator|&&
name|canContinue
argument_list|()
condition|)
block|{
name|Neighbour
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|n
init|=
name|sw
operator|.
name|selectNeighbour
argument_list|(
name|solution
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
break|break;
name|double
name|value
init|=
name|n
operator|.
name|value
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|<
operator|-
literal|0.00001
condition|)
block|{
name|idle
operator|=
literal|0
expr_stmt|;
name|n
operator|.
name|assign
argument_list|(
name|assignment
argument_list|,
name|it
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|<=
literal|0.0
condition|)
block|{
name|n
operator|.
name|assign
argument_list|(
name|assignment
argument_list|,
name|it
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getTotalValue
argument_list|(
name|assignment
argument_list|)
operator|<
name|best
condition|)
block|{
name|best
operator|=
name|getTotalValue
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- best value: "
operator|+
name|toString
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|it
operator|++
expr_stmt|;
name|idle
operator|++
expr_stmt|;
block|}
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- final value: "
operator|+
name|toString
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|hc
parameter_list|(
name|DataProperties
name|cfg
parameter_list|,
name|Assignment
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|assignment
parameter_list|)
block|{
name|int
name|maxIdle
init|=
name|cfg
operator|.
name|getPropertyInt
argument_list|(
literal|"Curriculum.HC.MaxIdle"
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- running hill climber"
argument_list|)
expr_stmt|;
name|int
name|it
init|=
literal|0
decl_stmt|,
name|idle
init|=
literal|0
decl_stmt|;
name|double
name|total
init|=
name|getTotalValue
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
name|double
name|best
init|=
name|total
decl_stmt|;
name|CurHillClimber
name|hc
init|=
operator|new
name|CurHillClimber
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|Solution
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|solution
init|=
operator|new
name|Solution
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
argument_list|(
name|this
argument_list|,
name|assignment
argument_list|)
decl_stmt|;
while|while
condition|(
name|idle
argument_list|<
name|maxIdle
operator|&&
name|total
argument_list|>
literal|0.0001
operator|&&
name|canContinue
argument_list|()
condition|)
block|{
name|Neighbour
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|n
init|=
name|hc
operator|.
name|selectNeighbour
argument_list|(
name|solution
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
break|break;
name|double
name|value
init|=
name|n
operator|.
name|value
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|<=
literal|0.0
condition|)
block|{
name|n
operator|.
name|assign
argument_list|(
name|assignment
argument_list|,
name|it
argument_list|)
expr_stmt|;
name|total
operator|+=
name|value
expr_stmt|;
if|if
condition|(
name|best
operator|-
name|total
operator|>
literal|0.00001
condition|)
block|{
name|best
operator|=
name|total
expr_stmt|;
name|idle
operator|=
literal|0
expr_stmt|;
name|saveBest
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- best value: "
operator|+
name|toString
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|it
operator|++
expr_stmt|;
name|idle
operator|++
expr_stmt|;
block|}
comment|// cfg.setProperty("Curriculum.HC.Iters", String.valueOf(it));
comment|// cfg.setProperty("Curriculum.HC.Value", String.valueOf(getTotalValue(assignment)));
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- final value: "
operator|+
name|toString
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|deluge
parameter_list|(
name|DataProperties
name|cfg
parameter_list|,
name|Assignment
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|assignment
parameter_list|)
block|{
name|double
name|f
init|=
name|cfg
operator|.
name|getPropertyDouble
argument_list|(
literal|"Curriculum.Deluge.Factor"
argument_list|,
literal|0.999999
argument_list|)
decl_stmt|;
name|double
name|ub
init|=
name|cfg
operator|.
name|getPropertyDouble
argument_list|(
literal|"Curriculum.Deluge.UpperBound"
argument_list|,
literal|1.25
argument_list|)
decl_stmt|;
name|double
name|lb
init|=
name|cfg
operator|.
name|getPropertyDouble
argument_list|(
literal|"Curriculum.Deluge.LowerBound"
argument_list|,
literal|0.75
argument_list|)
decl_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- running great deluge"
argument_list|)
expr_stmt|;
name|int
name|it
init|=
literal|0
decl_stmt|;
name|double
name|total
init|=
name|getTotalValue
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
name|double
name|bound
init|=
name|ub
operator|*
name|total
decl_stmt|;
name|double
name|best
init|=
name|getTotalValue
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
name|CurStudentSwap
name|sw
init|=
operator|new
name|CurStudentSwap
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|Solution
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|solution
init|=
operator|new
name|Solution
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
argument_list|(
name|this
argument_list|,
name|assignment
argument_list|)
decl_stmt|;
name|saveBest
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|getSwapCourses
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|bound
operator|>
name|lb
operator|*
name|total
operator|&&
name|total
operator|>
literal|0.0001
operator|&&
name|canContinue
argument_list|()
condition|)
block|{
name|Neighbour
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|n
init|=
name|sw
operator|.
name|selectNeighbour
argument_list|(
name|solution
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|!=
literal|null
condition|)
block|{
name|double
name|value
init|=
name|n
operator|.
name|value
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|<=
literal|0.0
operator|||
name|total
operator|+
name|value
operator|<
name|bound
condition|)
block|{
name|n
operator|.
name|assign
argument_list|(
name|assignment
argument_list|,
name|it
argument_list|)
expr_stmt|;
if|if
condition|(
name|total
operator|+
name|value
operator|<
name|best
condition|)
block|{
name|best
operator|=
name|total
operator|+
name|value
expr_stmt|;
name|saveBest
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- best value: "
operator|+
name|toString
argument_list|(
name|assignment
argument_list|)
operator|+
literal|", bound: "
operator|+
name|bound
argument_list|)
expr_stmt|;
block|}
name|total
operator|+=
name|value
expr_stmt|;
block|}
block|}
name|bound
operator|*=
name|f
expr_stmt|;
name|it
operator|++
expr_stmt|;
block|}
comment|// cfg.setProperty("Curriculum.Deluge.Iters", String.valueOf(it));
name|restoreBest
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
comment|// cfg.setProperty("Curriculum.Deluge.Value", String.valueOf(getTotalValue(assignment)));
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- final value: "
operator|+
name|toString
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|fast
parameter_list|(
name|DataProperties
name|cfg
parameter_list|,
name|Assignment
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|assignment
parameter_list|)
block|{
name|int
name|maxIdle
init|=
name|cfg
operator|.
name|getPropertyInt
argument_list|(
literal|"Curriculum.Fast.MaxIdle"
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- running fast"
argument_list|)
expr_stmt|;
name|int
name|idle
init|=
literal|0
decl_stmt|,
name|it
init|=
literal|0
decl_stmt|;
name|double
name|total
init|=
name|getTotalValue
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
name|double
name|best
init|=
name|total
decl_stmt|;
name|CurSimpleMove
name|m
init|=
operator|new
name|CurSimpleMove
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|Solution
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|solution
init|=
operator|new
name|Solution
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
argument_list|(
name|this
argument_list|,
name|assignment
argument_list|)
decl_stmt|;
while|while
condition|(
name|idle
operator|<
name|maxIdle
operator|&&
name|canContinue
argument_list|()
condition|)
block|{
name|Neighbour
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|n
init|=
name|m
operator|.
name|selectNeighbour
argument_list|(
name|solution
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|!=
literal|null
condition|)
block|{
name|double
name|value
init|=
name|n
operator|.
name|value
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|<
operator|-
literal|0.00001
condition|)
block|{
name|idle
operator|=
literal|0
expr_stmt|;
name|n
operator|.
name|assign
argument_list|(
name|assignment
argument_list|,
name|it
argument_list|)
expr_stmt|;
name|total
operator|+=
name|value
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|<=
literal|0.0
condition|)
block|{
name|n
operator|.
name|assign
argument_list|(
name|assignment
argument_list|,
name|it
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|total
operator|<
name|best
condition|)
block|{
name|best
operator|=
name|total
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- best value: "
operator|+
name|toString
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|it
operator|++
expr_stmt|;
name|idle
operator|++
expr_stmt|;
block|}
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- final value: "
operator|+
name|toString
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DataProperties
name|solve
parameter_list|(
name|Assignment
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|assignment
parameter_list|)
block|{
return|return
name|solve
argument_list|(
operator|new
name|DataProperties
argument_list|()
argument_list|,
name|assignment
argument_list|)
return|;
block|}
specifier|public
name|DataProperties
name|solve
parameter_list|(
name|DataProperties
name|cfg
parameter_list|,
name|Assignment
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|assignment
parameter_list|)
block|{
if|if
condition|(
name|cfg
operator|==
literal|null
condition|)
name|cfg
operator|=
operator|new
name|DataProperties
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- setting up the solver"
argument_list|)
expr_stmt|;
name|CurVariableSelection
name|var
init|=
operator|new
name|CurVariableSelection
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|CurValueSelection
name|vs
init|=
operator|new
name|CurValueSelection
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|Solution
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|solution
init|=
operator|new
name|Solution
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
argument_list|(
name|this
argument_list|,
name|assignment
argument_list|)
decl_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- creating initial assignment"
argument_list|)
expr_stmt|;
name|boolean
name|precise
init|=
name|cfg
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Curriculum.Initial.PreciseSelection"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
while|while
condition|(
name|nrUnassignedVariables
argument_list|(
name|assignment
argument_list|)
operator|>
literal|0
operator|&&
name|canContinue
argument_list|()
condition|)
block|{
name|CurVariable
name|course
init|=
name|var
operator|.
name|selectVariable
argument_list|(
name|solution
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|isComplete
argument_list|(
name|assignment
argument_list|)
condition|)
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"    -- all complete"
argument_list|)
expr_stmt|;
break|break;
block|}
name|CurValue
name|student
init|=
operator|(
name|precise
condition|?
name|vs
operator|.
name|selectValueSlow
argument_list|(
name|solution
argument_list|,
name|course
argument_list|)
else|:
name|vs
operator|.
name|selectValueFast
argument_list|(
name|solution
argument_list|,
name|course
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"    -- no student for "
operator|+
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|assignment
operator|.
name|assign
argument_list|(
name|solution
operator|.
name|getIteration
argument_list|()
argument_list|,
name|student
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CurCourse
name|course
range|:
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|course
operator|.
name|isComplete
argument_list|(
name|assignment
argument_list|)
condition|)
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"    -- incomplete "
operator|+
name|course
operator|.
name|getCourseName
argument_list|()
operator|+
literal|": "
operator|+
name|getCourse
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|.
name|getStudents
argument_list|(
name|assignment
argument_list|)
operator|+
literal|" ("
operator|+
name|course
operator|.
name|getSize
argument_list|(
name|assignment
argument_list|)
operator|+
literal|"/"
operator|+
name|course
operator|.
name|getOriginalMaxSize
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// cfg.setProperty("Curriculum.Initial.Value", String.valueOf(getTotalValue(assignment)));
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- initial value: "
operator|+
name|toString
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|phase
range|:
name|cfg
operator|.
name|getProperty
argument_list|(
literal|"Curriculum.Phases"
argument_list|,
literal|"HC,Deluge"
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
if|if
condition|(
literal|"hc"
operator|.
name|equalsIgnoreCase
argument_list|(
name|phase
argument_list|)
condition|)
name|hc
argument_list|(
name|cfg
argument_list|,
name|assignment
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"fast"
operator|.
name|equalsIgnoreCase
argument_list|(
name|phase
argument_list|)
condition|)
name|fast
argument_list|(
name|cfg
argument_list|,
name|assignment
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"deluge"
operator|.
name|equalsIgnoreCase
argument_list|(
name|phase
argument_list|)
condition|)
name|deluge
argument_list|(
name|cfg
argument_list|,
name|assignment
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"naive"
operator|.
name|equalsIgnoreCase
argument_list|(
name|phase
argument_list|)
condition|)
name|naive
argument_list|(
name|cfg
argument_list|,
name|assignment
argument_list|)
expr_stmt|;
else|else
name|sLog
operator|.
name|warn
argument_list|(
literal|"Phase "
operator|+
name|phase
operator|+
literal|" is not known"
argument_list|)
expr_stmt|;
block|}
return|return
name|cfg
return|;
block|}
specifier|public
name|boolean
name|isSameModel
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|CurModel
operator|)
condition|)
return|return
literal|false
return|;
name|CurModel
name|m
init|=
operator|(
name|CurModel
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
name|m
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getStudentLimit
argument_list|()
operator|.
name|getMaxLimit
argument_list|()
operator|!=
name|m
operator|.
name|getStudentLimit
argument_list|()
operator|.
name|getMaxLimit
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getStudentLimit
argument_list|()
operator|.
name|getMinLimit
argument_list|()
operator|!=
name|m
operator|.
name|getStudentLimit
argument_list|()
operator|.
name|getMinLimit
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getMinStudentWidth
argument_list|()
operator|!=
name|m
operator|.
name|getMinStudentWidth
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
name|m
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
condition|)
return|return
literal|false
return|;
name|students
label|:
for|for
control|(
name|CurStudent
name|s
range|:
name|getStudents
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
operator|||
name|s
operator|.
name|getStudentId
argument_list|()
operator|<
literal|0
condition|)
continue|continue;
for|for
control|(
name|CurStudent
name|z
range|:
name|m
operator|.
name|getStudents
argument_list|()
control|)
block|{
if|if
condition|(
name|z
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|s
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|&&
name|z
operator|.
name|getWeight
argument_list|()
operator|==
name|s
operator|.
name|getWeight
argument_list|()
condition|)
continue|continue
name|students
continue|;
block|}
return|return
literal|false
return|;
block|}
name|students
label|:
for|for
control|(
name|CurStudent
name|s
range|:
name|m
operator|.
name|getStudents
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
operator|||
name|s
operator|.
name|getStudentId
argument_list|()
operator|<
literal|0
condition|)
continue|continue;
for|for
control|(
name|CurStudent
name|z
range|:
name|getStudents
argument_list|()
control|)
block|{
if|if
condition|(
name|z
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|s
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|&&
name|z
operator|.
name|getWeight
argument_list|()
operator|==
name|s
operator|.
name|getWeight
argument_list|()
condition|)
continue|continue
name|students
continue|;
block|}
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|CurStudent
name|s
init|=
name|getStudents
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|getStudentId
argument_list|()
operator|!=
literal|null
operator|&&
name|s
operator|.
name|getStudentId
argument_list|()
operator|>=
literal|0
condition|)
continue|continue;
if|if
condition|(
name|s
operator|.
name|getWeight
argument_list|()
operator|!=
name|m
operator|.
name|getStudents
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|getWeight
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
for|for
control|(
name|CurCourse
name|c1
range|:
name|getCourses
argument_list|()
control|)
block|{
name|CurCourse
name|x1
init|=
name|m
operator|.
name|getCourse
argument_list|(
name|c1
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|x1
operator|==
literal|null
operator|||
name|x1
operator|.
name|getNrStudents
argument_list|()
operator|!=
name|c1
operator|.
name|getNrStudents
argument_list|()
operator|||
operator|!
name|equals
argument_list|(
name|x1
operator|.
name|getPriority
argument_list|()
argument_list|,
name|c1
operator|.
name|getPriority
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
for|for
control|(
name|CurCourse
name|c2
range|:
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|c1
operator|.
name|getCourseId
argument_list|()
operator|<
name|c2
operator|.
name|getCourseId
argument_list|()
operator|&&
name|Math
operator|.
name|abs
argument_list|(
name|c1
operator|.
name|getTargetShare
argument_list|(
name|c2
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|-
name|x1
operator|.
name|getTargetShare
argument_list|(
name|c2
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
operator|>
literal|0.001
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|boolean
name|equals
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
return|return
operator|(
name|o1
operator|==
literal|null
condition|?
name|o2
operator|==
literal|null
else|:
name|o1
operator|.
name|equals
argument_list|(
name|o2
argument_list|)
operator|)
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|Configurator
operator|.
name|setRootLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CurStudent
argument_list|>
name|students
init|=
operator|new
name|ArrayList
argument_list|<
name|CurStudent
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
name|students
operator|.
name|add
argument_list|(
operator|new
name|CurStudent
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|1
operator|+
name|i
argument_list|)
argument_list|,
operator|(
name|i
operator|<
literal|10
condition|?
literal|0.5f
else|:
literal|2f
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|CurModel
name|m
init|=
operator|new
name|CurModel
argument_list|(
name|students
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|10
condition|;
name|i
operator|++
control|)
name|m
operator|.
name|addCourse
argument_list|(
operator|(
name|long
operator|)
name|i
argument_list|,
literal|"C"
operator|+
name|i
argument_list|,
literal|2
operator|*
name|i
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<=
literal|10
condition|;
name|j
operator|++
control|)
name|m
operator|.
name|setTargetShare
argument_list|(
operator|(
name|long
operator|)
name|i
argument_list|,
operator|(
name|long
operator|)
name|j
argument_list|,
name|i
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|m
operator|.
name|setStudentLimits
argument_list|()
expr_stmt|;
name|Document
name|d0
init|=
name|DocumentHelper
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|Assignment
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|a
init|=
operator|new
name|DefaultSingleAssignment
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|saveAsXml
argument_list|(
name|d0
operator|.
name|addElement
argument_list|(
literal|"curriculum"
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
name|d0
operator|.
name|asXML
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Loaded: "
operator|+
name|ToolBox
operator|.
name|dict2string
argument_list|(
name|m
operator|.
name|getInfo
argument_list|(
name|a
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|solve
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Solution: "
operator|+
name|ToolBox
operator|.
name|dict2string
argument_list|(
name|m
operator|.
name|getInfo
argument_list|(
name|a
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|d1
init|=
name|DocumentHelper
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|m
operator|.
name|saveAsXml
argument_list|(
name|d1
operator|.
name|addElement
argument_list|(
literal|"curriculum"
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
name|d1
operator|.
name|asXML
argument_list|()
argument_list|)
expr_stmt|;
name|Solution
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|x
init|=
name|loadFromXml
argument_list|(
name|d1
operator|.
name|getRootElement
argument_list|()
argument_list|)
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Reloaded: "
operator|+
name|ToolBox
operator|.
name|dict2string
argument_list|(
name|x
operator|.
name|getInfo
argument_list|()
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|CurCourse
argument_list|>
name|courses
init|=
operator|new
name|TreeSet
argument_list|<
name|CurCourse
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|CurCourse
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|CurCourse
name|c1
parameter_list|,
name|CurCourse
name|c2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|c1
operator|.
name|getCourseName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|c1
operator|.
name|getCourseId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getCourseId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|courses
operator|.
name|addAll
argument_list|(
name|m
operator|.
name|getCourses
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|penalty
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CurCourse
name|course
range|:
name|courses
control|)
block|{
name|sLog
operator|.
name|info
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
operator|+
literal|": "
operator|+
name|m
operator|.
name|getCourse
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|.
name|getStudents
argument_list|(
name|a
argument_list|)
operator|+
literal|" ("
operator|+
name|course
operator|.
name|getSize
argument_list|(
name|a
argument_list|)
operator|+
literal|"/"
operator|+
name|course
operator|.
name|getOriginalMaxSize
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
for|for
control|(
name|CurCourse
name|other
range|:
name|courses
control|)
block|{
if|if
condition|(
name|other
operator|.
name|getCourseId
argument_list|()
operator|<=
name|course
operator|.
name|getCourseId
argument_list|()
condition|)
continue|continue;
name|double
name|share
init|=
name|course
operator|.
name|share
argument_list|(
name|a
argument_list|,
name|other
argument_list|)
decl_stmt|;
name|double
name|target
init|=
name|course
operator|.
name|getTargetShare
argument_list|(
name|other
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  "
operator|+
name|other
operator|.
name|getCourseName
argument_list|()
operator|+
literal|": share="
operator|+
name|share
operator|+
literal|", target="
operator|+
name|target
operator|+
literal|", penalty="
operator|+
name|Math
operator|.
name|abs
argument_list|(
name|target
operator|-
name|share
argument_list|)
argument_list|)
expr_stmt|;
name|penalty
operator|+=
name|Math
operator|.
name|abs
argument_list|(
name|target
operator|-
name|share
argument_list|)
expr_stmt|;
block|}
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"Total penalty: "
operator|+
name|penalty
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|DocumentHelper
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|m
operator|.
name|saveAsXml
argument_list|(
name|doc
operator|.
name|addElement
argument_list|(
literal|"curriculum"
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
literal|"/Users/muller/solution.xml"
argument_list|)
decl_stmt|;
operator|(
operator|new
name|XMLWriter
argument_list|(
name|fos
argument_list|,
name|OutputFormat
operator|.
name|createPrettyPrint
argument_list|()
argument_list|)
operator|)
operator|.
name|write
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|fos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|CurModelContext
implements|implements
name|AssignmentConstraintContext
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
block|{
specifier|private
name|double
name|iAssignedWeight
init|=
literal|0.0
decl_stmt|;
specifier|public
name|CurModelContext
parameter_list|(
name|Assignment
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|assignment
parameter_list|)
block|{
for|for
control|(
name|CurVariable
name|var
range|:
name|variables
argument_list|()
control|)
block|{
name|CurValue
name|val
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|var
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
name|assigned
argument_list|(
name|assignment
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|assigned
parameter_list|(
name|Assignment
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|assignment
parameter_list|,
name|CurValue
name|value
parameter_list|)
block|{
name|iAssignedWeight
operator|+=
name|value
operator|.
name|getStudent
argument_list|()
operator|.
name|getWeight
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unassigned
parameter_list|(
name|Assignment
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|assignment
parameter_list|,
name|CurValue
name|value
parameter_list|)
block|{
name|iAssignedWeight
operator|-=
name|value
operator|.
name|getStudent
argument_list|()
operator|.
name|getWeight
argument_list|()
expr_stmt|;
block|}
specifier|public
name|double
name|getAssignedWeight
parameter_list|()
block|{
return|return
name|iAssignedWeight
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CurModelContext
name|createAssignmentContext
parameter_list|(
name|Assignment
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|assignment
parameter_list|)
block|{
return|return
operator|new
name|CurModelContext
argument_list|(
name|assignment
argument_list|)
return|;
block|}
block|}
end_class

end_unit

