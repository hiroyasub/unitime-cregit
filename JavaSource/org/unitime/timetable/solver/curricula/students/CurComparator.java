begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
operator|.
name|students
package|;
end_package

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solution
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solution
operator|.
name|SolutionComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CurComparator
implements|implements
name|SolutionComparator
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
block|{
specifier|public
name|CurComparator
parameter_list|(
name|DataProperties
name|config
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isBetterThanBestSolution
parameter_list|(
name|Solution
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|currentSolution
parameter_list|)
block|{
name|CurModel
name|m
init|=
operator|(
name|CurModel
operator|)
name|currentSolution
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|Assignment
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|assignment
init|=
name|currentSolution
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getContext
argument_list|(
name|assignment
argument_list|)
operator|.
name|getAssignedWeight
argument_list|()
operator|>
name|m
operator|.
name|getBestWeight
argument_list|()
operator|+
name|m
operator|.
name|getMinStudentWidth
argument_list|()
operator|/
literal|2.0
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|m
operator|.
name|getContext
argument_list|(
name|assignment
argument_list|)
operator|.
name|getAssignedWeight
argument_list|()
operator|<
name|m
operator|.
name|getBestWeight
argument_list|()
operator|-
name|m
operator|.
name|getMinStudentWidth
argument_list|()
operator|/
literal|2.0
condition|)
return|return
literal|false
return|;
return|return
name|m
operator|.
name|getTotalValue
argument_list|(
name|assignment
argument_list|)
operator|<
name|currentSolution
operator|.
name|getBestValue
argument_list|()
return|;
block|}
block|}
end_class

end_unit

