begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2010 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
operator|.
name|students
package|;
end_package

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solution
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solution
operator|.
name|SolutionComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CurComparator
implements|implements
name|SolutionComparator
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
block|{
specifier|public
name|CurComparator
parameter_list|(
name|DataProperties
name|config
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isBetterThanBestSolution
parameter_list|(
name|Solution
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|currentSolution
parameter_list|)
block|{
name|CurModel
name|m
init|=
operator|(
name|CurModel
operator|)
name|currentSolution
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|Assignment
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|assignment
init|=
name|currentSolution
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getContext
argument_list|(
name|assignment
argument_list|)
operator|.
name|getAssignedWeight
argument_list|()
operator|>
name|m
operator|.
name|getBestWeight
argument_list|()
operator|+
name|m
operator|.
name|getMinStudentWidth
argument_list|()
operator|/
literal|2.0
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|m
operator|.
name|getContext
argument_list|(
name|assignment
argument_list|)
operator|.
name|getAssignedWeight
argument_list|()
operator|<
name|m
operator|.
name|getBestWeight
argument_list|()
operator|-
name|m
operator|.
name|getMinStudentWidth
argument_list|()
operator|/
literal|2.0
condition|)
return|return
literal|false
return|;
return|return
name|m
operator|.
name|getTotalValue
argument_list|(
name|assignment
argument_list|)
operator|<
name|currentSolution
operator|.
name|getBestValue
argument_list|()
return|;
block|}
block|}
end_class

end_unit

