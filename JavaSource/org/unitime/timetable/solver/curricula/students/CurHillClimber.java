begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
operator|.
name|students
package|;
end_package

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|heuristics
operator|.
name|NeighbourSelection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Neighbour
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solution
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solver
operator|.
name|Solver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CurHillClimber
implements|implements
name|NeighbourSelection
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
block|{
specifier|protected
name|CurHillClimber
parameter_list|(
name|DataProperties
name|config
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|Solver
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|solver
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|Neighbour
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|selectNeighbour
parameter_list|(
name|Solution
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|solution
parameter_list|)
block|{
name|CurModel
name|model
init|=
operator|(
name|CurModel
operator|)
name|solution
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|Assignment
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|assignment
init|=
name|solution
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
name|int
name|ix
init|=
name|ToolBox
operator|.
name|random
argument_list|(
name|model
operator|.
name|variables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|model
operator|.
name|variables
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CurVariable
name|course
init|=
name|model
operator|.
name|variables
argument_list|()
operator|.
name|get
argument_list|(
operator|(
name|ix
operator|+
name|i
operator|)
operator|%
name|model
operator|.
name|variables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|CurValue
name|current
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|isComplete
argument_list|(
name|assignment
argument_list|)
operator|&&
name|current
operator|!=
literal|null
condition|)
continue|continue;
name|int
name|jx
init|=
name|ToolBox
operator|.
name|random
argument_list|(
name|course
operator|.
name|values
argument_list|(
name|solution
operator|.
name|getAssignment
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
operator|&&
name|current
operator|.
name|getStudent
argument_list|()
operator|.
name|getCourses
argument_list|(
name|assignment
argument_list|)
operator|.
name|size
argument_list|()
operator|<=
name|model
operator|.
name|getStudentLimit
argument_list|()
operator|.
name|getMinLimit
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|course
operator|.
name|values
argument_list|(
name|solution
operator|.
name|getAssignment
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|CurValue
name|student
init|=
name|course
operator|.
name|values
argument_list|(
name|solution
operator|.
name|getAssignment
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
operator|(
name|j
operator|+
name|jx
operator|)
operator|%
name|course
operator|.
name|values
argument_list|(
name|solution
operator|.
name|getAssignment
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getStudents
argument_list|(
name|assignment
argument_list|)
operator|.
name|contains
argument_list|(
name|student
operator|.
name|getStudent
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|student
operator|.
name|getStudent
argument_list|()
operator|.
name|getCourses
argument_list|(
name|assignment
argument_list|)
operator|.
name|size
argument_list|()
operator|>=
name|model
operator|.
name|getStudentLimit
argument_list|()
operator|.
name|getMaxLimit
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getSize
argument_list|(
name|assignment
argument_list|)
operator|+
name|student
operator|.
name|getStudent
argument_list|()
operator|.
name|getWeight
argument_list|()
operator|-
operator|(
name|current
operator|==
literal|null
condition|?
literal|0.0
else|:
name|current
operator|.
name|getStudent
argument_list|()
operator|.
name|getWeight
argument_list|()
operator|)
operator|>
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getMaxSize
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|current
operator|!=
literal|null
operator|&&
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getSize
argument_list|(
name|assignment
argument_list|)
operator|+
name|student
operator|.
name|getStudent
argument_list|()
operator|.
name|getWeight
argument_list|()
operator|-
name|current
operator|.
name|getStudent
argument_list|()
operator|.
name|getWeight
argument_list|()
operator|<
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getMaxSize
argument_list|()
operator|-
name|model
operator|.
name|getMinStudentWidth
argument_list|()
condition|)
continue|continue;
return|return
operator|new
name|CurSimpleAssignment
argument_list|(
name|student
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

