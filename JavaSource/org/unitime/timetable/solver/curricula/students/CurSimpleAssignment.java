begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
operator|.
name|students
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Neighbour
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CurSimpleAssignment
implements|implements
name|Neighbour
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
block|{
specifier|private
name|CurValue
name|iNewValue
decl_stmt|;
specifier|public
name|CurSimpleAssignment
parameter_list|(
name|CurValue
name|newValue
parameter_list|)
block|{
name|iNewValue
operator|=
name|newValue
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|assign
parameter_list|(
name|Assignment
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|assignment
parameter_list|,
name|long
name|iteration
parameter_list|)
block|{
name|assignment
operator|.
name|assign
argument_list|(
name|iteration
argument_list|,
name|iNewValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|value
parameter_list|(
name|Assignment
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|assignment
parameter_list|)
block|{
name|CurValue
name|old
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|iNewValue
operator|.
name|variable
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|iNewValue
operator|.
name|variable
argument_list|()
operator|.
name|getCourse
argument_list|()
operator|.
name|penalty
argument_list|(
name|assignment
argument_list|,
name|iNewValue
operator|.
name|getStudent
argument_list|()
argument_list|,
name|old
operator|==
literal|null
condition|?
literal|null
else|:
name|old
operator|.
name|getStudent
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|iNewValue
operator|.
name|variable
argument_list|()
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" = "
operator|+
name|iNewValue
operator|.
name|getStudent
argument_list|()
operator|.
name|getStudentId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|assignments
parameter_list|()
block|{
name|Map
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
argument_list|()
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|iNewValue
operator|.
name|variable
argument_list|()
argument_list|,
name|iNewValue
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

