begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2010 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
operator|.
name|students
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Neighbour
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CurSimpleAssignment
implements|implements
name|Neighbour
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
block|{
specifier|private
name|CurValue
name|iNewValue
decl_stmt|;
specifier|public
name|CurSimpleAssignment
parameter_list|(
name|CurValue
name|newValue
parameter_list|)
block|{
name|iNewValue
operator|=
name|newValue
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|assign
parameter_list|(
name|Assignment
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|assignment
parameter_list|,
name|long
name|iteration
parameter_list|)
block|{
name|assignment
operator|.
name|assign
argument_list|(
name|iteration
argument_list|,
name|iNewValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|value
parameter_list|(
name|Assignment
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|assignment
parameter_list|)
block|{
name|CurValue
name|old
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|iNewValue
operator|.
name|variable
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|iNewValue
operator|.
name|variable
argument_list|()
operator|.
name|getCourse
argument_list|()
operator|.
name|penalty
argument_list|(
name|assignment
argument_list|,
name|iNewValue
operator|.
name|getStudent
argument_list|()
argument_list|,
name|old
operator|==
literal|null
condition|?
literal|null
else|:
name|old
operator|.
name|getStudent
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|iNewValue
operator|.
name|variable
argument_list|()
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" = "
operator|+
name|iNewValue
operator|.
name|getStudent
argument_list|()
operator|.
name|getStudentId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|assignments
parameter_list|()
block|{
name|Map
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
argument_list|()
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|iNewValue
operator|.
name|variable
argument_list|()
argument_list|,
name|iNewValue
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

