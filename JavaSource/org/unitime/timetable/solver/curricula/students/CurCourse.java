begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
operator|.
name|students
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CurCourse
extends|extends
name|Constraint
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
block|{
specifier|private
specifier|static
name|DecimalFormat
name|sDF
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.###"
argument_list|)
decl_stmt|;
specifier|private
name|String
name|iCourseName
decl_stmt|;
specifier|private
name|Long
name|iCourseId
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|CurStudent
argument_list|>
name|iStudents
init|=
operator|new
name|HashSet
argument_list|<
name|CurStudent
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Double
argument_list|>
name|iTargetShare
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Double
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|CurModel
name|iModel
decl_stmt|;
specifier|private
name|double
name|iMaxSize
decl_stmt|;
specifier|private
name|double
name|iSize
init|=
literal|0.0
decl_stmt|;
specifier|public
name|CurCourse
parameter_list|(
name|CurModel
name|model
parameter_list|,
name|Long
name|course
parameter_list|,
name|String
name|courseName
parameter_list|,
name|int
name|maxNrStudents
parameter_list|,
name|double
name|maxSize
parameter_list|)
block|{
name|iModel
operator|=
name|model
expr_stmt|;
name|iCourseId
operator|=
name|course
expr_stmt|;
name|iCourseName
operator|=
name|courseName
expr_stmt|;
name|iMaxSize
operator|=
name|maxSize
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxNrStudents
condition|;
name|i
operator|++
control|)
block|{
name|CurVariable
name|c
init|=
operator|new
name|CurVariable
argument_list|(
name|model
argument_list|,
name|this
argument_list|,
literal|0
argument_list|,
name|model
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|.
name|addVariable
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|addVariable
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|model
operator|.
name|addConstraint
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|computeConflicts
parameter_list|(
name|CurValue
name|value
parameter_list|,
name|Set
argument_list|<
name|CurValue
argument_list|>
name|conflicts
parameter_list|)
block|{
if|if
condition|(
name|getSize
argument_list|()
operator|+
name|value
operator|.
name|getStudent
argument_list|()
operator|.
name|getWeight
argument_list|()
operator|>
name|getMaxSize
argument_list|()
condition|)
block|{
name|double
name|excess
init|=
name|getSize
argument_list|()
operator|+
name|value
operator|.
name|getStudent
argument_list|()
operator|.
name|getWeight
argument_list|()
operator|-
name|getMaxSize
argument_list|()
decl_stmt|;
for|for
control|(
name|CurValue
name|conf
range|:
name|conflicts
control|)
if|if
condition|(
name|conf
operator|.
name|variable
argument_list|()
operator|.
name|getCourse
argument_list|()
operator|.
name|equals
argument_list|(
name|this
argument_list|)
condition|)
name|excess
operator|-=
name|conf
operator|.
name|getStudent
argument_list|()
operator|.
name|getWeight
argument_list|()
expr_stmt|;
comment|/* 			if (value.variable().getAssignment() != null&& !conflicts.contains(value.variable().getAssignment())) 				excess -= value.variable().getAssignment().getStudent().getWeight(); 				*/
while|while
condition|(
name|excess
operator|>
literal|0.0
condition|)
block|{
name|List
argument_list|<
name|CurValue
argument_list|>
name|adepts
init|=
operator|new
name|ArrayList
argument_list|<
name|CurValue
argument_list|>
argument_list|()
decl_stmt|;
name|double
name|best
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CurVariable
name|assigned
range|:
name|assignedVariables
argument_list|()
control|)
block|{
if|if
condition|(
name|assigned
operator|.
name|equals
argument_list|(
name|value
operator|.
name|variable
argument_list|()
argument_list|)
condition|)
continue|continue;
name|CurValue
name|adept
init|=
name|assigned
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|conflicts
operator|.
name|contains
argument_list|(
name|adept
argument_list|)
condition|)
continue|continue;
name|double
name|p
init|=
name|adept
operator|.
name|toDouble
argument_list|()
decl_stmt|;
if|if
condition|(
name|adepts
operator|.
name|isEmpty
argument_list|()
operator|||
name|p
operator|<
name|best
condition|)
block|{
name|best
operator|=
name|p
expr_stmt|;
name|adepts
operator|.
name|clear
argument_list|()
expr_stmt|;
name|adepts
operator|.
name|add
argument_list|(
name|adept
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|p
operator|==
name|best
condition|)
block|{
name|adepts
operator|.
name|add
argument_list|(
name|adept
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|adepts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
break|break;
block|}
name|CurValue
name|conf
init|=
name|ToolBox
operator|.
name|random
argument_list|(
name|adepts
argument_list|)
decl_stmt|;
name|conflicts
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|excess
operator|-=
name|conf
operator|.
name|getStudent
argument_list|()
operator|.
name|getWeight
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|getStudents
argument_list|()
operator|.
name|contains
argument_list|(
name|value
operator|.
name|getStudent
argument_list|()
argument_list|)
condition|)
for|for
control|(
name|CurVariable
name|sc
range|:
name|assignedVariables
argument_list|()
control|)
block|{
if|if
condition|(
name|sc
operator|.
name|getAssignment
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|equals
argument_list|(
name|value
operator|.
name|getStudent
argument_list|()
argument_list|)
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
name|sc
operator|.
name|getAssignment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Set
argument_list|<
name|CurStudent
argument_list|>
name|getStudents
parameter_list|()
block|{
return|return
name|iStudents
return|;
block|}
specifier|public
name|double
name|getMaxSize
parameter_list|()
block|{
return|return
name|iMaxSize
operator|+
name|iModel
operator|.
name|getMinStudentWidth
argument_list|()
operator|/
literal|2f
return|;
block|}
specifier|public
name|double
name|getOriginalMaxSize
parameter_list|()
block|{
return|return
name|iMaxSize
return|;
block|}
specifier|public
name|Long
name|getCourseId
parameter_list|()
block|{
return|return
name|iCourseId
return|;
block|}
specifier|public
name|String
name|getCourseName
parameter_list|()
block|{
return|return
name|iCourseName
return|;
block|}
specifier|public
name|int
name|getNrStudents
parameter_list|()
block|{
return|return
name|variables
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|double
name|getSize
parameter_list|()
block|{
return|return
name|iSize
return|;
block|}
specifier|public
name|CurValue
name|getValue
parameter_list|(
name|CurStudent
name|student
parameter_list|)
block|{
for|for
control|(
name|CurVariable
name|var
range|:
name|variables
argument_list|()
control|)
block|{
if|if
condition|(
name|var
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|var
operator|.
name|getAssignment
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|equals
argument_list|(
name|student
argument_list|)
condition|)
return|return
name|var
operator|.
name|getAssignment
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|double
name|share
parameter_list|(
name|CurCourse
name|course
parameter_list|)
block|{
name|double
name|share
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CurStudent
name|s
range|:
name|getStudents
argument_list|()
control|)
if|if
condition|(
name|course
operator|.
name|getStudents
argument_list|()
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
name|share
operator|+=
name|s
operator|.
name|getWeight
argument_list|()
expr_stmt|;
return|return
name|share
return|;
block|}
specifier|public
name|double
name|penalty
parameter_list|(
name|CurCourse
name|course
parameter_list|)
block|{
return|return
name|Math
operator|.
name|abs
argument_list|(
name|share
argument_list|(
name|course
argument_list|)
operator|-
name|getTargetShare
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|double
name|penalty
parameter_list|(
name|CurStudent
name|student
parameter_list|)
block|{
return|return
name|penalty
argument_list|(
name|student
argument_list|,
literal|null
argument_list|)
return|;
comment|/* 		if (student == null) return 0.0; 		double penalty = 0; 		for (CurCourse course: iModel.getCourses()) { 			if (course.getCourseId().equals(getCourseId())) continue; 			double target = getTargetShare(course.getCourseId()); 			double share = share(course); 			boolean contains = course.getStudents().contains(student); 			double size = course.getSize(); 			if (!getStudents().contains(student)) { 				size += student.getWeight(); 				if (contains) share += student.getWeight(); 			} 			if ((share< target&& !contains) || (share> target&& contains)) 				penalty += ((double)Math.abs(share - target)) / (contains ? share : size - share); 		} 		return penalty; 		*/
block|}
specifier|public
name|double
name|penalty
parameter_list|(
name|CurStudent
name|newStudent
parameter_list|,
name|CurStudent
name|oldStudent
parameter_list|)
block|{
if|if
condition|(
name|oldStudent
operator|!=
literal|null
operator|&&
name|oldStudent
operator|.
name|equals
argument_list|(
name|newStudent
argument_list|)
condition|)
return|return
name|penalty
argument_list|(
name|newStudent
argument_list|,
literal|null
argument_list|)
return|;
name|double
name|penalty
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CurCourse
name|course
range|:
name|iModel
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|course
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|getCourseId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|double
name|target
init|=
name|getTargetShare
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|share
init|=
name|share
argument_list|(
name|course
argument_list|)
decl_stmt|;
name|double
name|oldPenalty
init|=
name|Math
operator|.
name|abs
argument_list|(
name|share
operator|-
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|newStudent
operator|!=
literal|null
operator|&&
name|course
operator|.
name|getStudents
argument_list|()
operator|.
name|contains
argument_list|(
name|newStudent
argument_list|)
condition|)
name|share
operator|+=
name|newStudent
operator|.
name|getWeight
argument_list|()
expr_stmt|;
if|if
condition|(
name|oldStudent
operator|!=
literal|null
operator|&&
name|course
operator|.
name|getStudents
argument_list|()
operator|.
name|contains
argument_list|(
name|oldStudent
argument_list|)
condition|)
name|share
operator|-=
name|oldStudent
operator|.
name|getWeight
argument_list|()
expr_stmt|;
name|double
name|newPenalty
init|=
name|Math
operator|.
name|abs
argument_list|(
name|share
operator|-
name|target
argument_list|)
decl_stmt|;
name|penalty
operator|+=
name|newPenalty
operator|-
name|oldPenalty
expr_stmt|;
block|}
return|return
name|penalty
return|;
block|}
specifier|public
name|void
name|setTargetShare
parameter_list|(
name|Long
name|course
parameter_list|,
name|double
name|targetShare
parameter_list|)
block|{
name|iTargetShare
operator|.
name|put
argument_list|(
name|course
argument_list|,
name|targetShare
argument_list|)
expr_stmt|;
block|}
specifier|public
name|double
name|getTargetShare
parameter_list|(
name|Long
name|course
parameter_list|)
block|{
name|Double
name|targetShare
init|=
name|iTargetShare
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
return|return
operator|(
name|targetShare
operator|==
literal|null
condition|?
literal|0
else|:
name|targetShare
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|assigned
parameter_list|(
name|long
name|iteration
parameter_list|,
name|CurValue
name|value
parameter_list|)
block|{
name|super
operator|.
name|assigned
argument_list|(
name|iteration
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|iStudents
operator|.
name|add
argument_list|(
name|value
operator|.
name|getStudent
argument_list|()
argument_list|)
expr_stmt|;
name|value
operator|.
name|getStudent
argument_list|()
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|iSize
operator|+=
name|value
operator|.
name|getStudent
argument_list|()
operator|.
name|getWeight
argument_list|()
expr_stmt|;
comment|/* 		if (iSize> getMaxSize()) 			throw new RuntimeException("Maximal number of students in a course exceeded " + "(" + iSize + "> " + getMaxSize() + ")"); 		if (value.getStudent().getCourses().size()> ((CurModel)value.variable().getModel()).getStudentLimit().getMaxLimit()) 			throw new RuntimeException("Student max limit breached for " + value.getStudent() + " (" + value.getStudent().getCourses().size() + "> " + ((CurModel)value.variable().getModel()).getStudentLimit().getMaxLimit() + "."); 			*/
block|}
annotation|@
name|Override
specifier|public
name|void
name|unassigned
parameter_list|(
name|long
name|iteration
parameter_list|,
name|CurValue
name|value
parameter_list|)
block|{
name|super
operator|.
name|unassigned
argument_list|(
name|iteration
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|iStudents
operator|.
name|remove
argument_list|(
name|value
operator|.
name|getStudent
argument_list|()
argument_list|)
expr_stmt|;
name|iSize
operator|-=
name|value
operator|.
name|getStudent
argument_list|()
operator|.
name|getWeight
argument_list|()
expr_stmt|;
name|value
operator|.
name|getStudent
argument_list|()
operator|.
name|getCourses
argument_list|()
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|/* 		if (value.getStudent().getCourses().size()< ((CurModel)value.variable().getModel()).getStudentLimit().getMinLimit()) 			throw new RuntimeException("Student min limit breached for " + value.getStudent() + "."); 			*/
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getCourseId
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|CurCourse
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|CurCourse
operator|)
name|o
operator|)
operator|.
name|getCourseId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Course<"
operator|+
name|getCourseName
argument_list|()
operator|+
literal|", size: "
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|getSize
argument_list|()
argument_list|)
operator|+
literal|"/"
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|getOriginalMaxSize
argument_list|()
argument_list|)
operator|+
literal|">"
return|;
block|}
specifier|public
name|boolean
name|isComplete
parameter_list|()
block|{
return|return
name|getSize
argument_list|()
operator|+
name|iModel
operator|.
name|getMinStudentWidth
argument_list|()
operator|>
name|getMaxSize
argument_list|()
return|;
block|}
block|}
end_class

end_unit

