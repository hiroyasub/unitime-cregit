begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|DocumentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Curriculum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumCourseGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
operator|.
name|students
operator|.
name|CurCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
operator|.
name|students
operator|.
name|CurModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
operator|.
name|students
operator|.
name|CurStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
operator|.
name|students
operator|.
name|CurValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
operator|.
name|students
operator|.
name|CurVariable
import|;
end_import

begin_comment
comment|/**  * Combining curricula with course requests.   * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CurriculaRequestsCourseDemands
implements|implements
name|StudentCourseDemands
block|{
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CurriculaRequestsCourseDemands
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|StudentCourseRequests
name|iStudentCourseRequests
decl_stmt|;
specifier|private
name|IdGenerator
name|iLastStudentId
init|=
operator|new
name|IdGenerator
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
argument_list|>
name|iDemands
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|WeightedCourseOffering
argument_list|>
argument_list|>
name|iStudentRequests
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|WeightedCourseOffering
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|iLoadedCurricula
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Double
argument_list|>
argument_list|>
name|iEnrollmentPriorities
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Double
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashSet
argument_list|<
name|Long
argument_list|>
name|iCheckedCourses
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|iIncludeOtherStudents
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|iSetStudentCourseLimits
init|=
literal|false
decl_stmt|;
specifier|private
name|CurriculumEnrollmentPriorityProvider
name|iEnrollmentPriorityProvider
init|=
literal|null
decl_stmt|;
specifier|public
name|CurriculaRequestsCourseDemands
parameter_list|(
name|DataProperties
name|config
parameter_list|)
block|{
name|iStudentCourseRequests
operator|=
operator|new
name|StudentCourseRequests
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|iIncludeOtherStudents
operator|=
name|config
operator|.
name|getPropertyBoolean
argument_list|(
literal|"CurriculaCourseDemands.IncludeOtherStudents"
argument_list|,
name|iIncludeOtherStudents
argument_list|)
expr_stmt|;
name|iSetStudentCourseLimits
operator|=
name|config
operator|.
name|getPropertyBoolean
argument_list|(
literal|"CurriculaCourseDemands.SetStudentCourseLimits"
argument_list|,
name|iSetStudentCourseLimits
argument_list|)
expr_stmt|;
name|iEnrollmentPriorityProvider
operator|=
operator|new
name|DefaultCurriculumEnrollmentPriorityProvider
argument_list|(
name|config
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|.
name|getProperty
argument_list|(
literal|"CurriculaCourseDemands.CurriculumEnrollmentPriorityProvider"
argument_list|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|iEnrollmentPriorityProvider
operator|=
operator|(
name|CurriculumEnrollmentPriorityProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|config
operator|.
name|getProperty
argument_list|(
literal|"CurriculaCourseDemands.CurriculumEnrollmentPriorityProvider"
argument_list|)
argument_list|)
operator|.
name|getConstructor
argument_list|(
name|DataProperties
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to use custom enrollment priority provider: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Progress
name|progress
parameter_list|,
name|Session
name|session
parameter_list|,
name|Collection
argument_list|<
name|InstructionalOffering
argument_list|>
name|offerings
parameter_list|)
block|{
name|iStudentCourseRequests
operator|.
name|init
argument_list|(
name|hibSession
argument_list|,
name|progress
argument_list|,
name|session
argument_list|,
name|offerings
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Curriculum
argument_list|>
name|curricula
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|offerings
operator|!=
literal|null
operator|&&
name|offerings
operator|.
name|size
argument_list|()
operator|<=
literal|1000
condition|)
block|{
name|String
name|courses
init|=
literal|""
decl_stmt|;
name|int
name|nrCourses
init|=
literal|0
decl_stmt|;
for|for
control|(
name|InstructionalOffering
name|offering
range|:
name|offerings
control|)
for|for
control|(
name|CourseOffering
name|course
range|:
name|offering
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|courses
operator|.
name|isEmpty
argument_list|()
condition|)
name|courses
operator|+=
literal|","
expr_stmt|;
name|courses
operator|+=
name|course
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|nrCourses
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|nrCourses
operator|<=
literal|1000
condition|)
block|{
name|curricula
operator|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct c from CurriculumCourse cc inner join cc.classification.curriculum c where "
operator|+
literal|"c.academicArea.session.uniqueId = :sessionId and cc.course.uniqueId in ("
operator|+
name|courses
operator|+
literal|")"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|curricula
operator|==
literal|null
condition|)
block|{
name|curricula
operator|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from Curriculum c where c.academicArea.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
name|progress
operator|.
name|setPhase
argument_list|(
literal|"Loading curricula"
argument_list|,
name|curricula
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Curriculum
name|curriculum
range|:
name|curricula
control|)
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
argument_list|>
argument_list|>
name|requests
init|=
name|loadClasfCourseMajor2req
argument_list|(
name|hibSession
argument_list|,
name|curriculum
argument_list|)
decl_stmt|;
for|for
control|(
name|CurriculumClassification
name|clasf
range|:
name|curriculum
operator|.
name|getClassifications
argument_list|()
control|)
block|{
if|if
condition|(
name|clasf
operator|.
name|getNrStudents
argument_list|()
operator|>
literal|0
condition|)
name|init
argument_list|(
name|hibSession
argument_list|,
name|clasf
argument_list|,
name|requests
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|progress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
argument_list|>
argument_list|>
name|loadClasfCourseMajor2req
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Curriculum
name|curriculum
parameter_list|)
block|{
name|String
name|majorCodes
init|=
literal|""
decl_stmt|;
for|for
control|(
name|PosMajor
name|major
range|:
name|curriculum
operator|.
name|getMajors
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|majorCodes
operator|.
name|isEmpty
argument_list|()
condition|)
name|majorCodes
operator|+=
literal|","
expr_stmt|;
name|majorCodes
operator|+=
literal|"'"
operator|+
name|major
operator|.
name|getCode
argument_list|()
operator|+
literal|"'"
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
argument_list|>
argument_list|>
name|clasf2courseReq
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select f.code, co, m.code, s.uniqueId "
operator|+
literal|"from CourseRequest r inner join r.courseDemand.student s inner join s.academicAreaClassifications a inner join a.academicClassification f "
operator|+
literal|"inner join s.posMajors m inner join r.courseOffering co where "
operator|+
literal|"s.session.uniqueId = :sessionId and a.academicArea.academicAreaAbbreviation = :acadAbbv "
operator|+
operator|(
name|majorCodes
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"and m.code in ("
operator|+
name|majorCodes
operator|+
literal|") "
operator|)
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|curriculum
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"acadAbbv"
argument_list|,
name|curriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|String
name|clasfCode
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|CourseOffering
name|course
init|=
operator|(
name|CourseOffering
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|String
name|majorCode
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|3
index|]
decl_stmt|;
name|WeightedStudentId
name|student
init|=
operator|new
name|WeightedStudentId
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
name|student
operator|.
name|setStats
argument_list|(
name|curriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|clasfCode
argument_list|,
name|majorCode
argument_list|)
expr_stmt|;
name|student
operator|.
name|setCurriculum
argument_list|(
name|curriculum
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
argument_list|>
name|course2req
init|=
name|clasf2courseReq
operator|.
name|get
argument_list|(
name|clasfCode
argument_list|)
decl_stmt|;
if|if
condition|(
name|course2req
operator|==
literal|null
condition|)
block|{
name|course2req
operator|=
operator|new
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|clasf2courseReq
operator|.
name|put
argument_list|(
name|clasfCode
argument_list|,
name|course2req
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
name|students
init|=
name|course2req
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|students
operator|==
literal|null
condition|)
block|{
name|students
operator|=
operator|new
name|HashSet
argument_list|<
name|WeightedStudentId
argument_list|>
argument_list|()
expr_stmt|;
name|course2req
operator|.
name|put
argument_list|(
name|course
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
name|students
operator|.
name|add
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
return|return
name|clasf2courseReq
return|;
block|}
specifier|protected
name|void
name|init
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|CurriculumClassification
name|clasf
parameter_list|,
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
argument_list|>
name|courseRequests
parameter_list|)
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"Processing "
operator|+
name|clasf
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" "
operator|+
name|clasf
operator|.
name|getName
argument_list|()
operator|+
literal|" ... ("
operator|+
name|clasf
operator|.
name|getNrStudents
argument_list|()
operator|+
literal|" students, "
operator|+
name|clasf
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" courses)"
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|WeightedStudentId
argument_list|,
name|Set
argument_list|<
name|CourseOffering
argument_list|>
argument_list|>
name|students
init|=
operator|new
name|Hashtable
argument_list|<
name|WeightedStudentId
argument_list|,
name|Set
argument_list|<
name|CourseOffering
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|courseRequests
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
argument_list|>
name|entry
range|:
name|courseRequests
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|WeightedStudentId
name|student
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|CourseOffering
argument_list|>
name|courses
init|=
name|students
operator|.
name|get
argument_list|(
name|student
argument_list|)
decl_stmt|;
if|if
condition|(
name|courses
operator|==
literal|null
condition|)
block|{
name|courses
operator|=
operator|new
name|HashSet
argument_list|<
name|CourseOffering
argument_list|>
argument_list|()
expr_stmt|;
name|students
operator|.
name|put
argument_list|(
name|student
argument_list|,
name|courses
argument_list|)
expr_stmt|;
block|}
name|courses
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|float
name|totalWeight
init|=
literal|0
decl_stmt|;
for|for
control|(
name|WeightedStudentId
name|student
range|:
name|students
operator|.
name|keySet
argument_list|()
control|)
name|totalWeight
operator|+=
name|student
operator|.
name|getWeight
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"  registered students: "
operator|+
name|totalWeight
operator|+
literal|", target: "
operator|+
name|clasf
operator|.
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|nrStudents
init|=
name|clasf
operator|.
name|getNrStudents
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|WeightedStudentId
argument_list|>
name|madeUpStudents
init|=
operator|new
name|ArrayList
argument_list|<
name|StudentCourseDemands
operator|.
name|WeightedStudentId
argument_list|>
argument_list|()
decl_stmt|;
name|double
name|w
init|=
name|Math
operator|.
name|min
argument_list|(
name|totalWeight
operator|/
name|clasf
operator|.
name|getNrStudents
argument_list|()
argument_list|,
literal|1.0
argument_list|)
decl_stmt|;
name|float
name|factor
init|=
literal|1.0f
decl_stmt|;
if|if
condition|(
literal|2
operator|*
name|totalWeight
operator|<
name|clasf
operator|.
name|getNrStudents
argument_list|()
condition|)
block|{
comment|// students are less than 1/2 of the requested size -> make up some students
name|int
name|studentsToMakeUp
init|=
name|Math
operator|.
name|round
argument_list|(
name|clasf
operator|.
name|getNrStudents
argument_list|()
operator|-
name|totalWeight
argument_list|)
decl_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"    making up "
operator|+
name|studentsToMakeUp
operator|+
literal|" students"
argument_list|)
expr_stmt|;
name|String
name|majors
init|=
literal|""
decl_stmt|;
for|for
control|(
name|PosMajor
name|major
range|:
name|clasf
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getMajors
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|majors
operator|.
name|isEmpty
argument_list|()
condition|)
name|majors
operator|+=
literal|"|"
expr_stmt|;
name|majors
operator|+=
name|major
operator|.
name|getCode
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|studentsToMakeUp
condition|;
name|i
operator|++
control|)
block|{
name|WeightedStudentId
name|student
init|=
operator|new
name|WeightedStudentId
argument_list|(
operator|-
name|iLastStudentId
operator|.
name|newId
argument_list|()
argument_list|)
decl_stmt|;
name|student
operator|.
name|setStats
argument_list|(
name|clasf
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|,
name|majors
argument_list|)
expr_stmt|;
name|students
operator|.
name|put
argument_list|(
name|student
argument_list|,
operator|new
name|HashSet
argument_list|<
name|CourseOffering
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|madeUpStudents
operator|.
name|add
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|totalWeight
operator|<
name|clasf
operator|.
name|getNrStudents
argument_list|()
condition|)
block|{
comment|// change weights to fit the requested size
name|factor
operator|=
name|clasf
operator|.
name|getNrStudents
argument_list|()
operator|/
name|totalWeight
expr_stmt|;
name|w
operator|=
literal|1.0
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"    changing student weight "
operator|+
name|factor
operator|+
literal|" times"
argument_list|)
expr_stmt|;
for|for
control|(
name|WeightedStudentId
name|student
range|:
name|students
operator|.
name|keySet
argument_list|()
control|)
name|student
operator|.
name|setWeight
argument_list|(
name|student
operator|.
name|getWeight
argument_list|()
operator|*
name|factor
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|totalWeight
operator|>
name|clasf
operator|.
name|getNrStudents
argument_list|()
condition|)
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"    more registered students than needed, keeping all"
argument_list|)
expr_stmt|;
name|nrStudents
operator|=
name|Math
operator|.
name|round
argument_list|(
name|totalWeight
argument_list|)
expr_stmt|;
block|}
comment|// Setup model
name|List
argument_list|<
name|CurStudent
argument_list|>
name|curStudents
init|=
operator|new
name|ArrayList
argument_list|<
name|CurStudent
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|WeightedStudentId
argument_list|>
name|studentIds
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|WeightedStudentId
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|WeightedStudentId
name|student
range|:
name|students
operator|.
name|keySet
argument_list|()
control|)
block|{
name|curStudents
operator|.
name|add
argument_list|(
operator|new
name|CurStudent
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
operator|<
literal|0
condition|?
operator|-
operator|(
operator|++
name|idx
operator|)
else|:
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|student
operator|.
name|getWeight
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|studentIds
operator|.
name|put
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
operator|<
literal|0
condition|?
operator|-
name|idx
else|:
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|student
argument_list|)
expr_stmt|;
block|}
name|CurModel
name|m
init|=
operator|new
name|CurModel
argument_list|(
name|curStudents
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|CourseOffering
argument_list|>
name|courses
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|CourseOffering
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CurriculumCourse
name|course
range|:
name|clasf
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
name|requests
init|=
operator|(
name|courseRequests
operator|==
literal|null
condition|?
literal|null
else|:
name|courseRequests
operator|.
name|get
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
argument_list|)
operator|)
decl_stmt|;
name|double
name|size
init|=
name|w
operator|*
name|factor
operator|*
operator|(
name|requests
operator|==
literal|null
condition|?
literal|0
else|:
name|requests
operator|.
name|size
argument_list|()
operator|)
operator|+
operator|(
literal|1
operator|-
name|w
operator|)
operator|*
name|nrStudents
operator|*
name|course
operator|.
name|getPercShare
argument_list|()
decl_stmt|;
comment|/* 			if (factor> 1.0f) 				size = Math.max(nrStudents * course.getPercShare(), factor * (requests == null ? 0 : requests.size())); 			*/
name|m
operator|.
name|addCourse
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|size
argument_list|,
name|iEnrollmentPriorityProvider
operator|.
name|getEnrollmentPriority
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
name|courses
operator|.
name|put
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourse
argument_list|()
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|curricula
init|=
name|iLoadedCurricula
operator|.
name|get
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|curricula
operator|==
literal|null
condition|)
block|{
name|curricula
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|iLoadedCurricula
operator|.
name|put
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|curricula
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|majors
init|=
name|curricula
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|":"
operator|+
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|majors
operator|==
literal|null
condition|)
block|{
name|majors
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|curricula
operator|.
name|put
argument_list|(
name|clasf
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|":"
operator|+
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|,
name|majors
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clasf
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getMajors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|majors
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|PosMajor
name|mj
range|:
name|clasf
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getMajors
argument_list|()
control|)
name|majors
operator|.
name|add
argument_list|(
name|mj
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|computeTargetShare
argument_list|(
name|clasf
argument_list|,
name|nrStudents
argument_list|,
name|factor
argument_list|,
name|w
argument_list|,
name|m
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSetStudentCourseLimits
condition|)
name|m
operator|.
name|setStudentLimits
argument_list|()
expr_stmt|;
comment|// Load model from cache (if exists)
name|CurModel
name|cachedModel
init|=
literal|null
decl_stmt|;
name|Element
name|cache
init|=
operator|(
name|clasf
operator|.
name|getStudents
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|clasf
operator|.
name|getStudents
argument_list|()
operator|.
name|getRootElement
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
operator|&&
name|cache
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|getCacheName
argument_list|()
argument_list|)
condition|)
block|{
name|cachedModel
operator|=
name|CurModel
operator|.
name|loadFromXml
argument_list|(
name|cache
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSetStudentCourseLimits
condition|)
name|cachedModel
operator|.
name|setStudentLimits
argument_list|()
expr_stmt|;
block|}
comment|// Check the cached model
if|if
condition|(
name|cachedModel
operator|!=
literal|null
operator|&&
name|cachedModel
operator|.
name|isSameModel
argument_list|(
name|m
argument_list|)
condition|)
block|{
comment|// Reuse
name|sLog
operator|.
name|debug
argument_list|(
literal|"  using cached model..."
argument_list|)
expr_stmt|;
name|m
operator|=
name|cachedModel
expr_stmt|;
block|}
else|else
block|{
comment|// initial assignment
for|for
control|(
name|CurStudent
name|student
range|:
name|curStudents
control|)
block|{
for|for
control|(
name|CourseOffering
name|course
range|:
name|students
operator|.
name|get
argument_list|(
name|studentIds
operator|.
name|get
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
argument_list|)
control|)
block|{
name|CurCourse
name|curCourse
init|=
name|m
operator|.
name|getCourse
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|curCourse
operator|==
literal|null
condition|)
continue|continue;
name|CurVariable
name|var
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CurVariable
name|v
range|:
name|curCourse
operator|.
name|variables
argument_list|()
control|)
if|if
condition|(
name|v
operator|.
name|getAssignment
argument_list|()
operator|==
literal|null
condition|)
block|{
name|var
operator|=
name|v
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|var
operator|!=
literal|null
condition|)
block|{
name|CurValue
name|val
init|=
operator|new
name|CurValue
argument_list|(
name|var
argument_list|,
name|student
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|inConflict
argument_list|(
name|val
argument_list|)
condition|)
name|var
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|val
argument_list|)
expr_stmt|;
else|else
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"Unable to assign "
operator|+
name|student
operator|+
literal|" to "
operator|+
name|var
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Constraint
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
argument_list|,
name|Set
argument_list|<
name|CurValue
argument_list|>
argument_list|>
name|conf
init|=
name|m
operator|.
name|conflictConstraints
argument_list|(
name|val
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Constraint
argument_list|<
name|CurVariable
argument_list|,
name|CurValue
argument_list|>
argument_list|,
name|Set
argument_list|<
name|CurValue
argument_list|>
argument_list|>
name|entry
range|:
name|conf
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sLog
operator|.
name|debug
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|": "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"No variable for "
operator|+
name|student
operator|+
literal|" to "
operator|+
name|curCourse
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Solve model
name|sLog
operator|.
name|debug
argument_list|(
literal|"Initial: "
operator|+
name|m
operator|.
name|getInfo
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|solve
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"Final: "
operator|+
name|m
operator|.
name|getInfo
argument_list|()
argument_list|)
expr_stmt|;
comment|// Save into the cache
name|Document
name|doc
init|=
name|DocumentHelper
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|m
operator|.
name|saveAsXml
argument_list|(
name|doc
operator|.
name|addElement
argument_list|(
name|getCacheName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// sLog.debug("Model:\n" + doc.asXML());
name|clasf
operator|.
name|setStudents
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|clasf
argument_list|)
expr_stmt|;
block|}
comment|// Save results
name|idx
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|CurStudent
name|s
range|:
name|m
operator|.
name|getStudents
argument_list|()
control|)
block|{
name|WeightedStudentId
name|student
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|getStudentId
argument_list|()
operator|<
literal|0
condition|)
block|{
name|student
operator|=
name|madeUpStudents
operator|.
name|get
argument_list|(
name|idx
operator|++
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|student
operator|=
name|studentIds
operator|.
name|get
argument_list|(
name|s
operator|.
name|getStudentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|WeightedCourseOffering
argument_list|>
name|studentCourses
init|=
operator|new
name|HashSet
argument_list|<
name|WeightedCourseOffering
argument_list|>
argument_list|()
decl_stmt|;
name|iStudentRequests
operator|.
name|put
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|studentCourses
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Double
argument_list|>
name|priorities
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Double
argument_list|>
argument_list|()
decl_stmt|;
name|iEnrollmentPriorities
operator|.
name|put
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|priorities
argument_list|)
expr_stmt|;
for|for
control|(
name|CurCourse
name|course
range|:
name|s
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|CourseOffering
name|co
init|=
name|courses
operator|.
name|get
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|getPriority
argument_list|()
operator|!=
literal|null
condition|)
name|priorities
operator|.
name|put
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|course
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
name|courseStudents
init|=
name|iDemands
operator|.
name|get
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|courseStudents
operator|==
literal|null
condition|)
block|{
name|courseStudents
operator|=
operator|new
name|HashSet
argument_list|<
name|WeightedStudentId
argument_list|>
argument_list|()
expr_stmt|;
name|iDemands
operator|.
name|put
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|courseStudents
argument_list|)
expr_stmt|;
block|}
name|courseStudents
operator|.
name|add
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|studentCourses
operator|.
name|add
argument_list|(
operator|new
name|WeightedCourseOffering
argument_list|(
name|co
argument_list|,
name|student
operator|.
name|getWeight
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|String
name|getCacheName
parameter_list|()
block|{
return|return
literal|"curriculum-lastlike-demands"
return|;
block|}
specifier|protected
name|void
name|computeTargetShare
parameter_list|(
name|CurriculumClassification
name|clasf
parameter_list|,
name|int
name|nrStudents
parameter_list|,
name|double
name|factor
parameter_list|,
name|double
name|w
parameter_list|,
name|CurModel
name|model
parameter_list|)
block|{
for|for
control|(
name|CurriculumCourse
name|c1
range|:
name|clasf
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|double
name|x1
init|=
name|model
operator|.
name|getCourse
argument_list|(
name|c1
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|getOriginalMaxSize
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|CurriculumCourse
argument_list|>
index|[]
name|group
init|=
operator|new
name|HashSet
index|[]
block|{
operator|new
name|HashSet
argument_list|<
name|CurriculumCourse
argument_list|>
argument_list|()
block|,
operator|new
name|HashSet
argument_list|<
name|CurriculumCourse
argument_list|>
argument_list|()
block|}
decl_stmt|;
name|Queue
argument_list|<
name|CurriculumCourse
argument_list|>
name|queue
init|=
operator|new
name|LinkedList
argument_list|<
name|CurriculumCourse
argument_list|>
argument_list|()
decl_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|CurriculumCourseGroup
argument_list|>
name|done
init|=
operator|new
name|HashSet
argument_list|<
name|CurriculumCourseGroup
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|CurriculumCourse
name|c
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
for|for
control|(
name|CurriculumCourseGroup
name|g
range|:
name|c
operator|.
name|getGroups
argument_list|()
control|)
if|if
condition|(
name|done
operator|.
name|add
argument_list|(
name|g
argument_list|)
condition|)
for|for
control|(
name|CurriculumCourse
name|x
range|:
name|clasf
operator|.
name|getCourses
argument_list|()
control|)
if|if
condition|(
operator|!
name|x
operator|.
name|equals
argument_list|(
name|c
argument_list|)
operator|&&
operator|!
name|x
operator|.
name|equals
argument_list|(
name|c1
argument_list|)
operator|&&
name|x
operator|.
name|getGroups
argument_list|()
operator|.
name|contains
argument_list|(
name|g
argument_list|)
operator|&&
name|group
index|[
name|group
index|[
literal|0
index|]
operator|.
name|contains
argument_list|(
name|c
argument_list|)
condition|?
literal|0
else|:
name|g
operator|.
name|getType
argument_list|()
index|]
operator|.
name|add
argument_list|(
name|x
argument_list|)
condition|)
name|queue
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CurriculumCourse
name|c2
range|:
name|clasf
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|double
name|x2
init|=
name|model
operator|.
name|getCourse
argument_list|(
name|c2
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|getOriginalMaxSize
argument_list|()
decl_stmt|;
name|boolean
name|opt
init|=
name|group
index|[
literal|0
index|]
operator|.
name|contains
argument_list|(
name|c2
argument_list|)
decl_stmt|;
name|boolean
name|req
init|=
operator|!
name|opt
operator|&&
name|group
index|[
literal|1
index|]
operator|.
name|contains
argument_list|(
name|c2
argument_list|)
decl_stmt|;
name|double
name|defaultShare
init|=
operator|(
name|opt
condition|?
literal|0.0
else|:
name|req
condition|?
name|Math
operator|.
name|min
argument_list|(
name|x1
argument_list|,
name|x2
argument_list|)
else|:
name|c1
operator|.
name|getPercShare
argument_list|()
operator|*
name|c2
operator|.
name|getPercShare
argument_list|()
operator|*
name|nrStudents
operator|)
decl_stmt|;
if|if
condition|(
name|c1
operator|.
name|getUniqueId
argument_list|()
operator|>=
name|c2
operator|.
name|getUniqueId
argument_list|()
condition|)
continue|continue;
name|double
name|share
init|=
name|defaultShare
decl_stmt|;
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
name|s1
init|=
name|iStudentCourseRequests
operator|.
name|getDemands
argument_list|(
name|c1
operator|.
name|getCourse
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
name|s2
init|=
name|iStudentCourseRequests
operator|.
name|getDemands
argument_list|(
name|c2
operator|.
name|getCourse
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sharedStudents
init|=
literal|0
decl_stmt|,
name|registered
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|s1
operator|!=
literal|null
operator|&&
operator|!
name|s1
operator|.
name|isEmpty
argument_list|()
operator|&&
name|s2
operator|!=
literal|null
operator|&&
operator|!
name|s2
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|WeightedStudentId
name|s
range|:
name|s1
control|)
block|{
if|if
condition|(
name|s
operator|.
name|match
argument_list|(
name|clasf
argument_list|)
condition|)
block|{
name|registered
operator|++
expr_stmt|;
if|if
condition|(
name|s2
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
name|sharedStudents
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|registered
operator|==
literal|0
condition|)
block|{
name|share
operator|=
operator|(
literal|1.0
operator|-
name|w
operator|)
operator|*
name|defaultShare
expr_stmt|;
block|}
else|else
block|{
name|share
operator|=
name|w
operator|*
operator|(
name|x1
operator|/
name|registered
operator|)
operator|*
name|sharedStudents
operator|+
operator|(
literal|1.0
operator|-
name|w
operator|)
operator|*
name|defaultShare
expr_stmt|;
block|}
name|model
operator|.
name|setTargetShare
argument_list|(
name|c1
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|c2
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|share
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|WeightedCourseOffering
argument_list|>
name|getCourses
parameter_list|(
name|Long
name|studentId
parameter_list|)
block|{
name|Set
argument_list|<
name|WeightedCourseOffering
argument_list|>
name|courses
init|=
name|iStudentRequests
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|iIncludeOtherStudents
operator|&&
name|studentId
operator|>=
literal|0
operator|&&
name|courses
operator|==
literal|null
condition|)
return|return
name|iStudentCourseRequests
operator|.
name|getCourses
argument_list|(
name|studentId
argument_list|)
return|;
return|return
name|iStudentRequests
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
name|getDemands
parameter_list|(
name|CourseOffering
name|course
parameter_list|)
block|{
if|if
condition|(
name|iDemands
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|iStudentCourseRequests
operator|.
name|getDemands
argument_list|(
name|course
argument_list|)
return|;
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
name|demands
init|=
name|iDemands
operator|.
name|get
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|iIncludeOtherStudents
condition|)
return|return
name|demands
return|;
if|if
condition|(
name|demands
operator|==
literal|null
condition|)
block|{
name|demands
operator|=
operator|new
name|HashSet
argument_list|<
name|WeightedStudentId
argument_list|>
argument_list|()
expr_stmt|;
name|iDemands
operator|.
name|put
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|demands
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iCheckedCourses
operator|.
name|add
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|int
name|was
init|=
name|demands
operator|.
name|size
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|curricula
init|=
name|iLoadedCurricula
operator|.
name|get
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
name|other
init|=
name|iStudentCourseRequests
operator|.
name|getDemands
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|other
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|debug
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" has no students."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|curricula
operator|==
literal|null
operator|||
name|curricula
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|demands
operator|.
name|addAll
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|WeightedStudentId
name|student
range|:
name|other
control|)
block|{
if|if
condition|(
name|student
operator|.
name|getArea
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
comment|// ignore students w/o academic area
name|Set
argument_list|<
name|String
argument_list|>
name|majors
init|=
name|curricula
operator|.
name|get
argument_list|(
name|student
operator|.
name|getArea
argument_list|()
operator|+
literal|":"
operator|+
name|student
operator|.
name|getClasf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|majors
operator|!=
literal|null
operator|&&
name|majors
operator|.
name|contains
argument_list|(
literal|""
argument_list|)
condition|)
continue|continue;
comment|// all majors
if|if
condition|(
name|majors
operator|==
literal|null
operator|||
operator|(
name|student
operator|.
name|getMajor
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|majors
operator|.
name|contains
argument_list|(
name|student
operator|.
name|getMajor
argument_list|()
argument_list|)
operator|)
condition|)
name|demands
operator|.
name|add
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|demands
operator|.
name|size
argument_list|()
operator|>
name|was
condition|)
name|sLog
operator|.
name|debug
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" has "
operator|+
operator|(
name|demands
operator|.
name|size
argument_list|()
operator|-
name|was
operator|)
operator|+
literal|" other students (besides of the "
operator|+
name|was
operator|+
literal|" curriculum students)."
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|demands
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canUseStudentClassEnrollmentsAsSolution
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMakingUpStudents
parameter_list|()
block|{
return|return
literal|false
return|;
comment|// most students should be last-like students
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isWeightStudentsToFillUpOffering
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Double
name|getEnrollmentPriority
parameter_list|(
name|Long
name|studentId
parameter_list|,
name|Long
name|courseId
parameter_list|)
block|{
if|if
condition|(
name|studentId
operator|>=
literal|0
condition|)
return|return
name|iStudentCourseRequests
operator|.
name|getEnrollmentPriority
argument_list|(
name|studentId
argument_list|,
name|courseId
argument_list|)
return|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Double
argument_list|>
name|priorities
init|=
name|iEnrollmentPriorities
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
return|return
operator|(
name|priorities
operator|==
literal|null
condition|?
literal|null
else|:
name|priorities
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
operator|)
return|;
block|}
block|}
end_class

end_unit

