begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Reservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroupReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
operator|.
name|StudentCourseDemands
operator|.
name|NeedsStudentIdGenerator
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|StudentGroupCourseDemands
implements|implements
name|StudentCourseDemands
implements|,
name|NeedsStudentIdGenerator
block|{
specifier|protected
name|org
operator|.
name|hibernate
operator|.
name|Session
name|iHibSession
decl_stmt|;
specifier|protected
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
argument_list|>
name|iGroupDemands
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|WeightedCourseOffering
argument_list|>
argument_list|>
name|iGroupRequests
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|WeightedCourseOffering
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|Long
name|iSessionId
init|=
literal|null
decl_stmt|;
specifier|protected
name|IdGenerator
name|iLastStudentId
init|=
literal|null
decl_stmt|;
specifier|protected
name|boolean
name|iIncludeRealStudents
init|=
literal|true
decl_stmt|;
specifier|public
name|StudentGroupCourseDemands
parameter_list|(
name|DataProperties
name|properties
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMakingUpStudents
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canUseStudentClassEnrollmentsAsSolution
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isWeightStudentsToFillUpOffering
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Progress
name|progress
parameter_list|,
name|Session
name|session
parameter_list|,
name|Collection
argument_list|<
name|InstructionalOffering
argument_list|>
name|offerings
parameter_list|)
block|{
name|iHibSession
operator|=
name|hibSession
expr_stmt|;
name|iSessionId
operator|=
name|session
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
name|load
parameter_list|(
name|StudentGroup
name|g
parameter_list|)
block|{
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
name|demands
init|=
operator|new
name|HashSet
argument_list|<
name|WeightedStudentId
argument_list|>
argument_list|()
decl_stmt|;
name|iGroupDemands
operator|.
name|put
argument_list|(
name|g
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|demands
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|StudentGroupReservation
argument_list|>
name|reservations
init|=
operator|(
name|List
argument_list|<
name|StudentGroupReservation
argument_list|>
operator|)
name|iHibSession
operator|.
name|createQuery
argument_list|(
literal|"from StudentGroupReservation r where r.group.uniqueId = :groupId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"groupId"
argument_list|,
name|g
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|int
name|realStudents
init|=
name|g
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|madeupStudents
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|g
operator|.
name|getExpectedSize
argument_list|()
operator|!=
literal|null
operator|&&
literal|2
operator|*
name|realStudents
operator|<
name|g
operator|.
name|getExpectedSize
argument_list|()
condition|)
name|madeupStudents
operator|=
name|g
operator|.
name|getExpectedSize
argument_list|()
operator|-
name|realStudents
expr_stmt|;
if|if
condition|(
name|realStudents
operator|+
name|madeupStudents
operator|==
literal|0
operator|&&
operator|!
name|reservations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|StudentGroupReservation
name|r
range|:
name|reservations
control|)
if|if
condition|(
name|r
operator|.
name|getLimit
argument_list|()
operator|!=
literal|null
operator|&&
name|madeupStudents
operator|<
name|r
operator|.
name|getLimit
argument_list|()
condition|)
name|madeupStudents
operator|=
name|r
operator|.
name|getLimit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|realStudents
operator|+
name|madeupStudents
operator|>
literal|0
condition|)
block|{
name|float
name|weight
init|=
literal|1.0f
decl_stmt|;
if|if
condition|(
name|g
operator|.
name|getExpectedSize
argument_list|()
operator|!=
literal|null
condition|)
name|weight
operator|=
name|g
operator|.
name|getExpectedSize
argument_list|()
operator|.
name|floatValue
argument_list|()
operator|/
operator|(
name|realStudents
operator|+
name|madeupStudents
operator|)
expr_stmt|;
for|for
control|(
name|Student
name|s
range|:
name|g
operator|.
name|getStudents
argument_list|()
control|)
block|{
name|WeightedStudentId
name|ws
init|=
operator|new
name|WeightedStudentId
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|ws
operator|.
name|setWeight
argument_list|(
name|weight
argument_list|)
expr_stmt|;
name|demands
operator|.
name|add
argument_list|(
name|ws
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|madeupStudents
condition|;
name|i
operator|++
control|)
block|{
name|WeightedStudentId
name|ws
init|=
operator|new
name|WeightedStudentId
argument_list|(
operator|-
name|iLastStudentId
operator|.
name|newId
argument_list|()
argument_list|)
decl_stmt|;
name|ws
operator|.
name|setWeight
argument_list|(
name|weight
argument_list|)
expr_stmt|;
name|ws
operator|.
name|getGroups
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Group
argument_list|(
name|g
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|g
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|demands
operator|.
name|add
argument_list|(
name|ws
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|StudentGroupReservation
name|r
range|:
name|reservations
control|)
block|{
name|float
name|weight
init|=
literal|1.0f
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|getLimit
argument_list|()
operator|!=
literal|null
condition|)
name|weight
operator|=
name|r
operator|.
name|getLimit
argument_list|()
operator|.
name|floatValue
argument_list|()
operator|/
operator|(
name|realStudents
operator|+
name|madeupStudents
operator|)
expr_stmt|;
name|WeightedCourseOffering
name|w
init|=
operator|new
name|WeightedCourseOffering
argument_list|(
name|r
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
argument_list|,
name|weight
argument_list|)
decl_stmt|;
for|for
control|(
name|WeightedStudentId
name|s
range|:
name|demands
control|)
block|{
name|Set
argument_list|<
name|WeightedCourseOffering
argument_list|>
name|offerings
init|=
name|iGroupRequests
operator|.
name|get
argument_list|(
name|s
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offerings
operator|==
literal|null
condition|)
block|{
name|offerings
operator|=
operator|new
name|HashSet
argument_list|<
name|WeightedCourseOffering
argument_list|>
argument_list|()
expr_stmt|;
name|iGroupRequests
operator|.
name|put
argument_list|(
name|s
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|offerings
argument_list|)
expr_stmt|;
block|}
name|offerings
operator|.
name|add
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|demands
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
name|getDemands
parameter_list|(
name|CourseOffering
name|course
parameter_list|)
block|{
if|if
condition|(
operator|!
name|course
operator|.
name|isIsControl
argument_list|()
condition|)
return|return
literal|null
return|;
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
name|ret
init|=
operator|new
name|HashSet
argument_list|<
name|WeightedStudentId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Reservation
name|r
range|:
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getReservations
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|StudentGroupReservation
condition|)
block|{
name|StudentGroupReservation
name|gr
init|=
operator|(
name|StudentGroupReservation
operator|)
name|r
decl_stmt|;
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
name|demands
init|=
name|iGroupDemands
operator|.
name|get
argument_list|(
name|gr
operator|.
name|getGroup
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|demands
operator|==
literal|null
condition|)
name|demands
operator|=
name|load
argument_list|(
name|gr
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|getLimit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|float
name|weight
init|=
name|r
operator|.
name|getLimit
argument_list|()
operator|.
name|floatValue
argument_list|()
operator|/
name|demands
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|WeightedStudentId
name|student
range|:
name|demands
control|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|WeightedStudentId
argument_list|(
name|student
argument_list|,
name|weight
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|addAll
argument_list|(
name|demands
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|WeightedCourseOffering
argument_list|>
name|getCourses
parameter_list|(
name|Long
name|studentId
parameter_list|)
block|{
return|return
name|iGroupRequests
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Double
name|getEnrollmentPriority
parameter_list|(
name|Long
name|studentId
parameter_list|,
name|Long
name|courseId
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setStudentIdGenerator
parameter_list|(
name|IdGenerator
name|generator
parameter_list|)
block|{
name|iLastStudentId
operator|=
name|generator
expr_stmt|;
block|}
block|}
end_class

end_unit

