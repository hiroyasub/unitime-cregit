begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|EnrolledStudentCourseDemands
implements|implements
name|StudentCourseDemands
block|{
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
argument_list|>
name|iDemands
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|WeightedCourseOffering
argument_list|>
argument_list|>
name|iStudentRequests
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|WeightedCourseOffering
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|EnrolledStudentCourseDemands
parameter_list|(
name|DataProperties
name|properties
parameter_list|)
block|{
block|}
specifier|public
name|boolean
name|isMakingUpStudents
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|canUseStudentClassEnrollmentsAsSolution
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|isWeightStudentsToFillUpOffering
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Progress
name|progress
parameter_list|,
name|Session
name|session
parameter_list|,
name|Collection
argument_list|<
name|InstructionalOffering
argument_list|>
name|offerings
parameter_list|)
block|{
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select e.courseOffering, s.uniqueId, a.academicAreaAbbreviation, f.code, m.code from StudentClassEnrollment e "
operator|+
literal|"inner join e.student s left outer join s.academicAreaClassifications c left outer join s.posMajors m "
operator|+
literal|"left outer join c.academicArea a left outer join c.academicClassification f where "
operator|+
literal|"e.courseOffering.subjectArea.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|CourseOffering
name|course
init|=
operator|(
name|CourseOffering
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|sid
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|String
name|areaAbbv
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|String
name|clasfCode
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|3
index|]
decl_stmt|;
name|String
name|majorCode
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|4
index|]
decl_stmt|;
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
name|students
init|=
name|iDemands
operator|.
name|get
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|students
operator|==
literal|null
condition|)
block|{
name|students
operator|=
operator|new
name|HashSet
argument_list|<
name|WeightedStudentId
argument_list|>
argument_list|()
expr_stmt|;
name|iDemands
operator|.
name|put
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
name|WeightedStudentId
name|studentId
init|=
operator|new
name|WeightedStudentId
argument_list|(
name|sid
argument_list|)
decl_stmt|;
name|studentId
operator|.
name|setStats
argument_list|(
name|areaAbbv
argument_list|,
name|clasfCode
argument_list|,
name|majorCode
argument_list|)
expr_stmt|;
name|studentId
operator|.
name|setCurriculum
argument_list|(
name|areaAbbv
operator|==
literal|null
condition|?
literal|null
else|:
name|majorCode
operator|==
literal|null
condition|?
name|areaAbbv
else|:
name|areaAbbv
operator|+
literal|"/"
operator|+
name|majorCode
argument_list|)
expr_stmt|;
name|students
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|WeightedCourseOffering
argument_list|>
name|courses
init|=
name|iStudentRequests
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|courses
operator|==
literal|null
condition|)
block|{
name|courses
operator|=
operator|new
name|HashSet
argument_list|<
name|WeightedCourseOffering
argument_list|>
argument_list|()
expr_stmt|;
name|iStudentRequests
operator|.
name|put
argument_list|(
name|sid
argument_list|,
name|courses
argument_list|)
expr_stmt|;
block|}
name|courses
operator|.
name|add
argument_list|(
operator|new
name|WeightedCourseOffering
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
name|getDemands
parameter_list|(
name|CourseOffering
name|course
parameter_list|)
block|{
return|return
name|iDemands
operator|.
name|get
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Set
argument_list|<
name|WeightedCourseOffering
argument_list|>
name|getCourses
parameter_list|(
name|Long
name|studentId
parameter_list|)
block|{
return|return
name|iStudentRequests
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Double
name|getEnrollmentPriority
parameter_list|(
name|Long
name|studentId
parameter_list|,
name|Long
name|courseId
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

