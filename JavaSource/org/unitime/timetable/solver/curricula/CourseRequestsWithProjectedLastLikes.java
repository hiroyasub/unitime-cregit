begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CourseRequestsWithProjectedLastLikes
extends|extends
name|ProjectedStudentCourseDemands
block|{
specifier|private
name|StudentCourseRequests
name|iCouseRequests
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|iAreaClasfMajor2LastLike
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|iAreaClasfMajor2Real
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|CourseRequestsWithProjectedLastLikes
parameter_list|(
name|DataProperties
name|properties
parameter_list|)
block|{
name|super
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|iCouseRequests
operator|=
operator|new
name|StudentCourseRequests
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|Session
name|hibSession
parameter_list|,
name|Progress
name|progress
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
name|session
parameter_list|,
name|Collection
argument_list|<
name|InstructionalOffering
argument_list|>
name|offerings
parameter_list|)
block|{
name|iCouseRequests
operator|.
name|init
argument_list|(
name|hibSession
argument_list|,
name|progress
argument_list|,
name|session
argument_list|,
name|offerings
argument_list|)
expr_stmt|;
name|super
operator|.
name|init
argument_list|(
name|hibSession
argument_list|,
name|progress
argument_list|,
name|session
argument_list|,
name|offerings
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select a.academicAreaAbbreviation, m.code, f.code, count(distinct s) from LastLikeCourseDemand x inner join x.student s "
operator|+
literal|"inner join s.areaClasfMajors ac inner join ac.academicClassification f inner join ac.academicArea a "
operator|+
literal|"inner join ac.major m where x.subjectArea.session.uniqueId = :sessionId "
operator|+
literal|"group by a.academicAreaAbbreviation, m.code, f.code"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|String
name|area
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|String
name|major
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|String
name|clasf
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|int
name|students
init|=
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|3
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|clasfMajor2ll
init|=
name|iAreaClasfMajor2LastLike
operator|.
name|get
argument_list|(
name|area
argument_list|)
decl_stmt|;
if|if
condition|(
name|clasfMajor2ll
operator|==
literal|null
condition|)
block|{
name|clasfMajor2ll
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|iAreaClasfMajor2LastLike
operator|.
name|put
argument_list|(
name|area
argument_list|,
name|clasfMajor2ll
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|major2ll
init|=
name|clasfMajor2ll
operator|.
name|get
argument_list|(
name|clasf
argument_list|)
decl_stmt|;
if|if
condition|(
name|major2ll
operator|==
literal|null
condition|)
block|{
name|major2ll
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|clasfMajor2ll
operator|.
name|put
argument_list|(
name|clasf
argument_list|,
name|major2ll
argument_list|)
expr_stmt|;
block|}
name|major2ll
operator|.
name|put
argument_list|(
name|major
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select a.academicAreaAbbreviation, m.code, f.code, count(distinct s) from CourseRequest x inner join x.courseDemand.student s "
operator|+
literal|"inner join s.areaClasfMajors ac inner join ac.academicClassification f inner join ac.academicArea a "
operator|+
literal|"inner join ac.major m where s.session.uniqueId = :sessionId "
operator|+
literal|"group by a.academicAreaAbbreviation, m.code, f.code"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|String
name|area
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|String
name|major
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|String
name|clasf
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|int
name|students
init|=
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|3
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|clasfMajor2ll
init|=
name|iAreaClasfMajor2Real
operator|.
name|get
argument_list|(
name|area
argument_list|)
decl_stmt|;
if|if
condition|(
name|clasfMajor2ll
operator|==
literal|null
condition|)
block|{
name|clasfMajor2ll
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|iAreaClasfMajor2Real
operator|.
name|put
argument_list|(
name|area
argument_list|,
name|clasfMajor2ll
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|major2ll
init|=
name|clasfMajor2ll
operator|.
name|get
argument_list|(
name|clasf
argument_list|)
decl_stmt|;
if|if
condition|(
name|major2ll
operator|==
literal|null
condition|)
block|{
name|major2ll
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|clasfMajor2ll
operator|.
name|put
argument_list|(
name|clasf
argument_list|,
name|major2ll
argument_list|)
expr_stmt|;
block|}
name|major2ll
operator|.
name|put
argument_list|(
name|major
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getLastLikes
parameter_list|(
name|String
name|areaAbbv
parameter_list|,
name|String
name|clasfCode
parameter_list|,
name|String
name|majorCode
parameter_list|)
block|{
if|if
condition|(
name|iAreaClasfMajor2LastLike
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|clasf2major2ll
init|=
operator|(
name|areaAbbv
operator|==
literal|null
condition|?
literal|null
else|:
name|iAreaClasfMajor2LastLike
operator|.
name|get
argument_list|(
name|areaAbbv
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|clasf2major2ll
operator|==
literal|null
operator|||
name|clasf2major2ll
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|major2ll
init|=
operator|(
name|clasfCode
operator|==
literal|null
condition|?
literal|null
else|:
name|clasf2major2ll
operator|.
name|get
argument_list|(
name|clasfCode
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|major2ll
operator|==
literal|null
operator|||
name|major2ll
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
name|Integer
name|lastLike
init|=
operator|(
name|majorCode
operator|==
literal|null
condition|?
literal|null
else|:
name|major2ll
operator|.
name|get
argument_list|(
name|majorCode
argument_list|)
operator|)
decl_stmt|;
return|return
operator|(
name|lastLike
operator|==
literal|null
condition|?
literal|0
else|:
name|lastLike
operator|)
return|;
block|}
specifier|public
name|int
name|getCourseReqs
parameter_list|(
name|String
name|areaAbbv
parameter_list|,
name|String
name|clasfCode
parameter_list|,
name|String
name|majorCode
parameter_list|)
block|{
if|if
condition|(
name|iAreaClasfMajor2Real
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|clasf2major2ll
init|=
operator|(
name|areaAbbv
operator|==
literal|null
condition|?
literal|null
else|:
name|iAreaClasfMajor2Real
operator|.
name|get
argument_list|(
name|areaAbbv
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|clasf2major2ll
operator|==
literal|null
operator|||
name|clasf2major2ll
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|major2ll
init|=
operator|(
name|clasfCode
operator|==
literal|null
condition|?
literal|null
else|:
name|clasf2major2ll
operator|.
name|get
argument_list|(
name|clasfCode
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|major2ll
operator|==
literal|null
operator|||
name|major2ll
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
name|Integer
name|lastLike
init|=
operator|(
name|majorCode
operator|==
literal|null
condition|?
literal|null
else|:
name|major2ll
operator|.
name|get
argument_list|(
name|majorCode
argument_list|)
operator|)
decl_stmt|;
return|return
operator|(
name|lastLike
operator|==
literal|null
condition|?
literal|0
else|:
name|lastLike
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getProjection
parameter_list|(
name|String
name|areaAbbv
parameter_list|,
name|String
name|clasfCode
parameter_list|,
name|String
name|majorCode
parameter_list|)
block|{
name|int
name|lastLikes
init|=
name|getLastLikes
argument_list|(
name|areaAbbv
argument_list|,
name|clasfCode
argument_list|,
name|majorCode
argument_list|)
decl_stmt|;
name|float
name|estimate
init|=
name|lastLikes
operator|*
name|super
operator|.
name|getProjection
argument_list|(
name|areaAbbv
argument_list|,
name|clasfCode
argument_list|,
name|majorCode
argument_list|)
operator|-
name|getCourseReqs
argument_list|(
name|areaAbbv
argument_list|,
name|clasfCode
argument_list|,
name|majorCode
argument_list|)
decl_stmt|;
if|if
condition|(
name|estimate
operator|>=
literal|0
condition|)
return|return
name|estimate
operator|/
name|lastLikes
return|;
return|return
literal|0f
return|;
block|}
specifier|protected
parameter_list|<
name|A
parameter_list|>
name|Set
argument_list|<
name|A
argument_list|>
name|merge
parameter_list|(
name|Set
argument_list|<
name|A
argument_list|>
name|a
parameter_list|,
name|Set
argument_list|<
name|A
argument_list|>
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
literal|null
operator|||
name|a
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|b
return|;
if|if
condition|(
name|b
operator|==
literal|null
operator|||
name|b
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|a
return|;
name|Set
argument_list|<
name|A
argument_list|>
name|c
init|=
operator|new
name|HashSet
argument_list|<
name|A
argument_list|>
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|c
operator|.
name|addAll
argument_list|(
name|b
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
name|getDemands
parameter_list|(
name|CourseOffering
name|course
parameter_list|)
block|{
return|return
name|merge
argument_list|(
name|iCouseRequests
operator|.
name|getDemands
argument_list|(
name|course
argument_list|)
argument_list|,
name|super
operator|.
name|getDemands
argument_list|(
name|course
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Double
name|getEnrollmentPriority
parameter_list|(
name|Long
name|studentId
parameter_list|,
name|Long
name|courseId
parameter_list|)
block|{
name|Double
name|priority
init|=
name|iCouseRequests
operator|.
name|getEnrollmentPriority
argument_list|(
name|studentId
argument_list|,
name|courseId
argument_list|)
decl_stmt|;
if|if
condition|(
name|priority
operator|!=
literal|null
condition|)
return|return
name|priority
return|;
return|return
name|super
operator|.
name|getEnrollmentPriority
argument_list|(
name|studentId
argument_list|,
name|courseId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|WeightedCourseOffering
argument_list|>
name|getCourses
parameter_list|(
name|Long
name|studentId
parameter_list|)
block|{
return|return
name|merge
argument_list|(
name|iCouseRequests
operator|.
name|getCourses
argument_list|(
name|studentId
argument_list|)
argument_list|,
name|super
operator|.
name|getCourses
argument_list|(
name|studentId
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

