begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_class
specifier|public
class|class
name|ParallelInitialization
block|{
specifier|private
name|Lock
name|iLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|?
extends|extends
name|Task
argument_list|>
name|iTasks
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iNrThreads
decl_stmt|;
specifier|private
name|String
name|iPhase
decl_stmt|;
specifier|public
name|ParallelInitialization
parameter_list|(
name|String
name|phase
parameter_list|,
name|int
name|nrThreads
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|Task
argument_list|>
name|tasks
parameter_list|)
block|{
name|iPhase
operator|=
name|phase
expr_stmt|;
name|iNrThreads
operator|=
name|nrThreads
expr_stmt|;
name|iTasks
operator|=
name|tasks
expr_stmt|;
block|}
specifier|public
name|void
name|execute
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Progress
name|progress
parameter_list|)
block|{
name|progress
operator|.
name|setPhase
argument_list|(
name|iPhase
argument_list|,
name|iTasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iNrThreads
operator|<=
literal|1
condition|)
block|{
for|for
control|(
name|Task
name|task
range|:
name|iTasks
control|)
block|{
name|task
operator|.
name|setup
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|task
operator|.
name|execute
argument_list|()
expr_stmt|;
name|task
operator|.
name|teardown
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|progress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|Iterator
argument_list|<
name|?
extends|extends
name|Task
argument_list|>
name|iterator
init|=
name|iTasks
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Executor
argument_list|>
name|executors
init|=
operator|new
name|ArrayList
argument_list|<
name|Executor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iNrThreads
condition|;
name|i
operator|++
control|)
block|{
name|Executor
name|executor
init|=
operator|new
name|Executor
argument_list|(
name|i
argument_list|,
name|iterator
argument_list|,
name|progress
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|executor
operator|.
name|start
argument_list|()
expr_stmt|;
name|executors
operator|.
name|add
argument_list|(
name|executor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Executor
name|executor
range|:
name|executors
control|)
block|{
try|try
block|{
name|executor
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
block|}
for|for
control|(
name|Executor
name|executor
range|:
name|executors
control|)
if|if
condition|(
name|executor
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|ParallelInitializationException
argument_list|(
name|executor
operator|.
name|getException
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
interface|interface
name|Task
block|{
specifier|public
name|void
name|setup
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
function_decl|;
specifier|public
name|void
name|execute
parameter_list|()
function_decl|;
specifier|public
name|void
name|teardown
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
function_decl|;
block|}
specifier|public
class|class
name|Executor
extends|extends
name|Thread
block|{
specifier|private
name|Iterator
argument_list|<
name|?
extends|extends
name|Task
argument_list|>
name|iIterator
decl_stmt|;
specifier|private
name|Progress
name|iProgress
decl_stmt|;
specifier|private
name|org
operator|.
name|hibernate
operator|.
name|Session
name|iHibSession
decl_stmt|;
specifier|private
name|Exception
name|iException
decl_stmt|;
specifier|public
name|Executor
parameter_list|(
name|int
name|index
parameter_list|,
name|Iterator
argument_list|<
name|?
extends|extends
name|Task
argument_list|>
name|iterator
parameter_list|,
name|Progress
name|progress
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|setName
argument_list|(
literal|"Initialization-"
operator|+
operator|(
literal|1
operator|+
name|index
operator|)
argument_list|)
expr_stmt|;
name|iIterator
operator|=
name|iterator
expr_stmt|;
name|iProgress
operator|=
name|progress
expr_stmt|;
name|iHibSession
operator|=
name|hibSession
expr_stmt|;
block|}
specifier|public
name|Exception
name|getException
parameter_list|()
block|{
return|return
name|iException
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|Task
name|task
init|=
name|iIterator
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// setup task (one at a time)
name|iLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|task
operator|.
name|setup
argument_list|(
name|iHibSession
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|iLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// execute task (in parallel)
name|task
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|// tear down task (one at a time)
name|iLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|task
operator|.
name|teardown
argument_list|(
name|iHibSession
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|iLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iException
operator|=
name|e
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|ParallelInitializationException
extends|extends
name|RuntimeException
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|ParallelInitializationException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|super
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

