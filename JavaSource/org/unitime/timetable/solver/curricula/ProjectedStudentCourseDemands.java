begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumProjectionRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ProjectedStudentCourseDemands
extends|extends
name|LastLikeStudentCourseDemands
block|{
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
argument_list|>
name|iAreaClasfMajor2Proj
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Progress
name|iProgress
decl_stmt|;
specifier|public
name|ProjectedStudentCourseDemands
parameter_list|(
name|DataProperties
name|properties
parameter_list|)
block|{
name|super
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Progress
name|progress
parameter_list|,
name|Session
name|session
parameter_list|,
name|Set
argument_list|<
name|InstructionalOffering
argument_list|>
name|offerings
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|hibSession
argument_list|,
name|progress
argument_list|,
name|session
argument_list|,
name|offerings
argument_list|)
expr_stmt|;
name|iProgress
operator|=
name|progress
expr_stmt|;
name|progress
operator|.
name|setPhase
argument_list|(
literal|"Loading curriculum projections"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|CurriculumProjectionRule
name|rule
range|:
operator|(
name|List
argument_list|<
name|CurriculumProjectionRule
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select r from CurriculumProjectionRule r where r.academicArea.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|String
name|areaAbbv
init|=
name|rule
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
decl_stmt|;
name|String
name|majorCode
init|=
operator|(
name|rule
operator|.
name|getMajor
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|rule
operator|.
name|getMajor
argument_list|()
operator|.
name|getCode
argument_list|()
operator|)
decl_stmt|;
name|String
name|clasfCode
init|=
name|rule
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
decl_stmt|;
name|Float
name|projection
init|=
name|rule
operator|.
name|getProjection
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
name|clasf2major2proj
init|=
name|iAreaClasfMajor2Proj
operator|.
name|get
argument_list|(
name|areaAbbv
argument_list|)
decl_stmt|;
if|if
condition|(
name|clasf2major2proj
operator|==
literal|null
condition|)
block|{
name|clasf2major2proj
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|iAreaClasfMajor2Proj
operator|.
name|put
argument_list|(
name|areaAbbv
argument_list|,
name|clasf2major2proj
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|major2proj
init|=
name|clasf2major2proj
operator|.
name|get
argument_list|(
name|clasfCode
argument_list|)
decl_stmt|;
if|if
condition|(
name|major2proj
operator|==
literal|null
condition|)
block|{
name|major2proj
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|()
expr_stmt|;
name|clasf2major2proj
operator|.
name|put
argument_list|(
name|clasfCode
argument_list|,
name|major2proj
argument_list|)
expr_stmt|;
block|}
name|major2proj
operator|.
name|put
argument_list|(
name|majorCode
argument_list|,
name|projection
argument_list|)
expr_stmt|;
block|}
name|progress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
block|}
specifier|public
name|float
name|getProjection
parameter_list|(
name|String
name|areaAbbv
parameter_list|,
name|String
name|clasfCode
parameter_list|,
name|String
name|majorCode
parameter_list|)
block|{
if|if
condition|(
name|iAreaClasfMajor2Proj
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|1.0f
return|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
name|clasf2major2proj
init|=
operator|(
name|areaAbbv
operator|==
literal|null
condition|?
literal|null
else|:
name|iAreaClasfMajor2Proj
operator|.
name|get
argument_list|(
name|areaAbbv
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|clasf2major2proj
operator|==
literal|null
operator|||
name|clasf2major2proj
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|1.0f
return|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|major2proj
init|=
operator|(
name|clasfCode
operator|==
literal|null
condition|?
literal|null
else|:
name|clasf2major2proj
operator|.
name|get
argument_list|(
name|clasfCode
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|major2proj
operator|==
literal|null
condition|)
return|return
literal|1.0f
return|;
name|Float
name|projection
init|=
operator|(
name|majorCode
operator|==
literal|null
condition|?
literal|null
else|:
name|major2proj
operator|.
name|get
argument_list|(
name|majorCode
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|projection
operator|==
literal|null
condition|)
name|projection
operator|=
name|major2proj
operator|.
name|get
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
operator|(
name|projection
operator|==
literal|null
condition|?
literal|1.0f
else|:
name|projection
operator|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
argument_list|>
name|loadSubject
parameter_list|(
name|SubjectArea
name|subject
parameter_list|)
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
argument_list|>
name|demandsForCourseNbr
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|iDemandsForSubjectCourseNbr
operator|.
name|put
argument_list|(
name|subject
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|demandsForCourseNbr
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
index|[]
name|d
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|iHibSession
operator|.
name|createQuery
argument_list|(
literal|"select d.courseNbr, s.uniqueId, d.coursePermId, "
operator|+
literal|"a.academicAreaAbbreviation, f.code, m.code "
operator|+
literal|"from LastLikeCourseDemand d inner join d.student s left outer join s.academicAreaClassifications c left outer join s.posMajors m "
operator|+
literal|"left outer join c.academicArea a left outer join c.academicClassification f where "
operator|+
literal|"d.subjectArea.uniqueId=:subjectAreaId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"subjectAreaId"
argument_list|,
name|subject
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|String
name|courseNbr
init|=
operator|(
name|String
operator|)
name|d
index|[
literal|0
index|]
decl_stmt|;
name|String
name|coursePermId
init|=
operator|(
name|String
operator|)
name|d
index|[
literal|2
index|]
decl_stmt|;
name|String
name|areaAbbv
init|=
operator|(
name|String
operator|)
name|d
index|[
literal|3
index|]
decl_stmt|;
name|String
name|clasfCode
init|=
operator|(
name|String
operator|)
name|d
index|[
literal|4
index|]
decl_stmt|;
name|String
name|majorCode
init|=
operator|(
name|String
operator|)
name|d
index|[
literal|5
index|]
decl_stmt|;
name|WeightedStudentId
name|studentId
init|=
operator|new
name|WeightedStudentId
argument_list|(
operator|(
name|Long
operator|)
name|d
index|[
literal|1
index|]
argument_list|,
name|getProjection
argument_list|(
name|areaAbbv
argument_list|,
name|clasfCode
argument_list|,
name|majorCode
argument_list|)
argument_list|)
decl_stmt|;
name|studentId
operator|.
name|setStats
argument_list|(
name|areaAbbv
argument_list|,
name|clasfCode
argument_list|,
name|majorCode
argument_list|)
expr_stmt|;
name|studentId
operator|.
name|setCurriculum
argument_list|(
name|areaAbbv
operator|==
literal|null
condition|?
literal|null
else|:
name|majorCode
operator|==
literal|null
condition|?
name|areaAbbv
else|:
name|areaAbbv
operator|+
literal|"/"
operator|+
name|majorCode
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
name|studentIds
init|=
name|demandsForCourseNbr
operator|.
name|get
argument_list|(
name|courseNbr
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentIds
operator|==
literal|null
condition|)
block|{
name|studentIds
operator|=
operator|new
name|HashSet
argument_list|<
name|WeightedStudentId
argument_list|>
argument_list|()
expr_stmt|;
name|demandsForCourseNbr
operator|.
name|put
argument_list|(
name|courseNbr
argument_list|,
name|studentIds
argument_list|)
expr_stmt|;
block|}
name|studentIds
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
if|if
condition|(
name|coursePermId
operator|!=
literal|null
condition|)
block|{
name|studentIds
operator|=
name|iDemandsForPemId
operator|.
name|get
argument_list|(
name|coursePermId
argument_list|)
expr_stmt|;
if|if
condition|(
name|studentIds
operator|==
literal|null
condition|)
block|{
name|studentIds
operator|=
operator|new
name|HashSet
argument_list|<
name|WeightedStudentId
argument_list|>
argument_list|()
expr_stmt|;
name|iDemandsForPemId
operator|.
name|put
argument_list|(
name|coursePermId
argument_list|,
name|studentIds
argument_list|)
expr_stmt|;
block|}
name|studentIds
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|demandsForCourseNbr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"There are no projected demands for "
operator|+
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|", using last-like course demands instead."
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|loadSubject
argument_list|(
name|subject
argument_list|)
return|;
block|}
return|return
name|demandsForCourseNbr
return|;
block|}
specifier|public
name|Set
argument_list|<
name|WeightedCourseOffering
argument_list|>
name|getCourses
parameter_list|(
name|Long
name|studentId
parameter_list|)
block|{
if|if
condition|(
name|iStudentRequests
operator|==
literal|null
condition|)
block|{
name|iStudentRequests
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|WeightedCourseOffering
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|iHibSession
operator|.
name|createQuery
argument_list|(
literal|"select s.uniqueId, co, "
operator|+
literal|"a.academicAreaAbbreviation, f.code, m.code "
operator|+
literal|"from LastLikeCourseDemand x inner join x.student s left outer join s.academicAreaClassifications c left outer join s.posMajors m "
operator|+
literal|"left outer join c.academicArea a left outer join c.academicClassification f, CourseOffering co where "
operator|+
literal|"x.subjectArea.session.uniqueId = :sessionId and "
operator|+
literal|"co.subjectArea.uniqueId = x.subjectArea.uniqueId and "
operator|+
literal|"((x.coursePermId is not null and co.permId=x.coursePermId) or (x.coursePermId is null and co.courseNbr=x.courseNbr))"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|sid
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|CourseOffering
name|co
init|=
operator|(
name|CourseOffering
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|String
name|areaAbbv
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|String
name|clasfCode
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|3
index|]
decl_stmt|;
name|String
name|majorCode
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|4
index|]
decl_stmt|;
name|Set
argument_list|<
name|WeightedCourseOffering
argument_list|>
name|courses
init|=
name|iStudentRequests
operator|.
name|get
argument_list|(
name|sid
argument_list|)
decl_stmt|;
if|if
condition|(
name|courses
operator|==
literal|null
condition|)
block|{
name|courses
operator|=
operator|new
name|HashSet
argument_list|<
name|WeightedCourseOffering
argument_list|>
argument_list|()
expr_stmt|;
name|iStudentRequests
operator|.
name|put
argument_list|(
name|sid
argument_list|,
name|courses
argument_list|)
expr_stmt|;
block|}
name|courses
operator|.
name|add
argument_list|(
operator|new
name|WeightedCourseOffering
argument_list|(
name|co
argument_list|,
name|getProjection
argument_list|(
name|areaAbbv
argument_list|,
name|clasfCode
argument_list|,
name|majorCode
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|iStudentRequests
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
return|;
block|}
block|}
end_class

end_unit

