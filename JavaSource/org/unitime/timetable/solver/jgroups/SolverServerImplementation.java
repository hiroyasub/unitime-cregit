begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.5 (University Timetabling Application)  * Copyright (C) 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|jgroups
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|JChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|MembershipListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|MergeView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|Receiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|SuspectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|Message
operator|.
name|Flag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|View
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|blocks
operator|.
name|RequestOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|blocks
operator|.
name|ResponseMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|blocks
operator|.
name|RpcDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|blocks
operator|.
name|mux
operator|.
name|MuxRpcDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|blocks
operator|.
name|mux
operator|.
name|MuxUpHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|util
operator|.
name|Rsp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|util
operator|.
name|RspList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|jgroups
operator|.
name|JGroupsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|RoomAvailabilityInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|SolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ExamSolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|studentsct
operator|.
name|StudentSolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|RoomAvailability
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SolverServerImplementation
implements|implements
name|MessageListener
implements|,
name|MembershipListener
implements|,
name|SolverServer
implements|,
name|Receiver
block|{
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SolverServerImplementation
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|SolverServerImplementation
name|sInstance
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|RequestOptions
name|sFirstResponse
init|=
operator|new
name|RequestOptions
argument_list|(
name|ResponseMode
operator|.
name|GET_FIRST
argument_list|,
literal|0
argument_list|)
operator|.
name|setFlags
argument_list|(
name|Flag
operator|.
name|DONT_BUNDLE
argument_list|,
name|Flag
operator|.
name|OOB
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|RequestOptions
name|sAllResponses
init|=
operator|new
name|RequestOptions
argument_list|(
name|ResponseMode
operator|.
name|GET_ALL
argument_list|,
literal|0
argument_list|)
operator|.
name|setFlags
argument_list|(
name|Flag
operator|.
name|DONT_BUNDLE
argument_list|,
name|Flag
operator|.
name|OOB
argument_list|)
decl_stmt|;
specifier|private
name|JChannel
name|iChannel
decl_stmt|;
specifier|private
name|RpcDispatcher
name|iDispatcher
decl_stmt|;
specifier|private
name|CourseSolverContainerRemote
name|iCourseSolverContainer
decl_stmt|;
specifier|private
name|ExaminationSolverContainerRemote
name|iExamSolverContainer
decl_stmt|;
specifier|private
name|StudentSolverContainerRemote
name|iStudentSolverContainer
decl_stmt|;
specifier|private
name|OnlineStudentSchedulingContainerRemote
name|iOnlineStudentSchedulingContainer
decl_stmt|;
specifier|private
name|RemoteRoomAvailability
name|iRemoteRoomAvailability
decl_stmt|;
specifier|private
name|OnlineStudentSchedulingGenericUpdater
name|iUpdater
decl_stmt|;
specifier|protected
name|int
name|iUsageBase
init|=
literal|0
decl_stmt|;
specifier|protected
name|Date
name|iStartTime
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
specifier|protected
name|boolean
name|iActive
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|iLocal
init|=
literal|false
decl_stmt|;
specifier|public
name|SolverServerImplementation
parameter_list|(
name|boolean
name|local
parameter_list|,
name|JChannel
name|channel
parameter_list|)
block|{
name|iLocal
operator|=
name|local
expr_stmt|;
name|iChannel
operator|=
name|channel
expr_stmt|;
comment|// iChannel.setReceiver(this);
name|iDispatcher
operator|=
operator|new
name|MuxRpcDispatcher
argument_list|(
name|SCOPE_SERVER
argument_list|,
name|channel
argument_list|,
name|this
argument_list|,
name|this
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|iCourseSolverContainer
operator|=
operator|new
name|CourseSolverContainerRemote
argument_list|(
name|channel
argument_list|,
name|SCOPE_COURSE
argument_list|)
expr_stmt|;
name|iExamSolverContainer
operator|=
operator|new
name|ExaminationSolverContainerRemote
argument_list|(
name|channel
argument_list|,
name|SCOPE_EXAM
argument_list|)
expr_stmt|;
name|iStudentSolverContainer
operator|=
operator|new
name|StudentSolverContainerRemote
argument_list|(
name|channel
argument_list|,
name|SCOPE_STUDENT
argument_list|)
expr_stmt|;
name|iOnlineStudentSchedulingContainer
operator|=
operator|new
name|OnlineStudentSchedulingContainerRemote
argument_list|(
name|channel
argument_list|,
name|SCOPE_ONLINE
argument_list|)
expr_stmt|;
name|iRemoteRoomAvailability
operator|=
operator|new
name|RemoteRoomAvailability
argument_list|(
name|channel
argument_list|,
name|SCOPE_AVAILABILITY
argument_list|)
expr_stmt|;
name|iUpdater
operator|=
operator|new
name|OnlineStudentSchedulingGenericUpdater
argument_list|(
name|iDispatcher
argument_list|,
name|iOnlineStudentSchedulingContainer
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JChannel
name|getChannel
parameter_list|()
block|{
return|return
name|iChannel
return|;
block|}
specifier|public
name|RpcDispatcher
name|getDispatcher
parameter_list|()
block|{
return|return
name|iDispatcher
return|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|iCourseSolverContainer
operator|.
name|start
argument_list|()
expr_stmt|;
name|iExamSolverContainer
operator|.
name|start
argument_list|()
expr_stmt|;
name|iStudentSolverContainer
operator|.
name|start
argument_list|()
expr_stmt|;
name|iOnlineStudentSchedulingContainer
operator|.
name|start
argument_list|()
expr_stmt|;
name|iUpdater
operator|.
name|start
argument_list|()
expr_stmt|;
name|iActive
operator|=
literal|true
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Solver server is up and running."
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|iActive
operator|=
literal|false
expr_stmt|;
name|iCourseSolverContainer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|iExamSolverContainer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|iStudentSolverContainer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|iOnlineStudentSchedulingContainer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|iUpdater
operator|.
name|stopUpdating
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isLocal
parameter_list|()
block|{
return|return
name|iLocal
return|;
block|}
annotation|@
name|Override
specifier|public
name|Address
name|getAddress
parameter_list|()
block|{
return|return
name|iChannel
operator|.
name|getAddress
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Address
name|getLocalAddress
parameter_list|()
block|{
if|if
condition|(
name|isLocal
argument_list|()
condition|)
return|return
name|getAddress
argument_list|()
return|;
try|try
block|{
name|RspList
argument_list|<
name|Boolean
argument_list|>
name|ret
init|=
name|iDispatcher
operator|.
name|callRemoteMethods
argument_list|(
literal|null
argument_list|,
literal|"isLocal"
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|,
name|sAllResponses
argument_list|)
decl_stmt|;
for|for
control|(
name|Rsp
argument_list|<
name|Boolean
argument_list|>
name|local
range|:
name|ret
control|)
block|{
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|local
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
return|return
name|local
operator|.
name|getSender
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to retrieve local address: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|iChannel
operator|.
name|getAddressAsString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getUsage
parameter_list|()
block|{
name|int
name|ret
init|=
name|iUsageBase
decl_stmt|;
if|if
condition|(
name|isLocal
argument_list|()
condition|)
name|ret
operator|+=
literal|500
expr_stmt|;
name|ret
operator|+=
name|iCourseSolverContainer
operator|.
name|getUsage
argument_list|()
expr_stmt|;
name|ret
operator|+=
name|iExamSolverContainer
operator|.
name|getUsage
argument_list|()
expr_stmt|;
name|ret
operator|+=
name|iStudentSolverContainer
operator|.
name|getUsage
argument_list|()
expr_stmt|;
name|ret
operator|+=
name|iOnlineStudentSchedulingContainer
operator|.
name|getUsage
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUsageBase
parameter_list|(
name|int
name|base
parameter_list|)
block|{
name|iUsageBase
operator|=
name|base
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getAvailableMemory
parameter_list|()
block|{
return|return
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|maxMemory
argument_list|()
operator|-
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|totalMemory
argument_list|()
operator|+
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|freeMemory
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getMemoryLimit
parameter_list|()
block|{
return|return
literal|1024l
operator|*
literal|1024l
operator|*
name|Long
operator|.
name|parseLong
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
name|ApplicationProperty
operator|.
name|SolverMemoryLimit
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|getVersion
argument_list|()
return|;
block|}
specifier|public
name|Date
name|getStartTime
parameter_list|()
block|{
return|return
name|iStartTime
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isActive
parameter_list|()
block|{
return|return
name|iActive
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAvailable
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isActive
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getMemoryLimit
argument_list|()
operator|>
name|getAvailableMemory
argument_list|()
condition|)
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
return|return
name|getMemoryLimit
argument_list|()
operator|<=
name|getAvailableMemory
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|SolverServer
argument_list|>
name|getServers
parameter_list|(
name|boolean
name|onlyAvailable
parameter_list|)
block|{
name|List
argument_list|<
name|SolverServer
argument_list|>
name|servers
init|=
operator|new
name|ArrayList
argument_list|<
name|SolverServer
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|onlyAvailable
operator|||
name|isActive
argument_list|()
condition|)
name|servers
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
for|for
control|(
name|Address
name|address
range|:
name|iChannel
operator|.
name|getView
argument_list|()
operator|.
name|getMembers
argument_list|()
control|)
block|{
if|if
condition|(
name|address
operator|.
name|equals
argument_list|(
name|iChannel
operator|.
name|getAddress
argument_list|()
argument_list|)
condition|)
continue|continue;
name|SolverServer
name|server
init|=
name|crateServerProxy
argument_list|(
name|address
argument_list|)
decl_stmt|;
if|if
condition|(
name|onlyAvailable
operator|&&
operator|!
name|server
operator|.
name|isAvailable
argument_list|()
condition|)
continue|continue;
name|servers
operator|.
name|add
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
return|return
name|servers
return|;
block|}
specifier|public
name|SolverServer
name|crateServerProxy
parameter_list|(
name|Address
name|address
parameter_list|)
block|{
name|ServerInvocationHandler
name|handler
init|=
operator|new
name|ServerInvocationHandler
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|SolverServer
name|px
init|=
operator|(
name|SolverServer
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|SolverServerImplementation
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|SolverServer
operator|.
name|class
block|}
argument_list|,
name|handler
argument_list|)
decl_stmt|;
return|return
name|px
return|;
block|}
annotation|@
name|Override
specifier|public
name|SolverContainer
argument_list|<
name|SolverProxy
argument_list|>
name|getCourseSolverContainer
parameter_list|()
block|{
return|return
name|iCourseSolverContainer
return|;
block|}
specifier|public
name|SolverContainer
argument_list|<
name|SolverProxy
argument_list|>
name|createCourseSolverContainerProxy
parameter_list|(
name|Address
name|address
parameter_list|)
block|{
name|ContainerInvocationHandler
argument_list|<
name|RemoteSolverContainer
argument_list|<
name|SolverProxy
argument_list|>
argument_list|>
name|handler
init|=
operator|new
name|ContainerInvocationHandler
argument_list|<
name|RemoteSolverContainer
argument_list|<
name|SolverProxy
argument_list|>
argument_list|>
argument_list|(
name|address
argument_list|,
name|iCourseSolverContainer
argument_list|)
decl_stmt|;
name|SolverContainer
argument_list|<
name|SolverProxy
argument_list|>
name|px
init|=
operator|(
name|SolverContainer
argument_list|<
name|SolverProxy
argument_list|>
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|SolverServerImplementation
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|SolverContainer
operator|.
name|class
block|}
argument_list|,
name|handler
argument_list|)
decl_stmt|;
return|return
name|px
return|;
block|}
annotation|@
name|Override
specifier|public
name|SolverContainer
argument_list|<
name|ExamSolverProxy
argument_list|>
name|getExamSolverContainer
parameter_list|()
block|{
return|return
name|iExamSolverContainer
return|;
block|}
specifier|public
name|SolverContainer
argument_list|<
name|ExamSolverProxy
argument_list|>
name|createExamSolverContainerProxy
parameter_list|(
name|Address
name|address
parameter_list|)
block|{
name|ContainerInvocationHandler
argument_list|<
name|RemoteSolverContainer
argument_list|<
name|ExamSolverProxy
argument_list|>
argument_list|>
name|handler
init|=
operator|new
name|ContainerInvocationHandler
argument_list|<
name|RemoteSolverContainer
argument_list|<
name|ExamSolverProxy
argument_list|>
argument_list|>
argument_list|(
name|address
argument_list|,
name|iExamSolverContainer
argument_list|)
decl_stmt|;
name|SolverContainer
argument_list|<
name|ExamSolverProxy
argument_list|>
name|px
init|=
operator|(
name|SolverContainer
argument_list|<
name|ExamSolverProxy
argument_list|>
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|SolverServerImplementation
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|SolverContainer
operator|.
name|class
block|}
argument_list|,
name|handler
argument_list|)
decl_stmt|;
return|return
name|px
return|;
block|}
annotation|@
name|Override
specifier|public
name|SolverContainer
argument_list|<
name|StudentSolverProxy
argument_list|>
name|getStudentSolverContainer
parameter_list|()
block|{
return|return
name|iStudentSolverContainer
return|;
block|}
specifier|public
name|SolverContainer
argument_list|<
name|StudentSolverProxy
argument_list|>
name|createStudentSolverContainerProxy
parameter_list|(
name|Address
name|address
parameter_list|)
block|{
name|ContainerInvocationHandler
argument_list|<
name|RemoteSolverContainer
argument_list|<
name|StudentSolverProxy
argument_list|>
argument_list|>
name|handler
init|=
operator|new
name|ContainerInvocationHandler
argument_list|<
name|RemoteSolverContainer
argument_list|<
name|StudentSolverProxy
argument_list|>
argument_list|>
argument_list|(
name|address
argument_list|,
name|iStudentSolverContainer
argument_list|)
decl_stmt|;
name|SolverContainer
argument_list|<
name|StudentSolverProxy
argument_list|>
name|px
init|=
operator|(
name|SolverContainer
argument_list|<
name|StudentSolverProxy
argument_list|>
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|SolverServerImplementation
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|SolverContainer
operator|.
name|class
block|}
argument_list|,
name|handler
argument_list|)
decl_stmt|;
return|return
name|px
return|;
block|}
annotation|@
name|Override
specifier|public
name|SolverContainer
argument_list|<
name|OnlineSectioningServer
argument_list|>
name|getOnlineStudentSchedulingContainer
parameter_list|()
block|{
return|return
name|iOnlineStudentSchedulingContainer
return|;
block|}
specifier|public
name|SolverContainer
argument_list|<
name|OnlineSectioningServer
argument_list|>
name|createOnlineStudentSchedulingContainerProxy
parameter_list|(
name|Address
name|address
parameter_list|)
block|{
name|ContainerInvocationHandler
argument_list|<
name|RemoteSolverContainer
argument_list|<
name|OnlineSectioningServer
argument_list|>
argument_list|>
name|handler
init|=
operator|new
name|ContainerInvocationHandler
argument_list|<
name|RemoteSolverContainer
argument_list|<
name|OnlineSectioningServer
argument_list|>
argument_list|>
argument_list|(
name|address
argument_list|,
name|iOnlineStudentSchedulingContainer
argument_list|)
decl_stmt|;
name|SolverContainer
argument_list|<
name|OnlineSectioningServer
argument_list|>
name|px
init|=
operator|(
name|SolverContainer
argument_list|<
name|OnlineSectioningServer
argument_list|>
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|SolverServerImplementation
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|SolverContainer
operator|.
name|class
block|}
argument_list|,
name|handler
argument_list|)
decl_stmt|;
return|return
name|px
return|;
block|}
annotation|@
name|Override
specifier|public
name|RoomAvailabilityInterface
name|getRoomAvailability
parameter_list|()
block|{
if|if
condition|(
name|isLocal
argument_list|()
condition|)
return|return
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
return|;
name|Address
name|local
init|=
name|getLocalAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|local
operator|!=
literal|null
condition|)
return|return
operator|(
name|RoomAvailabilityInterface
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|SolverServerImplementation
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|RoomAvailabilityInterface
operator|.
name|class
block|}
argument_list|,
operator|new
name|RoomAvailabilityInvocationHandler
argument_list|(
name|local
argument_list|,
name|iRemoteRoomAvailability
argument_list|)
argument_list|)
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|refreshCourseSolutionLocal
parameter_list|(
name|Long
modifier|...
name|solutionIds
parameter_list|)
block|{
try|try
block|{
for|for
control|(
name|Long
name|solutionId
range|:
name|solutionIds
control|)
name|Solution
operator|.
name|refreshSolution
argument_list|(
name|solutionId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|_RootDAO
operator|.
name|closeCurrentThreadSessions
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|refreshCourseSolution
parameter_list|(
name|Long
modifier|...
name|solutionIds
parameter_list|)
block|{
if|if
condition|(
name|isLocal
argument_list|()
condition|)
block|{
name|refreshCourseSolutionLocal
argument_list|(
name|solutionIds
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|Address
name|local
init|=
name|getLocalAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|local
operator|!=
literal|null
condition|)
name|iDispatcher
operator|.
name|callRemoteMethod
argument_list|(
name|local
argument_list|,
literal|"refreshCourseSolutionLocal"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|solutionIds
block|}
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Long
index|[]
operator|.
expr|class
block|}
argument_list|,
name|sFirstResponse
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to refresh solution: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|refreshExamSolutionLocal
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Long
name|examTypeId
parameter_list|)
block|{
try|try
block|{
name|ExamType
operator|.
name|refreshSolution
argument_list|(
name|sessionId
argument_list|,
name|examTypeId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|_RootDAO
operator|.
name|closeCurrentThreadSessions
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|refreshExamSolution
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Long
name|examTypeId
parameter_list|)
block|{
if|if
condition|(
name|isLocal
argument_list|()
condition|)
block|{
name|refreshExamSolutionLocal
argument_list|(
name|sessionId
argument_list|,
name|examTypeId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|Address
name|local
init|=
name|getLocalAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|local
operator|!=
literal|null
condition|)
name|iDispatcher
operator|.
name|callRemoteMethod
argument_list|(
name|local
argument_list|,
literal|"refreshExamSolution"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|sessionId
block|,
name|examTypeId
block|}
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Long
operator|.
name|class
block|,
name|Long
operator|.
name|class
block|}
argument_list|,
name|sFirstResponse
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to refresh solution: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|RoomAvailabilityInvocationHandler
implements|implements
name|InvocationHandler
block|{
specifier|private
name|Address
name|iAddress
decl_stmt|;
specifier|private
name|RemoteRoomAvailability
name|iAvailability
decl_stmt|;
specifier|private
name|RoomAvailabilityInvocationHandler
parameter_list|(
name|Address
name|address
parameter_list|,
name|RemoteRoomAvailability
name|availability
parameter_list|)
block|{
name|iAddress
operator|=
name|address
expr_stmt|;
name|iAvailability
operator|=
name|availability
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
name|iAvailability
operator|.
name|dispatch
argument_list|(
name|iAddress
argument_list|,
name|method
argument_list|,
name|args
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|viewAccepted
parameter_list|(
name|View
name|view
parameter_list|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"viewAccepted("
operator|+
name|view
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|view
operator|instanceof
name|MergeView
condition|)
block|{
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|suspect
parameter_list|(
name|Address
name|suspected_mbr
parameter_list|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"suspect("
operator|+
name|suspected_mbr
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|block
parameter_list|()
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"block"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unblock
parameter_list|()
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"unblock"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|receive
parameter_list|(
name|Message
name|msg
parameter_list|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"receive("
operator|+
name|msg
operator|+
literal|", "
operator|+
name|msg
operator|.
name|getObject
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|getState
parameter_list|(
name|OutputStream
name|output
parameter_list|)
throws|throws
name|Exception
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|setState
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|Exception
block|{
block|}
specifier|public
class|class
name|ServerInvocationHandler
implements|implements
name|InvocationHandler
block|{
specifier|private
name|Address
name|iAddress
decl_stmt|;
specifier|public
name|ServerInvocationHandler
parameter_list|(
name|Address
name|address
parameter_list|)
block|{
name|iAddress
operator|=
name|address
expr_stmt|;
block|}
specifier|public
name|SolverContainer
argument_list|<
name|SolverProxy
argument_list|>
name|getCourseSolverContainer
parameter_list|()
block|{
return|return
name|createCourseSolverContainerProxy
argument_list|(
name|iAddress
argument_list|)
return|;
block|}
specifier|public
name|SolverContainer
argument_list|<
name|ExamSolverProxy
argument_list|>
name|getExamSolverContainer
parameter_list|()
block|{
return|return
name|createExamSolverContainerProxy
argument_list|(
name|iAddress
argument_list|)
return|;
block|}
specifier|public
name|SolverContainer
argument_list|<
name|StudentSolverProxy
argument_list|>
name|getStudentSolverContainer
parameter_list|()
block|{
return|return
name|createStudentSolverContainerProxy
argument_list|(
name|iAddress
argument_list|)
return|;
block|}
specifier|public
name|SolverContainer
argument_list|<
name|OnlineSectioningServer
argument_list|>
name|getOnlineStudentSchedulingContainer
parameter_list|()
block|{
return|return
name|createOnlineStudentSchedulingContainerProxy
argument_list|(
name|iAddress
argument_list|)
return|;
block|}
specifier|public
name|Address
name|getAddress
parameter_list|()
block|{
return|return
name|iAddress
return|;
block|}
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|iAddress
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isActive
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|Boolean
name|active
init|=
name|iDispatcher
operator|.
name|callRemoteMethod
argument_list|(
name|iAddress
argument_list|,
literal|"isActive"
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|,
operator|new
name|RequestOptions
argument_list|(
name|ResponseMode
operator|.
name|GET_FIRST
argument_list|,
literal|0
argument_list|)
operator|.
name|setFlags
argument_list|(
name|Flag
operator|.
name|DONT_BUNDLE
argument_list|,
name|Flag
operator|.
name|OOB
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|active
return|;
block|}
catch|catch
parameter_list|(
name|SuspectedException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
try|try
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|method
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
operator|.
name|invoke
argument_list|(
name|this
argument_list|,
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
block|}
return|return
name|iDispatcher
operator|.
name|callRemoteMethod
argument_list|(
name|iAddress
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|args
argument_list|,
name|method
operator|.
name|getParameterTypes
argument_list|()
argument_list|,
operator|new
name|RequestOptions
argument_list|(
name|ResponseMode
operator|.
name|GET_FIRST
argument_list|,
literal|0
argument_list|)
operator|.
name|setFlags
argument_list|(
name|Flag
operator|.
name|DONT_BUNDLE
argument_list|,
name|Flag
operator|.
name|OOB
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|public
class|class
name|ContainerInvocationHandler
parameter_list|<
name|T
extends|extends
name|RemoteSolverContainer
parameter_list|>
implements|implements
name|InvocationHandler
block|{
specifier|private
name|Address
name|iAddress
decl_stmt|;
specifier|private
name|T
name|iContainer
decl_stmt|;
specifier|private
name|ContainerInvocationHandler
parameter_list|(
name|Address
name|address
parameter_list|,
name|T
name|container
parameter_list|)
block|{
name|iAddress
operator|=
name|address
expr_stmt|;
name|iContainer
operator|=
name|container
expr_stmt|;
block|}
specifier|public
name|Object
name|createSolver
parameter_list|(
name|String
name|user
parameter_list|,
name|DataProperties
name|config
parameter_list|)
throws|throws
name|Throwable
block|{
name|iContainer
operator|.
name|getDispatcher
argument_list|()
operator|.
name|callRemoteMethod
argument_list|(
name|iAddress
argument_list|,
literal|"createRemoteSolver"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|user
block|,
name|config
block|,
name|iChannel
operator|.
name|getAddress
argument_list|()
block|}
argument_list|,
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|,
name|DataProperties
operator|.
name|class
block|,
name|Address
operator|.
name|class
block|}
argument_list|,
name|sFirstResponse
argument_list|)
expr_stmt|;
return|return
name|iContainer
operator|.
name|createProxy
argument_list|(
name|iAddress
argument_list|,
operator|(
name|String
operator|)
name|user
argument_list|)
return|;
block|}
specifier|public
name|Address
name|getAddress
parameter_list|()
block|{
return|return
name|iAddress
return|;
block|}
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|iAddress
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|Object
name|getSolver
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|Exception
block|{
name|Boolean
name|ret
init|=
name|iContainer
operator|.
name|getDispatcher
argument_list|()
operator|.
name|callRemoteMethod
argument_list|(
name|iAddress
argument_list|,
literal|"hasSolver"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|user
block|}
argument_list|,
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|}
argument_list|,
name|sFirstResponse
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
condition|)
return|return
name|iContainer
operator|.
name|createProxy
argument_list|(
name|iAddress
argument_list|,
name|user
argument_list|)
return|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
try|try
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|method
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
operator|.
name|invoke
argument_list|(
name|this
argument_list|,
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
block|}
return|return
name|iContainer
operator|.
name|getDispatcher
argument_list|()
operator|.
name|callRemoteMethod
argument_list|(
name|iAddress
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|args
argument_list|,
name|method
operator|.
name|getParameterTypes
argument_list|()
argument_list|,
name|sFirstResponse
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|iActive
operator|=
literal|false
expr_stmt|;
operator|new
name|ShutdownThread
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|SolverServer
name|getInstance
parameter_list|()
block|{
return|return
name|sInstance
return|;
block|}
specifier|private
class|class
name|ShutdownThread
extends|extends
name|Thread
block|{
name|ShutdownThread
parameter_list|()
block|{
name|setName
argument_list|(
literal|"SolverServer:Shutdown"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
try|try
block|{
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"Server is going down..."
argument_list|)
expr_stmt|;
name|SolverServerImplementation
operator|.
name|this
operator|.
name|stop
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Disconnecting from the channel..."
argument_list|)
expr_stmt|;
name|getChannel
argument_list|()
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"This is the end."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to stop the server: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.data.dir"
argument_list|)
operator|==
literal|null
condition|)
name|ApplicationProperties
operator|.
name|getDefaultProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"unitime.data.dir"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"catalina.base"
argument_list|)
operator|==
literal|null
condition|)
name|ApplicationProperties
operator|.
name|getDefaultProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"catalina.base"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|configureLogging
argument_list|()
expr_stmt|;
name|HibernateUtil
operator|.
name|configureHibernate
argument_list|(
name|ApplicationProperties
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|configureLogging
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"unitime.solver.log"
argument_list|,
name|ApplicationProperties
operator|.
name|getDataFolder
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"logs"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|JChannel
name|channel
init|=
operator|new
name|JChannel
argument_list|(
name|JGroupsUtils
operator|.
name|getConfigurator
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.solver.jgroups.config"
argument_list|,
literal|"solver-jgroups-tcp.xml"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|channel
operator|.
name|setUpHandler
argument_list|(
operator|new
name|MuxUpHandler
argument_list|()
argument_list|)
expr_stmt|;
name|sInstance
operator|=
operator|new
name|SolverServerImplementation
argument_list|(
literal|false
argument_list|,
name|channel
argument_list|)
expr_stmt|;
name|channel
operator|.
name|connect
argument_list|(
literal|"UniTime:rpc"
argument_list|)
expr_stmt|;
name|channel
operator|.
name|getState
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sInstance
operator|.
name|start
argument_list|()
expr_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|sInstance
operator|.
name|iActive
operator|=
literal|false
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Server is going down..."
argument_list|)
expr_stmt|;
name|sInstance
operator|.
name|stop
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Disconnecting from the channel..."
argument_list|)
expr_stmt|;
name|channel
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Closing the channel..."
argument_list|)
expr_stmt|;
name|channel
operator|.
name|close
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Closing hibernate..."
argument_list|)
expr_stmt|;
name|HibernateUtil
operator|.
name|closeHibernate
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"This is the end."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to stop the server: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to start the server: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCoordinator
parameter_list|()
block|{
return|return
operator|(
name|iUpdater
operator|!=
literal|null
operator|&&
name|iUpdater
operator|.
name|isCoordinator
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|reset
parameter_list|()
block|{
name|sLog
operator|.
name|info
argument_list|(
name|iOnlineStudentSchedulingContainer
operator|.
name|getLockService
argument_list|()
operator|.
name|printLocks
argument_list|()
argument_list|)
expr_stmt|;
comment|// For each of my online student sectioning solvers
for|for
control|(
name|String
name|session
range|:
name|iOnlineStudentSchedulingContainer
operator|.
name|getSolvers
argument_list|()
control|)
block|{
name|OnlineSectioningServer
name|server
init|=
name|iOnlineStudentSchedulingContainer
operator|.
name|getSolver
argument_list|(
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
continue|continue;
comment|// mark server for reload and release the lock
if|if
condition|(
name|server
operator|.
name|isMaster
argument_list|()
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Marking "
operator|+
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|+
literal|" for reload"
argument_list|)
expr_stmt|;
name|server
operator|.
name|setProperty
argument_list|(
literal|"ReadyToServe"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|server
operator|.
name|setProperty
argument_list|(
literal|"ReloadIsNeeded"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Releasing master lock for "
operator|+
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|server
operator|.
name|releaseMasterLockIfHeld
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

