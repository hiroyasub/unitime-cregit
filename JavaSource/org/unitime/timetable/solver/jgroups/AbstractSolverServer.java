begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|jgroups
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|SessionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|RoomAvailabilityInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TeachingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|RoomAvailability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|queue
operator|.
name|LocalQueueProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|queue
operator|.
name|QueueProcessor
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractSolverServer
implements|implements
name|SolverServer
block|{
specifier|protected
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AbstractSolverServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|int
name|iUsageBase
init|=
literal|0
decl_stmt|;
specifier|protected
name|Date
name|iStartTime
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
specifier|protected
name|boolean
name|iActive
init|=
literal|false
decl_stmt|;
specifier|public
name|AbstractSolverServer
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
block|{
name|iActive
operator|=
literal|true
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Solver server is up and running."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Solver server is going down..."
argument_list|)
expr_stmt|;
name|iActive
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isLocal
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCoordinator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isLocalCoordinator
parameter_list|()
block|{
return|return
name|isLocal
argument_list|()
operator|&&
name|isCoordinator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Address
name|getAddress
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Address
name|getLocalAddress
parameter_list|()
block|{
return|return
name|getAddress
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
literal|"local"
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getUsage
parameter_list|()
block|{
name|int
name|ret
init|=
name|iUsageBase
decl_stmt|;
if|if
condition|(
name|isLocal
argument_list|()
condition|)
name|ret
operator|+=
literal|500
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUsageBase
parameter_list|(
name|int
name|base
parameter_list|)
block|{
name|iUsageBase
operator|=
name|base
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getAvailableMemory
parameter_list|()
block|{
return|return
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|maxMemory
argument_list|()
operator|-
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|totalMemory
argument_list|()
operator|+
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|freeMemory
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getAvailableProcessors
parameter_list|()
block|{
return|return
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getMemoryLimit
parameter_list|()
block|{
return|return
literal|1024l
operator|*
literal|1024l
operator|*
name|Long
operator|.
name|parseLong
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
name|ApplicationProperty
operator|.
name|SolverMemoryLimit
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|getVersion
argument_list|()
return|;
block|}
specifier|public
name|Date
name|getStartTime
parameter_list|()
block|{
return|return
name|iStartTime
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isActive
parameter_list|()
block|{
return|return
name|iActive
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAvailable
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isActive
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getMemoryLimit
argument_list|()
operator|>
name|getAvailableMemory
argument_list|()
condition|)
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
return|return
name|getMemoryLimit
argument_list|()
operator|<=
name|getAvailableMemory
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RoomAvailabilityInterface
name|getRoomAvailability
parameter_list|()
block|{
return|return
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|refreshCourseSolution
parameter_list|(
name|Long
modifier|...
name|solutionIds
parameter_list|)
block|{
try|try
block|{
for|for
control|(
name|Long
name|solutionId
range|:
name|solutionIds
control|)
name|Solution
operator|.
name|refreshSolution
argument_list|(
name|solutionId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|_RootDAO
operator|.
name|closeCurrentThreadSessions
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|refreshExamSolution
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Long
name|examTypeId
parameter_list|)
block|{
try|try
block|{
name|ExamType
operator|.
name|refreshSolution
argument_list|(
name|sessionId
argument_list|,
name|examTypeId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|_RootDAO
operator|.
name|closeCurrentThreadSessions
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|refreshInstructorSolution
parameter_list|(
name|Collection
argument_list|<
name|Long
argument_list|>
name|solverGroupIds
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|new
name|_RootDAO
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
try|try
block|{
name|SessionFactory
name|hibSessionFactory
init|=
name|hibSession
operator|.
name|getSessionFactory
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|classIds
init|=
operator|(
name|List
argument_list|<
name|Long
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct c.uniqueId from Class_ c inner join c.teachingRequests r where c.controllingDept.solverGroup.uniqueId in :solverGroupId and c.cancelled = false"
argument_list|)
operator|.
name|setParameterList
argument_list|(
literal|"solverGroupId"
argument_list|,
name|solverGroupIds
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|classId
range|:
name|classIds
control|)
block|{
name|hibSessionFactory
operator|.
name|getCache
argument_list|()
operator|.
name|evictEntity
argument_list|(
name|Class_
operator|.
name|class
argument_list|,
name|classId
argument_list|)
expr_stmt|;
name|hibSessionFactory
operator|.
name|getCache
argument_list|()
operator|.
name|evictCollection
argument_list|(
name|Class_
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".classInstructors"
argument_list|,
name|classId
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Long
argument_list|>
name|instructorIds
init|=
operator|(
name|List
argument_list|<
name|Long
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select i.uniqueId from DepartmentalInstructor i, SolverGroup g inner join g.departments d where "
operator|+
literal|"g.uniqueId in :solverGroupId and i.department = d"
argument_list|)
operator|.
name|setParameterList
argument_list|(
literal|"solverGroupId"
argument_list|,
name|solverGroupIds
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|instructorId
range|:
name|instructorIds
control|)
block|{
name|hibSessionFactory
operator|.
name|getCache
argument_list|()
operator|.
name|evictEntity
argument_list|(
name|DepartmentalInstructor
operator|.
name|class
argument_list|,
name|instructorId
argument_list|)
expr_stmt|;
name|hibSessionFactory
operator|.
name|getCache
argument_list|()
operator|.
name|evictCollection
argument_list|(
name|DepartmentalInstructor
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".classes"
argument_list|,
name|instructorId
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Long
argument_list|>
name|requestIds
init|=
operator|(
name|List
argument_list|<
name|Long
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct r.uniqueId from Class_ c inner join c.teachingRequests r where c.controllingDept.solverGroup.uniqueId in :solverGroupId and c.cancelled = false"
argument_list|)
operator|.
name|setParameterList
argument_list|(
literal|"solverGroupId"
argument_list|,
name|solverGroupIds
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|requestId
range|:
name|requestIds
control|)
block|{
name|hibSessionFactory
operator|.
name|getCache
argument_list|()
operator|.
name|evictEntity
argument_list|(
name|TeachingRequest
operator|.
name|class
argument_list|,
name|requestId
argument_list|)
expr_stmt|;
name|hibSessionFactory
operator|.
name|getCache
argument_list|()
operator|.
name|evictCollection
argument_list|(
name|TeachingRequest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".assignedInstructors"
argument_list|,
name|requestId
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Long
argument_list|>
name|offeringIds
init|=
operator|(
name|List
argument_list|<
name|Long
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct c.schedulingSubpart.instrOfferingConfig.instructionalOffering.uniqueId from "
operator|+
literal|"Class_ c inner join c.teachingRequests r where c.controllingDept.solverGroup.uniqueId in :solverGroupId and c.cancelled = false"
argument_list|)
operator|.
name|setParameterList
argument_list|(
literal|"solverGroupId"
argument_list|,
name|solverGroupIds
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|offeringId
range|:
name|offeringIds
control|)
block|{
name|hibSessionFactory
operator|.
name|getCache
argument_list|()
operator|.
name|evictEntity
argument_list|(
name|InstructionalOffering
operator|.
name|class
argument_list|,
name|offeringId
argument_list|)
expr_stmt|;
name|hibSessionFactory
operator|.
name|getCache
argument_list|()
operator|.
name|evictCollection
argument_list|(
name|InstructionalOffering
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".offeringCoordinators"
argument_list|,
name|offeringId
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setApplicationProperty
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Set "
operator|+
name|key
operator|+
literal|" to "
operator|+
name|value
operator|+
operator|(
name|sessionId
operator|==
literal|null
condition|?
literal|""
else|:
literal|" (for session "
operator|+
name|sessionId
operator|+
literal|")"
operator|)
argument_list|)
expr_stmt|;
name|Properties
name|properties
init|=
operator|(
name|sessionId
operator|==
literal|null
condition|?
name|ApplicationProperties
operator|.
name|getConfigProperties
argument_list|()
else|:
name|ApplicationProperties
operator|.
name|getSessionProperties
argument_list|(
name|sessionId
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
name|properties
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
else|else
name|properties
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setLoggingLevel
parameter_list|(
name|String
name|name
parameter_list|,
name|Integer
name|level
parameter_list|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Set logging level for "
operator|+
operator|(
name|name
operator|==
literal|null
condition|?
literal|"root"
else|:
name|name
operator|)
operator|+
literal|" to "
operator|+
operator|(
name|level
operator|==
literal|null
condition|?
literal|"null"
else|:
name|Level
operator|.
name|toLevel
argument_list|(
name|level
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|Logger
name|logger
init|=
operator|(
name|name
operator|==
literal|null
condition|?
name|Logger
operator|.
name|getRootLogger
argument_list|()
else|:
name|Logger
operator|.
name|getLogger
argument_list|(
name|name
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|level
operator|==
literal|null
condition|)
name|logger
operator|.
name|setLevel
argument_list|(
literal|null
argument_list|)
expr_stmt|;
else|else
name|logger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|toLevel
argument_list|(
name|level
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|QueueProcessor
name|getQueueProcessor
parameter_list|()
block|{
return|return
name|LocalQueueProcessor
operator|.
name|getInstance
argument_list|()
return|;
block|}
block|}
end_class

end_unit

