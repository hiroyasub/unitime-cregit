begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.5 (University Timetabling Application)  * Copyright (C) 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|jgroups
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|JChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|blocks
operator|.
name|locking
operator|.
name|LockService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|util
operator|.
name|Rsp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|util
operator|.
name|RspList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_class
specifier|public
class|class
name|OnlineStudentSchedulingGenericUpdater
extends|extends
name|Thread
block|{
specifier|private
name|Logger
name|iLog
decl_stmt|;
specifier|private
name|long
name|iSleepTimeInSeconds
init|=
literal|5
decl_stmt|;
specifier|private
name|boolean
name|iRun
init|=
literal|true
decl_stmt|;
specifier|private
name|JChannel
name|iChannel
decl_stmt|;
specifier|private
name|OnlineStudentSchedulingContainerRemote
name|iContainer
decl_stmt|;
specifier|private
name|LockService
name|iLockService
decl_stmt|;
specifier|private
name|Lock
name|iMasterLock
decl_stmt|;
specifier|private
name|AtomicBoolean
name|iMaster
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
name|MasterAcquiringThread
name|iMasterThread
decl_stmt|;
specifier|public
name|OnlineStudentSchedulingGenericUpdater
parameter_list|(
name|JChannel
name|channel
parameter_list|,
name|OnlineStudentSchedulingContainerRemote
name|container
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|iChannel
operator|=
name|channel
expr_stmt|;
name|iContainer
operator|=
name|container
expr_stmt|;
name|iLockService
operator|=
operator|new
name|LockService
argument_list|(
name|channel
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setName
argument_list|(
literal|"Updater[generic]"
argument_list|)
expr_stmt|;
name|iSleepTimeInSeconds
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.sectioning.queue.loadInterval"
argument_list|,
literal|"300"
argument_list|)
argument_list|)
expr_stmt|;
name|iLog
operator|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|OnlineStudentSchedulingGenericUpdater
operator|.
name|class
operator|+
literal|".updater[generic]"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|iMasterThread
operator|=
operator|new
name|MasterAcquiringThread
argument_list|()
expr_stmt|;
name|iMasterThread
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|iLog
operator|.
name|info
argument_list|(
literal|"Generic updater started."
argument_list|)
expr_stmt|;
while|while
condition|(
name|iRun
condition|)
block|{
try|try
block|{
name|sleep
argument_list|(
name|iSleepTimeInSeconds
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|iRun
condition|)
name|checkForNewServers
argument_list|()
expr_stmt|;
block|}
name|iLog
operator|.
name|info
argument_list|(
literal|"Generic updater stopped."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iLog
operator|.
name|error
argument_list|(
literal|"Generic updater failed, "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|iMasterThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
if|if
condition|(
name|iMaster
operator|.
name|get
argument_list|()
condition|)
name|iMasterLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|stopUpdating
parameter_list|()
block|{
name|iRun
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|iMaster
operator|.
name|get
argument_list|()
condition|)
name|iMasterLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|interrupt
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|checkForNewServers
parameter_list|()
block|{
if|if
condition|(
operator|!
name|iMaster
operator|.
name|get
argument_list|()
condition|)
return|return;
name|Lock
name|lock
init|=
name|iLockService
operator|.
name|getLock
argument_list|(
literal|"updater[generic].check"
argument_list|)
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|year
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.enrollment.year"
argument_list|)
decl_stmt|;
name|String
name|term
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.enrollment.term"
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.enrollment.campus"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|solvers
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|RspList
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|ret
init|=
name|iContainer
operator|.
name|getDispatcher
argument_list|()
operator|.
name|callRemoteMethods
argument_list|(
literal|null
argument_list|,
literal|"getSolvers"
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|,
name|SolverServerImplementation
operator|.
name|sAllResponses
argument_list|)
decl_stmt|;
for|for
control|(
name|Rsp
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|rsp
range|:
name|ret
control|)
block|{
name|solvers
operator|.
name|addAll
argument_list|(
name|rsp
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iLog
operator|.
name|error
argument_list|(
literal|"Failed to retrieve servers: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Session
argument_list|>
name|i
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|(
name|hibSession
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Session
name|session
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|solvers
operator|.
name|contains
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|year
operator|!=
literal|null
operator|&&
operator|!
name|year
operator|.
name|equals
argument_list|(
name|session
operator|.
name|getAcademicYear
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|term
operator|!=
literal|null
operator|&&
operator|!
name|term
operator|.
name|equals
argument_list|(
name|session
operator|.
name|getAcademicTerm
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|campus
operator|!=
literal|null
operator|&&
operator|!
name|campus
operator|.
name|equals
argument_list|(
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|isTestSession
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canSectionAssistStudents
argument_list|()
operator|&&
operator|!
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canOnlineSectionStudents
argument_list|()
condition|)
continue|continue;
name|int
name|nrSolutions
init|=
operator|(
operator|(
name|Number
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select count(s) from Solution s where s.owner.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|nrSolutions
operator|==
literal|0
condition|)
continue|continue;
try|try
block|{
name|iContainer
operator|.
name|getDispatcher
argument_list|()
operator|.
name|callRemoteMethod
argument_list|(
name|ToolBox
operator|.
name|random
argument_list|(
name|iChannel
operator|.
name|getView
argument_list|()
operator|.
name|getMembers
argument_list|()
argument_list|)
argument_list|,
literal|"createRemoteSolver"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
block|,
literal|null
block|,
name|iChannel
operator|.
name|getAddress
argument_list|()
block|}
argument_list|,
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|,
name|DataProperties
operator|.
name|class
block|,
name|Address
operator|.
name|class
block|}
argument_list|,
name|SolverServerImplementation
operator|.
name|sFirstResponse
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iLog
operator|.
name|fatal
argument_list|(
literal|"Unable to upadte session "
operator|+
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
literal|" "
operator|+
name|session
operator|.
name|getAcademicYear
argument_list|()
operator|+
literal|" ("
operator|+
name|session
operator|.
name|getAcademicInitiative
argument_list|()
operator|+
literal|"), reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|MasterAcquiringThread
extends|extends
name|Thread
block|{
name|MasterAcquiringThread
parameter_list|()
block|{
name|setName
argument_list|(
literal|"Updater[generic]:AcquiringMasterLock"
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|iMasterLock
operator|=
name|iLockService
operator|.
name|getLock
argument_list|(
literal|"updater[generic].master"
argument_list|)
expr_stmt|;
try|try
block|{
name|iMasterLock
operator|.
name|lockInterruptibly
argument_list|()
expr_stmt|;
name|iMaster
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iLog
operator|.
name|info
argument_list|(
literal|"I am the coordinator!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
block|}
end_class

end_unit

