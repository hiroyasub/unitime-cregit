begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.5 (University Timetabling Application)  * Copyright (C) 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|jgroups
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|RoomAvailabilityInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|SolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ExamSolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|studentsct
operator|.
name|StudentSolverProxy
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_interface
specifier|public
interface|interface
name|SolverServer
block|{
specifier|public
specifier|static
specifier|final
name|short
name|SCOPE_SERVER
init|=
literal|0
decl_stmt|,
name|SCOPE_COURSE
init|=
literal|1
decl_stmt|,
name|SCOPE_EXAM
init|=
literal|2
decl_stmt|,
name|SCOPE_STUDENT
init|=
literal|3
decl_stmt|,
name|SCOPE_AVAILABILITY
init|=
literal|4
decl_stmt|,
name|SCOPE_ONLINE
init|=
literal|5
decl_stmt|;
specifier|public
name|boolean
name|isLocal
parameter_list|()
function_decl|;
specifier|public
name|boolean
name|isCoordinator
parameter_list|()
function_decl|;
specifier|public
name|Address
name|getAddress
parameter_list|()
function_decl|;
specifier|public
name|Address
name|getLocalAddress
parameter_list|()
function_decl|;
specifier|public
name|String
name|getHost
parameter_list|()
function_decl|;
specifier|public
name|Date
name|getStartTime
parameter_list|()
function_decl|;
specifier|public
name|int
name|getUsage
parameter_list|()
function_decl|;
specifier|public
name|String
name|getVersion
parameter_list|()
function_decl|;
specifier|public
name|void
name|setUsageBase
parameter_list|(
name|int
name|usage
parameter_list|)
function_decl|;
specifier|public
name|long
name|getAvailableMemory
parameter_list|()
function_decl|;
specifier|public
name|long
name|getMemoryLimit
parameter_list|()
function_decl|;
specifier|public
name|boolean
name|isActive
parameter_list|()
function_decl|;
specifier|public
name|boolean
name|isAvailable
parameter_list|()
function_decl|;
specifier|public
name|void
name|shutdown
parameter_list|()
function_decl|;
specifier|public
name|SolverContainer
argument_list|<
name|SolverProxy
argument_list|>
name|getCourseSolverContainer
parameter_list|()
function_decl|;
specifier|public
name|SolverContainer
argument_list|<
name|ExamSolverProxy
argument_list|>
name|getExamSolverContainer
parameter_list|()
function_decl|;
specifier|public
name|SolverContainer
argument_list|<
name|StudentSolverProxy
argument_list|>
name|getStudentSolverContainer
parameter_list|()
function_decl|;
specifier|public
name|SolverContainer
argument_list|<
name|OnlineSectioningServer
argument_list|>
name|getOnlineStudentSchedulingContainer
parameter_list|()
function_decl|;
specifier|public
name|RoomAvailabilityInterface
name|getRoomAvailability
parameter_list|()
function_decl|;
specifier|public
name|void
name|refreshCourseSolution
parameter_list|(
name|Long
modifier|...
name|solutionId
parameter_list|)
function_decl|;
specifier|public
name|void
name|refreshExamSolution
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Long
name|examTypeId
parameter_list|)
function_decl|;
specifier|public
name|void
name|reset
parameter_list|()
function_decl|;
block|}
end_interface

end_unit

