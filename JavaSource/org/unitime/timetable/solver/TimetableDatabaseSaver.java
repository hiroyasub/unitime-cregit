begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|FlushMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalSolutionCommitAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AssignmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ConstraintInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolutionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverInfoDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameterDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DatePatternDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|LocationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolutionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolverGroupDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TimePatternDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TimetableManagerDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|remote
operator|.
name|RemoteSolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|AssignmentPreferenceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|BtbInstructorConstraintInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|ConflictStatisticsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|GroupConstraintInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|JenrlInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|LogInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|PropertiesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|TimetableInfoFileProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|TimetableInfoUtil
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|TimetableSaver
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|GroupConstraint
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|InstructorConstraint
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|JenrlConstraint
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Lecture
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|extension
operator|.
name|ConflictStatistics
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|extension
operator|.
name|Extension
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|TimetableDatabaseSaver
extends|extends
name|TimetableSaver
block|{
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TimetableDatabaseSaver
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Long
name|iSessionId
decl_stmt|;
specifier|private
name|Long
index|[]
name|iSolverGroupId
decl_stmt|;
specifier|private
name|Long
index|[]
name|iSolutionId
decl_stmt|;
specifier|private
name|boolean
name|iCreateNew
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|iCommitSolution
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iStudentSectioning
init|=
literal|false
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Assignment
argument_list|>
name|iAssignments
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Assignment
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Solution
argument_list|>
name|iSolutions
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Solution
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Progress
name|iProgress
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|int
name|BATCH_SIZE
init|=
literal|100
decl_stmt|;
specifier|public
name|TimetableDatabaseSaver
parameter_list|(
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solver
operator|.
name|Solver
name|solver
parameter_list|)
block|{
name|super
argument_list|(
name|solver
argument_list|)
expr_stmt|;
name|iProgress
operator|=
name|Progress
operator|.
name|getInstance
argument_list|(
name|getModel
argument_list|()
argument_list|)
expr_stmt|;
name|iSessionId
operator|=
operator|new
name|Long
argument_list|(
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SessionId"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|iSolverGroupId
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLongArry
argument_list|(
literal|"General.SolverGroupId"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|iSolutionId
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLongArry
argument_list|(
literal|"General.SolutionId"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|iCreateNew
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.CreateNewSolution"
argument_list|,
name|iCreateNew
argument_list|)
expr_stmt|;
name|iCommitSolution
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.CommitSolution"
argument_list|,
name|iCommitSolution
argument_list|)
expr_stmt|;
name|iStudentSectioning
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.RunStudentSectioningOnSave"
argument_list|,
name|iStudentSectioning
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TimetableInfoFileProxy
name|getFileProxy
parameter_list|()
block|{
name|TimetableInfoFileProxy
name|proxy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getSolver
argument_list|()
operator|instanceof
name|TimetableSolver
condition|)
name|proxy
operator|=
operator|(
operator|(
name|TimetableSolver
operator|)
name|getSolver
argument_list|()
operator|)
operator|.
name|getFileProxy
argument_list|()
expr_stmt|;
return|return
operator|(
name|proxy
operator|!=
literal|null
condition|?
name|proxy
else|:
name|TimetableInfoUtil
operator|.
name|getInstance
argument_list|()
operator|)
return|;
block|}
specifier|private
name|Solution
name|getSolution
parameter_list|(
name|Lecture
name|lecture
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
if|if
condition|(
name|lecture
operator|.
name|getSolverGroupId
argument_list|()
operator|!=
literal|null
condition|)
return|return
operator|(
name|Solution
operator|)
name|iSolutions
operator|.
name|get
argument_list|(
name|lecture
operator|.
name|getSolverGroupId
argument_list|()
argument_list|)
return|;
else|else
block|{
name|Class_
name|clazz
init|=
operator|(
operator|new
name|Class_DAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|lecture
operator|.
name|getClassId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|SolverGroup
name|sg
init|=
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getSolverGroup
argument_list|()
decl_stmt|;
if|if
condition|(
name|sg
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|(
name|Solution
operator|)
name|iSolutions
operator|.
name|get
argument_list|(
name|sg
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
name|void
name|save
parameter_list|()
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
literal|null
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|TimetableManagerDAO
name|dao
init|=
operator|new
name|TimetableManagerDAO
argument_list|()
decl_stmt|;
name|hibSession
operator|=
name|dao
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Long
index|[]
name|solutionIds
init|=
name|save
argument_list|(
name|hibSession
argument_list|)
decl_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|HashSet
name|refreshIds
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|iCommitSolution
operator|&&
name|solutionIds
operator|!=
literal|null
condition|)
block|{
name|HashSet
argument_list|<
name|Solution
argument_list|>
name|touchedSolutions
init|=
operator|new
name|HashSet
argument_list|<
name|Solution
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|hibSession
operator|!=
literal|null
operator|&&
name|hibSession
operator|.
name|isOpen
argument_list|()
condition|)
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|hibSession
operator|=
name|dao
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Committing solution ..."
argument_list|,
literal|2
operator|*
name|solutionIds
operator|.
name|length
argument_list|)
expr_stmt|;
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|solutionIds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Solution
name|solution
init|=
operator|(
operator|new
name|SolutionDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|solutionIds
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|Solution
name|committedSolution
init|=
name|solution
operator|.
name|getOwner
argument_list|()
operator|.
name|getCommittedSolution
argument_list|()
decl_stmt|;
if|if
condition|(
name|committedSolution
operator|!=
literal|null
condition|)
block|{
name|committedSolution
operator|.
name|uncommitSolution
argument_list|(
name|hibSession
argument_list|,
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|)
argument_list|)
expr_stmt|;
name|refreshIds
operator|.
name|add
argument_list|(
name|committedSolution
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|touchedSolutions
operator|.
name|add
argument_list|(
name|committedSolution
argument_list|)
expr_stmt|;
block|}
name|touchedSolutions
operator|.
name|add
argument_list|(
name|solution
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|solutionIds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Solution
name|solution
init|=
operator|(
operator|new
name|SolutionDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|solutionIds
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|messages
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|solution
operator|.
name|commitSolution
argument_list|(
name|messages
argument_list|,
name|hibSession
argument_list|,
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|)
argument_list|)
expr_stmt|;
name|touchedSolutions
operator|.
name|add
argument_list|(
name|solution
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|m
range|:
name|messages
control|)
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"Unable to commit: "
operator|+
name|m
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|update
argument_list|(
name|solution
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
block|}
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|className
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.external.solution.commit_action.class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExternalSolutionCommitAction
name|commitAction
init|=
operator|(
name|ExternalSolutionCommitAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|commitAction
operator|.
name|performExternalSolutionCommitAction
argument_list|(
name|touchedSolutions
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Refreshing solution ..."
argument_list|,
name|solutionIds
operator|.
name|length
operator|+
name|refreshIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|refreshIds
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Long
name|solutionId
init|=
operator|(
name|Long
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|RemoteSolver
operator|.
name|refreshSolution
argument_list|(
name|solutionId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to refresh solution "
operator|+
name|solutionId
operator|+
literal|", reason:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|solutionIds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|RemoteSolver
operator|.
name|refreshSolution
argument_list|(
name|solutionIds
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to refresh solution "
operator|+
name|solutionIds
index|[
name|i
index|]
operator|+
literal|", reason:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|solutionIds
operator|!=
literal|null
condition|)
block|{
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"General.SolutionId"
argument_list|,
name|solutionIds
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|info
argument_list|(
literal|"Solution successfully saved."
argument_list|)
expr_stmt|;
if|if
condition|(
name|hibSession
operator|!=
literal|null
operator|&&
name|hibSession
operator|.
name|isOpen
argument_list|()
condition|)
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|hibSession
operator|=
name|dao
operator|.
name|getSession
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|solutionIds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Solution
name|solution
init|=
operator|(
operator|new
name|SolutionDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|solutionIds
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|LogInfo
name|lInfo
init|=
operator|new
name|LogInfo
argument_list|()
decl_stmt|;
name|lInfo
operator|.
name|setLog
argument_list|(
name|iProgress
operator|.
name|getLog
argument_list|()
argument_list|)
expr_stmt|;
name|SolutionInfo
name|logInfo
init|=
operator|new
name|SolutionInfo
argument_list|()
decl_stmt|;
name|logInfo
operator|.
name|setDefinition
argument_list|(
name|SolverInfoDef
operator|.
name|findByName
argument_list|(
name|hibSession
argument_list|,
literal|"LogInfo"
argument_list|)
argument_list|)
expr_stmt|;
name|logInfo
operator|.
name|setOpt
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|logInfo
operator|.
name|setSolution
argument_list|(
name|solution
argument_list|)
expr_stmt|;
name|logInfo
operator|.
name|setInfo
argument_list|(
name|lInfo
argument_list|,
name|getFileProxy
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|logInfo
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iProgress
operator|.
name|fatal
argument_list|(
literal|"Unable to save timetable, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
comment|// here we need to close the session since this code may run in a separate thread
if|if
condition|(
name|hibSession
operator|!=
literal|null
operator|&&
name|hibSession
operator|.
name|isOpen
argument_list|()
condition|)
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Long
index|[]
name|save
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|iStudentSectioning
condition|)
name|getModel
argument_list|()
operator|.
name|switchStudents
argument_list|()
expr_stmt|;
name|iProgress
operator|.
name|setStatus
argument_list|(
literal|"Saving solution ..."
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|setFlushMode
argument_list|(
name|FlushMode
operator|.
name|MANUAL
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSolverGroupId
operator|==
literal|null
operator|||
name|iSolverGroupId
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|iProgress
operator|.
name|fatal
argument_list|(
literal|"No solver group loaded."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Hashtable
name|solverGroups
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSolverGroupId
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SolverGroup
name|solverGroup
init|=
name|SolverGroupDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|iSolverGroupId
index|[
name|i
index|]
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|solverGroup
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|fatal
argument_list|(
literal|"Unable to load solver group "
operator|+
name|iSolverGroupId
index|[
name|i
index|]
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|solverGroups
operator|.
name|put
argument_list|(
name|solverGroup
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|solverGroup
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|debug
argument_list|(
literal|"solver group ["
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|"]: "
operator|+
name|solverGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iSolutions
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|iCreateNew
operator|&&
name|iSolutionId
operator|!=
literal|null
operator|&&
name|iSolutionId
operator|.
name|length
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSolverGroupId
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|<
name|iSolutionId
operator|.
name|length
operator|&&
name|iSolutionId
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|Solution
name|solution
init|=
operator|(
operator|new
name|SolutionDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|iSolutionId
index|[
name|i
index|]
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|solution
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to load solution "
operator|+
name|iSolutionId
index|[
name|i
index|]
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|solverGroups
operator|.
name|containsKey
argument_list|(
name|solution
operator|.
name|getOwner
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Solution "
operator|+
name|iSolutionId
index|[
name|i
index|]
operator|+
literal|" ignored -- it does not match with the owner(s) of the problem"
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|solution
operator|.
name|isCommited
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|solution
operator|.
name|uncommitSolution
argument_list|(
name|hibSession
argument_list|,
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iCommitSolution
condition|)
block|{
name|String
name|className
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.external.solution.commit_action.class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|HashSet
argument_list|<
name|Solution
argument_list|>
name|touchedSolutions
init|=
operator|new
name|HashSet
argument_list|<
name|Solution
argument_list|>
argument_list|()
decl_stmt|;
name|touchedSolutions
operator|.
name|add
argument_list|(
name|solution
argument_list|)
expr_stmt|;
name|ExternalSolutionCommitAction
name|commitAction
init|=
operator|(
name|ExternalSolutionCommitAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|commitAction
operator|.
name|performExternalSolutionCommitAction
argument_list|(
name|touchedSolutions
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|solution
operator|.
name|empty
argument_list|(
name|hibSession
argument_list|,
name|getFileProxy
argument_list|()
argument_list|)
expr_stmt|;
name|iSolutions
operator|.
name|put
argument_list|(
name|solution
operator|.
name|getOwner
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|solution
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|iSessionId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|fatal
argument_list|(
literal|"No session loaded."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|iProgress
operator|.
name|debug
argument_list|(
literal|"session: "
operator|+
name|session
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|solverGroups
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|SolverGroup
name|solverGroup
init|=
operator|(
name|SolverGroup
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Solution
name|solution
init|=
operator|(
name|Solution
operator|)
name|iSolutions
operator|.
name|get
argument_list|(
name|solverGroup
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|solution
operator|==
literal|null
condition|)
block|{
name|solution
operator|=
operator|new
name|Solution
argument_list|()
expr_stmt|;
name|iSolutions
operator|.
name|put
argument_list|(
name|solverGroup
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|solution
argument_list|)
expr_stmt|;
block|}
name|solution
operator|.
name|setCommitDate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|solution
operator|.
name|setCreated
argument_list|(
operator|new
name|Timestamp
argument_list|(
operator|(
operator|new
name|Date
argument_list|()
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|solution
operator|.
name|setCreator
argument_list|(
name|Test
operator|.
name|getVersionString
argument_list|()
argument_list|)
expr_stmt|;
name|solution
operator|.
name|setNote
argument_list|(
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.Note"
argument_list|)
argument_list|)
expr_stmt|;
name|solution
operator|.
name|setOwner
argument_list|(
name|solverGroup
argument_list|)
expr_stmt|;
name|solverGroup
operator|.
name|getSolutions
argument_list|()
operator|.
name|add
argument_list|(
name|solution
argument_list|)
expr_stmt|;
name|solution
operator|.
name|setValid
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|solution
operator|.
name|setCommited
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Saving solver parameters ..."
argument_list|,
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|HashSet
name|params
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i1
init|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|SolverParameterDef
name|def
init|=
name|SolverParameterDef
operator|.
name|findByName
argument_list|(
name|hibSession
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|def
operator|!=
literal|null
condition|)
block|{
name|iProgress
operator|.
name|trace
argument_list|(
literal|"save "
operator|+
name|name
operator|+
literal|"="
operator|+
name|value
argument_list|)
expr_stmt|;
name|SolverParameter
name|param
init|=
operator|new
name|SolverParameter
argument_list|()
decl_stmt|;
name|param
operator|.
name|setDefinition
argument_list|(
name|def
argument_list|)
expr_stmt|;
name|param
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|param
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|param
argument_list|)
expr_stmt|;
block|}
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
block|}
name|solution
operator|.
name|setParameters
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|solution
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
name|int
name|batchIdx
init|=
literal|0
decl_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Saving assignments ..."
argument_list|,
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
name|Placement
name|placement
init|=
name|lecture
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
block|{
name|iProgress
operator|.
name|trace
argument_list|(
literal|"save "
operator|+
name|lecture
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|placement
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Class_
name|clazz
init|=
operator|(
operator|new
name|Class_DAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|lecture
operator|.
name|getClassId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to save assignment for class "
operator|+
name|lecture
operator|+
literal|" ("
operator|+
name|placement
operator|.
name|getLongName
argument_list|()
operator|+
literal|") -- class (id:"
operator|+
name|lecture
operator|.
name|getClassId
argument_list|()
operator|+
literal|") does not exist."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|HashSet
name|rooms
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|placement
operator|.
name|isMultiRoom
argument_list|()
condition|)
block|{
for|for
control|(
name|RoomLocation
name|r
range|:
name|placement
operator|.
name|getRoomLocations
argument_list|()
control|)
block|{
name|Location
name|room
init|=
operator|(
operator|new
name|LocationDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|room
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to save assignment for class "
operator|+
name|lecture
operator|+
literal|" ("
operator|+
name|placement
operator|.
name|getLongName
argument_list|()
operator|+
literal|") -- room (id:"
operator|+
name|r
operator|.
name|getId
argument_list|()
operator|+
literal|") does not exist."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|rooms
operator|.
name|add
argument_list|(
name|room
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rooms
operator|.
name|size
argument_list|()
operator|!=
name|placement
operator|.
name|getRoomLocations
argument_list|()
operator|.
name|size
argument_list|()
condition|)
continue|continue;
block|}
else|else
block|{
name|Location
name|room
init|=
operator|(
operator|new
name|LocationDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|placement
operator|.
name|getRoomLocation
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|room
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to save assignment for class "
operator|+
name|lecture
operator|+
literal|" ("
operator|+
name|placement
operator|.
name|getLongName
argument_list|()
operator|+
literal|") -- room (id:"
operator|+
name|placement
operator|.
name|getRoomLocation
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|") does not exist."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|rooms
operator|.
name|add
argument_list|(
name|room
argument_list|)
expr_stmt|;
block|}
name|HashSet
name|instructors
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|InstructorConstraint
name|ic
range|:
name|lecture
operator|.
name|getInstructorConstraints
argument_list|()
control|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ic
operator|.
name|getPuid
argument_list|()
operator|!=
literal|null
operator|&&
name|ic
operator|.
name|getPuid
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|instructor
operator|=
name|DepartmentalInstructor
operator|.
name|findByPuidDepartmentId
argument_list|(
name|ic
operator|.
name|getPuid
argument_list|()
argument_list|,
name|clazz
operator|.
name|getControllingDept
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ic
operator|.
name|getResourceId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|instructor
operator|=
operator|(
operator|new
name|DepartmentalInstructorDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|ic
operator|.
name|getResourceId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|instructor
operator|!=
literal|null
condition|)
name|instructors
operator|.
name|add
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
block|}
name|TimePattern
name|pattern
init|=
operator|(
operator|new
name|TimePatternDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getTimePatternId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|pattern
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to save assignment for class "
operator|+
name|lecture
operator|+
literal|" ("
operator|+
name|placement
operator|.
name|getLongName
argument_list|()
operator|+
literal|") -- time pattern (id:"
operator|+
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getTimePatternId
argument_list|()
operator|+
literal|") does not exist."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Solution
name|solution
init|=
name|getSolution
argument_list|(
name|lecture
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|solution
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to save assignment for class "
operator|+
name|lecture
operator|+
literal|" ("
operator|+
name|placement
operator|.
name|getLongName
argument_list|()
operator|+
literal|") -- none or wrong solution group assigned to the class"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Assignment
name|assignment
init|=
operator|new
name|Assignment
argument_list|()
decl_stmt|;
name|assignment
operator|.
name|setClazz
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setClassId
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setClassName
argument_list|(
name|lecture
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setDays
argument_list|(
operator|new
name|Integer
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setStartSlot
argument_list|(
operator|new
name|Integer
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setTimePattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
if|if
condition|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDatePatternId
argument_list|()
operator|!=
literal|null
condition|)
name|assignment
operator|.
name|setDatePattern
argument_list|(
name|DatePatternDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDatePatternId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setRooms
argument_list|(
name|rooms
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setInstructors
argument_list|(
name|instructors
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setSolution
argument_list|(
name|solution
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
name|iAssignments
operator|.
name|put
argument_list|(
name|lecture
operator|.
name|getClassId
argument_list|()
argument_list|,
name|assignment
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|batchIdx
operator|%
name|BATCH_SIZE
operator|==
literal|0
condition|)
block|{
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
name|batchIdx
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.SaveStudentEnrollments"
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Saving student enrollments ..."
argument_list|,
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
operator|new
name|Class_DAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|lecture
operator|.
name|getClassId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
continue|continue;
name|iProgress
operator|.
name|trace
argument_list|(
literal|"save "
operator|+
name|lecture
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Solution
name|solution
init|=
name|getSolution
argument_list|(
name|lecture
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|solution
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to save student enrollments for class "
operator|+
name|lecture
operator|+
literal|"  -- none or wrong solution group assigned to the class"
argument_list|)
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|Iterator
name|i2
init|=
name|lecture
operator|.
name|students
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Student
name|student
init|=
operator|(
name|Student
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|StudentEnrollment
name|enrl
init|=
operator|new
name|StudentEnrollment
argument_list|()
decl_stmt|;
name|enrl
operator|.
name|setStudentId
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|enrl
operator|.
name|setClazz
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|enrl
operator|.
name|setSolution
argument_list|(
name|solution
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|batchIdx
operator|%
name|BATCH_SIZE
operator|==
literal|0
condition|)
block|{
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
name|batchIdx
operator|=
literal|0
expr_stmt|;
block|}
comment|/**  // is this needed?     		iProgress.setPhase("Saving joint enrollments ...", getModel().getJenrlConstraints().size());     		for (Enumeration e1=getModel().getJenrlConstraints().elements();e1.hasMoreElements();) {     			JenrlConstraint jenrlConstraint = (JenrlConstraint)e1.nextElement();     			     			Class_ clazz1 = (new Class_DAO()).get(((Lecture)jenrlConstraint.first()).getClassId());     			Class_ clazz2 = (new Class_DAO()).get(((Lecture)jenrlConstraint.second()).getClassId());     			     			JointEnrollment jenrl = new JointEnrollment();     			jenrl.setJenrl(new Double(jenrlConstraint.getJenrl()));     			jenrl.setClass1(clazz1);     			jenrl.setClass2(clazz2);     			jenrl.setSolution(solution);     			hibSession.save(jenrl);     			     			iProgress.incProgress();     		}     		*/
name|SolverInfoDef
name|defGlobalInfo
init|=
name|SolverInfoDef
operator|.
name|findByName
argument_list|(
name|hibSession
argument_list|,
literal|"GlobalInfo"
argument_list|)
decl_stmt|;
if|if
condition|(
name|defGlobalInfo
operator|==
literal|null
condition|)
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Global info is not registered."
argument_list|)
expr_stmt|;
name|SolverInfoDef
name|defCbsInfo
init|=
name|SolverInfoDef
operator|.
name|findByName
argument_list|(
name|hibSession
argument_list|,
literal|"CBSInfo"
argument_list|)
decl_stmt|;
if|if
condition|(
name|defCbsInfo
operator|==
literal|null
condition|)
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Constraint-based statistics info is not registered."
argument_list|)
expr_stmt|;
name|SolverInfoDef
name|defAssignmentInfo
init|=
name|SolverInfoDef
operator|.
name|findByName
argument_list|(
name|hibSession
argument_list|,
literal|"AssignmentInfo"
argument_list|)
decl_stmt|;
if|if
condition|(
name|defAssignmentInfo
operator|==
literal|null
condition|)
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Assignment info is not registered."
argument_list|)
expr_stmt|;
name|SolverInfoDef
name|defDistributionInfo
init|=
name|SolverInfoDef
operator|.
name|findByName
argument_list|(
name|hibSession
argument_list|,
literal|"DistributionInfo"
argument_list|)
decl_stmt|;
if|if
condition|(
name|defDistributionInfo
operator|==
literal|null
condition|)
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Distribution constraint info is not registered."
argument_list|)
expr_stmt|;
name|SolverInfoDef
name|defJenrlInfo
init|=
name|SolverInfoDef
operator|.
name|findByName
argument_list|(
name|hibSession
argument_list|,
literal|"JenrlInfo"
argument_list|)
decl_stmt|;
if|if
condition|(
name|defJenrlInfo
operator|==
literal|null
condition|)
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Joint enrollments info is not registered."
argument_list|)
expr_stmt|;
name|SolverInfoDef
name|defLogInfo
init|=
name|SolverInfoDef
operator|.
name|findByName
argument_list|(
name|hibSession
argument_list|,
literal|"LogInfo"
argument_list|)
decl_stmt|;
if|if
condition|(
name|defLogInfo
operator|==
literal|null
condition|)
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Solver log info is not registered."
argument_list|)
expr_stmt|;
name|SolverInfoDef
name|defBtbInstrInfo
init|=
name|SolverInfoDef
operator|.
name|findByName
argument_list|(
name|hibSession
argument_list|,
literal|"BtbInstructorInfo"
argument_list|)
decl_stmt|;
if|if
condition|(
name|defBtbInstrInfo
operator|==
literal|null
condition|)
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Back-to-back instructor info is not registered."
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|Solution
argument_list|,
name|List
argument_list|<
name|Lecture
argument_list|>
argument_list|>
name|lectures4solution
init|=
operator|new
name|Hashtable
argument_list|<
name|Solution
argument_list|,
name|List
argument_list|<
name|Lecture
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
name|Solution
name|s
init|=
name|getSolution
argument_list|(
name|lecture
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
continue|continue;
name|List
argument_list|<
name|Lecture
argument_list|>
name|lectures
init|=
name|lectures4solution
operator|.
name|get
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|lectures
operator|==
literal|null
condition|)
block|{
name|lectures
operator|=
operator|new
name|ArrayList
argument_list|<
name|Lecture
argument_list|>
argument_list|()
expr_stmt|;
name|lectures4solution
operator|.
name|put
argument_list|(
name|s
argument_list|,
name|lectures
argument_list|)
expr_stmt|;
block|}
name|lectures
operator|.
name|add
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
block|}
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Saving global info ..."
argument_list|,
name|solverGroups
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|solverGroups
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|SolverGroup
name|solverGroup
init|=
operator|(
name|SolverGroup
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Solution
name|solution
init|=
operator|(
name|Solution
operator|)
name|iSolutions
operator|.
name|get
argument_list|(
name|solverGroup
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Lecture
argument_list|>
name|lectures
init|=
name|lectures4solution
operator|.
name|get
argument_list|(
name|solution
argument_list|)
decl_stmt|;
if|if
condition|(
name|lectures
operator|==
literal|null
condition|)
name|lectures
operator|=
operator|new
name|ArrayList
argument_list|<
name|Lecture
argument_list|>
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|SolutionInfo
name|solutionInfo
init|=
operator|new
name|SolutionInfo
argument_list|()
decl_stmt|;
name|solutionInfo
operator|.
name|setDefinition
argument_list|(
name|defGlobalInfo
argument_list|)
expr_stmt|;
name|solutionInfo
operator|.
name|setOpt
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|solutionInfo
operator|.
name|setSolution
argument_list|(
name|solution
argument_list|)
expr_stmt|;
name|solutionInfo
operator|.
name|setInfo
argument_list|(
operator|new
name|PropertiesInfo
argument_list|(
name|getSolution
argument_list|()
operator|.
name|getInfo
argument_list|(
name|lectures
argument_list|)
argument_list|)
argument_list|,
name|getFileProxy
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|solutionInfo
argument_list|)
expr_stmt|;
name|solution
operator|.
name|setGlobalInfo
argument_list|(
name|solutionInfo
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
name|batchIdx
operator|=
literal|0
expr_stmt|;
name|ConflictStatistics
name|cbs
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Extension
name|ext
range|:
name|getSolver
argument_list|()
operator|.
name|getExtensions
argument_list|()
control|)
block|{
if|if
condition|(
name|ext
operator|instanceof
name|ConflictStatistics
condition|)
block|{
name|cbs
operator|=
operator|(
name|ConflictStatistics
operator|)
name|ext
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|cbs
operator|!=
literal|null
operator|&&
name|cbs
operator|.
name|getNoGoods
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ConflictStatisticsInfo
name|cbsInfo
init|=
operator|new
name|ConflictStatisticsInfo
argument_list|()
decl_stmt|;
name|cbsInfo
operator|.
name|load
argument_list|(
name|cbs
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Saving conflict-based statistics ..."
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|iSolutions
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Solution
name|solution
init|=
operator|(
name|Solution
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Lecture
argument_list|>
name|lectures
init|=
name|lectures4solution
operator|.
name|get
argument_list|(
name|solution
argument_list|)
decl_stmt|;
if|if
condition|(
name|lectures
operator|==
literal|null
condition|)
name|lectures
operator|=
operator|new
name|ArrayList
argument_list|<
name|Lecture
argument_list|>
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|SolutionInfo
name|cbsSolutionInfo
init|=
operator|new
name|SolutionInfo
argument_list|()
decl_stmt|;
name|cbsSolutionInfo
operator|.
name|setDefinition
argument_list|(
name|defCbsInfo
argument_list|)
expr_stmt|;
name|cbsSolutionInfo
operator|.
name|setOpt
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|cbsSolutionInfo
operator|.
name|setSolution
argument_list|(
name|solution
argument_list|)
expr_stmt|;
name|cbsSolutionInfo
operator|.
name|setInfo
argument_list|(
name|cbsInfo
operator|.
name|getConflictStatisticsSubInfo
argument_list|(
name|lectures
argument_list|)
argument_list|,
name|getFileProxy
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|cbsSolutionInfo
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|batchIdx
operator|%
name|BATCH_SIZE
operator|==
literal|0
condition|)
block|{
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
name|batchIdx
operator|=
literal|0
expr_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Saving variable infos ..."
argument_list|,
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
name|Placement
name|placement
init|=
name|lecture
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
block|{
name|Assignment
name|assignment
init|=
operator|(
name|Assignment
operator|)
name|iAssignments
operator|.
name|get
argument_list|(
name|lecture
operator|.
name|getClassId
argument_list|()
argument_list|)
decl_stmt|;
name|AssignmentInfo
name|assignmentInfo
init|=
operator|new
name|AssignmentInfo
argument_list|()
decl_stmt|;
name|assignmentInfo
operator|.
name|setAssignment
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
name|assignmentInfo
operator|.
name|setDefinition
argument_list|(
name|defAssignmentInfo
argument_list|)
expr_stmt|;
name|assignmentInfo
operator|.
name|setOpt
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assignmentInfo
operator|.
name|setInfo
argument_list|(
operator|new
name|AssignmentPreferenceInfo
argument_list|(
name|getSolver
argument_list|()
argument_list|,
name|placement
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
name|getFileProxy
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|assignmentInfo
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|batchIdx
operator|%
name|BATCH_SIZE
operator|==
literal|0
condition|)
block|{
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
name|batchIdx
operator|=
literal|0
expr_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Saving btb instructor infos ..."
argument_list|,
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Lecture
name|lecture1
range|:
name|getModel
argument_list|()
operator|.
name|assignedVariables
argument_list|()
control|)
block|{
name|Placement
name|placement1
init|=
operator|(
name|Placement
operator|)
name|lecture1
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
for|for
control|(
name|InstructorConstraint
name|ic
range|:
name|lecture1
operator|.
name|getInstructorConstraints
argument_list|()
control|)
block|{
for|for
control|(
name|Lecture
name|lecture2
range|:
name|ic
operator|.
name|assignedVariables
argument_list|()
control|)
block|{
name|Placement
name|placement2
init|=
operator|(
name|Placement
operator|)
name|lecture2
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|lecture2
operator|.
name|getClassId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|lecture1
operator|.
name|getClassId
argument_list|()
argument_list|)
operator|<=
literal|0
condition|)
continue|continue;
name|int
name|pref
init|=
name|ic
operator|.
name|getDistancePreference
argument_list|(
name|placement1
argument_list|,
name|placement2
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|==
name|PreferenceLevel
operator|.
name|sIntLevelNeutral
condition|)
continue|continue;
name|iProgress
operator|.
name|trace
argument_list|(
literal|"Back-to-back instructor constraint ("
operator|+
name|pref
operator|+
literal|") between "
operator|+
name|placement1
operator|+
literal|" and "
operator|+
name|placement2
argument_list|)
expr_stmt|;
name|BtbInstructorConstraintInfo
name|biInfo
init|=
operator|new
name|BtbInstructorConstraintInfo
argument_list|()
decl_stmt|;
name|biInfo
operator|.
name|setPreference
argument_list|(
name|pref
argument_list|)
expr_stmt|;
name|biInfo
operator|.
name|setInstructorId
argument_list|(
name|ic
operator|.
name|getResourceId
argument_list|()
argument_list|)
expr_stmt|;
name|ConstraintInfo
name|constraintInfo
init|=
operator|new
name|ConstraintInfo
argument_list|()
decl_stmt|;
name|constraintInfo
operator|.
name|setDefinition
argument_list|(
name|defBtbInstrInfo
argument_list|)
expr_stmt|;
name|constraintInfo
operator|.
name|setOpt
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|ic
operator|.
name|getResourceId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|HashSet
name|biAssignments
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|Assignment
name|assignment
init|=
operator|(
name|Assignment
operator|)
name|iAssignments
operator|.
name|get
argument_list|(
name|lecture1
operator|.
name|getClassId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
name|biAssignments
operator|.
name|add
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
name|assignment
operator|=
operator|(
name|Assignment
operator|)
name|iAssignments
operator|.
name|get
argument_list|(
name|lecture2
operator|.
name|getClassId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
name|biAssignments
operator|.
name|add
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|biAssignments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|constraintInfo
operator|.
name|setAssignments
argument_list|(
name|biAssignments
argument_list|)
expr_stmt|;
name|constraintInfo
operator|.
name|setInfo
argument_list|(
name|biInfo
argument_list|,
name|getFileProxy
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|constraintInfo
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|batchIdx
operator|%
name|BATCH_SIZE
operator|==
literal|0
condition|)
block|{
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|iProgress
operator|.
name|trace
argument_list|(
literal|"   NO ASSIGNMENTS !!!"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
name|batchIdx
operator|=
literal|0
expr_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Saving group constraint infos ..."
argument_list|,
name|getModel
argument_list|()
operator|.
name|getGroupConstraints
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|GroupConstraint
name|gc
range|:
name|getModel
argument_list|()
operator|.
name|getGroupConstraints
argument_list|()
control|)
block|{
name|GroupConstraintInfo
name|gcInfo
init|=
operator|new
name|GroupConstraintInfo
argument_list|(
name|gc
argument_list|)
decl_stmt|;
name|ConstraintInfo
name|constraintInfo
init|=
operator|new
name|ConstraintInfo
argument_list|()
decl_stmt|;
name|constraintInfo
operator|.
name|setDefinition
argument_list|(
name|defDistributionInfo
argument_list|)
expr_stmt|;
name|constraintInfo
operator|.
name|setOpt
argument_list|(
name|gcInfo
operator|.
name|isSatisfied
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|trace
argument_list|(
literal|"Distribution constraint "
operator|+
name|gcInfo
operator|.
name|getName
argument_list|()
operator|+
literal|" (p:"
operator|+
name|gcInfo
operator|.
name|getPreference
argument_list|()
operator|+
literal|", s:"
operator|+
name|gcInfo
operator|.
name|isSatisfied
argument_list|()
operator|+
literal|") between"
argument_list|)
expr_stmt|;
name|HashSet
name|gcAssignments
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
name|gc
operator|.
name|variables
argument_list|()
control|)
block|{
name|Assignment
name|assignment
init|=
operator|(
name|Assignment
operator|)
name|iAssignments
operator|.
name|get
argument_list|(
name|lecture
operator|.
name|getClassId
argument_list|()
argument_list|)
decl_stmt|;
name|iProgress
operator|.
name|trace
argument_list|(
literal|"  "
operator|+
name|lecture
operator|.
name|getAssignment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
name|gcAssignments
operator|.
name|add
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|gcAssignments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|constraintInfo
operator|.
name|setAssignments
argument_list|(
name|gcAssignments
argument_list|)
expr_stmt|;
name|constraintInfo
operator|.
name|setInfo
argument_list|(
name|gcInfo
argument_list|,
name|getFileProxy
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|constraintInfo
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|batchIdx
operator|%
name|BATCH_SIZE
operator|==
literal|0
condition|)
block|{
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|iProgress
operator|.
name|trace
argument_list|(
literal|"   NO ASSIGNMENTS !!!"
argument_list|)
expr_stmt|;
block|}
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
name|batchIdx
operator|=
literal|0
expr_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Saving student enrollment infos ..."
argument_list|,
name|getModel
argument_list|()
operator|.
name|getJenrlConstraints
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|JenrlConstraint
name|jc
range|:
name|getModel
argument_list|()
operator|.
name|getJenrlConstraints
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|jc
operator|.
name|isInConflict
argument_list|()
operator|||
operator|!
name|jc
operator|.
name|isOfTheSameProblem
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|JenrlInfo
name|jInfo
init|=
operator|new
name|JenrlInfo
argument_list|(
name|jc
argument_list|)
decl_stmt|;
name|ConstraintInfo
name|constraintInfo
init|=
operator|new
name|ConstraintInfo
argument_list|()
decl_stmt|;
name|constraintInfo
operator|.
name|setDefinition
argument_list|(
name|defJenrlInfo
argument_list|)
expr_stmt|;
name|constraintInfo
operator|.
name|setOpt
argument_list|(
operator|(
name|jInfo
operator|.
name|isSatisfied
argument_list|()
condition|?
literal|"S"
else|:
literal|""
operator|)
operator|+
operator|(
name|jInfo
operator|.
name|isHard
argument_list|()
condition|?
literal|"H"
else|:
literal|""
operator|)
operator|+
operator|(
name|jInfo
operator|.
name|isDistance
argument_list|()
condition|?
literal|"D"
else|:
literal|""
operator|)
operator|+
operator|(
name|jInfo
operator|.
name|isFixed
argument_list|()
condition|?
literal|"F"
else|:
literal|""
operator|)
operator|+
operator|(
name|jInfo
operator|.
name|isImportant
argument_list|()
condition|?
literal|"I"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|Assignment
name|firstAssignment
init|=
operator|(
name|Assignment
operator|)
name|iAssignments
operator|.
name|get
argument_list|(
operator|(
operator|(
name|Lecture
operator|)
name|jc
operator|.
name|first
argument_list|()
operator|)
operator|.
name|getClassId
argument_list|()
argument_list|)
decl_stmt|;
name|Assignment
name|secondAssignment
init|=
operator|(
name|Assignment
operator|)
name|iAssignments
operator|.
name|get
argument_list|(
operator|(
operator|(
name|Lecture
operator|)
name|jc
operator|.
name|second
argument_list|()
operator|)
operator|.
name|getClassId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstAssignment
operator|==
literal|null
operator|||
name|secondAssignment
operator|==
literal|null
condition|)
continue|continue;
name|HashSet
name|jAssignments
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|jAssignments
operator|.
name|add
argument_list|(
name|firstAssignment
argument_list|)
expr_stmt|;
name|jAssignments
operator|.
name|add
argument_list|(
name|secondAssignment
argument_list|)
expr_stmt|;
name|constraintInfo
operator|.
name|setAssignments
argument_list|(
name|jAssignments
argument_list|)
expr_stmt|;
name|constraintInfo
operator|.
name|setInfo
argument_list|(
name|jInfo
argument_list|,
name|getFileProxy
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|constraintInfo
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|batchIdx
operator|%
name|BATCH_SIZE
operator|==
literal|0
condition|)
block|{
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
name|batchIdx
operator|=
literal|0
expr_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Saving committed student enrollment infos ..."
argument_list|,
name|iSolutions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|iSolutions
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Solution
name|solution
init|=
operator|(
name|Solution
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|solution
operator|.
name|updateCommittedStudentEnrollmentInfos
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
block|}
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
comment|/*     		iProgress.setPhase("Saving committed student enrollment infos ...", getModel().assignedVariables().size());     		for (Enumeration e1=getModel().assignedVariables().elements();e1.hasMoreElements();) {     			Lecture lecture = (Lecture)e1.nextElement();     			Assignment assignment = (Assignment)iAssignments.get(lecture.getClassId()); 				if (assignment==null) continue; 				Hashtable infos = JenrlInfo.getCommitedJenrlInfos(lecture);     			for (Iterator i2=infos.entrySet().iterator();i2.hasNext();) {     				Map.Entry entry = (Map.Entry)i2.next();     				Integer assignmentId = (Integer)entry.getKey();     				JenrlInfo jInfo = (JenrlInfo)entry.getValue();     				Assignment other = (new AssignmentDAO()).get(assignmentId,hibSession);     				if (other==null) continue;         			ConstraintInfo constraintInfo = new ConstraintInfo();         			constraintInfo.setDefinition(defJenrlInfo);         			constraintInfo.setOpt("C"+(jInfo.isSatisfied()?"S":"")+(jInfo.isHard()?"H":"")+(jInfo.isDistance()?"D":"")+(jInfo.isFixed()?"F":""));         			HashSet jAssignments = new HashSet();         			jAssignments.add(assignment);         			jAssignments.add(other);         			constraintInfo.setAssignments(jAssignments);         			constraintInfo.setInfo(jInfo,getFileProxy());         			hibSession.save(constraintInfo);     				if (++batchIdx % BATCH_SIZE == 0) {     					hibSession.flush(); hibSession.clear();     				}     			}     			iProgress.incProgress();     		}     		*/
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
name|batchIdx
operator|=
literal|0
expr_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Done"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|Long
name|ret
index|[]
init|=
operator|new
name|Long
index|[
name|iSolutions
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|iSolutions
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
name|ret
index|[
name|idx
operator|++
index|]
operator|=
operator|(
operator|(
name|Solution
operator|)
name|e
operator|.
name|nextElement
argument_list|()
operator|)
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

