begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|interactive
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|NaturalOrderComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|SessionAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ConstraintInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExactTimeMins
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePatternDays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePatternTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|AssignmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|LocationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolutionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|SolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|AssignmentPreferenceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|BtbInstructorConstraintInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|GroupConstraintInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|JenrlInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|RequiredTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|timegrid
operator|.
name|SolutionGridModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|timegrid
operator|.
name|SolverGridModel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|GroupConstraint
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|InstructorConstraint
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|JenrlConstraint
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Lecture
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|preference
operator|.
name|PreferenceCombination
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solver
operator|.
name|Solver
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ClassAssignmentDetails
implements|implements
name|Serializable
implements|,
name|Comparable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
specifier|static
name|DecimalFormat
name|sDF
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.###"
argument_list|,
operator|new
name|java
operator|.
name|text
operator|.
name|DecimalFormatSymbols
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|DecimalFormat
name|sJenrDF
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0"
argument_list|,
operator|new
name|java
operator|.
name|text
operator|.
name|DecimalFormatSymbols
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|NaturalOrderComparator
name|sCmp
init|=
operator|new
name|NaturalOrderComparator
argument_list|()
decl_stmt|;
specifier|private
name|ClassInfo
name|iClass
init|=
literal|null
decl_stmt|;
specifier|private
name|TimeInfo
name|iTime
init|=
literal|null
decl_stmt|;
specifier|private
name|RoomInfo
index|[]
name|iRoom
init|=
literal|null
decl_stmt|;
specifier|private
name|InstructorInfo
index|[]
name|iInstructor
init|=
literal|null
decl_stmt|;
specifier|private
name|TimeInfo
name|iInitialTime
init|=
literal|null
decl_stmt|;
specifier|private
name|RoomInfo
index|[]
name|iInitialRoom
init|=
literal|null
decl_stmt|;
specifier|private
name|TimeInfo
name|iAssignedTime
init|=
literal|null
decl_stmt|;
specifier|private
name|RoomInfo
index|[]
name|iAssignedRoom
init|=
literal|null
decl_stmt|;
specifier|private
name|AssignmentPreferenceInfo
name|iAssignmentInfo
init|=
literal|null
decl_stmt|;
specifier|private
name|AssignmentPreferenceInfo
name|iAssignedAssignmentInfo
init|=
literal|null
decl_stmt|;
specifier|private
name|RoomInfos
name|iRooms
init|=
operator|new
name|RoomInfos
argument_list|()
decl_stmt|;
specifier|private
name|TimeInfos
name|iTimes
init|=
operator|new
name|TimeInfos
argument_list|()
decl_stmt|;
specifier|private
name|Vector
name|iStudentConflicts
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
specifier|private
name|Vector
name|iGroupConstraintInfos
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
specifier|private
name|Vector
name|iBtbInstructorInfos
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
specifier|public
name|ClassInfo
name|getClazz
parameter_list|()
block|{
return|return
name|iClass
return|;
block|}
specifier|public
name|TimeInfo
name|getTime
parameter_list|()
block|{
return|return
name|iTime
return|;
block|}
specifier|public
name|RoomInfo
index|[]
name|getRoom
parameter_list|()
block|{
return|return
name|iRoom
return|;
block|}
specifier|public
name|InstructorInfo
index|[]
name|getInstructor
parameter_list|()
block|{
return|return
name|iInstructor
return|;
block|}
specifier|public
name|TimeInfo
name|getInitialTime
parameter_list|()
block|{
return|return
name|iInitialTime
return|;
block|}
specifier|public
name|RoomInfo
index|[]
name|getInitialRoom
parameter_list|()
block|{
return|return
name|iInitialRoom
return|;
block|}
specifier|public
name|TimeInfo
name|getAssignedTime
parameter_list|()
block|{
return|return
operator|(
name|iAssignedTime
operator|!=
literal|null
condition|?
name|iAssignedTime
else|:
name|iTime
operator|)
return|;
block|}
specifier|public
name|RoomInfo
index|[]
name|getAssignedRoom
parameter_list|()
block|{
return|return
operator|(
name|iAssignedRoom
operator|!=
literal|null
condition|?
name|iAssignedRoom
else|:
name|iRoom
operator|)
return|;
block|}
specifier|public
name|boolean
name|isInitial
parameter_list|()
block|{
return|return
name|getAssignedTime
argument_list|()
operator|!=
literal|null
operator|&&
name|getAssignedRoom
argument_list|()
operator|!=
literal|null
operator|&&
name|getAssignedTime
argument_list|()
operator|.
name|equals
argument_list|(
name|getInitialTime
argument_list|()
argument_list|)
operator|&&
name|getAssignedRoom
argument_list|()
operator|.
name|equals
argument_list|(
name|getInitialRoom
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|setAssigned
parameter_list|(
name|AssignmentPreferenceInfo
name|info
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|roomIds
parameter_list|,
name|int
name|days
parameter_list|,
name|int
name|slot
parameter_list|,
name|Long
name|patternId
parameter_list|,
name|Long
name|datePatternId
parameter_list|)
block|{
name|iAssignedTime
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|days
operator|>=
literal|0
operator|&&
name|slot
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|Enumeration
name|e
init|=
name|iTimes
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|TimeInfo
name|time
init|=
operator|(
name|TimeInfo
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|time
operator|.
name|getDays
argument_list|()
operator|==
name|days
operator|&&
name|time
operator|.
name|getStartSlot
argument_list|()
operator|==
name|slot
operator|&&
operator|(
name|patternId
operator|==
literal|null
operator|||
name|patternId
operator|.
name|equals
argument_list|(
name|time
operator|.
name|getPatternId
argument_list|()
argument_list|)
operator|)
operator|&&
operator|(
name|datePatternId
operator|==
literal|null
operator|||
name|datePatternId
operator|.
name|equals
argument_list|(
name|time
operator|.
name|getDatePatternId
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|iAssignedTime
operator|=
name|time
expr_stmt|;
break|break;
block|}
block|}
block|}
name|iAssignedRoom
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|roomIds
operator|!=
literal|null
condition|)
block|{
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|iAssignedRoom
operator|=
operator|new
name|RoomInfo
index|[
name|roomIds
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|Long
name|roomId
range|:
name|roomIds
control|)
block|{
for|for
control|(
name|Enumeration
name|f
init|=
name|iRooms
operator|.
name|elements
argument_list|()
init|;
name|f
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|RoomInfo
name|room
init|=
operator|(
name|RoomInfo
operator|)
name|f
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|room
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|roomId
argument_list|)
condition|)
block|{
name|iAssignedRoom
index|[
name|idx
operator|++
index|]
operator|=
name|room
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
name|iAssignedAssignmentInfo
operator|=
name|info
expr_stmt|;
block|}
specifier|public
name|AssignmentPreferenceInfo
name|getAssignmentInfo
parameter_list|()
block|{
return|return
name|iAssignmentInfo
return|;
block|}
specifier|public
name|RoomInfos
name|getRooms
parameter_list|()
block|{
return|return
name|iRooms
return|;
block|}
specifier|public
name|TimeInfos
name|getTimes
parameter_list|()
block|{
return|return
name|iTimes
return|;
block|}
specifier|public
name|Vector
name|getStudentConflicts
parameter_list|()
block|{
return|return
name|iStudentConflicts
return|;
block|}
specifier|public
name|Vector
name|getGroupConstraints
parameter_list|()
block|{
return|return
name|iGroupConstraintInfos
return|;
block|}
specifier|public
name|Vector
name|getBtbInstructors
parameter_list|()
block|{
return|return
name|iBtbInstructorInfos
return|;
block|}
specifier|public
name|boolean
name|hasViolatedGroupConstraint
parameter_list|()
block|{
for|for
control|(
name|Enumeration
name|e
init|=
name|iGroupConstraintInfos
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|DistributionInfo
name|info
init|=
operator|(
name|DistributionInfo
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|info
operator|.
name|getInfo
argument_list|()
operator|.
name|isSatisfied
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|ClassAssignmentDetails
parameter_list|(
name|Solver
name|solver
parameter_list|,
name|Lecture
name|lecture
parameter_list|,
name|boolean
name|includeConstraints
parameter_list|)
block|{
name|this
argument_list|(
name|solver
argument_list|,
name|lecture
argument_list|,
operator|(
name|Placement
operator|)
name|lecture
operator|.
name|getAssignment
argument_list|()
argument_list|,
name|includeConstraints
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ClassAssignmentDetails
parameter_list|(
name|Solver
name|solver
parameter_list|,
name|Lecture
name|lecture
parameter_list|,
name|Placement
name|placement
parameter_list|,
name|boolean
name|includeConstraints
parameter_list|)
block|{
name|iClass
operator|=
operator|new
name|ClassInfo
argument_list|(
name|lecture
operator|.
name|getName
argument_list|()
argument_list|,
name|lecture
operator|.
name|getClassId
argument_list|()
argument_list|,
name|lecture
operator|.
name|getNrRooms
argument_list|()
argument_list|,
name|SolverGridModel
operator|.
name|hardConflicts2pref
argument_list|(
name|lecture
argument_list|,
name|placement
argument_list|)
argument_list|,
name|lecture
operator|.
name|minRoomSize
argument_list|()
argument_list|,
name|lecture
operator|.
name|getOrd
argument_list|()
argument_list|,
name|lecture
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|placement
operator|.
name|isMultiRoom
argument_list|()
condition|)
block|{
name|iRoom
operator|=
operator|new
name|RoomInfo
index|[
name|placement
operator|.
name|getRoomLocations
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|RoomLocation
argument_list|>
name|e
init|=
name|placement
operator|.
name|getRoomLocations
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|RoomLocation
name|room
init|=
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
name|iRoom
index|[
name|idx
index|]
operator|=
operator|new
name|RoomInfo
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
name|room
operator|.
name|getId
argument_list|()
argument_list|,
name|room
operator|.
name|getRoomSize
argument_list|()
argument_list|,
operator|(
name|room
operator|.
name|getPreference
argument_list|()
operator|==
literal|0
operator|&&
name|lecture
operator|.
name|nrRoomLocations
argument_list|()
operator|==
name|lecture
operator|.
name|getNrRooms
argument_list|()
condition|?
name|PreferenceLevel
operator|.
name|sIntLevelRequired
else|:
name|room
operator|.
name|getPreference
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|RoomLocation
name|room
init|=
name|placement
operator|.
name|getRoomLocation
argument_list|()
decl_stmt|;
name|iRoom
operator|=
operator|new
name|RoomInfo
index|[]
block|{
operator|new
name|RoomInfo
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
name|room
operator|.
name|getId
argument_list|()
argument_list|,
name|room
operator|.
name|getRoomSize
argument_list|()
argument_list|,
operator|(
name|room
operator|.
name|getPreference
argument_list|()
operator|==
literal|0
operator|&&
name|lecture
operator|.
name|nrRoomLocations
argument_list|()
operator|==
literal|1
condition|?
name|PreferenceLevel
operator|.
name|sIntLevelRequired
else|:
name|room
operator|.
name|getPreference
argument_list|()
operator|)
argument_list|)
block|}
expr_stmt|;
block|}
name|TimeLocation
name|time
init|=
name|placement
operator|.
name|getTimeLocation
argument_list|()
decl_stmt|;
name|int
name|min
init|=
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|time
operator|.
name|getNrSlotsPerMeeting
argument_list|()
operator|-
name|time
operator|.
name|getBreakTime
argument_list|()
decl_stmt|;
name|iTime
operator|=
operator|new
name|TimeInfo
argument_list|(
name|time
operator|.
name|getDayCode
argument_list|()
argument_list|,
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|,
operator|(
name|time
operator|.
name|getPreference
argument_list|()
operator|==
literal|0
operator|&&
name|lecture
operator|.
name|nrTimeLocations
argument_list|()
operator|==
literal|1
condition|?
name|PreferenceLevel
operator|.
name|sIntLevelRequired
else|:
name|time
operator|.
name|getPreference
argument_list|()
operator|)
argument_list|,
name|min
argument_list|,
name|time
operator|.
name|getDatePatternName
argument_list|()
argument_list|,
name|time
operator|.
name|getTimePatternId
argument_list|()
argument_list|,
name|time
operator|.
name|getDatePatternId
argument_list|()
argument_list|,
name|time
operator|.
name|getDatePatternPreference
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|lecture
operator|.
name|getInstructorConstraints
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iInstructor
operator|=
operator|new
name|InstructorInfo
index|[
name|lecture
operator|.
name|getInstructorConstraints
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lecture
operator|.
name|getInstructorConstraints
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|InstructorConstraint
name|ic
init|=
operator|(
name|InstructorConstraint
operator|)
name|lecture
operator|.
name|getInstructorConstraints
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|iInstructor
index|[
name|i
index|]
operator|=
operator|new
name|InstructorInfo
argument_list|(
name|ic
operator|.
name|getName
argument_list|()
argument_list|,
name|ic
operator|.
name|getResourceId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|iAssignmentInfo
operator|=
operator|new
name|AssignmentPreferenceInfo
argument_list|(
name|solver
argument_list|,
name|placement
argument_list|)
expr_stmt|;
block|}
name|Placement
name|initialPlacement
init|=
operator|(
name|Placement
operator|)
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|initialPlacement
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|initialPlacement
operator|.
name|isMultiRoom
argument_list|()
condition|)
block|{
name|iInitialRoom
operator|=
operator|new
name|RoomInfo
index|[
name|initialPlacement
operator|.
name|getRoomLocations
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|RoomLocation
argument_list|>
name|e
init|=
name|initialPlacement
operator|.
name|getRoomLocations
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|RoomLocation
name|room
init|=
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
name|iInitialRoom
index|[
name|idx
index|]
operator|=
operator|new
name|RoomInfo
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
name|room
operator|.
name|getId
argument_list|()
argument_list|,
name|room
operator|.
name|getRoomSize
argument_list|()
argument_list|,
operator|(
name|room
operator|.
name|getPreference
argument_list|()
operator|==
literal|0
operator|&&
name|lecture
operator|.
name|nrRoomLocations
argument_list|()
operator|==
name|lecture
operator|.
name|getNrRooms
argument_list|()
condition|?
name|PreferenceLevel
operator|.
name|sIntLevelRequired
else|:
name|room
operator|.
name|getPreference
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|RoomLocation
name|room
init|=
name|initialPlacement
operator|.
name|getRoomLocation
argument_list|()
decl_stmt|;
name|iInitialRoom
operator|=
operator|new
name|RoomInfo
index|[]
block|{
operator|new
name|RoomInfo
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
name|room
operator|.
name|getId
argument_list|()
argument_list|,
name|room
operator|.
name|getRoomSize
argument_list|()
argument_list|,
operator|(
name|room
operator|.
name|getPreference
argument_list|()
operator|==
literal|0
operator|&&
name|lecture
operator|.
name|nrRoomLocations
argument_list|()
operator|==
literal|1
condition|?
name|PreferenceLevel
operator|.
name|sIntLevelRequired
else|:
name|room
operator|.
name|getPreference
argument_list|()
operator|)
argument_list|)
block|}
expr_stmt|;
block|}
name|TimeLocation
name|time
init|=
name|initialPlacement
operator|.
name|getTimeLocation
argument_list|()
decl_stmt|;
name|int
name|min
init|=
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|time
operator|.
name|getNrSlotsPerMeeting
argument_list|()
operator|-
name|time
operator|.
name|getBreakTime
argument_list|()
decl_stmt|;
name|iInitialTime
operator|=
operator|new
name|TimeInfo
argument_list|(
name|time
operator|.
name|getDayCode
argument_list|()
argument_list|,
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|,
operator|(
name|time
operator|.
name|getPreference
argument_list|()
operator|==
literal|0
operator|&&
name|lecture
operator|.
name|nrTimeLocations
argument_list|()
operator|==
literal|1
condition|?
name|PreferenceLevel
operator|.
name|sIntLevelRequired
else|:
name|time
operator|.
name|getPreference
argument_list|()
operator|)
argument_list|,
name|min
argument_list|,
name|time
operator|.
name|getDatePatternName
argument_list|()
argument_list|,
name|time
operator|.
name|getTimePatternId
argument_list|()
argument_list|,
name|time
operator|.
name|getDatePatternId
argument_list|()
argument_list|,
name|time
operator|.
name|getDatePatternPreference
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TimeLocation
name|time
range|:
name|lecture
operator|.
name|timeLocations
argument_list|()
control|)
block|{
name|int
name|min
init|=
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|time
operator|.
name|getNrSlotsPerMeeting
argument_list|()
operator|-
name|time
operator|.
name|getBreakTime
argument_list|()
decl_stmt|;
name|iTimes
operator|.
name|add
argument_list|(
operator|new
name|TimeInfo
argument_list|(
name|time
operator|.
name|getDayCode
argument_list|()
argument_list|,
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|,
operator|(
name|time
operator|.
name|getPreference
argument_list|()
operator|==
literal|0
operator|&&
name|lecture
operator|.
name|nrTimeLocations
argument_list|()
operator|==
literal|1
condition|?
name|PreferenceLevel
operator|.
name|sIntLevelRequired
else|:
name|time
operator|.
name|getPreference
argument_list|()
operator|)
argument_list|,
name|min
argument_list|,
name|time
operator|.
name|getDatePatternName
argument_list|()
argument_list|,
name|time
operator|.
name|getTimePatternId
argument_list|()
argument_list|,
name|time
operator|.
name|getDatePatternId
argument_list|()
argument_list|,
name|time
operator|.
name|getDatePatternPreference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RoomLocation
name|room
range|:
name|lecture
operator|.
name|roomLocations
argument_list|()
control|)
block|{
name|iRooms
operator|.
name|add
argument_list|(
operator|new
name|RoomInfo
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
name|room
operator|.
name|getId
argument_list|()
argument_list|,
name|room
operator|.
name|getRoomSize
argument_list|()
argument_list|,
operator|(
name|room
operator|.
name|getPreference
argument_list|()
operator|==
literal|0
operator|&&
name|lecture
operator|.
name|nrRoomLocations
argument_list|()
operator|==
name|lecture
operator|.
name|getNrRooms
argument_list|()
condition|?
name|PreferenceLevel
operator|.
name|sIntLevelRequired
else|:
name|room
operator|.
name|getPreference
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeConstraints
condition|)
block|{
for|for
control|(
name|Iterator
name|e
init|=
name|lecture
operator|.
name|activeJenrls
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JenrlConstraint
name|jenrl
init|=
operator|(
name|JenrlConstraint
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
name|Lecture
name|another
init|=
operator|(
name|Lecture
operator|)
name|jenrl
operator|.
name|another
argument_list|(
name|lecture
argument_list|)
decl_stmt|;
name|iStudentConflicts
operator|.
name|add
argument_list|(
operator|new
name|StudentConflictInfo
argument_list|(
name|another
operator|.
name|getClassId
argument_list|()
argument_list|,
operator|new
name|JenrlInfo
argument_list|(
name|jenrl
argument_list|)
argument_list|,
name|StudentConflictInfo
operator|.
name|CLASS_CONFLICT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
block|{
name|Hashtable
name|infos
init|=
name|JenrlInfo
operator|.
name|getCommitedJenrlInfos
argument_list|(
name|lecture
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|infos
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|assignmentId
init|=
operator|(
name|Long
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|JenrlInfo
name|jInfo
init|=
operator|(
name|JenrlInfo
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|iStudentConflicts
operator|.
name|add
argument_list|(
operator|new
name|StudentConflictInfo
argument_list|(
name|assignmentId
argument_list|,
name|jInfo
argument_list|,
name|StudentConflictInfo
operator|.
name|OTHER_ASSIGNMENT_CONFLICT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Constraint
name|c
range|:
name|lecture
operator|.
name|constraints
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|instanceof
name|GroupConstraint
condition|)
block|{
name|GroupConstraint
name|gc
init|=
operator|(
name|GroupConstraint
operator|)
name|c
decl_stmt|;
name|DistributionInfo
name|dist
init|=
operator|new
name|DistributionInfo
argument_list|(
operator|new
name|GroupConstraintInfo
argument_list|(
name|gc
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Lecture
name|another
range|:
name|gc
operator|.
name|variables
argument_list|()
control|)
block|{
if|if
condition|(
name|another
operator|.
name|equals
argument_list|(
name|lecture
argument_list|)
condition|)
continue|continue;
name|dist
operator|.
name|addClass
argument_list|(
name|another
operator|.
name|getClassId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iGroupConstraintInfos
operator|.
name|add
argument_list|(
name|dist
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|lecture
operator|.
name|getInstructorConstraints
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|placement
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|InstructorConstraint
name|ic
range|:
name|lecture
operator|.
name|getInstructorConstraints
argument_list|()
control|)
block|{
for|for
control|(
name|Lecture
name|other
range|:
name|ic
operator|.
name|variables
argument_list|()
control|)
block|{
if|if
condition|(
name|other
operator|.
name|equals
argument_list|(
name|lecture
argument_list|)
operator|||
name|other
operator|.
name|getAssignment
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|int
name|pref
init|=
name|ic
operator|.
name|getDistancePreference
argument_list|(
name|placement
argument_list|,
operator|(
name|Placement
operator|)
name|other
operator|.
name|getAssignment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|==
name|PreferenceLevel
operator|.
name|sIntLevelNeutral
condition|)
continue|continue;
name|iBtbInstructorInfos
operator|.
name|add
argument_list|(
operator|new
name|BtbInstructorInfo
argument_list|(
name|other
operator|.
name|getClassId
argument_list|()
argument_list|,
name|pref
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|public
name|ClassAssignmentDetails
parameter_list|(
name|Solution
name|solution
parameter_list|,
name|Assignment
name|assignment
parameter_list|,
name|boolean
name|includeConstraints
parameter_list|,
name|Session
name|hibSession
parameter_list|,
name|String
name|instructorNameFormat
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
name|iAssignmentInfo
operator|=
operator|(
name|AssignmentPreferenceInfo
operator|)
name|assignment
operator|.
name|getAssignmentInfo
argument_list|(
literal|"AssignmentInfo"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iAssignmentInfo
operator|==
literal|null
condition|)
name|iAssignmentInfo
operator|=
operator|new
name|AssignmentPreferenceInfo
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|assignment
operator|.
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iRoom
operator|=
operator|new
name|RoomInfo
index|[
name|assignment
operator|.
name|getRooms
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|assignment
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|Location
name|room
init|=
operator|(
name|Location
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|iRoom
index|[
name|idx
index|]
operator|=
operator|new
name|RoomInfo
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
argument_list|,
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|room
operator|.
name|getCapacity
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|iAssignmentInfo
operator|.
name|getRoomPreference
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|iRoom
operator|=
operator|new
name|RoomInfo
index|[
literal|0
index|]
expr_stmt|;
block|}
name|int
name|length
init|=
name|assignment
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getSlotsPerMtg
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|breakTime
init|=
name|assignment
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getBreakTime
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getType
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|TimePattern
operator|.
name|sTypeExactTime
condition|)
block|{
name|length
operator|=
name|ExactTimeMins
operator|.
name|getNrSlotsPerMtg
argument_list|(
name|assignment
operator|.
name|getDays
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|breakTime
operator|=
name|ExactTimeMins
operator|.
name|getBreakTime
argument_list|(
name|assignment
operator|.
name|getDays
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|min
init|=
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|length
operator|-
name|breakTime
decl_stmt|;
name|DatePattern
name|datePattern
init|=
name|assignment
operator|.
name|getDatePattern
argument_list|()
decl_stmt|;
name|iTime
operator|=
operator|new
name|TimeInfo
argument_list|(
name|assignment
operator|.
name|getDays
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|assignment
operator|.
name|getStartSlot
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|iAssignmentInfo
operator|.
name|getTimePreference
argument_list|()
argument_list|,
name|min
argument_list|,
operator|(
name|datePattern
operator|==
literal|null
condition|?
literal|"not set"
else|:
name|datePattern
operator|.
name|getName
argument_list|()
operator|)
argument_list|,
name|assignment
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
operator|(
name|datePattern
operator|==
literal|null
condition|?
literal|null
else|:
name|datePattern
operator|.
name|getUniqueId
argument_list|()
operator|)
argument_list|,
name|iAssignmentInfo
operator|.
name|getDatePatternPref
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|assignment
operator|.
name|getInstructors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iInstructor
operator|=
operator|new
name|InstructorInfo
index|[
name|assignment
operator|.
name|getInstructors
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|assignment
operator|.
name|getInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|DepartmentalInstructor
name|di
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|iInstructor
index|[
name|idx
index|]
operator|=
operator|new
name|InstructorInfo
argument_list|(
name|di
operator|.
name|getName
argument_list|(
name|instructorNameFormat
argument_list|)
argument_list|,
name|di
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|includeConstraints
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|assignment
operator|.
name|getConstraintInfoTable
argument_list|(
literal|"JenrlInfo"
argument_list|)
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ConstraintInfo
name|constraint
init|=
operator|(
name|ConstraintInfo
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|JenrlInfo
name|info
init|=
operator|(
name|JenrlInfo
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Assignment
name|another
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|constraint
operator|.
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Assignment
name|x
init|=
operator|(
name|Assignment
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|assignment
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|another
operator|=
name|x
expr_stmt|;
break|break;
block|}
name|iStudentConflicts
operator|.
name|add
argument_list|(
operator|new
name|StudentConflictInfo
argument_list|(
name|another
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|info
argument_list|,
name|StudentConflictInfo
operator|.
name|OTHER_ASSIGNMENT_CONFLICT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|assignment
operator|.
name|getConstraintInfoTable
argument_list|(
literal|"DistributionInfo"
argument_list|)
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ConstraintInfo
name|constraint
init|=
operator|(
name|ConstraintInfo
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|GroupConstraintInfo
name|info
init|=
operator|(
name|GroupConstraintInfo
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|DistributionInfo
name|dist
init|=
operator|new
name|DistributionInfo
argument_list|(
name|info
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|constraint
operator|.
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Assignment
name|another
init|=
operator|(
name|Assignment
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|another
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|assignment
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|dist
operator|.
name|addClass
argument_list|(
name|another
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iGroupConstraintInfos
operator|.
name|add
argument_list|(
name|dist
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|assignment
operator|.
name|getConstraintInfoTable
argument_list|(
literal|"BtbInstructorInfo"
argument_list|)
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ConstraintInfo
name|constraint
init|=
operator|(
name|ConstraintInfo
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|BtbInstructorConstraintInfo
name|info
init|=
operator|(
name|BtbInstructorConstraintInfo
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Assignment
name|another
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|constraint
operator|.
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Assignment
name|x
init|=
operator|(
name|Assignment
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|assignment
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|another
operator|=
name|x
expr_stmt|;
break|break;
block|}
name|iBtbInstructorInfos
operator|.
name|add
argument_list|(
operator|new
name|BtbInstructorInfo
argument_list|(
name|another
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|info
operator|.
name|getPreference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|iClass
operator|=
operator|new
name|ClassInfo
argument_list|(
name|assignment
operator|.
name|getClassName
argument_list|()
argument_list|,
name|assignment
operator|.
name|getClassId
argument_list|()
argument_list|,
name|assignment
operator|.
name|getRooms
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|SolutionGridModel
operator|.
name|hardConflicts2pref
argument_list|(
name|iAssignmentInfo
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
name|assignment
operator|.
name|getClazz
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|ClassAssignmentDetails
name|createClassAssignmentDetailsFromAssignment
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|Long
name|assignmentId
parameter_list|,
name|boolean
name|includeConstraints
parameter_list|)
throws|throws
name|Exception
block|{
name|AssignmentDAO
name|dao
init|=
operator|new
name|AssignmentDAO
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|dao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Assignment
name|assignment
init|=
name|dao
operator|.
name|get
argument_list|(
name|assignmentId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignment
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|instructorNameFormat
init|=
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
name|UserProperty
operator|.
name|NameFormat
argument_list|)
decl_stmt|;
name|ClassAssignmentDetails
name|ret
init|=
operator|new
name|ClassAssignmentDetails
argument_list|(
name|assignment
operator|.
name|getSolution
argument_list|()
argument_list|,
name|assignment
argument_list|,
name|includeConstraints
argument_list|,
name|hibSession
argument_list|,
name|instructorNameFormat
argument_list|)
decl_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|ClassAssignmentDetails
name|createClassAssignmentDetails
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|SolverProxy
name|solver
parameter_list|,
name|Long
name|classId
parameter_list|,
name|boolean
name|includeConstraints
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|instructorNameFormat
init|=
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
name|UserProperty
operator|.
name|NameFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
name|ClassAssignmentDetails
name|details
init|=
name|solver
operator|.
name|getClassAssignmentDetails
argument_list|(
name|classId
argument_list|,
name|includeConstraints
argument_list|)
decl_stmt|;
if|if
condition|(
name|details
operator|!=
literal|null
condition|)
return|return
name|details
return|;
try|try
block|{
name|Class_DAO
name|dao
init|=
operator|new
name|Class_DAO
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|dao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Class_
name|clazz
init|=
name|dao
operator|.
name|get
argument_list|(
name|classId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Assignment
name|assignment
init|=
name|solver
operator|.
name|getAssignment
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignment
operator|==
literal|null
operator|||
name|assignment
operator|.
name|getSolution
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|ClassAssignmentDetails
argument_list|(
name|assignment
operator|.
name|getSolution
argument_list|()
argument_list|,
name|assignment
argument_list|,
literal|false
argument_list|,
name|hibSession
argument_list|,
name|instructorNameFormat
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
name|Class_
name|clazz
init|=
operator|(
operator|new
name|Class_DAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|classId
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|SolutionDAO
name|dao
init|=
operator|new
name|SolutionDAO
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|dao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|String
name|solutionIdsStr
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|SelectedSolution
argument_list|)
decl_stmt|;
if|if
condition|(
name|solutionIdsStr
operator|!=
literal|null
operator|&&
name|solutionIdsStr
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|solutionIdsStr
argument_list|,
literal|","
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|Long
name|solutionId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
name|Solution
name|solution
init|=
name|dao
operator|.
name|get
argument_list|(
name|solutionId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|solution
operator|==
literal|null
operator|||
operator|!
name|solution
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getSolverGroup
argument_list|()
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|Iterator
name|i
init|=
name|clazz
operator|.
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Assignment
name|assignment
init|=
operator|(
name|Assignment
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|solution
operator|.
name|equals
argument_list|(
name|assignment
operator|.
name|getSolution
argument_list|()
argument_list|)
condition|)
return|return
operator|new
name|ClassAssignmentDetails
argument_list|(
name|assignment
operator|.
name|getSolution
argument_list|()
argument_list|,
name|assignment
argument_list|,
name|includeConstraints
argument_list|,
name|hibSession
argument_list|,
name|instructorNameFormat
argument_list|)
return|;
block|}
block|}
block|}
if|if
condition|(
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|ClassAssignmentDetails
argument_list|(
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|.
name|getSolution
argument_list|()
argument_list|,
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
argument_list|,
name|includeConstraints
argument_list|,
name|hibSession
argument_list|,
name|instructorNameFormat
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
class|class
name|ClassInfo
implements|implements
name|Serializable
implements|,
name|Comparable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|String
name|iName
decl_stmt|;
specifier|private
name|Long
name|iClassId
decl_stmt|;
specifier|private
name|String
name|iPref
decl_stmt|;
specifier|private
name|int
name|iRoomCap
decl_stmt|;
specifier|private
name|int
name|iNrRooms
decl_stmt|;
specifier|private
name|int
name|iOrd
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|String
name|iNote
decl_stmt|;
specifier|private
specifier|transient
name|Class_
name|iClazz
decl_stmt|;
specifier|public
name|ClassInfo
parameter_list|(
name|String
name|name
parameter_list|,
name|Long
name|classId
parameter_list|,
name|int
name|nrRooms
parameter_list|,
name|String
name|pref
parameter_list|,
name|int
name|roomCapacity
parameter_list|,
name|int
name|ord
parameter_list|,
name|String
name|note
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
name|iClassId
operator|=
name|classId
expr_stmt|;
name|iPref
operator|=
name|pref
expr_stmt|;
name|iNrRooms
operator|=
name|nrRooms
expr_stmt|;
name|iRoomCap
operator|=
name|roomCapacity
expr_stmt|;
name|iOrd
operator|=
name|ord
expr_stmt|;
name|iNote
operator|=
name|note
expr_stmt|;
block|}
specifier|public
name|ClassInfo
parameter_list|(
name|String
name|name
parameter_list|,
name|Long
name|classId
parameter_list|,
name|int
name|nrRooms
parameter_list|,
name|String
name|pref
parameter_list|,
name|int
name|roomCapacity
parameter_list|,
name|Class_
name|clazz
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
name|iClassId
operator|=
name|classId
expr_stmt|;
name|iPref
operator|=
name|pref
expr_stmt|;
name|iNrRooms
operator|=
name|nrRooms
expr_stmt|;
name|iRoomCap
operator|=
name|roomCapacity
expr_stmt|;
name|iClazz
operator|=
name|clazz
expr_stmt|;
name|iNote
operator|=
operator|(
name|iClazz
operator|==
literal|null
condition|?
literal|null
else|:
name|iClazz
operator|.
name|getNotes
argument_list|()
operator|)
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|Long
name|getClassId
parameter_list|()
block|{
return|return
name|iClassId
return|;
block|}
specifier|public
name|int
name|getRoomCapacity
parameter_list|()
block|{
return|return
name|iRoomCap
return|;
block|}
specifier|public
name|String
name|getPref
parameter_list|()
block|{
return|return
name|iPref
return|;
block|}
specifier|public
name|String
name|getNote
parameter_list|()
block|{
return|return
name|iNote
return|;
block|}
specifier|public
name|void
name|setPref
parameter_list|(
name|String
name|pref
parameter_list|)
block|{
name|iPref
operator|=
name|pref
expr_stmt|;
block|}
specifier|public
name|int
name|nrRooms
parameter_list|()
block|{
return|return
name|iNrRooms
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|ClassInfo
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ClassInfo
operator|)
name|o
operator|)
operator|.
name|getClassId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|toHtml
parameter_list|(
name|boolean
name|link
parameter_list|)
block|{
return|return
name|toHtml
argument_list|(
name|link
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|String
name|toHtml
parameter_list|(
name|boolean
name|link
parameter_list|,
name|boolean
name|newWindow
parameter_list|)
block|{
if|if
condition|(
name|link
condition|)
block|{
if|if
condition|(
name|newWindow
condition|)
block|{
return|return
literal|"<a class='noFancyLinks' onMouseOver=\"this.style.cursor='hand';this.style.cursor='pointer';\" onClick=\"showGwtDialog('Suggestions', 'suggestions.do?id="
operator|+
name|iClassId
operator|+
literal|"&op=Reset','900','90%');\"><font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|iPref
argument_list|)
operator|+
literal|"'>"
operator|+
name|iName
operator|+
literal|"</font></a>"
return|;
block|}
else|else
block|{
return|return
literal|"<a class='noFancyLinks' href='suggestions.do?id="
operator|+
name|iClassId
operator|+
literal|"&op=Select&noCacheTS="
operator|+
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|+
literal|"'><font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|iPref
argument_list|)
operator|+
literal|"'>"
operator|+
name|iName
operator|+
literal|"</font></a>"
return|;
block|}
block|}
else|else
return|return
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|iPref
argument_list|)
operator|+
literal|"'>"
operator|+
name|iName
operator|+
literal|"</font>"
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|ClassInfo
operator|)
condition|)
return|return
operator|-
literal|1
return|;
name|ClassInfo
name|ci
init|=
operator|(
name|ClassInfo
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|iOrd
operator|>=
literal|0
operator|&&
name|ci
operator|.
name|iOrd
operator|>=
literal|0
condition|)
block|{
name|int
name|cmp
init|=
name|Double
operator|.
name|compare
argument_list|(
name|iOrd
argument_list|,
name|ci
operator|.
name|iOrd
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
if|else if
condition|(
name|iClazz
operator|!=
literal|null
operator|&&
name|ci
operator|.
name|iClazz
operator|!=
literal|null
condition|)
block|{
name|int
name|cmp
init|=
operator|(
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
operator|)
operator|.
name|compare
argument_list|(
name|iClazz
argument_list|,
name|ci
operator|.
name|iClazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
return|return
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
operator|(
operator|(
name|ClassInfo
operator|)
name|o
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
class|class
name|TimeInfo
implements|implements
name|Serializable
implements|,
name|Comparable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|int
name|iDays
decl_stmt|;
specifier|private
name|int
name|iStartSlot
decl_stmt|;
specifier|private
name|int
name|iMin
decl_stmt|;
specifier|private
name|String
name|iDatePatternName
decl_stmt|;
specifier|private
name|int
name|iDatePatternPref
decl_stmt|;
specifier|private
name|int
name|iPref
decl_stmt|;
specifier|private
name|boolean
name|iStrike
init|=
literal|false
decl_stmt|;
specifier|private
name|Long
name|iPatternId
init|=
literal|null
decl_stmt|,
name|iDatePatternId
decl_stmt|;
specifier|private
specifier|transient
name|String
name|iHint
init|=
literal|null
decl_stmt|;
specifier|public
name|TimeInfo
parameter_list|(
name|int
name|days
parameter_list|,
name|int
name|startSlot
parameter_list|,
name|int
name|pref
parameter_list|,
name|int
name|min
parameter_list|,
name|String
name|datePatternName
parameter_list|,
name|Long
name|patternId
parameter_list|,
name|Long
name|datePatternId
parameter_list|,
name|int
name|datePatternPref
parameter_list|)
block|{
name|iDays
operator|=
name|days
expr_stmt|;
name|iStartSlot
operator|=
name|startSlot
expr_stmt|;
name|iPref
operator|=
name|pref
expr_stmt|;
name|iStrike
operator|=
operator|(
name|iPref
operator|>
literal|500
operator|)
expr_stmt|;
name|iMin
operator|=
name|min
expr_stmt|;
name|iDatePatternName
operator|=
name|datePatternName
expr_stmt|;
name|iPatternId
operator|=
name|patternId
expr_stmt|;
name|iDatePatternId
operator|=
name|datePatternId
expr_stmt|;
name|iDatePatternPref
operator|=
name|datePatternPref
expr_stmt|;
block|}
specifier|public
name|int
name|getDays
parameter_list|()
block|{
return|return
name|iDays
return|;
block|}
specifier|public
name|int
name|getStartSlot
parameter_list|()
block|{
return|return
name|iStartSlot
return|;
block|}
specifier|public
name|int
name|getPref
parameter_list|()
block|{
return|return
name|iPref
return|;
block|}
specifier|public
name|int
name|getMin
parameter_list|()
block|{
return|return
name|iMin
return|;
block|}
specifier|public
name|String
name|getDatePatternName
parameter_list|()
block|{
return|return
name|iDatePatternName
return|;
block|}
specifier|public
name|String
name|getDatePatternHtml
parameter_list|()
block|{
return|return
literal|"<span style='color:"
operator|+
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|iDatePatternPref
argument_list|)
operator|+
literal|";'>"
operator|+
name|iDatePatternName
operator|+
literal|"</span>"
return|;
block|}
specifier|public
name|boolean
name|isStriked
parameter_list|()
block|{
return|return
name|iStrike
return|;
block|}
specifier|public
name|Long
name|getPatternId
parameter_list|()
block|{
return|return
name|iPatternId
return|;
block|}
specifier|public
name|Long
name|getDatePatternId
parameter_list|()
block|{
return|return
name|iDatePatternId
return|;
block|}
specifier|public
name|int
name|getDatePatternPreference
parameter_list|()
block|{
return|return
name|iDatePatternPref
return|;
block|}
specifier|public
name|String
name|getDaysName
parameter_list|()
block|{
name|StringBuffer
name|ret
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|DAY_NAMES_SHORT
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|(
name|Constants
operator|.
name|DAY_CODES
index|[
name|i
index|]
operator|&
name|iDays
operator|)
operator|!=
literal|0
condition|)
name|ret
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|DAY_NAMES_SHORT
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getStartTime
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|toTime
argument_list|(
name|iStartSlot
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
argument_list|)
return|;
block|}
specifier|public
name|String
name|getEndTime
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|toTime
argument_list|(
name|iStartSlot
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|+
name|iMin
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|TimeInfo
operator|)
condition|)
return|return
literal|false
return|;
name|TimeInfo
name|t
init|=
operator|(
name|TimeInfo
operator|)
name|o
decl_stmt|;
return|return
name|t
operator|.
name|getDays
argument_list|()
operator|==
name|getDays
argument_list|()
operator|&&
name|t
operator|.
name|getStartSlot
argument_list|()
operator|==
name|getStartSlot
argument_list|()
operator|&&
name|t
operator|.
name|getPatternId
argument_list|()
operator|.
name|equals
argument_list|(
name|getPatternId
argument_list|()
argument_list|)
operator|&&
name|t
operator|.
name|getDatePatternId
argument_list|()
operator|.
name|equals
argument_list|(
name|getDatePatternId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|(
name|boolean
name|endTime
parameter_list|)
block|{
return|return
name|getDaysName
argument_list|()
operator|+
literal|" "
operator|+
name|getStartTime
argument_list|()
operator|+
operator|(
name|endTime
condition|?
literal|" - "
operator|+
name|getEndTime
argument_list|()
else|:
literal|""
operator|)
return|;
block|}
specifier|public
name|String
name|getHint
parameter_list|()
block|{
if|if
condition|(
name|iHint
operator|==
literal|null
condition|)
block|{
name|Class_
name|clazz
init|=
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|TimePref
name|p
range|:
operator|(
name|Set
argument_list|<
name|TimePref
argument_list|>
operator|)
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|TimePref
operator|.
name|class
argument_list|)
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|TimePattern
operator|.
name|sTypeExactTime
condition|)
continue|continue;
name|boolean
name|match
init|=
literal|false
decl_stmt|;
for|for
control|(
name|TimePatternDays
name|d
range|:
name|p
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getDays
argument_list|()
control|)
block|{
if|if
condition|(
name|d
operator|.
name|getDayCode
argument_list|()
operator|==
name|iDays
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|match
condition|)
continue|continue;
name|match
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|TimePatternTime
name|t
range|:
name|p
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getTimes
argument_list|()
control|)
block|{
if|if
condition|(
name|t
operator|.
name|getStartSlot
argument_list|()
operator|==
name|iStartSlot
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|match
condition|)
continue|continue;
name|RequiredTimeTable
name|m
init|=
name|p
operator|.
name|getRequiredTimeTable
argument_list|(
operator|new
name|TimeLocation
argument_list|(
name|iDays
argument_list|,
name|iStartSlot
argument_list|,
name|iMin
argument_list|,
literal|0
argument_list|,
literal|0.0
argument_list|,
name|iPatternId
argument_list|,
name|iDatePatternName
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|iHint
operator|=
name|m
operator|.
name|print
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
operator|.
name|replace
argument_list|(
literal|");\n</script>"
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|"<script language=\"javascript\">\ndocument.write("
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
empty_stmt|;
break|break;
block|}
block|}
return|return
name|iHint
return|;
block|}
specifier|public
name|String
name|toHtml
parameter_list|(
name|boolean
name|link
parameter_list|,
name|boolean
name|showSelected
parameter_list|,
name|boolean
name|endTime
parameter_list|,
name|boolean
name|showHint
parameter_list|)
block|{
name|boolean
name|uline
init|=
operator|(
name|showSelected
operator|&&
name|this
operator|.
name|equals
argument_list|(
name|iTime
argument_list|)
operator|)
decl_stmt|;
name|String
name|hint
init|=
operator|(
name|showHint
condition|?
name|getHint
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
return|return
operator|(
name|link
condition|?
literal|"<a id='time_"
operator|+
name|getDays
argument_list|()
operator|+
literal|"_"
operator|+
name|getStartSlot
argument_list|()
operator|+
literal|"_"
operator|+
name|getPatternId
argument_list|()
operator|+
literal|"' onclick=\"selectTime(event, '"
operator|+
name|getDays
argument_list|()
operator|+
literal|"', '"
operator|+
name|getStartSlot
argument_list|()
operator|+
literal|"', '"
operator|+
name|getPatternId
argument_list|()
operator|+
literal|"');\" onmouseover=\"this.style.cursor='pointer';\" class='noFancyLinks' title='"
operator|+
name|getDaysName
argument_list|()
operator|+
literal|" "
operator|+
name|getStartTime
argument_list|()
operator|+
literal|" - "
operator|+
name|getEndTime
argument_list|()
operator|+
literal|"'>"
else|:
literal|"<a class='noFancyLinks' title='"
operator|+
name|getDaysName
argument_list|()
operator|+
literal|" "
operator|+
name|getStartTime
argument_list|()
operator|+
literal|" - "
operator|+
name|getEndTime
argument_list|()
operator|+
literal|"'>"
operator|)
operator|+
literal|"<span style='color:"
operator|+
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|iPref
argument_list|)
operator|+
literal|";' "
operator|+
operator|(
name|hint
operator|==
literal|null
condition|?
literal|""
else|:
literal|"onmouseover=\"showGwtHint(this, "
operator|+
name|hint
operator|+
literal|");\" onmouseout=\"hideGwtHint();\""
operator|)
operator|+
literal|">"
operator|+
operator|(
name|uline
condition|?
literal|"<u>"
else|:
literal|""
operator|)
operator|+
operator|(
name|iStrike
condition|?
literal|"<s>"
else|:
literal|""
operator|)
operator|+
name|getDaysName
argument_list|()
operator|+
literal|" "
operator|+
name|getStartTime
argument_list|()
operator|+
operator|(
name|endTime
condition|?
literal|" - "
operator|+
name|getEndTime
argument_list|()
else|:
literal|""
operator|)
operator|+
operator|(
name|iStrike
condition|?
literal|"</s>"
else|:
literal|""
operator|)
operator|+
operator|(
name|uline
condition|?
literal|"</u>"
else|:
literal|""
operator|)
operator|+
literal|"</span>"
operator|+
literal|"</a>"
return|;
block|}
specifier|public
name|String
name|toDatesHtml
parameter_list|(
name|boolean
name|link
parameter_list|,
name|boolean
name|showSelected
parameter_list|,
name|boolean
name|endTime
parameter_list|)
block|{
name|boolean
name|uline
init|=
operator|(
name|showSelected
operator|&&
name|this
operator|.
name|equals
argument_list|(
name|iTime
argument_list|)
operator|)
decl_stmt|;
return|return
operator|(
name|link
condition|?
literal|"<a id='dates_"
operator|+
name|getDatePatternId
argument_list|()
operator|+
literal|"' onclick=\"selectDates(event, '"
operator|+
name|getDatePatternId
argument_list|()
operator|+
literal|"');\" onmouseover=\"this.style.cursor='pointer';\" class='noFancyLinks' title='"
operator|+
name|getDatePatternName
argument_list|()
operator|+
literal|"'>"
else|:
literal|"<a class='noFancyLinks' title='"
operator|+
name|getDatePatternName
argument_list|()
operator|+
literal|"'>"
operator|)
operator|+
operator|(
name|uline
condition|?
literal|"<u>"
else|:
literal|""
operator|)
operator|+
operator|(
name|iStrike
condition|?
literal|"<s>"
else|:
literal|""
operator|)
operator|+
name|getDatePatternHtml
argument_list|()
operator|+
operator|(
name|iStrike
condition|?
literal|"</s>"
else|:
literal|""
operator|)
operator|+
operator|(
name|uline
condition|?
literal|"</u>"
else|:
literal|""
operator|)
operator|+
literal|"</a>"
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|TimeInfo
operator|)
condition|)
return|return
operator|-
literal|1
return|;
name|TimeInfo
name|t
init|=
operator|(
name|TimeInfo
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|isStriked
argument_list|()
operator|&&
operator|!
name|t
operator|.
name|isStriked
argument_list|()
condition|)
return|return
literal|1
return|;
if|if
condition|(
operator|!
name|isStriked
argument_list|()
operator|&&
name|t
operator|.
name|isStriked
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|cmp
init|=
name|sCmp
operator|.
name|compare
argument_list|(
name|getDatePatternName
argument_list|()
argument_list|,
name|t
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
operator|-
name|Double
operator|.
name|compare
argument_list|(
name|getDays
argument_list|()
argument_list|,
name|t
operator|.
name|getDays
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|Double
operator|.
name|compare
argument_list|(
name|getStartSlot
argument_list|()
argument_list|,
name|t
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|Double
operator|.
name|compare
argument_list|(
name|getMin
argument_list|()
argument_list|,
name|t
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|cmp
return|;
block|}
block|}
specifier|public
class|class
name|RoomInfo
implements|implements
name|Serializable
implements|,
name|Comparable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|String
name|iName
decl_stmt|;
specifier|private
name|Long
name|iRoomId
decl_stmt|;
specifier|private
name|int
name|iPref
decl_stmt|;
specifier|private
name|long
name|iSize
decl_stmt|;
specifier|private
name|boolean
name|iStrike
decl_stmt|;
specifier|private
specifier|transient
name|Location
name|iLocation
decl_stmt|;
specifier|public
name|RoomInfo
parameter_list|(
name|String
name|name
parameter_list|,
name|Long
name|roomId
parameter_list|,
name|long
name|size
parameter_list|,
name|int
name|pref
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
name|iRoomId
operator|=
name|roomId
expr_stmt|;
name|iPref
operator|=
name|pref
expr_stmt|;
name|iSize
operator|=
name|size
expr_stmt|;
name|iStrike
operator|=
operator|(
name|iPref
operator|>
literal|500
operator|)
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|Long
name|getId
parameter_list|()
block|{
return|return
name|iRoomId
return|;
block|}
specifier|public
name|int
name|getPref
parameter_list|()
block|{
return|return
name|iPref
return|;
block|}
specifier|public
name|boolean
name|isStriked
parameter_list|()
block|{
return|return
name|iStrike
return|;
block|}
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
name|iSize
return|;
block|}
specifier|public
name|String
name|getColor
parameter_list|()
block|{
return|return
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|iPref
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|RoomInfo
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|RoomInfo
operator|)
name|o
operator|)
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Location
name|getLocation
parameter_list|()
block|{
if|if
condition|(
name|iLocation
operator|==
literal|null
condition|)
name|iLocation
operator|=
name|LocationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|iLocation
return|;
block|}
specifier|public
name|String
name|toHtml
parameter_list|(
name|boolean
name|link
parameter_list|,
name|boolean
name|showSelected
parameter_list|,
name|boolean
name|showHint
parameter_list|)
block|{
name|boolean
name|uline
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|showSelected
operator|&&
name|iRoom
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iRoom
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|iRoom
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|this
argument_list|)
condition|)
name|uline
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|showHint
operator|&&
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|link
condition|?
literal|"<a id='room_"
operator|+
name|getId
argument_list|()
operator|+
literal|"' onclick=\"selectRoom(event, '"
operator|+
name|getId
argument_list|()
operator|+
literal|"');\" onmouseover=\"this.style.cursor='pointer';\" class='noFancyLinks' title='"
operator|+
name|iSize
operator|+
literal|" seats'>"
else|:
literal|"<a class='noFancyLinks' title='"
operator|+
name|iSize
operator|+
literal|" seats'>"
operator|)
operator|+
literal|"<span style='color:"
operator|+
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|iPref
argument_list|)
operator|+
literal|";' "
operator|+
literal|"onmouseover=\"showGwtHint(this, '"
operator|+
name|getLocation
argument_list|()
operator|.
name|getHtmlHint
argument_list|(
name|PreferenceLevel
operator|.
name|int2string
argument_list|(
name|iPref
argument_list|)
argument_list|)
operator|+
literal|"');\" onmouseout=\"hideGwtHint();\">"
operator|+
operator|(
name|uline
condition|?
literal|"<u>"
else|:
literal|""
operator|)
operator|+
operator|(
name|iStrike
condition|?
literal|"<s>"
else|:
literal|""
operator|)
operator|+
name|iName
operator|+
operator|(
name|iStrike
condition|?
literal|"</s>"
else|:
literal|""
operator|)
operator|+
operator|(
name|uline
condition|?
literal|"</u>"
else|:
literal|""
operator|)
operator|+
literal|"</span>"
operator|+
literal|"</a>"
return|;
block|}
return|return
operator|(
name|link
condition|?
literal|"<a id='room_"
operator|+
name|getId
argument_list|()
operator|+
literal|"' onclick=\"selectRoom(event, '"
operator|+
name|getId
argument_list|()
operator|+
literal|"');\" onmouseover=\"this.style.cursor='pointer';\" class='noFancyLinks' title='"
operator|+
name|iSize
operator|+
literal|" seats'>"
else|:
literal|"<a class='noFancyLinks' title='"
operator|+
name|iSize
operator|+
literal|" seats'>"
operator|)
operator|+
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|iPref
argument_list|)
operator|+
literal|"'>"
operator|+
operator|(
name|uline
condition|?
literal|"<u>"
else|:
literal|""
operator|)
operator|+
operator|(
name|iStrike
condition|?
literal|"<s>"
else|:
literal|""
operator|)
operator|+
name|iName
operator|+
operator|(
name|iStrike
condition|?
literal|"</s>"
else|:
literal|""
operator|)
operator|+
operator|(
name|uline
condition|?
literal|"</u>"
else|:
literal|""
operator|)
operator|+
literal|"</font>"
operator|+
literal|"</a>"
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|RoomInfo
operator|)
condition|)
return|return
operator|-
literal|1
return|;
comment|//int cmp = -(new Long(getSize())).compareTo(new Long(((RoomInfo)o).getSize()));
comment|//if (cmp!=0) return cmp;
return|return
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
operator|(
operator|(
name|RoomInfo
operator|)
name|o
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
class|class
name|InstructorInfo
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|String
name|iName
decl_stmt|;
specifier|private
name|Long
name|iInstructorId
decl_stmt|;
specifier|public
name|InstructorInfo
parameter_list|(
name|String
name|name
parameter_list|,
name|Long
name|instructorId
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
name|iInstructorId
operator|=
name|instructorId
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|Long
name|getId
parameter_list|()
block|{
return|return
name|iInstructorId
return|;
block|}
specifier|public
name|String
name|getColor
parameter_list|()
block|{
return|return
literal|"black"
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|InstructorInfo
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|InstructorInfo
operator|)
name|o
operator|)
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|toHtml
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|StudentConflictInfo
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CLASS_CONFLICT_TYPE
init|=
literal|"class"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OTHER_ASSIGNMENT_CONFLICT_TYPE
init|=
literal|"otherAssignment"
decl_stmt|;
specifier|private
name|JenrlInfo
name|iInfo
decl_stmt|;
specifier|private
name|Long
name|iOtherClassId
init|=
literal|null
decl_stmt|;
specifier|private
name|Long
name|iOtherAssignmentId
init|=
literal|null
decl_stmt|;
specifier|private
name|ClassAssignmentDetails
name|iOther
init|=
literal|null
decl_stmt|;
specifier|public
name|StudentConflictInfo
parameter_list|(
name|Long
name|id
parameter_list|,
name|JenrlInfo
name|jenrl
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|iInfo
operator|=
name|jenrl
expr_stmt|;
if|if
condition|(
name|CLASS_CONFLICT_TYPE
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|iOtherClassId
operator|=
name|id
expr_stmt|;
block|}
if|else if
condition|(
name|OTHER_ASSIGNMENT_CONFLICT_TYPE
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|iOtherAssignmentId
operator|=
name|id
expr_stmt|;
block|}
block|}
specifier|public
name|Long
name|getOtherClassId
parameter_list|()
block|{
return|return
name|iOtherClassId
return|;
block|}
specifier|public
name|void
name|createOther
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|SolverProxy
name|solver
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|iOtherAssignmentId
operator|!=
literal|null
condition|)
block|{
name|iOther
operator|=
name|ClassAssignmentDetails
operator|.
name|createClassAssignmentDetailsFromAssignment
argument_list|(
name|context
argument_list|,
name|iOtherAssignmentId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iOther
operator|=
name|ClassAssignmentDetails
operator|.
name|createClassAssignmentDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|iOtherClassId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ClassAssignmentDetails
name|getOther
parameter_list|()
block|{
return|return
name|iOther
return|;
block|}
specifier|public
name|JenrlInfo
name|getInfo
parameter_list|()
block|{
return|return
name|iInfo
return|;
block|}
specifier|public
name|String
name|toHtml
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|SolverProxy
name|solver
parameter_list|,
name|boolean
name|link
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|getOther
argument_list|()
operator|==
literal|null
condition|)
name|createOther
argument_list|(
name|context
argument_list|,
name|solver
argument_list|)
expr_stmt|;
name|Vector
name|props
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
if|if
condition|(
name|iInfo
operator|.
name|isCommited
argument_list|()
condition|)
name|props
operator|.
name|add
argument_list|(
literal|"committed"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iInfo
operator|.
name|isFixed
argument_list|()
condition|)
name|props
operator|.
name|add
argument_list|(
literal|"fixed"
argument_list|)
expr_stmt|;
if|else if
condition|(
name|iInfo
operator|.
name|isHard
argument_list|()
condition|)
name|props
operator|.
name|add
argument_list|(
literal|"hard"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iInfo
operator|.
name|isDistance
argument_list|()
condition|)
name|props
operator|.
name|add
argument_list|(
literal|"distance"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iInfo
operator|.
name|isCommited
argument_list|()
condition|)
name|iOther
operator|.
name|getClazz
argument_list|()
operator|.
name|setPref
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
expr_stmt|;
if|if
condition|(
name|iInfo
operator|.
name|isImportant
argument_list|()
condition|)
name|props
operator|.
name|add
argument_list|(
literal|"important"
argument_list|)
expr_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|sJenrDF
operator|.
name|format
argument_list|(
name|iInfo
operator|.
name|getJenrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"&times; "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getOther
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|toHtml
argument_list|(
name|link
operator|&&
operator|!
name|iInfo
operator|.
name|isCommited
argument_list|()
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getOther
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|getOther
argument_list|()
operator|.
name|getRoom
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getOther
argument_list|()
operator|.
name|getRoom
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getOther
argument_list|()
operator|.
name|getRoom
argument_list|()
index|[
name|i
index|]
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|props
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"<i>"
operator|+
name|props
operator|+
literal|"</i>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<i>"
operator|+
name|iInfo
operator|.
name|getCurriculumText
argument_list|()
operator|+
literal|"</i>"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|"<font color='red'>ERROR:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</font>"
return|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|StudentConflictInfoComparator
implements|implements
name|Comparator
block|{
name|SessionContext
name|iContext
init|=
literal|null
decl_stmt|;
name|SolverProxy
name|iSolver
init|=
literal|null
decl_stmt|;
specifier|public
name|StudentConflictInfoComparator
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|SolverProxy
name|solver
parameter_list|)
block|{
name|iContext
operator|=
name|context
expr_stmt|;
name|iSolver
operator|=
name|solver
expr_stmt|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
try|try
block|{
name|StudentConflictInfo
name|i1
init|=
operator|(
name|StudentConflictInfo
operator|)
name|o1
decl_stmt|;
name|StudentConflictInfo
name|i2
init|=
operator|(
name|StudentConflictInfo
operator|)
name|o2
decl_stmt|;
name|int
name|cmp
init|=
name|Double
operator|.
name|compare
argument_list|(
name|i1
operator|.
name|getInfo
argument_list|()
operator|.
name|getJenrl
argument_list|()
argument_list|,
name|i2
operator|.
name|getInfo
argument_list|()
operator|.
name|getJenrl
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|-
name|cmp
return|;
if|if
condition|(
name|i1
operator|.
name|getInfo
argument_list|()
operator|==
literal|null
condition|)
name|i1
operator|.
name|createOther
argument_list|(
name|iContext
argument_list|,
name|iSolver
argument_list|)
expr_stmt|;
if|if
condition|(
name|i2
operator|.
name|getInfo
argument_list|()
operator|==
literal|null
condition|)
name|i2
operator|.
name|createOther
argument_list|(
name|iContext
argument_list|,
name|iSolver
argument_list|)
expr_stmt|;
return|return
name|i1
operator|.
name|getOther
argument_list|()
operator|.
name|compareTo
argument_list|(
name|i2
operator|.
name|getOther
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
specifier|public
class|class
name|BtbInstructorInfo
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Long
name|iOtherClassId
decl_stmt|;
specifier|private
name|int
name|iPref
decl_stmt|;
specifier|public
name|BtbInstructorInfo
parameter_list|(
name|Long
name|otherClassId
parameter_list|,
name|int
name|pref
parameter_list|)
block|{
name|iOtherClassId
operator|=
name|otherClassId
expr_stmt|;
name|iPref
operator|=
name|pref
expr_stmt|;
block|}
specifier|public
name|Long
name|getOtherClassId
parameter_list|()
block|{
return|return
name|iOtherClassId
return|;
block|}
specifier|public
name|int
name|getPreference
parameter_list|()
block|{
return|return
name|iPref
return|;
block|}
specifier|public
name|String
name|toHtml
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|SolverProxy
name|solver
parameter_list|)
block|{
try|try
block|{
name|ClassAssignmentDetails
name|other
init|=
name|ClassAssignmentDetails
operator|.
name|createClassAssignmentDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|iOtherClassId
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|getPreference
argument_list|()
argument_list|)
operator|+
literal|"'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|PreferenceLevel
operator|.
name|int2string
argument_list|(
name|getPreference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</font>&nbsp;&nbsp;&nbsp;"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|other
operator|.
name|getClazz
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|true
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|other
operator|.
name|getTime
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|other
operator|.
name|getRoom
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|other
operator|.
name|getRoom
argument_list|()
index|[
name|i
index|]
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|"<font color='red'>ERROR:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</font>"
return|;
block|}
block|}
block|}
specifier|public
class|class
name|RoomInfos
extends|extends
name|Vector
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|RoomInfos
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toHtml
parameter_list|(
name|boolean
name|link
parameter_list|,
name|boolean
name|showSelected
parameter_list|,
name|Hint
name|selection
parameter_list|)
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
return|return
literal|""
return|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|link
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<input type='hidden' name='nrRooms' value='"
operator|+
name|getClazz
argument_list|()
operator|.
name|nrRooms
argument_list|()
operator|+
literal|"'/>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<input type='hidden' name='curRoom' value='0'/>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<input type='hidden' name='roomState' value='0'/>"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getClazz
argument_list|()
operator|.
name|nrRooms
argument_list|()
condition|;
name|i
operator|++
control|)
name|sb
operator|.
name|append
argument_list|(
literal|"<input type='hidden' name='room"
operator|+
name|i
operator|+
literal|"' value='"
operator|+
operator|(
name|selection
operator|==
literal|null
condition|?
name|iRoom
operator|==
literal|null
condition|?
literal|""
else|:
name|iRoom
index|[
name|i
index|]
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
else|:
name|selection
operator|.
name|getRoomIds
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
operator|)
operator|+
literal|"'/>"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Enumeration
name|e
init|=
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|RoomInfo
name|room
init|=
operator|(
name|RoomInfo
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|room
operator|.
name|isStriked
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|int2prolog
argument_list|(
name|room
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
condition|)
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|==
literal|4
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"<span id='room_dots' onMouseOver=\"this.style.cursor='hand';this.style.cursor='pointer';\" style='display:inline'><a onClick=\"document.getElementById('room_dots').style.display='none';document.getElementById('room_rest').style.display='inline';\">...</a></span><span id='room_rest' style='display:none'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|room
operator|.
name|toHtml
argument_list|(
name|link
argument_list|,
name|showSelected
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|int
name|sidx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|RoomInfo
name|room
init|=
operator|(
name|RoomInfo
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|room
operator|.
name|isStriked
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|idx
operator|+
name|sidx
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
if|if
condition|(
name|sidx
operator|==
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"<span id='sroom_dots' onMouseOver=\"this.style.cursor='hand';this.style.cursor='pointer';\" style='display:inline'><a onClick=\"document.getElementById('sroom_dots').style.display='none';document.getElementById('sroom_rest').style.display='inline';\">...</a></span><span id='sroom_rest' style='display:none'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|room
operator|.
name|toHtml
argument_list|(
name|link
argument_list|,
name|showSelected
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|sidx
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|sidx
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"</span>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|4
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"</span>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|link
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<script language='JavaScript'>initRooms();</script>"
argument_list|)
expr_stmt|;
block|}
return|return
name|count
operator|+
literal|" ("
operator|+
name|sb
operator|.
name|toString
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
specifier|public
class|class
name|TimeInfos
extends|extends
name|Vector
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|TimeInfos
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toHtml
parameter_list|(
name|boolean
name|link
parameter_list|,
name|boolean
name|showSelected
parameter_list|,
name|Hint
name|selection
parameter_list|)
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
return|return
literal|""
return|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|link
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<input type='hidden' name='days' value='"
operator|+
operator|(
name|selection
operator|==
literal|null
condition|?
name|iTime
operator|==
literal|null
condition|?
literal|""
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|iTime
operator|.
name|getDays
argument_list|()
argument_list|)
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|selection
operator|.
name|getDays
argument_list|()
argument_list|)
operator|)
operator|+
literal|"'/>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<input type='hidden' name='slot' value='"
operator|+
operator|(
name|selection
operator|==
literal|null
condition|?
name|iTime
operator|==
literal|null
condition|?
literal|""
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|iTime
operator|.
name|getStartSlot
argument_list|()
argument_list|)
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|selection
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|)
operator|+
literal|"'/>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<input type='hidden' name='pattern' value='"
operator|+
operator|(
name|selection
operator|==
literal|null
condition|?
name|iTime
operator|==
literal|null
condition|?
literal|""
else|:
name|iTime
operator|.
name|getPatternId
argument_list|()
operator|.
name|toString
argument_list|()
else|:
name|selection
operator|.
name|getPatternId
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
operator|+
literal|"'/>"
argument_list|)
expr_stmt|;
block|}
name|int
name|count
init|=
literal|0
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|added
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|TimeInfo
name|time
init|=
operator|(
name|TimeInfo
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|time
operator|.
name|isStriked
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|added
operator|.
name|add
argument_list|(
name|time
operator|.
name|getDays
argument_list|()
operator|+
literal|":"
operator|+
name|time
operator|.
name|getStartSlot
argument_list|()
operator|+
literal|":"
operator|+
name|time
operator|.
name|getPatternId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|int2prolog
argument_list|(
name|time
operator|.
name|getPref
argument_list|()
argument_list|)
argument_list|)
condition|)
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|==
literal|4
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"<span id='time_dots' onMouseOver=\"this.style.cursor='hand';this.style.cursor='pointer';\" style='display:inline'><a onClick=\"document.getElementById('time_dots').style.display='none';document.getElementById('time_rest').style.display='inline';\">...</a></span><span id='time_rest' style='display:none'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|time
operator|.
name|toHtml
argument_list|(
name|link
argument_list|,
name|showSelected
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|int
name|sidx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|TimeInfo
name|time
init|=
operator|(
name|TimeInfo
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|time
operator|.
name|isStriked
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|added
operator|.
name|add
argument_list|(
name|time
operator|.
name|getDays
argument_list|()
operator|+
literal|":"
operator|+
name|time
operator|.
name|getStartSlot
argument_list|()
operator|+
literal|":"
operator|+
name|time
operator|.
name|getPatternId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|idx
operator|+
name|sidx
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
if|if
condition|(
name|sidx
operator|==
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"<span id='stime_dots' onMouseOver=\"this.style.cursor='hand';this.style.cursor='pointer';\" style='display:inline'><a onClick=\"document.getElementById('stime_dots').style.display='none';document.getElementById('stime_rest').style.display='inline';\">...</a></span><span id='stime_rest' style='display:none'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|time
operator|.
name|toHtml
argument_list|(
name|link
argument_list|,
name|showSelected
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|sidx
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|sidx
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"</span>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|4
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"</span>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|link
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<script language='JavaScript'>initTime();</script>"
argument_list|)
expr_stmt|;
block|}
return|return
name|count
operator|+
literal|" ("
operator|+
name|sb
operator|.
name|toString
argument_list|()
operator|+
literal|")"
return|;
block|}
specifier|public
name|int
name|getNrDates
parameter_list|()
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|dates
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|TimeInfo
name|time
init|=
operator|(
name|TimeInfo
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|dates
operator|.
name|add
argument_list|(
name|time
operator|.
name|getDatePatternId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|dates
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|String
name|toDatesHtml
parameter_list|(
name|boolean
name|link
parameter_list|,
name|boolean
name|showSelected
parameter_list|,
name|Hint
name|selection
parameter_list|)
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
return|return
literal|""
return|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|link
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<input type='hidden' name='dates' value='"
operator|+
operator|(
name|selection
operator|==
literal|null
condition|?
name|iTime
operator|==
literal|null
condition|?
name|String
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
name|TimeInfo
operator|)
name|elementAt
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getDatePatternId
argument_list|()
argument_list|)
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|iTime
operator|.
name|getDatePatternId
argument_list|()
argument_list|)
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|selection
operator|.
name|getDatePatternId
argument_list|()
argument_list|)
operator|)
operator|+
literal|"'/>"
argument_list|)
expr_stmt|;
block|}
name|int
name|count
init|=
literal|0
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|added
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|TimeInfo
name|time
init|=
operator|(
name|TimeInfo
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|added
operator|.
name|add
argument_list|(
name|time
operator|.
name|getDatePatternId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|==
literal|4
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"<span id='dates_dots' onMouseOver=\"this.style.cursor='hand';this.style.cursor='pointer';\" style='display:inline'><a onClick=\"document.getElementById('dates_dots').style.display='none';document.getElementById('dates_rest').style.display='inline';\">...</a></span><span id='dates_rest' style='display:none'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|time
operator|.
name|toDatesHtml
argument_list|(
name|link
argument_list|,
name|showSelected
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|idx
operator|>=
literal|4
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"</span>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|link
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<script language='JavaScript'>initDates();</script>"
argument_list|)
expr_stmt|;
block|}
return|return
name|count
operator|+
literal|" ("
operator|+
name|sb
operator|.
name|toString
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DistributionInfo
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|GroupConstraintInfo
name|iInfo
decl_stmt|;
specifier|private
name|Vector
name|iClassIds
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
specifier|public
name|DistributionInfo
parameter_list|(
name|GroupConstraintInfo
name|info
parameter_list|)
block|{
name|iInfo
operator|=
name|info
expr_stmt|;
block|}
specifier|public
name|void
name|addClass
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
name|iClassIds
operator|.
name|add
argument_list|(
name|classId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Vector
name|getClassIds
parameter_list|()
block|{
return|return
name|iClassIds
return|;
block|}
specifier|public
name|GroupConstraintInfo
name|getInfo
parameter_list|()
block|{
return|return
name|iInfo
return|;
block|}
specifier|public
name|String
name|toHtml
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|SolverProxy
name|solver
parameter_list|,
name|boolean
name|link
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Enumeration
name|e
init|=
name|iClassIds
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Long
name|classId
init|=
operator|(
name|Long
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|ClassAssignmentDetails
name|other
init|=
name|ClassAssignmentDetails
operator|.
name|createClassAssignmentDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|classId
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<br>&nbsp;&nbsp;&nbsp;"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|other
operator|.
name|getClazz
argument_list|()
operator|.
name|toHtml
argument_list|(
name|link
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
name|sb
operator|.
name|append
argument_list|(
name|other
operator|.
name|getTime
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|getRoom
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|other
operator|.
name|getRoom
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|other
operator|.
name|getRoom
argument_list|()
index|[
name|i
index|]
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<font color='red'>ERROR:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</font>"
argument_list|)
expr_stmt|;
block|}
return|return
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|iInfo
operator|.
name|getPreference
argument_list|()
argument_list|)
operator|+
literal|"'>"
operator|+
name|PreferenceLevel
operator|.
name|prolog2string
argument_list|(
name|iInfo
operator|.
name|getPreference
argument_list|()
argument_list|)
operator|+
literal|"</font> "
operator|+
name|iInfo
operator|.
name|getName
argument_list|()
operator|+
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
name|String
name|dispPref
parameter_list|(
name|String
name|oldPref
parameter_list|,
name|String
name|newPref
parameter_list|)
block|{
if|if
condition|(
name|newPref
operator|==
literal|null
condition|)
return|return
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|oldPref
argument_list|)
operator|+
literal|"'><u>"
operator|+
name|PreferenceLevel
operator|.
name|prolog2string
argument_list|(
name|oldPref
argument_list|)
operator|+
literal|"</u></font>"
return|;
if|if
condition|(
name|oldPref
operator|.
name|equals
argument_list|(
name|newPref
argument_list|)
condition|)
return|return
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|newPref
argument_list|)
operator|+
literal|"'>"
operator|+
name|PreferenceLevel
operator|.
name|prolog2string
argument_list|(
name|newPref
argument_list|)
operator|+
literal|"</font>"
return|;
return|return
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|oldPref
argument_list|)
operator|+
literal|"'><s>"
operator|+
name|PreferenceLevel
operator|.
name|prolog2string
argument_list|(
name|oldPref
argument_list|)
operator|+
literal|"</s></font><br><font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|newPref
argument_list|)
operator|+
literal|"'><u>"
operator|+
name|PreferenceLevel
operator|.
name|prolog2string
argument_list|(
name|newPref
argument_list|)
operator|+
literal|"</u></font>"
return|;
block|}
specifier|public
specifier|static
name|String
name|dispNumber
parameter_list|(
name|int
name|number
parameter_list|)
block|{
return|return
name|dispNumber
argument_list|(
literal|""
argument_list|,
name|number
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|dispNumber
parameter_list|(
name|String
name|prefix
parameter_list|,
name|int
name|number
parameter_list|)
block|{
if|if
condition|(
name|number
operator|>
literal|0
condition|)
return|return
literal|"<font color='red'>"
operator|+
name|prefix
operator|+
literal|"+"
operator|+
name|number
operator|+
literal|"</font>"
return|;
if|if
condition|(
name|number
operator|<
literal|0
condition|)
return|return
literal|"<font color='green'>"
operator|+
name|prefix
operator|+
name|number
operator|+
literal|"</font>"
return|;
return|return
name|prefix
operator|+
literal|"0"
return|;
block|}
specifier|public
specifier|static
name|String
name|dispNumber
parameter_list|(
name|int
name|n1
parameter_list|,
name|int
name|n2
parameter_list|)
block|{
return|return
name|dispNumber
argument_list|(
name|n1
operator|-
name|n2
argument_list|)
operator|+
literal|"</td><td nowrap>("
operator|+
name|n2
operator|+
operator|(
name|n1
operator|==
name|n2
condition|?
literal|""
else|:
literal|"&rarr; "
operator|+
name|n1
operator|)
operator|+
literal|")"
return|;
block|}
specifier|public
specifier|static
name|String
name|dispNumber
parameter_list|(
name|double
name|n1
parameter_list|,
name|double
name|n2
parameter_list|)
block|{
return|return
name|dispNumber
argument_list|(
name|n1
operator|-
name|n2
argument_list|)
operator|+
literal|"</td><td nowrap>("
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|n2
argument_list|)
operator|+
operator|(
name|n1
operator|==
name|n2
condition|?
literal|""
else|:
literal|"&rarr; "
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|n1
argument_list|)
operator|)
operator|+
literal|")"
return|;
block|}
specifier|public
specifier|static
name|String
name|dispNumberShort
parameter_list|(
name|boolean
name|rem
parameter_list|,
name|int
name|n1
parameter_list|,
name|int
name|n2
parameter_list|)
block|{
if|if
condition|(
name|n1
operator|==
literal|0
operator|&&
name|n2
operator|==
literal|0
condition|)
return|return
literal|""
return|;
if|if
condition|(
name|rem
condition|)
return|return
name|dispNumber
argument_list|(
operator|-
name|n1
argument_list|)
return|;
name|int
name|dif
init|=
name|n2
operator|-
name|n1
decl_stmt|;
if|if
condition|(
name|dif
operator|==
literal|0
condition|)
return|return
name|n1
operator|+
literal|"&rarr;"
operator|+
name|n2
return|;
if|else if
condition|(
name|dif
operator|<
literal|0
condition|)
return|return
literal|"<font color='green'>"
operator|+
name|n1
operator|+
literal|"&rarr;"
operator|+
name|n2
operator|+
literal|"</font>"
return|;
else|else
return|return
literal|"<font color='red'>"
operator|+
name|n1
operator|+
literal|"&rarr;"
operator|+
name|n2
operator|+
literal|"</font>"
return|;
block|}
specifier|public
specifier|static
name|String
name|dispNumberShort
parameter_list|(
name|boolean
name|rem
parameter_list|,
name|double
name|n1
parameter_list|,
name|double
name|n2
parameter_list|)
block|{
return|return
name|dispNumberShort
argument_list|(
name|rem
argument_list|,
literal|""
argument_list|,
name|n1
argument_list|,
name|n2
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|dispNumberShort
parameter_list|(
name|boolean
name|rem
parameter_list|,
name|String
name|prefix
parameter_list|,
name|double
name|n1
parameter_list|,
name|double
name|n2
parameter_list|)
block|{
if|if
condition|(
name|n1
operator|==
literal|0
operator|&&
name|n2
operator|==
literal|0
condition|)
return|return
literal|""
return|;
if|if
condition|(
name|rem
condition|)
return|return
name|dispNumber
argument_list|(
name|prefix
argument_list|,
operator|-
name|n1
argument_list|)
return|;
name|double
name|dif
init|=
name|n2
operator|-
name|n1
decl_stmt|;
if|if
condition|(
name|dif
operator|==
literal|0
condition|)
return|return
name|prefix
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|n1
argument_list|)
operator|+
literal|"&rarr;"
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|n2
argument_list|)
return|;
if|else if
condition|(
name|dif
operator|<
literal|0
condition|)
return|return
literal|"<font color='green'>"
operator|+
name|prefix
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|n1
argument_list|)
operator|+
literal|"&rarr;"
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|n2
argument_list|)
operator|+
literal|"</font>"
return|;
else|else
return|return
literal|"<font color='red'>"
operator|+
name|prefix
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|n1
argument_list|)
operator|+
literal|"&rarr;"
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|n2
argument_list|)
operator|+
literal|"</font>"
return|;
block|}
specifier|public
specifier|static
name|String
name|dispTime
parameter_list|(
name|TimeInfo
name|oldTime
parameter_list|,
name|TimeInfo
name|newTime
parameter_list|)
block|{
if|if
condition|(
name|oldTime
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|newTime
operator|==
literal|null
condition|)
return|return
literal|""
return|;
else|else
return|return
name|newTime
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|else if
condition|(
name|newTime
operator|==
literal|null
condition|)
return|return
name|oldTime
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|+
literal|"&rarr;<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|"'><i>not-assigned</i></font>"
return|;
if|if
condition|(
name|oldTime
operator|.
name|equals
argument_list|(
name|newTime
argument_list|)
condition|)
return|return
name|newTime
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
return|return
name|oldTime
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|+
literal|"&rarr; "
operator|+
name|newTime
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|dispTime2
parameter_list|(
name|TimeInfo
name|oldTime
parameter_list|,
name|TimeInfo
name|newTime
parameter_list|)
block|{
if|if
condition|(
name|oldTime
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|newTime
operator|==
literal|null
condition|)
return|return
literal|""
return|;
else|else
return|return
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|"'><i>not-assigned</i></font>&rarr; "
operator|+
name|newTime
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|else if
condition|(
name|newTime
operator|==
literal|null
condition|)
return|return
name|oldTime
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|+
literal|"&rarr;<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|"'><i>not-assigned</i></font>"
return|;
if|if
condition|(
name|oldTime
operator|.
name|equals
argument_list|(
name|newTime
argument_list|)
condition|)
return|return
name|newTime
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
return|return
name|oldTime
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|+
literal|"&rarr; "
operator|+
name|newTime
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|dispTimeNoHtml
parameter_list|(
name|TimeInfo
name|oldTime
parameter_list|,
name|TimeInfo
name|newTime
parameter_list|)
block|{
if|if
condition|(
name|oldTime
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|newTime
operator|==
literal|null
condition|)
return|return
literal|""
return|;
else|else
return|return
literal|"not-assigned -> "
operator|+
name|newTime
operator|.
name|getDaysName
argument_list|()
operator|+
literal|" "
operator|+
name|newTime
operator|.
name|getStartTime
argument_list|()
return|;
block|}
if|else if
condition|(
name|newTime
operator|==
literal|null
condition|)
return|return
name|oldTime
operator|.
name|getDaysName
argument_list|()
operator|+
literal|" "
operator|+
name|oldTime
operator|.
name|getStartTime
argument_list|()
operator|+
literal|" -> not-assigned"
return|;
if|if
condition|(
name|oldTime
operator|.
name|equals
argument_list|(
name|newTime
argument_list|)
condition|)
return|return
name|newTime
operator|.
name|getDaysName
argument_list|()
operator|+
literal|" "
operator|+
name|newTime
operator|.
name|getStartTime
argument_list|()
return|;
return|return
name|oldTime
operator|.
name|getDaysName
argument_list|()
operator|+
literal|" "
operator|+
name|oldTime
operator|.
name|getStartTime
argument_list|()
operator|+
literal|" -> "
operator|+
name|newTime
operator|.
name|getDaysName
argument_list|()
operator|+
literal|" "
operator|+
name|newTime
operator|.
name|getStartTime
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|dispRoom
parameter_list|(
name|RoomInfo
name|oldRoom
parameter_list|,
name|RoomInfo
name|newRoom
parameter_list|)
block|{
if|if
condition|(
name|oldRoom
operator|==
literal|null
condition|)
return|return
name|newRoom
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
if|if
condition|(
name|newRoom
operator|==
literal|null
condition|)
return|return
name|oldRoom
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|+
literal|"&rarr;<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|"'><i>not-assigned</i></font>"
return|;
if|if
condition|(
name|oldRoom
operator|.
name|equals
argument_list|(
name|newRoom
argument_list|)
condition|)
return|return
name|newRoom
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
return|return
name|oldRoom
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|+
literal|"&rarr; "
operator|+
name|newRoom
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|dispRoom2
parameter_list|(
name|RoomInfo
name|oldRoom
parameter_list|,
name|RoomInfo
name|newRoom
parameter_list|)
block|{
if|if
condition|(
name|oldRoom
operator|==
literal|null
condition|)
return|return
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|"'><i>not-assigned</i></font>&rarr; "
operator|+
name|newRoom
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
if|if
condition|(
name|newRoom
operator|==
literal|null
condition|)
return|return
name|oldRoom
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|+
literal|"&rarr;<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|"'><i>not-assigned</i></font>"
return|;
if|if
condition|(
name|oldRoom
operator|.
name|equals
argument_list|(
name|newRoom
argument_list|)
condition|)
return|return
name|newRoom
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
return|return
name|oldRoom
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|+
literal|"&rarr; "
operator|+
name|newRoom
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|dispRoomNoHtml
parameter_list|(
name|RoomInfo
name|oldRoom
parameter_list|,
name|RoomInfo
name|newRoom
parameter_list|)
block|{
if|if
condition|(
name|oldRoom
operator|==
literal|null
condition|)
return|return
literal|"not-assigned -> "
operator|+
name|newRoom
operator|.
name|getName
argument_list|()
return|;
if|if
condition|(
name|newRoom
operator|==
literal|null
condition|)
return|return
name|oldRoom
operator|.
name|getName
argument_list|()
operator|+
literal|" -> not-assigned"
return|;
if|if
condition|(
name|oldRoom
operator|.
name|equals
argument_list|(
name|newRoom
argument_list|)
condition|)
return|return
name|newRoom
operator|.
name|getName
argument_list|()
return|;
return|return
name|oldRoom
operator|.
name|getName
argument_list|()
operator|+
literal|" -> "
operator|+
name|newRoom
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|dispNumber
parameter_list|(
name|double
name|number
parameter_list|)
block|{
return|return
name|dispNumber
argument_list|(
literal|""
argument_list|,
name|number
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|dispNumber
parameter_list|(
name|String
name|prefix
parameter_list|,
name|double
name|number
parameter_list|)
block|{
if|if
condition|(
name|number
operator|>
literal|0
condition|)
return|return
literal|"<font color='red'>"
operator|+
name|prefix
operator|+
literal|"+"
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|number
argument_list|)
operator|+
literal|"</font>"
return|;
if|if
condition|(
name|number
operator|<
literal|0
condition|)
return|return
literal|"<font color='green'>"
operator|+
name|prefix
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|number
argument_list|)
operator|+
literal|"</font>"
return|;
return|return
name|prefix
operator|+
literal|"0"
return|;
block|}
specifier|public
specifier|static
name|String
name|dispNumberNoHtml
parameter_list|(
name|double
name|number
parameter_list|)
block|{
return|return
name|dispNumberNoHtml
argument_list|(
literal|""
argument_list|,
name|number
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|dispNumberNoHtml
parameter_list|(
name|String
name|prefix
parameter_list|,
name|double
name|number
parameter_list|)
block|{
if|if
condition|(
name|number
operator|>
literal|0
condition|)
return|return
name|prefix
operator|+
literal|"+"
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|number
argument_list|)
return|;
if|if
condition|(
name|number
operator|<
literal|0
condition|)
return|return
name|prefix
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|number
argument_list|)
return|;
return|return
name|prefix
operator|+
literal|"0"
return|;
block|}
specifier|public
name|String
name|getDistributionPreference
parameter_list|()
block|{
if|if
condition|(
name|iGroupConstraintInfos
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|"0"
return|;
name|PreferenceCombination
name|constrPreference
init|=
name|PreferenceCombination
operator|.
name|getDefault
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|i2
init|=
name|iGroupConstraintInfos
operator|.
name|elements
argument_list|()
init|;
name|i2
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|GroupConstraintInfo
name|cInfo
init|=
operator|(
operator|(
name|DistributionInfo
operator|)
name|i2
operator|.
name|nextElement
argument_list|()
operator|)
operator|.
name|getInfo
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|cInfo
operator|.
name|isSatisfied
argument_list|()
condition|)
name|constrPreference
operator|.
name|addPreferenceProlog
argument_list|(
name|cInfo
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|constrPreference
operator|.
name|getPreferenceProlog
argument_list|()
return|;
block|}
specifier|public
name|String
name|getClassName
parameter_list|()
block|{
return|return
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|public
name|String
name|getClassHtml
parameter_list|()
block|{
return|return
name|getClazz
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|true
argument_list|)
return|;
block|}
specifier|public
name|String
name|getTimeName
parameter_list|()
block|{
return|return
operator|(
name|getTime
argument_list|()
operator|==
literal|null
condition|?
name|getAssignedTime
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|getAssignedTime
argument_list|()
operator|.
name|getDaysName
argument_list|()
operator|+
literal|" "
operator|+
name|getAssignedTime
argument_list|()
operator|.
name|getStartTime
argument_list|()
else|:
name|getTime
argument_list|()
operator|.
name|getDaysName
argument_list|()
operator|+
literal|" "
operator|+
name|getTime
argument_list|()
operator|.
name|getStartTime
argument_list|()
operator|)
return|;
block|}
specifier|public
name|String
name|getTimeHtml
parameter_list|()
block|{
return|return
name|dispTime
argument_list|(
name|iTime
argument_list|,
name|iAssignedTime
argument_list|)
return|;
block|}
specifier|public
name|String
name|getTimeNoHtml
parameter_list|()
block|{
return|return
name|dispTimeNoHtml
argument_list|(
name|iTime
argument_list|,
name|iAssignedTime
argument_list|)
return|;
block|}
specifier|public
name|String
name|getDaysName
parameter_list|()
block|{
return|return
operator|(
name|getTime
argument_list|()
operator|==
literal|null
condition|?
name|getAssignedTime
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|getAssignedTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
else|:
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
operator|)
return|;
block|}
specifier|public
name|String
name|getDaysHtml
parameter_list|()
block|{
return|return
operator|(
name|getTime
argument_list|()
operator|==
literal|null
condition|?
name|getAssignedTime
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|getAssignedTime
argument_list|()
operator|.
name|getDatePatternHtml
argument_list|()
else|:
name|getAssignedTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
operator|.
name|equals
argument_list|(
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
condition|?
name|getTime
argument_list|()
operator|.
name|getDatePatternHtml
argument_list|()
else|:
name|getTime
argument_list|()
operator|.
name|getDatePatternHtml
argument_list|()
operator|+
literal|"&rarr; "
operator|+
name|getAssignedTime
argument_list|()
operator|.
name|getDatePatternHtml
argument_list|()
operator|)
return|;
block|}
specifier|public
name|String
name|getRoomName
parameter_list|()
block|{
name|RoomInfo
index|[]
name|r
init|=
operator|(
name|getRoom
argument_list|()
operator|==
literal|null
condition|?
name|getAssignedRoom
argument_list|()
else|:
name|getRoom
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|r
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|r
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getRoomHtml
parameter_list|()
block|{
name|RoomInfo
index|[]
name|r
init|=
operator|(
name|getRoom
argument_list|()
operator|==
literal|null
condition|?
name|getAssignedRoom
argument_list|()
else|:
name|getRoom
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|r
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|dispRoom
argument_list|(
operator|(
name|iRoom
operator|==
literal|null
condition|?
literal|null
else|:
name|iRoom
index|[
name|i
index|]
operator|)
argument_list|,
operator|(
name|iAssignedRoom
operator|==
literal|null
condition|?
literal|null
else|:
name|iAssignedRoom
index|[
name|i
index|]
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getRoomNoHtml
parameter_list|()
block|{
name|RoomInfo
index|[]
name|r
init|=
operator|(
name|getRoom
argument_list|()
operator|==
literal|null
condition|?
name|getAssignedRoom
argument_list|()
else|:
name|getRoom
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|r
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|dispRoomNoHtml
argument_list|(
operator|(
name|iRoom
operator|==
literal|null
condition|?
literal|null
else|:
name|iRoom
index|[
name|i
index|]
operator|)
argument_list|,
operator|(
name|iAssignedRoom
operator|==
literal|null
condition|?
literal|null
else|:
name|iAssignedRoom
index|[
name|i
index|]
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getPertPenalty
parameter_list|()
block|{
return|return
name|dispNumberShort
argument_list|(
name|iAssignedAssignmentInfo
operator|==
literal|null
argument_list|,
operator|(
name|iAssignmentInfo
operator|==
literal|null
condition|?
literal|0.0
else|:
name|iAssignmentInfo
operator|.
name|getPerturbationPenalty
argument_list|()
operator|)
argument_list|,
operator|(
name|iAssignedAssignmentInfo
operator|==
literal|null
condition|?
literal|0.0
else|:
name|iAssignedAssignmentInfo
operator|.
name|getPerturbationPenalty
argument_list|()
operator|)
argument_list|)
return|;
block|}
specifier|public
name|Comparable
name|getPertPenaltyCmp
parameter_list|()
block|{
return|return
operator|new
name|Double
argument_list|(
operator|(
name|iAssignmentInfo
operator|==
literal|null
condition|?
literal|0.0
else|:
name|iAssignmentInfo
operator|.
name|getPerturbationPenalty
argument_list|()
operator|)
operator|-
operator|(
name|iAssignedAssignmentInfo
operator|==
literal|null
condition|?
literal|0.0
else|:
name|iAssignedAssignmentInfo
operator|.
name|getPerturbationPenalty
argument_list|()
operator|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getNrStudentConflicts
parameter_list|()
block|{
name|String
name|s
init|=
name|dispNumberShort
argument_list|(
name|iAssignedAssignmentInfo
operator|==
literal|null
argument_list|,
operator|(
name|iAssignmentInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|iAssignmentInfo
operator|.
name|getNrStudentConflicts
argument_list|()
operator|)
argument_list|,
operator|(
name|iAssignedAssignmentInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|iAssignedAssignmentInfo
operator|.
name|getNrStudentConflicts
argument_list|()
operator|)
argument_list|)
decl_stmt|;
name|String
name|c
init|=
name|dispNumberShort
argument_list|(
name|iAssignedAssignmentInfo
operator|==
literal|null
argument_list|,
literal|"c"
argument_list|,
operator|(
name|iAssignmentInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|iAssignmentInfo
operator|.
name|getNrCommitedStudentConflicts
argument_list|()
operator|)
argument_list|,
operator|(
name|iAssignedAssignmentInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|iAssignedAssignmentInfo
operator|.
name|getNrCommitedStudentConflicts
argument_list|()
operator|)
argument_list|)
decl_stmt|;
name|String
name|d
init|=
name|dispNumberShort
argument_list|(
name|iAssignedAssignmentInfo
operator|==
literal|null
argument_list|,
literal|"d"
argument_list|,
operator|(
name|iAssignmentInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|iAssignmentInfo
operator|.
name|getNrDistanceStudentConflicts
argument_list|()
operator|)
argument_list|,
operator|(
name|iAssignedAssignmentInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|iAssignedAssignmentInfo
operator|.
name|getNrDistanceStudentConflicts
argument_list|()
operator|)
argument_list|)
decl_stmt|;
name|String
name|h
init|=
name|dispNumberShort
argument_list|(
name|iAssignedAssignmentInfo
operator|==
literal|null
argument_list|,
literal|"h"
argument_list|,
operator|(
name|iAssignmentInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|iAssignmentInfo
operator|.
name|getNrHardStudentConflicts
argument_list|()
operator|)
argument_list|,
operator|(
name|iAssignedAssignmentInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|iAssignedAssignmentInfo
operator|.
name|getNrHardStudentConflicts
argument_list|()
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|&&
name|d
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|&&
name|h
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
name|s
return|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|h
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
return|return
name|s
operator|+
literal|" ("
operator|+
name|sb
operator|+
literal|")"
return|;
block|}
specifier|public
name|Comparable
name|getNrStudentConflictsCmp
parameter_list|()
block|{
return|return
operator|new
name|Integer
argument_list|(
operator|(
name|iAssignmentInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|iAssignmentInfo
operator|.
name|getNrStudentConflicts
argument_list|()
operator|)
operator|-
operator|(
name|iAssignedAssignmentInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|iAssignedAssignmentInfo
operator|.
name|getNrStudentConflicts
argument_list|()
operator|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getTimePreference
parameter_list|()
block|{
return|return
name|dispNumberShort
argument_list|(
name|iAssignedAssignmentInfo
operator|==
literal|null
argument_list|,
operator|(
name|iAssignmentInfo
operator|==
literal|null
condition|?
literal|0.0
else|:
name|iAssignmentInfo
operator|.
name|getNormalizedTimePreference
argument_list|()
operator|)
argument_list|,
operator|(
name|iAssignedAssignmentInfo
operator|==
literal|null
condition|?
literal|0.0
else|:
name|iAssignedAssignmentInfo
operator|.
name|getNormalizedTimePreference
argument_list|()
operator|)
argument_list|)
return|;
block|}
specifier|public
name|Comparable
name|getTimePreferenceCmp
parameter_list|()
block|{
return|return
operator|new
name|Double
argument_list|(
operator|(
name|iAssignmentInfo
operator|==
literal|null
condition|?
literal|0.0
else|:
name|iAssignmentInfo
operator|.
name|getNormalizedTimePreference
argument_list|()
operator|)
operator|-
operator|(
name|iAssignedAssignmentInfo
operator|==
literal|null
condition|?
literal|0.0
else|:
name|iAssignedAssignmentInfo
operator|.
name|getNormalizedTimePreference
argument_list|()
operator|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getRoomPreference
parameter_list|()
block|{
return|return
name|dispNumberShort
argument_list|(
name|iAssignedAssignmentInfo
operator|==
literal|null
argument_list|,
operator|(
name|iAssignmentInfo
operator|==
literal|null
condition|?
literal|0.0
else|:
name|iAssignmentInfo
operator|.
name|sumRoomPreference
argument_list|()
operator|)
argument_list|,
operator|(
name|iAssignedAssignmentInfo
operator|==
literal|null
condition|?
literal|0.0
else|:
name|iAssignedAssignmentInfo
operator|.
name|sumRoomPreference
argument_list|()
operator|)
argument_list|)
return|;
block|}
specifier|public
name|Comparable
name|getRoomPreferenceCmp
parameter_list|()
block|{
return|return
operator|new
name|Double
argument_list|(
operator|(
name|iAssignmentInfo
operator|==
literal|null
condition|?
literal|0.0
else|:
name|iAssignmentInfo
operator|.
name|sumRoomPreference
argument_list|()
operator|)
operator|-
operator|(
name|iAssignedAssignmentInfo
operator|==
literal|null
condition|?
literal|0.0
else|:
name|iAssignedAssignmentInfo
operator|.
name|sumRoomPreference
argument_list|()
operator|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getBtbInstructorPreference
parameter_list|()
block|{
return|return
name|dispNumberShort
argument_list|(
name|iAssignedAssignmentInfo
operator|==
literal|null
argument_list|,
operator|(
name|iAssignmentInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|iAssignmentInfo
operator|.
name|getBtbInstructorPreference
argument_list|()
operator|)
argument_list|,
operator|(
name|iAssignedAssignmentInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|iAssignedAssignmentInfo
operator|.
name|getBtbInstructorPreference
argument_list|()
operator|)
argument_list|)
return|;
block|}
specifier|public
name|Comparable
name|getBtbInstructorPreferenceCmp
parameter_list|()
block|{
return|return
operator|new
name|Double
argument_list|(
operator|(
name|iAssignmentInfo
operator|==
literal|null
condition|?
literal|0.0
else|:
name|iAssignmentInfo
operator|.
name|getBtbInstructorPreference
argument_list|()
operator|)
operator|-
operator|(
name|iAssignedAssignmentInfo
operator|==
literal|null
condition|?
literal|0.0
else|:
name|iAssignedAssignmentInfo
operator|.
name|getBtbInstructorPreference
argument_list|()
operator|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getIsTooBig
parameter_list|()
block|{
return|return
name|dispNumberShort
argument_list|(
name|iAssignedAssignmentInfo
operator|==
literal|null
argument_list|,
operator|(
name|iAssignmentInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|iAssignmentInfo
operator|.
name|getTooBigRoomPreference
argument_list|()
operator|)
argument_list|,
operator|(
name|iAssignedAssignmentInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|iAssignedAssignmentInfo
operator|.
name|getTooBigRoomPreference
argument_list|()
operator|)
argument_list|)
return|;
block|}
specifier|public
name|Comparable
name|getIsTooBigCmp
parameter_list|()
block|{
return|return
operator|new
name|Integer
argument_list|(
operator|(
name|iAssignmentInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|iAssignmentInfo
operator|.
name|getTooBigRoomPreference
argument_list|()
operator|)
operator|-
operator|(
name|iAssignedAssignmentInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|iAssignedAssignmentInfo
operator|.
name|getTooBigRoomPreference
argument_list|()
operator|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getUselessHalfHours
parameter_list|()
block|{
return|return
name|dispNumberShort
argument_list|(
name|iAssignedAssignmentInfo
operator|==
literal|null
argument_list|,
operator|(
name|iAssignmentInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|iAssignmentInfo
operator|.
name|getUselessHalfHours
argument_list|()
operator|)
argument_list|,
operator|(
name|iAssignedAssignmentInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|iAssignedAssignmentInfo
operator|.
name|getUselessHalfHours
argument_list|()
operator|)
argument_list|)
return|;
block|}
specifier|public
name|Comparable
name|getUselessHalfHoursCmp
parameter_list|()
block|{
return|return
operator|new
name|Integer
argument_list|(
operator|(
name|iAssignmentInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|iAssignmentInfo
operator|.
name|getUselessHalfHours
argument_list|()
operator|)
operator|-
operator|(
name|iAssignedAssignmentInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|iAssignedAssignmentInfo
operator|.
name|getUselessHalfHours
argument_list|()
operator|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getDeptBalancPenalty
parameter_list|()
block|{
return|return
name|dispNumberShort
argument_list|(
name|iAssignedAssignmentInfo
operator|==
literal|null
argument_list|,
operator|(
name|iAssignmentInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|iAssignmentInfo
operator|.
name|getDeptBalancPenalty
argument_list|()
operator|)
argument_list|,
operator|(
name|iAssignedAssignmentInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|iAssignedAssignmentInfo
operator|.
name|getDeptBalancPenalty
argument_list|()
operator|)
argument_list|)
return|;
block|}
specifier|public
name|Comparable
name|getDeptBalancPenaltyCmp
parameter_list|()
block|{
return|return
operator|new
name|Double
argument_list|(
operator|(
name|iAssignmentInfo
operator|==
literal|null
condition|?
literal|0.0
else|:
name|iAssignmentInfo
operator|.
name|getDeptBalancPenalty
argument_list|()
operator|)
operator|-
operator|(
name|iAssignedAssignmentInfo
operator|==
literal|null
condition|?
literal|0.0
else|:
name|iAssignedAssignmentInfo
operator|.
name|getDeptBalancPenalty
argument_list|()
operator|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getSpreadPenalty
parameter_list|()
block|{
return|return
name|dispNumberShort
argument_list|(
name|iAssignedAssignmentInfo
operator|==
literal|null
argument_list|,
operator|(
name|iAssignmentInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|iAssignmentInfo
operator|.
name|getSpreadPenalty
argument_list|()
operator|)
argument_list|,
operator|(
name|iAssignedAssignmentInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|iAssignedAssignmentInfo
operator|.
name|getSpreadPenalty
argument_list|()
operator|)
argument_list|)
return|;
block|}
specifier|public
name|Comparable
name|getSpreadPenaltyCmp
parameter_list|()
block|{
return|return
operator|new
name|Double
argument_list|(
operator|(
name|iAssignmentInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|iAssignmentInfo
operator|.
name|getSpreadPenalty
argument_list|()
operator|)
operator|-
operator|(
name|iAssignedAssignmentInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|iAssignedAssignmentInfo
operator|.
name|getSpreadPenalty
argument_list|()
operator|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getGroupConstraintPref
parameter_list|()
block|{
return|return
name|dispNumberShort
argument_list|(
name|iAssignedAssignmentInfo
operator|==
literal|null
argument_list|,
operator|(
name|iAssignmentInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|iAssignmentInfo
operator|.
name|getGroupConstraintPref
argument_list|()
operator|)
argument_list|,
operator|(
name|iAssignedAssignmentInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|iAssignedAssignmentInfo
operator|.
name|getGroupConstraintPref
argument_list|()
operator|)
argument_list|)
return|;
block|}
specifier|public
name|Comparable
name|getGroupConstraintPrefCmp
parameter_list|()
block|{
return|return
operator|new
name|Integer
argument_list|(
operator|(
name|iAssignmentInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|iAssignmentInfo
operator|.
name|getGroupConstraintPref
argument_list|()
operator|)
operator|-
operator|(
name|iAssignedAssignmentInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|iAssignedAssignmentInfo
operator|.
name|getGroupConstraintPref
argument_list|()
operator|)
argument_list|)
return|;
block|}
specifier|public
name|AssignmentPreferenceInfo
name|getInfo
parameter_list|()
block|{
return|return
name|iAssignmentInfo
return|;
block|}
specifier|public
name|Hint
name|getHint
parameter_list|()
block|{
if|if
condition|(
name|getAssignedTime
argument_list|()
operator|==
literal|null
operator|||
name|getAssignedRoom
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Vector
name|roomIds
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getAssignedRoom
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|roomIds
operator|.
name|add
argument_list|(
name|getAssignedRoom
argument_list|()
index|[
name|i
index|]
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|Hint
argument_list|(
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|,
name|getAssignedTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|,
name|getAssignedTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|roomIds
argument_list|,
name|getAssignedTime
argument_list|()
operator|.
name|getPatternId
argument_list|()
argument_list|,
name|getAssignedTime
argument_list|()
operator|.
name|getDatePatternId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|ClassAssignmentDetails
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|iClass
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ClassAssignmentDetails
operator|)
name|o
operator|)
operator|.
name|iClass
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|iClass
operator|.
name|getClassId
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|ClassAssignmentDetails
operator|)
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|iClass
operator|.
name|compareTo
argument_list|(
operator|(
operator|(
name|ClassAssignmentDetails
operator|)
name|o
operator|)
operator|.
name|iClass
argument_list|)
return|;
block|}
specifier|public
name|String
name|getInstructorName
parameter_list|()
block|{
if|if
condition|(
name|iInstructor
operator|==
literal|null
operator|||
name|iInstructor
operator|.
name|length
operator|==
literal|0
condition|)
return|return
literal|""
return|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iInstructor
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|iInstructor
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getInstructorHtml
parameter_list|()
block|{
if|if
condition|(
name|iInstructor
operator|==
literal|null
operator|||
name|iInstructor
operator|.
name|length
operator|==
literal|0
condition|)
return|return
literal|""
return|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iInstructor
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|iInstructor
index|[
name|i
index|]
operator|.
name|toHtml
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClassName
argument_list|()
operator|+
literal|" "
operator|+
name|getTimeNoHtml
argument_list|()
operator|+
literal|" "
operator|+
name|getRoomNoHtml
argument_list|()
operator|+
literal|" "
operator|+
name|getDaysName
argument_list|()
operator|+
literal|" "
operator|+
name|getInstructorName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

