begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2008 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|interactive
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|SolverProxy
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SuggestionsModel
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|sFilters
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"No Restrictions"
block|,
literal|"Same Time"
block|,
literal|"Same Room"
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sFilterNoFilter
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sFilterSameTime
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sFilterSameRoom
init|=
literal|2
decl_stmt|;
specifier|private
name|boolean
name|iCanAllowBreakHard
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iAllowBreakHard
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iDisplayCBS
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|iAllTheSame
init|=
literal|true
decl_stmt|;
specifier|private
name|int
name|iDepth
init|=
literal|2
decl_stmt|;
specifier|private
name|long
name|iTimeOut
init|=
literal|5000
decl_stmt|;
specifier|private
name|int
name|iFilter
init|=
name|sFilterNoFilter
decl_stmt|;
specifier|private
name|boolean
name|iCompute
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|iDisplayFilter
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iDisplayPlacements
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|iLimit
init|=
literal|20
decl_stmt|;
specifier|private
name|String
name|iFilterText
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iSimpleMode
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|iReversedMode
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|iMinRoomSize
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|int
name|iMaxRoomSize
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|boolean
name|iDisplaySuggestions
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|iDisplayConfTable
init|=
literal|false
decl_stmt|;
specifier|public
name|Vector
name|iHints
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
specifier|public
name|Long
name|iClassId
init|=
literal|null
decl_stmt|;
specifier|private
specifier|transient
name|TreeSet
name|iSuggestions
init|=
literal|null
decl_stmt|;
specifier|private
specifier|transient
name|Suggestion
name|iCurrentSuggestion
init|=
literal|null
decl_stmt|;
specifier|private
specifier|transient
name|boolean
name|iTimeoutReached
init|=
literal|false
decl_stmt|;
specifier|private
specifier|transient
name|long
name|iNrCombinationsConsidered
init|=
literal|0
decl_stmt|;
specifier|private
specifier|transient
name|long
name|iNrSolutions
init|=
literal|0
decl_stmt|;
specifier|private
specifier|transient
name|long
name|iNrTries
init|=
literal|0
decl_stmt|;
specifier|private
specifier|transient
name|TreeSet
name|iTryAssignments
init|=
literal|null
decl_stmt|;
specifier|private
specifier|transient
name|Suggestion
name|iSelectedSuggestion
init|=
literal|null
decl_stmt|;
specifier|private
specifier|transient
name|Suggestion
name|iEmptySuggestion
init|=
literal|null
decl_stmt|;
specifier|private
specifier|transient
name|Vector
name|iConfTable
init|=
literal|null
decl_stmt|;
specifier|public
name|SuggestionsModel
parameter_list|()
block|{
block|}
specifier|public
name|void
name|reset
parameter_list|(
name|SolverProxy
name|solver
parameter_list|)
throws|throws
name|Exception
block|{
name|iCanAllowBreakHard
operator|=
name|getCanAllowBreakHard
argument_list|(
name|solver
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iCanAllowBreakHard
condition|)
name|iAllowBreakHard
operator|=
literal|false
expr_stmt|;
name|iSelectedSuggestion
operator|=
literal|null
expr_stmt|;
name|iDepth
operator|=
literal|2
expr_stmt|;
name|iTimeOut
operator|=
literal|5000
expr_stmt|;
name|iCompute
operator|=
literal|true
expr_stmt|;
name|iHints
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iDisplayFilter
operator|=
name|canDisplayFilter
argument_list|(
name|solver
argument_list|)
expr_stmt|;
name|iFilter
operator|=
name|sFilterNoFilter
expr_stmt|;
name|iFilterText
operator|=
literal|null
expr_stmt|;
name|iMinRoomSize
operator|=
operator|-
literal|1
expr_stmt|;
name|iMaxRoomSize
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|boolean
name|canDisplayFilter
parameter_list|()
block|{
return|return
name|iDisplayFilter
return|;
block|}
specifier|public
name|boolean
name|isComputed
parameter_list|()
block|{
return|return
operator|!
name|iCompute
return|;
block|}
specifier|public
name|void
name|recompute
parameter_list|()
block|{
name|iCompute
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|setFilter
parameter_list|(
name|int
name|filter
parameter_list|)
block|{
if|if
condition|(
name|iFilter
operator|!=
name|filter
condition|)
block|{
name|iFilter
operator|=
name|filter
expr_stmt|;
name|iCompute
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getFilter
parameter_list|()
block|{
return|return
name|iFilter
return|;
block|}
specifier|public
name|void
name|setAllTheSame
parameter_list|(
name|boolean
name|allTheSame
parameter_list|)
block|{
if|if
condition|(
name|iAllTheSame
operator|!=
name|allTheSame
condition|)
block|{
name|iAllTheSame
operator|=
name|allTheSame
expr_stmt|;
name|iCompute
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isAllTheSame
parameter_list|()
block|{
return|return
name|iAllTheSame
return|;
block|}
specifier|public
name|void
name|setDepth
parameter_list|(
name|int
name|depth
parameter_list|)
block|{
if|if
condition|(
name|iDepth
operator|!=
name|depth
condition|)
block|{
name|iDepth
operator|=
name|depth
expr_stmt|;
name|iCompute
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getDepth
parameter_list|()
block|{
return|return
name|iDepth
return|;
block|}
specifier|public
name|void
name|incDepth
parameter_list|()
block|{
name|iDepth
operator|++
expr_stmt|;
name|iCompute
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|long
name|getTimeout
parameter_list|()
block|{
return|return
name|iTimeOut
return|;
block|}
specifier|public
name|void
name|setTimeout
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
if|if
condition|(
name|iTimeOut
operator|!=
name|timeout
condition|)
block|{
name|iTimeOut
operator|=
name|timeout
expr_stmt|;
name|iCompute
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|doubleTimeout
parameter_list|()
block|{
name|iTimeOut
operator|*=
literal|2
expr_stmt|;
name|iCompute
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|getCanAllowBreakHard
parameter_list|()
block|{
return|return
name|iCanAllowBreakHard
return|;
block|}
specifier|public
name|void
name|setAllowBreakHard
parameter_list|(
name|boolean
name|allowBreakHard
parameter_list|)
block|{
if|if
condition|(
name|iAllowBreakHard
operator|!=
name|allowBreakHard
condition|)
block|{
name|iAllowBreakHard
operator|=
name|allowBreakHard
expr_stmt|;
name|iCompute
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|getAllowBreakHard
parameter_list|()
block|{
return|return
name|iAllowBreakHard
return|;
block|}
specifier|public
name|boolean
name|getDisplayCBS
parameter_list|()
block|{
return|return
name|iDisplayCBS
return|;
block|}
specifier|public
name|void
name|setDisplayCBS
parameter_list|(
name|boolean
name|displayCBS
parameter_list|)
block|{
name|iDisplayCBS
operator|=
name|displayCBS
expr_stmt|;
block|}
specifier|public
name|boolean
name|getDisplayPlacements
parameter_list|()
block|{
return|return
name|iDisplayPlacements
return|;
block|}
specifier|public
name|void
name|setDisplayPlacements
parameter_list|(
name|boolean
name|displayPlacements
parameter_list|)
block|{
name|iDisplayPlacements
operator|=
name|displayPlacements
expr_stmt|;
name|iCompute
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|int
name|getLimit
parameter_list|()
block|{
return|return
name|iLimit
return|;
block|}
specifier|public
name|void
name|setLimit
parameter_list|(
name|int
name|limit
parameter_list|)
block|{
name|iLimit
operator|=
name|limit
expr_stmt|;
name|iCompute
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|getSimpleMode
parameter_list|()
block|{
return|return
name|iSimpleMode
return|;
block|}
specifier|public
name|void
name|setSimpleMode
parameter_list|(
name|boolean
name|simpleMode
parameter_list|)
block|{
name|iSimpleMode
operator|=
name|simpleMode
expr_stmt|;
block|}
specifier|public
name|boolean
name|getReversedMode
parameter_list|()
block|{
return|return
name|iReversedMode
return|;
block|}
specifier|public
name|void
name|setReversedMode
parameter_list|(
name|boolean
name|reversedMode
parameter_list|)
block|{
name|iReversedMode
operator|=
name|reversedMode
expr_stmt|;
block|}
specifier|public
name|String
name|getFilterText
parameter_list|()
block|{
return|return
name|iFilterText
return|;
block|}
specifier|public
name|void
name|setFilterText
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|iFilterText
operator|=
name|text
expr_stmt|;
name|iCompute
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|int
name|getMinRoomSize
parameter_list|()
block|{
return|return
name|iMinRoomSize
return|;
block|}
specifier|public
name|int
name|getMaxRoomSize
parameter_list|()
block|{
return|return
name|iMaxRoomSize
return|;
block|}
specifier|public
name|void
name|setMinRoomSize
parameter_list|(
name|int
name|minRoomSize
parameter_list|)
block|{
name|iMinRoomSize
operator|=
name|minRoomSize
expr_stmt|;
block|}
specifier|public
name|void
name|setMaxRoomSize
parameter_list|(
name|int
name|maxRoomSize
parameter_list|)
block|{
name|iMaxRoomSize
operator|=
name|maxRoomSize
expr_stmt|;
block|}
specifier|public
name|boolean
name|getDisplayConfTable
parameter_list|()
block|{
return|return
name|iDisplayConfTable
return|;
block|}
specifier|public
name|void
name|setDisplayConfTable
parameter_list|(
name|boolean
name|displayConfTable
parameter_list|)
block|{
name|iDisplayConfTable
operator|=
name|displayConfTable
expr_stmt|;
block|}
specifier|public
name|boolean
name|getDisplaySuggestions
parameter_list|()
block|{
return|return
name|iDisplaySuggestions
return|;
block|}
specifier|public
name|void
name|setDisplaySuggestions
parameter_list|(
name|boolean
name|displaySuggestions
parameter_list|)
block|{
name|iDisplaySuggestions
operator|=
name|displaySuggestions
expr_stmt|;
block|}
specifier|public
name|void
name|setClassId
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|classId
operator|.
name|equals
argument_list|(
name|iClassId
argument_list|)
condition|)
block|{
name|iClassId
operator|=
name|classId
expr_stmt|;
name|iCompute
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
name|Long
name|getClassId
parameter_list|()
block|{
return|return
name|iClassId
return|;
block|}
specifier|public
name|Vector
name|getHints
parameter_list|()
block|{
return|return
name|iHints
return|;
block|}
specifier|public
name|void
name|addHint
parameter_list|(
name|Long
name|classId
parameter_list|,
name|int
name|days
parameter_list|,
name|int
name|startSlots
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|roomIds
parameter_list|,
name|Long
name|patternId
parameter_list|,
name|Long
name|datePatternId
parameter_list|)
block|{
name|Hint
name|hint
init|=
operator|new
name|Hint
argument_list|(
name|classId
argument_list|,
name|days
argument_list|,
name|startSlots
argument_list|,
name|roomIds
argument_list|,
name|patternId
argument_list|,
name|datePatternId
argument_list|)
decl_stmt|;
name|Hint
name|prev
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|iHints
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Hint
name|h
init|=
operator|(
name|Hint
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|h
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|hint
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
block|{
name|prev
operator|=
name|h
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
name|iHints
operator|.
name|remove
argument_list|(
name|prev
argument_list|)
expr_stmt|;
name|iHints
operator|.
name|add
argument_list|(
name|hint
argument_list|)
expr_stmt|;
name|iSelectedSuggestion
operator|=
literal|null
expr_stmt|;
name|iCompute
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|remHint
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
name|Hint
name|rem
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|iHints
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Hint
name|h
init|=
operator|(
name|Hint
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|h
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|classId
argument_list|)
condition|)
block|{
name|rem
operator|=
name|h
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|rem
operator|!=
literal|null
condition|)
block|{
name|iHints
operator|.
name|remove
argument_list|(
name|rem
argument_list|)
expr_stmt|;
name|iSelectedSuggestion
operator|=
literal|null
expr_stmt|;
name|iCompute
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|getCanAllowBreakHard
parameter_list|(
name|SolverProxy
name|solver
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|solver
operator|==
literal|null
condition|?
literal|false
else|:
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.InteractiveMode"
argument_list|,
literal|false
argument_list|)
operator|)
return|;
block|}
specifier|public
name|boolean
name|canDisplayFilter
parameter_list|(
name|SolverProxy
name|solver
parameter_list|)
block|{
return|return
name|solver
operator|!=
literal|null
return|;
block|}
specifier|public
name|Suggestion
name|getSelectedSuggestion
parameter_list|()
block|{
return|return
name|iSelectedSuggestion
return|;
block|}
specifier|public
name|void
name|selectSuggestion
parameter_list|(
name|int
name|ord
parameter_list|)
block|{
name|iSelectedSuggestion
operator|=
operator|(
name|Suggestion
operator|)
name|iSuggestions
operator|.
name|toArray
argument_list|()
index|[
name|ord
index|]
expr_stmt|;
block|}
specifier|public
name|void
name|selectPlacement
parameter_list|(
name|int
name|ord
parameter_list|)
block|{
name|Hint
name|hint
init|=
operator|(
operator|(
name|Suggestion
operator|)
name|iTryAssignments
operator|.
name|toArray
argument_list|()
index|[
name|ord
index|]
operator|)
operator|.
name|getHint
argument_list|()
decl_stmt|;
if|if
condition|(
name|hint
operator|!=
literal|null
condition|)
name|addHint
argument_list|(
name|hint
operator|.
name|getClassId
argument_list|()
argument_list|,
name|hint
operator|.
name|getDays
argument_list|()
argument_list|,
name|hint
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|hint
operator|.
name|getRoomIds
argument_list|()
argument_list|,
name|hint
operator|.
name|getPatternId
argument_list|()
argument_list|,
name|hint
operator|.
name|getDatePatternId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Suggestion
name|getEmptySuggestion
parameter_list|()
block|{
return|return
name|iEmptySuggestion
return|;
block|}
specifier|public
name|boolean
name|compute
parameter_list|(
name|SolverProxy
name|solver
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|iCompute
operator|==
literal|false
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|Suggestions
name|suggestions
init|=
name|solver
operator|.
name|getSuggestions
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|suggestions
operator|==
literal|null
condition|)
return|return
literal|false
return|;
comment|//solver.getSuggestions(iDepth,iTimeOut,iAllTheSame,iFilter==sFilterSameTime,iFilter==sFilterSameRoom,iAllowBreakHard,iClassId,iHints,iDisplayPlacements,iLimit,iFilterText,iMinRoomSize,iMaxRoomSize,iDisplaySuggestions,iDisplayConfTable);
name|iSuggestions
operator|=
name|suggestions
operator|.
name|getSuggestions
argument_list|()
expr_stmt|;
name|iTimeoutReached
operator|=
name|suggestions
operator|.
name|getTimeoutReached
argument_list|()
expr_stmt|;
name|iNrCombinationsConsidered
operator|=
name|suggestions
operator|.
name|getNrCombinationsConsidered
argument_list|()
expr_stmt|;
name|iNrSolutions
operator|=
name|suggestions
operator|.
name|getNrSolutions
argument_list|()
expr_stmt|;
name|iCurrentSuggestion
operator|=
name|suggestions
operator|.
name|currentSuggestion
argument_list|()
expr_stmt|;
name|iTryAssignments
operator|=
name|suggestions
operator|.
name|tryAllAssignments
argument_list|()
expr_stmt|;
name|iNrTries
operator|=
name|suggestions
operator|.
name|getNrTries
argument_list|()
expr_stmt|;
name|iEmptySuggestion
operator|=
name|suggestions
operator|.
name|emptySuggestion
argument_list|()
expr_stmt|;
name|iHints
operator|=
name|suggestions
operator|.
name|getHints
argument_list|()
expr_stmt|;
comment|//hints with added infos (remote server)
name|iCompute
operator|=
literal|false
expr_stmt|;
name|iConfTable
operator|=
name|suggestions
operator|.
name|getConfTable
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|TreeSet
name|getSuggestions
parameter_list|()
block|{
return|return
name|iSuggestions
return|;
block|}
specifier|public
name|Suggestion
name|getCurrentSuggestion
parameter_list|()
block|{
return|return
name|iCurrentSuggestion
return|;
block|}
specifier|public
name|TreeSet
name|getTryAssignments
parameter_list|()
block|{
return|return
name|iTryAssignments
return|;
block|}
specifier|public
name|boolean
name|getTimeoutReached
parameter_list|()
block|{
return|return
name|iTimeoutReached
return|;
block|}
specifier|public
name|long
name|getNrCombinationsConsidered
parameter_list|()
block|{
return|return
name|iNrCombinationsConsidered
return|;
block|}
specifier|public
name|long
name|getNrSolutions
parameter_list|()
block|{
return|return
name|iNrSolutions
return|;
block|}
specifier|public
name|long
name|getNrTries
parameter_list|()
block|{
return|return
name|iNrTries
return|;
block|}
specifier|public
name|Vector
name|getConfTable
parameter_list|()
block|{
return|return
name|iConfTable
return|;
block|}
specifier|public
name|void
name|save
parameter_list|(
name|UserContext
name|user
parameter_list|)
block|{
name|user
operator|.
name|setProperty
argument_list|(
literal|"SuggestionsModel.allowBreakHard"
argument_list|,
name|getAllowBreakHard
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
expr_stmt|;
name|user
operator|.
name|setProperty
argument_list|(
literal|"SuggestionsModel.displayCBS"
argument_list|,
name|getDisplayCBS
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
expr_stmt|;
name|user
operator|.
name|setProperty
argument_list|(
literal|"SuggestionsModel.displayPlacements"
argument_list|,
name|getDisplayPlacements
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
expr_stmt|;
name|user
operator|.
name|setProperty
argument_list|(
literal|"SuggestionsModel.simpleMode"
argument_list|,
name|getSimpleMode
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
expr_stmt|;
name|user
operator|.
name|setProperty
argument_list|(
literal|"SuggestionsModel.limit"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|getLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|user
operator|.
name|setProperty
argument_list|(
literal|"SuggestionsModel.displayConfTable"
argument_list|,
name|getDisplayConfTable
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
expr_stmt|;
name|user
operator|.
name|setProperty
argument_list|(
literal|"SuggestionsModel.displaySuggestions"
argument_list|,
name|getDisplaySuggestions
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
expr_stmt|;
name|user
operator|.
name|setProperty
argument_list|(
literal|"SuggestionsModel.reversedMode"
argument_list|,
name|getReversedMode
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|load
parameter_list|(
name|UserContext
name|context
parameter_list|)
block|{
name|setAllowBreakHard
argument_list|(
name|getCanAllowBreakHard
argument_list|()
operator|&&
literal|"1"
operator|.
name|equals
argument_list|(
name|context
operator|.
name|getProperty
argument_list|(
literal|"SuggestionsModel.allowBreakHard"
argument_list|,
name|getAllowBreakHard
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setDisplayCBS
argument_list|(
literal|"1"
operator|.
name|equals
argument_list|(
name|context
operator|.
name|getProperty
argument_list|(
literal|"SuggestionsModel.displayCBS"
argument_list|,
name|getDisplayCBS
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setDisplayPlacements
argument_list|(
literal|"1"
operator|.
name|equals
argument_list|(
name|context
operator|.
name|getProperty
argument_list|(
literal|"SuggestionsModel.displayPlacements"
argument_list|,
name|getDisplayPlacements
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setSimpleMode
argument_list|(
literal|"1"
operator|.
name|equals
argument_list|(
name|context
operator|.
name|getProperty
argument_list|(
literal|"SuggestionsModel.simpleMode"
argument_list|,
name|getSimpleMode
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setLimit
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|context
operator|.
name|getProperty
argument_list|(
literal|"SuggestionsModel.limit"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|getLimit
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setDisplayConfTable
argument_list|(
literal|"1"
operator|.
name|equals
argument_list|(
name|context
operator|.
name|getProperty
argument_list|(
literal|"SuggestionsModel.displayConfTable"
argument_list|,
name|getDisplayConfTable
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setDisplaySuggestions
argument_list|(
literal|"1"
operator|.
name|equals
argument_list|(
name|context
operator|.
name|getProperty
argument_list|(
literal|"SuggestionsModel.displaySuggestions"
argument_list|,
name|getDisplaySuggestions
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setReversedMode
argument_list|(
literal|"1"
operator|.
name|equals
argument_list|(
name|context
operator|.
name|getProperty
argument_list|(
literal|"SuggestionsModel.reversedMode"
argument_list|,
name|getReversedMode
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SuggestionModel{\n"
operator|+
literal|"  canAllowBreakHard = "
operator|+
name|iCanAllowBreakHard
operator|+
literal|"\n"
operator|+
literal|"  allowBreakHard = "
operator|+
name|iAllowBreakHard
operator|+
literal|"\n"
operator|+
literal|"  displayCBS = "
operator|+
name|iDisplayCBS
operator|+
literal|"\n"
operator|+
literal|"  allTheSame = "
operator|+
name|iAllTheSame
operator|+
literal|"\n"
operator|+
literal|"  depth = "
operator|+
name|iDepth
operator|+
literal|"\n"
operator|+
literal|"  timeOut = "
operator|+
name|iTimeOut
operator|+
literal|"\n"
operator|+
literal|"  filter = "
operator|+
name|iFilter
operator|+
literal|"\n"
operator|+
literal|"  compute = "
operator|+
name|iCompute
operator|+
literal|"\n"
operator|+
literal|"  displayFilter = "
operator|+
name|iDisplayFilter
operator|+
literal|"\n"
operator|+
literal|"  displayPlacements = "
operator|+
name|iDisplayPlacements
operator|+
literal|"\n"
operator|+
literal|"  limit = "
operator|+
name|iLimit
operator|+
literal|"\n"
operator|+
literal|"  filterText = "
operator|+
name|iFilterText
operator|+
literal|"\n"
operator|+
literal|"  simpleMode = "
operator|+
name|iSimpleMode
operator|+
literal|"\n"
operator|+
literal|"  reversedMode = "
operator|+
name|iReversedMode
operator|+
literal|"\n"
operator|+
literal|"  minRoomSize = "
operator|+
name|iMinRoomSize
operator|+
literal|"\n"
operator|+
literal|"  maxRoomSize = "
operator|+
name|iMaxRoomSize
operator|+
literal|"\n"
operator|+
literal|"  displaySuggestions = "
operator|+
name|iDisplaySuggestions
operator|+
literal|"\n"
operator|+
literal|"  displayConfTable = "
operator|+
name|iDisplayConfTable
operator|+
literal|"\n"
operator|+
literal|"  hints = "
operator|+
name|iHints
operator|+
literal|"\n"
operator|+
literal|"  classId = "
operator|+
name|iClassId
operator|+
literal|"\n"
operator|+
literal|"  suggestions = "
operator|+
name|iSuggestions
operator|+
literal|"\n"
operator|+
literal|"  currentSuggestion = "
operator|+
name|iCurrentSuggestion
operator|+
literal|"\n"
operator|+
literal|"  timeoutReached = "
operator|+
name|iTimeoutReached
operator|+
literal|"\n"
operator|+
literal|"  nrCombinationsConsidered = "
operator|+
name|iNrCombinationsConsidered
operator|+
literal|"\n"
operator|+
literal|"  nrSolutions = "
operator|+
name|iNrSolutions
operator|+
literal|"\n"
operator|+
literal|"  nrTries = "
operator|+
name|iNrTries
operator|+
literal|"\n"
operator|+
literal|"  tryAssignments = "
operator|+
name|iTryAssignments
operator|+
literal|"\n"
operator|+
literal|"  selectedSuggestion = "
operator|+
name|iSelectedSuggestion
operator|+
literal|"\n"
operator|+
literal|"  emptySuggestion = "
operator|+
name|iEmptySuggestion
operator|+
literal|"\n"
operator|+
literal|"  confTable = "
operator|+
name|iConfTable
operator|+
literal|"\n"
operator|+
literal|"}"
return|;
block|}
block|}
end_class

end_unit

