begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|interactive
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|FlexibleConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|GroupConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|InstructorConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|JenrlConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|BackToBackInstructorPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|BrokenTimePatterns
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|DepartmentBalancingPenalty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|DistributionPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|FlexibleConstraintCriterion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|Perturbations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|RoomPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|SameSubpartBalancingPenalty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|StudentCommittedConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|StudentConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|StudentDistanceConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|StudentHardConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|TimePreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|TooBigRooms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|UselessHalfHours
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Lecture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimetableModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solver
operator|.
name|Solver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|SolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|interactive
operator|.
name|Hint
operator|.
name|HintComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|GroupConstraintInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|JenrlInfo
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|Suggestion
implements|implements
name|Serializable
implements|,
name|Comparable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
name|java
operator|.
name|text
operator|.
name|DecimalFormat
name|sDF
init|=
operator|new
name|java
operator|.
name|text
operator|.
name|DecimalFormat
argument_list|(
literal|"0.000"
argument_list|,
operator|new
name|java
operator|.
name|text
operator|.
name|DecimalFormatSymbols
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|double
name|iValue
init|=
literal|0
decl_stmt|;
specifier|private
name|Vector
name|iDifferentAssignments
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iTooBigRooms
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|iUselessSlots
init|=
literal|0
decl_stmt|;
specifier|private
name|double
name|iGlobalTimePreference
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|iGlobalRoomPreference
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|iGlobalGroupConstraintPreference
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|iViolatedStudentConflicts
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|iHardStudentConflicts
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|iDistanceStudentConflicts
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|iCommitedStudentConflicts
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|iInstructorDistancePreference
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iDepartmentSpreadPenalty
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iUnassignedVariables
init|=
literal|0
decl_stmt|;
specifier|private
name|double
name|iPerturbationPenalty
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iSpreadPenalty
init|=
literal|0
decl_stmt|;
specifier|private
name|HashSet
name|iUnresolvedConflicts
init|=
literal|null
decl_stmt|;
specifier|private
name|Hint
name|iHint
init|=
literal|null
decl_stmt|;
specifier|private
name|Vector
name|iStudentConflictInfos
init|=
literal|null
decl_stmt|;
specifier|private
name|Vector
name|iGroupConstraintInfos
init|=
literal|null
decl_stmt|;
specifier|private
name|Vector
name|iBtbInstructorInfos
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iCanAssign
init|=
literal|true
decl_stmt|;
specifier|public
name|Suggestion
parameter_list|(
name|Solver
name|solver
parameter_list|)
block|{
name|this
argument_list|(
name|solver
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Suggestion
parameter_list|()
block|{
block|}
specifier|public
name|Suggestion
parameter_list|(
name|Solver
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|solver
parameter_list|,
name|Hashtable
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|initialAssignments
parameter_list|,
name|Vector
name|order
parameter_list|,
name|Collection
name|unresolvedConflicts
parameter_list|)
block|{
name|Assignment
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|assignment
init|=
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|unresolvedConflicts
operator|!=
literal|null
condition|)
block|{
name|iUnresolvedConflicts
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|unresolvedConflicts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|iUnresolvedConflicts
operator|.
name|add
argument_list|(
operator|new
name|Hint
argument_list|(
name|solver
argument_list|,
operator|(
name|Placement
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|initialAssignments
operator|!=
literal|null
condition|)
block|{
name|iDifferentAssignments
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
name|iBtbInstructorInfos
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
name|HashSet
name|jenrls
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|HashSet
name|gcs
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|HashSet
name|fcs
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|Hashtable
name|committed
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
name|assignment
operator|.
name|assignedVariables
argument_list|()
control|)
block|{
name|Placement
name|p
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|lecture
argument_list|)
decl_stmt|;
name|Placement
name|ini
init|=
operator|(
name|Placement
operator|)
name|initialAssignments
operator|.
name|get
argument_list|(
name|p
operator|.
name|variable
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ini
operator|==
literal|null
operator|||
operator|!
name|ini
operator|.
name|equals
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|iDifferentAssignments
operator|.
name|add
argument_list|(
operator|new
name|Hint
argument_list|(
name|solver
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|jenrls
operator|.
name|addAll
argument_list|(
name|lecture
operator|.
name|activeJenrls
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|getCommitedConflicts
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Hashtable
name|x
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|lecture
operator|.
name|students
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Student
name|s
init|=
operator|(
name|Student
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Set
name|confs
init|=
name|s
operator|.
name|conflictPlacements
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|confs
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|Iterator
name|j
init|=
name|confs
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Placement
name|commitedPlacement
init|=
operator|(
name|Placement
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|Integer
name|current
init|=
operator|(
name|Integer
operator|)
name|x
operator|.
name|get
argument_list|(
name|commitedPlacement
argument_list|)
decl_stmt|;
name|x
operator|.
name|put
argument_list|(
name|commitedPlacement
argument_list|,
operator|new
name|Integer
argument_list|(
literal|1
operator|+
operator|(
name|current
operator|==
literal|null
condition|?
literal|0
else|:
name|current
operator|.
name|intValue
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|committed
operator|.
name|put
argument_list|(
name|p
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
name|gcs
operator|.
name|addAll
argument_list|(
name|lecture
operator|.
name|groupConstraints
argument_list|()
argument_list|)
expr_stmt|;
name|fcs
operator|.
name|addAll
argument_list|(
name|lecture
operator|.
name|getFlexibleGroupConstraints
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|InstructorConstraint
name|ic
range|:
name|lecture
operator|.
name|getInstructorConstraints
argument_list|()
control|)
block|{
for|for
control|(
name|Lecture
name|other
range|:
name|ic
operator|.
name|variables
argument_list|()
control|)
block|{
name|Placement
name|otherPlacement
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|other
argument_list|)
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|equals
argument_list|(
name|lecture
argument_list|)
operator|||
name|otherPlacement
operator|==
literal|null
condition|)
continue|continue;
name|int
name|pref
init|=
name|ic
operator|.
name|getDistancePreference
argument_list|(
name|p
argument_list|,
operator|(
name|Placement
operator|)
name|otherPlacement
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|==
name|PreferenceLevel
operator|.
name|sIntLevelNeutral
condition|)
continue|continue;
name|Hint
name|h1
init|=
operator|new
name|Hint
argument_list|(
name|solver
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|Hint
name|h2
init|=
operator|new
name|Hint
argument_list|(
name|solver
argument_list|,
operator|(
name|Placement
operator|)
name|otherPlacement
argument_list|)
decl_stmt|;
name|iBtbInstructorInfos
operator|.
name|add
argument_list|(
operator|new
name|BtbInstructorInfo
argument_list|(
name|h1
argument_list|,
name|h2
argument_list|,
name|lecture
operator|.
name|getInstructorName
argument_list|()
argument_list|,
name|pref
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|order
operator|!=
literal|null
condition|)
name|Collections
operator|.
name|sort
argument_list|(
name|iDifferentAssignments
argument_list|,
operator|new
name|HintComparator
argument_list|(
name|order
argument_list|)
argument_list|)
expr_stmt|;
name|iStudentConflictInfos
operator|=
operator|new
name|Vector
argument_list|(
name|jenrls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|jenrls
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JenrlConstraint
name|jenrl
init|=
operator|(
name|JenrlConstraint
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|jenrl
operator|.
name|jenrl
argument_list|()
operator|<=
literal|0.0
condition|)
continue|continue;
name|Hint
name|h1
init|=
operator|new
name|Hint
argument_list|(
name|solver
argument_list|,
name|assignment
operator|.
name|getValue
argument_list|(
name|jenrl
operator|.
name|first
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Hint
name|h2
init|=
operator|new
name|Hint
argument_list|(
name|solver
argument_list|,
name|assignment
operator|.
name|getValue
argument_list|(
name|jenrl
operator|.
name|second
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|i1
init|=
name|iDifferentAssignments
operator|.
name|indexOf
argument_list|(
name|h1
argument_list|)
decl_stmt|;
name|int
name|i2
init|=
name|iDifferentAssignments
operator|.
name|indexOf
argument_list|(
name|h2
argument_list|)
decl_stmt|;
if|if
condition|(
name|i2
operator|<
literal|0
operator|||
operator|(
name|i1
operator|>=
literal|0
operator|&&
name|i1
operator|<
name|i2
operator|)
condition|)
name|iStudentConflictInfos
operator|.
name|add
argument_list|(
operator|new
name|StudentConflictInfo
argument_list|(
name|h1
argument_list|,
name|h2
argument_list|,
operator|new
name|JenrlInfo
argument_list|(
name|solver
argument_list|,
name|jenrl
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|iStudentConflictInfos
operator|.
name|add
argument_list|(
operator|new
name|StudentConflictInfo
argument_list|(
name|h2
argument_list|,
name|h1
argument_list|,
operator|new
name|JenrlInfo
argument_list|(
name|solver
argument_list|,
name|jenrl
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|committed
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|x
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Placement
name|p1
init|=
operator|(
name|Placement
operator|)
name|x
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Lecture
name|l1
init|=
operator|(
name|Lecture
operator|)
name|p1
operator|.
name|variable
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
operator|(
operator|(
name|Hashtable
operator|)
name|x
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|y
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|Placement
name|p2
init|=
operator|(
name|Placement
operator|)
name|y
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Integer
name|cnt
init|=
operator|(
name|Integer
operator|)
name|y
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Hint
name|h1
init|=
operator|new
name|Hint
argument_list|(
name|solver
argument_list|,
name|p1
argument_list|)
decl_stmt|;
name|Hint
name|h2
init|=
operator|new
name|Hint
argument_list|(
name|solver
argument_list|,
name|p2
argument_list|)
decl_stmt|;
name|JenrlInfo
name|jenrl
init|=
operator|new
name|JenrlInfo
argument_list|()
decl_stmt|;
name|jenrl
operator|.
name|setIsCommited
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|jenrl
operator|.
name|setJenrl
argument_list|(
name|cnt
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|jenrl
operator|.
name|setIsFixed
argument_list|(
name|l1
operator|.
name|nrTimeLocations
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|jenrl
operator|.
name|setIsHard
argument_list|(
name|l1
operator|.
name|isSingleSection
argument_list|()
argument_list|)
expr_stmt|;
name|jenrl
operator|.
name|setIsDistance
argument_list|(
operator|!
name|p1
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|hasIntersection
argument_list|(
name|p2
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iStudentConflictInfos
operator|.
name|add
argument_list|(
operator|new
name|StudentConflictInfo
argument_list|(
name|h1
argument_list|,
name|h2
argument_list|,
name|jenrl
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|iGroupConstraintInfos
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|gcs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|GroupConstraint
name|gc
init|=
operator|(
name|GroupConstraint
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|gc
operator|.
name|isSatisfied
argument_list|(
name|assignment
argument_list|)
condition|)
continue|continue;
name|DistributionInfo
name|dist
init|=
operator|new
name|DistributionInfo
argument_list|(
operator|new
name|GroupConstraintInfo
argument_list|(
name|assignment
argument_list|,
name|gc
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Lecture
name|another
range|:
name|gc
operator|.
name|variables
argument_list|()
control|)
block|{
name|Placement
name|anotherPlacement
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|another
argument_list|)
decl_stmt|;
if|if
condition|(
name|anotherPlacement
operator|!=
literal|null
condition|)
name|dist
operator|.
name|addHint
argument_list|(
operator|new
name|Hint
argument_list|(
name|solver
argument_list|,
name|anotherPlacement
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iGroupConstraintInfos
operator|.
name|addElement
argument_list|(
name|dist
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|fcs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|FlexibleConstraint
name|fc
init|=
operator|(
name|FlexibleConstraint
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|fc
operator|.
name|isHard
argument_list|()
operator|||
name|fc
operator|.
name|getNrViolations
argument_list|(
name|assignment
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Placement
argument_list|>
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
argument_list|()
argument_list|)
operator|==
literal|0.0
condition|)
continue|continue;
name|DistributionInfo
name|dist
init|=
operator|new
name|DistributionInfo
argument_list|(
operator|new
name|GroupConstraintInfo
argument_list|(
name|assignment
argument_list|,
name|fc
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Lecture
name|another
range|:
name|fc
operator|.
name|variables
argument_list|()
control|)
block|{
name|Placement
name|anotherPlacement
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|another
argument_list|)
decl_stmt|;
if|if
condition|(
name|anotherPlacement
operator|!=
literal|null
condition|)
name|dist
operator|.
name|addHint
argument_list|(
operator|new
name|Hint
argument_list|(
name|solver
argument_list|,
name|anotherPlacement
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iGroupConstraintInfos
operator|.
name|addElement
argument_list|(
name|dist
argument_list|)
expr_stmt|;
block|}
block|}
name|iValue
operator|=
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|getTotalValue
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
name|TimetableModel
name|m
init|=
operator|(
name|TimetableModel
operator|)
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|iTooBigRooms
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|m
operator|.
name|getCriterion
argument_list|(
name|TooBigRooms
operator|.
name|class
argument_list|)
operator|.
name|getValue
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
name|iUselessSlots
operator|=
name|Math
operator|.
name|round
argument_list|(
name|m
operator|.
name|getCriterion
argument_list|(
name|UselessHalfHours
operator|.
name|class
argument_list|)
operator|.
name|getValue
argument_list|(
name|assignment
argument_list|)
operator|+
name|m
operator|.
name|getCriterion
argument_list|(
name|BrokenTimePatterns
operator|.
name|class
argument_list|)
operator|.
name|getValue
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
name|iGlobalTimePreference
operator|=
name|m
operator|.
name|getCriterion
argument_list|(
name|TimePreferences
operator|.
name|class
argument_list|)
operator|.
name|getValue
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
name|iGlobalRoomPreference
operator|=
name|Math
operator|.
name|round
argument_list|(
name|m
operator|.
name|getCriterion
argument_list|(
name|RoomPreferences
operator|.
name|class
argument_list|)
operator|.
name|getValue
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
name|iGlobalGroupConstraintPreference
operator|=
name|Math
operator|.
name|round
argument_list|(
name|m
operator|.
name|getCriterion
argument_list|(
name|DistributionPreferences
operator|.
name|class
argument_list|)
operator|.
name|getValue
argument_list|(
name|assignment
argument_list|)
argument_list|)
operator|+
name|Math
operator|.
name|round
argument_list|(
name|m
operator|.
name|getCriterion
argument_list|(
name|FlexibleConstraintCriterion
operator|.
name|class
argument_list|)
operator|.
name|getValue
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
name|iViolatedStudentConflicts
operator|=
name|Math
operator|.
name|round
argument_list|(
name|m
operator|.
name|getCriterion
argument_list|(
name|StudentConflict
operator|.
name|class
argument_list|)
operator|.
name|getValue
argument_list|(
name|assignment
argument_list|)
operator|+
name|m
operator|.
name|getCriterion
argument_list|(
name|StudentCommittedConflict
operator|.
name|class
argument_list|)
operator|.
name|getValue
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
name|iHardStudentConflicts
operator|=
name|Math
operator|.
name|round
argument_list|(
name|m
operator|.
name|getCriterion
argument_list|(
name|StudentHardConflict
operator|.
name|class
argument_list|)
operator|.
name|getValue
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
name|iDistanceStudentConflicts
operator|=
name|Math
operator|.
name|round
argument_list|(
name|m
operator|.
name|getCriterion
argument_list|(
name|StudentDistanceConflict
operator|.
name|class
argument_list|)
operator|.
name|getValue
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
name|iCommitedStudentConflicts
operator|=
name|Math
operator|.
name|round
argument_list|(
name|m
operator|.
name|getCriterion
argument_list|(
name|StudentCommittedConflict
operator|.
name|class
argument_list|)
operator|.
name|getValue
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
name|iInstructorDistancePreference
operator|=
name|Math
operator|.
name|round
argument_list|(
name|m
operator|.
name|getCriterion
argument_list|(
name|BackToBackInstructorPreferences
operator|.
name|class
argument_list|)
operator|.
name|getValue
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
name|iDepartmentSpreadPenalty
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|m
operator|.
name|getCriterion
argument_list|(
name|DepartmentBalancingPenalty
operator|.
name|class
argument_list|)
operator|.
name|getValue
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
name|iSpreadPenalty
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|m
operator|.
name|getCriterion
argument_list|(
name|SameSubpartBalancingPenalty
operator|.
name|class
argument_list|)
operator|.
name|getValue
argument_list|(
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
name|iUnassignedVariables
operator|=
name|m
operator|.
name|nrUnassignedVariables
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
name|iPerturbationPenalty
operator|=
name|m
operator|.
name|getCriterion
argument_list|(
name|Perturbations
operator|.
name|class
argument_list|)
operator|.
name|getValue
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Suggestion
parameter_list|(
name|Solver
name|solver
parameter_list|,
name|Lecture
name|lecture
parameter_list|,
name|TimeLocation
name|time
parameter_list|)
block|{
name|Assignment
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|assignment
init|=
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
name|iStudentConflictInfos
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
name|Placement
name|currentPlacement
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|lecture
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentPlacement
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|Placement
argument_list|>
name|values
init|=
name|lecture
operator|.
name|values
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
name|currentPlacement
operator|=
operator|(
name|values
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
expr_stmt|;
block|}
name|Hashtable
name|committed
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentPlacement
operator|!=
literal|null
condition|)
block|{
name|Placement
name|dummyPlacement
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|currentPlacement
operator|.
name|isMultiRoom
argument_list|()
condition|)
name|dummyPlacement
operator|=
operator|new
name|Placement
argument_list|(
name|lecture
argument_list|,
name|time
argument_list|,
name|currentPlacement
operator|.
name|getRoomLocations
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|dummyPlacement
operator|=
operator|new
name|Placement
argument_list|(
name|lecture
argument_list|,
name|time
argument_list|,
name|currentPlacement
operator|.
name|getRoomLocation
argument_list|()
argument_list|)
expr_stmt|;
name|iDifferentAssignments
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
name|iDifferentAssignments
operator|.
name|addElement
argument_list|(
operator|new
name|Hint
argument_list|(
name|solver
argument_list|,
name|dummyPlacement
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dummyPlacement
operator|.
name|getCommitedConflicts
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|lecture
operator|.
name|students
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Student
name|s
init|=
operator|(
name|Student
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Set
name|confs
init|=
name|s
operator|.
name|conflictPlacements
argument_list|(
name|dummyPlacement
argument_list|)
decl_stmt|;
if|if
condition|(
name|confs
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|Iterator
name|j
init|=
name|confs
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Placement
name|commitedPlacement
init|=
operator|(
name|Placement
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|Integer
name|current
init|=
operator|(
name|Integer
operator|)
name|committed
operator|.
name|get
argument_list|(
name|commitedPlacement
argument_list|)
decl_stmt|;
name|committed
operator|.
name|put
argument_list|(
name|commitedPlacement
argument_list|,
operator|new
name|Integer
argument_list|(
literal|1
operator|+
operator|(
name|current
operator|==
literal|null
condition|?
literal|0
else|:
name|current
operator|.
name|intValue
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|JenrlConstraint
name|jenrl
range|:
name|lecture
operator|.
name|jenrlConstraints
argument_list|()
control|)
block|{
name|long
name|j
init|=
name|jenrl
operator|.
name|jenrl
argument_list|(
name|assignment
argument_list|,
name|lecture
argument_list|,
name|dummyPlacement
argument_list|)
decl_stmt|;
if|if
condition|(
name|j
operator|>
literal|0
operator|&&
operator|!
name|jenrl
operator|.
name|isToBeIgnored
argument_list|()
condition|)
block|{
comment|//if (lecture.getAssignment()==null&& jenrl.areStudentConflictsDistance(dummyPlacement)) continue;
if|if
condition|(
name|jenrl
operator|.
name|areStudentConflictsDistance
argument_list|(
name|assignment
argument_list|,
name|dummyPlacement
argument_list|)
condition|)
continue|continue;
name|JenrlInfo
name|jInfo
init|=
operator|new
name|JenrlInfo
argument_list|()
decl_stmt|;
name|jInfo
operator|.
name|setJenrl
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|iViolatedStudentConflicts
operator|+=
name|j
expr_stmt|;
if|if
condition|(
name|jenrl
operator|.
name|areStudentConflictsHard
argument_list|()
condition|)
block|{
name|iHardStudentConflicts
operator|+=
name|j
expr_stmt|;
name|jInfo
operator|.
name|setIsHard
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jenrl
operator|.
name|areStudentConflictsDistance
argument_list|(
name|assignment
argument_list|,
name|dummyPlacement
argument_list|)
condition|)
block|{
name|iDistanceStudentConflicts
operator|+=
name|j
expr_stmt|;
name|jInfo
operator|.
name|setIsDistance
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jenrl
operator|.
name|first
argument_list|()
operator|.
name|equals
argument_list|(
name|lecture
argument_list|)
condition|)
block|{
name|Hint
name|h
init|=
operator|new
name|Hint
argument_list|(
name|solver
argument_list|,
name|assignment
operator|.
name|getValue
argument_list|(
name|jenrl
operator|.
name|second
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iStudentConflictInfos
operator|.
name|add
argument_list|(
operator|new
name|StudentConflictInfo
argument_list|(
name|h
argument_list|,
literal|null
argument_list|,
name|jInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Hint
name|h
init|=
operator|new
name|Hint
argument_list|(
name|solver
argument_list|,
name|assignment
operator|.
name|getValue
argument_list|(
name|jenrl
operator|.
name|first
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iStudentConflictInfos
operator|.
name|add
argument_list|(
operator|new
name|StudentConflictInfo
argument_list|(
name|h
argument_list|,
literal|null
argument_list|,
name|jInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|committed
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|x
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Placement
name|p
init|=
operator|(
name|Placement
operator|)
name|x
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Integer
name|cnt
init|=
operator|(
name|Integer
operator|)
name|x
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Hint
name|h
init|=
operator|new
name|Hint
argument_list|(
name|solver
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|JenrlInfo
name|jenrl
init|=
operator|new
name|JenrlInfo
argument_list|()
decl_stmt|;
name|jenrl
operator|.
name|setIsCommited
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|jenrl
operator|.
name|setJenrl
argument_list|(
name|cnt
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|iViolatedStudentConflicts
operator|+=
name|cnt
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|jenrl
operator|.
name|setIsFixed
argument_list|(
name|lecture
operator|.
name|nrTimeLocations
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|jenrl
operator|.
name|setIsHard
argument_list|(
name|lecture
operator|.
name|isSingleSection
argument_list|()
argument_list|)
expr_stmt|;
name|jenrl
operator|.
name|setIsDistance
argument_list|(
operator|!
name|dummyPlacement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|hasIntersection
argument_list|(
name|p
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iStudentConflictInfos
operator|.
name|add
argument_list|(
operator|new
name|StudentConflictInfo
argument_list|(
name|h
argument_list|,
literal|null
argument_list|,
name|jenrl
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iGroupConstraintInfos
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|lecture
operator|.
name|groupConstraints
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|GroupConstraint
name|gc
init|=
operator|(
name|GroupConstraint
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|gc
operator|.
name|getType
argument_list|()
operator|==
name|GroupConstraint
operator|.
name|ConstraintType
operator|.
name|SAME_ROOM
condition|)
continue|continue;
name|int
name|curPref
init|=
name|gc
operator|.
name|getCurrentPreference
argument_list|(
name|assignment
argument_list|,
name|dummyPlacement
argument_list|)
decl_stmt|;
if|if
condition|(
name|gc
operator|.
name|getType
argument_list|()
operator|==
name|GroupConstraint
operator|.
name|ConstraintType
operator|.
name|BTB
condition|)
block|{
name|gc
operator|.
name|setType
argument_list|(
name|GroupConstraint
operator|.
name|ConstraintType
operator|.
name|BTB_TIME
argument_list|)
expr_stmt|;
name|curPref
operator|=
name|gc
operator|.
name|getCurrentPreference
argument_list|(
name|assignment
argument_list|,
name|dummyPlacement
argument_list|)
expr_stmt|;
name|gc
operator|.
name|setType
argument_list|(
name|GroupConstraint
operator|.
name|ConstraintType
operator|.
name|BTB
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|gc
operator|.
name|getType
argument_list|()
operator|==
name|GroupConstraint
operator|.
name|ConstraintType
operator|.
name|SAME_STUDENTS
condition|)
block|{
name|gc
operator|.
name|setType
argument_list|(
name|GroupConstraint
operator|.
name|ConstraintType
operator|.
name|DIFF_TIME
argument_list|)
expr_stmt|;
name|curPref
operator|=
name|gc
operator|.
name|getCurrentPreference
argument_list|(
name|assignment
argument_list|,
name|dummyPlacement
argument_list|)
expr_stmt|;
name|gc
operator|.
name|setType
argument_list|(
name|GroupConstraint
operator|.
name|ConstraintType
operator|.
name|SAME_STUDENTS
argument_list|)
expr_stmt|;
block|}
name|boolean
name|sat
init|=
operator|(
name|curPref
operator|<=
literal|0
operator|)
decl_stmt|;
if|if
condition|(
name|sat
condition|)
continue|continue;
name|iGlobalGroupConstraintPreference
operator|+=
name|curPref
expr_stmt|;
name|DistributionInfo
name|dist
init|=
operator|new
name|DistributionInfo
argument_list|(
operator|new
name|GroupConstraintInfo
argument_list|(
name|assignment
argument_list|,
name|gc
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Lecture
name|another
range|:
name|gc
operator|.
name|variables
argument_list|()
control|)
block|{
if|if
condition|(
name|another
operator|.
name|equals
argument_list|(
name|lecture
argument_list|)
condition|)
block|{
comment|//dist.addHint(new Hint(solver, dummyPlacement));
block|}
if|else if
condition|(
name|assignment
operator|.
name|getValue
argument_list|(
name|another
argument_list|)
operator|!=
literal|null
condition|)
name|dist
operator|.
name|addHint
argument_list|(
operator|new
name|Hint
argument_list|(
name|solver
argument_list|,
name|assignment
operator|.
name|getValue
argument_list|(
name|another
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iGroupConstraintInfos
operator|.
name|addElement
argument_list|(
name|dist
argument_list|)
expr_stmt|;
block|}
name|HashMap
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|dummies
init|=
operator|new
name|HashMap
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|dummyPlacement
operator|!=
literal|null
condition|)
name|dummies
operator|.
name|put
argument_list|(
name|lecture
argument_list|,
name|dummyPlacement
argument_list|)
expr_stmt|;
for|for
control|(
name|FlexibleConstraint
name|fc
range|:
name|lecture
operator|.
name|getFlexibleGroupConstraints
argument_list|()
control|)
block|{
if|if
condition|(
name|fc
operator|.
name|isHard
argument_list|()
operator|||
name|fc
operator|.
name|getNrViolations
argument_list|(
name|assignment
argument_list|,
literal|null
argument_list|,
name|dummies
argument_list|)
operator|==
literal|0.0
condition|)
continue|continue;
name|iGlobalGroupConstraintPreference
operator|+=
name|Math
operator|.
name|abs
argument_list|(
name|fc
operator|.
name|getCurrentPreference
argument_list|(
name|assignment
argument_list|,
literal|null
argument_list|,
name|dummies
argument_list|)
argument_list|)
expr_stmt|;
name|DistributionInfo
name|dist
init|=
operator|new
name|DistributionInfo
argument_list|(
operator|new
name|GroupConstraintInfo
argument_list|(
name|assignment
argument_list|,
name|fc
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Lecture
name|another
range|:
name|fc
operator|.
name|variables
argument_list|()
control|)
block|{
if|if
condition|(
name|another
operator|.
name|equals
argument_list|(
name|lecture
argument_list|)
condition|)
block|{
comment|//dist.addHint(new Hint(solver, dummyPlacement));
block|}
if|else if
condition|(
name|assignment
operator|.
name|getValue
argument_list|(
name|another
argument_list|)
operator|!=
literal|null
condition|)
name|dist
operator|.
name|addHint
argument_list|(
operator|new
name|Hint
argument_list|(
name|solver
argument_list|,
name|assignment
operator|.
name|getValue
argument_list|(
name|another
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iGroupConstraintInfos
operator|.
name|addElement
argument_list|(
name|dist
argument_list|)
expr_stmt|;
block|}
name|iCommitedStudentConflicts
operator|=
name|dummyPlacement
operator|.
name|getCommitedConflicts
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setHint
parameter_list|(
name|Hint
name|hint
parameter_list|)
block|{
name|iHint
operator|=
name|hint
expr_stmt|;
block|}
specifier|public
name|Hint
name|getHint
parameter_list|()
block|{
return|return
name|iHint
return|;
block|}
specifier|public
name|Vector
name|getDifferentAssignments
parameter_list|()
block|{
return|return
name|iDifferentAssignments
return|;
block|}
specifier|public
name|void
name|assign
parameter_list|(
name|SolverProxy
name|solver
parameter_list|)
block|{
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
name|solver
operator|.
name|assign
argument_list|(
name|iDifferentAssignments
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|conflictInfo
parameter_list|(
name|SolverProxy
name|solver
parameter_list|)
block|{
return|return
name|solver
operator|.
name|conflictInfo
argument_list|(
name|iDifferentAssignments
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|Suggestion
operator|)
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|cmp
init|=
name|Double
operator|.
name|compare
argument_list|(
name|iValue
argument_list|,
operator|(
operator|(
name|Suggestion
operator|)
name|o
operator|)
operator|.
name|iValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|iDifferentAssignments
operator|.
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
operator|(
operator|(
name|Suggestion
operator|)
name|o
operator|)
operator|.
name|iDifferentAssignments
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isBetter
parameter_list|(
name|Solver
name|solver
parameter_list|)
block|{
return|return
operator|(
name|iValue
operator|<
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|getTotalValue
argument_list|(
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|public
name|double
name|getValue
parameter_list|()
block|{
return|return
name|iValue
return|;
block|}
specifier|public
name|int
name|getTooBigRooms
parameter_list|()
block|{
return|return
name|iTooBigRooms
return|;
block|}
specifier|public
name|long
name|getUselessSlots
parameter_list|()
block|{
return|return
name|iUselessSlots
return|;
block|}
specifier|public
name|double
name|getGlobalTimePreference
parameter_list|()
block|{
return|return
name|iGlobalTimePreference
return|;
block|}
specifier|public
name|long
name|getGlobalRoomPreference
parameter_list|()
block|{
return|return
name|iGlobalRoomPreference
return|;
block|}
specifier|public
name|long
name|getGlobalGroupConstraintPreference
parameter_list|()
block|{
return|return
name|iGlobalGroupConstraintPreference
return|;
block|}
specifier|public
name|long
name|getViolatedStudentConflicts
parameter_list|()
block|{
return|return
name|iViolatedStudentConflicts
return|;
block|}
specifier|public
name|long
name|getHardStudentConflicts
parameter_list|()
block|{
return|return
name|iHardStudentConflicts
return|;
block|}
specifier|public
name|long
name|getCommitedStudentConflicts
parameter_list|()
block|{
return|return
name|iCommitedStudentConflicts
return|;
block|}
specifier|public
name|long
name|getDistanceStudentConflicts
parameter_list|()
block|{
return|return
name|iDistanceStudentConflicts
return|;
block|}
specifier|public
name|long
name|getInstructorDistancePreference
parameter_list|()
block|{
return|return
name|iInstructorDistancePreference
return|;
block|}
specifier|public
name|double
name|getDepartmentSpreadPenalty
parameter_list|()
block|{
return|return
operator|(
operator|(
name|double
operator|)
name|iDepartmentSpreadPenalty
operator|)
operator|/
literal|12.0
return|;
block|}
specifier|public
name|double
name|getSpreadPenalty
parameter_list|()
block|{
return|return
operator|(
operator|(
name|double
operator|)
name|iSpreadPenalty
operator|)
operator|/
literal|12.0
return|;
block|}
specifier|public
name|int
name|getUnassignedVariables
parameter_list|()
block|{
return|return
name|iUnassignedVariables
return|;
block|}
specifier|public
name|double
name|getPerturbationPenalty
parameter_list|()
block|{
return|return
name|iPerturbationPenalty
return|;
block|}
specifier|public
name|Set
name|getUnresolvedConflicts
parameter_list|()
block|{
return|return
name|iUnresolvedConflicts
return|;
block|}
specifier|public
name|boolean
name|hasStudentConflictInfo
parameter_list|()
block|{
return|return
operator|(
name|iStudentConflictInfos
operator|!=
literal|null
operator|&&
operator|!
name|iStudentConflictInfos
operator|.
name|isEmpty
argument_list|()
operator|)
return|;
block|}
specifier|public
name|String
name|getStudentConflictInfosAsHtml
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|SolverProxy
name|solver
parameter_list|,
name|boolean
name|link
parameter_list|,
name|int
name|id
parameter_list|,
name|int
name|spanLimit
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|iStudentConflictInfos
argument_list|,
operator|new
name|StudentConflictInfoComparator
argument_list|(
name|context
argument_list|,
name|solver
argument_list|)
argument_list|)
expr_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|boolean
name|span
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|iStudentConflictInfos
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|StudentConflictInfo
name|info
init|=
operator|(
name|StudentConflictInfo
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|idx
operator|==
name|spanLimit
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<span id='hint_conf_dots"
operator|+
name|id
operator|+
literal|"' onMouseOver=\"this.style.cursor='hand';this.style.cursor='pointer';\" style='display:inline'><a onClick=\"document.getElementById('hint_conf_dots"
operator|+
name|id
operator|+
literal|"').style.display='none';document.getElementById('hint_conf_rest"
operator|+
name|id
operator|+
literal|"').style.display='inline';\">...</a></span><span id='hint_conf_rest"
operator|+
name|id
operator|+
literal|"' style='display:none'>"
argument_list|)
expr_stmt|;
name|span
operator|=
literal|true
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|info
operator|.
name|toHtml
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|link
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|span
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"</span>"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|hasBtbInstructorInfo
parameter_list|()
block|{
return|return
operator|(
name|iBtbInstructorInfos
operator|!=
literal|null
operator|&&
operator|!
name|iBtbInstructorInfos
operator|.
name|isEmpty
argument_list|()
operator|)
return|;
block|}
specifier|public
name|String
name|getBtbInstructorInfosAsHtml
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|SolverProxy
name|solver
parameter_list|,
name|boolean
name|link
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|iBtbInstructorInfos
argument_list|,
operator|new
name|BtbInstructorInfoComparator
argument_list|(
name|context
argument_list|,
name|solver
argument_list|)
argument_list|)
expr_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|iBtbInstructorInfos
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|BtbInstructorInfo
name|info
init|=
operator|(
name|BtbInstructorInfo
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"<br>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|info
operator|.
name|toHtml
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|link
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|hasDistributionConstraintInfo
parameter_list|()
block|{
return|return
operator|(
name|iGroupConstraintInfos
operator|!=
literal|null
operator|&&
operator|!
name|iGroupConstraintInfos
operator|.
name|isEmpty
argument_list|()
operator|)
return|;
block|}
specifier|public
name|String
name|getDistributionConstraintInfoAsHtml
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|SolverProxy
name|solver
parameter_list|,
name|boolean
name|link
parameter_list|,
name|int
name|id
parameter_list|,
name|int
name|spanLimit
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|boolean
name|span
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|iGroupConstraintInfos
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|DistributionInfo
name|info
init|=
operator|(
name|DistributionInfo
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|idx
operator|==
name|spanLimit
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<span id='hint_dist_dots"
operator|+
name|id
operator|+
literal|"' onMouseOver=\"this.style.cursor='hand';this.style.cursor='pointer';\" style='display:inline'><a onClick=\"document.getElementById('hint_dist_dots"
operator|+
name|id
operator|+
literal|"').style.display='none';document.getElementById('hint_dist_rest"
operator|+
name|id
operator|+
literal|"').style.display='inline';\">...</a></span><span id='hint_dist_rest"
operator|+
name|id
operator|+
literal|"' style='display:none'>"
argument_list|)
expr_stmt|;
name|span
operator|=
literal|true
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|info
operator|.
name|toHtml
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|link
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|span
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"</span>"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
class|class
name|BtbInstructorInfo
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Hint
name|iFirst
decl_stmt|,
name|iSecond
decl_stmt|;
specifier|private
specifier|transient
name|ClassAssignmentDetails
name|iFirstInfo
init|=
literal|null
decl_stmt|,
name|iSecondInfo
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iPref
decl_stmt|;
specifier|private
name|String
name|iInsturctor
decl_stmt|;
specifier|public
name|BtbInstructorInfo
parameter_list|()
block|{
block|}
specifier|public
name|BtbInstructorInfo
parameter_list|(
name|Hint
name|first
parameter_list|,
name|Hint
name|second
parameter_list|,
name|String
name|instructor
parameter_list|,
name|int
name|pref
parameter_list|)
block|{
name|iFirst
operator|=
name|first
expr_stmt|;
name|iSecond
operator|=
name|second
expr_stmt|;
name|iPref
operator|=
name|pref
expr_stmt|;
name|iInsturctor
operator|=
name|instructor
expr_stmt|;
block|}
specifier|public
name|void
name|createInfo
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|SolverProxy
name|solver
parameter_list|)
block|{
if|if
condition|(
name|iFirstInfo
operator|==
literal|null
condition|)
name|iFirstInfo
operator|=
name|iFirst
operator|.
name|getDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSecondInfo
operator|==
literal|null
condition|)
name|iSecondInfo
operator|=
name|iSecond
operator|.
name|getDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasInfo
parameter_list|()
block|{
return|return
operator|(
name|iFirstInfo
operator|!=
literal|null
operator|&&
name|iSecondInfo
operator|!=
literal|null
operator|)
return|;
block|}
specifier|public
name|int
name|getPreference
parameter_list|()
block|{
return|return
name|iPref
return|;
block|}
specifier|public
name|String
name|getInstructor
parameter_list|()
block|{
return|return
name|iInsturctor
return|;
block|}
specifier|public
name|String
name|toHtml
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|SolverProxy
name|solver
parameter_list|,
name|boolean
name|link
parameter_list|)
block|{
try|try
block|{
name|createInfo
argument_list|(
name|context
argument_list|,
name|solver
argument_list|)
expr_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"<table border='0'>"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<tr><td nowrap align='center'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|getPreference
argument_list|()
argument_list|)
operator|+
literal|"'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|int2prolog
argument_list|(
name|getPreference
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getPrefName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</font><br>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|iInsturctor
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</font>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</td><td nowrap>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|iFirstInfo
operator|.
name|getClazz
argument_list|()
operator|.
name|toHtml
argument_list|(
name|link
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|iFirstInfo
operator|.
name|getAssignedTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|iFirstInfo
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|iFirstInfo
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|toDatesHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iFirstInfo
operator|.
name|getAssignedRoom
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|iFirstInfo
operator|.
name|getAssignedRoom
argument_list|()
index|[
name|i
index|]
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|iFirstInfo
operator|.
name|getTime
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|iFirstInfo
operator|.
name|getTime
argument_list|()
operator|.
name|toDatesHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iFirstInfo
operator|.
name|getRoom
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|iFirstInfo
operator|.
name|getRoom
argument_list|()
index|[
name|i
index|]
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"<br>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|iSecondInfo
operator|.
name|getClazz
argument_list|()
operator|.
name|toHtml
argument_list|(
name|link
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSecondInfo
operator|.
name|getAssignedTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|iSecondInfo
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|iSecondInfo
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|toDatesHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSecondInfo
operator|.
name|getAssignedRoom
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|iSecondInfo
operator|.
name|getAssignedRoom
argument_list|()
index|[
name|i
index|]
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|iSecondInfo
operator|.
name|getTime
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|iSecondInfo
operator|.
name|getTime
argument_list|()
operator|.
name|toDatesHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSecondInfo
operator|.
name|getRoom
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|iSecondInfo
operator|.
name|getRoom
argument_list|()
index|[
name|i
index|]
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</td></tr></table>"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|"<font color='red'>ERROR:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</font>"
return|;
block|}
block|}
specifier|public
name|void
name|toXml
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
if|if
condition|(
name|iFirst
operator|!=
literal|null
condition|)
name|iFirst
operator|.
name|toXml
argument_list|(
name|element
operator|.
name|addElement
argument_list|(
literal|"first"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSecond
operator|!=
literal|null
condition|)
name|iSecond
operator|.
name|toXml
argument_list|(
name|element
operator|.
name|addElement
argument_list|(
literal|"second"
argument_list|)
argument_list|)
expr_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"pref"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iPref
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iInsturctor
operator|!=
literal|null
condition|)
name|element
operator|.
name|addAttribute
argument_list|(
literal|"instructor"
argument_list|,
name|iInsturctor
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|BtbInstructorInfo
name|fromXml
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|BtbInstructorInfo
name|s
init|=
operator|new
name|BtbInstructorInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|element
argument_list|(
literal|"first"
argument_list|)
operator|!=
literal|null
condition|)
name|s
operator|.
name|iFirst
operator|=
name|Hint
operator|.
name|fromXml
argument_list|(
name|element
operator|.
name|element
argument_list|(
literal|"first"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|.
name|element
argument_list|(
literal|"second"
argument_list|)
operator|!=
literal|null
condition|)
name|s
operator|.
name|iSecond
operator|=
name|Hint
operator|.
name|fromXml
argument_list|(
name|element
operator|.
name|element
argument_list|(
literal|"second"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|iPref
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"pref"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|iInsturctor
operator|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"instructor"
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
block|}
specifier|public
class|class
name|BtbInstructorInfoComparator
implements|implements
name|Comparator
block|{
name|SessionContext
name|iContext
decl_stmt|;
name|SolverProxy
name|iSolver
decl_stmt|;
specifier|public
name|BtbInstructorInfoComparator
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|SolverProxy
name|solver
parameter_list|)
block|{
name|iContext
operator|=
name|context
expr_stmt|;
name|iSolver
operator|=
name|solver
expr_stmt|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
try|try
block|{
name|BtbInstructorInfo
name|i1
init|=
operator|(
name|BtbInstructorInfo
operator|)
name|o1
decl_stmt|;
name|BtbInstructorInfo
name|i2
init|=
operator|(
name|BtbInstructorInfo
operator|)
name|o2
decl_stmt|;
name|int
name|cmp
init|=
name|i1
operator|.
name|getInstructor
argument_list|()
operator|.
name|compareTo
argument_list|(
name|i2
operator|.
name|getInstructor
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
if|if
condition|(
operator|!
name|i1
operator|.
name|hasInfo
argument_list|()
condition|)
name|i1
operator|.
name|createInfo
argument_list|(
name|iContext
argument_list|,
name|iSolver
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|i2
operator|.
name|hasInfo
argument_list|()
condition|)
name|i2
operator|.
name|createInfo
argument_list|(
name|iContext
argument_list|,
name|iSolver
argument_list|)
expr_stmt|;
name|cmp
operator|=
name|i1
operator|.
name|iFirstInfo
operator|.
name|compareTo
argument_list|(
name|i2
operator|.
name|iFirstInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|i1
operator|.
name|iSecondInfo
operator|.
name|compareTo
argument_list|(
name|i2
operator|.
name|iSecondInfo
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|StudentConflictInfo
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|JenrlInfo
name|iInfo
decl_stmt|;
specifier|private
name|Hint
name|iFirst
decl_stmt|,
name|iSecond
decl_stmt|;
specifier|private
specifier|transient
name|ClassAssignmentDetails
name|iFirstInfo
init|=
literal|null
decl_stmt|,
name|iSecondInfo
init|=
literal|null
decl_stmt|;
specifier|public
name|StudentConflictInfo
parameter_list|()
block|{
block|}
specifier|public
name|StudentConflictInfo
parameter_list|(
name|Hint
name|first
parameter_list|,
name|Hint
name|second
parameter_list|,
name|JenrlInfo
name|info
parameter_list|)
block|{
name|iInfo
operator|=
name|info
expr_stmt|;
name|iFirst
operator|=
name|first
expr_stmt|;
name|iSecond
operator|=
name|second
expr_stmt|;
block|}
specifier|public
name|JenrlInfo
name|getInfo
parameter_list|()
block|{
return|return
name|iInfo
return|;
block|}
specifier|public
name|void
name|createInfo
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|SolverProxy
name|solver
parameter_list|)
block|{
if|if
condition|(
name|iFirstInfo
operator|==
literal|null
condition|)
name|iFirstInfo
operator|=
name|iFirst
operator|.
name|getDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSecondInfo
operator|==
literal|null
operator|&&
name|iSecond
operator|!=
literal|null
condition|)
name|iSecondInfo
operator|=
name|iSecond
operator|.
name|getDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasInfo
parameter_list|()
block|{
return|return
operator|(
name|iFirstInfo
operator|!=
literal|null
operator|)
return|;
block|}
specifier|public
name|String
name|toHtml
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|SolverProxy
name|solver
parameter_list|,
name|boolean
name|link
parameter_list|)
block|{
try|try
block|{
name|createInfo
argument_list|(
name|context
argument_list|,
name|solver
argument_list|)
expr_stmt|;
name|Vector
name|props
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
if|if
condition|(
name|iInfo
operator|.
name|isCommited
argument_list|()
condition|)
name|props
operator|.
name|add
argument_list|(
literal|"committed"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iInfo
operator|.
name|isFixed
argument_list|()
condition|)
name|props
operator|.
name|add
argument_list|(
literal|"fixed"
argument_list|)
expr_stmt|;
if|else if
condition|(
name|iInfo
operator|.
name|isHard
argument_list|()
condition|)
name|props
operator|.
name|add
argument_list|(
literal|"hard"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iInfo
operator|.
name|isDistance
argument_list|()
condition|)
name|props
operator|.
name|add
argument_list|(
literal|"distance"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iInfo
operator|.
name|isImportant
argument_list|()
condition|)
name|props
operator|.
name|add
argument_list|(
literal|"important"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iInfo
operator|.
name|isInstructor
argument_list|()
condition|)
name|props
operator|.
name|add
argument_list|(
literal|"instructor"
argument_list|)
expr_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"<table border='0'>"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<tr>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<td "
operator|+
operator|(
name|iSecondInfo
operator|==
literal|null
condition|?
literal|""
else|:
literal|"rowspan='2'"
operator|)
operator|+
literal|" nowrap>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ClassAssignmentDetails
operator|.
name|sJenrDF
operator|.
name|format
argument_list|(
name|iInfo
operator|.
name|getJenrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"&times; "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</td><td nowrap>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|iFirstInfo
operator|.
name|getClazz
argument_list|()
operator|.
name|toHtml
argument_list|(
name|link
operator|&&
operator|!
name|iInfo
operator|.
name|isCommited
argument_list|()
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|iFirstInfo
operator|.
name|getAssignedTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|iFirstInfo
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iFirstInfo
operator|.
name|getAssignedRoom
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|iFirstInfo
operator|.
name|getAssignedRoom
argument_list|()
index|[
name|i
index|]
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|iFirstInfo
operator|.
name|getTime
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iFirstInfo
operator|.
name|getRoom
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|iFirstInfo
operator|.
name|getRoom
argument_list|()
index|[
name|i
index|]
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</td><td "
operator|+
operator|(
name|iSecondInfo
operator|==
literal|null
condition|?
literal|""
else|:
literal|"rowspan='2'"
operator|)
operator|+
literal|" nowrap>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|props
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"<i>"
operator|+
name|props
operator|+
literal|"</i>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<i>"
operator|+
name|iInfo
operator|.
name|getCurriculumText
argument_list|()
operator|+
literal|"</i>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSecondInfo
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"</td></tr><tr><td nowrap>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|iSecondInfo
operator|.
name|getClazz
argument_list|()
operator|.
name|toHtml
argument_list|(
name|link
operator|&&
operator|!
name|iInfo
operator|.
name|isCommited
argument_list|()
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSecondInfo
operator|.
name|getAssignedTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|iSecondInfo
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSecondInfo
operator|.
name|getAssignedRoom
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|iSecondInfo
operator|.
name|getAssignedRoom
argument_list|()
index|[
name|i
index|]
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|iSecondInfo
operator|.
name|getTime
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSecondInfo
operator|.
name|getRoom
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|iSecondInfo
operator|.
name|getRoom
argument_list|()
index|[
name|i
index|]
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</td></tr></table>"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|"<font color='red'>ERROR:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</font>"
return|;
block|}
block|}
specifier|public
name|void
name|toXml
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
if|if
condition|(
name|iInfo
operator|!=
literal|null
condition|)
name|iInfo
operator|.
name|save
argument_list|(
name|element
operator|.
name|addElement
argument_list|(
literal|"jenrl"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iFirst
operator|!=
literal|null
condition|)
name|iFirst
operator|.
name|toXml
argument_list|(
name|element
operator|.
name|addElement
argument_list|(
literal|"first"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSecond
operator|!=
literal|null
condition|)
name|iSecond
operator|.
name|toXml
argument_list|(
name|element
operator|.
name|addElement
argument_list|(
literal|"second"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|StudentConflictInfo
name|fromXml
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|StudentConflictInfo
name|s
init|=
operator|new
name|StudentConflictInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|element
argument_list|(
literal|"first"
argument_list|)
operator|!=
literal|null
condition|)
name|s
operator|.
name|iFirst
operator|=
name|Hint
operator|.
name|fromXml
argument_list|(
name|element
operator|.
name|element
argument_list|(
literal|"first"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|.
name|element
argument_list|(
literal|"second"
argument_list|)
operator|!=
literal|null
condition|)
name|s
operator|.
name|iSecond
operator|=
name|Hint
operator|.
name|fromXml
argument_list|(
name|element
operator|.
name|element
argument_list|(
literal|"second"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|.
name|element
argument_list|(
literal|"jenrl"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|iInfo
operator|=
operator|new
name|JenrlInfo
argument_list|()
expr_stmt|;
name|s
operator|.
name|iInfo
operator|.
name|load
argument_list|(
name|element
operator|.
name|element
argument_list|(
literal|"jenrl"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
block|}
specifier|public
class|class
name|StudentConflictInfoComparator
implements|implements
name|Comparator
block|{
name|SessionContext
name|iContext
decl_stmt|;
name|SolverProxy
name|iSolver
decl_stmt|;
specifier|public
name|StudentConflictInfoComparator
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|SolverProxy
name|solver
parameter_list|)
block|{
name|iContext
operator|=
name|context
expr_stmt|;
name|iSolver
operator|=
name|solver
expr_stmt|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
try|try
block|{
name|StudentConflictInfo
name|i1
init|=
operator|(
name|StudentConflictInfo
operator|)
name|o1
decl_stmt|;
name|StudentConflictInfo
name|i2
init|=
operator|(
name|StudentConflictInfo
operator|)
name|o2
decl_stmt|;
name|int
name|cmp
init|=
name|Double
operator|.
name|compare
argument_list|(
name|i1
operator|.
name|getInfo
argument_list|()
operator|.
name|getJenrl
argument_list|()
argument_list|,
name|i2
operator|.
name|getInfo
argument_list|()
operator|.
name|getJenrl
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|-
name|cmp
return|;
if|if
condition|(
operator|!
name|i1
operator|.
name|hasInfo
argument_list|()
condition|)
name|i1
operator|.
name|createInfo
argument_list|(
name|iContext
argument_list|,
name|iSolver
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|i2
operator|.
name|hasInfo
argument_list|()
condition|)
name|i2
operator|.
name|createInfo
argument_list|(
name|iContext
argument_list|,
name|iSolver
argument_list|)
expr_stmt|;
name|cmp
operator|=
name|i1
operator|.
name|iFirstInfo
operator|.
name|getClassName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|i2
operator|.
name|iFirstInfo
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
operator|||
name|i1
operator|.
name|iSecondInfo
operator|==
literal|null
condition|)
return|return
name|cmp
return|;
return|return
name|i1
operator|.
name|iSecondInfo
operator|.
name|getClassName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|i2
operator|.
name|iSecondInfo
operator|.
name|getClassName
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|DistributionInfo
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|GroupConstraintInfo
name|iInfo
decl_stmt|;
specifier|private
name|Vector
name|iClassIds
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
specifier|public
name|DistributionInfo
parameter_list|()
block|{
block|}
specifier|public
name|DistributionInfo
parameter_list|(
name|GroupConstraintInfo
name|info
parameter_list|)
block|{
name|iInfo
operator|=
name|info
expr_stmt|;
block|}
specifier|public
name|void
name|addHint
parameter_list|(
name|Hint
name|hint
parameter_list|)
block|{
name|iClassIds
operator|.
name|add
argument_list|(
name|hint
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Vector
name|getClassIds
parameter_list|()
block|{
return|return
name|iClassIds
return|;
block|}
specifier|public
name|GroupConstraintInfo
name|getInfo
parameter_list|()
block|{
return|return
name|iInfo
return|;
block|}
specifier|public
name|String
name|toHtml
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|SolverProxy
name|solver
parameter_list|,
name|boolean
name|link
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"<table border='0'>"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<tr><td nowrap align='center'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|iInfo
operator|.
name|getPreference
argument_list|()
argument_list|)
operator|+
literal|"'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|iInfo
operator|.
name|getPreference
argument_list|()
argument_list|)
operator|.
name|getPrefName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</font><br>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|iInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</font>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</td><td nowrap>"
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|Enumeration
name|e
init|=
name|iClassIds
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Hint
name|hint
init|=
operator|(
name|Hint
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|ClassAssignmentDetails
name|other
init|=
name|hint
operator|.
name|getDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|other
operator|==
literal|null
condition|)
continue|continue;
name|sb
operator|.
name|append
argument_list|(
name|other
operator|.
name|getClazz
argument_list|()
operator|.
name|toHtml
argument_list|(
name|link
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|getAssignedTime
argument_list|()
operator|!=
literal|null
condition|)
name|sb
operator|.
name|append
argument_list|(
name|other
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
if|else if
condition|(
name|other
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
name|sb
operator|.
name|append
argument_list|(
name|other
operator|.
name|getTime
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|getAssignedRoom
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|other
operator|.
name|getAssignedRoom
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|other
operator|.
name|getAssignedRoom
argument_list|()
index|[
name|i
index|]
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|other
operator|.
name|getRoom
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|other
operator|.
name|getRoom
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|other
operator|.
name|getRoom
argument_list|()
index|[
name|i
index|]
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"<BR>"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<font color='red'>ERROR:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</font>"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</td></tr></table>"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|toXml
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
if|if
condition|(
name|iInfo
operator|!=
literal|null
condition|)
name|iInfo
operator|.
name|save
argument_list|(
name|element
operator|.
name|addElement
argument_list|(
literal|"groupConstraintInfo"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iClassIds
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Enumeration
name|e
init|=
name|iClassIds
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Hint
name|h
init|=
operator|(
name|Hint
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|h
operator|.
name|toXml
argument_list|(
name|element
operator|.
name|addElement
argument_list|(
literal|"class"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|DistributionInfo
name|fromXml
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|DistributionInfo
name|s
init|=
operator|new
name|DistributionInfo
argument_list|()
decl_stmt|;
name|s
operator|.
name|iClassIds
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"class"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|s
operator|.
name|iClassIds
operator|.
name|add
argument_list|(
name|Hint
operator|.
name|fromXml
argument_list|(
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|element
operator|.
name|element
argument_list|(
literal|"groupConstraintInfo"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|iInfo
operator|=
operator|new
name|GroupConstraintInfo
argument_list|()
expr_stmt|;
name|s
operator|.
name|iInfo
operator|.
name|load
argument_list|(
name|element
operator|.
name|element
argument_list|(
literal|"groupConstraintInfo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
block|}
specifier|public
name|void
name|toXml
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|element
operator|.
name|addAttribute
argument_list|(
literal|"value"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iValue
argument_list|)
argument_list|)
expr_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"tooBigRooms"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iTooBigRooms
argument_list|)
argument_list|)
expr_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"uselessSlots"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iUselessSlots
argument_list|)
argument_list|)
expr_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"timePreference"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iGlobalTimePreference
argument_list|)
argument_list|)
expr_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"roomPreference"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iGlobalRoomPreference
argument_list|)
argument_list|)
expr_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"groupConstraintPreference"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iGlobalGroupConstraintPreference
argument_list|)
argument_list|)
expr_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"studentConflicts"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iViolatedStudentConflicts
argument_list|)
argument_list|)
expr_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"hardStudentConflicts"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iHardStudentConflicts
argument_list|)
argument_list|)
expr_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"distanceStudentConflicts"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iDistanceStudentConflicts
argument_list|)
argument_list|)
expr_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"commitedStudentConflicts"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iCommitedStudentConflicts
argument_list|)
argument_list|)
expr_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"instructorDistancePreference"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iInstructorDistancePreference
argument_list|)
argument_list|)
expr_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"departmentSpreadPenalty"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iDepartmentSpreadPenalty
argument_list|)
argument_list|)
expr_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"unassignedVariables"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iUnassignedVariables
argument_list|)
argument_list|)
expr_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"perturbationPenalty"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iPerturbationPenalty
argument_list|)
argument_list|)
expr_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"spreadPenalty"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iSpreadPenalty
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iHint
operator|!=
literal|null
condition|)
name|iHint
operator|.
name|toXml
argument_list|(
name|element
operator|.
name|addElement
argument_list|(
literal|"hint"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iDifferentAssignments
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Enumeration
name|e
init|=
name|iDifferentAssignments
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Hint
name|h
init|=
operator|(
name|Hint
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|h
operator|.
name|toXml
argument_list|(
name|element
operator|.
name|addElement
argument_list|(
literal|"differentAssignment"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iUnresolvedConflicts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|iUnresolvedConflicts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Hint
name|h
init|=
operator|(
name|Hint
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|h
operator|.
name|toXml
argument_list|(
name|element
operator|.
name|addElement
argument_list|(
literal|"unresolvedConflict"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iStudentConflictInfos
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Enumeration
name|e
init|=
name|iStudentConflictInfos
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|StudentConflictInfo
name|sci
init|=
operator|(
name|StudentConflictInfo
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|sci
operator|.
name|toXml
argument_list|(
name|element
operator|.
name|addElement
argument_list|(
literal|"studentConflictInfo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iGroupConstraintInfos
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Enumeration
name|e
init|=
name|iGroupConstraintInfos
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|DistributionInfo
name|di
init|=
operator|(
name|DistributionInfo
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|di
operator|.
name|toXml
argument_list|(
name|element
operator|.
name|addElement
argument_list|(
literal|"groupConstraintInfo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iBtbInstructorInfos
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Enumeration
name|e
init|=
name|iBtbInstructorInfos
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|BtbInstructorInfo
name|bii
init|=
operator|(
name|BtbInstructorInfo
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|bii
operator|.
name|toXml
argument_list|(
name|element
operator|.
name|addElement
argument_list|(
literal|"btbInstructorInfo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|Suggestion
name|fromXml
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|Suggestion
name|s
init|=
operator|new
name|Suggestion
argument_list|()
decl_stmt|;
name|s
operator|.
name|iValue
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|iTooBigRooms
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"tooBigRooms"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|iUselessSlots
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"uselessSlots"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|iGlobalTimePreference
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"timePreference"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|iGlobalRoomPreference
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"roomPreference"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|iGlobalGroupConstraintPreference
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"groupConstraintPreference"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|iViolatedStudentConflicts
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"studentConflicts"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|iHardStudentConflicts
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"hardStudentConflicts"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|iDistanceStudentConflicts
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"distanceStudentConflicts"
argument_list|)
argument_list|)
expr_stmt|;
empty_stmt|;
name|s
operator|.
name|iCommitedStudentConflicts
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"commitedStudentConflicts"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|iInstructorDistancePreference
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"instructorDistancePreference"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|iDepartmentSpreadPenalty
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"departmentSpreadPenalty"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|iUnassignedVariables
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"unassignedVariables"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|iPerturbationPenalty
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"perturbationPenalty"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|iSpreadPenalty
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"spreadPenalty"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|.
name|element
argument_list|(
literal|"hint"
argument_list|)
operator|!=
literal|null
condition|)
name|s
operator|.
name|iHint
operator|=
name|Hint
operator|.
name|fromXml
argument_list|(
name|element
operator|.
name|element
argument_list|(
literal|"hint"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"differentAssignment"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|s
operator|.
name|iDifferentAssignments
operator|==
literal|null
condition|)
name|s
operator|.
name|iDifferentAssignments
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
name|s
operator|.
name|iDifferentAssignments
operator|.
name|add
argument_list|(
name|Hint
operator|.
name|fromXml
argument_list|(
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"unresolvedConflict"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|s
operator|.
name|iUnresolvedConflicts
operator|==
literal|null
condition|)
name|s
operator|.
name|iUnresolvedConflicts
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|s
operator|.
name|iUnresolvedConflicts
operator|.
name|add
argument_list|(
name|Hint
operator|.
name|fromXml
argument_list|(
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"studentConflictInfo"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|s
operator|.
name|iStudentConflictInfos
operator|==
literal|null
condition|)
name|s
operator|.
name|iStudentConflictInfos
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
name|s
operator|.
name|iStudentConflictInfos
operator|.
name|add
argument_list|(
name|StudentConflictInfo
operator|.
name|fromXml
argument_list|(
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"groupConstraintInfo"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|s
operator|.
name|iGroupConstraintInfos
operator|==
literal|null
condition|)
name|s
operator|.
name|iGroupConstraintInfos
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
name|s
operator|.
name|iGroupConstraintInfos
operator|.
name|add
argument_list|(
name|DistributionInfo
operator|.
name|fromXml
argument_list|(
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"btbInstructorInfo"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|s
operator|.
name|iBtbInstructorInfos
operator|==
literal|null
condition|)
name|s
operator|.
name|iBtbInstructorInfos
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
name|s
operator|.
name|iBtbInstructorInfos
operator|.
name|add
argument_list|(
name|BtbInstructorInfo
operator|.
name|fromXml
argument_list|(
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
specifier|public
name|boolean
name|isCanAssign
parameter_list|()
block|{
return|return
name|iCanAssign
return|;
block|}
specifier|public
name|void
name|setCanAssign
parameter_list|(
name|boolean
name|canAssign
parameter_list|)
block|{
name|iCanAssign
operator|=
name|canAssign
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Suggestion{value = "
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|iValue
argument_list|)
operator|+
literal|"\n"
operator|+
operator|(
name|iDifferentAssignments
operator|==
literal|null
operator|||
name|iDifferentAssignments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"  differentAssignments = "
operator|+
name|iDifferentAssignments
operator|+
literal|"\n"
operator|)
operator|+
operator|(
name|iUnresolvedConflicts
operator|==
literal|null
operator|||
name|iUnresolvedConflicts
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"  unresolvedConflicts = "
operator|+
name|iUnresolvedConflicts
operator|+
literal|"\n"
operator|)
operator|+
operator|(
name|iHint
operator|==
literal|null
condition|?
literal|""
else|:
literal|"  hint = "
operator|+
name|iHint
operator|+
literal|"\n"
operator|)
operator|+
literal|"}"
return|;
block|}
block|}
end_class

end_unit

