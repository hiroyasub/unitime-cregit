begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Lecture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|StudentGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solver
operator|.
name|Solver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|reports
operator|.
name|OnlineSectioningReport
operator|.
name|Counter
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|StudentGroupInfo
implements|implements
name|TimetableInfo
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
specifier|static
name|int
name|sVersion
init|=
literal|1
decl_stmt|;
specifier|private
name|long
name|iId
decl_stmt|;
specifier|private
name|String
name|iName
decl_stmt|;
specifier|private
name|double
name|iWeight
decl_stmt|;
specifier|private
name|double
name|iValue
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ClassInfo
argument_list|>
name|iClasses
decl_stmt|;
specifier|public
name|StudentGroupInfo
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|StudentGroupInfo
parameter_list|(
name|Solver
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|solver
parameter_list|,
name|StudentGroup
name|group
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|iId
operator|=
name|group
operator|.
name|getId
argument_list|()
expr_stmt|;
name|iName
operator|=
name|group
operator|.
name|getName
argument_list|()
expr_stmt|;
name|iWeight
operator|=
name|group
operator|.
name|getWeight
argument_list|()
expr_stmt|;
name|iValue
operator|=
name|value
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Lecture
argument_list|,
name|List
argument_list|<
name|Student
argument_list|>
argument_list|>
name|class2students
init|=
operator|new
name|HashMap
argument_list|<
name|Lecture
argument_list|,
name|List
argument_list|<
name|Student
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Student
name|student
range|:
name|group
operator|.
name|getStudents
argument_list|()
control|)
block|{
for|for
control|(
name|Lecture
name|lecture
range|:
name|student
operator|.
name|getLectures
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Student
argument_list|>
name|students
init|=
name|class2students
operator|.
name|get
argument_list|(
name|lecture
argument_list|)
decl_stmt|;
if|if
condition|(
name|students
operator|==
literal|null
condition|)
block|{
name|students
operator|=
operator|new
name|ArrayList
argument_list|<
name|Student
argument_list|>
argument_list|()
expr_stmt|;
name|class2students
operator|.
name|put
argument_list|(
name|lecture
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
name|students
operator|.
name|add
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
block|}
name|iClasses
operator|=
operator|new
name|ArrayList
argument_list|<
name|ClassInfo
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Lecture
argument_list|,
name|List
argument_list|<
name|Student
argument_list|>
argument_list|>
name|entry
range|:
name|class2students
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|iClasses
operator|.
name|add
argument_list|(
operator|new
name|ClassInfo
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|double
name|value
parameter_list|(
name|StudentGroup
name|group
parameter_list|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Match
argument_list|>
name|match
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Match
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Student
name|student
range|:
name|group
operator|.
name|getStudents
argument_list|()
control|)
for|for
control|(
name|Lecture
name|lecture
range|:
name|student
operator|.
name|getLectures
argument_list|()
control|)
block|{
name|Match
name|m
init|=
name|match
operator|.
name|get
argument_list|(
name|lecture
operator|.
name|getSchedulingSubpartId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
name|m
operator|=
operator|new
name|Match
argument_list|(
name|group
argument_list|,
name|lecture
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getOfferingId
argument_list|()
argument_list|)
expr_stmt|;
name|match
operator|.
name|put
argument_list|(
name|lecture
operator|.
name|getSchedulingSubpartId
argument_list|()
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|inc
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
block|}
name|double
name|value
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|Match
name|m
range|:
name|match
operator|.
name|values
argument_list|()
control|)
name|value
operator|+=
name|m
operator|.
name|value
argument_list|()
expr_stmt|;
return|return
name|value
operator|/
name|match
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|Long
name|getGroupId
parameter_list|()
block|{
return|return
name|iId
return|;
block|}
specifier|public
name|String
name|getGroupName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|double
name|getGroupWeight
parameter_list|()
block|{
return|return
name|iWeight
return|;
block|}
specifier|public
name|double
name|getGroupValue
parameter_list|()
block|{
return|return
name|iValue
return|;
block|}
specifier|public
name|List
argument_list|<
name|ClassInfo
argument_list|>
name|getGroupAssignments
parameter_list|()
block|{
return|return
name|iClasses
return|;
block|}
specifier|public
name|ClassInfo
name|getGroupAssignment
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
for|for
control|(
name|ClassInfo
name|clazz
range|:
name|iClasses
control|)
if|if
condition|(
name|clazz
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|classId
argument_list|)
condition|)
return|return
name|clazz
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|List
argument_list|<
name|StudentInfo
argument_list|>
name|getStudentAssignments
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
for|for
control|(
name|ClassInfo
name|clazz
range|:
name|iClasses
control|)
if|if
condition|(
name|clazz
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|classId
argument_list|)
condition|)
return|return
name|clazz
operator|.
name|getStudents
argument_list|()
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|int
name|countStudentsOfConfiguration
parameter_list|(
name|Long
name|configId
parameter_list|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|studentIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassInfo
name|clazz
range|:
name|iClasses
control|)
if|if
condition|(
name|configId
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getConfigId
argument_list|()
argument_list|)
condition|)
for|for
control|(
name|StudentInfo
name|student
range|:
name|clazz
operator|.
name|getStudents
argument_list|()
control|)
name|studentIds
operator|.
name|add
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|studentIds
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|int
name|countStudentsOfOffering
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|studentIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassInfo
name|clazz
range|:
name|iClasses
control|)
if|if
condition|(
name|offeringId
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getOfferingId
argument_list|()
argument_list|)
condition|)
for|for
control|(
name|StudentInfo
name|student
range|:
name|clazz
operator|.
name|getStudents
argument_list|()
control|)
name|studentIds
operator|.
name|add
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|studentIds
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|int
name|countStudents
parameter_list|()
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|studentIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassInfo
name|clazz
range|:
name|iClasses
control|)
for|for
control|(
name|StudentInfo
name|student
range|:
name|clazz
operator|.
name|getStudents
argument_list|()
control|)
name|studentIds
operator|.
name|add
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|studentIds
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|double
name|countStudentWeights
parameter_list|()
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Counter
argument_list|>
name|counters
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Counter
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassInfo
name|clazz
range|:
name|iClasses
control|)
for|for
control|(
name|StudentInfo
name|student
range|:
name|clazz
operator|.
name|getStudents
argument_list|()
control|)
block|{
name|Counter
name|c
init|=
name|counters
operator|.
name|get
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|c
operator|=
operator|new
name|Counter
argument_list|()
expr_stmt|;
name|counters
operator|.
name|put
argument_list|(
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
name|c
operator|.
name|inc
argument_list|(
name|student
operator|.
name|getWeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|double
name|total
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|Counter
name|c
range|:
name|counters
operator|.
name|values
argument_list|()
control|)
name|total
operator|+=
name|c
operator|.
name|avg
argument_list|()
expr_stmt|;
return|return
name|total
return|;
block|}
specifier|public
specifier|static
class|class
name|ClassInfo
block|{
specifier|private
name|Long
name|iClassId
decl_stmt|;
specifier|private
name|Long
name|iConfigId
decl_stmt|;
specifier|private
name|Long
name|iOfferingId
decl_stmt|;
specifier|private
name|List
argument_list|<
name|StudentInfo
argument_list|>
name|iStudents
init|=
operator|new
name|ArrayList
argument_list|<
name|StudentInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|ClassInfo
parameter_list|(
name|Lecture
name|clazz
parameter_list|,
name|Collection
argument_list|<
name|Student
argument_list|>
name|students
parameter_list|)
block|{
name|iClassId
operator|=
name|clazz
operator|.
name|getClassId
argument_list|()
expr_stmt|;
name|iConfigId
operator|=
name|clazz
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getConfigId
argument_list|()
expr_stmt|;
name|iOfferingId
operator|=
name|clazz
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getOfferingId
argument_list|()
expr_stmt|;
for|for
control|(
name|Student
name|student
range|:
name|students
control|)
name|iStudents
operator|.
name|add
argument_list|(
operator|new
name|StudentInfo
argument_list|(
name|clazz
argument_list|,
name|student
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ClassInfo
parameter_list|(
name|Element
name|e
parameter_list|)
block|{
name|iClassId
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|e
operator|.
name|attributeValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|configId
init|=
name|e
operator|.
name|attributeValue
argument_list|(
literal|"configId"
argument_list|)
decl_stmt|;
name|iConfigId
operator|=
operator|(
name|configId
operator|==
literal|null
condition|?
literal|null
else|:
name|Long
operator|.
name|valueOf
argument_list|(
name|configId
argument_list|)
operator|)
expr_stmt|;
name|String
name|offeringId
init|=
name|e
operator|.
name|attributeValue
argument_list|(
literal|"offeringId"
argument_list|)
decl_stmt|;
name|iOfferingId
operator|=
operator|(
name|offeringId
operator|==
literal|null
condition|?
literal|null
else|:
name|Long
operator|.
name|valueOf
argument_list|(
name|offeringId
argument_list|)
operator|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|e
operator|.
name|elementIterator
argument_list|(
literal|"student"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|iStudents
operator|.
name|add
argument_list|(
operator|new
name|StudentInfo
argument_list|(
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Long
name|getClassId
parameter_list|()
block|{
return|return
name|iClassId
return|;
block|}
specifier|public
name|Long
name|getOfferingId
parameter_list|()
block|{
return|return
name|iOfferingId
return|;
block|}
specifier|public
name|Long
name|getConfigId
parameter_list|()
block|{
return|return
name|iConfigId
return|;
block|}
specifier|public
name|List
argument_list|<
name|StudentInfo
argument_list|>
name|getStudents
parameter_list|()
block|{
return|return
name|iStudents
return|;
block|}
specifier|public
name|double
name|countStudentsWeight
parameter_list|()
block|{
name|double
name|weight
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|StudentInfo
name|student
range|:
name|iStudents
control|)
name|weight
operator|+=
name|student
operator|.
name|getWeight
argument_list|()
expr_stmt|;
return|return
name|weight
return|;
block|}
specifier|public
name|void
name|save
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|element
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iClassId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iConfigId
operator|!=
literal|null
condition|)
name|element
operator|.
name|addAttribute
argument_list|(
literal|"configId"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iConfigId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iOfferingId
operator|!=
literal|null
condition|)
name|element
operator|.
name|addAttribute
argument_list|(
literal|"offeringId"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iOfferingId
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|StudentInfo
name|student
range|:
name|iStudents
control|)
block|{
name|student
operator|.
name|save
argument_list|(
name|element
operator|.
name|addElement
argument_list|(
literal|"student"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|StudentInfo
block|{
specifier|private
name|Long
name|iStudentId
decl_stmt|;
specifier|private
name|double
name|iWeight
decl_stmt|;
specifier|public
name|StudentInfo
parameter_list|(
name|Lecture
name|lecture
parameter_list|,
name|Student
name|student
parameter_list|)
block|{
name|iStudentId
operator|=
name|student
operator|.
name|getId
argument_list|()
expr_stmt|;
name|iWeight
operator|=
name|student
operator|.
name|getOfferingWeight
argument_list|(
name|lecture
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|StudentInfo
parameter_list|(
name|Element
name|e
parameter_list|)
block|{
name|iStudentId
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|e
operator|.
name|attributeValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|iWeight
operator|=
name|Double
operator|.
name|valueOf
argument_list|(
name|e
operator|.
name|attributeValue
argument_list|(
literal|"weight"
argument_list|,
literal|"1.0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Long
name|getStudentId
parameter_list|()
block|{
return|return
name|iStudentId
return|;
block|}
specifier|public
name|double
name|getWeight
parameter_list|()
block|{
return|return
name|iWeight
return|;
block|}
specifier|public
name|void
name|save
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|element
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iStudentId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iWeight
operator|!=
literal|1.0
condition|)
name|element
operator|.
name|addAttribute
argument_list|(
literal|"weight"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iWeight
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|load
parameter_list|(
name|Element
name|root
parameter_list|)
block|{
name|iId
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|root
operator|.
name|attributeValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|iName
operator|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|iWeight
operator|=
name|Double
operator|.
name|valueOf
argument_list|(
name|root
operator|.
name|attributeValue
argument_list|(
literal|"weight"
argument_list|)
argument_list|)
expr_stmt|;
name|iValue
operator|=
name|Double
operator|.
name|valueOf
argument_list|(
name|root
operator|.
name|attributeValue
argument_list|(
literal|"value"
argument_list|,
literal|"1.0"
argument_list|)
argument_list|)
expr_stmt|;
name|iClasses
operator|=
operator|new
name|ArrayList
argument_list|<
name|ClassInfo
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|root
operator|.
name|elementIterator
argument_list|(
literal|"class"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|iClasses
operator|.
name|add
argument_list|(
operator|new
name|ClassInfo
argument_list|(
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|save
parameter_list|(
name|Element
name|root
parameter_list|)
block|{
name|root
operator|.
name|addAttribute
argument_list|(
literal|"version"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|sVersion
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iName
operator|!=
literal|null
condition|)
name|root
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|iName
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"weight"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iWeight
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iValue
operator|!=
literal|1.0
condition|)
name|root
operator|.
name|addAttribute
argument_list|(
literal|"value"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iValue
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ClassInfo
name|clazz
range|:
name|iClasses
control|)
name|clazz
operator|.
name|save
argument_list|(
name|root
operator|.
name|addElement
argument_list|(
literal|"class"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|saveToFile
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
class|class
name|Match
block|{
specifier|private
name|int
name|iTotal
init|=
literal|0
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|iMatch
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Match
parameter_list|(
name|StudentGroup
name|group
parameter_list|,
name|Long
name|offeringId
parameter_list|)
block|{
name|iTotal
operator|=
name|group
operator|.
name|countStudents
argument_list|(
name|offeringId
argument_list|)
expr_stmt|;
block|}
name|void
name|inc
parameter_list|(
name|Lecture
name|lecture
parameter_list|)
block|{
name|Integer
name|val
init|=
name|iMatch
operator|.
name|get
argument_list|(
name|lecture
operator|.
name|getClassId
argument_list|()
argument_list|)
decl_stmt|;
name|iMatch
operator|.
name|put
argument_list|(
name|lecture
operator|.
name|getClassId
argument_list|()
argument_list|,
literal|1
operator|+
operator|(
name|val
operator|==
literal|null
condition|?
literal|0
else|:
name|val
operator|.
name|intValue
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
name|double
name|value
parameter_list|()
block|{
if|if
condition|(
name|iTotal
operator|<=
literal|1
condition|)
return|return
literal|1.0
return|;
name|double
name|value
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|Integer
name|m
range|:
name|iMatch
operator|.
name|values
argument_list|()
control|)
if|if
condition|(
name|m
operator|>
literal|1
condition|)
name|value
operator|+=
operator|(
name|m
operator|*
operator|(
name|m
operator|-
literal|1.0
operator|)
operator|)
operator|/
operator|(
name|iTotal
operator|*
operator|(
name|iTotal
operator|-
literal|1.0
operator|)
operator|)
expr_stmt|;
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|iTotal
operator|+
literal|"/"
operator|+
name|iMatch
return|;
block|}
block|}
block|}
end_class

end_unit

