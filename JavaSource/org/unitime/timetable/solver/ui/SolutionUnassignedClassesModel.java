begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Solution
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SolutionUnassignedClassesModel
extends|extends
name|UnassignedClassesModel
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|8222974077941239586L
decl_stmt|;
specifier|public
name|SolutionUnassignedClassesModel
parameter_list|(
name|Collection
name|solutions
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|String
name|instructorFormat
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|solutions
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Solution
name|solution
init|=
operator|(
name|Solution
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|solution
operator|.
name|getOwner
argument_list|()
operator|.
name|getNotAssignedClasses
argument_list|(
name|solution
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|clazz
operator|.
name|getClassLabel
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
continue|continue;
name|String
name|onClick
init|=
literal|"showGwtDialog('Suggestions', 'suggestions.do?id="
operator|+
name|clazz
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"&op=Reset','900','90%');"
decl_stmt|;
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|leads
init|=
name|clazz
operator|.
name|getLeadInstructors
argument_list|()
decl_stmt|;
name|StringBuffer
name|leadsSb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|e
init|=
name|leads
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
name|leadsSb
operator|.
name|append
argument_list|(
name|instructor
operator|.
name|getName
argument_list|(
name|instructorFormat
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|hasNext
argument_list|()
condition|)
name|leadsSb
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
name|String
name|instructorName
init|=
name|leadsSb
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|nrStudents
init|=
operator|(
operator|(
name|Number
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select count(s) from StudentEnrollment as s where s.clazz.uniqueId=:classId and s.solution.uniqueId=:solutionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"classId"
argument_list|,
name|clazz
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"solutionId"
argument_list|,
name|solution
operator|.
name|getUniqueId
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|rows
argument_list|()
operator|.
name|addElement
argument_list|(
operator|new
name|UnassignedClassRow
argument_list|(
name|onClick
argument_list|,
name|name
argument_list|,
name|instructorName
argument_list|,
name|nrStudents
argument_list|,
literal|null
argument_list|,
name|clazz
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

