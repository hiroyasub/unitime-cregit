begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|TimetableSolver
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Lecture
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SolverUnassignedClassesModel
extends|extends
name|UnassignedClassesModel
block|{
specifier|public
name|SolverUnassignedClassesModel
parameter_list|(
name|TimetableSolver
name|solver
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|unassignedVariables
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Lecture
name|lecture
init|=
operator|(
name|Lecture
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|lecture
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|onClick
init|=
literal|"window.open('suggestions.do?id="
operator|+
name|lecture
operator|.
name|getClassId
argument_list|()
operator|+
literal|"&op=Reset','suggestions','width=1000,height=600,resizable=yes,scrollbars=yes,toolbar=no,location=no,directories=no,status=yes,menubar=no,copyhistory=no').focus();"
decl_stmt|;
name|String
name|instructorName
init|=
name|lecture
operator|.
name|getInstructorName
argument_list|()
decl_stmt|;
name|int
name|nrStudents
init|=
name|lecture
operator|.
name|students
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|String
name|initial
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|initial
operator|=
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|rows
argument_list|()
operator|.
name|addElement
argument_list|(
operator|new
name|UnassignedClassRow
argument_list|(
name|onClick
argument_list|,
name|name
argument_list|,
name|instructorName
argument_list|,
name|nrStudents
argument_list|,
name|initial
argument_list|,
name|lecture
operator|.
name|getOrd
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

