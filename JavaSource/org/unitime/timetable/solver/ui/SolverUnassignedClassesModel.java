begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
package|;
end_package

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Lecture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|TimetableSolver
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SolverUnassignedClassesModel
extends|extends
name|UnassignedClassesModel
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|6094708695678612559L
decl_stmt|;
specifier|public
name|SolverUnassignedClassesModel
parameter_list|(
name|TimetableSolver
name|solver
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|unassignedVariables
argument_list|(
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|)
control|)
block|{
name|String
name|name
init|=
name|lecture
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
continue|continue;
name|String
name|onClick
init|=
literal|"showGwtDialog('Suggestions', 'suggestions.do?id="
operator|+
name|lecture
operator|.
name|getClassId
argument_list|()
operator|+
literal|"&op=Reset','900','90%');"
decl_stmt|;
name|String
name|instructorName
init|=
name|lecture
operator|.
name|getInstructorName
argument_list|()
decl_stmt|;
name|int
name|nrStudents
init|=
name|lecture
operator|.
name|students
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|String
name|initial
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|initial
operator|=
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|rows
argument_list|()
operator|.
name|addElement
argument_list|(
operator|new
name|UnassignedClassRow
argument_list|(
name|onClick
argument_list|,
name|name
argument_list|,
name|instructorName
argument_list|,
name|nrStudents
argument_list|,
name|initial
argument_list|,
name|lecture
operator|.
name|getOrd
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

