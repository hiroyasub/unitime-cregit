begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|jsp
operator|.
name|JspWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|ClassLimitConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|DepartmentSpreadConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|GroupConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|InstructorConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|JenrlConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|MinimizeNumberOfUsedGroupsOfTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|MinimizeNumberOfUsedRoomsConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|RoomConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|SpreadConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Lecture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|extension
operator|.
name|AssignedValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|extension
operator|.
name|ConflictStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solver
operator|.
name|Solver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|timegrid
operator|.
name|SolverGridModel
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ConflictStatisticsInfo
implements|implements
name|TimetableInfo
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|7L
decl_stmt|;
specifier|public
specifier|static
name|int
name|sVersion
init|=
literal|8
decl_stmt|;
comment|// to be able to do some changes in the future
specifier|public
specifier|static
specifier|final
name|int
name|sConstraintTypeRoom
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sConstraintTypeInstructor
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sConstraintTypeGroup
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sConstraintTypeBalanc
init|=
literal|4
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sConstraintTypeSpread
init|=
literal|5
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sConstraintTypeMinNrRoomUsed
init|=
literal|6
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sConstraintTypeClassLimit
init|=
literal|7
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sConstraintTypeMinNrGroupsOfTime
init|=
literal|8
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sConstraintTypeJoinEnrollment
init|=
literal|9
decl_stmt|;
specifier|private
name|Hashtable
name|iVariables
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|public
name|Collection
name|getCBS
parameter_list|()
block|{
return|return
name|iVariables
operator|.
name|values
argument_list|()
return|;
block|}
specifier|public
name|CBSVariable
name|getCBS
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
return|return
operator|(
name|CBSVariable
operator|)
name|iVariables
operator|.
name|get
argument_list|(
name|classId
argument_list|)
return|;
block|}
specifier|public
name|void
name|load
parameter_list|(
name|Solver
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|solver
parameter_list|,
name|ConflictStatistics
name|cbs
parameter_list|)
block|{
name|load
argument_list|(
name|solver
argument_list|,
name|cbs
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ConflictStatisticsInfo
name|getConflictStatisticsSubInfo
parameter_list|(
name|List
name|variables
parameter_list|)
block|{
name|ConflictStatisticsInfo
name|ret
init|=
operator|new
name|ConflictStatisticsInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|e
init|=
name|variables
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Lecture
name|lecture
init|=
operator|(
name|Lecture
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
name|CBSVariable
name|var
init|=
operator|(
name|CBSVariable
operator|)
name|iVariables
operator|.
name|get
argument_list|(
name|lecture
operator|.
name|getClassId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|var
operator|!=
literal|null
condition|)
name|ret
operator|.
name|iVariables
operator|.
name|put
argument_list|(
name|lecture
operator|.
name|getClassId
argument_list|()
argument_list|,
name|var
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|void
name|merge
parameter_list|(
name|ConflictStatisticsInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
name|iVariables
operator|.
name|putAll
argument_list|(
name|info
operator|.
name|iVariables
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|load
parameter_list|(
name|Solver
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|solver
parameter_list|,
name|ConflictStatistics
name|cbs
parameter_list|,
name|Long
name|classId
parameter_list|)
block|{
name|iVariables
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i1
init|=
name|cbs
operator|.
name|getNoGoods
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|AssignedValue
name|assignment
init|=
operator|(
name|AssignedValue
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Placement
name|placement
init|=
operator|(
name|Placement
operator|)
name|assignment
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Lecture
name|lecture
init|=
operator|(
name|Lecture
operator|)
name|placement
operator|.
name|variable
argument_list|()
decl_stmt|;
if|if
condition|(
name|classId
operator|!=
literal|null
operator|&&
operator|!
name|classId
operator|.
name|equals
argument_list|(
name|lecture
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|CBSVariable
name|var
init|=
operator|(
name|CBSVariable
operator|)
name|iVariables
operator|.
name|get
argument_list|(
name|lecture
operator|.
name|getClassId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|var
operator|==
literal|null
condition|)
block|{
name|String
name|pref
init|=
name|SolverGridModel
operator|.
name|hardConflicts2pref
argument_list|(
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|,
name|lecture
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|var
operator|=
operator|new
name|CBSVariable
argument_list|(
name|lecture
operator|.
name|getClassId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|lecture
operator|.
name|getName
argument_list|()
argument_list|,
name|pref
argument_list|)
expr_stmt|;
name|iVariables
operator|.
name|put
argument_list|(
name|lecture
operator|.
name|getClassId
argument_list|()
argument_list|,
name|var
argument_list|)
expr_stmt|;
block|}
name|CBSValue
name|val
init|=
operator|new
name|CBSValue
argument_list|(
name|var
argument_list|,
name|lecture
operator|.
name|getInstructorName
argument_list|()
argument_list|,
name|placement
operator|.
name|getRoomNames
argument_list|()
argument_list|,
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|,
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|placement
operator|.
name|getRoomIds
argument_list|()
argument_list|,
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getPreference
argument_list|()
argument_list|,
name|placement
operator|.
name|getRoomPrefs
argument_list|()
argument_list|,
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|,
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|,
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getTimePatternId
argument_list|()
argument_list|,
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getBreakTime
argument_list|()
argument_list|,
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDatePatternId
argument_list|()
argument_list|)
decl_stmt|;
name|var
operator|.
name|values
argument_list|()
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|List
name|noGoods
init|=
operator|(
name|List
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Hashtable
name|constr2assignments
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|e2
init|=
name|noGoods
operator|.
name|iterator
argument_list|()
init|;
name|e2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AssignedValue
name|noGood
init|=
operator|(
name|AssignedValue
operator|)
name|e2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|noGood
operator|.
name|getConstraint
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|List
name|aaa
init|=
operator|(
name|List
operator|)
name|constr2assignments
operator|.
name|get
argument_list|(
name|noGood
operator|.
name|getConstraint
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|aaa
operator|==
literal|null
condition|)
block|{
name|aaa
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|constr2assignments
operator|.
name|put
argument_list|(
name|noGood
operator|.
name|getConstraint
argument_list|()
argument_list|,
name|aaa
argument_list|)
expr_stmt|;
block|}
name|aaa
operator|.
name|add
argument_list|(
name|noGood
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i2
init|=
name|constr2assignments
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry2
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|Constraint
name|constraint
init|=
operator|(
name|Constraint
operator|)
name|entry2
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
name|noGoodsThisConstraint
init|=
operator|(
name|List
operator|)
name|entry2
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|CBSConstraint
name|con
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|constraint
operator|instanceof
name|RoomConstraint
condition|)
block|{
name|con
operator|=
operator|new
name|CBSConstraint
argument_list|(
name|val
argument_list|,
name|sConstraintTypeRoom
argument_list|,
operator|(
operator|(
name|RoomConstraint
operator|)
name|constraint
operator|)
operator|.
name|getResourceId
argument_list|()
argument_list|,
name|constraint
operator|.
name|getName
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|constraint
operator|instanceof
name|InstructorConstraint
condition|)
block|{
name|con
operator|=
operator|new
name|CBSConstraint
argument_list|(
name|val
argument_list|,
name|sConstraintTypeInstructor
argument_list|,
operator|(
operator|(
name|InstructorConstraint
operator|)
name|constraint
operator|)
operator|.
name|getResourceId
argument_list|()
argument_list|,
name|constraint
operator|.
name|getName
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|constraint
operator|instanceof
name|GroupConstraint
condition|)
block|{
name|con
operator|=
operator|new
name|CBSConstraint
argument_list|(
name|val
argument_list|,
name|sConstraintTypeGroup
argument_list|,
operator|(
operator|(
name|GroupConstraint
operator|)
name|constraint
operator|)
operator|.
name|getId
argument_list|()
argument_list|,
name|constraint
operator|.
name|getName
argument_list|()
argument_list|,
operator|(
operator|(
name|GroupConstraint
operator|)
name|constraint
operator|)
operator|.
name|getPrologPreference
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|constraint
operator|instanceof
name|DepartmentSpreadConstraint
condition|)
block|{
name|con
operator|=
operator|new
name|CBSConstraint
argument_list|(
name|val
argument_list|,
name|sConstraintTypeBalanc
argument_list|,
operator|(
operator|(
name|DepartmentSpreadConstraint
operator|)
name|constraint
operator|)
operator|.
name|getDepartmentId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|constraint
operator|.
name|getName
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|constraint
operator|instanceof
name|SpreadConstraint
condition|)
block|{
name|con
operator|=
operator|new
name|CBSConstraint
argument_list|(
name|val
argument_list|,
name|sConstraintTypeSpread
argument_list|,
name|constraint
operator|.
name|getId
argument_list|()
argument_list|,
name|constraint
operator|.
name|getName
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|constraint
operator|instanceof
name|MinimizeNumberOfUsedRoomsConstraint
condition|)
block|{
name|con
operator|=
operator|new
name|CBSConstraint
argument_list|(
name|val
argument_list|,
name|sConstraintTypeMinNrRoomUsed
argument_list|,
name|constraint
operator|.
name|getId
argument_list|()
argument_list|,
name|constraint
operator|.
name|getName
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|constraint
operator|instanceof
name|ClassLimitConstraint
condition|)
block|{
name|con
operator|=
operator|new
name|CBSConstraint
argument_list|(
name|val
argument_list|,
name|sConstraintTypeClassLimit
argument_list|,
name|constraint
operator|.
name|getId
argument_list|()
argument_list|,
name|constraint
operator|.
name|getName
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|constraint
operator|instanceof
name|MinimizeNumberOfUsedGroupsOfTime
condition|)
block|{
name|con
operator|=
operator|new
name|CBSConstraint
argument_list|(
name|val
argument_list|,
name|sConstraintTypeMinNrGroupsOfTime
argument_list|,
name|constraint
operator|.
name|getId
argument_list|()
argument_list|,
name|constraint
operator|.
name|getName
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|constraint
operator|instanceof
name|JenrlConstraint
condition|)
block|{
name|con
operator|=
operator|new
name|CBSConstraint
argument_list|(
name|val
argument_list|,
name|sConstraintTypeJoinEnrollment
argument_list|,
name|constraint
operator|.
name|getId
argument_list|()
argument_list|,
name|constraint
operator|.
name|toString
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|con
operator|=
operator|new
name|CBSConstraint
argument_list|(
name|val
argument_list|,
operator|-
literal|1
argument_list|,
name|constraint
operator|.
name|getId
argument_list|()
argument_list|,
name|constraint
operator|.
name|getName
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
expr_stmt|;
block|}
name|val
operator|.
name|constraints
argument_list|()
operator|.
name|add
argument_list|(
name|con
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|e3
init|=
name|noGoodsThisConstraint
operator|.
name|iterator
argument_list|()
init|;
name|e3
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AssignedValue
name|ass
init|=
operator|(
name|AssignedValue
operator|)
name|e3
operator|.
name|next
argument_list|()
decl_stmt|;
name|Placement
name|p
init|=
operator|(
name|Placement
operator|)
name|ass
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Lecture
name|l
init|=
operator|(
name|Lecture
operator|)
name|p
operator|.
name|variable
argument_list|()
decl_stmt|;
name|String
name|pr
init|=
name|SolverGridModel
operator|.
name|hardConflicts2pref
argument_list|(
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|,
name|l
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|CBSAssignment
name|a
init|=
operator|new
name|CBSAssignment
argument_list|(
name|con
argument_list|,
name|l
operator|.
name|getClassId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|l
operator|.
name|getName
argument_list|()
argument_list|,
name|l
operator|.
name|getInstructorName
argument_list|()
argument_list|,
name|p
operator|.
name|getRoomNames
argument_list|()
argument_list|,
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|,
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|p
operator|.
name|getRoomIds
argument_list|()
argument_list|,
name|pr
argument_list|,
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getPreference
argument_list|()
argument_list|,
name|p
operator|.
name|getRoomPrefs
argument_list|()
argument_list|,
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|,
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|,
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getTimePatternId
argument_list|()
argument_list|,
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getBreakTime
argument_list|()
argument_list|,
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDatePatternId
argument_list|()
argument_list|)
decl_stmt|;
name|con
operator|.
name|assignments
argument_list|()
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|a
operator|.
name|incCounter
argument_list|(
operator|(
name|int
operator|)
name|ass
operator|.
name|getCounter
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|load
parameter_list|(
name|Element
name|root
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|version
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|root
operator|.
name|attributeValue
argument_list|(
literal|"version"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|==
name|sVersion
condition|)
block|{
name|iVariables
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i1
init|=
name|root
operator|.
name|elementIterator
argument_list|(
literal|"var"
argument_list|)
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CBSVariable
name|var
init|=
operator|new
name|CBSVariable
argument_list|(
operator|(
name|Element
operator|)
name|i1
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|iVariables
operator|.
name|put
argument_list|(
operator|new
name|Long
argument_list|(
name|var
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|var
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|save
parameter_list|(
name|Element
name|root
parameter_list|)
throws|throws
name|Exception
block|{
name|root
operator|.
name|addAttribute
argument_list|(
literal|"version"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|sVersion
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i1
init|=
name|iVariables
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
operator|(
operator|(
name|CBSVariable
operator|)
name|i1
operator|.
name|next
argument_list|()
operator|)
operator|.
name|save
argument_list|(
name|root
operator|.
name|addElement
argument_list|(
literal|"var"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
interface|interface
name|Counter
block|{
specifier|public
name|int
name|getCounter
parameter_list|()
function_decl|;
specifier|public
name|void
name|incCounter
parameter_list|(
name|int
name|value
parameter_list|)
function_decl|;
block|}
specifier|public
specifier|static
class|class
name|CBSVariable
implements|implements
name|Counter
implements|,
name|Comparable
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
name|int
name|iCounter
init|=
literal|0
decl_stmt|;
name|long
name|iClassId
decl_stmt|;
name|String
name|iName
decl_stmt|;
name|HashSet
name|iValues
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|CBSConstraint
name|iConstraint
init|=
literal|null
decl_stmt|;
name|String
name|iPref
init|=
literal|null
decl_stmt|;
name|CBSVariable
parameter_list|(
name|long
name|classId
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|pref
parameter_list|)
block|{
name|iClassId
operator|=
name|classId
expr_stmt|;
name|iName
operator|=
name|name
expr_stmt|;
name|iPref
operator|=
name|pref
expr_stmt|;
block|}
name|CBSVariable
parameter_list|(
name|CBSConstraint
name|constraint
parameter_list|,
name|long
name|classId
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|pref
parameter_list|)
block|{
name|iConstraint
operator|=
name|constraint
expr_stmt|;
name|iClassId
operator|=
name|classId
expr_stmt|;
name|iName
operator|=
name|name
expr_stmt|;
name|iPref
operator|=
name|pref
expr_stmt|;
block|}
name|CBSVariable
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|iClassId
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"class"
argument_list|)
argument_list|)
expr_stmt|;
name|iName
operator|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|iPref
operator|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"pref"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"val"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|iValues
operator|.
name|add
argument_list|(
operator|new
name|CBSValue
argument_list|(
name|this
argument_list|,
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getId
parameter_list|()
block|{
return|return
name|iClassId
return|;
block|}
specifier|public
name|int
name|getCounter
parameter_list|()
block|{
return|return
name|iCounter
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|String
name|getPref
parameter_list|()
block|{
return|return
name|iPref
return|;
block|}
specifier|public
name|void
name|incCounter
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|iCounter
operator|+=
name|value
expr_stmt|;
if|if
condition|(
name|iConstraint
operator|!=
literal|null
condition|)
name|iConstraint
operator|.
name|incCounter
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
name|values
parameter_list|()
block|{
return|return
name|iValues
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
operator|new
name|Long
argument_list|(
name|iClassId
argument_list|)
operator|)
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|CBSVariable
operator|)
condition|)
return|return
literal|false
return|;
return|return
operator|(
operator|(
name|CBSVariable
operator|)
name|o
operator|)
operator|.
name|getId
argument_list|()
operator|==
name|getId
argument_list|()
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|CBSVariable
operator|)
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|ret
init|=
operator|-
operator|(
operator|new
name|Integer
argument_list|(
name|iCounter
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
operator|new
name|Integer
argument_list|(
operator|(
operator|(
name|CBSVariable
operator|)
name|o
operator|)
operator|.
name|getCounter
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
return|return
name|ret
return|;
return|return
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
comment|//Class_ clazz = getClazz();
comment|//return clazz.getCourseName()+" "+clazz.getItypeDesc()+" "+clazz.getSectionNumber();
return|return
name|iName
return|;
block|}
specifier|public
name|void
name|save
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|element
operator|.
name|addAttribute
argument_list|(
literal|"class"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iClassId
argument_list|)
argument_list|)
expr_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|iName
argument_list|)
expr_stmt|;
if|if
condition|(
name|iPref
operator|!=
literal|null
condition|)
name|element
operator|.
name|addAttribute
argument_list|(
literal|"pref"
argument_list|,
name|iPref
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iValues
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
operator|(
operator|(
name|CBSValue
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|save
argument_list|(
name|element
operator|.
name|addElement
argument_list|(
literal|"val"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|CBSValue
implements|implements
name|Counter
implements|,
name|Comparable
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
name|int
name|iCounter
init|=
literal|0
decl_stmt|;
name|int
name|iDays
decl_stmt|;
name|int
name|iStartSlot
decl_stmt|;
name|List
name|iRoomIds
decl_stmt|;
name|String
name|iInstructorName
init|=
literal|null
decl_stmt|;
name|List
name|iRoomNames
decl_stmt|;
name|List
name|iRoomPrefs
decl_stmt|;
name|int
name|iTimePref
decl_stmt|;
name|CBSVariable
name|iVariable
init|=
literal|null
decl_stmt|;
name|HashSet
name|iConstraints
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|HashSet
name|iAssignments
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|int
name|iLength
decl_stmt|;
name|int
name|iBreakTime
decl_stmt|;
name|Long
name|iDatePatternId
init|=
literal|null
decl_stmt|;
name|String
name|iDatePatternName
init|=
literal|null
decl_stmt|;
name|Long
name|iPatternId
init|=
literal|null
decl_stmt|;
name|CBSValue
parameter_list|(
name|CBSVariable
name|var
parameter_list|,
name|String
name|instructorName
parameter_list|,
name|List
name|roomNames
parameter_list|,
name|int
name|days
parameter_list|,
name|int
name|startSlot
parameter_list|,
name|List
name|roomIds
parameter_list|,
name|int
name|timePref
parameter_list|,
name|List
name|roomPrefs
parameter_list|,
name|int
name|length
parameter_list|,
name|String
name|datePatternName
parameter_list|,
name|Long
name|patternId
parameter_list|,
name|int
name|breakTime
parameter_list|,
name|Long
name|datePatternId
parameter_list|)
block|{
name|iStartSlot
operator|=
name|startSlot
expr_stmt|;
name|iDays
operator|=
name|days
expr_stmt|;
name|iRoomIds
operator|=
name|roomIds
expr_stmt|;
name|iVariable
operator|=
name|var
expr_stmt|;
name|iInstructorName
operator|=
name|instructorName
expr_stmt|;
name|iRoomNames
operator|=
name|roomNames
expr_stmt|;
name|iTimePref
operator|=
name|timePref
expr_stmt|;
name|iRoomPrefs
operator|=
name|roomPrefs
expr_stmt|;
name|iDatePatternName
operator|=
name|datePatternName
expr_stmt|;
name|iLength
operator|=
name|length
expr_stmt|;
name|iBreakTime
operator|=
name|breakTime
expr_stmt|;
name|iPatternId
operator|=
name|patternId
expr_stmt|;
name|iDatePatternId
operator|=
name|datePatternId
expr_stmt|;
block|}
name|CBSValue
parameter_list|(
name|CBSVariable
name|var
parameter_list|,
name|Element
name|element
parameter_list|)
block|{
name|iVariable
operator|=
name|var
expr_stmt|;
name|iDays
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"days"
argument_list|)
argument_list|)
expr_stmt|;
name|iStartSlot
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"slot"
argument_list|)
argument_list|)
expr_stmt|;
name|iRoomIds
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|iRoomNames
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|iRoomPrefs
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"room"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|r
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|iRoomIds
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|attributeValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|iRoomNames
operator|.
name|add
argument_list|(
name|r
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|iRoomPrefs
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|attributeValue
argument_list|(
literal|"pref"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iInstructorName
operator|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"iName"
argument_list|)
expr_stmt|;
name|iTimePref
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"tpref"
argument_list|)
argument_list|)
expr_stmt|;
name|iDatePatternName
operator|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"datePattern"
argument_list|)
expr_stmt|;
name|iLength
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"length"
argument_list|)
argument_list|)
expr_stmt|;
name|iBreakTime
operator|=
operator|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"breakTime"
argument_list|)
operator|==
literal|null
condition|?
literal|0
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"breakTime"
argument_list|)
argument_list|)
operator|)
expr_stmt|;
name|iPatternId
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"pattern"
argument_list|)
argument_list|)
expr_stmt|;
name|iDatePatternId
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"datePatternId"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"cons"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|iConstraints
operator|.
name|add
argument_list|(
operator|new
name|CBSConstraint
argument_list|(
name|this
argument_list|,
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CBSVariable
name|variable
parameter_list|()
block|{
return|return
name|iVariable
return|;
block|}
specifier|public
name|int
name|getDayCode
parameter_list|()
block|{
return|return
name|iDays
return|;
block|}
specifier|public
name|String
name|getDays
parameter_list|()
block|{
name|StringBuffer
name|ret
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|DAY_NAMES_SHORT
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|(
name|Constants
operator|.
name|DAY_CODES
index|[
name|i
index|]
operator|&
name|iDays
operator|)
operator|!=
literal|0
condition|)
name|ret
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|DAY_NAMES_SHORT
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|int
name|getStartSlot
parameter_list|()
block|{
return|return
name|iStartSlot
return|;
block|}
specifier|public
name|String
name|getStartTime
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|toTime
argument_list|(
name|iStartSlot
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
argument_list|)
return|;
block|}
specifier|public
name|String
name|getEndTime
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|toTime
argument_list|(
operator|(
name|iStartSlot
operator|+
name|iLength
operator|)
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|-
name|iBreakTime
argument_list|)
return|;
block|}
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|iLength
return|;
block|}
specifier|public
name|int
name|getBreakTime
parameter_list|()
block|{
return|return
name|iBreakTime
return|;
block|}
specifier|public
name|String
name|getDatePatternName
parameter_list|()
block|{
return|return
name|iDatePatternName
return|;
block|}
specifier|public
name|Long
name|getDatePatternId
parameter_list|()
block|{
return|return
name|iDatePatternId
return|;
block|}
specifier|public
name|List
name|getRoomNames
parameter_list|()
block|{
return|return
name|iRoomNames
return|;
block|}
specifier|public
name|String
name|getInstructorName
parameter_list|()
block|{
return|return
name|iInstructorName
return|;
block|}
specifier|public
name|int
name|getTimePref
parameter_list|()
block|{
return|return
name|iTimePref
return|;
block|}
specifier|public
name|List
name|getRoomPrefs
parameter_list|()
block|{
return|return
name|iRoomPrefs
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
comment|//return getDays()+" "+getStartTime()+" "+getRoom().getRoomLabel();
return|return
name|getDays
argument_list|()
operator|+
literal|" "
operator|+
name|getStartTime
argument_list|()
operator|+
literal|" "
operator|+
name|iRoomNames
operator|+
operator|(
name|iInstructorName
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|iInstructorName
operator|)
return|;
block|}
specifier|public
name|int
name|getCounter
parameter_list|()
block|{
return|return
name|iCounter
return|;
block|}
specifier|public
name|void
name|incCounter
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|iCounter
operator|+=
name|value
expr_stmt|;
if|if
condition|(
name|iVariable
operator|!=
literal|null
condition|)
name|iVariable
operator|.
name|incCounter
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
name|getRoomIds
parameter_list|()
block|{
return|return
name|iRoomIds
return|;
block|}
specifier|public
name|Set
name|constraints
parameter_list|()
block|{
return|return
name|iConstraints
return|;
block|}
specifier|public
name|Set
name|assignments
parameter_list|()
block|{
return|return
name|iAssignments
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|combine
argument_list|(
name|combine
argument_list|(
name|iRoomIds
operator|==
literal|null
condition|?
literal|0
else|:
name|iRoomIds
operator|.
name|hashCode
argument_list|()
argument_list|,
name|combine
argument_list|(
name|iStartSlot
argument_list|,
name|iDays
argument_list|)
argument_list|)
argument_list|,
name|combine
argument_list|(
name|iPatternId
operator|==
literal|null
condition|?
literal|0
else|:
name|iPatternId
operator|.
name|intValue
argument_list|()
argument_list|,
name|iDatePatternId
operator|==
literal|null
condition|?
literal|0
else|:
name|iDatePatternId
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Long
name|getPatternId
parameter_list|()
block|{
return|return
name|iPatternId
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|CBSValue
operator|)
condition|)
return|return
literal|false
return|;
name|CBSValue
name|v
init|=
operator|(
name|CBSValue
operator|)
name|o
decl_stmt|;
return|return
name|v
operator|.
name|getRoomIds
argument_list|()
operator|.
name|equals
argument_list|(
name|getRoomIds
argument_list|()
argument_list|)
operator|&&
name|v
operator|.
name|getDayCode
argument_list|()
operator|==
name|getDayCode
argument_list|()
operator|&&
name|v
operator|.
name|getStartSlot
argument_list|()
operator|==
name|getStartSlot
argument_list|()
operator|&&
name|v
operator|.
name|getPatternId
argument_list|()
operator|.
name|equals
argument_list|(
name|getPatternId
argument_list|()
argument_list|)
operator|&&
name|v
operator|.
name|getDatePatternId
argument_list|()
operator|.
name|equals
argument_list|(
name|getDatePatternId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|CBSValue
operator|)
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|ret
init|=
operator|-
operator|(
operator|new
name|Integer
argument_list|(
name|iCounter
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
operator|new
name|Integer
argument_list|(
operator|(
operator|(
name|CBSValue
operator|)
name|o
operator|)
operator|.
name|getCounter
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
return|return
name|ret
return|;
return|return
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|save
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|element
operator|.
name|addAttribute
argument_list|(
literal|"days"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iDays
argument_list|)
argument_list|)
expr_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"slot"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iStartSlot
argument_list|)
argument_list|)
expr_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"datePattern"
argument_list|,
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"length"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iLength
argument_list|)
argument_list|)
expr_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"breakTime"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iBreakTime
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iPatternId
operator|!=
literal|null
condition|)
name|element
operator|.
name|addAttribute
argument_list|(
literal|"pattern"
argument_list|,
name|iPatternId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iRoomIds
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|r
init|=
name|element
operator|.
name|addElement
argument_list|(
literal|"room"
argument_list|)
decl_stmt|;
name|r
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|iRoomIds
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|iRoomNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|addAttribute
argument_list|(
literal|"pref"
argument_list|,
name|iRoomPrefs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iInstructorName
operator|!=
literal|null
condition|)
name|element
operator|.
name|addAttribute
argument_list|(
literal|"iName"
argument_list|,
name|iInstructorName
argument_list|)
expr_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"tpref"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iTimePref
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iConstraints
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
operator|(
operator|(
name|CBSConstraint
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|save
argument_list|(
name|element
operator|.
name|addElement
argument_list|(
literal|"cons"
argument_list|)
argument_list|)
expr_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"datePatternId"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iDatePatternId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|CBSConstraint
implements|implements
name|Counter
implements|,
name|Comparable
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
name|CBSValue
name|iValue
decl_stmt|;
name|int
name|iCounter
init|=
literal|0
decl_stmt|;
name|long
name|iId
decl_stmt|;
name|String
name|iName
init|=
literal|null
decl_stmt|;
name|int
name|iType
decl_stmt|;
name|HashSet
name|iAssignments
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|HashSet
name|iVariables
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|String
name|iPref
decl_stmt|;
name|CBSConstraint
parameter_list|(
name|int
name|type
parameter_list|,
name|long
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|pref
parameter_list|)
block|{
name|iId
operator|=
name|id
expr_stmt|;
name|iType
operator|=
name|type
expr_stmt|;
name|iName
operator|=
name|name
expr_stmt|;
name|iPref
operator|=
name|pref
expr_stmt|;
block|}
name|CBSConstraint
parameter_list|(
name|CBSValue
name|value
parameter_list|,
name|int
name|type
parameter_list|,
name|long
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|pref
parameter_list|)
block|{
name|iId
operator|=
name|id
expr_stmt|;
name|iType
operator|=
name|type
expr_stmt|;
name|iValue
operator|=
name|value
expr_stmt|;
name|iName
operator|=
name|name
expr_stmt|;
name|iPref
operator|=
name|pref
expr_stmt|;
block|}
name|CBSConstraint
parameter_list|(
name|CBSValue
name|value
parameter_list|,
name|Element
name|element
parameter_list|)
block|{
name|iValue
operator|=
name|value
expr_stmt|;
name|iId
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|iType
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|iName
operator|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|iPref
operator|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"pref"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"nogood"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|iAssignments
operator|.
name|add
argument_list|(
operator|new
name|CBSAssignment
argument_list|(
name|this
argument_list|,
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getId
parameter_list|()
block|{
return|return
name|iId
return|;
block|}
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|iType
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|CBSValue
name|value
parameter_list|()
block|{
return|return
name|iValue
return|;
block|}
specifier|public
name|Set
name|variables
parameter_list|()
block|{
return|return
name|iVariables
return|;
block|}
specifier|public
name|Set
name|assignments
parameter_list|()
block|{
return|return
name|iAssignments
return|;
block|}
specifier|public
name|String
name|getPref
parameter_list|()
block|{
return|return
name|iPref
return|;
block|}
specifier|public
name|int
name|getCounter
parameter_list|()
block|{
return|return
name|iCounter
return|;
block|}
specifier|public
name|void
name|incCounter
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|iCounter
operator|+=
name|value
expr_stmt|;
if|if
condition|(
name|iValue
operator|!=
literal|null
condition|)
name|iValue
operator|.
name|incCounter
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|combine
argument_list|(
operator|(
name|int
operator|)
name|iId
argument_list|,
name|iType
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|CBSConstraint
operator|)
condition|)
return|return
literal|false
return|;
name|CBSConstraint
name|c
init|=
operator|(
name|CBSConstraint
operator|)
name|o
decl_stmt|;
return|return
name|c
operator|.
name|getId
argument_list|()
operator|==
name|getId
argument_list|()
operator|&&
name|c
operator|.
name|getType
argument_list|()
operator|==
name|getType
argument_list|()
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|CBSConstraint
operator|)
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|ret
init|=
operator|-
operator|(
operator|new
name|Integer
argument_list|(
name|iCounter
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
operator|new
name|Integer
argument_list|(
operator|(
operator|(
name|CBSConstraint
operator|)
name|o
operator|)
operator|.
name|getCounter
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
return|return
name|ret
return|;
return|return
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|save
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|element
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iId
argument_list|)
argument_list|)
expr_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iType
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iName
operator|!=
literal|null
condition|)
name|element
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|iName
argument_list|)
expr_stmt|;
if|if
condition|(
name|iPref
operator|!=
literal|null
condition|)
name|element
operator|.
name|addAttribute
argument_list|(
literal|"pref"
argument_list|,
name|iPref
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iAssignments
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
operator|(
operator|(
name|CBSAssignment
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|save
argument_list|(
name|element
operator|.
name|addElement
argument_list|(
literal|"nogood"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|CBSAssignment
implements|implements
name|Counter
implements|,
name|Comparable
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
name|CBSConstraint
name|iConstraint
decl_stmt|;
name|long
name|iClassId
decl_stmt|;
name|int
name|iDays
decl_stmt|;
name|int
name|iStartSlot
decl_stmt|;
name|List
name|iRoomIds
decl_stmt|;
name|int
name|iCounter
init|=
literal|0
decl_stmt|;
name|String
name|iVarName
decl_stmt|,
name|iInstructorName
decl_stmt|;
name|String
name|iPref
decl_stmt|;
name|int
name|iTimePref
decl_stmt|;
name|List
name|iRoomPrefs
decl_stmt|;
name|List
name|iRoomNames
decl_stmt|;
name|int
name|iLength
decl_stmt|;
name|int
name|iBreakTime
decl_stmt|;
name|String
name|iDatePatternName
init|=
literal|null
decl_stmt|;
name|Long
name|iPatternId
decl_stmt|,
name|iDatePatternId
decl_stmt|;
name|CBSAssignment
parameter_list|(
name|CBSConstraint
name|constraint
parameter_list|,
name|long
name|classId
parameter_list|,
name|String
name|varName
parameter_list|,
name|String
name|instructorName
parameter_list|,
name|List
name|roomNames
parameter_list|,
name|int
name|days
parameter_list|,
name|int
name|startSlot
parameter_list|,
name|List
name|roomIds
parameter_list|,
name|String
name|pref
parameter_list|,
name|int
name|timePref
parameter_list|,
name|List
name|roomPrefs
parameter_list|,
name|int
name|length
parameter_list|,
name|String
name|datePatternName
parameter_list|,
name|Long
name|patternId
parameter_list|,
name|int
name|breakTime
parameter_list|,
name|Long
name|datePatternId
parameter_list|)
block|{
name|iClassId
operator|=
name|classId
expr_stmt|;
name|iStartSlot
operator|=
name|startSlot
expr_stmt|;
name|iDays
operator|=
name|days
expr_stmt|;
name|iRoomIds
operator|=
name|roomIds
expr_stmt|;
name|iConstraint
operator|=
name|constraint
expr_stmt|;
name|iVarName
operator|=
name|varName
expr_stmt|;
name|iInstructorName
operator|=
name|instructorName
expr_stmt|;
name|iRoomNames
operator|=
name|roomNames
expr_stmt|;
name|iPref
operator|=
name|pref
expr_stmt|;
name|iTimePref
operator|=
name|timePref
expr_stmt|;
name|iRoomPrefs
operator|=
name|roomPrefs
expr_stmt|;
name|iDatePatternName
operator|=
name|datePatternName
expr_stmt|;
name|iLength
operator|=
name|length
expr_stmt|;
name|iPatternId
operator|=
name|patternId
expr_stmt|;
name|iBreakTime
operator|=
name|breakTime
expr_stmt|;
name|iDatePatternId
operator|=
name|datePatternId
expr_stmt|;
block|}
name|CBSAssignment
parameter_list|(
name|CBSConstraint
name|constraint
parameter_list|,
name|Element
name|element
parameter_list|)
block|{
name|iConstraint
operator|=
name|constraint
expr_stmt|;
name|iClassId
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"class"
argument_list|)
argument_list|)
expr_stmt|;
name|iStartSlot
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"slot"
argument_list|)
argument_list|)
expr_stmt|;
name|iDays
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"days"
argument_list|)
argument_list|)
expr_stmt|;
name|iRoomIds
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|iRoomNames
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|iRoomPrefs
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"room"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|r
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|iRoomIds
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|attributeValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|iRoomNames
operator|.
name|add
argument_list|(
name|r
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|iRoomPrefs
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|attributeValue
argument_list|(
literal|"pref"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iVarName
operator|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"varName"
argument_list|)
expr_stmt|;
name|iInstructorName
operator|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"iName"
argument_list|)
expr_stmt|;
name|iPref
operator|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"pref"
argument_list|)
expr_stmt|;
name|iTimePref
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"tpref"
argument_list|)
argument_list|)
expr_stmt|;
name|iDatePatternName
operator|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"datePattern"
argument_list|)
expr_stmt|;
name|iLength
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"length"
argument_list|)
argument_list|)
expr_stmt|;
name|iBreakTime
operator|=
operator|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"breakTime"
argument_list|)
operator|==
literal|null
condition|?
literal|0
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"breakTime"
argument_list|)
argument_list|)
operator|)
expr_stmt|;
name|iPatternId
operator|=
operator|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"pattern"
argument_list|)
operator|==
literal|null
condition|?
literal|null
else|:
name|Long
operator|.
name|valueOf
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"pattern"
argument_list|)
argument_list|)
operator|)
expr_stmt|;
name|iDatePatternId
operator|=
operator|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"datePatternId"
argument_list|)
operator|==
literal|null
condition|?
literal|null
else|:
name|Long
operator|.
name|valueOf
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"datePatternId"
argument_list|)
argument_list|)
operator|)
expr_stmt|;
name|incCounter
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"cnt"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getId
parameter_list|()
block|{
return|return
name|iClassId
return|;
block|}
specifier|public
name|CBSConstraint
name|getConstraint
parameter_list|()
block|{
return|return
name|iConstraint
return|;
block|}
specifier|public
name|int
name|getDayCode
parameter_list|()
block|{
return|return
name|iDays
return|;
block|}
specifier|public
name|String
name|getDays
parameter_list|()
block|{
name|StringBuffer
name|ret
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|DAY_NAMES_SHORT
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|(
name|Constants
operator|.
name|DAY_CODES
index|[
name|i
index|]
operator|&
name|iDays
operator|)
operator|!=
literal|0
condition|)
name|ret
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|DAY_NAMES_SHORT
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|int
name|getStartSlot
parameter_list|()
block|{
return|return
name|iStartSlot
return|;
block|}
specifier|public
name|String
name|getStartTime
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|toTime
argument_list|(
name|iStartSlot
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
argument_list|)
return|;
block|}
specifier|public
name|String
name|getEndTime
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|toTime
argument_list|(
operator|(
name|iStartSlot
operator|+
name|iLength
operator|)
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|-
name|iBreakTime
argument_list|)
return|;
block|}
specifier|public
name|Long
name|getPatternId
parameter_list|()
block|{
return|return
name|iPatternId
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
comment|//Class_ clazz = getClazz();
comment|//return clazz.getCourseName()+" "+clazz.getItypeDesc()+" "+clazz.getSectionNumber()+" "+getDays()+" "+getStartTime()+" "+getRoom().getRoomLabel();
return|return
name|iVarName
operator|+
literal|" "
operator|+
name|getDays
argument_list|()
operator|+
literal|" "
operator|+
name|getStartTime
argument_list|()
operator|+
literal|" "
operator|+
name|iRoomNames
operator|+
operator|(
name|iInstructorName
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|iInstructorName
operator|)
return|;
block|}
specifier|public
name|String
name|getVariableName
parameter_list|()
block|{
return|return
name|iVarName
return|;
block|}
specifier|public
name|List
name|getRoomNames
parameter_list|()
block|{
return|return
name|iRoomNames
return|;
block|}
specifier|public
name|String
name|getInstructorName
parameter_list|()
block|{
return|return
name|iInstructorName
return|;
block|}
specifier|public
name|List
name|getRoomIds
parameter_list|()
block|{
return|return
name|iRoomIds
return|;
block|}
specifier|public
name|String
name|getPref
parameter_list|()
block|{
return|return
name|iPref
return|;
block|}
specifier|public
name|int
name|getTimePref
parameter_list|()
block|{
return|return
name|iTimePref
return|;
block|}
specifier|public
name|List
name|getRoomPrefs
parameter_list|()
block|{
return|return
name|iRoomPrefs
return|;
block|}
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|iLength
return|;
block|}
specifier|public
name|int
name|getBreakTime
parameter_list|()
block|{
return|return
name|iBreakTime
return|;
block|}
specifier|public
name|String
name|getDatePatternName
parameter_list|()
block|{
return|return
name|iDatePatternName
return|;
block|}
specifier|public
name|Long
name|getDatePatternId
parameter_list|()
block|{
return|return
name|iDatePatternId
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|combine
argument_list|(
name|combine
argument_list|(
operator|(
name|int
operator|)
name|iClassId
argument_list|,
name|combine
argument_list|(
name|iRoomIds
operator|.
name|hashCode
argument_list|()
argument_list|,
name|combine
argument_list|(
name|iStartSlot
argument_list|,
name|iDays
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|combine
argument_list|(
name|iPatternId
operator|==
literal|null
condition|?
literal|0
else|:
name|iPatternId
operator|.
name|intValue
argument_list|()
argument_list|,
name|iDatePatternId
operator|==
literal|null
condition|?
literal|0
else|:
name|iDatePatternId
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|int
name|getCounter
parameter_list|()
block|{
return|return
name|iCounter
return|;
block|}
specifier|public
name|void
name|incCounter
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|iCounter
operator|+=
name|value
expr_stmt|;
if|if
condition|(
name|iConstraint
operator|!=
literal|null
condition|)
name|iConstraint
operator|.
name|incCounter
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|CBSAssignment
operator|)
condition|)
return|return
literal|false
return|;
name|CBSAssignment
name|a
init|=
operator|(
name|CBSAssignment
operator|)
name|o
decl_stmt|;
return|return
name|a
operator|.
name|getId
argument_list|()
operator|==
name|getId
argument_list|()
operator|&&
name|a
operator|.
name|getRoomIds
argument_list|()
operator|.
name|equals
argument_list|(
name|getRoomIds
argument_list|()
argument_list|)
operator|&&
name|a
operator|.
name|getDayCode
argument_list|()
operator|==
name|getDayCode
argument_list|()
operator|&&
name|a
operator|.
name|getStartSlot
argument_list|()
operator|==
name|getStartSlot
argument_list|()
operator|&&
name|a
operator|.
name|getPatternId
argument_list|()
operator|.
name|equals
argument_list|(
name|getPatternId
argument_list|()
argument_list|)
operator|&&
name|a
operator|.
name|getDatePatternId
argument_list|()
operator|.
name|equals
argument_list|(
name|getDatePatternId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|CBSAssignment
operator|)
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|ret
init|=
operator|-
operator|(
operator|new
name|Integer
argument_list|(
name|iCounter
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
operator|new
name|Integer
argument_list|(
operator|(
operator|(
name|CBSAssignment
operator|)
name|o
operator|)
operator|.
name|getCounter
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
return|return
name|ret
return|;
return|return
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|save
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|element
operator|.
name|addAttribute
argument_list|(
literal|"class"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iClassId
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iRoomIds
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|r
init|=
name|element
operator|.
name|addElement
argument_list|(
literal|"room"
argument_list|)
decl_stmt|;
name|r
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|iRoomIds
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|iRoomNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|addAttribute
argument_list|(
literal|"pref"
argument_list|,
name|iRoomPrefs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|element
operator|.
name|addAttribute
argument_list|(
literal|"datePattern"
argument_list|,
name|iDatePatternName
argument_list|)
expr_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"length"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iLength
argument_list|)
argument_list|)
expr_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"breakTime"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iBreakTime
argument_list|)
argument_list|)
expr_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"days"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iDays
argument_list|)
argument_list|)
expr_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"slot"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iStartSlot
argument_list|)
argument_list|)
expr_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"varName"
argument_list|,
name|iVarName
argument_list|)
expr_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"pattern"
argument_list|,
name|iPatternId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"datePatternId"
argument_list|,
name|iDatePatternId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iInstructorName
operator|!=
literal|null
condition|)
name|element
operator|.
name|addAttribute
argument_list|(
literal|"iName"
argument_list|,
name|iInstructorName
argument_list|)
expr_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"cnt"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iCounter
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iPref
operator|!=
literal|null
condition|)
name|element
operator|.
name|addAttribute
argument_list|(
literal|"pref"
argument_list|,
name|iPref
argument_list|)
expr_stmt|;
name|element
operator|.
name|addAttribute
argument_list|(
literal|"tpref"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iTimePref
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|int
name|combine
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|15
condition|;
name|i
operator|++
control|)
name|ret
operator|=
name|ret
operator||
operator|(
operator|(
name|a
operator|&
operator|(
literal|1
operator|<<
name|i
operator|)
operator|)
operator|<<
name|i
operator|)
operator||
operator|(
operator|(
name|b
operator|&
operator|(
literal|1
operator|<<
name|i
operator|)
operator|)
operator|<<
operator|(
name|i
operator|+
literal|1
operator|)
operator|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|//--------- toHtml -------------------------------------------------
specifier|private
specifier|static
name|String
name|IMG_BASE
init|=
literal|"images/"
decl_stmt|;
specifier|private
specifier|static
name|String
name|IMG_EXPAND
init|=
name|IMG_BASE
operator|+
literal|"expand_node_btn.gif"
decl_stmt|;
specifier|private
specifier|static
name|String
name|IMG_COLLAPSE
init|=
name|IMG_BASE
operator|+
literal|"collapse_node_btn.gif"
decl_stmt|;
specifier|private
specifier|static
name|String
name|IMG_LEAF
init|=
name|IMG_BASE
operator|+
literal|"end_node_btn.gif"
decl_stmt|;
specifier|public
specifier|static
name|int
name|TYPE_VARIABLE_BASED
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|TYPE_CONSTRAINT_BASED
init|=
literal|1
decl_stmt|;
specifier|private
name|void
name|menu_item
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|,
name|String
name|page
parameter_list|,
name|boolean
name|isCollapsed
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<div style=\"margin-left:5px;\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<A style=\"border:0;background:0\" id=\"__idMenu"
operator|+
name|id
operator|+
literal|"\" href=\"javascript:toggle('"
operator|+
name|id
operator|+
literal|"')\" name=\""
operator|+
name|name
operator|+
literal|"\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<img id=\"__idMenuImg"
operator|+
name|id
operator|+
literal|"\" border=\"0\" src=\""
operator|+
operator|(
name|isCollapsed
condition|?
name|IMG_EXPAND
else|:
name|IMG_COLLAPSE
operator|)
operator|+
literal|"\" align=\"absmiddle\"></A>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"&nbsp;<A class='noFancyLinks' target=\"__idContentFrame\" "
operator|+
operator|(
name|page
operator|==
literal|null
condition|?
literal|""
else|:
name|page
operator|+
literal|" onmouseover=\"this.style.cursor='hand';this.style.cursor='pointer';\" "
operator|)
operator|+
literal|"title=\""
operator|+
operator|(
name|description
operator|==
literal|null
condition|?
literal|""
else|:
name|description
operator|)
operator|+
literal|"\">"
operator|+
name|name
operator|+
operator|(
name|description
operator|==
literal|null
condition|?
literal|""
else|:
literal|"<font color='gray'>["
operator|+
name|description
operator|+
literal|"]</font>"
operator|)
operator|+
literal|"</A><br>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</div>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<div ID=\"__idMenuDiv"
operator|+
name|id
operator|+
literal|"\" style=\"display:"
operator|+
operator|(
name|isCollapsed
condition|?
literal|"none"
else|:
literal|"block"
operator|)
operator|+
literal|";position:relative;margin-left:18px;\">"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|leaf_item
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|,
name|String
name|page
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<div style=\"margin-left:5px;\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<img border=\"0\" src=\""
operator|+
name|IMG_LEAF
operator|+
literal|"\" align=\"absmiddle\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"&nbsp;<A class='noFancyLinks' target=\"__idContentFrame\" "
operator|+
operator|(
name|page
operator|==
literal|null
condition|?
literal|""
else|:
name|page
operator|+
literal|" onmouseover=\"this.style.cursor='hand';this.style.cursor='pointer';\" "
operator|)
operator|+
literal|"title=\""
operator|+
operator|(
name|description
operator|==
literal|null
condition|?
literal|""
else|:
name|description
operator|)
operator|+
literal|"\">"
operator|+
name|name
operator|+
operator|(
name|description
operator|==
literal|null
condition|?
literal|""
else|:
literal|"<font color='gray'>["
operator|+
name|description
operator|+
literal|"]</font>"
operator|)
operator|+
literal|"</A><br>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</div>"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|end_item
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"</div>"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|unassignedVariableMenuItem
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|String
name|menuId
parameter_list|,
name|CBSVariable
name|variable
parameter_list|,
name|boolean
name|clickable
parameter_list|)
block|{
name|String
name|name
init|=
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|variable
operator|.
name|getPref
argument_list|()
argument_list|)
operator|+
literal|"'>"
operator|+
name|variable
operator|.
name|getName
argument_list|()
operator|+
literal|"</font>"
decl_stmt|;
name|String
name|description
init|=
literal|null
decl_stmt|;
name|String
name|onClick
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|clickable
condition|)
name|onClick
operator|=
literal|"onclick=\"(parent ? parent : window).showGwtDialog('Suggestions', 'suggestions.do?id="
operator|+
name|variable
operator|.
name|getId
argument_list|()
operator|+
literal|"&op=Reset','900','90%');\""
expr_stmt|;
name|menu_item
argument_list|(
name|out
argument_list|,
name|menuId
argument_list|,
name|variable
operator|.
name|getCounter
argument_list|()
operator|+
literal|"&times; "
operator|+
name|name
argument_list|,
name|description
argument_list|,
name|onClick
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|unassignmentMenuItem
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|String
name|menuId
parameter_list|,
name|CBSValue
name|value
parameter_list|,
name|boolean
name|clickable
parameter_list|)
block|{
name|String
name|name
init|=
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|value
operator|.
name|getTimePref
argument_list|()
argument_list|)
operator|+
literal|"'>"
operator|+
name|value
operator|.
name|getDays
argument_list|()
operator|+
literal|" "
operator|+
name|value
operator|.
name|getStartTime
argument_list|()
operator|+
literal|" - "
operator|+
name|value
operator|.
name|getEndTime
argument_list|()
operator|+
literal|" "
operator|+
name|value
operator|.
name|getDatePatternName
argument_list|()
operator|+
literal|"</font> "
decl_stmt|;
name|String
name|roomLink
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|value
operator|.
name|getRoomIds
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|name
operator|+=
operator|(
name|i
operator|>
literal|0
condition|?
literal|", "
else|:
literal|""
operator|)
operator|+
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
operator|(
operator|(
name|Integer
operator|)
name|value
operator|.
name|getRoomPrefs
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
operator|+
literal|"'>"
operator|+
name|value
operator|.
name|getRoomNames
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|"</font>"
expr_stmt|;
name|roomLink
operator|+=
literal|"&room"
operator|+
name|i
operator|+
literal|"="
operator|+
name|value
operator|.
name|getRoomIds
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|.
name|getInstructorName
argument_list|()
operator|!=
literal|null
condition|)
name|name
operator|+=
literal|" "
operator|+
name|value
operator|.
name|getInstructorName
argument_list|()
expr_stmt|;
name|String
name|description
init|=
literal|null
decl_stmt|;
name|String
name|onClick
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|clickable
condition|)
name|onClick
operator|=
literal|"onclick=\"(parent ? parent : window).showGwtDialog('Suggestions', 'suggestions.do?id="
operator|+
name|value
operator|.
name|variable
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
name|roomLink
operator|+
literal|"&days="
operator|+
name|value
operator|.
name|getDayCode
argument_list|()
operator|+
literal|"&pattern="
operator|+
name|value
operator|.
name|getPatternId
argument_list|()
operator|+
literal|"&slot="
operator|+
name|value
operator|.
name|getStartSlot
argument_list|()
operator|+
literal|"&dates="
operator|+
name|value
operator|.
name|getDatePatternId
argument_list|()
operator|+
literal|"&op=Try&reset=1','900','90%');\""
expr_stmt|;
name|menu_item
argument_list|(
name|out
argument_list|,
name|menuId
argument_list|,
name|value
operator|.
name|getCounter
argument_list|()
operator|+
literal|"&times; "
operator|+
name|name
argument_list|,
name|description
argument_list|,
name|onClick
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|constraintMenuItem
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|String
name|menuId
parameter_list|,
name|CBSConstraint
name|constraint
parameter_list|,
name|boolean
name|clickable
parameter_list|)
block|{
name|String
name|name
init|=
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|constraint
operator|.
name|getPref
argument_list|()
argument_list|)
operator|+
literal|"'>"
decl_stmt|;
name|String
name|link
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|constraint
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|sConstraintTypeBalanc
case|:
name|name
operator|+=
literal|"Balancing of department "
operator|+
name|constraint
operator|.
name|getName
argument_list|()
expr_stmt|;
break|break;
case|case
name|sConstraintTypeSpread
case|:
name|name
operator|+=
literal|"Same subpart spread "
operator|+
name|constraint
operator|.
name|getName
argument_list|()
expr_stmt|;
break|break;
case|case
name|sConstraintTypeGroup
case|:
name|name
operator|+=
literal|"Distribution "
operator|+
name|constraint
operator|.
name|getName
argument_list|()
expr_stmt|;
break|break;
case|case
name|sConstraintTypeInstructor
case|:
name|name
operator|+=
literal|"Instructor "
operator|+
name|constraint
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|clickable
condition|)
name|link
operator|=
literal|"timetable.do?filter="
operator|+
name|constraint
operator|.
name|getName
argument_list|()
operator|+
literal|"&mode=i&op=Show"
expr_stmt|;
break|break;
case|case
name|sConstraintTypeRoom
case|:
name|name
operator|+=
literal|"Room "
operator|+
name|constraint
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|clickable
condition|)
name|link
operator|=
literal|"timetable.do?filter="
operator|+
name|constraint
operator|.
name|getName
argument_list|()
operator|+
literal|"&mode=r&op=Show"
expr_stmt|;
break|break;
case|case
name|sConstraintTypeClassLimit
case|:
name|name
operator|+=
literal|"Class limit "
operator|+
name|constraint
operator|.
name|getName
argument_list|()
expr_stmt|;
break|break;
case|case
name|sConstraintTypeMinNrRoomUsed
case|:
case|case
name|sConstraintTypeMinNrGroupsOfTime
case|:
name|name
operator|+=
name|constraint
operator|.
name|getName
argument_list|()
expr_stmt|;
break|break;
default|default :
name|name
operator|+=
operator|(
name|constraint
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|?
literal|"Unknown"
else|:
name|constraint
operator|.
name|getName
argument_list|()
operator|)
expr_stmt|;
block|}
name|name
operator|+=
literal|"</font>"
expr_stmt|;
name|String
name|description
init|=
literal|null
decl_stmt|;
name|String
name|onClick
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|link
operator|!=
literal|null
condition|)
name|onClick
operator|=
literal|"href=\""
operator|+
name|link
operator|+
literal|"\""
expr_stmt|;
name|menu_item
argument_list|(
name|out
argument_list|,
name|menuId
argument_list|,
name|constraint
operator|.
name|getCounter
argument_list|()
operator|+
literal|"&times; "
operator|+
name|name
argument_list|,
name|description
argument_list|,
name|onClick
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assignmentLeafItem
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|CBSAssignment
name|assignment
parameter_list|,
name|boolean
name|clickable
parameter_list|)
block|{
name|String
name|name
init|=
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|assignment
operator|.
name|getPref
argument_list|()
argument_list|)
operator|+
literal|"'>"
operator|+
name|assignment
operator|.
name|getVariableName
argument_list|()
operator|+
literal|"</font>&larr; "
operator|+
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|assignment
operator|.
name|getTimePref
argument_list|()
argument_list|)
operator|+
literal|"'>"
operator|+
name|assignment
operator|.
name|getDays
argument_list|()
operator|+
literal|" "
operator|+
name|assignment
operator|.
name|getStartTime
argument_list|()
operator|+
literal|" - "
operator|+
name|assignment
operator|.
name|getEndTime
argument_list|()
operator|+
literal|" "
operator|+
name|assignment
operator|.
name|getDatePatternName
argument_list|()
operator|+
literal|"</font> "
decl_stmt|;
name|String
name|roomLink
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|assignment
operator|.
name|getRoomIds
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|name
operator|+=
operator|(
name|i
operator|>
literal|0
condition|?
literal|", "
else|:
literal|""
operator|)
operator|+
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
operator|(
operator|(
name|Integer
operator|)
name|assignment
operator|.
name|getRoomPrefs
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
operator|+
literal|"'>"
operator|+
name|assignment
operator|.
name|getRoomNames
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|"</font>"
expr_stmt|;
name|roomLink
operator|+=
literal|"&room"
operator|+
name|i
operator|+
literal|"="
operator|+
name|assignment
operator|.
name|getRoomIds
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|assignment
operator|.
name|getInstructorName
argument_list|()
operator|!=
literal|null
condition|)
name|name
operator|+=
literal|" "
operator|+
name|assignment
operator|.
name|getInstructorName
argument_list|()
expr_stmt|;
name|String
name|onClick
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|clickable
condition|)
name|onClick
operator|=
literal|"onclick=\"(parent ? parent : window).showGwtDialog('Suggestions', 'suggestions.do?id="
operator|+
name|assignment
operator|.
name|getId
argument_list|()
operator|+
name|roomLink
operator|+
literal|"&days="
operator|+
name|assignment
operator|.
name|getDayCode
argument_list|()
operator|+
literal|"&pattern="
operator|+
name|assignment
operator|.
name|getPatternId
argument_list|()
operator|+
literal|"&slot="
operator|+
name|assignment
operator|.
name|getStartSlot
argument_list|()
operator|+
literal|"&dates="
operator|+
name|assignment
operator|.
name|getDatePatternId
argument_list|()
operator|+
literal|"&op=Try&reset=1','900','90%');\""
expr_stmt|;
name|leaf_item
argument_list|(
name|out
argument_list|,
name|assignment
operator|.
name|getCounter
argument_list|()
operator|+
literal|"&times; "
operator|+
name|name
argument_list|,
literal|null
argument_list|,
name|onClick
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|printHtmlHeader
parameter_list|(
name|JspWriter
name|jsp
parameter_list|)
block|{
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
name|jsp
argument_list|)
decl_stmt|;
name|printHtmlHeader
argument_list|(
name|out
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|printHtmlHeader
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|boolean
name|style
parameter_list|)
block|{
if|if
condition|(
name|style
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<style type=\"text/css\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<!--"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"A:link     { color: blue; text-decoration: none; border:0; background:0; }"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"A:visited  { color: blue; text-decoration: none; border:0; background:0; }"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"A:active   { color: blue; text-decoration: none; border:0; background:0; }"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"A:hover    { color: blue; text-decoration: none; border:0; background:0; }"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|".TextBody  { background-color: white; color:black; font-size: 12px; }"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|".WelcomeHead { color: black; margin-top: 0px; margin-left: 0px; font-weight: bold; text-align: right; font-size: 30px; font-family: Comic Sans MS}"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"-->"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</style>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"<script language=\"javascript\" type=\"text/javascript\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"function toggle(item) {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"	obj=document.getElementById(\"__idMenuDiv\"+item);"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"	visible=(obj.style.display!=\"none\");"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"	img=document.getElementById(\"__idMenuImg\" + item);"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"	menu=document.getElementById(\"__idMenu\" + item);"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"	if (visible) {obj.style.display=\"none\";img.src=\""
operator|+
name|IMG_EXPAND
operator|+
literal|"\";}"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"	else {obj.style.display=\"block\";img.src=\""
operator|+
name|IMG_COLLAPSE
operator|+
literal|"\";}"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</script>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|private
name|List
name|filter
parameter_list|(
name|Collection
name|counters
parameter_list|,
name|double
name|limit
parameter_list|)
block|{
name|List
name|cnt
init|=
operator|new
name|ArrayList
argument_list|(
name|counters
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|cnt
argument_list|)
expr_stmt|;
name|int
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|e
init|=
name|cnt
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|total
operator|+=
operator|(
operator|(
name|Counter
operator|)
name|e
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getCounter
argument_list|()
expr_stmt|;
name|int
name|totalLimit
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|limit
operator|*
name|total
argument_list|)
decl_stmt|;
name|int
name|current
init|=
literal|0
decl_stmt|;
name|List
name|ret
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|e
init|=
name|cnt
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Counter
name|c
init|=
operator|(
name|Counter
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|current
operator|+=
name|c
operator|.
name|getCounter
argument_list|()
expr_stmt|;
if|if
condition|(
name|current
operator|>=
name|totalLimit
condition|)
break|break;
block|}
return|return
name|ret
return|;
block|}
comment|/** Print conflict-based statistics in HTML format */
specifier|public
name|void
name|printHtml
parameter_list|(
name|JspWriter
name|jsp
parameter_list|,
name|double
name|limit
parameter_list|,
name|int
name|type
parameter_list|,
name|boolean
name|clickable
parameter_list|)
block|{
name|printHtml
argument_list|(
name|jsp
argument_list|,
literal|null
argument_list|,
operator|new
name|double
index|[]
block|{
name|limit
block|,
name|limit
block|,
name|limit
block|,
name|limit
block|}
argument_list|,
name|type
argument_list|,
name|clickable
argument_list|)
expr_stmt|;
block|}
comment|/** Print conflict-based statistics in HTML format */
specifier|public
name|void
name|printHtml
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|double
name|limit
parameter_list|,
name|int
name|type
parameter_list|,
name|boolean
name|clickable
parameter_list|)
block|{
name|printHtml
argument_list|(
name|out
argument_list|,
literal|null
argument_list|,
operator|new
name|double
index|[]
block|{
name|limit
block|,
name|limit
block|,
name|limit
block|,
name|limit
block|}
argument_list|,
name|type
argument_list|,
name|clickable
argument_list|)
expr_stmt|;
block|}
comment|/** Print conflict-based statistics in HTML format */
specifier|public
name|void
name|printHtml
parameter_list|(
name|JspWriter
name|jsp
parameter_list|,
name|double
index|[]
name|limit
parameter_list|,
name|int
name|type
parameter_list|,
name|boolean
name|clickable
parameter_list|)
block|{
name|printHtml
argument_list|(
name|jsp
argument_list|,
literal|null
argument_list|,
name|limit
argument_list|,
name|type
argument_list|,
name|clickable
argument_list|)
expr_stmt|;
block|}
comment|/** Print conflict-based statistics in HTML format */
specifier|public
name|void
name|printHtml
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|double
index|[]
name|limit
parameter_list|,
name|int
name|type
parameter_list|,
name|boolean
name|clickable
parameter_list|)
block|{
name|printHtml
argument_list|(
name|out
argument_list|,
literal|null
argument_list|,
name|limit
argument_list|,
name|type
argument_list|,
name|clickable
argument_list|)
expr_stmt|;
block|}
comment|/** Print conflict-based statistics in HTML format */
specifier|public
name|void
name|printHtml
parameter_list|(
name|JspWriter
name|jsp
parameter_list|,
name|Long
name|classId
parameter_list|,
name|double
name|limit
parameter_list|,
name|int
name|type
parameter_list|,
name|boolean
name|clickable
parameter_list|)
block|{
name|printHtml
argument_list|(
name|jsp
argument_list|,
name|classId
argument_list|,
operator|new
name|double
index|[]
block|{
name|limit
block|,
name|limit
block|,
name|limit
block|,
name|limit
block|}
argument_list|,
name|type
argument_list|,
name|clickable
argument_list|)
expr_stmt|;
block|}
comment|/** Print conflict-based statistics in HTML format */
specifier|public
name|void
name|printHtml
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|Long
name|classId
parameter_list|,
name|double
name|limit
parameter_list|,
name|int
name|type
parameter_list|,
name|boolean
name|clickable
parameter_list|)
block|{
name|printHtml
argument_list|(
name|out
argument_list|,
name|classId
argument_list|,
operator|new
name|double
index|[]
block|{
name|limit
block|,
name|limit
block|,
name|limit
block|,
name|limit
block|}
argument_list|,
name|type
argument_list|,
name|clickable
argument_list|)
expr_stmt|;
block|}
comment|/** Print conflict-based statistics in HTML format */
specifier|public
name|void
name|printHtml
parameter_list|(
name|JspWriter
name|jsp
parameter_list|,
name|Long
name|classId
parameter_list|,
name|double
index|[]
name|limit
parameter_list|,
name|int
name|type
parameter_list|,
name|boolean
name|clickable
parameter_list|)
block|{
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
name|jsp
argument_list|)
decl_stmt|;
name|printHtml
argument_list|(
name|out
argument_list|,
name|classId
argument_list|,
name|limit
argument_list|,
name|type
argument_list|,
name|clickable
argument_list|)
expr_stmt|;
block|}
comment|/** Print conflict-based statistics in HTML format */
specifier|public
name|void
name|printHtml
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|Long
name|classId
parameter_list|,
name|double
index|[]
name|limit
parameter_list|,
name|int
name|type
parameter_list|,
name|boolean
name|clickable
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|TYPE_VARIABLE_BASED
condition|)
block|{
name|List
name|vars
init|=
name|filter
argument_list|(
name|iVariables
operator|.
name|values
argument_list|()
argument_list|,
name|limit
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|classId
operator|!=
literal|null
condition|)
block|{
name|CBSVariable
name|var
init|=
operator|(
name|CBSVariable
operator|)
name|iVariables
operator|.
name|get
argument_list|(
name|classId
argument_list|)
decl_stmt|;
name|vars
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|var
operator|!=
literal|null
condition|)
name|vars
operator|.
name|add
argument_list|(
name|var
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|e1
init|=
name|vars
operator|.
name|iterator
argument_list|()
init|;
name|e1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CBSVariable
name|variable
init|=
operator|(
name|CBSVariable
operator|)
name|e1
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|m1
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|variable
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|classId
operator|==
literal|null
condition|)
name|unassignedVariableMenuItem
argument_list|(
name|out
argument_list|,
name|m1
argument_list|,
name|variable
argument_list|,
name|clickable
argument_list|)
expr_stmt|;
name|List
name|vals
init|=
name|filter
argument_list|(
name|variable
operator|.
name|values
argument_list|()
argument_list|,
name|limit
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|e2
init|=
name|vals
operator|.
name|iterator
argument_list|()
init|;
name|e2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CBSValue
name|value
init|=
operator|(
name|CBSValue
operator|)
name|e2
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|m2
init|=
name|m1
operator|+
literal|"."
operator|+
operator|(
name|id
operator|++
operator|)
decl_stmt|;
name|unassignmentMenuItem
argument_list|(
name|out
argument_list|,
name|m2
argument_list|,
name|value
argument_list|,
name|clickable
argument_list|)
expr_stmt|;
name|List
name|constraints
init|=
name|filter
argument_list|(
name|value
operator|.
name|constraints
argument_list|()
argument_list|,
name|limit
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|e3
init|=
name|constraints
operator|.
name|iterator
argument_list|()
init|;
name|e3
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CBSConstraint
name|constraint
init|=
operator|(
name|CBSConstraint
operator|)
name|e3
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|m3
init|=
name|m2
operator|+
name|constraint
operator|.
name|getType
argument_list|()
operator|+
literal|"."
operator|+
name|constraint
operator|.
name|getId
argument_list|()
decl_stmt|;
name|constraintMenuItem
argument_list|(
name|out
argument_list|,
name|m3
argument_list|,
name|constraint
argument_list|,
name|clickable
argument_list|)
expr_stmt|;
name|List
name|assignments
init|=
name|filter
argument_list|(
name|constraint
operator|.
name|assignments
argument_list|()
argument_list|,
name|limit
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|e4
init|=
name|assignments
operator|.
name|iterator
argument_list|()
init|;
name|e4
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CBSAssignment
name|assignment
init|=
operator|(
name|CBSAssignment
operator|)
name|e4
operator|.
name|next
argument_list|()
decl_stmt|;
name|assignmentLeafItem
argument_list|(
name|out
argument_list|,
name|assignment
argument_list|,
name|clickable
argument_list|)
expr_stmt|;
block|}
name|end_item
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|end_item
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|end_item
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|type
operator|==
name|TYPE_CONSTRAINT_BASED
condition|)
block|{
name|Hashtable
name|constraints
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e1
init|=
name|iVariables
operator|.
name|elements
argument_list|()
init|;
name|e1
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|CBSVariable
name|variable
init|=
operator|(
name|CBSVariable
operator|)
name|e1
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|classId
operator|!=
literal|null
operator|&&
name|classId
operator|.
name|longValue
argument_list|()
operator|!=
name|variable
operator|.
name|getId
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|Iterator
name|e2
init|=
name|variable
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CBSValue
name|value
init|=
operator|(
name|CBSValue
operator|)
name|e2
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|e3
init|=
name|value
operator|.
name|constraints
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e3
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CBSConstraint
name|constraint
init|=
operator|(
name|CBSConstraint
operator|)
name|e3
operator|.
name|next
argument_list|()
decl_stmt|;
name|CBSConstraint
name|xConstraint
init|=
operator|(
name|CBSConstraint
operator|)
name|constraints
operator|.
name|get
argument_list|(
name|constraint
operator|.
name|getType
argument_list|()
operator|+
literal|"."
operator|+
name|constraint
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|xConstraint
operator|==
literal|null
condition|)
block|{
name|xConstraint
operator|=
operator|new
name|CBSConstraint
argument_list|(
name|constraint
operator|.
name|getType
argument_list|()
argument_list|,
name|constraint
operator|.
name|getId
argument_list|()
argument_list|,
name|constraint
operator|.
name|getName
argument_list|()
argument_list|,
name|constraint
operator|.
name|getPref
argument_list|()
argument_list|)
expr_stmt|;
name|constraints
operator|.
name|put
argument_list|(
name|constraint
operator|.
name|getType
argument_list|()
operator|+
literal|"."
operator|+
name|constraint
operator|.
name|getId
argument_list|()
argument_list|,
name|xConstraint
argument_list|)
expr_stmt|;
block|}
name|CBSVariable
name|xVariable
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|xConstraint
operator|.
name|variables
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CBSVariable
name|v
init|=
operator|(
name|CBSVariable
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|getId
argument_list|()
operator|==
name|variable
operator|.
name|getId
argument_list|()
condition|)
block|{
name|xVariable
operator|=
name|v
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|xVariable
operator|==
literal|null
condition|)
block|{
name|xVariable
operator|=
operator|new
name|CBSVariable
argument_list|(
name|xConstraint
argument_list|,
name|variable
operator|.
name|getId
argument_list|()
argument_list|,
name|variable
operator|.
name|getName
argument_list|()
argument_list|,
name|variable
operator|.
name|getPref
argument_list|()
argument_list|)
expr_stmt|;
name|xConstraint
operator|.
name|variables
argument_list|()
operator|.
name|add
argument_list|(
name|xVariable
argument_list|)
expr_stmt|;
block|}
name|CBSValue
name|xValue
init|=
operator|new
name|CBSValue
argument_list|(
name|xVariable
argument_list|,
name|value
operator|.
name|getInstructorName
argument_list|()
argument_list|,
name|value
operator|.
name|getRoomNames
argument_list|()
argument_list|,
name|value
operator|.
name|getDayCode
argument_list|()
argument_list|,
name|value
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|value
operator|.
name|getRoomIds
argument_list|()
argument_list|,
name|value
operator|.
name|getTimePref
argument_list|()
argument_list|,
name|value
operator|.
name|getRoomPrefs
argument_list|()
argument_list|,
name|value
operator|.
name|getLength
argument_list|()
argument_list|,
name|value
operator|.
name|getDatePatternName
argument_list|()
argument_list|,
name|value
operator|.
name|getPatternId
argument_list|()
argument_list|,
name|value
operator|.
name|getBreakTime
argument_list|()
argument_list|,
name|value
operator|.
name|getDatePatternId
argument_list|()
argument_list|)
decl_stmt|;
name|xVariable
operator|.
name|values
argument_list|()
operator|.
name|add
argument_list|(
name|xValue
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|e4
init|=
name|constraint
operator|.
name|assignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e4
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CBSAssignment
name|assignment
init|=
operator|(
name|CBSAssignment
operator|)
name|e4
operator|.
name|next
argument_list|()
decl_stmt|;
name|xValue
operator|.
name|assignments
argument_list|()
operator|.
name|add
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
name|xValue
operator|.
name|incCounter
argument_list|(
name|assignment
operator|.
name|getCounter
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|List
name|consts
init|=
name|filter
argument_list|(
name|constraints
operator|.
name|values
argument_list|()
argument_list|,
name|limit
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|e1
init|=
name|consts
operator|.
name|iterator
argument_list|()
init|;
name|e1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CBSConstraint
name|constraint
init|=
operator|(
name|CBSConstraint
operator|)
name|e1
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|m1
init|=
name|constraint
operator|.
name|getType
argument_list|()
operator|+
literal|"."
operator|+
name|constraint
operator|.
name|getId
argument_list|()
decl_stmt|;
name|constraintMenuItem
argument_list|(
name|out
argument_list|,
name|m1
argument_list|,
name|constraint
argument_list|,
name|clickable
argument_list|)
expr_stmt|;
name|List
name|variables
init|=
name|filter
argument_list|(
name|constraint
operator|.
name|variables
argument_list|()
argument_list|,
name|limit
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|variables
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|e2
init|=
name|variables
operator|.
name|iterator
argument_list|()
init|;
name|e2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CBSVariable
name|variable
init|=
operator|(
name|CBSVariable
operator|)
name|e2
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|m2
init|=
name|m1
operator|+
literal|"."
operator|+
name|variable
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|classId
operator|==
literal|null
condition|)
name|unassignedVariableMenuItem
argument_list|(
name|out
argument_list|,
name|m2
argument_list|,
name|variable
argument_list|,
name|clickable
argument_list|)
expr_stmt|;
name|List
name|vals
init|=
name|filter
argument_list|(
name|variable
operator|.
name|values
argument_list|()
argument_list|,
name|limit
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|e3
init|=
name|vals
operator|.
name|iterator
argument_list|()
init|;
name|e3
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CBSValue
name|value
init|=
operator|(
name|CBSValue
operator|)
name|e3
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|m3
init|=
name|m2
operator|+
literal|"."
operator|+
operator|(
name|id
operator|++
operator|)
decl_stmt|;
name|unassignmentMenuItem
argument_list|(
name|out
argument_list|,
name|m3
argument_list|,
name|value
argument_list|,
name|clickable
argument_list|)
expr_stmt|;
name|List
name|assignments
init|=
name|filter
argument_list|(
name|value
operator|.
name|assignments
argument_list|()
argument_list|,
name|limit
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|e4
init|=
name|assignments
operator|.
name|iterator
argument_list|()
init|;
name|e4
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CBSAssignment
name|assignment
init|=
operator|(
name|CBSAssignment
operator|)
name|e4
operator|.
name|next
argument_list|()
decl_stmt|;
name|assignmentLeafItem
argument_list|(
name|out
argument_list|,
name|assignment
argument_list|,
name|clickable
argument_list|)
expr_stmt|;
block|}
name|end_item
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|classId
operator|==
literal|null
condition|)
name|end_item
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|end_item
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|saveToFile
parameter_list|()
block|{
return|return
name|ApplicationProperty
operator|.
name|ConflictStatisticsSaveToFile
operator|.
name|isTrue
argument_list|()
return|;
block|}
block|}
end_class

end_unit

