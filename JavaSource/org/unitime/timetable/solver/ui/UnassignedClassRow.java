begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|UnassignedClassRow
implements|implements
name|Serializable
implements|,
name|Comparable
argument_list|<
name|UnassignedClassRow
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Long
name|iId
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iName
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|iInstructors
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iNrStudents
init|=
literal|0
decl_stmt|;
specifier|private
name|String
name|iInitial
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iOrd
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|transient
name|Class_
name|iClazz
init|=
literal|null
decl_stmt|;
specifier|public
name|UnassignedClassRow
parameter_list|(
name|Long
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|instructors
parameter_list|,
name|int
name|nrStudents
parameter_list|,
name|String
name|initial
parameter_list|,
name|int
name|ord
parameter_list|)
block|{
name|iId
operator|=
name|id
expr_stmt|;
name|iName
operator|=
name|name
expr_stmt|;
name|iNrStudents
operator|=
name|nrStudents
expr_stmt|;
name|iInstructors
operator|=
name|instructors
expr_stmt|;
name|iInitial
operator|=
name|initial
expr_stmt|;
name|iOrd
operator|=
name|ord
expr_stmt|;
block|}
specifier|public
name|UnassignedClassRow
parameter_list|(
name|Long
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|instructors
parameter_list|,
name|int
name|nrStudents
parameter_list|,
name|String
name|initial
parameter_list|,
name|Class_
name|clazz
parameter_list|)
block|{
name|iId
operator|=
name|id
expr_stmt|;
name|iName
operator|=
name|name
expr_stmt|;
name|iNrStudents
operator|=
name|nrStudents
expr_stmt|;
name|iInstructors
operator|=
name|instructors
expr_stmt|;
name|iInitial
operator|=
name|initial
expr_stmt|;
name|iClazz
operator|=
name|clazz
expr_stmt|;
block|}
specifier|public
name|Long
name|getId
parameter_list|()
block|{
return|return
name|iId
return|;
block|}
specifier|public
name|String
name|getOnClick
parameter_list|()
block|{
return|return
name|iId
operator|==
literal|null
condition|?
literal|null
else|:
literal|"showGwtDialog('Suggestions', 'suggestions.do?id="
operator|+
name|iId
operator|+
literal|"&op=Reset','900','90%');"
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|String
name|getInstructor
parameter_list|()
block|{
name|String
name|instructors
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|iInstructors
operator|!=
literal|null
condition|)
for|for
control|(
name|String
name|instructor
range|:
name|iInstructors
control|)
name|instructors
operator|+=
operator|(
name|instructors
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|", "
operator|)
operator|+
name|instructor
expr_stmt|;
return|return
name|instructors
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getInstructors
parameter_list|()
block|{
return|return
name|iInstructors
return|;
block|}
specifier|public
name|int
name|getNrStudents
parameter_list|()
block|{
return|return
name|iNrStudents
return|;
block|}
specifier|public
name|String
name|getInitial
parameter_list|()
block|{
return|return
name|iInitial
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|UnassignedClassRow
name|ucr
parameter_list|)
block|{
if|if
condition|(
name|iOrd
operator|>=
literal|0
operator|&&
name|ucr
operator|.
name|iOrd
operator|>=
literal|0
condition|)
block|{
name|int
name|cmp
init|=
name|Double
operator|.
name|compare
argument_list|(
name|iOrd
argument_list|,
name|ucr
operator|.
name|iOrd
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
if|else if
condition|(
name|iClazz
operator|!=
literal|null
operator|&&
name|ucr
operator|.
name|iClazz
operator|!=
literal|null
condition|)
block|{
name|int
name|cmp
init|=
operator|(
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
operator|)
operator|.
name|compare
argument_list|(
name|iClazz
argument_list|,
name|ucr
operator|.
name|iClazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
return|return
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|ucr
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

