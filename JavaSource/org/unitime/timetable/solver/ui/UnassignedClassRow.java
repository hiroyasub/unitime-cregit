begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|UnassignedClassRow
implements|implements
name|Serializable
implements|,
name|Comparable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|String
name|iOnClick
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iName
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iInstructor
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iNrStudents
init|=
literal|0
decl_stmt|;
specifier|private
name|String
name|iInitial
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iOrd
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|transient
name|Class_
name|iClazz
init|=
literal|null
decl_stmt|;
specifier|public
name|UnassignedClassRow
parameter_list|(
name|String
name|onClick
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|instructor
parameter_list|,
name|int
name|nrStudents
parameter_list|,
name|String
name|initial
parameter_list|,
name|int
name|ord
parameter_list|)
block|{
name|iOnClick
operator|=
name|onClick
expr_stmt|;
name|iName
operator|=
name|name
expr_stmt|;
name|iNrStudents
operator|=
name|nrStudents
expr_stmt|;
name|iInstructor
operator|=
name|instructor
expr_stmt|;
name|iInitial
operator|=
name|initial
expr_stmt|;
name|iOrd
operator|=
name|ord
expr_stmt|;
block|}
specifier|public
name|UnassignedClassRow
parameter_list|(
name|String
name|onClick
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|instructor
parameter_list|,
name|int
name|nrStudents
parameter_list|,
name|String
name|initial
parameter_list|,
name|Class_
name|clazz
parameter_list|)
block|{
name|iOnClick
operator|=
name|onClick
expr_stmt|;
name|iName
operator|=
name|name
expr_stmt|;
name|iNrStudents
operator|=
name|nrStudents
expr_stmt|;
name|iInstructor
operator|=
name|instructor
expr_stmt|;
name|iInitial
operator|=
name|initial
expr_stmt|;
name|iClazz
operator|=
name|clazz
expr_stmt|;
block|}
specifier|public
name|String
name|getOnClick
parameter_list|()
block|{
return|return
name|iOnClick
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|String
name|getInstructor
parameter_list|()
block|{
return|return
name|iInstructor
return|;
block|}
specifier|public
name|int
name|getNrStudents
parameter_list|()
block|{
return|return
name|iNrStudents
return|;
block|}
specifier|public
name|String
name|getInitial
parameter_list|()
block|{
return|return
name|iInitial
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|UnassignedClassRow
operator|)
condition|)
return|return
operator|-
literal|1
return|;
name|UnassignedClassRow
name|ucr
init|=
operator|(
name|UnassignedClassRow
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|iOrd
operator|>=
literal|0
operator|&&
name|ucr
operator|.
name|iOrd
operator|>=
literal|0
condition|)
block|{
name|int
name|cmp
init|=
name|Double
operator|.
name|compare
argument_list|(
name|iOrd
argument_list|,
name|ucr
operator|.
name|iOrd
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
if|else if
condition|(
name|iClazz
operator|!=
literal|null
operator|&&
name|ucr
operator|.
name|iClazz
operator|!=
literal|null
condition|)
block|{
name|int
name|cmp
init|=
operator|(
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
operator|)
operator|.
name|compare
argument_list|(
name|iClazz
argument_list|,
name|ucr
operator|.
name|iClazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
return|return
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
operator|(
operator|(
name|UnassignedClassRow
operator|)
name|o
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

