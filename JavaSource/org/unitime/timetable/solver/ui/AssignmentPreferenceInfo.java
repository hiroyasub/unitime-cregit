begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|DepartmentSpreadConstraint
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|GroupConstraint
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|InstructorConstraint
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|BrokenTimePatterns
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|TooBigRooms
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|UselessHalfHours
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Lecture
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|preference
operator|.
name|PreferenceCombination
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solver
operator|.
name|Solver
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|AssignmentPreferenceInfo
implements|implements
name|TimetableInfo
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|4L
decl_stmt|;
specifier|public
specifier|static
name|int
name|sVersion
init|=
literal|4
decl_stmt|;
comment|// to be able to do some changes in the future
specifier|private
name|double
name|iNormalizedTimePreference
init|=
literal|0.0
decl_stmt|;
specifier|private
name|double
name|iBestNormalizedTimePreference
init|=
literal|0.0
decl_stmt|;
specifier|private
name|int
name|iTimePreference
init|=
literal|0
decl_stmt|;
specifier|private
name|Hashtable
name|iRoomPreference
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|private
name|int
name|iBestRoomPreference
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iNrStudentConflicts
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iNrHardStudentConflicts
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iNrDistanceStudentConflicts
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iNrCommitedStudentConflicts
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iNrTimeLocations
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iNrRoomLocations
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iNrSameRoomPlacementsNoConf
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iNrSameTimePlacementsNoConf
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iNrPlacementsNoConf
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iBtbInstructorPreference
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|iIsInitial
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|iInitialAssignment
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iHasInitialSameTime
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iHasInitialSameRoom
init|=
literal|false
decl_stmt|;
specifier|private
name|double
name|iPerturbationPenalty
init|=
literal|0.0
decl_stmt|;
specifier|private
name|int
name|iTooBigRoomPreference
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|iMinRoomSize
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iUselessHalfHours
init|=
literal|0
decl_stmt|;
specifier|private
name|double
name|iDeptBalancPenalty
init|=
literal|0
decl_stmt|;
specifier|private
name|double
name|iSpreadPenalty
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iMaxDeptBalancPenalty
init|=
literal|0
decl_stmt|;
specifier|private
name|double
name|iMaxSpreadPenalty
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iGroupConstraintPref
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iDatePatternPref
init|=
literal|0
decl_stmt|;
specifier|public
name|AssignmentPreferenceInfo
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|AssignmentPreferenceInfo
parameter_list|(
name|Solver
name|solver
parameter_list|,
name|Placement
name|placement
parameter_list|)
block|{
name|this
argument_list|(
name|solver
argument_list|,
name|placement
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AssignmentPreferenceInfo
parameter_list|(
name|Solver
name|solver
parameter_list|,
name|Placement
name|placement
parameter_list|,
name|boolean
name|includeConflictInfo
parameter_list|)
block|{
name|this
argument_list|(
name|solver
argument_list|,
name|placement
argument_list|,
name|includeConflictInfo
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AssignmentPreferenceInfo
parameter_list|(
name|Solver
name|solver
parameter_list|,
name|Placement
name|placement
parameter_list|,
name|boolean
name|includeConflictInfo
parameter_list|,
name|boolean
name|ofTheSameProblem
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|Lecture
name|lecture
init|=
operator|(
name|Lecture
operator|)
name|placement
operator|.
name|variable
argument_list|()
decl_stmt|;
name|setBestNormalizedTimePreference
argument_list|(
name|lecture
operator|.
name|getBestTimePreference
argument_list|()
argument_list|)
expr_stmt|;
name|setNormalizedTimePreference
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getNormalizedPreference
argument_list|()
argument_list|)
expr_stmt|;
name|setBestRoomPreference
argument_list|(
name|lecture
operator|.
name|getBestRoomPreference
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ofTheSameProblem
condition|)
block|{
name|setNrStudentConflicts
argument_list|(
name|lecture
operator|.
name|countStudentConflictsOfTheSameProblem
argument_list|(
name|placement
argument_list|)
argument_list|)
expr_stmt|;
name|setNrHardStudentConflicts
argument_list|(
name|lecture
operator|.
name|countHardStudentConflictsOfTheSameProblem
argument_list|(
name|placement
argument_list|)
argument_list|)
expr_stmt|;
name|setNrCommitedStudentConflicts
argument_list|(
name|lecture
operator|.
name|countCommittedStudentConflictsOfTheSameProblem
argument_list|(
name|placement
argument_list|)
argument_list|)
expr_stmt|;
name|setNrDistanceStudentConflicts
argument_list|(
name|lecture
operator|.
name|countDistanceStudentConflictsOfTheSameProblem
argument_list|(
name|placement
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setNrStudentConflicts
argument_list|(
name|lecture
operator|.
name|countStudentConflicts
argument_list|(
name|placement
argument_list|)
operator|+
name|lecture
operator|.
name|getCommitedConflicts
argument_list|(
name|placement
argument_list|)
argument_list|)
expr_stmt|;
name|setNrHardStudentConflicts
argument_list|(
name|lecture
operator|.
name|countHardStudentConflicts
argument_list|(
name|placement
argument_list|)
argument_list|)
expr_stmt|;
name|setNrCommitedStudentConflicts
argument_list|(
name|lecture
operator|.
name|getCommitedConflicts
argument_list|(
name|placement
argument_list|)
operator|+
name|lecture
operator|.
name|countCommittedStudentConflicts
argument_list|(
name|placement
argument_list|)
argument_list|)
expr_stmt|;
name|setNrDistanceStudentConflicts
argument_list|(
name|lecture
operator|.
name|countDistanceStudentConflicts
argument_list|(
name|placement
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setNrRoomLocations
argument_list|(
name|lecture
operator|.
name|nrRoomLocations
argument_list|()
argument_list|)
expr_stmt|;
name|setNrTimeLocations
argument_list|(
name|lecture
operator|.
name|nrTimeLocations
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lecture
operator|.
name|nrTimeLocations
argument_list|()
operator|==
literal|1
operator|&&
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getPreference
argument_list|()
operator|==
literal|0
condition|)
name|setTimePreference
argument_list|(
name|PreferenceLevel
operator|.
name|sIntLevelRequired
argument_list|)
expr_stmt|;
else|else
name|setTimePreference
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|placement
operator|.
name|isMultiRoom
argument_list|()
condition|)
block|{
for|for
control|(
name|RoomLocation
name|r
range|:
name|placement
operator|.
name|getRoomLocations
argument_list|()
control|)
block|{
if|if
condition|(
name|lecture
operator|.
name|nrRoomLocations
argument_list|()
operator|==
name|lecture
operator|.
name|getNrRooms
argument_list|()
operator|&&
name|r
operator|.
name|getPreference
argument_list|()
operator|==
literal|0
condition|)
name|setRoomPreference
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|sIntLevelRequired
argument_list|)
expr_stmt|;
else|else
name|setRoomPreference
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|,
name|r
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|lecture
operator|.
name|nrRoomLocations
argument_list|()
operator|==
literal|1
operator|&&
name|placement
operator|.
name|getRoomLocation
argument_list|()
operator|.
name|getPreference
argument_list|()
operator|==
literal|0
condition|)
name|setRoomPreference
argument_list|(
name|placement
operator|.
name|getRoomLocation
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|sIntLevelRequired
argument_list|)
expr_stmt|;
else|else
name|setRoomPreference
argument_list|(
name|placement
operator|.
name|getRoomLocation
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|placement
operator|.
name|getRoomLocation
argument_list|()
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeConflictInfo
condition|)
block|{
name|int
name|nrSameRoomPlacementsNoConf
init|=
literal|0
decl_stmt|;
name|int
name|nrSameTimePlacementsNoConf
init|=
literal|0
decl_stmt|;
name|int
name|nrPlacementsNoConf
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Placement
name|p
range|:
name|lecture
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|.
name|isHard
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
name|placement
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|lecture
operator|.
name|getModel
argument_list|()
operator|.
name|conflictValues
argument_list|(
name|p
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|equals
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
condition|)
block|{
name|nrSameTimePlacementsNoConf
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|.
name|sameRooms
argument_list|(
name|placement
argument_list|)
condition|)
name|nrSameRoomPlacementsNoConf
operator|++
expr_stmt|;
name|nrPlacementsNoConf
operator|++
expr_stmt|;
block|}
name|setNrPlacementsNoConf
argument_list|(
name|nrPlacementsNoConf
argument_list|)
expr_stmt|;
name|setNrSameRoomPlacementsNoConf
argument_list|(
name|nrSameRoomPlacementsNoConf
argument_list|)
expr_stmt|;
name|setNrSameTimePlacementsNoConf
argument_list|(
name|nrSameTimePlacementsNoConf
argument_list|)
expr_stmt|;
block|}
name|int
name|btbInstructorPref
init|=
literal|0
decl_stmt|;
for|for
control|(
name|InstructorConstraint
name|ic
range|:
name|lecture
operator|.
name|getInstructorConstraints
argument_list|()
control|)
block|{
name|btbInstructorPref
operator|+=
name|ic
operator|.
name|getPreferenceCombination
argument_list|(
name|placement
argument_list|)
expr_stmt|;
block|}
name|setBtbInstructorPreference
argument_list|(
name|btbInstructorPref
argument_list|)
expr_stmt|;
if|if
condition|(
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setInitialAssignment
argument_list|(
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|setIsInitial
argument_list|(
name|placement
operator|.
name|equals
argument_list|(
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setHasInitialSameTime
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Placement
operator|)
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
operator|)
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setHasInitialSameRoom
argument_list|(
name|placement
operator|.
name|sameRooms
argument_list|(
operator|(
name|Placement
operator|)
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iTooBigRoomPreference
operator|=
name|TooBigRooms
operator|.
name|getTooBigRoomPreference
argument_list|(
name|placement
argument_list|)
expr_stmt|;
name|iMinRoomSize
operator|=
name|lecture
operator|.
name|minRoomSize
argument_list|()
expr_stmt|;
name|iUselessHalfHours
operator|=
name|placement
operator|.
name|variable
argument_list|()
operator|.
name|getModel
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|placement
operator|.
name|variable
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|getCriterion
argument_list|(
name|UselessHalfHours
operator|.
name|class
argument_list|)
operator|.
name|getValue
argument_list|(
name|placement
argument_list|,
literal|null
argument_list|)
operator|+
name|placement
operator|.
name|variable
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|getCriterion
argument_list|(
name|BrokenTimePatterns
operator|.
name|class
argument_list|)
operator|.
name|getValue
argument_list|(
name|placement
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|DepartmentSpreadConstraint
name|deptConstraint
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Constraint
name|c
range|:
name|lecture
operator|.
name|constraints
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|instanceof
name|DepartmentSpreadConstraint
condition|)
name|deptConstraint
operator|=
operator|(
name|DepartmentSpreadConstraint
operator|)
name|c
expr_stmt|;
if|if
condition|(
name|c
operator|instanceof
name|GroupConstraint
condition|)
name|iGroupConstraintPref
operator|+=
operator|(
operator|(
name|GroupConstraint
operator|)
name|c
operator|)
operator|.
name|getCurrentPreference
argument_list|(
name|placement
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deptConstraint
operator|!=
literal|null
condition|)
block|{
name|iDeptBalancPenalty
operator|=
operator|(
operator|(
name|double
operator|)
name|deptConstraint
operator|.
name|getPenalty
argument_list|(
name|placement
argument_list|)
operator|)
operator|/
literal|12.0
expr_stmt|;
name|iMaxDeptBalancPenalty
operator|=
name|deptConstraint
operator|.
name|getMaxPenalty
argument_list|(
name|placement
argument_list|)
expr_stmt|;
block|}
name|iSpreadPenalty
operator|=
operator|(
operator|(
name|double
operator|)
name|placement
operator|.
name|getSpreadPenalty
argument_list|()
operator|)
operator|/
literal|12.0
expr_stmt|;
name|iMaxSpreadPenalty
operator|=
operator|(
operator|(
name|double
operator|)
name|placement
operator|.
name|getMaxSpreadPenalty
argument_list|()
operator|)
operator|/
literal|12.0
expr_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
operator|&&
name|solver
operator|.
name|getPerturbationsCounter
argument_list|()
operator|!=
literal|null
condition|)
name|setPerturbationPenalty
argument_list|(
name|solver
operator|.
name|getPerturbationsCounter
argument_list|()
operator|.
name|getPerturbationPenalty
argument_list|(
name|lecture
operator|.
name|getModel
argument_list|()
argument_list|,
name|placement
argument_list|,
operator|new
name|Vector
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setDatePatternPref
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDatePatternPreference
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|double
name|getNormalizedTimePreference
parameter_list|()
block|{
return|return
name|iNormalizedTimePreference
return|;
block|}
specifier|public
name|void
name|setNormalizedTimePreference
parameter_list|(
name|double
name|normalizedTimePreference
parameter_list|)
block|{
name|iNormalizedTimePreference
operator|=
name|normalizedTimePreference
expr_stmt|;
block|}
specifier|public
name|double
name|getBestNormalizedTimePreference
parameter_list|()
block|{
return|return
name|iBestNormalizedTimePreference
return|;
block|}
specifier|public
name|void
name|setBestNormalizedTimePreference
parameter_list|(
name|double
name|bestNormalizedTimePreference
parameter_list|)
block|{
name|iBestNormalizedTimePreference
operator|=
name|bestNormalizedTimePreference
expr_stmt|;
block|}
specifier|public
name|int
name|getTimePreference
parameter_list|()
block|{
return|return
name|iTimePreference
return|;
block|}
specifier|public
name|void
name|setTimePreference
parameter_list|(
name|int
name|timePreference
parameter_list|)
block|{
name|iTimePreference
operator|=
name|timePreference
expr_stmt|;
block|}
specifier|public
name|int
name|getRoomPreference
parameter_list|(
name|Long
name|roomId
parameter_list|)
block|{
name|Integer
name|pref
init|=
operator|(
name|Integer
operator|)
name|iRoomPreference
operator|.
name|get
argument_list|(
name|roomId
argument_list|)
decl_stmt|;
return|return
operator|(
name|pref
operator|==
literal|null
condition|?
literal|0
else|:
name|pref
operator|.
name|intValue
argument_list|()
operator|)
return|;
block|}
specifier|public
name|int
name|sumRoomPreference
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iRoomPreference
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|ret
operator|+=
operator|(
operator|(
name|Integer
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|combineRoomPreference
parameter_list|()
block|{
name|PreferenceCombination
name|p
init|=
name|PreferenceCombination
operator|.
name|getDefault
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iRoomPreference
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|p
operator|.
name|addPreferenceInt
argument_list|(
operator|(
operator|(
name|Integer
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|p
operator|.
name|getPreferenceInt
argument_list|()
return|;
block|}
specifier|public
name|void
name|setRoomPreference
parameter_list|(
name|Long
name|roomId
parameter_list|,
name|int
name|roomPreference
parameter_list|)
block|{
name|iRoomPreference
operator|.
name|put
argument_list|(
name|roomId
argument_list|,
operator|new
name|Integer
argument_list|(
name|roomPreference
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getBestRoomPreference
parameter_list|()
block|{
return|return
name|iBestRoomPreference
return|;
block|}
specifier|public
name|void
name|setBestRoomPreference
parameter_list|(
name|int
name|bestRoomPreference
parameter_list|)
block|{
name|iBestRoomPreference
operator|=
name|bestRoomPreference
expr_stmt|;
block|}
specifier|public
name|int
name|getNrStudentConflicts
parameter_list|()
block|{
return|return
name|iNrStudentConflicts
return|;
block|}
specifier|public
name|void
name|setNrStudentConflicts
parameter_list|(
name|int
name|nrStudentConflicts
parameter_list|)
block|{
name|iNrStudentConflicts
operator|=
name|nrStudentConflicts
expr_stmt|;
block|}
specifier|public
name|int
name|getNrHardStudentConflicts
parameter_list|()
block|{
return|return
name|iNrHardStudentConflicts
return|;
block|}
specifier|public
name|void
name|setNrHardStudentConflicts
parameter_list|(
name|int
name|nrHardStudentConflicts
parameter_list|)
block|{
name|iNrHardStudentConflicts
operator|=
name|nrHardStudentConflicts
expr_stmt|;
block|}
specifier|public
name|int
name|getNrDistanceStudentConflicts
parameter_list|()
block|{
return|return
name|iNrDistanceStudentConflicts
return|;
block|}
specifier|public
name|void
name|setNrDistanceStudentConflicts
parameter_list|(
name|int
name|nrDistanceStudentConflicts
parameter_list|)
block|{
name|iNrDistanceStudentConflicts
operator|=
name|nrDistanceStudentConflicts
expr_stmt|;
block|}
specifier|public
name|int
name|getNrCommitedStudentConflicts
parameter_list|()
block|{
return|return
name|iNrCommitedStudentConflicts
return|;
block|}
specifier|public
name|void
name|setNrCommitedStudentConflicts
parameter_list|(
name|int
name|nrCommitedStudentConflicts
parameter_list|)
block|{
name|iNrCommitedStudentConflicts
operator|=
name|nrCommitedStudentConflicts
expr_stmt|;
block|}
specifier|public
name|int
name|getNrTimeLocations
parameter_list|()
block|{
return|return
name|iNrTimeLocations
return|;
block|}
specifier|public
name|void
name|setNrTimeLocations
parameter_list|(
name|int
name|nrTimeLocations
parameter_list|)
block|{
name|iNrTimeLocations
operator|=
name|nrTimeLocations
expr_stmt|;
block|}
specifier|public
name|int
name|getNrRoomLocations
parameter_list|()
block|{
return|return
name|iNrRoomLocations
return|;
block|}
specifier|public
name|void
name|setNrRoomLocations
parameter_list|(
name|int
name|nrRoomLocations
parameter_list|)
block|{
name|iNrRoomLocations
operator|=
name|nrRoomLocations
expr_stmt|;
block|}
specifier|public
name|int
name|getNrSameRoomPlacementsNoConf
parameter_list|()
block|{
return|return
name|iNrSameRoomPlacementsNoConf
return|;
block|}
specifier|public
name|void
name|setNrSameRoomPlacementsNoConf
parameter_list|(
name|int
name|nrSameRoomPlacementsNoConf
parameter_list|)
block|{
name|iNrSameRoomPlacementsNoConf
operator|=
name|nrSameRoomPlacementsNoConf
expr_stmt|;
block|}
specifier|public
name|int
name|getNrSameTimePlacementsNoConf
parameter_list|()
block|{
return|return
name|iNrSameTimePlacementsNoConf
return|;
block|}
specifier|public
name|void
name|setNrSameTimePlacementsNoConf
parameter_list|(
name|int
name|nrSameTimePlacementsNoConf
parameter_list|)
block|{
name|iNrSameTimePlacementsNoConf
operator|=
name|nrSameTimePlacementsNoConf
expr_stmt|;
block|}
specifier|public
name|int
name|getNrPlacementsNoConf
parameter_list|()
block|{
return|return
name|iNrPlacementsNoConf
return|;
block|}
specifier|public
name|void
name|setNrPlacementsNoConf
parameter_list|(
name|int
name|nrPlacementsNoConf
parameter_list|)
block|{
name|iNrPlacementsNoConf
operator|=
name|nrPlacementsNoConf
expr_stmt|;
block|}
specifier|public
name|int
name|getBtbInstructorPreference
parameter_list|()
block|{
return|return
name|iBtbInstructorPreference
return|;
block|}
specifier|public
name|void
name|setBtbInstructorPreference
parameter_list|(
name|int
name|btbInstructorPreference
parameter_list|)
block|{
name|iBtbInstructorPreference
operator|=
name|btbInstructorPreference
expr_stmt|;
block|}
specifier|public
name|boolean
name|getIsInitial
parameter_list|()
block|{
return|return
name|iIsInitial
return|;
block|}
specifier|public
name|void
name|setIsInitial
parameter_list|(
name|boolean
name|isInitial
parameter_list|)
block|{
name|iIsInitial
operator|=
name|isInitial
expr_stmt|;
block|}
specifier|public
name|String
name|getInitialAssignment
parameter_list|()
block|{
return|return
name|iInitialAssignment
return|;
block|}
specifier|public
name|void
name|setInitialAssignment
parameter_list|(
name|String
name|initialAssignment
parameter_list|)
block|{
name|iInitialAssignment
operator|=
name|initialAssignment
expr_stmt|;
block|}
specifier|public
name|boolean
name|getHasInitialSameTime
parameter_list|()
block|{
return|return
name|iHasInitialSameTime
return|;
block|}
specifier|public
name|void
name|setHasInitialSameTime
parameter_list|(
name|boolean
name|hasInitialSameTime
parameter_list|)
block|{
name|iHasInitialSameTime
operator|=
name|hasInitialSameTime
expr_stmt|;
block|}
specifier|public
name|boolean
name|getHasInitialSameRoom
parameter_list|()
block|{
return|return
name|iHasInitialSameRoom
return|;
block|}
specifier|public
name|void
name|setHasInitialSameRoom
parameter_list|(
name|boolean
name|hasInitialSameRoom
parameter_list|)
block|{
name|iHasInitialSameRoom
operator|=
name|hasInitialSameRoom
expr_stmt|;
block|}
specifier|public
name|double
name|getPerturbationPenalty
parameter_list|()
block|{
return|return
name|iPerturbationPenalty
return|;
block|}
specifier|public
name|void
name|setPerturbationPenalty
parameter_list|(
name|double
name|perturbationPenalty
parameter_list|)
block|{
name|iPerturbationPenalty
operator|=
name|perturbationPenalty
expr_stmt|;
block|}
specifier|public
name|int
name|getTooBigRoomPreference
parameter_list|()
block|{
return|return
name|iTooBigRoomPreference
return|;
block|}
specifier|public
name|void
name|setTooBigRoomPreference
parameter_list|(
name|int
name|tooBigRoomPreference
parameter_list|)
block|{
name|iTooBigRoomPreference
operator|=
name|tooBigRoomPreference
expr_stmt|;
block|}
specifier|public
name|long
name|getMinRoomSize
parameter_list|()
block|{
return|return
name|iMinRoomSize
return|;
block|}
specifier|public
name|void
name|setMinRoomSize
parameter_list|(
name|long
name|minRoomSize
parameter_list|)
block|{
name|iMinRoomSize
operator|=
name|minRoomSize
expr_stmt|;
block|}
specifier|public
name|int
name|getUselessHalfHours
parameter_list|()
block|{
return|return
name|iUselessHalfHours
return|;
block|}
specifier|public
name|void
name|setUselessHalfHours
parameter_list|(
name|int
name|uselessHalfHours
parameter_list|)
block|{
name|iUselessHalfHours
operator|=
name|uselessHalfHours
expr_stmt|;
block|}
specifier|public
name|double
name|getDeptBalancPenalty
parameter_list|()
block|{
return|return
name|iDeptBalancPenalty
return|;
block|}
specifier|public
name|void
name|setDeptBalancPenalty
parameter_list|(
name|double
name|deptBalancPenalty
parameter_list|)
block|{
name|iDeptBalancPenalty
operator|=
name|deptBalancPenalty
expr_stmt|;
block|}
specifier|public
name|int
name|getMaxDeptBalancPenalty
parameter_list|()
block|{
return|return
name|iMaxDeptBalancPenalty
return|;
block|}
specifier|public
name|void
name|setMaxDeptBalancPenalty
parameter_list|(
name|int
name|deptBalancPenalty
parameter_list|)
block|{
name|iMaxDeptBalancPenalty
operator|=
name|deptBalancPenalty
expr_stmt|;
block|}
specifier|public
name|int
name|getGroupConstraintPref
parameter_list|()
block|{
return|return
name|iGroupConstraintPref
return|;
block|}
specifier|public
name|void
name|setGroupConstraintPref
parameter_list|(
name|int
name|groupConstraintPref
parameter_list|)
block|{
name|iGroupConstraintPref
operator|=
name|groupConstraintPref
expr_stmt|;
block|}
specifier|public
name|double
name|getSpreadPenalty
parameter_list|()
block|{
return|return
name|iSpreadPenalty
return|;
block|}
specifier|public
name|void
name|setSpreadPenalty
parameter_list|(
name|double
name|spreadPenalty
parameter_list|)
block|{
name|iSpreadPenalty
operator|=
name|spreadPenalty
expr_stmt|;
block|}
specifier|public
name|double
name|getMaxSpreadPenalty
parameter_list|()
block|{
return|return
name|iMaxSpreadPenalty
return|;
block|}
specifier|public
name|void
name|setMaxSpreadPenalty
parameter_list|(
name|double
name|spreadPenalty
parameter_list|)
block|{
name|iMaxSpreadPenalty
operator|=
name|spreadPenalty
expr_stmt|;
block|}
specifier|public
name|int
name|getDatePatternPref
parameter_list|()
block|{
return|return
name|iDatePatternPref
return|;
block|}
specifier|public
name|void
name|setDatePatternPref
parameter_list|(
name|int
name|datePatternPref
parameter_list|)
block|{
name|iDatePatternPref
operator|=
name|datePatternPref
expr_stmt|;
block|}
specifier|public
name|void
name|load
parameter_list|(
name|Element
name|root
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|version
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|root
operator|.
name|attributeValue
argument_list|(
literal|"version"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|==
name|sVersion
condition|)
block|{
name|iNormalizedTimePreference
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"normTimePref"
argument_list|)
argument_list|)
expr_stmt|;
name|iBestNormalizedTimePreference
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"bestNormTimePref"
argument_list|)
argument_list|)
expr_stmt|;
name|iTimePreference
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"timePref"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|root
operator|.
name|elementIterator
argument_list|(
literal|"roomPref"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|iRoomPreference
operator|.
name|put
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|e
operator|.
name|attributeValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|e
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iBestRoomPreference
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"bestRoomPref"
argument_list|)
argument_list|)
expr_stmt|;
name|iNrStudentConflicts
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"nrStudentConf"
argument_list|)
argument_list|)
expr_stmt|;
name|iNrHardStudentConflicts
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"nrHardStudentConf"
argument_list|)
argument_list|)
expr_stmt|;
name|iNrDistanceStudentConflicts
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"nrDistanceStudentConf"
argument_list|)
argument_list|)
expr_stmt|;
name|iNrCommitedStudentConflicts
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"nrCommitedStudentConf"
argument_list|)
argument_list|)
expr_stmt|;
name|iNrTimeLocations
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"nrTimeLoc"
argument_list|)
argument_list|)
expr_stmt|;
name|iNrRoomLocations
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"nrRoomLoc"
argument_list|)
argument_list|)
expr_stmt|;
name|iNrSameRoomPlacementsNoConf
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"nrSameRoomPlacNoConf"
argument_list|)
argument_list|)
expr_stmt|;
name|iNrSameTimePlacementsNoConf
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"nrSameTimePlacNoConf"
argument_list|)
argument_list|)
expr_stmt|;
name|iNrPlacementsNoConf
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"nrPlacNoConf"
argument_list|)
argument_list|)
expr_stmt|;
name|iBtbInstructorPreference
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"btbInstrPref"
argument_list|)
argument_list|)
expr_stmt|;
name|iIsInitial
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"isInitial"
argument_list|)
argument_list|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
name|iInitialAssignment
operator|=
name|root
operator|.
name|elementText
argument_list|(
literal|"iniAssign"
argument_list|)
expr_stmt|;
name|iHasInitialSameTime
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"hasIniSameTime"
argument_list|)
argument_list|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
name|iHasInitialSameRoom
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"hasIniSameRoom"
argument_list|)
argument_list|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
name|iPerturbationPenalty
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"pertPenalty"
argument_list|)
argument_list|)
expr_stmt|;
name|iTooBigRoomPreference
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"tooBig"
argument_list|)
argument_list|)
expr_stmt|;
name|iMinRoomSize
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"minSize"
argument_list|)
argument_list|)
expr_stmt|;
name|iUselessHalfHours
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"uselessHalfHours"
argument_list|)
argument_list|)
expr_stmt|;
name|iDeptBalancPenalty
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"deptBalanc"
argument_list|)
argument_list|)
expr_stmt|;
name|iGroupConstraintPref
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"groupConstr"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|root
operator|.
name|elementText
argument_list|(
literal|"spread"
argument_list|)
operator|!=
literal|null
condition|)
name|iSpreadPenalty
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"spread"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|root
operator|.
name|elementText
argument_list|(
literal|"maxSpread"
argument_list|)
operator|!=
literal|null
condition|)
name|iMaxSpreadPenalty
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"maxSpread"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|iMaxSpreadPenalty
operator|=
name|iSpreadPenalty
expr_stmt|;
if|if
condition|(
name|root
operator|.
name|elementText
argument_list|(
literal|"maxDeptBalanc"
argument_list|)
operator|!=
literal|null
condition|)
name|iMaxDeptBalancPenalty
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"maxDeptBalanc"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|iMaxDeptBalancPenalty
operator|=
operator|(
name|int
operator|)
name|iDeptBalancPenalty
expr_stmt|;
if|if
condition|(
name|root
operator|.
name|elementText
argument_list|(
literal|"datePref"
argument_list|)
operator|!=
literal|null
condition|)
name|iDatePatternPref
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"datePref"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|save
parameter_list|(
name|Element
name|root
parameter_list|)
throws|throws
name|Exception
block|{
name|root
operator|.
name|addAttribute
argument_list|(
literal|"version"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|sVersion
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"normTimePref"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iNormalizedTimePreference
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"bestNormTimePref"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iBestNormalizedTimePreference
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"timePref"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iTimePreference
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iRoomPreference
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"roomPref"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setText
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|addElement
argument_list|(
literal|"bestRoomPref"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iBestRoomPreference
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"nrStudentConf"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iNrStudentConflicts
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"nrHardStudentConf"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iNrHardStudentConflicts
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"nrCommitedStudentConf"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iNrCommitedStudentConflicts
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"nrDistanceStudentConf"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iNrDistanceStudentConflicts
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"nrTimeLoc"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iNrTimeLocations
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"nrRoomLoc"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iNrRoomLocations
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"nrSameRoomPlacNoConf"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iNrSameRoomPlacementsNoConf
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"nrSameTimePlacNoConf"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iNrSameTimePlacementsNoConf
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"nrPlacNoConf"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iNrPlacementsNoConf
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"btbInstrPref"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iBtbInstructorPreference
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"isInitial"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iIsInitial
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iInitialAssignment
operator|!=
literal|null
condition|)
name|root
operator|.
name|addElement
argument_list|(
literal|"iniAssign"
argument_list|)
operator|.
name|setText
argument_list|(
name|iInitialAssignment
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"hasIniSameTime"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iHasInitialSameTime
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"hasIniSameRoom"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iHasInitialSameRoom
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"pertPenalty"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iPerturbationPenalty
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"tooBig"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iTooBigRoomPreference
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"minSize"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iMinRoomSize
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"uselessHalfHours"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iUselessHalfHours
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"deptBalanc"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iDeptBalancPenalty
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"maxDeptBalanc"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iMaxDeptBalancPenalty
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"groupConstr"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iGroupConstraintPref
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"spread"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iSpreadPenalty
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"maxSpread"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iMaxSpreadPenalty
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"datePref"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iDatePatternPref
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|saveToFile
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"AssignmentPreferneceInfo{\n"
operator|+
literal|"  normTimePref="
operator|+
name|iNormalizedTimePreference
operator|+
literal|"\n"
operator|+
literal|"  bestNormTimePref = "
operator|+
name|iBestNormalizedTimePreference
operator|+
literal|"\n"
operator|+
literal|"  timePref = "
operator|+
name|iTimePreference
operator|+
literal|"\n"
operator|+
literal|"  roomPreference = "
operator|+
name|iRoomPreference
operator|+
literal|"\n"
operator|+
literal|"  bestRoomPref = "
operator|+
name|iBestRoomPreference
operator|+
literal|"\n"
operator|+
literal|"  nrStudentConf = "
operator|+
name|iNrStudentConflicts
operator|+
literal|"\n"
operator|+
literal|"  nrHardStudentConf = "
operator|+
name|iNrHardStudentConflicts
operator|+
literal|"\n"
operator|+
literal|"  nrCommitedStudentConf = "
operator|+
name|iNrCommitedStudentConflicts
operator|+
literal|"\n"
operator|+
literal|"  nrDistanceStudentConf = "
operator|+
name|iNrDistanceStudentConflicts
operator|+
literal|"\n"
operator|+
literal|"  nrTimeLoc = "
operator|+
name|iNrTimeLocations
operator|+
literal|"\n"
operator|+
literal|"  nrRoomLoc = "
operator|+
name|iNrRoomLocations
operator|+
literal|"\n"
operator|+
literal|"  nrSameRoomPlacNoConf = "
operator|+
name|iNrSameRoomPlacementsNoConf
operator|+
literal|"\n"
operator|+
literal|"  nrSameTimePlacNoConf = "
operator|+
name|iNrSameTimePlacementsNoConf
operator|+
literal|"\n"
operator|+
literal|"  nrPlacNoConf = "
operator|+
name|iNrPlacementsNoConf
operator|+
literal|"\n"
operator|+
literal|"  btbInstrPref = "
operator|+
name|iBtbInstructorPreference
operator|+
literal|"\n"
operator|+
literal|"  isInitial = "
operator|+
name|iIsInitial
operator|+
literal|"\n"
operator|+
literal|"  iniAssign = "
operator|+
name|iInitialAssignment
operator|+
literal|"\n"
operator|+
literal|"  hasIniSameTime = "
operator|+
name|iHasInitialSameTime
operator|+
literal|"\n"
operator|+
literal|"  hasIniSameRoom = "
operator|+
name|iHasInitialSameRoom
operator|+
literal|"\n"
operator|+
literal|"  pertPenalty = "
operator|+
name|iPerturbationPenalty
operator|+
literal|"\n"
operator|+
literal|"  tooBig = "
operator|+
name|iTooBigRoomPreference
operator|+
literal|"\n"
operator|+
literal|"  minSize = "
operator|+
name|iMinRoomSize
operator|+
literal|"\n"
operator|+
literal|"  uselessHalfHours = "
operator|+
name|iUselessHalfHours
operator|+
literal|"\n"
operator|+
literal|"  deptBalanc = "
operator|+
name|iDeptBalancPenalty
operator|+
literal|"\n"
operator|+
literal|"  maxDeptBalanc = "
operator|+
name|iMaxDeptBalancPenalty
operator|+
literal|"\n"
operator|+
literal|"  groupConstr = "
operator|+
name|iGroupConstraintPref
operator|+
literal|"\n"
operator|+
literal|"  spread = "
operator|+
name|iSpreadPenalty
operator|+
literal|"\n"
operator|+
literal|"  maxSpread = "
operator|+
name|iMaxSpreadPenalty
operator|+
literal|"\n"
operator|+
literal|"  datePatterPref = "
operator|+
name|iDatePatternPref
operator|+
literal|"\n"
operator|+
literal|"}"
return|;
block|}
block|}
end_class

end_unit

