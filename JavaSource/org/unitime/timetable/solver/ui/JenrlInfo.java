begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|interactive
operator|.
name|ClassAssignmentDetails
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|JenrlConstraint
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Lecture
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solver
operator|.
name|Solver
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|JenrlInfo
implements|implements
name|TimetableInfo
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
specifier|static
name|int
name|sVersion
init|=
literal|1
decl_stmt|;
comment|// to be able to do some changes in the future
specifier|public
name|double
name|iJenrl
init|=
literal|0.0
decl_stmt|;
specifier|public
name|boolean
name|iIsSatisfied
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|iIsHard
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|iIsDistance
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|iIsFixed
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|iIsCommited
init|=
literal|false
decl_stmt|;
specifier|public
name|double
name|iDistance
init|=
literal|0.0
decl_stmt|;
specifier|public
name|ClassAssignmentDetails
name|iFirst
init|=
literal|null
decl_stmt|,
name|iSecond
init|=
literal|null
decl_stmt|;
specifier|public
name|JenrlInfo
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|JenrlInfo
parameter_list|(
name|JenrlConstraint
name|jc
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|jc
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JenrlInfo
parameter_list|(
name|Solver
name|solver
parameter_list|,
name|JenrlConstraint
name|jc
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|Lecture
name|first
init|=
operator|(
name|Lecture
operator|)
name|jc
operator|.
name|first
argument_list|()
decl_stmt|;
name|Placement
name|firstPl
init|=
operator|(
name|Placement
operator|)
name|first
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
name|Lecture
name|second
init|=
operator|(
name|Lecture
operator|)
name|jc
operator|.
name|second
argument_list|()
decl_stmt|;
name|Placement
name|secondPl
init|=
operator|(
name|Placement
operator|)
name|second
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|firstPl
operator|!=
literal|null
condition|)
name|iFirst
operator|=
operator|new
name|ClassAssignmentDetails
argument_list|(
name|solver
argument_list|,
name|first
argument_list|,
name|firstPl
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|secondPl
operator|!=
literal|null
condition|)
name|iSecond
operator|=
operator|new
name|ClassAssignmentDetails
argument_list|(
name|solver
argument_list|,
name|second
argument_list|,
name|secondPl
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|firstPl
operator|==
literal|null
operator|||
name|secondPl
operator|==
literal|null
condition|)
return|return;
name|setJenrl
argument_list|(
name|jc
operator|.
name|getJenrl
argument_list|()
argument_list|)
expr_stmt|;
name|setIsSatisfied
argument_list|(
name|jc
operator|.
name|isInConflict
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|jc
operator|.
name|isInConflict
argument_list|()
condition|)
block|{
name|setIsHard
argument_list|(
name|first
operator|.
name|areStudentConflictsHard
argument_list|(
name|second
argument_list|)
argument_list|)
expr_stmt|;
name|setIsFixed
argument_list|(
name|first
operator|.
name|nrTimeLocations
argument_list|()
operator|==
literal|1
operator|&&
name|second
operator|.
name|nrTimeLocations
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|setIsDistance
argument_list|(
operator|!
name|firstPl
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|hasIntersection
argument_list|(
name|secondPl
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDistance
argument_list|()
condition|)
name|setDistance
argument_list|(
name|Placement
operator|.
name|getDistance
argument_list|(
name|firstPl
argument_list|,
name|secondPl
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ClassAssignmentDetails
name|getFirst
parameter_list|()
block|{
return|return
name|iFirst
return|;
block|}
specifier|public
name|ClassAssignmentDetails
name|getSecond
parameter_list|()
block|{
return|return
name|iSecond
return|;
block|}
specifier|public
specifier|static
name|Hashtable
name|getCommitedJenrlInfos
parameter_list|(
name|Lecture
name|lecture
parameter_list|)
block|{
return|return
name|getCommitedJenrlInfos
argument_list|(
literal|null
argument_list|,
name|lecture
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Hashtable
name|getCommitedJenrlInfos
parameter_list|(
name|Solver
name|solver
parameter_list|,
name|Lecture
name|lecture
parameter_list|)
block|{
name|Hashtable
name|ret
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Placement
name|placement
init|=
operator|(
name|Placement
operator|)
name|lecture
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|placement
operator|==
literal|null
condition|)
return|return
name|ret
return|;
for|for
control|(
name|Iterator
name|i2
init|=
name|lecture
operator|.
name|students
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Student
name|student
init|=
operator|(
name|Student
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|Set
name|conflicts
init|=
name|student
operator|.
name|conflictPlacements
argument_list|(
name|placement
argument_list|)
decl_stmt|;
if|if
condition|(
name|conflicts
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|Iterator
name|i3
init|=
name|conflicts
operator|.
name|iterator
argument_list|()
init|;
name|i3
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Placement
name|pl
init|=
operator|(
name|Placement
operator|)
name|i3
operator|.
name|next
argument_list|()
decl_stmt|;
name|JenrlInfo
name|info
init|=
operator|(
name|JenrlInfo
operator|)
name|ret
operator|.
name|get
argument_list|(
name|pl
operator|.
name|getAssignmentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
name|info
operator|=
operator|new
name|JenrlInfo
argument_list|()
expr_stmt|;
name|info
operator|.
name|setIsCommited
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|info
operator|.
name|setIsDistance
argument_list|(
operator|!
name|pl
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|hasIntersection
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setIsFixed
argument_list|(
name|lecture
operator|.
name|nrTimeLocations
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|iFirst
operator|=
operator|new
name|ClassAssignmentDetails
argument_list|(
name|solver
argument_list|,
name|lecture
argument_list|,
name|placement
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|info
operator|.
name|iSecond
operator|=
operator|new
name|ClassAssignmentDetails
argument_list|(
name|solver
argument_list|,
operator|(
name|Lecture
operator|)
name|pl
operator|.
name|variable
argument_list|()
argument_list|,
name|pl
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|isDistance
argument_list|()
condition|)
name|info
operator|.
name|setDistance
argument_list|(
name|Placement
operator|.
name|getDistance
argument_list|(
name|placement
argument_list|,
name|pl
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|pl
operator|.
name|getAssignmentId
argument_list|()
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
name|info
operator|.
name|setJenrl
argument_list|(
name|info
operator|.
name|getJenrl
argument_list|()
operator|+
literal|1.0
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|double
name|getJenrl
parameter_list|()
block|{
return|return
name|iJenrl
return|;
block|}
specifier|public
name|void
name|setJenrl
parameter_list|(
name|double
name|jenrl
parameter_list|)
block|{
name|iJenrl
operator|=
name|jenrl
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSatisfied
parameter_list|()
block|{
return|return
name|iIsSatisfied
return|;
block|}
specifier|public
name|void
name|setIsSatisfied
parameter_list|(
name|boolean
name|isSatisfied
parameter_list|)
block|{
name|iIsSatisfied
operator|=
name|isSatisfied
expr_stmt|;
block|}
specifier|public
name|boolean
name|isHard
parameter_list|()
block|{
return|return
name|iIsHard
return|;
block|}
specifier|public
name|void
name|setIsHard
parameter_list|(
name|boolean
name|isHard
parameter_list|)
block|{
name|iIsHard
operator|=
name|isHard
expr_stmt|;
block|}
specifier|public
name|boolean
name|isDistance
parameter_list|()
block|{
return|return
name|iIsDistance
return|;
block|}
specifier|public
name|void
name|setIsDistance
parameter_list|(
name|boolean
name|isDistance
parameter_list|)
block|{
name|iIsDistance
operator|=
name|isDistance
expr_stmt|;
block|}
specifier|public
name|boolean
name|isFixed
parameter_list|()
block|{
return|return
name|iIsFixed
return|;
block|}
specifier|public
name|void
name|setIsFixed
parameter_list|(
name|boolean
name|isFixed
parameter_list|)
block|{
name|iIsFixed
operator|=
name|isFixed
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCommited
parameter_list|()
block|{
return|return
name|iIsCommited
return|;
block|}
specifier|public
name|void
name|setIsCommited
parameter_list|(
name|boolean
name|isCommited
parameter_list|)
block|{
name|iIsCommited
operator|=
name|isCommited
expr_stmt|;
block|}
specifier|public
name|double
name|getDistance
parameter_list|()
block|{
return|return
name|iDistance
return|;
block|}
specifier|public
name|void
name|setDistance
parameter_list|(
name|double
name|distance
parameter_list|)
block|{
name|iDistance
operator|=
name|distance
expr_stmt|;
block|}
specifier|public
name|void
name|load
parameter_list|(
name|Element
name|root
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|version
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|root
operator|.
name|attributeValue
argument_list|(
literal|"version"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|1
condition|)
block|{
name|iJenrl
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"jenrl"
argument_list|)
argument_list|)
expr_stmt|;
name|iIsSatisfied
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"satisfied"
argument_list|)
argument_list|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
name|iIsDistance
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"dist"
argument_list|)
argument_list|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
name|iIsFixed
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"fixed"
argument_list|)
argument_list|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
name|iIsHard
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"hard"
argument_list|)
argument_list|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|root
operator|.
name|elementText
argument_list|(
literal|"distance"
argument_list|)
operator|!=
literal|null
condition|)
name|iDistance
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"distance"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|root
operator|.
name|elementText
argument_list|(
literal|"commited"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|iIsCommited
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|iIsCommited
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|root
operator|.
name|elementText
argument_list|(
literal|"commited"
argument_list|)
argument_list|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|save
parameter_list|(
name|Element
name|root
parameter_list|)
throws|throws
name|Exception
block|{
name|root
operator|.
name|addAttribute
argument_list|(
literal|"version"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|sVersion
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"jenrl"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iJenrl
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"satisfied"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iIsSatisfied
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"dist"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iIsDistance
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"fixed"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iIsFixed
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"hard"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iIsHard
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"commited"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iIsCommited
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addElement
argument_list|(
literal|"distance"
argument_list|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iDistance
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|saveToFile
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

