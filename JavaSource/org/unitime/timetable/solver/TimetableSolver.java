begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|TimetableXMLLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|TimetableXMLSaver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|ClassLimitConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|DepartmentSpreadConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|GroupConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|InstructorConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|RoomConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|SpreadConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Lecture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|StudentGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimetableModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|extension
operator|.
name|ConflictStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|extension
operator|.
name|Extension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solver
operator|.
name|Solver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|CSVFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ProblemLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ProblemSaver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|CSVFile
operator|.
name|CSVField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|LongType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|Query
operator|.
name|TermMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|RoomAvailabilityInterface
operator|.
name|TimeBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameterGroup
operator|.
name|SolverType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DatePatternDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|LocationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolutionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolverGroupDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TimePatternDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|interactive
operator|.
name|ClassAssignmentDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|interactive
operator|.
name|Hint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|interactive
operator|.
name|Suggestion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|interactive
operator|.
name|Suggestions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|interactive
operator|.
name|SuggestionsModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|AssignmentPreferenceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|ConflictStatisticsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|DeptBalancingReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|DiscouragedInstructorBtbReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|PerturbationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|RoomReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|SameSubpartBalancingReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|SolverUnassignedClassesModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|StudentConflictsReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|ViolatedDistrPreferencesReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|timegrid
operator|.
name|SolverGridModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|timegrid
operator|.
name|TimetableGridContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|timegrid
operator|.
name|TimetableGridModel
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|TimetableSolver
extends|extends
name|AbstractSolver
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|,
name|TimetableModel
argument_list|>
implements|implements
name|SolverProxy
block|{
specifier|private
name|Vector
name|iAssignmentRecords
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
specifier|private
name|Vector
name|iBestAssignmentRecords
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
specifier|private
name|ConflictStatisticsInfo
name|iCbsInfo
init|=
literal|null
decl_stmt|;
specifier|private
name|CommitedClassAssignmentProxy
name|iCommitedClassAssignmentProxy
decl_stmt|;
specifier|public
name|TimetableSolver
parameter_list|(
name|DataProperties
name|properties
parameter_list|,
name|SolverDisposeListener
name|solverDisposeListener
parameter_list|)
block|{
name|super
argument_list|(
name|properties
argument_list|,
name|solverDisposeListener
argument_list|)
expr_stmt|;
name|iCommitedClassAssignmentProxy
operator|=
operator|new
name|CommitedClassAssignmentProxy
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ProblemSaver
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|,
name|TimetableModel
argument_list|>
name|getDatabaseSaver
parameter_list|(
name|Solver
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|solver
parameter_list|)
block|{
return|return
operator|new
name|TimetableDatabaseSaver
argument_list|(
name|solver
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ProblemLoader
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|,
name|TimetableModel
argument_list|>
name|getDatabaseLoader
parameter_list|(
name|TimetableModel
name|model
parameter_list|,
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|assignment
parameter_list|)
block|{
return|return
operator|new
name|TimetableDatabaseLoader
argument_list|(
name|model
argument_list|,
name|assignment
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|TimetableModel
name|createModel
parameter_list|(
name|DataProperties
name|properties
parameter_list|)
block|{
return|return
operator|new
name|TimetableModel
argument_list|(
name|properties
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Document
name|createCurrentSolutionBackup
parameter_list|(
name|boolean
name|anonymize
parameter_list|,
name|boolean
name|idconv
parameter_list|)
block|{
if|if
condition|(
name|anonymize
condition|)
block|{
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.ConvertIds"
argument_list|,
name|idconv
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.ShowNames"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
name|TimetableXMLSaver
name|saver
init|=
operator|new
name|TimetableXMLSaver
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|Document
name|document
init|=
name|saver
operator|.
name|saveDocument
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|anonymize
condition|)
block|{
name|Progress
operator|.
name|getInstance
argument_list|(
name|saver
operator|.
name|getModel
argument_list|()
argument_list|)
operator|.
name|save
argument_list|(
name|document
operator|.
name|getRootElement
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iAssignmentRecords
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Element
name|assignmentRecords
init|=
name|document
operator|.
name|getRootElement
argument_list|()
operator|.
name|addElement
argument_list|(
literal|"assignmentRecords"
argument_list|)
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|iAssignmentRecords
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|AssignmentRecord
name|r
init|=
operator|(
name|AssignmentRecord
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|r
operator|.
name|toXml
argument_list|(
name|assignmentRecords
operator|.
name|addElement
argument_list|(
literal|"record"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|iBestAssignmentRecords
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Element
name|bestAssignmentRecords
init|=
name|document
operator|.
name|getRootElement
argument_list|()
operator|.
name|addElement
argument_list|(
literal|"bestAssignmentRecords"
argument_list|)
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|iBestAssignmentRecords
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|AssignmentRecord
name|r
init|=
operator|(
name|AssignmentRecord
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|r
operator|.
name|toXml
argument_list|(
name|bestAssignmentRecords
operator|.
name|addElement
argument_list|(
literal|"record"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ConflictStatisticsInfo
name|cbsInfo
init|=
name|getCbsInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|cbsInfo
operator|!=
literal|null
condition|)
name|cbsInfo
operator|.
name|save
argument_list|(
name|document
operator|.
name|getRootElement
argument_list|()
operator|.
name|addElement
argument_list|(
literal|"cbsInfo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|anonymize
condition|)
block|{
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.ConvertIds"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.ShowNames"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
return|return
name|document
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|restureCurrentSolutionFromBackup
parameter_list|(
name|Document
name|document
parameter_list|)
block|{
name|TimetableXMLLoader
name|loader
init|=
operator|new
name|TimetableXMLLoader
argument_list|(
operator|(
name|TimetableModel
operator|)
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|,
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|)
decl_stmt|;
name|loader
operator|.
name|load
argument_list|(
name|currentSolution
argument_list|()
argument_list|,
name|document
argument_list|)
expr_stmt|;
name|iAssignmentRecords
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iBestAssignmentRecords
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Element
name|assignmentRecords
init|=
name|document
operator|.
name|getRootElement
argument_list|()
operator|.
name|element
argument_list|(
literal|"assignmentRecords"
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignmentRecords
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|assignmentRecords
operator|.
name|elementIterator
argument_list|(
literal|"record"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|iAssignmentRecords
operator|.
name|add
argument_list|(
name|AssignmentRecord
operator|.
name|fromXml
argument_list|(
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Element
name|bestAssignmentRecords
init|=
name|document
operator|.
name|getRootElement
argument_list|()
operator|.
name|element
argument_list|(
literal|"bestAssignmentRecords"
argument_list|)
decl_stmt|;
if|if
condition|(
name|bestAssignmentRecords
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|bestAssignmentRecords
operator|.
name|elementIterator
argument_list|(
literal|"record"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|iBestAssignmentRecords
operator|.
name|add
argument_list|(
name|AssignmentRecord
operator|.
name|fromXml
argument_list|(
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|document
operator|.
name|getRootElement
argument_list|()
operator|.
name|element
argument_list|(
literal|"cbsInfo"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|iCbsInfo
operator|=
operator|new
name|ConflictStatisticsInfo
argument_list|()
expr_stmt|;
name|iCbsInfo
operator|.
name|load
argument_list|(
name|document
operator|.
name|getRootElement
argument_list|()
operator|.
name|element
argument_list|(
literal|"cbsInfo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|beforeStart
parameter_list|()
block|{
name|iCbsInfo
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNote
parameter_list|()
block|{
return|return
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.Note"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNote
parameter_list|(
name|String
name|note
parameter_list|)
block|{
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"General.Note"
argument_list|,
name|note
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|restoreBest
parameter_list|()
block|{
name|iAssignmentRecords
operator|=
operator|new
name|Vector
argument_list|(
name|iBestAssignmentRecords
argument_list|)
expr_stmt|;
name|currentSolution
argument_list|()
operator|.
name|restoreBest
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|saveBest
parameter_list|()
block|{
name|iBestAssignmentRecords
operator|=
operator|new
name|Vector
argument_list|(
name|iAssignmentRecords
argument_list|)
expr_stmt|;
name|currentSolution
argument_list|()
operator|.
name|saveBest
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|finalSectioning
parameter_list|()
block|{
name|iWorkThread
operator|=
operator|new
name|FinalSectioning
argument_list|()
expr_stmt|;
name|iWorkThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|afterFinalSectioning
parameter_list|()
block|{
block|}
specifier|public
class|class
name|FinalSectioning
extends|extends
name|InterruptibleThread
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|setName
argument_list|(
literal|"FinalSectioning"
argument_list|)
expr_stmt|;
name|iWorking
operator|=
literal|true
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|TimetableModel
operator|)
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|)
operator|.
name|switchStudents
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|iWorking
operator|=
literal|false
expr_stmt|;
name|Progress
operator|.
name|getInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
operator|.
name|setStatus
argument_list|(
literal|"Awaiting commands ..."
argument_list|)
expr_stmt|;
block|}
name|afterFinalSectioning
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|disposeNoInherit
parameter_list|(
name|boolean
name|unregister
parameter_list|)
block|{
name|iAssignmentRecords
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iBestAssignmentRecords
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iCbsInfo
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|disposeNoInherit
argument_list|(
name|unregister
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|finishBeforeSave
parameter_list|()
block|{
if|if
condition|(
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.SwitchStudents"
argument_list|,
literal|true
argument_list|)
condition|)
block|{
operator|(
operator|(
name|TimetableModel
operator|)
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|)
operator|.
name|switchStudents
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|currentSolution
argument_list|()
operator|.
name|saveBest
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|save
parameter_list|(
name|boolean
name|createNewSolution
parameter_list|,
name|boolean
name|commitSolution
parameter_list|)
block|{
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"General.CreateNewSolution"
argument_list|,
operator|(
name|createNewSolution
condition|?
literal|"true"
else|:
literal|"false"
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|createNewSolution
condition|)
name|getProperties
argument_list|()
operator|.
name|remove
argument_list|(
literal|"General.SolutionId"
argument_list|)
expr_stmt|;
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"General.CommitSolution"
argument_list|,
operator|(
name|commitSolution
condition|?
literal|"true"
else|:
literal|"false"
operator|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|load
parameter_list|(
name|DataProperties
name|properties
parameter_list|)
block|{
name|iAssignmentRecords
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iBestAssignmentRecords
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iCbsInfo
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|load
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Callback
name|getReloadingDoneCallback
parameter_list|()
block|{
return|return
operator|new
name|ReloadingDoneCallback
argument_list|()
return|;
block|}
specifier|protected
name|boolean
name|useAmPm
parameter_list|()
block|{
return|return
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.UseAmPm"
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
class|class
name|ReloadingDoneCallback
implements|implements
name|Callback
block|{
name|Hashtable
name|iCurrentAssignmentTable
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Hashtable
name|iBestAssignmentTable
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Hashtable
name|iInitialAssignmentTable
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|String
name|iSolutionId
init|=
literal|null
decl_stmt|;
name|Progress
name|iProgress
init|=
literal|null
decl_stmt|;
specifier|public
name|ReloadingDoneCallback
parameter_list|()
block|{
name|iSolutionId
operator|=
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.SolutionId"
argument_list|)
expr_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
name|Placement
name|current
init|=
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|lecture
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
name|iCurrentAssignmentTable
operator|.
name|put
argument_list|(
name|lecture
operator|.
name|getClassId
argument_list|()
argument_list|,
name|current
argument_list|)
expr_stmt|;
if|if
condition|(
name|lecture
operator|.
name|getBestAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|iBestAssignmentTable
operator|.
name|put
argument_list|(
name|lecture
operator|.
name|getClassId
argument_list|()
argument_list|,
name|lecture
operator|.
name|getBestAssignment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|iInitialAssignmentTable
operator|.
name|put
argument_list|(
name|lecture
operator|.
name|getClassId
argument_list|()
argument_list|,
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Lecture
name|getLecture
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
for|for
control|(
name|Lecture
name|lecture
range|:
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
if|if
condition|(
name|lecture
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|classId
argument_list|)
condition|)
return|return
name|lecture
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Placement
name|getPlacement
parameter_list|(
name|Lecture
name|lecture
parameter_list|,
name|Placement
name|placement
parameter_list|)
block|{
name|TimeLocation
name|time
init|=
literal|null
decl_stmt|;
for|for
control|(
name|TimeLocation
name|t
range|:
name|lecture
operator|.
name|timeLocations
argument_list|()
control|)
block|{
if|if
condition|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|equals
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|time
operator|=
name|t
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|time
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"WARNING: Time "
operator|+
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getLongName
argument_list|(
name|useAmPm
argument_list|()
argument_list|)
operator|+
literal|" is no longer valid for class "
operator|+
name|lecture
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Vector
name|rooms
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|RoomLocation
name|r
range|:
name|lecture
operator|.
name|roomLocations
argument_list|()
control|)
block|{
if|if
condition|(
name|placement
operator|.
name|isMultiRoom
argument_list|()
operator|&&
name|placement
operator|.
name|getRoomLocations
argument_list|()
operator|.
name|contains
argument_list|(
name|r
argument_list|)
condition|)
block|{
name|rooms
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|placement
operator|.
name|isMultiRoom
argument_list|()
operator|&&
name|placement
operator|.
name|getRoomLocation
argument_list|()
operator|.
name|equals
argument_list|(
name|r
argument_list|)
condition|)
block|{
name|rooms
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|rooms
operator|.
name|size
argument_list|()
operator|!=
name|lecture
operator|.
name|getNrRooms
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"WARNING: Room(s) "
operator|+
operator|(
name|placement
operator|.
name|isMultiRoom
argument_list|()
condition|?
name|placement
operator|.
name|getRoomLocations
argument_list|()
operator|.
name|toString
argument_list|()
else|:
name|placement
operator|.
name|getRoomLocation
argument_list|()
operator|.
name|getName
argument_list|()
operator|)
operator|+
literal|" are no longer valid for class "
operator|+
name|lecture
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Placement
argument_list|(
name|lecture
argument_list|,
name|time
argument_list|,
name|rooms
argument_list|)
return|;
block|}
specifier|private
name|void
name|assign
parameter_list|(
name|Placement
name|placement
parameter_list|)
block|{
operator|(
operator|(
name|TimetableModel
operator|)
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|)
operator|.
name|weaken
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|,
name|placement
argument_list|)
expr_stmt|;
if|if
condition|(
name|placement
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|Constraint
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
argument_list|,
name|Set
argument_list|<
name|Placement
argument_list|>
argument_list|>
name|conflictConstraints
init|=
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|conflictConstraints
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|,
name|placement
argument_list|)
decl_stmt|;
if|if
condition|(
name|conflictConstraints
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|placement
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to assign "
operator|+
name|placement
operator|.
name|variable
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"&larr; "
operator|+
name|placement
operator|.
name|getLongName
argument_list|(
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|warn
argument_list|(
literal|"&nbsp;&nbsp;Reason:"
argument_list|)
expr_stmt|;
for|for
control|(
name|Constraint
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|c
range|:
name|conflictConstraints
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Collection
name|vals
init|=
operator|(
name|Collection
operator|)
name|conflictConstraints
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|vals
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Placement
name|v
init|=
operator|(
name|Placement
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|iProgress
operator|.
name|warn
argument_list|(
literal|"&nbsp;&nbsp;&nbsp;&nbsp;"
operator|+
name|v
operator|.
name|variable
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" = "
operator|+
name|v
operator|.
name|getLongName
argument_list|(
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iProgress
operator|.
name|debug
argument_list|(
literal|"&nbsp;&nbsp;&nbsp;&nbsp;in constraint "
operator|+
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|Lecture
name|lecture
init|=
name|placement
operator|.
name|variable
argument_list|()
decl_stmt|;
name|String
name|reason
init|=
literal|""
decl_stmt|;
for|for
control|(
name|InstructorConstraint
name|ic
range|:
name|lecture
operator|.
name|getInstructorConstraints
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ic
operator|.
name|isAvailable
argument_list|(
name|lecture
argument_list|,
name|placement
argument_list|)
condition|)
name|reason
operator|+=
literal|"<br>&nbsp;&nbsp;&nbsp;&nbsp;instructor "
operator|+
name|ic
operator|.
name|getName
argument_list|()
operator|+
literal|" not available"
expr_stmt|;
block|}
if|if
condition|(
name|lecture
operator|.
name|getNrRooms
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|placement
operator|.
name|isMultiRoom
argument_list|()
condition|)
block|{
for|for
control|(
name|RoomLocation
name|roomLocation
range|:
name|placement
operator|.
name|getRoomLocations
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|roomLocation
operator|.
name|getRoomConstraint
argument_list|()
operator|.
name|isAvailable
argument_list|(
name|lecture
argument_list|,
name|placement
operator|.
name|getTimeLocation
argument_list|()
argument_list|,
name|lecture
operator|.
name|getScheduler
argument_list|()
argument_list|)
condition|)
name|reason
operator|+=
literal|"<br>&nbsp;&nbsp;&nbsp;&nbsp;room "
operator|+
name|roomLocation
operator|.
name|getName
argument_list|()
operator|+
literal|" not available"
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|placement
operator|.
name|getRoomLocation
argument_list|()
operator|.
name|getRoomConstraint
argument_list|()
operator|.
name|isAvailable
argument_list|(
name|lecture
argument_list|,
name|placement
operator|.
name|getTimeLocation
argument_list|()
argument_list|,
name|lecture
operator|.
name|getScheduler
argument_list|()
argument_list|)
condition|)
name|reason
operator|+=
literal|"<br>&nbsp;&nbsp;&nbsp;&nbsp;room "
operator|+
name|placement
operator|.
name|getRoomLocation
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" not available"
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|Constraint
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
argument_list|,
name|Set
argument_list|<
name|Placement
argument_list|>
argument_list|>
name|conflictConstraints
init|=
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|conflictConstraints
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|,
name|placement
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|conflictConstraints
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Constraint
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|c
range|:
name|conflictConstraints
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Placement
argument_list|>
name|vals
init|=
name|conflictConstraints
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
for|for
control|(
name|Placement
name|p
range|:
name|vals
control|)
block|{
name|Lecture
name|l
init|=
name|p
operator|.
name|variable
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|.
name|isCommitted
argument_list|()
condition|)
name|reason
operator|+=
literal|"<br>&nbsp;&nbsp;&nbsp;&nbsp;conflict with committed assignment "
operator|+
name|l
operator|.
name|getName
argument_list|()
operator|+
literal|" = "
operator|+
name|p
operator|.
name|getLongName
argument_list|(
name|useAmPm
argument_list|()
argument_list|)
operator|+
literal|" (in constraint "
operator|+
name|c
operator|+
literal|")"
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
name|placement
argument_list|)
condition|)
name|reason
operator|+=
literal|"<br>&nbsp;&nbsp;&nbsp;&nbsp;constraint "
operator|+
name|c
expr_stmt|;
block|}
block|}
block|}
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to assign "
operator|+
name|lecture
operator|.
name|getName
argument_list|()
operator|+
literal|"&larr; "
operator|+
name|placement
operator|.
name|getLongName
argument_list|(
name|useAmPm
argument_list|()
argument_list|)
operator|+
operator|(
name|reason
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|"."
else|:
literal|":"
operator|+
name|reason
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|unassignAll
parameter_list|()
block|{
for|for
control|(
name|Lecture
name|lecture
range|:
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
operator|.
name|unassign
argument_list|(
literal|0
argument_list|,
name|lecture
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iProgress
operator|=
name|Progress
operator|.
name|getInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iBestAssignmentTable
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Creating best assignment ..."
argument_list|,
name|iBestAssignmentTable
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|unassignAll
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iBestAssignmentTable
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|Lecture
name|lecture
init|=
name|getLecture
argument_list|(
operator|(
name|Long
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|==
literal|null
condition|)
continue|continue;
name|Placement
name|placement
init|=
name|getPlacement
argument_list|(
name|lecture
argument_list|,
operator|(
name|Placement
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
name|assign
argument_list|(
name|placement
argument_list|)
expr_stmt|;
block|}
name|currentSolution
argument_list|()
operator|.
name|saveBest
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|iInitialAssignmentTable
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Creating initial assignment ..."
argument_list|,
name|iInitialAssignmentTable
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iInitialAssignmentTable
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|Lecture
name|lecture
init|=
name|getLecture
argument_list|(
operator|(
name|Long
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|==
literal|null
condition|)
continue|continue;
name|Placement
name|placement
init|=
name|getPlacement
argument_list|(
name|lecture
argument_list|,
operator|(
name|Placement
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
name|lecture
operator|.
name|setInitialAssignment
argument_list|(
name|placement
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|iCurrentAssignmentTable
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Creating current assignment ..."
argument_list|,
name|iCurrentAssignmentTable
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|unassignAll
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iCurrentAssignmentTable
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|Lecture
name|lecture
init|=
name|getLecture
argument_list|(
operator|(
name|Long
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|==
literal|null
condition|)
continue|continue;
name|Placement
name|placement
init|=
name|getPlacement
argument_list|(
name|lecture
argument_list|,
operator|(
name|Placement
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
name|assign
argument_list|(
name|placement
argument_list|)
expr_stmt|;
block|}
block|}
name|iCurrentAssignmentTable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iBestAssignmentRecords
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iInitialAssignmentTable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iProgress
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|iSolutionId
operator|!=
literal|null
condition|)
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"General.SolutionId"
argument_list|,
name|iSolutionId
argument_list|)
expr_stmt|;
name|iLoadedDate
operator|=
operator|new
name|Date
argument_list|()
expr_stmt|;
name|iWorking
operator|=
literal|false
expr_stmt|;
name|afterLoad
argument_list|()
expr_stmt|;
name|Progress
operator|.
name|getInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
operator|.
name|setStatus
argument_list|(
literal|"Awaiting commands ..."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ConflictStatisticsInfo
name|getCbsInfo
parameter_list|()
block|{
name|ConflictStatistics
name|cbs
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Extension
name|ext
range|:
name|getExtensions
argument_list|()
control|)
block|{
if|if
condition|(
name|ext
operator|instanceof
name|ConflictStatistics
condition|)
block|{
name|cbs
operator|=
operator|(
name|ConflictStatistics
operator|)
name|ext
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|cbs
operator|==
literal|null
operator|||
name|cbs
operator|.
name|getNoGoods
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|iCbsInfo
operator|!=
literal|null
condition|)
return|return
name|iCbsInfo
return|;
return|return
literal|null
return|;
block|}
name|ConflictStatisticsInfo
name|info
init|=
operator|new
name|ConflictStatisticsInfo
argument_list|()
decl_stmt|;
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|info
operator|.
name|load
argument_list|(
name|this
argument_list|,
name|cbs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
annotation|@
name|Override
specifier|public
name|ConflictStatisticsInfo
name|getCbsInfo
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
name|ConflictStatistics
name|cbs
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Extension
name|ext
range|:
name|getExtensions
argument_list|()
control|)
block|{
if|if
condition|(
name|ext
operator|instanceof
name|ConflictStatistics
condition|)
block|{
name|cbs
operator|=
operator|(
name|ConflictStatistics
operator|)
name|ext
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|cbs
operator|==
literal|null
operator|||
name|cbs
operator|.
name|getNoGoods
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|iCbsInfo
operator|!=
literal|null
condition|)
return|return
name|iCbsInfo
return|;
return|return
literal|null
return|;
block|}
name|ConflictStatisticsInfo
name|info
init|=
operator|new
name|ConflictStatisticsInfo
argument_list|()
decl_stmt|;
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|info
operator|.
name|load
argument_list|(
name|this
argument_list|,
name|cbs
argument_list|,
name|classId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
annotation|@
name|Override
specifier|public
name|SolverUnassignedClassesModel
name|getUnassignedClassesModel
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|new
name|SolverUnassignedClassesModel
argument_list|(
name|this
argument_list|,
name|prefix
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|match
parameter_list|(
name|Query
name|q
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|q
operator|==
literal|null
operator|||
name|q
operator|.
name|match
argument_list|(
operator|new
name|TermMatcher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|attr
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|term
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|attr
operator|==
literal|null
condition|)
block|{
name|term
label|:
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|term
argument_list|,
literal|" ,"
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|termToken
init|=
name|s
operator|.
name|nextToken
argument_list|()
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|t
init|=
operator|new
name|StringTokenizer
argument_list|(
name|name
argument_list|,
literal|" ,"
argument_list|)
init|;
name|t
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|token
init|=
name|t
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|termToken
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
continue|continue
name|term
continue|;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
if|else if
condition|(
literal|"regex"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"regexp"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"re"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
name|name
operator|.
name|matches
argument_list|(
name|term
argument_list|)
return|;
block|}
if|else if
condition|(
literal|"find"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
name|name
operator|.
name|toLowerCase
argument_list|()
operator|.
name|indexOf
argument_list|(
name|term
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|>=
literal|0
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
specifier|static
enum|enum
name|Size
block|{
name|eq
block|,
name|lt
block|,
name|gt
block|,
name|le
block|,
name|ge
block|}
empty_stmt|;
specifier|private
name|boolean
name|match
parameter_list|(
name|Query
name|q
parameter_list|,
specifier|final
name|RoomConstraint
name|rc
parameter_list|)
block|{
return|return
name|q
operator|==
literal|null
operator|||
name|q
operator|.
name|match
argument_list|(
operator|new
name|TermMatcher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|attr
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|term
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|attr
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|rc
operator|.
name|getName
argument_list|()
argument_list|,
literal|" ,"
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|token
init|=
name|s
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
name|token
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
if|else if
condition|(
literal|"regex"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"regexp"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"re"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
name|rc
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
name|term
argument_list|)
return|;
block|}
if|else if
condition|(
literal|"find"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
name|rc
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|indexOf
argument_list|(
name|term
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|>=
literal|0
return|;
block|}
if|else if
condition|(
literal|"type"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|&&
name|rc
operator|.
name|getType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|RoomType
name|type
init|=
name|RoomTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|rc
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|type
operator|!=
literal|null
operator|&&
operator|(
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
argument_list|)
operator|||
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|)
return|;
block|}
if|else if
condition|(
literal|"size"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
name|int
name|min
init|=
literal|0
decl_stmt|,
name|max
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|Size
name|prefix
init|=
name|Size
operator|.
name|eq
decl_stmt|;
name|String
name|number
init|=
name|term
decl_stmt|;
if|if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|"<="
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Size
operator|.
name|le
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|">="
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Size
operator|.
name|ge
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|"<"
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Size
operator|.
name|lt
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|">"
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Size
operator|.
name|gt
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Size
operator|.
name|eq
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|int
name|a
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|prefix
condition|)
block|{
case|case
name|eq
case|:
name|min
operator|=
name|max
operator|=
name|a
expr_stmt|;
break|break;
comment|// = a
case|case
name|le
case|:
name|max
operator|=
name|a
expr_stmt|;
break|break;
comment|//<= a
case|case
name|ge
case|:
name|min
operator|=
name|a
expr_stmt|;
break|break;
comment|//>= a
case|case
name|lt
case|:
name|max
operator|=
name|a
operator|-
literal|1
expr_stmt|;
break|break;
comment|//< a
case|case
name|gt
case|:
name|min
operator|=
name|a
operator|+
literal|1
expr_stmt|;
break|break;
comment|//> a
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|term
operator|.
name|contains
argument_list|(
literal|".."
argument_list|)
condition|)
block|{
try|try
block|{
name|String
name|a
init|=
name|term
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|term
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|b
init|=
name|term
operator|.
name|substring
argument_list|(
name|term
operator|.
name|indexOf
argument_list|(
literal|".."
argument_list|)
operator|+
literal|2
argument_list|)
decl_stmt|;
name|min
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|max
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
block|}
return|return
name|min
operator|<=
name|rc
operator|.
name|getCapacity
argument_list|()
operator|&&
name|rc
operator|.
name|getCapacity
argument_list|()
operator|<=
name|max
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Vector
name|getTimetableGridTables
parameter_list|(
name|TimetableGridContext
name|context
parameter_list|)
block|{
name|Vector
name|models
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
operator|(
name|context
operator|.
name|getFilter
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|Query
argument_list|(
name|context
operator|.
name|getFilter
argument_list|()
argument_list|)
operator|)
decl_stmt|;
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|TimetableModel
name|model
init|=
operator|(
name|TimetableModel
operator|)
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|context
operator|.
name|getResourceType
argument_list|()
condition|)
block|{
case|case
name|TimetableGridModel
operator|.
name|sResourceTypeRoom
case|:
for|for
control|(
name|RoomConstraint
name|rc
range|:
name|model
operator|.
name|getRoomConstraints
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|match
argument_list|(
name|q
argument_list|,
name|rc
argument_list|)
condition|)
continue|continue;
name|models
operator|.
name|add
argument_list|(
operator|new
name|SolverGridModel
argument_list|(
name|this
argument_list|,
name|rc
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TimetableGridModel
operator|.
name|sResourceTypeInstructor
case|:
for|for
control|(
name|InstructorConstraint
name|ic
range|:
name|model
operator|.
name|getInstructorConstraints
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|match
argument_list|(
name|q
argument_list|,
name|ic
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
name|models
operator|.
name|add
argument_list|(
operator|new
name|SolverGridModel
argument_list|(
name|this
argument_list|,
name|ic
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TimetableGridModel
operator|.
name|sResourceTypeDepartment
case|:
for|for
control|(
name|DepartmentSpreadConstraint
name|dc
range|:
name|model
operator|.
name|getDepartmentSpreadConstraints
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|match
argument_list|(
name|q
argument_list|,
name|dc
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
name|models
operator|.
name|add
argument_list|(
operator|new
name|SolverGridModel
argument_list|(
name|this
argument_list|,
name|dc
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|model
operator|.
name|getDepartmentSpreadConstraints
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|assignment
init|=
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Department
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|dept2class
init|=
operator|new
name|HashMap
argument_list|<
name|Department
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|pair
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c.controllingDept, c.uniqueId from Class_ c where c.managingDept.solverGroup.uniqueId in :solverGroupIds"
argument_list|)
operator|.
name|setParameterList
argument_list|(
literal|"solverGroupIds"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|,
operator|new
name|LongType
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Department
name|dept
init|=
operator|(
name|Department
operator|)
name|pair
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|classId
init|=
operator|(
name|Long
operator|)
name|pair
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|classIds
init|=
name|dept2class
operator|.
name|get
argument_list|(
name|dept
argument_list|)
decl_stmt|;
if|if
condition|(
name|classIds
operator|==
literal|null
condition|)
block|{
name|classIds
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|dept2class
operator|.
name|put
argument_list|(
name|dept
argument_list|,
name|classIds
argument_list|)
expr_stmt|;
block|}
name|classIds
operator|.
name|add
argument_list|(
name|classId
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Department
name|d
range|:
operator|new
name|TreeSet
argument_list|<
name|Department
argument_list|>
argument_list|(
name|dept2class
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|match
argument_list|(
name|q
argument_list|,
name|d
operator|.
name|getShortLabel
argument_list|()
argument_list|)
condition|)
continue|continue;
name|Set
argument_list|<
name|Long
argument_list|>
name|classIds
init|=
name|dept2class
operator|.
name|get
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|int
name|size
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Placement
argument_list|>
name|placements
init|=
operator|new
name|ArrayList
argument_list|<
name|Placement
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
if|if
condition|(
name|classIds
operator|.
name|contains
argument_list|(
name|lecture
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
block|{
name|size
operator|++
expr_stmt|;
name|Placement
name|placement
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|lecture
argument_list|)
decl_stmt|;
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
name|placements
operator|.
name|add
argument_list|(
name|placement
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|size
operator|>
literal|0
condition|)
name|models
operator|.
name|add
argument_list|(
operator|new
name|SolverGridModel
argument_list|(
name|this
argument_list|,
name|TimetableGridModel
operator|.
name|sResourceTypeDepartment
argument_list|,
name|d
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|d
operator|.
name|getShortLabel
argument_list|()
argument_list|,
name|size
argument_list|,
name|placements
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|TimetableGridModel
operator|.
name|sResourceTypeCurriculum
case|:
name|Hashtable
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Student
argument_list|>
argument_list|>
name|curricula
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Student
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|hasCurricula
init|=
literal|false
decl_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|ignore
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|,
name|tested
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Student
name|student
range|:
name|model
operator|.
name|getAllStudents
argument_list|()
control|)
block|{
if|if
condition|(
name|student
operator|.
name|getCurriculum
argument_list|()
operator|!=
literal|null
operator|&&
name|student
operator|.
name|getAcademicClassification
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|hasCurricula
condition|)
block|{
name|curricula
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hasCurricula
operator|=
literal|true
expr_stmt|;
block|}
name|String
name|c
init|=
name|student
operator|.
name|getCurriculum
argument_list|()
operator|+
literal|" "
operator|+
name|student
operator|.
name|getAcademicClassification
argument_list|()
decl_stmt|;
if|if
condition|(
name|tested
operator|.
name|add
argument_list|(
name|c
argument_list|)
operator|&&
operator|!
name|match
argument_list|(
name|q
argument_list|,
name|c
argument_list|)
condition|)
name|ignore
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|ignore
operator|.
name|contains
argument_list|(
name|c
argument_list|)
condition|)
continue|continue;
name|List
argument_list|<
name|Student
argument_list|>
name|students
init|=
name|curricula
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|students
operator|==
literal|null
condition|)
block|{
name|students
operator|=
operator|new
name|ArrayList
argument_list|<
name|Student
argument_list|>
argument_list|()
expr_stmt|;
name|curricula
operator|.
name|put
argument_list|(
name|c
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
name|students
operator|.
name|add
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|hasCurricula
operator|&&
name|student
operator|.
name|getAcademicArea
argument_list|()
operator|!=
literal|null
operator|&&
name|student
operator|.
name|getAcademicClassification
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|c
init|=
name|student
operator|.
name|getAcademicArea
argument_list|()
operator|+
operator|(
name|student
operator|.
name|getMajor
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|student
operator|.
name|getMajor
argument_list|()
operator|)
operator|+
literal|" "
operator|+
name|student
operator|.
name|getAcademicClassification
argument_list|()
decl_stmt|;
if|if
condition|(
name|tested
operator|.
name|add
argument_list|(
name|c
argument_list|)
operator|&&
operator|!
name|match
argument_list|(
name|q
argument_list|,
name|c
argument_list|)
condition|)
name|ignore
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|ignore
operator|.
name|contains
argument_list|(
name|c
argument_list|)
condition|)
continue|continue;
name|List
argument_list|<
name|Student
argument_list|>
name|students
init|=
name|curricula
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|students
operator|==
literal|null
condition|)
block|{
name|students
operator|=
operator|new
name|ArrayList
argument_list|<
name|Student
argument_list|>
argument_list|()
expr_stmt|;
name|curricula
operator|.
name|put
argument_list|(
name|c
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
name|students
operator|.
name|add
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Student
argument_list|>
argument_list|>
name|curriculum
range|:
name|curricula
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|models
operator|.
name|add
argument_list|(
operator|new
name|SolverGridModel
argument_list|(
name|this
argument_list|,
name|curriculum
operator|.
name|getKey
argument_list|()
argument_list|,
name|curriculum
operator|.
name|getValue
argument_list|()
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TimetableGridModel
operator|.
name|sResourceTypeSubjectArea
case|:
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|assignment
init|=
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|SubjectArea
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|sa2class
init|=
operator|new
name|HashMap
argument_list|<
name|SubjectArea
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|pair
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select co.subjectArea, c.uniqueId from Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co where co.isControl = true and c.managingDept.solverGroup.uniqueId in :solverGroupIds"
argument_list|)
operator|.
name|setParameterList
argument_list|(
literal|"solverGroupIds"
argument_list|,
name|getOwnerId
argument_list|()
argument_list|,
operator|new
name|LongType
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|SubjectArea
name|sa
init|=
operator|(
name|SubjectArea
operator|)
name|pair
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|classId
init|=
operator|(
name|Long
operator|)
name|pair
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|classIds
init|=
name|sa2class
operator|.
name|get
argument_list|(
name|sa
argument_list|)
decl_stmt|;
if|if
condition|(
name|classIds
operator|==
literal|null
condition|)
block|{
name|classIds
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|sa2class
operator|.
name|put
argument_list|(
name|sa
argument_list|,
name|classIds
argument_list|)
expr_stmt|;
block|}
name|classIds
operator|.
name|add
argument_list|(
name|classId
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SubjectArea
name|sa
range|:
operator|new
name|TreeSet
argument_list|<
name|SubjectArea
argument_list|>
argument_list|(
name|sa2class
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|match
argument_list|(
name|q
argument_list|,
name|sa
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
condition|)
continue|continue;
name|Set
argument_list|<
name|Long
argument_list|>
name|classIds
init|=
name|sa2class
operator|.
name|get
argument_list|(
name|sa
argument_list|)
decl_stmt|;
name|int
name|size
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Placement
argument_list|>
name|placements
init|=
operator|new
name|ArrayList
argument_list|<
name|Placement
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
if|if
condition|(
name|classIds
operator|.
name|contains
argument_list|(
name|lecture
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
block|{
name|size
operator|++
expr_stmt|;
name|Placement
name|placement
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|lecture
argument_list|)
decl_stmt|;
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
name|placements
operator|.
name|add
argument_list|(
name|placement
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|size
operator|>
literal|0
condition|)
name|models
operator|.
name|add
argument_list|(
operator|new
name|SolverGridModel
argument_list|(
name|this
argument_list|,
name|TimetableGridModel
operator|.
name|sResourceTypeSubjectArea
argument_list|,
name|sa
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|sa
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|,
name|size
argument_list|,
name|placements
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TimetableGridModel
operator|.
name|sResourceTypeStudentGroup
case|:
for|for
control|(
name|StudentGroup
name|group
range|:
name|model
operator|.
name|getStudentGroups
argument_list|()
control|)
block|{
if|if
condition|(
name|match
argument_list|(
name|q
argument_list|,
name|group
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
name|models
operator|.
name|add
argument_list|(
operator|new
name|SolverGridModel
argument_list|(
name|this
argument_list|,
name|group
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|models
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClassAssignmentDetails
name|getClassAssignmentDetails
parameter_list|(
name|Long
name|classId
parameter_list|,
name|boolean
name|includeConstraints
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|TimetableModel
name|model
init|=
operator|(
name|TimetableModel
operator|)
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
decl_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
name|model
operator|.
name|variables
argument_list|()
control|)
block|{
if|if
condition|(
name|lecture
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|classId
argument_list|)
condition|)
return|return
operator|new
name|ClassAssignmentDetails
argument_list|(
name|this
argument_list|,
name|lecture
argument_list|,
name|includeConstraints
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Suggestions
name|getSuggestions
parameter_list|(
name|SuggestionsModel
name|model
parameter_list|)
block|{
if|if
condition|(
name|iWorking
condition|)
return|return
literal|null
return|;
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|new
name|Suggestions
argument_list|(
name|this
argument_list|,
name|model
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|AssignmentPreferenceInfo
name|getInfo
parameter_list|(
name|Hint
name|hint
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|hint
operator|.
name|getInfo
argument_list|(
name|this
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNotValidReason
parameter_list|(
name|Hint
name|hint
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|hint
operator|.
name|getNotValidReason
argument_list|(
name|this
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|assign
parameter_list|(
name|Collection
name|hints
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Hashtable
name|initialAssignments
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Placement
name|placement
range|:
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
operator|.
name|assignedValues
argument_list|()
control|)
block|{
name|initialAssignments
operator|.
name|put
argument_list|(
name|placement
operator|.
name|variable
argument_list|()
argument_list|,
name|placement
argument_list|)
expr_stmt|;
block|}
name|AssignmentRecord
name|record
init|=
operator|new
name|AssignmentRecord
argument_list|(
name|this
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|hints
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Hint
name|hint
init|=
operator|(
name|Hint
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Placement
name|p
init|=
name|hint
operator|.
name|getPlacement
argument_list|(
operator|(
name|TimetableModel
operator|)
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|Placement
name|ini
init|=
operator|(
name|Placement
operator|)
name|initialAssignments
operator|.
name|get
argument_list|(
name|p
operator|.
name|variable
argument_list|()
argument_list|)
decl_stmt|;
name|record
operator|.
name|add
argument_list|(
name|ini
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|Progress
operator|.
name|getInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
operator|.
name|info
argument_list|(
name|p
operator|.
name|variable
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
operator|(
name|ini
operator|==
literal|null
condition|?
literal|"not assigned"
else|:
name|ini
operator|.
name|getLongName
argument_list|(
name|useAmPm
argument_list|()
argument_list|)
operator|)
operator|+
literal|"&rarr; "
operator|+
name|p
operator|.
name|getLongName
argument_list|(
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ini
operator|!=
literal|null
condition|)
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
operator|.
name|unassign
argument_list|(
literal|0
argument_list|,
name|p
operator|.
name|variable
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|hint
operator|.
name|getDays
argument_list|()
operator|==
literal|0
condition|)
block|{
name|Lecture
name|lecture
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Lecture
name|l
range|:
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
if|if
condition|(
name|l
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|hint
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
block|{
name|lecture
operator|=
name|l
expr_stmt|;
block|}
if|if
condition|(
name|lecture
operator|!=
literal|null
operator|&&
operator|!
name|lecture
operator|.
name|isCommitted
argument_list|()
condition|)
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
operator|.
name|unassign
argument_list|(
literal|0
argument_list|,
name|lecture
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|hints
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Hint
name|hint
init|=
operator|(
name|Hint
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Placement
name|p
init|=
name|hint
operator|.
name|getPlacement
argument_list|(
operator|(
name|TimetableModel
operator|)
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Lecture
name|lec
range|:
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|unassignedVariables
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|)
control|)
block|{
name|Placement
name|p
init|=
operator|(
name|Placement
operator|)
name|initialAssignments
operator|.
name|get
argument_list|(
name|lec
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|record
operator|.
name|add
argument_list|(
name|p
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Progress
operator|.
name|getInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
operator|.
name|info
argument_list|(
name|p
operator|.
name|variable
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|p
operator|.
name|getLongName
argument_list|(
name|useAmPm
argument_list|()
argument_list|)
operator|+
literal|"&rarr; not assigned"
argument_list|)
expr_stmt|;
block|}
block|}
name|record
operator|.
name|done
argument_list|()
expr_stmt|;
name|iAssignmentRecords
operator|.
name|addElement
argument_list|(
name|record
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Hashtable
name|conflictInfo
parameter_list|(
name|Collection
name|hints
parameter_list|)
block|{
name|Hashtable
name|conflictTable
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|HashSet
name|done
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|hints
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Hint
name|hint
init|=
operator|(
name|Hint
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Placement
name|p
init|=
name|hint
operator|.
name|getPlacement
argument_list|(
operator|(
name|TimetableModel
operator|)
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|Constraint
name|constraint
range|:
name|p
operator|.
name|variable
argument_list|()
operator|.
name|hardConstraints
argument_list|()
control|)
block|{
name|HashSet
name|conflicts
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|constraint
operator|.
name|computeConflicts
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|,
name|p
argument_list|,
name|conflicts
argument_list|)
expr_stmt|;
if|if
condition|(
name|conflicts
operator|!=
literal|null
operator|&&
operator|!
name|conflicts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|j
init|=
name|conflicts
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Placement
name|conflict
init|=
operator|(
name|Placement
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|Hint
name|confHint
init|=
operator|new
name|Hint
argument_list|(
name|this
argument_list|,
name|conflict
argument_list|)
decl_stmt|;
if|if
condition|(
name|done
operator|.
name|contains
argument_list|(
name|confHint
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|conflictTable
operator|.
name|containsKey
argument_list|(
name|confHint
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|constraint
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|constraint
operator|instanceof
name|RoomConstraint
condition|)
block|{
name|name
operator|=
literal|"Room "
operator|+
name|constraint
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|constraint
operator|instanceof
name|InstructorConstraint
condition|)
block|{
name|name
operator|=
literal|"Instructor "
operator|+
name|constraint
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|constraint
operator|instanceof
name|GroupConstraint
condition|)
block|{
name|name
operator|=
literal|"Distribution "
operator|+
name|constraint
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|constraint
operator|instanceof
name|DepartmentSpreadConstraint
condition|)
block|{
name|name
operator|=
literal|"Balancing of department "
operator|+
name|constraint
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|constraint
operator|instanceof
name|SpreadConstraint
condition|)
block|{
name|name
operator|=
literal|"Same subpart spread "
operator|+
name|constraint
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|constraint
operator|instanceof
name|ClassLimitConstraint
condition|)
block|{
name|name
operator|=
literal|"Class limit "
operator|+
name|constraint
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|conflictTable
operator|.
name|put
argument_list|(
name|confHint
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|done
operator|.
name|add
argument_list|(
name|hint
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|conflictTable
return|;
block|}
specifier|public
name|Long
index|[]
name|getOwnerId
parameter_list|()
block|{
return|return
name|getProperties
argument_list|()
operator|.
name|getPropertyLongArry
argument_list|(
literal|"General.SolverGroupId"
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|HashSet
name|iDepartmentIds
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Set
name|getDepartmentIds
parameter_list|()
block|{
if|if
condition|(
name|iDepartmentIds
operator|!=
literal|null
condition|)
return|return
name|iDepartmentIds
return|;
name|iDepartmentIds
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|Long
name|ownerId
index|[]
init|=
name|getOwnerId
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ownerId
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SolverGroup
name|sg
init|=
operator|(
operator|new
name|SolverGroupDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|ownerId
index|[
name|i
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|sg
operator|.
name|getDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|iDepartmentIds
operator|.
name|add
argument_list|(
operator|(
operator|(
name|Department
operator|)
name|j
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|iDepartmentIds
return|;
block|}
annotation|@
name|Override
specifier|public
name|Assignment
name|getAssignment
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
name|Department
name|dept
init|=
name|clazz
operator|.
name|getManagingDept
argument_list|()
decl_stmt|;
if|if
condition|(
name|dept
operator|!=
literal|null
operator|&&
name|getDepartmentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|dept
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
return|return
name|getAssignment
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
return|return
name|iCommitedClassAssignmentProxy
operator|.
name|getAssignment
argument_list|(
name|clazz
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Assignment
name|getAssignment
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Lecture
name|lecture
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Lecture
name|l
range|:
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
if|if
condition|(
name|l
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|classId
argument_list|)
condition|)
block|{
name|lecture
operator|=
name|l
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|lecture
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Placement
name|placement
init|=
operator|(
name|Placement
operator|)
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|lecture
argument_list|)
decl_stmt|;
if|if
condition|(
name|placement
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Assignment
name|assignment
init|=
operator|new
name|Assignment
argument_list|()
decl_stmt|;
name|assignment
operator|.
name|setClassName
argument_list|(
name|lecture
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setDays
argument_list|(
operator|new
name|Integer
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setStartSlot
argument_list|(
operator|new
name|Integer
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDatePatternId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assignment
operator|.
name|setDatePattern
argument_list|(
name|DatePatternDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDatePatternId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assignment
operator|.
name|setSlotsPerMtg
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setBreakTime
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|HashSet
name|rooms
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|placement
operator|.
name|isMultiRoom
argument_list|()
condition|)
block|{
for|for
control|(
name|RoomLocation
name|r
range|:
name|placement
operator|.
name|getRoomLocations
argument_list|()
control|)
block|{
name|Location
name|room
init|=
operator|(
operator|new
name|LocationDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|room
operator|!=
literal|null
condition|)
name|rooms
operator|.
name|add
argument_list|(
name|room
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Location
name|room
init|=
operator|(
operator|new
name|LocationDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|placement
operator|.
name|getRoomLocation
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|room
operator|!=
literal|null
condition|)
name|rooms
operator|.
name|add
argument_list|(
name|room
argument_list|)
expr_stmt|;
block|}
name|assignment
operator|.
name|setRooms
argument_list|(
name|rooms
argument_list|)
expr_stmt|;
name|TimePattern
name|pattern
init|=
operator|(
operator|new
name|TimePatternDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getTimePatternId
argument_list|()
argument_list|)
decl_stmt|;
name|assignment
operator|.
name|setTimePattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|HashSet
name|instructors
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|InstructorConstraint
name|ic
range|:
name|lecture
operator|.
name|getInstructorConstraints
argument_list|()
control|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ic
operator|.
name|getResourceId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|instructor
operator|=
operator|(
operator|new
name|DepartmentalInstructorDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|ic
operator|.
name|getResourceId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|instructor
operator|!=
literal|null
condition|)
name|instructors
operator|.
name|add
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
block|}
name|assignment
operator|.
name|setInstructors
argument_list|(
name|instructors
argument_list|)
expr_stmt|;
return|return
name|assignment
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|AssignmentPreferenceInfo
name|getAssignmentInfo
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
name|Department
name|dept
init|=
name|clazz
operator|.
name|getManagingDept
argument_list|()
decl_stmt|;
if|if
condition|(
name|dept
operator|!=
literal|null
operator|&&
name|getDepartmentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|dept
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
return|return
name|getAssignmentInfo
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
return|return
name|iCommitedClassAssignmentProxy
operator|.
name|getAssignmentInfo
argument_list|(
name|clazz
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|AssignmentPreferenceInfo
name|getAssignmentInfo
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Lecture
name|lecture
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Lecture
name|l
range|:
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
if|if
condition|(
name|l
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|classId
argument_list|)
condition|)
block|{
name|lecture
operator|=
name|l
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|lecture
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Placement
name|placement
init|=
operator|(
name|Placement
operator|)
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|lecture
argument_list|)
decl_stmt|;
if|if
condition|(
name|placement
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|AssignmentPreferenceInfo
argument_list|(
name|this
argument_list|,
name|placement
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Hashtable
name|getAssignmentTable
parameter_list|(
name|Collection
name|classesOrClassIds
parameter_list|)
block|{
name|Hashtable
name|assignments
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|classesOrClassIds
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|classOrClassId
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|classOrClassId
operator|instanceof
name|Object
index|[]
condition|)
name|classOrClassId
operator|=
operator|(
operator|(
name|Object
index|[]
operator|)
name|classOrClassId
operator|)
index|[
literal|0
index|]
expr_stmt|;
name|Assignment
name|assignment
init|=
operator|(
name|classOrClassId
operator|instanceof
name|Class_
condition|?
name|getAssignment
argument_list|(
operator|(
name|Class_
operator|)
name|classOrClassId
argument_list|)
else|:
name|getAssignment
argument_list|(
operator|(
name|Long
operator|)
name|classOrClassId
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
name|assignments
operator|.
name|put
argument_list|(
name|classOrClassId
operator|instanceof
name|Class_
condition|?
operator|(
operator|(
name|Class_
operator|)
name|classOrClassId
operator|)
operator|.
name|getUniqueId
argument_list|()
else|:
operator|(
name|Long
operator|)
name|classOrClassId
argument_list|,
name|assignment
argument_list|)
expr_stmt|;
block|}
return|return
name|assignments
return|;
block|}
annotation|@
name|Override
specifier|public
name|Hashtable
name|getAssignmentTable2
parameter_list|(
name|Collection
name|classesOrClassIds
parameter_list|)
block|{
return|return
name|getAssignmentTable
argument_list|(
name|classesOrClassIds
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Hashtable
name|getAssignmentInfoTable
parameter_list|(
name|Collection
name|classesOrClassIds
parameter_list|)
block|{
name|Hashtable
name|infos
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|classesOrClassIds
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|classOrClassId
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|classOrClassId
operator|instanceof
name|Object
index|[]
condition|)
name|classOrClassId
operator|=
operator|(
operator|(
name|Object
index|[]
operator|)
name|classOrClassId
operator|)
index|[
literal|0
index|]
expr_stmt|;
name|AssignmentPreferenceInfo
name|info
init|=
operator|(
name|classOrClassId
operator|instanceof
name|Class_
condition|?
name|getAssignmentInfo
argument_list|(
operator|(
name|Class_
operator|)
name|classOrClassId
argument_list|)
else|:
name|getAssignmentInfo
argument_list|(
operator|(
name|Long
operator|)
name|classOrClassId
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
name|infos
operator|.
name|put
argument_list|(
name|classOrClassId
operator|instanceof
name|Class_
condition|?
operator|(
operator|(
name|Class_
operator|)
name|classOrClassId
operator|)
operator|.
name|getUniqueId
argument_list|()
else|:
operator|(
name|Long
operator|)
name|classOrClassId
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
return|return
name|infos
return|;
block|}
annotation|@
name|Override
specifier|public
name|Hashtable
name|getAssignmentInfoTable2
parameter_list|(
name|Collection
name|classesOrClassIds
parameter_list|)
block|{
return|return
name|getAssignmentInfoTable
argument_list|(
name|classesOrClassIds
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Vector
name|getAssignmentRecords
parameter_list|()
block|{
return|return
name|iAssignmentRecords
return|;
block|}
annotation|@
name|Override
specifier|public
name|Vector
name|getChangesToInitial
parameter_list|()
block|{
name|Vector
name|ret
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|Lecture
name|lecture
range|:
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
argument_list|,
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|lecture
argument_list|)
argument_list|)
condition|)
block|{
name|RecordedAssignment
name|a
init|=
operator|new
name|RecordedAssignment
argument_list|(
name|this
argument_list|,
operator|(
name|Placement
operator|)
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
argument_list|,
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|lecture
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|a
operator|.
name|getBefore
argument_list|()
operator|.
name|setDetails
argument_list|(
operator|new
name|ClassAssignmentDetails
argument_list|(
name|this
argument_list|,
name|lecture
argument_list|,
operator|(
name|Placement
operator|)
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|lecture
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|a
operator|.
name|getAfter
argument_list|()
operator|.
name|setDetails
argument_list|(
operator|new
name|ClassAssignmentDetails
argument_list|(
name|this
argument_list|,
name|lecture
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|addElement
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|Vector
name|getAssignedClasses
parameter_list|()
block|{
name|Vector
name|ret
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|Lecture
name|lecture
range|:
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
operator|.
name|assignedVariables
argument_list|()
control|)
block|{
name|ret
operator|.
name|addElement
argument_list|(
operator|new
name|ClassAssignmentDetails
argument_list|(
name|this
argument_list|,
name|lecture
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|Vector
name|getAssignedClasses
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|Vector
name|ret
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|Lecture
name|lecture
range|:
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
operator|.
name|assignedVariables
argument_list|()
control|)
block|{
if|if
condition|(
name|prefix
operator|==
literal|null
operator|||
name|lecture
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
name|ret
operator|.
name|addElement
argument_list|(
operator|new
name|ClassAssignmentDetails
argument_list|(
name|this
argument_list|,
name|lecture
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|Vector
name|getChangesToBest
parameter_list|()
block|{
name|Vector
name|ret
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|Lecture
name|lecture
range|:
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
name|Placement
name|placement
init|=
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|lecture
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|lecture
operator|.
name|getBestAssignment
argument_list|()
argument_list|,
name|placement
argument_list|)
condition|)
block|{
name|RecordedAssignment
name|a
init|=
operator|new
name|RecordedAssignment
argument_list|(
name|this
argument_list|,
operator|(
name|Placement
operator|)
name|lecture
operator|.
name|getBestAssignment
argument_list|()
argument_list|,
name|placement
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|.
name|getBestAssignment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|a
operator|.
name|getBefore
argument_list|()
operator|.
name|setDetails
argument_list|(
operator|new
name|ClassAssignmentDetails
argument_list|(
name|this
argument_list|,
name|lecture
argument_list|,
operator|(
name|Placement
operator|)
name|lecture
operator|.
name|getBestAssignment
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
block|{
name|a
operator|.
name|getAfter
argument_list|()
operator|.
name|setDetails
argument_list|(
operator|new
name|ClassAssignmentDetails
argument_list|(
name|this
argument_list|,
name|lecture
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|addElement
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|Vector
name|getChangesToSolution
parameter_list|(
name|Long
name|solutionId
parameter_list|)
block|{
return|return
name|getChangesToSolution
argument_list|(
name|solutionId
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|Vector
name|getChangesToSolution
parameter_list|(
name|Long
name|solutionId
parameter_list|,
name|boolean
name|closeSession
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Session
name|hibSession
init|=
operator|(
operator|new
name|SolutionDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
name|Vector
name|ret
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Solution
name|solution
init|=
operator|(
operator|new
name|SolutionDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|solutionId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|solution
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Long
name|ownerId
init|=
name|solution
operator|.
name|getOwner
argument_list|()
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
name|Long
index|[]
name|ownerIds
init|=
name|getOwnerId
argument_list|()
decl_stmt|;
name|boolean
name|sameOwner
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ownerIds
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|ownerId
operator|.
name|equals
argument_list|(
name|ownerIds
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|sameOwner
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|sameOwner
condition|)
return|return
literal|null
return|;
name|HashSet
name|ids
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|solution
operator|.
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Assignment
name|assignment
init|=
operator|(
name|Assignment
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Lecture
name|lecture
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Lecture
name|l
range|:
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
if|if
condition|(
name|l
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|assignment
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
block|{
name|lecture
operator|=
name|l
expr_stmt|;
break|break;
block|}
block|}
name|ids
operator|.
name|add
argument_list|(
name|assignment
operator|.
name|getClassId
argument_list|()
argument_list|)
expr_stmt|;
name|Placement
name|placement
init|=
operator|(
name|lecture
operator|==
literal|null
condition|?
literal|null
else|:
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|lecture
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|==
literal|null
operator|||
name|placement
operator|==
literal|null
condition|)
block|{
name|RecordedAssignment
name|a
init|=
operator|new
name|RecordedAssignment
argument_list|(
name|this
argument_list|,
name|assignment
operator|.
name|getPlacement
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|a
operator|.
name|getBefore
argument_list|()
operator|.
name|setDetails
argument_list|(
operator|new
name|ClassAssignmentDetails
argument_list|(
name|solution
argument_list|,
name|assignment
argument_list|,
literal|false
argument_list|,
name|hibSession
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|addElement
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|placement
operator|.
name|equals
argument_list|(
name|assignment
operator|.
name|getPlacement
argument_list|()
argument_list|)
condition|)
continue|continue;
name|RecordedAssignment
name|a
init|=
operator|new
name|RecordedAssignment
argument_list|(
name|this
argument_list|,
name|assignment
operator|.
name|getPlacement
argument_list|()
argument_list|,
name|placement
argument_list|)
decl_stmt|;
name|a
operator|.
name|getBefore
argument_list|()
operator|.
name|setDetails
argument_list|(
operator|new
name|ClassAssignmentDetails
argument_list|(
name|solution
argument_list|,
name|assignment
argument_list|,
literal|false
argument_list|,
name|hibSession
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|getAfter
argument_list|()
operator|.
name|setDetails
argument_list|(
operator|new
name|ClassAssignmentDetails
argument_list|(
name|this
argument_list|,
name|lecture
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|addElement
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Lecture
name|lecture
range|:
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
name|Placement
name|placement
init|=
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|lecture
argument_list|)
decl_stmt|;
if|if
condition|(
name|ids
operator|.
name|contains
argument_list|(
name|lecture
operator|.
name|getClassId
argument_list|()
argument_list|)
operator|||
name|placement
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
operator|!
name|ownerId
operator|.
name|equals
argument_list|(
name|lecture
operator|.
name|getSolverGroupId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|RecordedAssignment
name|a
init|=
operator|new
name|RecordedAssignment
argument_list|(
name|this
argument_list|,
literal|null
argument_list|,
name|placement
argument_list|)
decl_stmt|;
name|a
operator|.
name|getAfter
argument_list|()
operator|.
name|setDetails
argument_list|(
operator|new
name|ClassAssignmentDetails
argument_list|(
name|this
argument_list|,
name|lecture
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|addElement
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
comment|//here we still need to close the session since it can be called by the remote solver as well
if|if
condition|(
name|closeSession
operator|&&
name|hibSession
operator|!=
literal|null
operator|&&
name|hibSession
operator|.
name|isOpen
argument_list|()
condition|)
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|AssignmentRecord
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|transient
name|Solver
name|iSolver
decl_stmt|;
specifier|private
name|Date
name|iTimeStamp
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
specifier|private
name|Suggestion
name|iBefore
init|=
literal|null
decl_stmt|,
name|iAfter
init|=
literal|null
decl_stmt|;
specifier|private
name|Vector
name|iAssignments
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
specifier|public
name|AssignmentRecord
parameter_list|()
block|{
block|}
specifier|public
name|AssignmentRecord
parameter_list|(
name|Solver
name|solver
parameter_list|)
block|{
name|iSolver
operator|=
name|solver
expr_stmt|;
name|iBefore
operator|=
operator|new
name|Suggestion
argument_list|(
name|iSolver
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|done
parameter_list|()
block|{
name|iAfter
operator|=
operator|new
name|Suggestion
argument_list|(
name|iSolver
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|Placement
name|before
parameter_list|,
name|Placement
name|after
parameter_list|)
block|{
name|iAssignments
operator|.
name|add
argument_list|(
operator|new
name|RecordedAssignment
argument_list|(
name|iSolver
argument_list|,
name|before
argument_list|,
name|after
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Date
name|getTimeStamp
parameter_list|()
block|{
return|return
name|iTimeStamp
return|;
block|}
specifier|public
name|Suggestion
name|getBefore
parameter_list|()
block|{
return|return
name|iBefore
return|;
block|}
specifier|public
name|Suggestion
name|getAfter
parameter_list|()
block|{
return|return
name|iAfter
return|;
block|}
specifier|public
name|Vector
name|getAssignments
parameter_list|()
block|{
return|return
name|iAssignments
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Record{TS="
operator|+
name|iTimeStamp
operator|+
literal|", before="
operator|+
name|iBefore
operator|+
literal|", after="
operator|+
name|iAfter
operator|+
literal|", assignments="
operator|+
name|iAssignments
operator|.
name|size
argument_list|()
operator|+
literal|"}"
return|;
block|}
specifier|public
name|void
name|toXml
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
if|if
condition|(
name|iTimeStamp
operator|!=
literal|null
condition|)
name|element
operator|.
name|addAttribute
argument_list|(
literal|"timeStamp"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iTimeStamp
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iBefore
operator|!=
literal|null
condition|)
name|iBefore
operator|.
name|toXml
argument_list|(
name|element
operator|.
name|addElement
argument_list|(
literal|"before"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iAfter
operator|!=
literal|null
condition|)
name|iAfter
operator|.
name|toXml
argument_list|(
name|element
operator|.
name|addElement
argument_list|(
literal|"after"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iAssignments
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Enumeration
name|e
init|=
name|iAssignments
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|RecordedAssignment
name|ra
init|=
operator|(
name|RecordedAssignment
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|ra
operator|.
name|toXml
argument_list|(
name|element
operator|.
name|addElement
argument_list|(
literal|"assignment"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|AssignmentRecord
name|fromXml
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|AssignmentRecord
name|r
init|=
operator|new
name|AssignmentRecord
argument_list|()
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"timeStamp"
argument_list|)
operator|!=
literal|null
condition|)
name|r
operator|.
name|iTimeStamp
operator|=
operator|new
name|Date
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"timeStamp"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|.
name|element
argument_list|(
literal|"before"
argument_list|)
operator|!=
literal|null
condition|)
name|r
operator|.
name|iBefore
operator|=
name|Suggestion
operator|.
name|fromXml
argument_list|(
name|element
operator|.
name|element
argument_list|(
literal|"before"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|.
name|element
argument_list|(
literal|"after"
argument_list|)
operator|!=
literal|null
condition|)
name|r
operator|.
name|iAfter
operator|=
name|Suggestion
operator|.
name|fromXml
argument_list|(
name|element
operator|.
name|element
argument_list|(
literal|"after"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"assignment"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|r
operator|.
name|iAssignments
operator|.
name|add
argument_list|(
name|RecordedAssignment
operator|.
name|fromXml
argument_list|(
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|RecordedAssignment
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Hint
name|iBefore
init|=
literal|null
decl_stmt|,
name|iAfter
init|=
literal|null
decl_stmt|;
specifier|public
name|RecordedAssignment
parameter_list|(
name|Solver
name|solver
parameter_list|,
name|Placement
name|before
parameter_list|,
name|Placement
name|after
parameter_list|)
block|{
if|if
condition|(
name|before
operator|!=
literal|null
condition|)
name|iBefore
operator|=
operator|new
name|Hint
argument_list|(
name|solver
argument_list|,
name|before
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|after
operator|!=
literal|null
condition|)
name|iAfter
operator|=
operator|new
name|Hint
argument_list|(
name|solver
argument_list|,
name|after
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RecordedAssignment
parameter_list|(
name|Hint
name|before
parameter_list|,
name|Hint
name|after
parameter_list|)
block|{
name|iBefore
operator|=
name|before
expr_stmt|;
name|iAfter
operator|=
name|after
expr_stmt|;
block|}
specifier|public
name|Hint
name|getBefore
parameter_list|()
block|{
return|return
name|iBefore
return|;
block|}
specifier|public
name|Hint
name|getAfter
parameter_list|()
block|{
return|return
name|iAfter
return|;
block|}
specifier|public
name|void
name|toXml
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
if|if
condition|(
name|iBefore
operator|!=
literal|null
condition|)
name|iBefore
operator|.
name|toXml
argument_list|(
name|element
operator|.
name|addElement
argument_list|(
literal|"before"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iAfter
operator|!=
literal|null
condition|)
name|iAfter
operator|.
name|toXml
argument_list|(
name|element
operator|.
name|addElement
argument_list|(
literal|"after"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|RecordedAssignment
name|fromXml
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|Hint
name|before
init|=
literal|null
decl_stmt|,
name|after
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|element
argument_list|(
literal|"before"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|before
operator|=
name|Hint
operator|.
name|fromXml
argument_list|(
name|element
operator|.
name|element
argument_list|(
literal|"before"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|element
operator|.
name|element
argument_list|(
literal|"after"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|after
operator|=
name|Hint
operator|.
name|fromXml
argument_list|(
name|element
operator|.
name|element
argument_list|(
literal|"after"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|RecordedAssignment
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RoomReport
name|getRoomReport
parameter_list|(
name|BitSet
name|sessionDays
parameter_list|,
name|int
name|startDayDayOfWeek
parameter_list|,
name|Long
name|roomType
parameter_list|,
name|Float
name|nrWeeks
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|new
name|RoomReport
argument_list|(
name|this
argument_list|,
name|sessionDays
argument_list|,
name|startDayDayOfWeek
argument_list|,
name|roomType
argument_list|,
name|nrWeeks
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DeptBalancingReport
name|getDeptBalancingReport
parameter_list|()
block|{
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|new
name|DeptBalancingReport
argument_list|(
name|this
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ViolatedDistrPreferencesReport
name|getViolatedDistrPreferencesReport
parameter_list|()
block|{
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|new
name|ViolatedDistrPreferencesReport
argument_list|(
name|this
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DiscouragedInstructorBtbReport
name|getDiscouragedInstructorBtbReport
parameter_list|()
block|{
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|new
name|DiscouragedInstructorBtbReport
argument_list|(
name|this
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|StudentConflictsReport
name|getStudentConflictsReport
parameter_list|()
block|{
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|new
name|StudentConflictsReport
argument_list|(
name|this
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SameSubpartBalancingReport
name|getSameSubpartBalancingReport
parameter_list|()
block|{
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|new
name|SameSubpartBalancingReport
argument_list|(
name|this
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|PerturbationReport
name|getPerturbationReport
parameter_list|()
block|{
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|new
name|PerturbationReport
argument_list|(
name|this
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CSVFile
name|export
parameter_list|(
name|boolean
name|useAmPm
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|CSVFile
name|file
init|=
operator|new
name|CSVFile
argument_list|()
decl_stmt|;
name|file
operator|.
name|setSeparator
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|file
operator|.
name|setQuotationMark
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
name|file
operator|.
name|setHeader
argument_list|(
operator|new
name|CSVField
index|[]
block|{
operator|new
name|CSVField
argument_list|(
literal|"COURSE"
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
literal|"ITYPE"
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
literal|"SECTION"
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
literal|"SUFFIX"
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
literal|"DATE_PATTERN"
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
literal|"DAY"
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
literal|"START_TIME"
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
literal|"END_TIME"
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
literal|"ROOM"
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
literal|"INSTRUCTOR"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|Vector
name|lectures
init|=
operator|new
name|Vector
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|lectures
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|lectures
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Lecture
name|lecture
init|=
operator|(
name|Lecture
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Placement
name|placement
init|=
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|lecture
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|lecture
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|itype
init|=
literal|""
decl_stmt|;
name|String
name|section
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|section
operator|=
name|name
operator|.
name|substring
argument_list|(
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|' '
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|String
name|suffix
init|=
literal|""
decl_stmt|;
while|while
condition|(
name|section
operator|.
name|charAt
argument_list|(
name|section
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|>=
literal|'a'
operator|&&
name|section
operator|.
name|charAt
argument_list|(
name|section
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|<=
literal|'z'
condition|)
block|{
name|suffix
operator|=
name|section
operator|.
name|charAt
argument_list|(
name|section
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|+
name|suffix
expr_stmt|;
name|section
operator|=
name|section
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|section
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|itype
operator|=
name|name
operator|.
name|substring
argument_list|(
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|' '
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|Integer
operator|.
name|parseInt
argument_list|(
name|itype
argument_list|)
expr_stmt|;
name|itype
operator|=
name|name
operator|.
name|substring
argument_list|(
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|' '
argument_list|)
operator|+
literal|1
argument_list|)
operator|+
literal|" "
operator|+
name|itype
expr_stmt|;
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
name|file
operator|.
name|addLine
argument_list|(
operator|new
name|CSVField
index|[]
block|{
operator|new
name|CSVField
argument_list|(
name|name
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|itype
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|section
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|suffix
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|placement
operator|==
literal|null
condition|?
literal|""
else|:
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|placement
operator|==
literal|null
condition|?
literal|""
else|:
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDayHeader
argument_list|()
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|placement
operator|==
literal|null
condition|?
literal|""
else|:
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getStartTimeHeader
argument_list|(
name|useAmPm
argument_list|)
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|placement
operator|==
literal|null
condition|?
literal|""
else|:
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getEndTimeHeader
argument_list|(
name|useAmPm
argument_list|)
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|placement
operator|==
literal|null
condition|?
literal|""
else|:
name|placement
operator|.
name|getRoomName
argument_list|(
literal|","
argument_list|)
argument_list|)
block|,
operator|new
name|CSVField
argument_list|(
name|lecture
operator|.
name|getInstructorName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|lecture
operator|.
name|getInstructorName
argument_list|()
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|file
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasFinalSectioning
parameter_list|()
block|{
return|return
operator|(
operator|(
name|TimetableModel
operator|)
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|)
operator|.
name|getStudentSectioning
argument_list|()
operator|.
name|hasFinalSectioning
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasConflicts
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Assignment
argument_list|>
name|getConflicts
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|TimeBlock
argument_list|>
name|getConflictingTimeBlocks
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|save
parameter_list|()
block|{
name|save
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|SolverType
name|getType
parameter_list|()
block|{
return|return
name|SolverType
operator|.
name|COURSE
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
if|if
condition|(
name|super
operator|.
name|isRunning
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|iWorking
operator|&&
name|iWorkThread
operator|!=
literal|null
operator|&&
name|iWorkThread
operator|instanceof
name|InterruptibleThread
operator|&&
name|iWorkThread
operator|.
name|isAlive
argument_list|()
operator|&&
operator|!
name|iWorkThread
operator|.
name|isInterrupted
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stopSolver
parameter_list|()
block|{
if|if
condition|(
name|super
operator|.
name|isRunning
argument_list|()
condition|)
name|super
operator|.
name|stopSolver
argument_list|()
expr_stmt|;
if|if
condition|(
name|iWorking
operator|&&
name|iWorkThread
operator|!=
literal|null
operator|&&
name|iWorkThread
operator|instanceof
name|InterruptibleThread
operator|&&
name|iWorkThread
operator|.
name|isAlive
argument_list|()
operator|&&
operator|!
name|iWorkThread
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
try|try
block|{
name|iWorkThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|iWorkThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
block|}
end_class

end_unit

