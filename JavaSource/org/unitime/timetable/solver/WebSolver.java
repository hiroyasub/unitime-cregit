begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|jsp
operator|.
name|JspWriter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DistanceMetric
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ProgressListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameterDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameterGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverPredefinedSetting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolverPredefinedSettingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ExamSolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ExamSolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|RemoteExamSolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ExamSolver
operator|.
name|ExamSolverDisposeListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|remote
operator|.
name|BackupFileFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|remote
operator|.
name|RemoteSolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|remote
operator|.
name|RemoteSolverServerProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|remote
operator|.
name|SolverRegisterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|studentsct
operator|.
name|StudentSolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|studentsct
operator|.
name|StudentSolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|studentsct
operator|.
name|StudentSolver
operator|.
name|StudentSolverDisposeListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|tags
operator|.
name|SolverWarnings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|WebSolver
extends|extends
name|TimetableSolver
implements|implements
name|ProgressListener
block|{
specifier|protected
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|WebSolver
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|SimpleDateFormat
name|sDF
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd/yy hh:mmaa"
argument_list|)
decl_stmt|;
specifier|private
name|JspWriter
name|iJspWriter
decl_stmt|;
specifier|private
specifier|static
name|Hashtable
argument_list|<
name|String
argument_list|,
name|SolverProxy
argument_list|>
name|sSolvers
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Hashtable
argument_list|<
name|String
argument_list|,
name|ExamSolverProxy
argument_list|>
name|sExamSolvers
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Hashtable
argument_list|<
name|String
argument_list|,
name|StudentSolverProxy
argument_list|>
name|sStudentSolvers
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|SolverPassivationThread
name|sSolverPasivationThread
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|long
name|sMemoryLimit
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.solver.mem_limit"
argument_list|,
literal|"200"
argument_list|)
argument_list|)
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|//200 MB
specifier|private
specifier|static
name|boolean
name|sBackupWhenDone
init|=
literal|false
decl_stmt|;
specifier|public
name|WebSolver
parameter_list|(
name|DataProperties
name|properties
parameter_list|)
block|{
name|super
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|ExamSolverProxy
name|getExamSolver
parameter_list|(
name|String
name|puid
parameter_list|,
name|Long
name|sessionId
parameter_list|)
block|{
try|try
block|{
name|ExamSolverProxy
name|solver
init|=
name|sExamSolvers
operator|.
name|get
argument_list|(
name|puid
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sessionId
operator|!=
literal|null
operator|&&
operator|!
name|sessionId
operator|.
name|equals
argument_list|(
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SessionId"
argument_list|,
literal|null
argument_list|)
argument_list|)
condition|)
return|return
literal|null
return|;
return|return
name|solver
return|;
block|}
name|Set
name|servers
init|=
name|SolverRegisterService
operator|.
name|getInstance
argument_list|()
operator|.
name|getServers
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|servers
init|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|servers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RemoteSolverServerProxy
name|server
init|=
operator|(
name|RemoteSolverServerProxy
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|server
operator|.
name|isActive
argument_list|()
condition|)
continue|continue;
name|ExamSolverProxy
name|proxy
init|=
name|server
operator|.
name|getExamSolver
argument_list|(
name|puid
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sessionId
operator|!=
literal|null
operator|&&
operator|!
name|sessionId
operator|.
name|equals
argument_list|(
name|proxy
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SessionId"
argument_list|,
literal|null
argument_list|)
argument_list|)
condition|)
return|return
literal|null
return|;
return|return
name|proxy
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to retrieve solver, reason:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|ExamSolverProxy
name|getExamSolver
parameter_list|(
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
name|session
parameter_list|)
block|{
name|ExamSolverProxy
name|solver
init|=
operator|(
name|ExamSolverProxy
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"ExamSolverProxy"
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|solver
operator|instanceof
name|RemoteExamSolverProxy
operator|&&
operator|(
operator|(
name|RemoteExamSolverProxy
operator|)
name|solver
operator|)
operator|.
name|exists
argument_list|()
condition|)
return|return
name|solver
return|;
else|else
name|session
operator|.
name|removeAttribute
argument_list|(
literal|"ExamSolverProxy"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|session
operator|.
name|removeAttribute
argument_list|(
literal|"ExamSolverProxy"
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Session
name|acadSession
init|=
literal|null
decl_stmt|;
try|try
block|{
name|acadSession
operator|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|acadSession
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|TimetableManager
name|mgr
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|mgr
operator|.
name|canTimetableExams
argument_list|(
name|acadSession
argument_list|,
name|user
argument_list|)
condition|)
return|return
literal|null
return|;
name|String
name|puid
init|=
operator|(
name|String
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"ManageSolver.examPuid"
argument_list|)
decl_stmt|;
if|if
condition|(
name|puid
operator|!=
literal|null
condition|)
block|{
name|solver
operator|=
name|getExamSolver
argument_list|(
name|puid
argument_list|,
name|acadSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|setAttribute
argument_list|(
literal|"ExamSolverProxy"
argument_list|,
name|solver
argument_list|)
expr_stmt|;
return|return
name|solver
return|;
block|}
block|}
name|solver
operator|=
name|getExamSolver
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|,
name|acadSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"ExamSolverProxy"
argument_list|,
name|solver
argument_list|)
expr_stmt|;
return|return
name|solver
return|;
block|}
specifier|public
specifier|static
name|ExamSolverProxy
name|getExamSolverNoSessionCheck
parameter_list|(
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
name|session
parameter_list|)
block|{
try|try
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|puid
init|=
operator|(
name|String
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"ManageSolver.examPuid"
argument_list|)
decl_stmt|;
if|if
condition|(
name|puid
operator|!=
literal|null
condition|)
block|{
name|ExamSolverProxy
name|solver
init|=
name|getExamSolver
argument_list|(
name|puid
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
return|return
name|solver
return|;
block|}
return|return
name|getExamSolver
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to retrieve solver, reason:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|StudentSolverProxy
name|getStudentSolver
parameter_list|(
name|String
name|puid
parameter_list|,
name|Long
name|sessionId
parameter_list|)
block|{
try|try
block|{
name|StudentSolverProxy
name|solver
init|=
name|sStudentSolvers
operator|.
name|get
argument_list|(
name|puid
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sessionId
operator|!=
literal|null
operator|&&
operator|!
name|sessionId
operator|.
name|equals
argument_list|(
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SessionId"
argument_list|,
literal|null
argument_list|)
argument_list|)
condition|)
return|return
literal|null
return|;
return|return
name|solver
return|;
block|}
name|Set
name|servers
init|=
name|SolverRegisterService
operator|.
name|getInstance
argument_list|()
operator|.
name|getServers
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|servers
init|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|servers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RemoteSolverServerProxy
name|server
init|=
operator|(
name|RemoteSolverServerProxy
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|server
operator|.
name|isActive
argument_list|()
condition|)
continue|continue;
name|StudentSolverProxy
name|proxy
init|=
name|server
operator|.
name|getStudentSolver
argument_list|(
name|puid
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sessionId
operator|!=
literal|null
operator|&&
operator|!
name|sessionId
operator|.
name|equals
argument_list|(
name|proxy
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SessionId"
argument_list|,
literal|null
argument_list|)
argument_list|)
condition|)
return|return
literal|null
return|;
return|return
name|proxy
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to retrieve solver, reason:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|StudentSolverProxy
name|getStudentSolver
parameter_list|(
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
name|session
parameter_list|)
block|{
name|StudentSolverProxy
name|solver
init|=
operator|(
name|StudentSolverProxy
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"StudentSolverProxy"
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|solver
operator|instanceof
name|RemoteExamSolverProxy
operator|&&
operator|(
operator|(
name|RemoteExamSolverProxy
operator|)
name|solver
operator|)
operator|.
name|exists
argument_list|()
condition|)
return|return
name|solver
return|;
else|else
name|session
operator|.
name|removeAttribute
argument_list|(
literal|"StudentSolverProxy"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|session
operator|.
name|removeAttribute
argument_list|(
literal|"StudentSolverProxy"
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Session
name|acadSession
init|=
literal|null
decl_stmt|;
try|try
block|{
name|acadSession
operator|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|acadSession
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|TimetableManager
name|mgr
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|mgr
operator|.
name|canSectionStudents
argument_list|(
name|acadSession
argument_list|,
name|user
argument_list|)
condition|)
return|return
literal|null
return|;
name|String
name|puid
init|=
operator|(
name|String
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"ManageSolver.sectionPuid"
argument_list|)
decl_stmt|;
if|if
condition|(
name|puid
operator|!=
literal|null
condition|)
block|{
name|solver
operator|=
name|getStudentSolver
argument_list|(
name|puid
argument_list|,
name|acadSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|setAttribute
argument_list|(
literal|"StudentSolverProxy"
argument_list|,
name|solver
argument_list|)
expr_stmt|;
return|return
name|solver
return|;
block|}
block|}
name|solver
operator|=
name|getStudentSolver
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|,
name|acadSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"StudentSolverProxy"
argument_list|,
name|solver
argument_list|)
expr_stmt|;
return|return
name|solver
return|;
block|}
specifier|public
specifier|static
name|StudentSolverProxy
name|getStudentSolverNoSessionCheck
parameter_list|(
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
name|session
parameter_list|)
block|{
try|try
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|puid
init|=
operator|(
name|String
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"ManageSolver.sectionPuid"
argument_list|)
decl_stmt|;
if|if
condition|(
name|puid
operator|!=
literal|null
condition|)
block|{
name|StudentSolverProxy
name|solver
init|=
name|getStudentSolver
argument_list|(
name|puid
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
return|return
name|solver
return|;
block|}
return|return
name|getStudentSolver
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to retrieve solver, reason:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|SolverProxy
name|getSolver
parameter_list|(
name|String
name|puid
parameter_list|,
name|Long
name|sessionId
parameter_list|)
block|{
try|try
block|{
name|SolverProxy
name|proxy
init|=
operator|(
name|SolverProxy
operator|)
name|sSolvers
operator|.
name|get
argument_list|(
name|puid
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sessionId
operator|!=
literal|null
operator|&&
operator|!
name|sessionId
operator|.
name|equals
argument_list|(
name|proxy
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SessionId"
argument_list|,
literal|null
argument_list|)
argument_list|)
condition|)
return|return
literal|null
return|;
return|return
name|proxy
return|;
block|}
name|Set
name|servers
init|=
name|SolverRegisterService
operator|.
name|getInstance
argument_list|()
operator|.
name|getServers
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|servers
init|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|servers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RemoteSolverServerProxy
name|server
init|=
operator|(
name|RemoteSolverServerProxy
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|server
operator|.
name|isActive
argument_list|()
condition|)
continue|continue;
name|proxy
operator|=
name|server
operator|.
name|getSolver
argument_list|(
name|puid
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sessionId
operator|!=
literal|null
operator|&&
operator|!
name|sessionId
operator|.
name|equals
argument_list|(
name|proxy
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SessionId"
argument_list|,
literal|null
argument_list|)
argument_list|)
condition|)
return|return
literal|null
return|;
return|return
name|proxy
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to retrieve solver, reason:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|SolverProxy
name|getSolver
parameter_list|(
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
name|session
parameter_list|)
block|{
name|SolverProxy
name|solver
init|=
operator|(
name|SolverProxy
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"SolverProxy"
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|solver
operator|instanceof
name|RemoteSolverProxy
operator|&&
operator|(
operator|(
name|RemoteSolverProxy
operator|)
name|solver
operator|)
operator|.
name|exists
argument_list|()
condition|)
return|return
name|solver
return|;
else|else
name|session
operator|.
name|removeAttribute
argument_list|(
literal|"SolverProxy"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|session
operator|.
name|removeAttribute
argument_list|(
literal|"SolverProxy"
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Long
name|sessionId
init|=
literal|null
decl_stmt|;
try|try
block|{
name|sessionId
operator|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|String
name|puid
init|=
operator|(
name|String
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"ManageSolver.puid"
argument_list|)
decl_stmt|;
if|if
condition|(
name|puid
operator|!=
literal|null
condition|)
block|{
name|solver
operator|=
name|getSolver
argument_list|(
name|puid
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|setAttribute
argument_list|(
literal|"SolverProxy"
argument_list|,
name|solver
argument_list|)
expr_stmt|;
return|return
name|solver
return|;
block|}
block|}
name|solver
operator|=
name|getSolver
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
name|session
operator|.
name|setAttribute
argument_list|(
literal|"SolverProxy"
argument_list|,
name|solver
argument_list|)
expr_stmt|;
return|return
name|solver
return|;
block|}
specifier|public
specifier|static
name|SolverProxy
name|getSolverNoSessionCheck
parameter_list|(
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
name|session
parameter_list|)
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|puid
init|=
operator|(
name|String
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"ManageSolver.puid"
argument_list|)
decl_stmt|;
if|if
condition|(
name|puid
operator|!=
literal|null
condition|)
block|{
name|SolverProxy
name|solver
init|=
name|getSolver
argument_list|(
name|puid
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
return|return
name|solver
return|;
block|}
return|return
name|getSolver
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|DataProperties
name|createProperties
parameter_list|(
name|Long
name|settingsId
parameter_list|,
name|Hashtable
name|extraParams
parameter_list|,
name|int
name|type
parameter_list|)
block|{
name|DataProperties
name|properties
init|=
operator|new
name|DataProperties
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SolverPredefinedSettingDAO
name|dao
init|=
operator|new
name|SolverPredefinedSettingDAO
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|dao
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|List
name|defaultParams
init|=
name|hibSession
operator|.
name|createCriteria
argument_list|(
name|SolverParameterDef
operator|.
name|class
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|defaultParams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SolverParameterDef
name|def
init|=
operator|(
name|SolverParameterDef
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|def
operator|.
name|getGroup
argument_list|()
operator|.
name|getType
argument_list|()
operator|!=
name|type
condition|)
continue|continue;
if|if
condition|(
name|def
operator|.
name|getDefault
argument_list|()
operator|!=
literal|null
condition|)
name|properties
operator|.
name|put
argument_list|(
name|def
operator|.
name|getName
argument_list|()
argument_list|,
name|def
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|extraParams
operator|!=
literal|null
operator|&&
name|extraParams
operator|.
name|containsKey
argument_list|(
name|def
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
name|properties
operator|.
name|put
argument_list|(
name|def
operator|.
name|getName
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|extraParams
operator|.
name|get
argument_list|(
name|def
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SolverPredefinedSetting
name|settings
init|=
name|dao
operator|.
name|get
argument_list|(
name|settingsId
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|settings
operator|.
name|getParameters
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SolverParameter
name|param
init|=
operator|(
name|SolverParameter
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|param
operator|.
name|getDefinition
argument_list|()
operator|.
name|isVisible
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|param
operator|.
name|getDefinition
argument_list|()
operator|.
name|getGroup
argument_list|()
operator|.
name|getType
argument_list|()
operator|!=
name|type
condition|)
continue|continue;
name|properties
operator|.
name|put
argument_list|(
name|param
operator|.
name|getDefinition
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|extraParams
operator|!=
literal|null
operator|&&
name|extraParams
operator|.
name|containsKey
argument_list|(
name|param
operator|.
name|getDefinition
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
name|properties
operator|.
name|put
argument_list|(
name|param
operator|.
name|getDefinition
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|extraParams
operator|.
name|get
argument_list|(
name|param
operator|.
name|getDefinition
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.SettingsId"
argument_list|,
name|settings
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|StringBuffer
name|ext
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|properties
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.SearchIntensification"
argument_list|,
name|type
operator|==
name|SolverParameterGroup
operator|.
name|sTypeCourse
argument_list|)
condition|)
block|{
if|if
condition|(
name|ext
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|ext
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|ext
operator|.
name|append
argument_list|(
literal|"net.sf.cpsolver.ifs.extension.SearchIntensification"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|properties
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.CBS"
argument_list|,
name|type
operator|==
name|SolverParameterGroup
operator|.
name|sTypeCourse
argument_list|)
condition|)
block|{
if|if
condition|(
name|ext
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|ext
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|ext
operator|.
name|append
argument_list|(
literal|"net.sf.cpsolver.ifs.extension.ConflictStatistics"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|properties
operator|.
name|getPropertyBoolean
argument_list|(
literal|"ExamGeneral.CBS"
argument_list|,
name|type
operator|==
name|SolverParameterGroup
operator|.
name|sTypeExam
argument_list|)
condition|)
block|{
if|if
condition|(
name|ext
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|ext
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|ext
operator|.
name|append
argument_list|(
literal|"net.sf.cpsolver.ifs.extension.ConflictStatistics"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"ConflictStatistics.Print"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|==
name|SolverParameterGroup
operator|.
name|sTypeCourse
condition|)
block|{
name|String
name|mode
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"Basic.Mode"
argument_list|,
literal|"Initial"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"MPP"
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.MPP"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ext
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|ext
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|ext
operator|.
name|append
argument_list|(
literal|"net.sf.cpsolver.ifs.extension.ViolatedInitials"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|type
operator|==
name|SolverParameterGroup
operator|.
name|sTypeExam
condition|)
block|{
name|String
name|mode
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"ExamBasic.Mode"
argument_list|,
literal|"Initial"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"MPP"
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.MPP"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|/*                 if (ext.length()>0) ext.append(";");                 ext.append("net.sf.cpsolver.ifs.extension.ViolatedInitials");                 */
block|}
block|}
if|else if
condition|(
name|type
operator|==
name|SolverParameterGroup
operator|.
name|sTypeStudent
condition|)
block|{
name|String
name|mode
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"StudentSctBasic.Mode"
argument_list|,
literal|"Initial"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"MPP"
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.MPP"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
if|if
condition|(
name|properties
operator|.
name|getPropertyBoolean
argument_list|(
literal|"StudentSct.CBS"
argument_list|,
literal|true
argument_list|)
condition|)
block|{
if|if
condition|(
name|ext
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|ext
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|ext
operator|.
name|append
argument_list|(
literal|"net.sf.cpsolver.studentsct.extension.StudentConflictStatistics"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"ConflictStatistics.Print"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|properties
operator|.
name|getPropertyBoolean
argument_list|(
literal|"StudentSct.StudentDist"
argument_list|,
literal|true
argument_list|)
condition|)
block|{
if|if
condition|(
name|ext
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|ext
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
name|ext
operator|.
name|append
argument_list|(
literal|"net.sf.cpsolver.studentsct.extension.DistanceConflict"
argument_list|)
expr_stmt|;
block|}
block|}
name|properties
operator|.
name|setProperty
argument_list|(
literal|"Extensions.Classes"
argument_list|,
name|ext
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|properties
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Basic.DisobeyHard"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.InteractiveMode"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"No Action"
operator|.
name|equals
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"Basic.WhenFinished"
argument_list|)
argument_list|)
operator|||
literal|"No Action"
operator|.
name|equals
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"ExamBasic.WhenFinished"
argument_list|)
argument_list|)
operator|||
literal|"No Action"
operator|.
name|equals
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"StudentSctBasic.WhenFinished"
argument_list|)
argument_list|)
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.Save"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.CreateNewSolution"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.Unload"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"Save"
operator|.
name|equals
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"Basic.WhenFinished"
argument_list|)
argument_list|)
operator|||
literal|"Save"
operator|.
name|equals
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"ExamBasic.WhenFinished"
argument_list|)
argument_list|)
operator|||
literal|"Save"
operator|.
name|equals
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"StudentSctBasic.WhenFinished"
argument_list|)
argument_list|)
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.Save"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.CreateNewSolution"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.Unload"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"Save as New"
operator|.
name|equals
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"Basic.WhenFinished"
argument_list|)
argument_list|)
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.Save"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.CreateNewSolution"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.Unload"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"Save and Unload"
operator|.
name|equals
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"Basic.WhenFinished"
argument_list|)
argument_list|)
operator|||
literal|"Save and Unload"
operator|.
name|equals
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"ExamBasic.WhenFinished"
argument_list|)
argument_list|)
operator|||
literal|"Save and Unload"
operator|.
name|equals
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"StudentSctBasic.WhenFinished"
argument_list|)
argument_list|)
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.Save"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.CreateNewSolution"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.Unload"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"Save as New and Unload"
operator|.
name|equals
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"Basic.WhenFinished"
argument_list|)
argument_list|)
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.Save"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.CreateNewSolution"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.Unload"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|properties
operator|.
name|setProperty
argument_list|(
literal|"Xml.ShowNames"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|SolverParameterGroup
operator|.
name|sTypeCourse
condition|)
name|properties
operator|.
name|setProperty
argument_list|(
literal|"Xml.ExportStudentSectioning"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|SolverParameterGroup
operator|.
name|sTypeExam
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
literal|"Exam.GreatDeluge"
argument_list|,
operator|(
literal|"Great Deluge"
operator|.
name|equals
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"Exam.Algorithm"
argument_list|,
literal|"Great Deluge"
argument_list|)
argument_list|)
condition|?
literal|"true"
else|:
literal|"false"
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|extraParams
operator|!=
literal|null
operator|&&
name|extraParams
operator|.
name|get
argument_list|(
literal|"Exam.Type"
argument_list|)
operator|!=
literal|null
condition|)
name|properties
operator|.
name|setProperty
argument_list|(
literal|"Exam.Type"
argument_list|,
name|extraParams
operator|.
name|get
argument_list|(
literal|"Exam.Type"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"Distances.Ellipsoid"
argument_list|)
operator|==
literal|null
operator|||
name|properties
operator|.
name|getProperty
argument_list|(
literal|"Distances.Ellipsoid"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"DEFAULT"
argument_list|)
condition|)
name|properties
operator|.
name|setProperty
argument_list|(
literal|"Distances.Ellipsoid"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.distance.ellipsoid"
argument_list|,
name|DistanceMetric
operator|.
name|Ellipsoid
operator|.
name|LEGACY
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|expand
argument_list|()
expr_stmt|;
return|return
name|properties
return|;
block|}
specifier|public
specifier|static
name|SolverProxy
name|createSolver
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
name|session
parameter_list|,
name|Long
index|[]
name|ownerId
parameter_list|,
name|String
name|solutionIds
parameter_list|,
name|Long
name|settingsId
parameter_list|,
name|Hashtable
name|extraParams
parameter_list|,
name|boolean
name|startSolver
parameter_list|,
name|String
name|host
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Memory limit is "
operator|+
name|sMemoryLimit
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|removeSolver
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|DataProperties
name|properties
init|=
name|createProperties
argument_list|(
name|settingsId
argument_list|,
name|extraParams
argument_list|,
name|SolverParameterGroup
operator|.
name|sTypeCourse
argument_list|)
decl_stmt|;
name|String
name|warn
init|=
name|SolverWarnings
operator|.
name|getSolverWarning
argument_list|(
name|session
argument_list|,
name|ownerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|warn
operator|!=
literal|null
condition|)
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.SolverWarnings"
argument_list|,
name|warn
argument_list|)
expr_stmt|;
else|else
name|properties
operator|.
name|remove
argument_list|(
literal|"General.SolverWarnings"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.SessionId"
argument_list|,
name|sessionId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.SolverGroupId"
argument_list|,
name|ownerId
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|,
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|solutionIds
operator|!=
literal|null
condition|)
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.SolutionId"
argument_list|,
name|solutionIds
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.StartTime"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
operator|(
operator|new
name|Date
argument_list|()
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.StartSolver"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|startSolver
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|instructorFormat
init|=
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
argument_list|,
name|Constants
operator|.
name|SETTINGS_INSTRUCTOR_NAME_FORMAT
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructorFormat
operator|!=
literal|null
condition|)
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.InstructorFormat"
argument_list|,
name|instructorFormat
argument_list|)
expr_stmt|;
if|if
condition|(
name|host
operator|!=
literal|null
condition|)
block|{
name|Set
name|servers
init|=
name|SolverRegisterService
operator|.
name|getInstance
argument_list|()
operator|.
name|getServers
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|servers
init|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|servers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RemoteSolverServerProxy
name|server
init|=
operator|(
name|RemoteSolverServerProxy
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|server
operator|.
name|isActive
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|host
operator|.
name|equals
argument_list|(
name|server
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|server
operator|.
name|getPort
argument_list|()
argument_list|)
condition|)
block|{
name|SolverProxy
name|solver
init|=
name|server
operator|.
name|createSolver
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|,
name|properties
argument_list|)
decl_stmt|;
name|solver
operator|.
name|load
argument_list|(
name|properties
argument_list|)
expr_stmt|;
return|return
name|solver
return|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
literal|"local"
operator|.
name|equals
argument_list|(
name|host
argument_list|)
operator|&&
operator|!
name|SolverRegisterService
operator|.
name|getInstance
argument_list|()
operator|.
name|getServers
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RemoteSolverServerProxy
name|bestServer
init|=
literal|null
decl_stmt|;
name|Set
name|servers
init|=
name|SolverRegisterService
operator|.
name|getInstance
argument_list|()
operator|.
name|getServers
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|servers
init|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|servers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RemoteSolverServerProxy
name|server
init|=
operator|(
name|RemoteSolverServerProxy
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|server
operator|.
name|isActive
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|server
operator|.
name|getAvailableMemory
argument_list|()
operator|<
name|sMemoryLimit
condition|)
continue|continue;
if|if
condition|(
name|bestServer
operator|==
literal|null
condition|)
block|{
name|bestServer
operator|=
name|server
expr_stmt|;
block|}
if|else if
condition|(
name|bestServer
operator|.
name|getUsage
argument_list|()
operator|>
name|server
operator|.
name|getUsage
argument_list|()
condition|)
block|{
name|bestServer
operator|=
name|server
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|bestServer
operator|!=
literal|null
condition|)
block|{
name|SolverProxy
name|solver
init|=
name|bestServer
operator|.
name|createSolver
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|,
name|properties
argument_list|)
decl_stmt|;
name|solver
operator|.
name|load
argument_list|(
name|properties
argument_list|)
expr_stmt|;
return|return
name|solver
return|;
block|}
block|}
if|if
condition|(
name|getAvailableMemory
argument_list|()
operator|<
name|sMemoryLimit
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Not enough resources to create a solver instance, please try again later."
argument_list|)
throw|;
name|WebSolver
name|solver
init|=
operator|new
name|WebSolver
argument_list|(
name|properties
argument_list|)
decl_stmt|;
name|solver
operator|.
name|load
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|Progress
operator|.
name|getInstance
argument_list|(
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
operator|.
name|addProgressListener
argument_list|(
name|solver
argument_list|)
expr_stmt|;
name|sSolvers
operator|.
name|put
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|,
name|solver
argument_list|)
expr_stmt|;
return|return
name|solver
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
specifier|static
name|ExamSolverProxy
name|createExamSolver
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
name|session
parameter_list|,
name|Long
name|settingsId
parameter_list|,
name|Hashtable
name|extraParams
parameter_list|,
name|boolean
name|startSolver
parameter_list|,
name|String
name|host
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|removeExamSolver
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|DataProperties
name|properties
init|=
name|createProperties
argument_list|(
name|settingsId
argument_list|,
name|extraParams
argument_list|,
name|SolverParameterGroup
operator|.
name|sTypeExam
argument_list|)
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.SessionId"
argument_list|,
name|sessionId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|,
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.StartTime"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
operator|(
operator|new
name|Date
argument_list|()
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.StartSolver"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|startSolver
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|instructorFormat
init|=
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
argument_list|,
name|Constants
operator|.
name|SETTINGS_INSTRUCTOR_NAME_FORMAT
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructorFormat
operator|!=
literal|null
condition|)
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.InstructorFormat"
argument_list|,
name|instructorFormat
argument_list|)
expr_stmt|;
if|if
condition|(
name|host
operator|!=
literal|null
condition|)
block|{
name|Set
name|servers
init|=
name|SolverRegisterService
operator|.
name|getInstance
argument_list|()
operator|.
name|getServers
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|servers
init|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|servers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RemoteSolverServerProxy
name|server
init|=
operator|(
name|RemoteSolverServerProxy
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|server
operator|.
name|isActive
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|host
operator|.
name|equals
argument_list|(
name|server
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|server
operator|.
name|getPort
argument_list|()
argument_list|)
condition|)
block|{
name|ExamSolverProxy
name|solver
init|=
name|server
operator|.
name|createExamSolver
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|,
name|properties
argument_list|)
decl_stmt|;
name|solver
operator|.
name|load
argument_list|(
name|properties
argument_list|)
expr_stmt|;
return|return
name|solver
return|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
literal|"local"
operator|.
name|equals
argument_list|(
name|host
argument_list|)
operator|&&
operator|!
name|SolverRegisterService
operator|.
name|getInstance
argument_list|()
operator|.
name|getServers
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RemoteSolverServerProxy
name|bestServer
init|=
literal|null
decl_stmt|;
name|Set
name|servers
init|=
name|SolverRegisterService
operator|.
name|getInstance
argument_list|()
operator|.
name|getServers
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|servers
init|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|servers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RemoteSolverServerProxy
name|server
init|=
operator|(
name|RemoteSolverServerProxy
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|server
operator|.
name|isActive
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|server
operator|.
name|getAvailableMemory
argument_list|()
operator|<
name|sMemoryLimit
condition|)
continue|continue;
if|if
condition|(
name|bestServer
operator|==
literal|null
condition|)
block|{
name|bestServer
operator|=
name|server
expr_stmt|;
block|}
if|else if
condition|(
name|bestServer
operator|.
name|getUsage
argument_list|()
operator|>
name|server
operator|.
name|getUsage
argument_list|()
condition|)
block|{
name|bestServer
operator|=
name|server
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|bestServer
operator|!=
literal|null
condition|)
block|{
name|ExamSolverProxy
name|solver
init|=
name|bestServer
operator|.
name|createExamSolver
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|,
name|properties
argument_list|)
decl_stmt|;
name|solver
operator|.
name|load
argument_list|(
name|properties
argument_list|)
expr_stmt|;
return|return
name|solver
return|;
block|}
block|}
if|if
condition|(
name|getAvailableMemory
argument_list|()
operator|<
name|sMemoryLimit
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Not enough resources to create a solver instance, please try again later."
argument_list|)
throw|;
name|ExamSolver
name|solver
init|=
operator|new
name|ExamSolver
argument_list|(
name|properties
argument_list|,
operator|new
name|ExamSolverOnDispose
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|sExamSolvers
operator|.
name|put
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|,
name|solver
argument_list|)
expr_stmt|;
name|solver
operator|.
name|load
argument_list|(
name|properties
argument_list|)
expr_stmt|;
comment|//Progress.getInstance(sExamSolver.currentSolution().getModel()).addProgressListener(sExamSolver);
return|return
name|solver
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
specifier|static
name|StudentSolverProxy
name|createStudentSolver
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
name|session
parameter_list|,
name|Long
name|settingsId
parameter_list|,
name|Hashtable
name|extraParams
parameter_list|,
name|boolean
name|startSolver
parameter_list|,
name|String
name|host
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|removeExamSolver
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|DataProperties
name|properties
init|=
name|createProperties
argument_list|(
name|settingsId
argument_list|,
name|extraParams
argument_list|,
name|SolverParameterGroup
operator|.
name|sTypeStudent
argument_list|)
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.SessionId"
argument_list|,
name|sessionId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|,
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.StartTime"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
operator|(
operator|new
name|Date
argument_list|()
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.StartSolver"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|startSolver
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|instructorFormat
init|=
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
argument_list|,
name|Constants
operator|.
name|SETTINGS_INSTRUCTOR_NAME_FORMAT
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructorFormat
operator|!=
literal|null
condition|)
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.InstructorFormat"
argument_list|,
name|instructorFormat
argument_list|)
expr_stmt|;
if|if
condition|(
name|host
operator|!=
literal|null
condition|)
block|{
name|Set
name|servers
init|=
name|SolverRegisterService
operator|.
name|getInstance
argument_list|()
operator|.
name|getServers
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|servers
init|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|servers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RemoteSolverServerProxy
name|server
init|=
operator|(
name|RemoteSolverServerProxy
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|server
operator|.
name|isActive
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|host
operator|.
name|equals
argument_list|(
name|server
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|server
operator|.
name|getPort
argument_list|()
argument_list|)
condition|)
block|{
name|StudentSolverProxy
name|solver
init|=
name|server
operator|.
name|createStudentSolver
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|,
name|properties
argument_list|)
decl_stmt|;
name|solver
operator|.
name|load
argument_list|(
name|properties
argument_list|)
expr_stmt|;
return|return
name|solver
return|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
literal|"local"
operator|.
name|equals
argument_list|(
name|host
argument_list|)
operator|&&
operator|!
name|SolverRegisterService
operator|.
name|getInstance
argument_list|()
operator|.
name|getServers
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RemoteSolverServerProxy
name|bestServer
init|=
literal|null
decl_stmt|;
name|Set
name|servers
init|=
name|SolverRegisterService
operator|.
name|getInstance
argument_list|()
operator|.
name|getServers
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|servers
init|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|servers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RemoteSolverServerProxy
name|server
init|=
operator|(
name|RemoteSolverServerProxy
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|server
operator|.
name|isActive
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|server
operator|.
name|getAvailableMemory
argument_list|()
operator|<
name|sMemoryLimit
condition|)
continue|continue;
if|if
condition|(
name|bestServer
operator|==
literal|null
condition|)
block|{
name|bestServer
operator|=
name|server
expr_stmt|;
block|}
if|else if
condition|(
name|bestServer
operator|.
name|getUsage
argument_list|()
operator|>
name|server
operator|.
name|getUsage
argument_list|()
condition|)
block|{
name|bestServer
operator|=
name|server
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|bestServer
operator|!=
literal|null
condition|)
block|{
name|StudentSolverProxy
name|solver
init|=
name|bestServer
operator|.
name|createStudentSolver
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|,
name|properties
argument_list|)
decl_stmt|;
name|solver
operator|.
name|load
argument_list|(
name|properties
argument_list|)
expr_stmt|;
return|return
name|solver
return|;
block|}
block|}
if|if
condition|(
name|getAvailableMemory
argument_list|()
operator|<
name|sMemoryLimit
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Not enough resources to create a solver instance, please try again later."
argument_list|)
throw|;
name|StudentSolverProxy
name|solver
init|=
operator|new
name|StudentSolver
argument_list|(
name|properties
argument_list|,
operator|new
name|StudentSolverOnDispose
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|sStudentSolvers
operator|.
name|put
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|,
name|solver
argument_list|)
expr_stmt|;
name|solver
operator|.
name|load
argument_list|(
name|properties
argument_list|)
expr_stmt|;
comment|//Progress.getInstance(sExamSolver.currentSolution().getModel()).addProgressListener(sExamSolver);
return|return
name|solver
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
specifier|static
name|SolverProxy
name|reload
parameter_list|(
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
name|session
parameter_list|,
name|Long
name|settingsId
parameter_list|,
name|Hashtable
name|extraParams
parameter_list|)
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|SolverProxy
name|solver
init|=
name|getSolver
argument_list|(
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|DataProperties
name|oldProperties
init|=
name|solver
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|settingsId
operator|==
literal|null
condition|)
name|settingsId
operator|=
name|oldProperties
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SettingsId"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|DataProperties
name|properties
init|=
name|createProperties
argument_list|(
name|settingsId
argument_list|,
name|extraParams
argument_list|,
name|SolverParameterGroup
operator|.
name|sTypeCourse
argument_list|)
decl_stmt|;
name|String
name|warn
init|=
name|SolverWarnings
operator|.
name|getSolverWarning
argument_list|(
name|session
argument_list|,
name|oldProperties
operator|.
name|getPropertyLongArry
argument_list|(
literal|"General.SolverGroupId"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|warn
operator|!=
literal|null
condition|)
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.SolverWarnings"
argument_list|,
name|warn
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.SessionId"
argument_list|,
name|oldProperties
operator|.
name|getProperty
argument_list|(
literal|"General.SessionId"
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.SolverGroupId"
argument_list|,
name|oldProperties
operator|.
name|getProperty
argument_list|(
literal|"General.SolverGroupId"
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|,
name|oldProperties
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.StartTime"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
operator|(
operator|new
name|Date
argument_list|()
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|instructorFormat
init|=
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
argument_list|,
name|Constants
operator|.
name|SETTINGS_INSTRUCTOR_NAME_FORMAT
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructorFormat
operator|!=
literal|null
condition|)
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.InstructorFormat"
argument_list|,
name|instructorFormat
argument_list|)
expr_stmt|;
name|solver
operator|.
name|reload
argument_list|(
name|properties
argument_list|)
expr_stmt|;
if|if
condition|(
name|solver
operator|instanceof
name|WebSolver
condition|)
block|{
name|Progress
name|p
init|=
name|Progress
operator|.
name|getInstance
argument_list|(
operator|(
operator|(
name|WebSolver
operator|)
name|solver
operator|)
operator|.
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
decl_stmt|;
name|p
operator|.
name|clearProgressListeners
argument_list|()
expr_stmt|;
name|p
operator|.
name|addProgressListener
argument_list|(
operator|(
name|WebSolver
operator|)
name|solver
argument_list|)
expr_stmt|;
name|sSolvers
operator|.
name|put
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|,
name|solver
argument_list|)
expr_stmt|;
block|}
return|return
name|solver
return|;
block|}
specifier|public
specifier|static
name|ExamSolverProxy
name|reloadExamSolver
parameter_list|(
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
name|session
parameter_list|,
name|Long
name|settingsId
parameter_list|,
name|Hashtable
name|extraParams
parameter_list|)
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|ExamSolverProxy
name|solver
init|=
name|getExamSolver
argument_list|(
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|DataProperties
name|oldProperties
init|=
name|solver
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|settingsId
operator|==
literal|null
condition|)
name|settingsId
operator|=
name|oldProperties
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SettingsId"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|DataProperties
name|properties
init|=
name|createProperties
argument_list|(
name|settingsId
argument_list|,
name|extraParams
argument_list|,
name|SolverParameterGroup
operator|.
name|sTypeExam
argument_list|)
decl_stmt|;
name|String
name|warn
init|=
name|SolverWarnings
operator|.
name|getSolverWarning
argument_list|(
name|session
argument_list|,
name|oldProperties
operator|.
name|getPropertyLongArry
argument_list|(
literal|"General.SolverGroupId"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|warn
operator|!=
literal|null
condition|)
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.SolverWarnings"
argument_list|,
name|warn
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.SessionId"
argument_list|,
name|oldProperties
operator|.
name|getProperty
argument_list|(
literal|"General.SessionId"
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.SolverGroupId"
argument_list|,
name|oldProperties
operator|.
name|getProperty
argument_list|(
literal|"General.SolverGroupId"
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|,
name|oldProperties
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.StartTime"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
operator|(
operator|new
name|Date
argument_list|()
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|instructorFormat
init|=
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
argument_list|,
name|Constants
operator|.
name|SETTINGS_INSTRUCTOR_NAME_FORMAT
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructorFormat
operator|!=
literal|null
condition|)
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.InstructorFormat"
argument_list|,
name|instructorFormat
argument_list|)
expr_stmt|;
name|solver
operator|.
name|reload
argument_list|(
name|properties
argument_list|)
expr_stmt|;
return|return
name|solver
return|;
block|}
specifier|public
specifier|static
name|StudentSolverProxy
name|reloadStudentSolver
parameter_list|(
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
name|session
parameter_list|,
name|Long
name|settingsId
parameter_list|,
name|Hashtable
name|extraParams
parameter_list|)
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|StudentSolverProxy
name|solver
init|=
name|getStudentSolver
argument_list|(
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|DataProperties
name|oldProperties
init|=
name|solver
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|settingsId
operator|==
literal|null
condition|)
name|settingsId
operator|=
name|oldProperties
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SettingsId"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|DataProperties
name|properties
init|=
name|createProperties
argument_list|(
name|settingsId
argument_list|,
name|extraParams
argument_list|,
name|SolverParameterGroup
operator|.
name|sTypeStudent
argument_list|)
decl_stmt|;
name|String
name|warn
init|=
name|SolverWarnings
operator|.
name|getSolverWarning
argument_list|(
name|session
argument_list|,
name|oldProperties
operator|.
name|getPropertyLongArry
argument_list|(
literal|"General.SolverGroupId"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|warn
operator|!=
literal|null
condition|)
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.SolverWarnings"
argument_list|,
name|warn
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.SessionId"
argument_list|,
name|oldProperties
operator|.
name|getProperty
argument_list|(
literal|"General.SessionId"
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.SolverGroupId"
argument_list|,
name|oldProperties
operator|.
name|getProperty
argument_list|(
literal|"General.SolverGroupId"
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|,
name|oldProperties
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.StartTime"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
operator|(
operator|new
name|Date
argument_list|()
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|instructorFormat
init|=
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
argument_list|,
name|Constants
operator|.
name|SETTINGS_INSTRUCTOR_NAME_FORMAT
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructorFormat
operator|!=
literal|null
condition|)
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.InstructorFormat"
argument_list|,
name|instructorFormat
argument_list|)
expr_stmt|;
name|solver
operator|.
name|reload
argument_list|(
name|properties
argument_list|)
expr_stmt|;
return|return
name|solver
return|;
block|}
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|super
operator|.
name|dispose
argument_list|()
expr_stmt|;
if|if
condition|(
name|iJspWriter
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|iJspWriter
operator|.
name|println
argument_list|(
literal|"<I>Solver finished.</I>"
argument_list|)
expr_stmt|;
name|iJspWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|iJspWriter
operator|=
literal|null
expr_stmt|;
block|}
name|String
name|puid
init|=
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|)
decl_stmt|;
if|if
condition|(
name|puid
operator|!=
literal|null
condition|)
name|sSolvers
operator|.
name|remove
argument_list|(
name|puid
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|saveSolution
parameter_list|(
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
name|session
parameter_list|,
name|boolean
name|createNewSolution
parameter_list|,
name|boolean
name|commitSolution
parameter_list|)
throws|throws
name|Exception
block|{
name|SolverProxy
name|solver
init|=
name|getSolver
argument_list|(
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
return|return;
name|solver
operator|.
name|save
argument_list|(
name|createNewSolution
argument_list|,
name|commitSolution
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|removeSolver
parameter_list|(
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
name|session
parameter_list|)
throws|throws
name|Exception
block|{
name|session
operator|.
name|removeAttribute
argument_list|(
literal|"SolverProxy"
argument_list|)
expr_stmt|;
name|session
operator|.
name|removeAttribute
argument_list|(
literal|"Suggestions.model"
argument_list|)
expr_stmt|;
name|session
operator|.
name|removeAttribute
argument_list|(
literal|"Timetable.table"
argument_list|)
expr_stmt|;
name|SolverProxy
name|solver
init|=
name|getSolverNoSessionCheck
argument_list|(
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
name|solver
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|solver
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
name|session
operator|.
name|removeAttribute
argument_list|(
literal|"ManageSolver.puid"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|removeExamSolver
parameter_list|(
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
name|session
parameter_list|)
throws|throws
name|Exception
block|{
name|session
operator|.
name|removeAttribute
argument_list|(
literal|"ExamSolverProxy"
argument_list|)
expr_stmt|;
name|ExamSolverProxy
name|solver
init|=
name|getExamSolverNoSessionCheck
argument_list|(
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
name|solver
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|solver
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
name|session
operator|.
name|removeAttribute
argument_list|(
literal|"ManageSolver.examPuid"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|removeStudentSolver
parameter_list|(
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
name|session
parameter_list|)
throws|throws
name|Exception
block|{
name|session
operator|.
name|removeAttribute
argument_list|(
literal|"StudentSolverProxy"
argument_list|)
expr_stmt|;
name|StudentSolverProxy
name|solver
init|=
name|getStudentSolverNoSessionCheck
argument_list|(
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
name|solver
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|solver
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
name|session
operator|.
name|removeAttribute
argument_list|(
literal|"ManageSolver.sectionPuid"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Hashtable
argument_list|<
name|String
argument_list|,
name|SolverProxy
argument_list|>
name|getSolvers
parameter_list|()
throws|throws
name|Exception
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|SolverProxy
argument_list|>
name|solvers
init|=
operator|new
name|Hashtable
argument_list|(
name|sSolvers
argument_list|)
decl_stmt|;
name|Set
name|servers
init|=
name|SolverRegisterService
operator|.
name|getInstance
argument_list|()
operator|.
name|getServers
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|servers
init|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|servers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RemoteSolverServerProxy
name|server
init|=
operator|(
name|RemoteSolverServerProxy
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|server
operator|.
name|isActive
argument_list|()
condition|)
continue|continue;
name|Hashtable
name|serverSolvers
init|=
name|server
operator|.
name|getSolvers
argument_list|()
decl_stmt|;
if|if
condition|(
name|serverSolvers
operator|!=
literal|null
condition|)
name|solvers
operator|.
name|putAll
argument_list|(
name|serverSolvers
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|solvers
return|;
block|}
specifier|public
specifier|static
name|Hashtable
argument_list|<
name|String
argument_list|,
name|ExamSolverProxy
argument_list|>
name|getExamSolvers
parameter_list|()
throws|throws
name|Exception
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|ExamSolverProxy
argument_list|>
name|solvers
init|=
operator|new
name|Hashtable
argument_list|(
name|sExamSolvers
argument_list|)
decl_stmt|;
name|Set
name|servers
init|=
name|SolverRegisterService
operator|.
name|getInstance
argument_list|()
operator|.
name|getServers
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|servers
init|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|servers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RemoteSolverServerProxy
name|server
init|=
operator|(
name|RemoteSolverServerProxy
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|server
operator|.
name|isActive
argument_list|()
condition|)
continue|continue;
name|Hashtable
name|serverSolvers
init|=
name|server
operator|.
name|getExamSolvers
argument_list|()
decl_stmt|;
if|if
condition|(
name|serverSolvers
operator|!=
literal|null
condition|)
name|solvers
operator|.
name|putAll
argument_list|(
name|serverSolvers
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|solvers
return|;
block|}
specifier|public
specifier|static
name|Hashtable
argument_list|<
name|String
argument_list|,
name|StudentSolverProxy
argument_list|>
name|getStudentSolvers
parameter_list|()
throws|throws
name|Exception
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|StudentSolverProxy
argument_list|>
name|solvers
init|=
operator|new
name|Hashtable
argument_list|(
name|sStudentSolvers
argument_list|)
decl_stmt|;
name|Set
name|servers
init|=
name|SolverRegisterService
operator|.
name|getInstance
argument_list|()
operator|.
name|getServers
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|servers
init|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|servers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RemoteSolverServerProxy
name|server
init|=
operator|(
name|RemoteSolverServerProxy
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|server
operator|.
name|isActive
argument_list|()
condition|)
continue|continue;
name|Hashtable
name|serverSolvers
init|=
name|server
operator|.
name|getStudentSolvers
argument_list|()
decl_stmt|;
if|if
condition|(
name|serverSolvers
operator|!=
literal|null
condition|)
name|solvers
operator|.
name|putAll
argument_list|(
name|serverSolvers
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|solvers
return|;
block|}
specifier|public
specifier|static
name|Hashtable
name|getLocalSolvers
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|sSolvers
return|;
block|}
specifier|public
specifier|static
name|Hashtable
name|getLocalExaminationSolvers
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|sExamSolvers
return|;
block|}
specifier|public
specifier|static
name|Hashtable
name|getLocalStudentSolvers
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|sStudentSolvers
return|;
block|}
specifier|public
name|void
name|setHtmlMessageWriter
parameter_list|(
name|JspWriter
name|out
parameter_list|)
block|{
if|if
condition|(
name|iJspWriter
operator|!=
literal|null
operator|&&
operator|!
name|iJspWriter
operator|.
name|equals
argument_list|(
name|out
argument_list|)
condition|)
block|{
try|try
block|{
name|iJspWriter
operator|.
name|println
argument_list|(
literal|"<I>Thread ended.</I>"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
name|iJspWriter
operator|=
name|out
expr_stmt|;
while|while
condition|(
name|out
operator|.
name|equals
argument_list|(
name|iJspWriter
argument_list|)
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"STOP: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|//Progress listener
specifier|public
name|void
name|statusChanged
parameter_list|(
name|String
name|status
parameter_list|)
block|{
block|}
specifier|public
name|void
name|phaseChanged
parameter_list|(
name|String
name|phase
parameter_list|)
block|{
block|}
specifier|public
name|void
name|progressChanged
parameter_list|(
name|long
name|currentProgress
parameter_list|,
name|long
name|maxProgress
parameter_list|)
block|{
block|}
specifier|public
name|void
name|progressSaved
parameter_list|()
block|{
block|}
specifier|public
name|void
name|progressRestored
parameter_list|()
block|{
block|}
specifier|public
name|void
name|progressMessagePrinted
parameter_list|(
name|Progress
operator|.
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|iJspWriter
operator|!=
literal|null
condition|)
block|{
name|String
name|m
init|=
name|message
operator|.
name|toHtmlString
argument_list|(
name|getDebugLevel
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
name|iJspWriter
operator|.
name|println
argument_list|(
name|m
operator|+
literal|"<br>"
argument_list|)
expr_stmt|;
name|iJspWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"STOP: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|iJspWriter
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
literal|"local"
return|;
block|}
specifier|public
name|String
name|getHostLabel
parameter_list|()
block|{
return|return
name|getHost
argument_list|()
return|;
block|}
specifier|private
name|void
name|backup
parameter_list|()
block|{
if|if
condition|(
operator|!
name|sBackupWhenDone
condition|)
return|return;
name|String
name|puid
init|=
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|)
decl_stmt|;
if|if
condition|(
name|puid
operator|!=
literal|null
condition|)
name|backup
argument_list|(
name|SolverRegisterService
operator|.
name|sBackupDir
argument_list|,
name|puid
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|onFinish
parameter_list|()
block|{
name|super
operator|.
name|onFinish
argument_list|()
expr_stmt|;
name|backup
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|onStop
parameter_list|()
block|{
name|super
operator|.
name|onStop
argument_list|()
expr_stmt|;
name|backup
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|afterLoad
parameter_list|()
block|{
name|super
operator|.
name|afterLoad
argument_list|()
expr_stmt|;
name|backup
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|afterFinalSectioning
parameter_list|()
block|{
name|super
operator|.
name|afterFinalSectioning
argument_list|()
expr_stmt|;
name|backup
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|restoreBest
parameter_list|()
block|{
name|super
operator|.
name|restoreBest
argument_list|()
expr_stmt|;
name|backup
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|saveBest
parameter_list|()
block|{
name|super
operator|.
name|saveBest
argument_list|()
expr_stmt|;
name|backup
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|backup
parameter_list|(
name|File
name|folder
parameter_list|)
block|{
if|if
condition|(
name|folder
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|folder
operator|.
name|isDirectory
argument_list|()
condition|)
return|return;
name|folder
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
index|[]
name|old
init|=
name|folder
operator|.
name|listFiles
argument_list|(
operator|new
name|BackupFileFilter
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|old
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|old
index|[
name|i
index|]
operator|.
name|delete
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|sSolvers
init|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|sSolvers
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|puid
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|WebSolver
name|solver
init|=
operator|(
name|WebSolver
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|solver
operator|.
name|backup
argument_list|(
name|folder
argument_list|,
name|puid
argument_list|)
expr_stmt|;
block|}
block|}
synchronized|synchronized
init|(
name|sExamSolvers
init|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|sExamSolvers
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|puid
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ExamSolver
name|solver
init|=
operator|(
name|ExamSolver
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|solver
operator|.
name|backup
argument_list|(
name|folder
argument_list|,
name|puid
argument_list|)
expr_stmt|;
block|}
block|}
synchronized|synchronized
init|(
name|sStudentSolvers
init|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|sStudentSolvers
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|puid
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|StudentSolver
name|solver
init|=
operator|(
name|StudentSolver
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|solver
operator|.
name|backup
argument_list|(
name|folder
argument_list|,
name|puid
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|restore
parameter_list|(
name|File
name|folder
parameter_list|,
name|File
name|passivateFolder
parameter_list|)
block|{
if|if
condition|(
operator|!
name|folder
operator|.
name|exists
argument_list|()
operator|||
operator|!
name|folder
operator|.
name|isDirectory
argument_list|()
condition|)
return|return;
synchronized|synchronized
init|(
name|sSolvers
init|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|sSolvers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|WebSolver
name|solver
init|=
operator|(
name|WebSolver
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|solver
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
name|sSolvers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|File
index|[]
name|files
init|=
name|folder
operator|.
name|listFiles
argument_list|(
operator|new
name|BackupFileFilter
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|file
init|=
name|files
index|[
name|i
index|]
decl_stmt|;
name|String
name|puid
init|=
name|file
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|file
operator|.
name|getName
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|puid
operator|.
name|startsWith
argument_list|(
literal|"exam_"
argument_list|)
condition|)
block|{
name|String
name|exPuid
init|=
name|puid
operator|.
name|substring
argument_list|(
literal|"exam_"
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|ExamSolver
name|solver
init|=
operator|new
name|ExamSolver
argument_list|(
operator|new
name|DataProperties
argument_list|()
argument_list|,
operator|new
name|ExamSolverOnDispose
argument_list|(
name|exPuid
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|.
name|restore
argument_list|(
name|folder
argument_list|,
name|exPuid
argument_list|)
condition|)
block|{
if|if
condition|(
name|passivateFolder
operator|!=
literal|null
condition|)
name|solver
operator|.
name|passivate
argument_list|(
name|passivateFolder
argument_list|,
name|puid
argument_list|)
expr_stmt|;
name|sExamSolvers
operator|.
name|put
argument_list|(
name|exPuid
argument_list|,
name|solver
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
if|if
condition|(
name|puid
operator|.
name|startsWith
argument_list|(
literal|"sct_"
argument_list|)
condition|)
block|{
name|String
name|exPuid
init|=
name|puid
operator|.
name|substring
argument_list|(
literal|"sct_"
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|StudentSolver
name|solver
init|=
operator|new
name|StudentSolver
argument_list|(
operator|new
name|DataProperties
argument_list|()
argument_list|,
operator|new
name|StudentSolverOnDispose
argument_list|(
name|exPuid
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|.
name|restore
argument_list|(
name|folder
argument_list|,
name|exPuid
argument_list|)
condition|)
block|{
if|if
condition|(
name|passivateFolder
operator|!=
literal|null
condition|)
name|solver
operator|.
name|passivate
argument_list|(
name|passivateFolder
argument_list|,
name|puid
argument_list|)
expr_stmt|;
name|sStudentSolvers
operator|.
name|put
argument_list|(
name|exPuid
argument_list|,
name|solver
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
name|WebSolver
name|solver
init|=
operator|new
name|WebSolver
argument_list|(
operator|new
name|DataProperties
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|.
name|restore
argument_list|(
name|folder
argument_list|,
name|puid
argument_list|)
condition|)
block|{
if|if
condition|(
name|passivateFolder
operator|!=
literal|null
condition|)
name|solver
operator|.
name|passivate
argument_list|(
name|passivateFolder
argument_list|,
name|puid
argument_list|)
expr_stmt|;
name|sSolvers
operator|.
name|put
argument_list|(
name|puid
argument_list|,
name|solver
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|startSolverPasivationThread
parameter_list|(
name|File
name|folder
parameter_list|)
block|{
if|if
condition|(
name|sSolverPasivationThread
operator|!=
literal|null
operator|&&
name|sSolverPasivationThread
operator|.
name|isAlive
argument_list|()
condition|)
return|return;
name|sSolverPasivationThread
operator|=
operator|new
name|SolverPassivationThread
argument_list|(
name|folder
argument_list|,
name|sSolvers
argument_list|,
name|sExamSolvers
argument_list|,
name|sStudentSolvers
argument_list|)
expr_stmt|;
name|sSolverPasivationThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|stopSolverPasivationThread
parameter_list|()
block|{
if|if
condition|(
name|sSolverPasivationThread
operator|!=
literal|null
operator|&&
name|sSolverPasivationThread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|sSolverPasivationThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|ClassAssignmentProxy
name|getClassAssignmentProxy
parameter_list|(
name|HttpSession
name|session
parameter_list|)
block|{
name|SolverProxy
name|solver
init|=
name|getSolver
argument_list|(
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
return|return
operator|new
name|CachedClassAssignmentProxy
argument_list|(
name|solver
argument_list|)
return|;
name|String
name|solutionIdsStr
init|=
operator|(
name|String
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Solver.selectedSolutionId"
argument_list|)
decl_stmt|;
name|Set
name|solutionIds
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|solutionIdsStr
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|solutionIdsStr
argument_list|,
literal|","
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|Long
name|solutionId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
name|solutionIds
operator|.
name|add
argument_list|(
name|solutionId
argument_list|)
expr_stmt|;
block|}
block|}
name|SolutionClassAssignmentProxy
name|cachedProxy
init|=
operator|(
name|SolutionClassAssignmentProxy
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"LastSolutionClassAssignmentProxy"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cachedProxy
operator|!=
literal|null
operator|&&
name|cachedProxy
operator|.
name|equals
argument_list|(
name|solutionIds
argument_list|)
condition|)
block|{
return|return
name|cachedProxy
return|;
block|}
name|SolutionClassAssignmentProxy
name|newProxy
init|=
operator|new
name|SolutionClassAssignmentProxy
argument_list|(
name|solutionIds
argument_list|)
decl_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"LastSolutionClassAssignmentProxy"
argument_list|,
name|newProxy
argument_list|)
expr_stmt|;
return|return
name|newProxy
return|;
block|}
specifier|public
specifier|static
name|long
name|getAvailableMemory
parameter_list|()
block|{
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
return|return
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|maxMemory
argument_list|()
operator|-
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|totalMemory
argument_list|()
operator|+
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|freeMemory
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|long
name|getUsage
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|sSolvers
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|SolverProxy
name|solver
init|=
operator|(
name|SolverProxy
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ret
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|solver
operator|.
name|isPassivated
argument_list|()
condition|)
name|ret
operator|++
expr_stmt|;
try|try
block|{
if|if
condition|(
name|solver
operator|.
name|isWorking
argument_list|()
condition|)
name|ret
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
empty_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|sExamSolvers
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExamSolverProxy
name|solver
init|=
operator|(
name|ExamSolverProxy
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ret
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|solver
operator|.
name|isPassivated
argument_list|()
condition|)
name|ret
operator|++
expr_stmt|;
try|try
block|{
if|if
condition|(
name|solver
operator|.
name|isWorking
argument_list|()
condition|)
name|ret
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
empty_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
specifier|static
class|class
name|ExamSolverOnDispose
implements|implements
name|ExamSolverDisposeListener
block|{
name|String
name|iOwnerId
init|=
literal|null
decl_stmt|;
specifier|public
name|ExamSolverOnDispose
parameter_list|(
name|String
name|ownerId
parameter_list|)
block|{
name|iOwnerId
operator|=
name|ownerId
expr_stmt|;
block|}
specifier|public
name|void
name|onDispose
parameter_list|()
block|{
name|sExamSolvers
operator|.
name|remove
argument_list|(
name|iOwnerId
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|StudentSolverOnDispose
implements|implements
name|StudentSolverDisposeListener
block|{
name|String
name|iOwnerId
init|=
literal|null
decl_stmt|;
specifier|public
name|StudentSolverOnDispose
parameter_list|(
name|String
name|ownerId
parameter_list|)
block|{
name|iOwnerId
operator|=
name|ownerId
expr_stmt|;
block|}
specifier|public
name|void
name|onDispose
parameter_list|()
block|{
name|sStudentSolvers
operator|.
name|remove
argument_list|(
name|iOwnerId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

