begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2009, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|course
operator|.
name|ui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|LocationDAO
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ClassRoomInfo
implements|implements
name|Serializable
implements|,
name|Comparable
argument_list|<
name|ClassRoomInfo
argument_list|>
block|{
comment|/** 	 *  	 */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|210491037628622512L
decl_stmt|;
specifier|private
name|Long
name|iId
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iName
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iPreference
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iCapacity
decl_stmt|;
specifier|private
name|int
name|iX
init|=
operator|-
literal|1
decl_stmt|,
name|iY
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|boolean
name|iIgnoreTooFar
decl_stmt|;
specifier|private
specifier|transient
name|Location
name|iLocation
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iNote
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iIgnoreRoomChecks
decl_stmt|;
specifier|private
name|String
name|iRoomType
init|=
literal|null
decl_stmt|;
specifier|public
name|ClassRoomInfo
parameter_list|(
name|Location
name|location
parameter_list|,
name|int
name|preference
parameter_list|)
block|{
name|iLocation
operator|=
name|location
expr_stmt|;
name|iId
operator|=
name|location
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iName
operator|=
name|location
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|iCapacity
operator|=
name|location
operator|.
name|getCapacity
argument_list|()
expr_stmt|;
name|iPreference
operator|=
name|preference
expr_stmt|;
name|iX
operator|=
operator|(
name|location
operator|.
name|getCoordinateX
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|location
operator|.
name|getCoordinateX
argument_list|()
operator|.
name|intValue
argument_list|()
operator|)
expr_stmt|;
name|iY
operator|=
operator|(
name|location
operator|.
name|getCoordinateY
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|location
operator|.
name|getCoordinateY
argument_list|()
operator|.
name|intValue
argument_list|()
operator|)
expr_stmt|;
name|iIgnoreTooFar
operator|=
name|location
operator|.
name|isIgnoreTooFar
argument_list|()
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
name|iIgnoreRoomChecks
operator|=
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
expr_stmt|;
name|iRoomType
operator|=
name|location
operator|.
name|getRoomTypeLabel
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ClassRoomInfo
parameter_list|(
name|Location
name|location
parameter_list|,
name|int
name|preference
parameter_list|,
name|String
name|note
parameter_list|)
block|{
name|this
argument_list|(
name|location
argument_list|,
name|preference
argument_list|)
expr_stmt|;
name|iNote
operator|=
name|note
expr_stmt|;
block|}
specifier|public
name|Long
name|getLocationId
parameter_list|()
block|{
return|return
name|iId
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|int
name|getPreference
parameter_list|()
block|{
return|return
name|iPreference
return|;
block|}
specifier|public
name|void
name|setPreference
parameter_list|(
name|int
name|preference
parameter_list|)
block|{
name|iPreference
operator|=
name|preference
expr_stmt|;
block|}
specifier|public
name|int
name|getCapacity
parameter_list|()
block|{
return|return
name|iCapacity
return|;
block|}
specifier|public
name|boolean
name|isIgnoreTooFar
parameter_list|()
block|{
return|return
name|iIgnoreTooFar
return|;
block|}
specifier|public
name|boolean
name|hasNote
parameter_list|()
block|{
return|return
name|iNote
operator|!=
literal|null
return|;
block|}
specifier|public
name|String
name|getNote
parameter_list|()
block|{
return|return
name|iNote
return|;
block|}
specifier|public
name|Location
name|getLocation
parameter_list|()
block|{
if|if
condition|(
name|iLocation
operator|==
literal|null
condition|)
name|iLocation
operator|=
operator|new
name|LocationDAO
argument_list|()
operator|.
name|get
argument_list|(
name|getLocationId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|iLocation
return|;
block|}
specifier|public
name|Location
name|getLocation
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
return|return
operator|new
name|LocationDAO
argument_list|()
operator|.
name|get
argument_list|(
name|getLocationId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|int
name|pref
init|=
name|getPreference
argument_list|()
decl_stmt|;
name|boolean
name|s
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|pref
operator|>
literal|5000
condition|)
block|{
name|s
operator|=
literal|true
expr_stmt|;
name|pref
operator|-=
literal|5000
expr_stmt|;
block|}
return|return
literal|"<span style='color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|PreferenceLevel
operator|.
name|int2prolog
argument_list|(
name|pref
argument_list|)
argument_list|)
operator|+
literal|";' "
operator|+
literal|"title='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2string
argument_list|(
name|PreferenceLevel
operator|.
name|int2prolog
argument_list|(
name|pref
argument_list|)
argument_list|)
operator|+
literal|" "
operator|+
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
operator|(
name|hasNote
argument_list|()
condition|?
name|getNote
argument_list|()
operator|+
literal|", "
else|:
literal|""
operator|)
operator|+
name|getCapacity
argument_list|()
operator|+
literal|" seats, "
operator|+
name|iRoomType
operator|+
literal|")'>"
operator|+
operator|(
name|s
condition|?
literal|"<s>"
else|:
literal|""
operator|)
operator|+
name|getName
argument_list|()
operator|+
operator|(
name|s
condition|?
literal|"</s>"
else|:
literal|""
operator|)
operator|+
literal|"</span>"
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|ClassRoomInfo
name|room
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|-
name|Double
operator|.
name|compare
argument_list|(
name|getCapacity
argument_list|()
argument_list|,
name|room
operator|.
name|getCapacity
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|getLocationId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|room
operator|.
name|getLocationId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|ClassRoomInfo
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|getLocationId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ClassRoomInfo
operator|)
name|o
operator|)
operator|.
name|getLocationId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getLocationId
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|int
name|getCoordX
parameter_list|()
block|{
return|return
name|iX
return|;
block|}
specifier|public
name|int
name|getCoordY
parameter_list|()
block|{
return|return
name|iY
return|;
block|}
specifier|public
name|int
name|getDistance
parameter_list|(
name|ClassRoomInfo
name|other
parameter_list|)
block|{
if|if
condition|(
name|isIgnoreTooFar
argument_list|()
operator|||
name|other
operator|.
name|isIgnoreTooFar
argument_list|()
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|getCoordX
argument_list|()
operator|<
literal|0
operator|||
name|getCoordY
argument_list|()
operator|<
literal|0
operator|||
name|other
operator|.
name|getCoordX
argument_list|()
operator|<
literal|0
operator|||
name|other
operator|.
name|getCoordY
argument_list|()
operator|<
literal|0
condition|)
return|return
literal|10000
return|;
name|int
name|dx
init|=
name|getCoordX
argument_list|()
operator|-
name|other
operator|.
name|getCoordX
argument_list|()
decl_stmt|;
name|int
name|dy
init|=
name|getCoordY
argument_list|()
operator|-
name|other
operator|.
name|getCoordY
argument_list|()
decl_stmt|;
return|return
operator|(
name|int
operator|)
name|Math
operator|.
name|sqrt
argument_list|(
name|dx
operator|*
name|dx
operator|+
name|dy
operator|*
name|dy
argument_list|)
return|;
block|}
specifier|public
name|String
name|getNameHtml
parameter_list|()
block|{
return|return
literal|"<span title='"
operator|+
name|PreferenceLevel
operator|.
name|int2string
argument_list|(
name|getPreference
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|getCapacity
argument_list|()
operator|+
literal|" seats)' style='color:"
operator|+
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|getPreference
argument_list|()
argument_list|)
operator|+
literal|";'>"
operator|+
name|getName
argument_list|()
operator|+
literal|"</span>"
return|;
block|}
specifier|public
name|boolean
name|isIgnoreRoomChecks
parameter_list|()
block|{
return|return
name|iIgnoreRoomChecks
return|;
block|}
specifier|public
name|void
name|setIgnoreRoomChecks
parameter_list|(
name|boolean
name|ignoreRoomChecks
parameter_list|)
block|{
name|iIgnoreRoomChecks
operator|=
name|ignoreRoomChecks
expr_stmt|;
block|}
block|}
end_class

end_unit

