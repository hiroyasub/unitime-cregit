begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|course
operator|.
name|ui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ClassInfo
implements|implements
name|Serializable
implements|,
name|Comparable
argument_list|<
name|ClassInfo
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|7324981486913342471L
decl_stmt|;
specifier|protected
name|String
name|iClassName
init|=
literal|null
decl_stmt|;
specifier|protected
name|String
name|iClassTitle
init|=
literal|null
decl_stmt|;
specifier|protected
name|Long
name|iClassId
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|transient
name|Class_
name|iClass
init|=
literal|null
decl_stmt|;
specifier|protected
name|int
name|iNrRooms
decl_stmt|;
specifier|protected
name|int
name|iLimit
decl_stmt|;
specifier|protected
name|int
name|iEnrollment
decl_stmt|;
specifier|protected
name|TreeSet
argument_list|<
name|ClassInstructorInfo
argument_list|>
name|iInstructors
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
specifier|protected
name|Set
argument_list|<
name|Long
argument_list|>
name|iParents
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
specifier|protected
name|Set
argument_list|<
name|Long
argument_list|>
name|iStudents
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
specifier|protected
name|Long
name|iConfigId
init|=
literal|null
decl_stmt|;
specifier|protected
name|boolean
name|iSingleClass
init|=
literal|false
decl_stmt|;
specifier|public
name|ClassInfo
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
name|iClassId
operator|=
name|clazz
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iClassName
operator|=
name|clazz
operator|.
name|getClassLabel
argument_list|()
expr_stmt|;
name|iClassTitle
operator|=
name|clazz
operator|.
name|getClassLabelWithTitle
argument_list|()
expr_stmt|;
name|iClass
operator|=
name|clazz
expr_stmt|;
name|iNrRooms
operator|=
operator|(
name|clazz
operator|.
name|getNbrRooms
argument_list|()
operator|==
literal|null
condition|?
literal|1
else|:
name|clazz
operator|.
name|getNbrRooms
argument_list|()
operator|.
name|intValue
argument_list|()
operator|)
expr_stmt|;
name|iLimit
operator|=
name|clazz
operator|.
name|getClassLimit
argument_list|()
expr_stmt|;
name|iEnrollment
operator|=
operator|(
name|clazz
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|clazz
operator|.
name|getEnrollment
argument_list|()
operator|.
name|intValue
argument_list|()
operator|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|clazz
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|iInstructors
operator|.
name|add
argument_list|(
operator|new
name|ClassInstructorInfo
argument_list|(
operator|(
name|ClassInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Class_
name|parent
init|=
name|clazz
operator|.
name|getParentClass
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|iParents
operator|.
name|add
argument_list|(
name|parent
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|=
name|parent
operator|.
name|getParentClass
argument_list|()
expr_stmt|;
block|}
name|iStudents
operator|.
name|addAll
argument_list|(
name|clazz
operator|.
name|getEnrolledStudentIds
argument_list|()
argument_list|)
expr_stmt|;
name|iSingleClass
operator|=
operator|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
expr_stmt|;
name|iConfigId
operator|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|Long
argument_list|>
name|getParents
parameter_list|()
block|{
return|return
name|iParents
return|;
block|}
specifier|public
name|Set
argument_list|<
name|Long
argument_list|>
name|getStudents
parameter_list|()
block|{
return|return
name|iStudents
return|;
block|}
specifier|public
name|Set
argument_list|<
name|ClassInstructorInfo
argument_list|>
name|getInstructors
parameter_list|()
block|{
return|return
name|iInstructors
return|;
block|}
specifier|public
name|boolean
name|isSingleClass
parameter_list|()
block|{
return|return
name|iSingleClass
return|;
block|}
specifier|public
name|Long
name|getConfligId
parameter_list|()
block|{
return|return
name|iConfigId
return|;
block|}
specifier|public
name|String
name|getLeadingInstructorNames
parameter_list|(
name|String
name|delim
parameter_list|)
block|{
if|if
condition|(
name|getInstructors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|""
return|;
name|String
name|s
init|=
literal|""
decl_stmt|;
for|for
control|(
name|ClassInstructorInfo
name|inst
range|:
name|getInstructors
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|inst
operator|.
name|isLead
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|s
operator|+=
name|delim
expr_stmt|;
name|s
operator|+=
name|inst
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
specifier|public
name|String
name|getClassName
parameter_list|()
block|{
return|return
name|iClassName
return|;
block|}
specifier|public
name|String
name|getClassNameHtml
parameter_list|()
block|{
return|return
literal|"<span title='"
operator|+
name|iClassTitle
operator|+
literal|"'>"
operator|+
name|iClassName
operator|+
literal|"</span>"
return|;
block|}
specifier|public
name|Long
name|getClassId
parameter_list|()
block|{
return|return
name|iClassId
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getClassId
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|ClassInfo
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ClassInfo
operator|)
name|o
operator|)
operator|.
name|getClassId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|ClassInfo
name|classInfo
parameter_list|)
block|{
name|int
name|cmp
init|=
name|getClassName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|classInfo
operator|.
name|getClassName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|getClassId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|classInfo
operator|.
name|getClassId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Class_
name|getClazz
parameter_list|()
block|{
if|if
condition|(
name|iClass
operator|==
literal|null
condition|)
name|iClass
operator|=
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|getClassId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|iClass
return|;
block|}
specifier|public
name|Class_
name|getClazz
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
return|return
operator|new
name|Class_DAO
argument_list|()
operator|.
name|get
argument_list|(
name|getClassId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
return|;
block|}
specifier|public
name|int
name|getNumberOfRooms
parameter_list|()
block|{
return|return
name|iNrRooms
return|;
block|}
specifier|public
name|int
name|getClassLimit
parameter_list|()
block|{
return|return
name|iLimit
return|;
block|}
specifier|public
name|int
name|getEnrollment
parameter_list|()
block|{
return|return
name|iEnrollment
return|;
block|}
specifier|public
name|String
name|getClassDivSec
parameter_list|()
block|{
return|return
name|getClazz
argument_list|()
operator|.
name|getDivSecNumber
argument_list|()
return|;
block|}
specifier|public
name|String
name|getRoomRatio
parameter_list|()
block|{
return|return
operator|new
name|DecimalFormat
argument_list|(
literal|"0.0"
argument_list|)
operator|.
name|format
argument_list|(
name|getClazz
argument_list|()
operator|.
name|getRoomRatio
argument_list|()
operator|==
literal|null
condition|?
literal|1.0f
else|:
name|getClazz
argument_list|()
operator|.
name|getRoomRatio
argument_list|()
operator|.
name|floatValue
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|getMinRoomCapacity
parameter_list|()
block|{
return|return
name|getClazz
argument_list|()
operator|.
name|getMinRoomLimit
argument_list|()
return|;
block|}
specifier|public
name|String
name|getManager
parameter_list|()
block|{
return|return
name|getClazz
argument_list|()
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getLabel
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|shareInstructor
parameter_list|(
name|ClassInfo
name|info
parameter_list|)
block|{
for|for
control|(
name|ClassInstructorInfo
name|i1
range|:
name|getInstructors
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|i1
operator|.
name|isLead
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|ClassInstructorInfo
name|i2
range|:
name|info
operator|.
name|getInstructors
argument_list|()
control|)
block|{
if|if
condition|(
name|i2
operator|.
name|isLead
argument_list|()
operator|&&
name|i1
operator|.
name|equals
argument_list|(
name|i2
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

