begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|course
operator|.
name|ui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|PatternSyntaxException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|preference
operator|.
name|MinMaxPreferenceCombination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|preference
operator|.
name|PreferenceCombination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|preference
operator|.
name|SumPreferenceCombination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|LazyInitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ClassInfoForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|RoomAvailabilityInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|RoomAvailabilityInterface
operator|.
name|TimeBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Building
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|BuildingPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassDurationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePatternPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExactTimeMins
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeaturePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroupPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomSharingModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePatternModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|LocationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|course
operator|.
name|ui
operator|.
name|ClassAssignmentInfo
operator|.
name|StudentConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DefaultRoomAvailabilityService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|RoomAvailability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|duration
operator|.
name|DurationModel
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ClassInfoModel
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1373805772613891251L
decl_stmt|;
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ClassInfoModel
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ClassInfo
name|iClass
init|=
literal|null
decl_stmt|;
specifier|private
name|ClassInfoForm
name|iForm
init|=
literal|null
decl_stmt|;
specifier|private
name|ClassProposedChange
name|iChange
init|=
literal|null
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|ClassAssignment
argument_list|>
name|iDates
init|=
literal|null
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|ClassAssignment
argument_list|>
name|iTimes
init|=
literal|null
decl_stmt|;
specifier|private
name|Vector
argument_list|<
name|ClassRoomInfo
argument_list|>
name|iRooms
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iShowStudentConflicts
init|=
name|ApplicationProperty
operator|.
name|ClassAssignmentShowStudentConflicts
operator|.
name|isTrue
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|iUnassignConflictingAssignments
init|=
literal|false
decl_stmt|;
specifier|private
specifier|transient
name|SessionContext
name|iContext
init|=
literal|null
decl_stmt|;
specifier|public
name|void
name|clear
parameter_list|(
name|String
name|userId
parameter_list|)
block|{
name|iClass
operator|=
literal|null
expr_stmt|;
name|iChange
operator|=
literal|null
expr_stmt|;
name|iRooms
operator|=
literal|null
expr_stmt|;
name|iDates
operator|=
literal|null
expr_stmt|;
name|iTimes
operator|=
literal|null
expr_stmt|;
name|iUnassignConflictingAssignments
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|ClassInfo
name|getClazz
parameter_list|()
block|{
return|return
name|iClass
return|;
block|}
specifier|public
name|ClassAssignmentInfo
name|getClassOldAssignment
parameter_list|()
block|{
if|if
condition|(
name|iClass
operator|instanceof
name|ClassAssignmentInfo
condition|)
return|return
operator|(
name|ClassAssignmentInfo
operator|)
name|iClass
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|ClassAssignmentInfo
name|getClassAssignment
parameter_list|()
block|{
if|if
condition|(
name|iChange
operator|!=
literal|null
operator|&&
name|iChange
operator|.
name|getConflict
argument_list|(
name|iClass
argument_list|)
operator|!=
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|iClass
operator|instanceof
name|ClassAssignmentInfo
condition|)
return|return
operator|(
name|ClassAssignmentInfo
operator|)
name|iClass
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|isClassAssigned
parameter_list|()
block|{
return|return
name|getClassAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|getClassAssignment
argument_list|()
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
return|;
block|}
specifier|public
name|ClassDateInfo
name|getAssignedDate
parameter_list|()
block|{
try|try
block|{
name|ClassAssignmentInfo
name|info
init|=
name|getSelectedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
operator|&&
name|info
operator|.
name|hasDate
argument_list|()
condition|)
return|return
name|info
operator|.
name|getDate
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|DatePattern
name|dp
init|=
name|getClazz
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|effectiveDatePattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|dp
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|dp
operator|.
name|getType
argument_list|()
operator|!=
name|DatePattern
operator|.
name|sTypeAlternate
condition|)
block|{
return|return
operator|new
name|ClassDateInfo
argument_list|(
name|dp
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|,
name|dp
operator|.
name|getName
argument_list|()
argument_list|,
name|dp
operator|.
name|getPatternBitSet
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|sIntLevelNeutral
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|update
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|iChange
operator|==
literal|null
condition|)
return|return;
name|Vector
argument_list|<
name|ClassAssignment
argument_list|>
name|assignments
init|=
operator|new
name|Vector
argument_list|(
name|iChange
operator|.
name|getAssignments
argument_list|()
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|ClassAssignment
argument_list|>
name|table
init|=
name|iChange
operator|.
name|getAssignmentTable
argument_list|()
decl_stmt|;
name|iUnassignConflictingAssignments
operator|=
operator|!
name|iForm
operator|.
name|getKeepConflictingAssignments
argument_list|()
expr_stmt|;
name|iChange
operator|.
name|getAssignments
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|ClassAssignment
name|assignment
range|:
name|assignments
control|)
block|{
name|iChange
operator|.
name|getAssignments
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ClassAssignmentInfo
argument_list|(
name|assignment
operator|.
name|getClazz
argument_list|()
argument_list|,
name|assignment
operator|.
name|getTime
argument_list|()
argument_list|,
name|assignment
operator|.
name|getDate
argument_list|()
argument_list|,
name|assignment
operator|.
name|getRooms
argument_list|()
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|assignments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|ClassAssignment
argument_list|>
name|i
init|=
name|iChange
operator|.
name|getConflicts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassAssignment
name|assignment
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|assignment
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|iChange
operator|.
name|getConflicts
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|ClassAssignment
name|assignment
range|:
name|iChange
operator|.
name|getAssignments
argument_list|()
control|)
block|{
comment|// Skip incomplete assignments (that have no time assigned yet)
if|if
condition|(
operator|!
name|assignment
operator|.
name|hasTime
argument_list|()
condition|)
continue|continue;
comment|// Check for room conflicts
if|if
condition|(
name|iUnassignConflictingAssignments
condition|)
block|{
if|if
condition|(
name|assignment
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|ClassRoomInfo
name|room
range|:
name|assignment
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|room
operator|.
name|isIgnoreRoomChecks
argument_list|()
condition|)
block|{
for|for
control|(
name|Assignment
name|a
range|:
name|room
operator|.
name|getLocation
argument_list|()
operator|.
name|getCommitedAssignments
argument_list|()
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|isCancelled
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|assignment
operator|.
name|getTime
argument_list|()
operator|.
name|overlaps
argument_list|(
operator|new
name|ClassTimeInfo
argument_list|(
name|a
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|iChange
operator|.
name|getCurrent
argument_list|(
name|a
operator|.
name|getClassId
argument_list|()
argument_list|)
operator|==
literal|null
operator|&&
name|iChange
operator|.
name|getConflict
argument_list|(
name|a
operator|.
name|getClassId
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
name|iChange
operator|.
name|getConflicts
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ClassAssignment
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Check for instructor conflicts
if|if
condition|(
name|assignment
operator|.
name|getInstructors
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|ClassInstructorInfo
name|instructor
range|:
name|assignment
operator|.
name|getInstructors
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|instructor
operator|.
name|isLead
argument_list|()
condition|)
continue|continue;
comment|// check all departmental instructors with the same external id
for|for
control|(
name|DepartmentalInstructor
name|di
range|:
name|DepartmentalInstructor
operator|.
name|getAllForInstructor
argument_list|(
name|instructor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getInstructor
argument_list|()
argument_list|)
control|)
block|{
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|di
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|ci
operator|.
name|equals
argument_list|(
name|instructor
operator|.
name|getInstructor
argument_list|()
argument_list|)
condition|)
continue|continue;
name|Assignment
name|a
init|=
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
operator|||
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|isCancelled
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|assignment
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
operator|&&
name|assignment
operator|.
name|getTime
argument_list|()
operator|.
name|overlaps
argument_list|(
operator|new
name|ClassTimeInfo
argument_list|(
name|a
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|iChange
operator|.
name|getCurrent
argument_list|(
name|a
operator|.
name|getClassId
argument_list|()
argument_list|)
operator|==
literal|null
operator|&&
name|iChange
operator|.
name|getConflict
argument_list|(
name|a
operator|.
name|getClassId
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
name|iChange
operator|.
name|getConflicts
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ClassAssignment
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/* 	            	// Potential speed-up #1) only check the current department instructors 	            	for (ClassInstructor ci : instructor.getInstructor().getInstructor().getClasses()) { 	            		if (ci.equals(instructor.getInstructor())) continue; 	            		Assignment a = ci.getClassInstructing().getCommittedAssignment(); 	            		if (a == null) continue; 	            		if (assignment.getTime().overlaps(new ClassTimeInfo(a))) { 	            			if (iChange.getCurrent(a.getClassId())==null&& iChange.getConflict(a.getClassId())==null) 	            				iChange.getConflicts().add(new ClassAssignment(a)); 	            		} 	            	} 	            	*/
comment|/* 	            	// Potential speed-up #2) use instructor assignments from the solution 	            	for (Assignment a : instructor.getInstructor().getInstructor().getCommitedAssignments()) { 	            		if (assignment.getTime().overlaps(new ClassTimeInfo(a))) { 	            			if (iChange.getCurrent(a.getClassId())==null&& iChange.getConflict(a.getClassId())==null) 	            				iChange.getConflicts().add(new ClassAssignment(a)); 	            		} 	            	} 	            	*/
block|}
block|}
comment|// Check the course structure for conflicts
name|Class_
name|clazz
init|=
name|assignment
operator|.
name|getClazz
argument_list|(
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
comment|// a) all parents
name|Class_
name|parent
init|=
name|clazz
operator|.
name|getParentClass
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|iChange
operator|.
name|getCurrent
argument_list|(
name|parent
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|==
literal|null
operator|&&
name|iChange
operator|.
name|getConflict
argument_list|(
name|parent
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|Assignment
name|a
init|=
name|parent
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
operator|!
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|isCancelled
argument_list|()
operator|&&
name|assignment
operator|.
name|getTime
argument_list|()
operator|.
name|overlaps
argument_list|(
operator|new
name|ClassTimeInfo
argument_list|(
name|a
argument_list|)
argument_list|)
condition|)
block|{
name|iChange
operator|.
name|getConflicts
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ClassAssignment
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|parent
operator|=
name|parent
operator|.
name|getParentClass
argument_list|()
expr_stmt|;
block|}
comment|// b) all children
name|Queue
argument_list|<
name|Class_
argument_list|>
name|children
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
try|try
block|{
name|children
operator|.
name|addAll
argument_list|(
name|clazz
operator|.
name|getChildClasses
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LazyInitializationException
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"This should never happen."
argument_list|)
expr_stmt|;
name|Class_
name|c
init|=
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|assignment
operator|.
name|getClassId
argument_list|()
argument_list|)
decl_stmt|;
name|children
operator|.
name|addAll
argument_list|(
name|c
operator|.
name|getChildClasses
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Class_
name|child
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|child
operator|=
name|children
operator|.
name|poll
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|iChange
operator|.
name|getCurrent
argument_list|(
name|child
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|==
literal|null
operator|&&
name|iChange
operator|.
name|getConflict
argument_list|(
name|child
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|Assignment
name|a
init|=
name|child
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
operator|!
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|isCancelled
argument_list|()
operator|&&
name|assignment
operator|.
name|getTime
argument_list|()
operator|.
name|overlaps
argument_list|(
operator|new
name|ClassTimeInfo
argument_list|(
name|a
argument_list|)
argument_list|)
condition|)
block|{
name|iChange
operator|.
name|getConflicts
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ClassAssignment
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|child
operator|.
name|getChildClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|children
operator|.
name|addAll
argument_list|(
name|child
operator|.
name|getChildClasses
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// c) all single-class subparts
for|for
control|(
name|Iterator
name|i
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|child
operator|=
operator|(
name|Class_
operator|)
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|iChange
operator|.
name|getCurrent
argument_list|(
name|child
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|==
literal|null
operator|&&
name|iChange
operator|.
name|getConflict
argument_list|(
name|child
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|Assignment
name|a
init|=
name|child
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
operator|!
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|isCancelled
argument_list|()
operator|&&
name|assignment
operator|.
name|getTime
argument_list|()
operator|.
name|overlaps
argument_list|(
operator|new
name|ClassTimeInfo
argument_list|(
name|a
argument_list|)
argument_list|)
condition|)
block|{
name|iChange
operator|.
name|getConflicts
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ClassAssignment
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|child
operator|.
name|getChildClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|children
operator|.
name|addAll
argument_list|(
name|child
operator|.
name|getChildClasses
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//TODO: Check for other HARD conflicts (e.g., distribution constraints)
block|}
block|}
specifier|public
name|String
name|assign
parameter_list|(
name|SessionContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|iChange
operator|==
literal|null
condition|)
return|return
literal|"Nothing to assign."
return|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|ClassAssignmentAllowUnassignments
operator|.
name|isFalse
argument_list|()
operator|&&
operator|!
name|iChange
operator|.
name|getConflicts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|"It is not allowed to keep a class unassigned."
return|;
name|sLog
operator|.
name|info
argument_list|(
literal|"About to be assigned: "
operator|+
name|iChange
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|String
name|message
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|Long
argument_list|>
argument_list|>
name|touchedOfferingIds
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassAssignment
name|assignment
range|:
name|iChange
operator|.
name|getConflicts
argument_list|()
control|)
block|{
try|try
block|{
name|Class_
name|clazz
init|=
name|assignment
operator|.
name|getClazz
argument_list|(
name|hibSession
argument_list|)
decl_stmt|;
name|String
name|m
init|=
name|clazz
operator|.
name|unassignCommited
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
name|message
operator|=
operator|(
name|message
operator|==
literal|null
condition|?
literal|""
else|:
name|message
operator|+
literal|"\n"
operator|)
operator|+
name|m
expr_stmt|;
name|Long
name|offeringId
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|classIds
init|=
name|touchedOfferingIds
operator|.
name|get
argument_list|(
name|offeringId
argument_list|)
decl_stmt|;
if|if
condition|(
name|classIds
operator|==
literal|null
condition|)
block|{
name|classIds
operator|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|touchedOfferingIds
operator|.
name|put
argument_list|(
name|offeringId
argument_list|,
name|classIds
argument_list|)
expr_stmt|;
block|}
name|classIds
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|message
operator|=
operator|(
name|message
operator|==
literal|null
condition|?
literal|""
else|:
name|message
operator|+
literal|"\n"
operator|)
operator|+
literal|"Unassignment of "
operator|+
name|assignment
operator|.
name|getClassName
argument_list|()
operator|+
literal|" failed, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|ClassAssignment
name|assignment
range|:
name|iChange
operator|.
name|getAssignments
argument_list|()
control|)
block|{
try|try
block|{
name|Class_
name|clazz
init|=
name|assignment
operator|.
name|getClazz
argument_list|(
name|hibSession
argument_list|)
decl_stmt|;
name|String
name|m
init|=
name|clazz
operator|.
name|assignCommited
argument_list|(
name|getAssignmentInfo
argument_list|(
name|assignment
argument_list|)
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
name|message
operator|=
operator|(
name|message
operator|==
literal|null
condition|?
literal|""
else|:
name|message
operator|+
literal|"\n"
operator|)
operator|+
name|m
expr_stmt|;
name|Long
name|offeringId
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|classIds
init|=
name|touchedOfferingIds
operator|.
name|get
argument_list|(
name|offeringId
argument_list|)
decl_stmt|;
if|if
condition|(
name|classIds
operator|==
literal|null
condition|)
block|{
name|classIds
operator|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|touchedOfferingIds
operator|.
name|put
argument_list|(
name|offeringId
argument_list|,
name|classIds
argument_list|)
expr_stmt|;
block|}
name|classIds
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|message
operator|=
operator|(
name|message
operator|==
literal|null
condition|?
literal|""
else|:
name|message
operator|+
literal|"\n"
operator|)
operator|+
literal|"Assignment of "
operator|+
name|assignment
operator|.
name|getClassName
argument_list|()
operator|+
literal|" to "
operator|+
name|assignment
operator|.
name|getTime
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|assignment
operator|.
name|getRoomNames
argument_list|(
literal|", "
argument_list|)
operator|+
literal|" failed, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
block|}
name|Long
name|sessionId
init|=
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|isTestSession
argument_list|()
condition|)
block|{
if|if
condition|(
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canOnlineSectionStudents
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|unlockedOfferings
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|offeringId
range|:
name|touchedOfferingIds
operator|.
name|keySet
argument_list|()
control|)
if|if
condition|(
operator|!
name|session
operator|.
name|isOfferingLocked
argument_list|(
name|offeringId
argument_list|)
condition|)
name|unlockedOfferings
operator|.
name|add
argument_list|(
name|offeringId
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|unlockedOfferings
operator|.
name|isEmpty
argument_list|()
condition|)
name|StudentSectioningQueue
operator|.
name|offeringChanged
argument_list|(
name|hibSession
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
name|sessionId
argument_list|,
name|unlockedOfferings
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canSectionAssistStudents
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|Long
argument_list|>
argument_list|>
name|entry
range|:
name|touchedOfferingIds
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|session
operator|.
name|isOfferingLocked
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
name|StudentSectioningQueue
operator|.
name|classAssignmentChanged
argument_list|(
name|hibSession
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
name|sessionId
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|message
return|;
block|}
specifier|public
name|boolean
name|getCanAssign
parameter_list|()
block|{
if|if
condition|(
name|iChange
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|ClassAssignment
name|assignment
range|:
name|iChange
operator|.
name|getAssignments
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|assignment
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|assignment
operator|.
name|getClazz
argument_list|()
argument_list|,
name|Right
operator|.
name|ClassAssignment
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
for|for
control|(
name|ClassAssignment
name|assignment
range|:
name|iChange
operator|.
name|getConflicts
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|assignment
operator|.
name|getClazz
argument_list|()
argument_list|,
name|Right
operator|.
name|ClassAssignment
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
if|if
condition|(
name|ApplicationProperty
operator|.
name|ClassAssignmentAllowUnassignments
operator|.
name|isFalse
argument_list|()
operator|&&
operator|!
name|iChange
operator|.
name|getConflicts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
specifier|public
name|String
name|getAssignConfirm
parameter_list|()
block|{
return|return
literal|"The selected assignment will be done directly in the database. Are you sure?"
return|;
block|}
specifier|public
name|void
name|setForm
parameter_list|(
name|ClassInfoForm
name|form
parameter_list|)
block|{
name|iForm
operator|=
name|form
expr_stmt|;
block|}
specifier|public
name|void
name|setClazz
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
name|iDates
operator|=
literal|null
expr_stmt|;
name|iTimes
operator|=
literal|null
expr_stmt|;
name|iRooms
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|iClass
operator|=
operator|new
name|ClassAssignmentInfo
argument_list|(
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|iClass
operator|=
operator|new
name|ClassInfo
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
if|if
condition|(
name|iChange
operator|!=
literal|null
condition|)
block|{
name|iChange
operator|.
name|setSelected
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
comment|/*             for (Iterator<ClassAssignmentInfo> i=iChange.getAssignments().iterator();i.hasNext();) {                 ClassAssignmentInfo a = i.next();                 if (!a.isValid()) i.remove();             }             */
block|}
if|if
condition|(
name|clazz
operator|.
name|getNbrRooms
argument_list|()
operator|>
literal|0
condition|)
block|{
name|iForm
operator|.
name|setMinRoomSize
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|clazz
operator|.
name|getMinRoomLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|setMaxRoomSize
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|iForm
operator|.
name|setRoomFilter
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ClassAssignmentInfo
name|getAssignmentInfo
parameter_list|(
name|ClassAssignment
name|assignment
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|assignment
operator|instanceof
name|ClassAssignmentInfo
condition|)
return|return
operator|(
name|ClassAssignmentInfo
operator|)
name|assignment
return|;
if|if
condition|(
name|iChange
operator|!=
literal|null
condition|)
return|return
operator|new
name|ClassAssignmentInfo
argument_list|(
name|assignment
operator|.
name|getClazz
argument_list|()
argument_list|,
name|assignment
operator|.
name|getTime
argument_list|()
argument_list|,
name|assignment
operator|.
name|getDate
argument_list|()
argument_list|,
name|assignment
operator|.
name|getRooms
argument_list|()
argument_list|,
name|iChange
operator|.
name|getAssignmentTable
argument_list|()
argument_list|)
return|;
else|else
return|return
operator|new
name|ClassAssignmentInfo
argument_list|(
name|assignment
operator|.
name|getClazz
argument_list|()
argument_list|,
name|assignment
operator|.
name|getTime
argument_list|()
argument_list|,
name|assignment
operator|.
name|getDate
argument_list|()
argument_list|,
name|assignment
operator|.
name|getRooms
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|ClassAssignmentInfo
name|getSelectedAssignment
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|iChange
operator|==
literal|null
condition|)
return|return
literal|null
return|;
for|for
control|(
name|ClassAssignment
name|assignment
range|:
name|iChange
operator|.
name|getAssignments
argument_list|()
control|)
if|if
condition|(
name|assignment
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|iClass
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
return|return
name|getAssignmentInfo
argument_list|(
name|assignment
argument_list|)
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setDate
parameter_list|(
name|String
name|dateId
parameter_list|)
throws|throws
name|Exception
block|{
name|iRooms
operator|=
literal|null
expr_stmt|;
name|iTimes
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|iChange
operator|==
literal|null
condition|)
name|iChange
operator|=
operator|new
name|ClassProposedChange
argument_list|()
expr_stmt|;
name|Class_
name|clazz
init|=
name|getClazz
argument_list|()
operator|.
name|getClazz
argument_list|()
decl_stmt|;
name|DurationModel
name|dm
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getDurationModel
argument_list|()
decl_stmt|;
name|ClassTimeInfo
name|time
init|=
operator|(
name|getSelectedAssignment
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|getSelectedAssignment
argument_list|()
operator|.
name|getTime
argument_list|()
operator|)
decl_stmt|;
name|Collection
argument_list|<
name|ClassRoomInfo
argument_list|>
name|rooms
init|=
operator|(
name|getSelectedAssignment
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|getSelectedAssignment
argument_list|()
operator|.
name|getRooms
argument_list|()
operator|)
decl_stmt|;
for|for
control|(
name|ClassAssignment
name|date
range|:
name|getDates
argument_list|()
control|)
block|{
if|if
condition|(
name|dateId
operator|.
name|equals
argument_list|(
name|date
operator|.
name|getDateId
argument_list|()
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Date
argument_list|>
name|dates
init|=
operator|(
name|time
operator|==
literal|null
operator|||
operator|!
name|date
operator|.
name|hasDate
argument_list|()
condition|?
literal|null
else|:
name|dm
operator|.
name|getDates
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|,
name|date
operator|.
name|getDate
argument_list|()
operator|.
name|getDatePattern
argument_list|()
argument_list|,
name|time
operator|.
name|getDayCode
argument_list|()
argument_list|,
name|time
operator|.
name|getMinutesPerMeeting
argument_list|()
argument_list|)
operator|)
decl_stmt|;
name|iChange
operator|.
name|addChange
argument_list|(
operator|new
name|ClassAssignmentInfo
argument_list|(
name|getClazz
argument_list|()
operator|.
name|getClazz
argument_list|()
argument_list|,
operator|(
name|time
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|ClassTimeInfo
argument_list|(
name|time
argument_list|,
name|date
operator|.
name|getDate
argument_list|()
argument_list|,
name|dates
argument_list|)
operator|)
argument_list|,
name|date
operator|.
name|getDate
argument_list|()
argument_list|,
name|rooms
argument_list|,
name|iChange
operator|.
name|getAssignmentTable
argument_list|()
argument_list|)
argument_list|,
name|getClassOldAssignment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iChange
operator|.
name|isEmpty
argument_list|()
condition|)
name|iChange
operator|=
literal|null
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setTime
parameter_list|(
name|String
name|timeId
parameter_list|)
throws|throws
name|Exception
block|{
name|iRooms
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|iChange
operator|==
literal|null
condition|)
name|iChange
operator|=
operator|new
name|ClassProposedChange
argument_list|()
expr_stmt|;
for|for
control|(
name|ClassAssignment
name|time
range|:
name|getAllTimes
argument_list|()
control|)
block|{
if|if
condition|(
name|timeId
operator|.
name|equals
argument_list|(
name|time
operator|.
name|getTimeId
argument_list|()
argument_list|)
condition|)
block|{
name|iChange
operator|.
name|addChange
argument_list|(
operator|new
name|ClassAssignmentInfo
argument_list|(
name|getClazz
argument_list|()
operator|.
name|getClazz
argument_list|()
argument_list|,
name|time
operator|.
name|getTime
argument_list|()
argument_list|,
name|time
operator|.
name|getDate
argument_list|()
argument_list|,
literal|null
argument_list|,
name|iChange
operator|.
name|getAssignmentTable
argument_list|()
argument_list|)
argument_list|,
name|getClassOldAssignment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"-1"
operator|.
name|equals
argument_list|(
name|timeId
argument_list|)
condition|)
block|{
name|iChange
operator|.
name|addChange
argument_list|(
operator|new
name|ClassAssignmentInfo
argument_list|(
name|getClazz
argument_list|()
operator|.
name|getClazz
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|iChange
operator|.
name|getAssignmentTable
argument_list|()
argument_list|)
argument_list|,
name|getClassOldAssignment
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iChange
operator|.
name|isEmpty
argument_list|()
condition|)
name|iChange
operator|=
literal|null
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|delete
parameter_list|(
name|long
name|classId
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|iChange
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|Iterator
argument_list|<
name|ClassAssignmentInfo
argument_list|>
name|i
init|=
name|iChange
operator|.
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassAssignmentInfo
name|x
init|=
operator|(
name|ClassAssignmentInfo
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|classId
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|update
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setRooms
parameter_list|(
name|String
name|rooms
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|iChange
operator|==
literal|null
condition|)
name|iChange
operator|=
operator|new
name|ClassProposedChange
argument_list|()
expr_stmt|;
name|ClassAssignment
name|assignment
init|=
name|iChange
operator|.
name|getCurrent
argument_list|(
name|iClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignment
operator|==
literal|null
operator|&&
name|isClassAssigned
argument_list|()
condition|)
block|{
for|for
control|(
name|ClassAssignment
name|time
range|:
name|getAllTimes
argument_list|()
control|)
block|{
if|if
condition|(
name|getClassOldAssignment
argument_list|()
operator|.
name|getTimeId
argument_list|()
operator|.
name|equals
argument_list|(
name|time
operator|.
name|getTimeId
argument_list|()
argument_list|)
condition|)
block|{
name|assignment
operator|=
name|time
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|assignment
operator|==
literal|null
condition|)
return|return;
name|TreeSet
argument_list|<
name|ClassRoomInfo
argument_list|>
name|assignedRooms
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|stk
init|=
operator|new
name|StringTokenizer
argument_list|(
name|rooms
argument_list|,
literal|":"
argument_list|)
init|;
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|token
init|=
name|stk
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
name|Long
name|roomId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|token
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|token
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ClassRoomInfo
name|room
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ClassRoomInfo
name|r
range|:
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getLocationId
argument_list|()
operator|.
name|equals
argument_list|(
name|roomId
argument_list|)
condition|)
block|{
name|room
operator|=
name|r
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|room
operator|!=
literal|null
condition|)
name|assignedRooms
operator|.
name|add
argument_list|(
name|room
argument_list|)
expr_stmt|;
block|}
name|iChange
operator|.
name|addChange
argument_list|(
operator|new
name|ClassAssignmentInfo
argument_list|(
name|getClazz
argument_list|()
operator|.
name|getClazz
argument_list|()
argument_list|,
name|assignment
operator|.
name|getTime
argument_list|()
argument_list|,
name|assignment
operator|.
name|getDate
argument_list|()
argument_list|,
name|assignedRooms
argument_list|,
name|iChange
operator|.
name|getAssignmentTable
argument_list|()
argument_list|)
argument_list|,
name|getClassOldAssignment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iChange
operator|.
name|isEmpty
argument_list|()
condition|)
name|iChange
operator|=
literal|null
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|apply
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|ClassInfoForm
name|form
parameter_list|)
block|{
name|iForm
operator|=
name|form
expr_stmt|;
block|}
specifier|public
name|void
name|refreshRooms
parameter_list|()
block|{
name|iRooms
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getDatesTable
parameter_list|()
block|{
try|try
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
name|ret
operator|+=
literal|"<script language='javascript'>"
expr_stmt|;
name|ret
operator|+=
literal|"function dateOver(source, id) { "
expr_stmt|;
name|ret
operator|+=
literal|"    document.getElementById('d'+id).style.backgroundColor='rgb(223,231,242)';"
expr_stmt|;
if|if
condition|(
name|iShowStudentConflicts
condition|)
name|ret
operator|+=
literal|"    document.getElementById('dc'+id).style.backgroundColor='rgb(223,231,242)';"
expr_stmt|;
name|ret
operator|+=
literal|"    source.style.cursor='hand';source.style.cursor='pointer';"
expr_stmt|;
name|ret
operator|+=
literal|"}"
expr_stmt|;
name|ret
operator|+=
literal|"function dateOut(id) { "
expr_stmt|;
name|ret
operator|+=
literal|"    var bg = 'transparent';"
expr_stmt|;
name|ClassAssignment
name|classAssignment
init|=
operator|(
name|iChange
operator|==
literal|null
condition|?
literal|null
else|:
name|iChange
operator|.
name|getCurrent
argument_list|(
name|iClass
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|classAssignment
operator|!=
literal|null
operator|&&
name|classAssignment
operator|.
name|hasDate
argument_list|()
condition|)
name|ret
operator|+=
literal|"    if (id=='"
operator|+
name|classAssignment
operator|.
name|getDateId
argument_list|()
operator|+
literal|"') bg='rgb(168,187,225)';"
expr_stmt|;
name|ret
operator|+=
literal|"    document.getElementById('d'+id).style.backgroundColor=bg;"
expr_stmt|;
if|if
condition|(
name|iShowStudentConflicts
condition|)
name|ret
operator|+=
literal|"    document.getElementById('dc'+id).style.backgroundColor=bg;"
expr_stmt|;
name|ret
operator|+=
literal|"}"
expr_stmt|;
name|ret
operator|+=
literal|"function dateClick(source, id) { "
expr_stmt|;
name|ret
operator|+=
literal|"    displayLoading();"
expr_stmt|;
name|ret
operator|+=
literal|"    document.location='classInfo.do?op=Select&date='+id+'&noCacheTS="
operator|+
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|+
literal|"';"
expr_stmt|;
name|ret
operator|+=
literal|"}"
expr_stmt|;
name|ret
operator|+=
literal|"</script>"
expr_stmt|;
name|ret
operator|+=
literal|"<table border='0' cellspacing='0' cellpadding='3'>"
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|int
name|step
init|=
literal|5
decl_stmt|;
for|for
control|(
name|ClassAssignment
name|date
range|:
name|getDates
argument_list|()
control|)
block|{
name|boolean
name|initial
init|=
operator|(
name|getClassOldAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|getClassOldAssignment
argument_list|()
operator|.
name|getDateId
argument_list|()
operator|!=
literal|null
operator|&&
name|getClassOldAssignment
argument_list|()
operator|.
name|getDateId
argument_list|()
operator|.
name|equals
argument_list|(
name|date
operator|.
name|getDateId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
operator|(
name|idx
operator|%
name|step
operator|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
name|ret
operator|+=
literal|"</tr>"
expr_stmt|;
name|ret
operator|+=
literal|"<tr>"
expr_stmt|;
block|}
name|String
name|style
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|classAssignment
operator|!=
literal|null
operator|&&
name|date
operator|.
name|getDateId
argument_list|()
operator|.
name|equals
argument_list|(
name|classAssignment
operator|.
name|getDateId
argument_list|()
argument_list|)
condition|)
name|style
operator|+=
literal|"background-color:rgb(168,187,225);"
expr_stmt|;
if|if
condition|(
name|initial
condition|)
name|style
operator|+=
literal|"text-decoration:underline;"
expr_stmt|;
name|String
name|mouse
init|=
literal|"onMouseOver=\"dateOver(this,'"
operator|+
name|date
operator|.
name|getDateId
argument_list|()
operator|+
literal|"');\" "
operator|+
literal|"onMouseOut=\"dateOut('"
operator|+
name|date
operator|.
name|getDateId
argument_list|()
operator|+
literal|"');\" "
operator|+
literal|"onClick=\"dateClick(this,'"
operator|+
name|date
operator|.
name|getDateId
argument_list|()
operator|+
literal|"');\""
decl_stmt|;
if|if
condition|(
name|iShowStudentConflicts
condition|)
block|{
name|ret
operator|+=
literal|"<td nowrap id='d"
operator|+
name|date
operator|.
name|getDateId
argument_list|()
operator|+
literal|"' "
operator|+
operator|(
name|style
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
literal|"style='"
operator|+
name|style
operator|+
literal|"' "
else|:
literal|""
operator|)
operator|+
name|mouse
operator|+
literal|">"
operator|+
name|date
operator|.
name|getDateNameHtml
argument_list|()
operator|+
literal|"</td>"
expr_stmt|;
if|if
condition|(
operator|(
name|idx
operator|%
name|step
operator|)
operator|<
name|step
operator|-
literal|1
condition|)
name|style
operator|+=
literal|"border-right: #646464 1px dashed;"
expr_stmt|;
name|ret
operator|+=
literal|"<td id='dc"
operator|+
name|date
operator|.
name|getDateId
argument_list|()
operator|+
literal|"' "
operator|+
operator|(
name|style
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
literal|"style='"
operator|+
name|style
operator|+
literal|"' "
else|:
literal|""
operator|)
operator|+
name|mouse
operator|+
literal|">"
operator|+
operator|(
name|date
operator|instanceof
name|ClassAssignmentInfo
condition|?
name|String
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
name|ClassAssignmentInfo
operator|)
name|date
operator|)
operator|.
name|getNrStudentCounflicts
argument_list|()
argument_list|)
else|:
literal|""
operator|)
operator|+
literal|"</td>"
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|idx
operator|%
name|step
operator|)
operator|<
name|step
operator|-
literal|1
condition|)
name|style
operator|+=
literal|"border-right: #646464 1px dashed;"
expr_stmt|;
name|ret
operator|+=
literal|"<td nowrap id='d"
operator|+
name|date
operator|.
name|getDateId
argument_list|()
operator|+
literal|"' "
operator|+
operator|(
name|style
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
literal|"style='"
operator|+
name|style
operator|+
literal|"' "
else|:
literal|""
operator|)
operator|+
name|mouse
operator|+
literal|">"
operator|+
name|date
operator|.
name|getDateNameHtml
argument_list|()
operator|+
literal|"</td>"
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
block|}
while|while
condition|(
operator|(
name|idx
operator|%
name|step
operator|)
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|iShowStudentConflicts
condition|)
name|ret
operator|+=
literal|"<td colspan='2'>&nbsp;</td>"
expr_stmt|;
else|else
name|ret
operator|+=
literal|"<td>&nbsp;</td>"
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|ret
operator|+=
literal|"</tr>"
expr_stmt|;
name|ret
operator|+=
literal|"</table>"
expr_stmt|;
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iForm
operator|.
name|setMessage
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|""
return|;
block|}
block|}
specifier|public
name|String
name|getTimesTable
parameter_list|()
block|{
try|try
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
name|ret
operator|+=
literal|"<script language='javascript'>"
expr_stmt|;
name|ret
operator|+=
literal|"function timeOver(source, id) { "
expr_stmt|;
name|ret
operator|+=
literal|"    document.getElementById('t'+id).style.backgroundColor='rgb(223,231,242)';"
expr_stmt|;
if|if
condition|(
name|iShowStudentConflicts
condition|)
name|ret
operator|+=
literal|"    document.getElementById('c'+id).style.backgroundColor='rgb(223,231,242)';"
expr_stmt|;
name|ret
operator|+=
literal|"    source.style.cursor='hand';source.style.cursor='pointer';"
expr_stmt|;
name|ret
operator|+=
literal|"}"
expr_stmt|;
name|ret
operator|+=
literal|"function timeOut(id) { "
expr_stmt|;
name|ret
operator|+=
literal|"    var bg = 'transparent';"
expr_stmt|;
name|ClassAssignment
name|classAssignment
init|=
operator|(
name|iChange
operator|==
literal|null
condition|?
literal|null
else|:
name|iChange
operator|.
name|getCurrent
argument_list|(
name|iClass
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|classAssignment
operator|!=
literal|null
operator|&&
name|classAssignment
operator|.
name|hasTime
argument_list|()
condition|)
name|ret
operator|+=
literal|"    if (id=='"
operator|+
name|classAssignment
operator|.
name|getTimeId
argument_list|()
operator|+
literal|"') bg='rgb(168,187,225)';"
expr_stmt|;
name|ret
operator|+=
literal|"    document.getElementById('t'+id).style.backgroundColor=bg;"
expr_stmt|;
if|if
condition|(
name|iShowStudentConflicts
condition|)
name|ret
operator|+=
literal|"    document.getElementById('c'+id).style.backgroundColor=bg;"
expr_stmt|;
name|ret
operator|+=
literal|"}"
expr_stmt|;
name|ret
operator|+=
literal|"function timeClick(source, id) { "
expr_stmt|;
name|ret
operator|+=
literal|"    displayLoading();"
expr_stmt|;
name|ret
operator|+=
literal|"    document.location='classInfo.do?op=Select&time='+id+'&noCacheTS="
operator|+
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|+
literal|"';"
expr_stmt|;
name|ret
operator|+=
literal|"}"
expr_stmt|;
name|ret
operator|+=
literal|"</script>"
expr_stmt|;
name|ret
operator|+=
literal|"<table border='0' cellspacing='0' cellpadding='3'>"
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|int
name|step
init|=
literal|5
decl_stmt|;
for|for
control|(
name|ClassAssignment
name|time
range|:
name|getTimes
argument_list|()
control|)
block|{
name|boolean
name|initial
init|=
operator|(
name|getClassOldAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|getClassOldAssignment
argument_list|()
operator|.
name|getTimeId
argument_list|()
operator|!=
literal|null
operator|&&
name|getClassOldAssignment
argument_list|()
operator|.
name|getTimeId
argument_list|()
operator|.
name|equals
argument_list|(
name|time
operator|.
name|getTimeId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
operator|(
name|idx
operator|%
name|step
operator|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
name|ret
operator|+=
literal|"</tr>"
expr_stmt|;
name|ret
operator|+=
literal|"<tr>"
expr_stmt|;
block|}
name|String
name|style
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|classAssignment
operator|!=
literal|null
operator|&&
name|time
operator|.
name|getTimeId
argument_list|()
operator|.
name|equals
argument_list|(
name|classAssignment
operator|.
name|getTimeId
argument_list|()
argument_list|)
condition|)
name|style
operator|+=
literal|"background-color:rgb(168,187,225);"
expr_stmt|;
if|if
condition|(
name|initial
condition|)
name|style
operator|+=
literal|"text-decoration:underline;"
expr_stmt|;
name|String
name|mouse
init|=
literal|"onMouseOver=\"timeOver(this,'"
operator|+
name|time
operator|.
name|getTimeId
argument_list|()
operator|+
literal|"');\" "
operator|+
literal|"onMouseOut=\"timeOut('"
operator|+
name|time
operator|.
name|getTimeId
argument_list|()
operator|+
literal|"');\" "
operator|+
literal|"onClick=\"timeClick(this,'"
operator|+
name|time
operator|.
name|getTimeId
argument_list|()
operator|+
literal|"');\""
decl_stmt|;
if|if
condition|(
name|iShowStudentConflicts
condition|)
block|{
name|ret
operator|+=
literal|"<td nowrap id='t"
operator|+
name|time
operator|.
name|getTimeId
argument_list|()
operator|+
literal|"' "
operator|+
operator|(
name|style
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
literal|"style='"
operator|+
name|style
operator|+
literal|"' "
else|:
literal|""
operator|)
operator|+
name|mouse
operator|+
literal|">"
operator|+
name|time
operator|.
name|getTime
argument_list|()
operator|.
name|getLongNameHtml
argument_list|()
operator|+
literal|"</td>"
expr_stmt|;
if|if
condition|(
operator|(
name|idx
operator|%
name|step
operator|)
operator|<
name|step
operator|-
literal|1
condition|)
name|style
operator|+=
literal|"border-right: #646464 1px dashed;"
expr_stmt|;
name|ret
operator|+=
literal|"<td id='c"
operator|+
name|time
operator|.
name|getTimeId
argument_list|()
operator|+
literal|"' "
operator|+
operator|(
name|style
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
literal|"style='"
operator|+
name|style
operator|+
literal|"' "
else|:
literal|""
operator|)
operator|+
name|mouse
operator|+
literal|">"
operator|+
operator|(
operator|(
name|ClassAssignmentInfo
operator|)
name|time
operator|)
operator|.
name|getNrStudentCounflicts
argument_list|()
operator|+
literal|"</td>"
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|idx
operator|%
name|step
operator|)
operator|<
name|step
operator|-
literal|1
condition|)
name|style
operator|+=
literal|"border-right: #646464 1px dashed;"
expr_stmt|;
name|ret
operator|+=
literal|"<td nowrap id='t"
operator|+
name|time
operator|.
name|getTimeId
argument_list|()
operator|+
literal|"' "
operator|+
operator|(
name|style
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
literal|"style='"
operator|+
name|style
operator|+
literal|"' "
else|:
literal|""
operator|)
operator|+
name|mouse
operator|+
literal|">"
operator|+
name|time
operator|.
name|getTime
argument_list|()
operator|.
name|getLongNameHtml
argument_list|()
operator|+
literal|"</td>"
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|classAssignment
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|(
name|idx
operator|%
name|step
operator|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
name|ret
operator|+=
literal|"</tr>"
expr_stmt|;
name|ret
operator|+=
literal|"<tr>"
expr_stmt|;
block|}
name|String
name|style
init|=
literal|"font-style:italic; color:#c81e14;"
decl_stmt|;
name|String
name|mouse
init|=
literal|"onMouseOver=\"timeOver(this,'-1');\" "
operator|+
literal|"onMouseOut=\"timeOut('-1');\" "
operator|+
literal|"onClick=\"timeClick(this,'-1');\""
decl_stmt|;
if|if
condition|(
name|iShowStudentConflicts
condition|)
block|{
name|ret
operator|+=
literal|"<td nowrap id='t-1' "
operator|+
operator|(
name|style
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
literal|"style='"
operator|+
name|style
operator|+
literal|"' "
else|:
literal|""
operator|)
operator|+
name|mouse
operator|+
literal|">not-assigned</td>"
expr_stmt|;
if|if
condition|(
operator|(
name|idx
operator|%
name|step
operator|)
operator|<
name|step
operator|-
literal|1
condition|)
name|style
operator|+=
literal|"border-right: #646464 1px dashed;"
expr_stmt|;
name|ret
operator|+=
literal|"<td id='c-1' "
operator|+
operator|(
name|style
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
literal|"style='"
operator|+
name|style
operator|+
literal|"' "
else|:
literal|""
operator|)
operator|+
name|mouse
operator|+
literal|"></td>"
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|idx
operator|%
name|step
operator|)
operator|<
name|step
operator|-
literal|1
condition|)
name|style
operator|+=
literal|"border-right: #646464 1px dashed;"
expr_stmt|;
name|ret
operator|+=
literal|"<td nowrap id='t-1' "
operator|+
operator|(
name|style
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
literal|"style='"
operator|+
name|style
operator|+
literal|"' "
else|:
literal|""
operator|)
operator|+
name|mouse
operator|+
literal|">not-assigned</td>"
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
block|}
while|while
condition|(
operator|(
name|idx
operator|%
name|step
operator|)
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|iShowStudentConflicts
condition|)
name|ret
operator|+=
literal|"<td colspan='2'>&nbsp;</td>"
expr_stmt|;
else|else
name|ret
operator|+=
literal|"<td>&nbsp;</td>"
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|ret
operator|+=
literal|"</tr>"
expr_stmt|;
name|ret
operator|+=
literal|"</table>"
expr_stmt|;
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iForm
operator|.
name|setMessage
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|""
return|;
block|}
comment|/*    	         try {             WebTable table = new WebTable(8, "Available Times for "+getClazz().getClassName(), "classInfo.do?op=Reorder&pord=%%",                      new String[] {"Time"},                     new String[] {"left"},                     new boolean[] { true});             ClassAssignmentInfo current = getClassAssignment();             for (ClassAssignmentInfo time : getTimes()) {                 boolean initial = (getClassOldAssignment()!=null&& getClassOldAssignment().getTimeId()!=null&& getClassOldAssignment().getTimeId().equals(time.getTimeId()));                 WebTable.WebTableLine line = table.addLine(                    "onClick=\"displayLoading();document.location='classInfo.do?op=Select&time="+time.getTimeId()+"';\"",                    new String[] {                         (initial?"<u>":"")+time.getTime().getLongNameHtml()+(initial?"</u>":"")                     }, new Comparable[] {                         time.getTime()                     });                 ClassAssignment ClassAssignment = (iChange==null?null:iChange.getCurrent(iClass));                 if ((isClassAssigned() || ClassAssignment!=null)&& time.getTimeId().equals((ClassAssignment==null?getClassAssignment():ClassAssignment).getTimeId())) {                     line.setBgColor("rgb(168,187,225)");                 }             }             return table.printTable(iTimesTableOrd);         } catch (Exception e) {             Debug.error(e);             return null;         }         */
block|}
specifier|public
name|TreeSet
argument_list|<
name|StudentConflict
argument_list|>
name|getStudentConflicts
parameter_list|()
block|{
name|TreeSet
argument_list|<
name|StudentConflict
argument_list|>
name|ret
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|iChange
operator|!=
literal|null
condition|)
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassAssignmentInfo
name|assignment
range|:
name|iChange
operator|.
name|getAssignments
argument_list|()
control|)
block|{
for|for
control|(
name|StudentConflict
name|conf
range|:
name|assignment
operator|.
name|getStudentConflicts
argument_list|()
control|)
block|{
name|String
name|id
init|=
operator|(
name|assignment
operator|.
name|getClassId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|conf
operator|.
name|getOtherClass
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|)
operator|<
literal|0
condition|?
name|assignment
operator|.
name|getClassId
argument_list|()
operator|+
literal|":"
operator|+
name|conf
operator|.
name|getOtherClass
argument_list|()
operator|.
name|getClassId
argument_list|()
else|:
name|conf
operator|.
name|getOtherClass
argument_list|()
operator|.
name|getClassId
argument_list|()
operator|+
literal|":"
operator|+
name|assignment
operator|.
name|getClassId
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|getClassAssignment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|addAll
argument_list|(
name|getClassAssignment
argument_list|()
operator|.
name|getStudentConflicts
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|String
name|getStudentConflictTable
parameter_list|()
block|{
name|String
name|ret
init|=
literal|"<table border='0' width='100%' cellspacing='0' cellpadding='3'>"
decl_stmt|;
name|ret
operator|+=
literal|"<tr>"
expr_stmt|;
name|ret
operator|+=
literal|"<td><i>Students</i></td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td><i>Class</i></td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td><i>Date</i></td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td><i>Time</i></td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td><i>Room</i></td>"
expr_stmt|;
name|ret
operator|+=
literal|"</tr>"
expr_stmt|;
name|boolean
name|empty
init|=
literal|true
decl_stmt|;
for|for
control|(
name|StudentConflict
name|conf
range|:
name|getStudentConflicts
argument_list|()
control|)
block|{
name|ret
operator|+=
name|conf
operator|.
name|toHtml2
argument_list|()
expr_stmt|;
name|empty
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|empty
condition|)
name|ret
operator|+=
literal|"<tr><td colspan='5'><i>There are no student conflicts.</i></td></tr>"
expr_stmt|;
name|ret
operator|+=
literal|"</table>"
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|boolean
name|getShowDates
parameter_list|()
block|{
return|return
name|getDates
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|ClassAssignment
argument_list|>
name|getDates
parameter_list|()
block|{
if|if
condition|(
name|iDates
operator|==
literal|null
condition|)
block|{
name|iDates
operator|=
operator|new
name|Vector
argument_list|<
name|ClassAssignment
argument_list|>
argument_list|()
expr_stmt|;
name|Class_
name|clazz
init|=
name|getClazz
argument_list|()
operator|.
name|getClazz
argument_list|()
decl_stmt|;
name|DatePattern
name|datePattern
init|=
name|clazz
operator|.
name|effectiveDatePattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|datePattern
operator|==
literal|null
condition|)
block|{
name|iForm
operator|.
name|setMessage
argument_list|(
literal|"Class "
operator|+
name|getClazz
argument_list|()
operator|.
name|getClassName
argument_list|()
operator|+
literal|" has no date pattern selected."
argument_list|)
expr_stmt|;
return|return
name|iTimes
return|;
block|}
name|ClassTimeInfo
name|time
init|=
operator|(
name|getClassAssignment
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|getClassAssignment
argument_list|()
operator|.
name|getTime
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|datePattern
operator|.
name|getType
argument_list|()
operator|==
name|DatePattern
operator|.
name|sTypePatternSet
condition|)
block|{
name|Set
argument_list|<
name|DatePatternPref
argument_list|>
name|datePatternPrefs
init|=
operator|(
name|Set
argument_list|<
name|DatePatternPref
argument_list|>
operator|)
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|DatePatternPref
operator|.
name|class
argument_list|)
decl_stmt|;
name|boolean
name|hasReq
init|=
literal|false
decl_stmt|;
for|for
control|(
name|DatePatternPref
name|p
range|:
name|datePatternPrefs
control|)
block|{
if|if
condition|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
block|{
name|hasReq
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
for|for
control|(
name|DatePattern
name|child
range|:
name|datePattern
operator|.
name|findChildren
argument_list|()
control|)
block|{
name|String
name|pr
init|=
name|PreferenceLevel
operator|.
name|sNeutral
decl_stmt|;
for|for
control|(
name|DatePatternPref
name|p
range|:
name|datePatternPrefs
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getDatePattern
argument_list|()
operator|.
name|equals
argument_list|(
name|child
argument_list|)
condition|)
name|pr
operator|=
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
expr_stmt|;
block|}
name|int
name|prVal
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|pr
argument_list|)
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|pr
argument_list|)
condition|)
block|{
name|prVal
operator|=
name|PreferenceLevel
operator|.
name|prolog2int
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasReq
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|pr
argument_list|)
condition|)
name|prVal
operator|+=
literal|100
expr_stmt|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|pr
argument_list|)
condition|)
name|prVal
operator|+=
literal|100
expr_stmt|;
if|if
condition|(
name|iShowStudentConflicts
operator|&&
name|time
operator|!=
literal|null
condition|)
block|{
name|iDates
operator|.
name|add
argument_list|(
operator|new
name|ClassAssignmentInfo
argument_list|(
name|clazz
argument_list|,
name|time
argument_list|,
operator|new
name|ClassDateInfo
argument_list|(
name|child
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|child
operator|.
name|getName
argument_list|()
argument_list|,
name|child
operator|.
name|getPatternBitSet
argument_list|()
argument_list|,
name|prVal
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iDates
operator|.
name|add
argument_list|(
operator|new
name|ClassAssignment
argument_list|(
name|clazz
argument_list|,
literal|null
argument_list|,
operator|new
name|ClassDateInfo
argument_list|(
name|child
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|child
operator|.
name|getName
argument_list|()
argument_list|,
name|child
operator|.
name|getPatternBitSet
argument_list|()
argument_list|,
name|prVal
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|iShowStudentConflicts
operator|&&
name|time
operator|!=
literal|null
condition|)
block|{
name|iDates
operator|.
name|add
argument_list|(
operator|new
name|ClassAssignmentInfo
argument_list|(
name|clazz
argument_list|,
name|time
argument_list|,
operator|new
name|ClassDateInfo
argument_list|(
name|datePattern
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|datePattern
operator|.
name|getName
argument_list|()
argument_list|,
name|datePattern
operator|.
name|getPatternBitSet
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|sIntLevelNeutral
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iDates
operator|.
name|add
argument_list|(
operator|new
name|ClassAssignment
argument_list|(
name|clazz
argument_list|,
literal|null
argument_list|,
operator|new
name|ClassDateInfo
argument_list|(
name|datePattern
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|datePattern
operator|.
name|getName
argument_list|()
argument_list|,
name|datePattern
operator|.
name|getPatternBitSet
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|sIntLevelNeutral
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|iDates
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|ClassAssignment
argument_list|>
name|getTimes
parameter_list|()
block|{
if|if
condition|(
name|iTimes
operator|==
literal|null
condition|)
block|{
name|Class_
name|clazz
init|=
name|getClazz
argument_list|()
operator|.
name|getClazz
argument_list|()
decl_stmt|;
name|Set
name|timePrefs
init|=
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|TimePref
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|timePrefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iForm
operator|.
name|setMessage
argument_list|(
literal|"Class "
operator|+
name|getClazz
argument_list|()
operator|.
name|getClassName
argument_list|()
operator|+
literal|" has no time pattern selected."
argument_list|)
expr_stmt|;
return|return
name|iTimes
return|;
block|}
name|ClassDateInfo
name|date
init|=
name|getAssignedDate
argument_list|()
decl_stmt|;
if|if
condition|(
name|date
operator|==
literal|null
condition|)
block|{
name|Collection
argument_list|<
name|ClassAssignment
argument_list|>
name|dates
init|=
name|getDates
argument_list|()
decl_stmt|;
if|if
condition|(
name|dates
operator|!=
literal|null
operator|&&
operator|!
name|dates
operator|.
name|isEmpty
argument_list|()
condition|)
name|date
operator|=
name|dates
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getDate
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|date
operator|==
literal|null
condition|)
block|{
name|iForm
operator|.
name|setMessage
argument_list|(
literal|"Class "
operator|+
name|getClazz
argument_list|()
operator|.
name|getClassName
argument_list|()
operator|+
literal|" has no date pattern selected."
argument_list|)
expr_stmt|;
return|return
name|iTimes
return|;
block|}
name|iTimes
operator|=
name|getTimes
argument_list|(
name|date
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTimes
operator|.
name|isEmpty
argument_list|()
condition|)
name|iForm
operator|.
name|setMessage
argument_list|(
literal|"Class "
operator|+
name|getClazz
argument_list|()
operator|.
name|getClassName
argument_list|()
operator|+
literal|" has no available time."
argument_list|)
expr_stmt|;
block|}
return|return
name|iTimes
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|ClassAssignment
argument_list|>
name|getAllTimes
parameter_list|()
block|{
name|Vector
argument_list|<
name|ClassAssignment
argument_list|>
name|times
init|=
operator|new
name|Vector
argument_list|<
name|ClassAssignment
argument_list|>
argument_list|()
decl_stmt|;
name|Class_
name|clazz
init|=
name|getClazz
argument_list|()
operator|.
name|getClazz
argument_list|()
decl_stmt|;
name|DatePattern
name|datePattern
init|=
name|clazz
operator|.
name|effectiveDatePattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|datePattern
operator|==
literal|null
condition|)
return|return
name|times
return|;
if|if
condition|(
name|datePattern
operator|.
name|getType
argument_list|()
operator|==
name|DatePattern
operator|.
name|sTypePatternSet
condition|)
block|{
name|Set
argument_list|<
name|DatePatternPref
argument_list|>
name|datePatternPrefs
init|=
operator|(
name|Set
argument_list|<
name|DatePatternPref
argument_list|>
operator|)
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|DatePatternPref
operator|.
name|class
argument_list|)
decl_stmt|;
name|boolean
name|hasReq
init|=
literal|false
decl_stmt|;
for|for
control|(
name|DatePatternPref
name|p
range|:
name|datePatternPrefs
control|)
block|{
if|if
condition|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
block|{
name|hasReq
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
for|for
control|(
name|DatePattern
name|child
range|:
name|datePattern
operator|.
name|findChildren
argument_list|()
control|)
block|{
name|String
name|pr
init|=
name|PreferenceLevel
operator|.
name|sNeutral
decl_stmt|;
for|for
control|(
name|DatePatternPref
name|p
range|:
name|datePatternPrefs
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getDatePattern
argument_list|()
operator|.
name|equals
argument_list|(
name|child
argument_list|)
condition|)
name|pr
operator|=
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
expr_stmt|;
block|}
name|int
name|prVal
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|pr
argument_list|)
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|pr
argument_list|)
condition|)
block|{
name|prVal
operator|=
name|PreferenceLevel
operator|.
name|prolog2int
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasReq
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|pr
argument_list|)
condition|)
name|prVal
operator|+=
literal|100
expr_stmt|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|pr
argument_list|)
condition|)
name|prVal
operator|+=
literal|100
expr_stmt|;
name|times
operator|.
name|addAll
argument_list|(
name|getTimes
argument_list|(
operator|new
name|ClassDateInfo
argument_list|(
name|child
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|child
operator|.
name|getName
argument_list|()
argument_list|,
name|child
operator|.
name|getPatternBitSet
argument_list|()
argument_list|,
name|prVal
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|times
operator|.
name|addAll
argument_list|(
name|getTimes
argument_list|(
operator|new
name|ClassDateInfo
argument_list|(
name|datePattern
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|datePattern
operator|.
name|getName
argument_list|()
argument_list|,
name|datePattern
operator|.
name|getPatternBitSet
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|sIntLevelNeutral
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|times
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|ClassAssignment
argument_list|>
name|getTimes
parameter_list|(
name|ClassDateInfo
name|date
parameter_list|)
block|{
name|Class_
name|clazz
init|=
name|getClazz
argument_list|()
operator|.
name|getClazz
argument_list|()
decl_stmt|;
name|DatePattern
name|datePattern
init|=
name|date
operator|.
name|getDatePattern
argument_list|()
decl_stmt|;
name|Vector
argument_list|<
name|ClassAssignment
argument_list|>
name|times
init|=
operator|new
name|Vector
argument_list|<
name|ClassAssignment
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|onlyReq
init|=
literal|false
decl_stmt|;
name|Set
name|timePrefs
init|=
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|TimePref
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i1
init|=
name|timePrefs
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|timePref
init|=
operator|(
name|TimePref
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|TimePatternModel
name|pattern
init|=
name|timePref
operator|.
name|getTimePatternModel
argument_list|()
decl_stmt|;
if|if
condition|(
name|pattern
operator|.
name|isExactTime
argument_list|()
operator|||
name|pattern
operator|.
name|countPreferences
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|>
literal|0
condition|)
name|onlyReq
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|onlyReq
condition|)
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"Class "
operator|+
name|getClazz
argument_list|()
operator|.
name|getClassName
argument_list|()
operator|+
literal|" has required times"
argument_list|)
expr_stmt|;
block|}
name|DurationModel
name|dm
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getDurationModel
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i1
init|=
name|timePrefs
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|timePref
init|=
operator|(
name|TimePref
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|TimePatternModel
name|pattern
init|=
name|timePref
operator|.
name|getTimePatternModel
argument_list|()
decl_stmt|;
if|if
condition|(
name|pattern
operator|.
name|isExactTime
argument_list|()
condition|)
block|{
name|int
name|minsPerMeeting
init|=
name|dm
operator|.
name|getExactTimeMinutesPerMeeting
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|,
name|datePattern
argument_list|,
name|pattern
operator|.
name|getExactDays
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|ExactTimeMins
operator|.
name|getNrSlotsPerMtg
argument_list|(
name|minsPerMeeting
argument_list|)
decl_stmt|;
name|int
name|breakTime
init|=
name|ExactTimeMins
operator|.
name|getBreakTime
argument_list|(
name|minsPerMeeting
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Date
argument_list|>
name|dates
init|=
name|dm
operator|.
name|getDates
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|,
name|datePattern
argument_list|,
name|pattern
operator|.
name|getExactDays
argument_list|()
argument_list|,
name|minsPerMeeting
argument_list|)
decl_stmt|;
name|ClassTimeInfo
name|time
init|=
operator|new
name|ClassTimeInfo
argument_list|(
name|pattern
operator|.
name|getExactDays
argument_list|()
argument_list|,
name|pattern
operator|.
name|getExactStartSlot
argument_list|()
argument_list|,
name|length
argument_list|,
name|minsPerMeeting
argument_list|,
name|PreferenceLevel
operator|.
name|sIntLevelNeutral
argument_list|,
name|timePref
operator|.
name|getTimePattern
argument_list|()
argument_list|,
name|date
argument_list|,
name|breakTime
argument_list|,
name|dates
argument_list|)
decl_stmt|;
if|if
condition|(
name|iShowStudentConflicts
condition|)
name|times
operator|.
name|add
argument_list|(
operator|new
name|ClassAssignmentInfo
argument_list|(
name|clazz
argument_list|,
name|time
argument_list|,
name|date
argument_list|,
literal|null
argument_list|,
operator|(
name|iChange
operator|==
literal|null
condition|?
literal|null
else|:
name|iChange
operator|.
name|getAssignmentTable
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|times
operator|.
name|add
argument_list|(
operator|new
name|ClassAssignment
argument_list|(
name|clazz
argument_list|,
name|time
argument_list|,
name|date
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|int
name|time
init|=
literal|0
init|;
name|time
operator|<
name|pattern
operator|.
name|getNrTimes
argument_list|()
condition|;
name|time
operator|++
control|)
block|{
name|times
label|:
for|for
control|(
name|int
name|day
init|=
literal|0
init|;
name|day
operator|<
name|pattern
operator|.
name|getNrDays
argument_list|()
condition|;
name|day
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|dm
operator|.
name|isValidSelection
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|,
name|datePattern
argument_list|,
name|timePref
operator|.
name|getTimePattern
argument_list|()
argument_list|,
name|pattern
operator|.
name|getDayCode
argument_list|(
name|day
argument_list|)
argument_list|)
condition|)
continue|continue;
name|String
name|pref
init|=
name|pattern
operator|.
name|getPreference
argument_list|(
name|day
argument_list|,
name|time
argument_list|)
decl_stmt|;
if|if
condition|(
name|onlyReq
operator|&&
operator|!
name|pref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
block|{
name|pref
operator|=
name|PreferenceLevel
operator|.
name|sProhibited
expr_stmt|;
block|}
name|List
argument_list|<
name|Date
argument_list|>
name|dates
init|=
name|dm
operator|.
name|getDates
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|,
name|datePattern
argument_list|,
name|pattern
operator|.
name|getDayCode
argument_list|(
name|day
argument_list|)
argument_list|,
name|timePref
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getMinPerMtg
argument_list|()
argument_list|)
decl_stmt|;
name|ClassTimeInfo
name|loc
init|=
operator|new
name|ClassTimeInfo
argument_list|(
name|pattern
operator|.
name|getDayCode
argument_list|(
name|day
argument_list|)
argument_list|,
name|pattern
operator|.
name|getStartSlot
argument_list|(
name|time
argument_list|)
argument_list|,
name|pattern
operator|.
name|getSlotsPerMtg
argument_list|()
argument_list|,
name|timePref
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getMinPerMtg
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|prolog2int
argument_list|(
name|pref
argument_list|)
argument_list|,
name|timePref
operator|.
name|getTimePattern
argument_list|()
argument_list|,
name|date
argument_list|,
name|pattern
operator|.
name|getBreakTime
argument_list|()
argument_list|,
name|dates
argument_list|)
decl_stmt|;
if|if
condition|(
name|iChange
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ClassAssignment
name|current
range|:
name|iChange
operator|.
name|getAssignments
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|current
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|canConflict
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|getParents
argument_list|()
operator|.
name|contains
argument_list|(
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
name|canConflict
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|getClazz
argument_list|()
operator|.
name|getParents
argument_list|()
operator|.
name|contains
argument_list|(
name|current
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
name|canConflict
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|current
operator|.
name|getConfligId
argument_list|()
operator|.
name|equals
argument_list|(
name|getClazz
argument_list|()
operator|.
name|getConfligId
argument_list|()
argument_list|)
operator|&&
name|current
operator|.
name|isSingleClass
argument_list|()
condition|)
name|canConflict
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|current
operator|.
name|shareInstructor
argument_list|(
name|getClazz
argument_list|()
argument_list|)
condition|)
name|canConflict
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|canConflict
operator|&&
name|loc
operator|.
name|overlaps
argument_list|(
name|current
operator|.
name|getTime
argument_list|()
argument_list|)
condition|)
continue|continue
name|times
continue|;
block|}
block|}
block|}
if|if
condition|(
name|iShowStudentConflicts
condition|)
name|times
operator|.
name|add
argument_list|(
operator|new
name|ClassAssignmentInfo
argument_list|(
name|clazz
argument_list|,
name|loc
argument_list|,
name|date
argument_list|,
literal|null
argument_list|,
operator|(
name|iChange
operator|==
literal|null
condition|?
literal|null
else|:
name|iChange
operator|.
name|getAssignmentTable
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|times
operator|.
name|add
argument_list|(
operator|new
name|ClassAssignment
argument_list|(
name|clazz
argument_list|,
name|loc
argument_list|,
name|date
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|times
return|;
block|}
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|>
name|iRoomPreferences
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|private
name|PreferenceLevel
name|getRoomPreference
parameter_list|(
name|Department
name|department
parameter_list|,
name|Long
name|locationId
parameter_list|)
block|{
name|Hashtable
name|roomPreferencesThisDept
init|=
name|iRoomPreferences
operator|.
name|get
argument_list|(
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|roomPreferencesThisDept
operator|==
literal|null
condition|)
block|{
name|roomPreferencesThisDept
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|iRoomPreferences
operator|.
name|put
argument_list|(
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|roomPreferencesThisDept
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|k
init|=
name|department
operator|.
name|getPreferences
argument_list|(
name|RoomPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomPref
name|pref
init|=
operator|(
name|RoomPref
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
name|roomPreferencesThisDept
operator|.
name|put
argument_list|(
name|pref
operator|.
name|getRoom
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|pref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|PreferenceLevel
operator|)
name|roomPreferencesThisDept
operator|.
name|get
argument_list|(
name|locationId
argument_list|)
return|;
block|}
specifier|protected
name|List
name|findAllRooms
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|String
name|a
init|=
literal|""
decl_stmt|,
name|b
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|iForm
operator|.
name|getRoomFeatures
argument_list|()
operator|!=
literal|null
operator|&&
name|iForm
operator|.
name|getRoomFeatures
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iForm
operator|.
name|getRoomFeatures
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|a
operator|+=
literal|", GlobalRoomFeature f"
operator|+
name|i
expr_stmt|;
name|b
operator|+=
literal|" and f"
operator|+
name|i
operator|+
literal|".uniqueId="
operator|+
name|iForm
operator|.
name|getRoomFeatures
argument_list|()
index|[
name|i
index|]
operator|+
literal|" and f"
operator|+
name|i
operator|+
literal|" in elements(r.features)"
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iForm
operator|.
name|getRoomGroups
argument_list|()
operator|!=
literal|null
operator|&&
name|iForm
operator|.
name|getRoomGroups
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|b
operator|+=
literal|" and ("
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iForm
operator|.
name|getRoomGroups
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|b
operator|+=
literal|" or"
expr_stmt|;
name|a
operator|+=
literal|", RoomGroup g"
operator|+
name|i
expr_stmt|;
name|b
operator|+=
literal|" (g"
operator|+
name|i
operator|+
literal|".uniqueId="
operator|+
name|iForm
operator|.
name|getRoomGroups
argument_list|()
index|[
name|i
index|]
operator|+
literal|" and g"
operator|+
name|i
operator|+
literal|" in elements(r.roomGroups))"
expr_stmt|;
block|}
name|b
operator|+=
literal|")"
expr_stmt|;
block|}
if|if
condition|(
name|iForm
operator|.
name|getRoomTypes
argument_list|()
operator|!=
literal|null
operator|&&
name|iForm
operator|.
name|getRoomTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|b
operator|+=
literal|" and r.roomType.uniqueId in ("
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iForm
operator|.
name|getRoomTypes
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|b
operator|+=
literal|","
expr_stmt|;
name|b
operator|+=
name|iForm
operator|.
name|getRoomTypes
argument_list|()
index|[
name|i
index|]
expr_stmt|;
block|}
name|b
operator|+=
literal|")"
expr_stmt|;
block|}
name|String
name|query
init|=
literal|"select r from Location r "
operator|+
name|a
operator|+
literal|" where r.session.uniqueId=:sessionId "
operator|+
name|b
decl_stmt|;
return|return
name|LocationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|query
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|protected
name|Vector
argument_list|<
name|ClassRoomInfo
argument_list|>
name|findRooms
parameter_list|(
name|ClassTimeInfo
name|period
parameter_list|,
name|int
name|minRoomSize
parameter_list|,
name|int
name|maxRoomSize
parameter_list|,
name|String
name|filter
parameter_list|,
name|boolean
name|allowConflicts
parameter_list|,
name|boolean
name|showAllRooms
parameter_list|)
block|{
name|Vector
argument_list|<
name|ClassRoomInfo
argument_list|>
name|rooms
init|=
operator|new
name|Vector
argument_list|<
name|ClassRoomInfo
argument_list|>
argument_list|()
decl_stmt|;
name|Class_
name|clazz
init|=
name|getClazz
argument_list|()
operator|.
name|getClazz
argument_list|(
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|nrRooms
init|=
operator|(
name|clazz
operator|.
name|getNbrRooms
argument_list|()
operator|==
literal|null
condition|?
literal|1
else|:
name|clazz
operator|.
name|getNbrRooms
argument_list|()
operator|.
name|intValue
argument_list|()
operator|)
decl_stmt|;
name|iRoomPreferences
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Set
name|groupPrefs
init|=
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|RoomGroupPref
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
name|roomPrefs
init|=
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|RoomPref
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
name|bldgPrefs
init|=
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|BuildingPref
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
name|featurePrefs
init|=
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|RoomFeaturePref
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|nrRooms
operator|>
literal|0
condition|)
block|{
name|int
name|minClassLimit
init|=
name|clazz
operator|.
name|getExpectedCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|maxClassLimit
init|=
name|clazz
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxClassLimit
operator|<
name|minClassLimit
condition|)
name|maxClassLimit
operator|=
name|minClassLimit
expr_stmt|;
name|float
name|room2limitRatio
init|=
name|clazz
operator|.
name|getRoomRatio
argument_list|()
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|int
name|roomCapacity
init|=
name|Math
operator|.
name|round
argument_list|(
name|minClassLimit
operator|<=
literal|0
condition|?
name|room2limitRatio
else|:
name|room2limitRatio
operator|*
name|minClassLimit
argument_list|)
decl_stmt|;
comment|//TODO: Use parameters from the default solver configuration
name|int
name|discouragedCapacity
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
literal|0.99
operator|*
name|roomCapacity
argument_list|)
decl_stmt|;
name|int
name|stronglyDiscouragedCapacity
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
literal|0.98
operator|*
name|roomCapacity
argument_list|)
decl_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Date
name|today
init|=
name|cal
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|Date
index|[]
name|bounds
init|=
name|DatePattern
operator|.
name|getBounds
argument_list|(
name|clazz
operator|.
name|getSessionId
argument_list|()
argument_list|)
decl_stmt|;
name|Set
name|availRooms
init|=
name|clazz
operator|.
name|getAvailableRooms
argument_list|()
decl_stmt|;
name|rooms
label|:
for|for
control|(
name|Iterator
name|i1
init|=
name|availRooms
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|room
init|=
operator|(
name|Location
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|iForm
operator|.
name|getRoomTypes
argument_list|()
operator|!=
literal|null
operator|&&
name|iForm
operator|.
name|getRoomTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iForm
operator|.
name|getRoomTypes
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|room
operator|.
name|getRoomType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|iForm
operator|.
name|getRoomTypes
argument_list|()
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|ok
condition|)
block|{
name|i1
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue
name|rooms
continue|;
block|}
block|}
if|if
condition|(
name|iForm
operator|.
name|getRoomFeatures
argument_list|()
operator|!=
literal|null
operator|&&
name|iForm
operator|.
name|getRoomFeatures
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iForm
operator|.
name|getRoomFeatures
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|!
name|room
operator|.
name|hasFeature
argument_list|(
name|iForm
operator|.
name|getRoomFeatures
argument_list|()
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|i1
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue
name|rooms
continue|;
block|}
block|}
if|if
condition|(
name|iForm
operator|.
name|getRoomGroups
argument_list|()
operator|!=
literal|null
operator|&&
name|iForm
operator|.
name|getRoomGroups
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iForm
operator|.
name|getRoomGroups
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|room
operator|.
name|hasGroup
argument_list|(
name|iForm
operator|.
name|getRoomGroups
argument_list|()
index|[
name|i
index|]
argument_list|)
condition|)
continue|continue
name|rooms
continue|;
name|i1
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|Set
name|allRooms
init|=
name|availRooms
decl_stmt|;
if|if
condition|(
name|showAllRooms
condition|)
block|{
name|allRooms
operator|=
operator|new
name|TreeSet
argument_list|(
name|availRooms
argument_list|)
expr_stmt|;
name|allRooms
operator|.
name|addAll
argument_list|(
name|findAllRooms
argument_list|(
name|getClazz
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Long
name|departmentId
init|=
name|getClazz
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Location
argument_list|,
name|Integer
argument_list|>
name|filteredRooms
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|permIds
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|rooms
label|:
for|for
control|(
name|Iterator
name|i1
init|=
name|allRooms
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|room
init|=
operator|(
name|Location
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|add
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|minRoomSize
operator|>=
literal|0
operator|&&
name|room
operator|.
name|getCapacity
argument_list|()
operator|<
name|minRoomSize
condition|)
continue|continue;
if|if
condition|(
name|maxRoomSize
operator|>=
literal|0
operator|&&
name|room
operator|.
name|getCapacity
argument_list|()
operator|>
name|maxRoomSize
condition|)
continue|continue;
if|if
condition|(
operator|!
name|match
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
argument_list|,
name|filter
argument_list|)
condition|)
continue|continue;
name|PreferenceCombination
name|pref
init|=
operator|new
name|SumPreferenceCombination
argument_list|()
decl_stmt|;
if|if
condition|(
name|showAllRooms
operator|&&
operator|!
name|availRooms
operator|.
name|contains
argument_list|(
name|room
argument_list|)
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
name|RoomSharingModel
name|sharingModel
init|=
name|room
operator|.
name|getRoomSharingModel
argument_list|()
decl_stmt|;
if|if
condition|(
name|sharingModel
operator|!=
literal|null
condition|)
block|{
name|sharing
label|:
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|Constants
operator|.
name|NR_DAYS
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|Constants
operator|.
name|DAY_CODES
index|[
name|d
index|]
operator|&
name|period
operator|.
name|getDayCode
argument_list|()
operator|)
operator|==
literal|0
condition|)
continue|continue;
name|int
name|startTime
init|=
name|period
operator|.
name|getStartSlot
argument_list|()
decl_stmt|;
name|int
name|endTime
init|=
operator|(
name|period
operator|.
name|getStartSlot
argument_list|()
operator|+
name|period
operator|.
name|getLength
argument_list|()
operator|-
literal|1
operator|)
decl_stmt|;
for|for
control|(
name|int
name|t
init|=
name|startTime
init|;
name|t
operator|<=
name|endTime
condition|;
name|t
operator|++
control|)
block|{
name|Long
name|px
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|sharingModel
operator|.
name|getPreference
argument_list|(
name|d
argument_list|,
name|t
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|px
operator|.
name|equals
argument_list|(
name|RoomSharingModel
operator|.
name|sNotAvailablePref
argument_list|)
condition|)
block|{
if|if
condition|(
name|showAllRooms
condition|)
block|{
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
break|break
name|sharing
break|;
block|}
else|else
block|{
if|if
condition|(
name|room
operator|.
name|getLabel
argument_list|()
operator|.
name|equals
argument_list|(
name|filter
argument_list|)
condition|)
name|iForm
operator|.
name|setMessage
argument_list|(
literal|"Room "
operator|+
name|room
operator|.
name|getLabel
argument_list|()
operator|+
literal|" is not available for "
operator|+
name|period
operator|.
name|getLongName
argument_list|()
operator|+
literal|" due to the room sharing preferences."
argument_list|)
expr_stmt|;
continue|continue
name|rooms
continue|;
block|}
block|}
if|if
condition|(
name|px
operator|.
name|equals
argument_list|(
name|RoomSharingModel
operator|.
name|sFreeForAllPref
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|departmentId
operator|!=
literal|null
operator|&&
operator|!
name|departmentId
operator|.
name|equals
argument_list|(
name|px
argument_list|)
condition|)
block|{
if|if
condition|(
name|showAllRooms
condition|)
block|{
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
break|break
name|sharing
break|;
block|}
else|else
block|{
if|if
condition|(
name|room
operator|.
name|getLabel
argument_list|()
operator|.
name|equals
argument_list|(
name|filter
argument_list|)
condition|)
name|iForm
operator|.
name|setMessage
argument_list|(
literal|"Room "
operator|+
name|room
operator|.
name|getLabel
argument_list|()
operator|+
literal|" is not available for "
operator|+
name|period
operator|.
name|getLongName
argument_list|()
operator|+
literal|" due to the room sharing preferences."
argument_list|)
expr_stmt|;
continue|continue
name|rooms
continue|;
block|}
block|}
block|}
block|}
block|}
comment|// --- group preference ----------
name|PreferenceCombination
name|groupPref
init|=
name|PreferenceCombination
operator|.
name|getDefault
argument_list|()
decl_stmt|;
name|boolean
name|reqGroup
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|groupPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomGroupPref
name|p
init|=
operator|(
name|RoomGroupPref
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
name|reqGroup
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|getRooms
argument_list|()
operator|.
name|contains
argument_list|(
name|room
argument_list|)
condition|)
name|groupPref
operator|.
name|addPreferenceProlog
argument_list|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|reqGroup
condition|)
block|{
if|if
condition|(
operator|!
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|groupPref
operator|.
name|getPreferenceProlog
argument_list|()
argument_list|)
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|groupPref
operator|.
name|getPreferenceProlog
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// --- room preference ------------
name|String
name|roomPref
init|=
literal|null
decl_stmt|;
name|PreferenceLevel
name|roomPreference
init|=
name|getRoomPreference
argument_list|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
argument_list|,
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|roomPreference
operator|!=
literal|null
condition|)
block|{
name|roomPref
operator|=
name|roomPreference
operator|.
name|getPrefProlog
argument_list|()
expr_stmt|;
block|}
name|boolean
name|reqRoom
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|roomPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomPref
name|p
init|=
operator|(
name|RoomPref
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
name|reqRoom
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|room
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getRoom
argument_list|()
argument_list|)
condition|)
name|roomPref
operator|=
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reqRoom
condition|)
block|{
if|if
condition|(
operator|!
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|roomPref
argument_list|)
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|roomPref
operator|!=
literal|null
condition|)
block|{
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|roomPref
argument_list|)
expr_stmt|;
block|}
comment|// --- building preference ------------
name|Building
name|bldg
init|=
operator|(
name|room
operator|instanceof
name|Room
condition|?
operator|(
operator|(
name|Room
operator|)
name|room
operator|)
operator|.
name|getBuilding
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
name|boolean
name|reqBldg
init|=
literal|false
decl_stmt|;
name|String
name|bldgPref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|bldgPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BuildingPref
name|p
init|=
operator|(
name|BuildingPref
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
name|reqBldg
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|bldg
operator|!=
literal|null
operator|&&
name|bldg
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getBuilding
argument_list|()
argument_list|)
condition|)
name|bldgPref
operator|=
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reqBldg
condition|)
block|{
if|if
condition|(
operator|!
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|bldgPref
argument_list|)
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|bldgPref
operator|!=
literal|null
condition|)
block|{
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|bldgPref
argument_list|)
expr_stmt|;
block|}
comment|// --- room features preference --------
name|boolean
name|acceptableFeatures
init|=
literal|true
decl_stmt|;
name|PreferenceCombination
name|featurePref
init|=
operator|new
name|MinMaxPreferenceCombination
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|featurePrefs
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomFeaturePref
name|roomFeaturePref
init|=
operator|(
name|RoomFeaturePref
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|RoomFeature
name|feature
init|=
name|roomFeaturePref
operator|.
name|getRoomFeature
argument_list|()
decl_stmt|;
name|String
name|p
init|=
name|roomFeaturePref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
decl_stmt|;
name|boolean
name|hasFeature
init|=
name|feature
operator|.
name|getRooms
argument_list|()
operator|.
name|contains
argument_list|(
name|room
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|&&
name|hasFeature
condition|)
block|{
name|acceptableFeatures
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|&&
operator|!
name|hasFeature
condition|)
block|{
name|acceptableFeatures
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|hasFeature
operator|&&
operator|!
name|p
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|&&
operator|!
name|p
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
name|featurePref
operator|.
name|addPreferenceProlog
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|pref
operator|.
name|addPreferenceInt
argument_list|(
name|featurePref
operator|.
name|getPreferenceInt
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|acceptableFeatures
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
comment|// --- room size -----------------
if|if
condition|(
name|room
operator|.
name|getCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
operator|<
name|stronglyDiscouragedCapacity
condition|)
block|{
name|pref
operator|.
name|addPreferenceInt
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|room
operator|.
name|getCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
operator|<
name|discouragedCapacity
condition|)
block|{
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|room
operator|.
name|getCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
operator|<
name|roomCapacity
condition|)
block|{
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
expr_stmt|;
block|}
name|int
name|prefInt
init|=
name|pref
operator|.
name|getPreferenceInt
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|add
condition|)
continue|continue;
name|filteredRooms
operator|.
name|put
argument_list|(
name|room
argument_list|,
name|prefInt
argument_list|)
expr_stmt|;
name|permIds
operator|.
name|add
argument_list|(
name|room
operator|.
name|getPermanentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|changePast
init|=
name|ApplicationProperty
operator|.
name|ClassAssignmentChangePastMeetings
operator|.
name|isTrue
argument_list|()
decl_stmt|;
name|boolean
name|ignorePast
init|=
name|ApplicationProperty
operator|.
name|ClassAssignmentIgnorePastMeetings
operator|.
name|isTrue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Date
argument_list|>
name|datesToCheck
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ignorePast
operator|||
operator|!
name|changePast
condition|)
block|{
name|datesToCheck
operator|=
operator|new
name|ArrayList
argument_list|<
name|Date
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Date
name|aDate
range|:
name|period
operator|.
name|getDates
argument_list|()
control|)
block|{
if|if
condition|(
name|aDate
operator|.
name|compareTo
argument_list|(
name|today
argument_list|)
operator|>
literal|0
condition|)
name|datesToCheck
operator|.
name|add
argument_list|(
name|aDate
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|datesToCheck
operator|=
name|period
operator|.
name|getDates
argument_list|()
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|room2classIds
init|=
name|Location
operator|.
name|findClassLocationTable
argument_list|(
name|clazz
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|permIds
argument_list|,
name|period
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|period
operator|.
name|getLength
argument_list|()
argument_list|,
name|changePast
condition|?
name|period
operator|.
name|getDates
argument_list|()
else|:
name|datesToCheck
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Event
argument_list|>
argument_list|>
name|room2events
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|!=
literal|null
operator|&&
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|DefaultRoomAvailabilityService
condition|)
block|{
name|room2events
operator|=
name|Location
operator|.
name|findEventTable
argument_list|(
name|clazz
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|permIds
argument_list|,
name|period
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|period
operator|.
name|getLength
argument_list|()
argument_list|,
name|datesToCheck
argument_list|)
expr_stmt|;
block|}
name|rooms
label|:
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Location
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|filteredRooms
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Location
name|room
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|int
name|prefInt
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|note
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|classIds
init|=
name|room2classIds
operator|.
name|get
argument_list|(
name|room
operator|.
name|getPermanentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|classIds
operator|==
literal|null
condition|)
name|classIds
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
comment|// Fix the location table with the current assignment
if|if
condition|(
name|getClassAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|getClassAssignment
argument_list|()
operator|.
name|hasRoom
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|&&
name|getClassAssignment
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|overlaps
argument_list|(
name|period
argument_list|)
condition|)
name|classIds
operator|.
name|remove
argument_list|(
name|getClassAssignment
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iChange
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ClassAssignment
name|conflict
range|:
name|iChange
operator|.
name|getConflicts
argument_list|()
control|)
block|{
if|if
condition|(
name|conflict
operator|.
name|hasRoom
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|&&
name|conflict
operator|.
name|getTime
argument_list|()
operator|.
name|overlaps
argument_list|(
name|period
argument_list|)
condition|)
name|classIds
operator|.
name|remove
argument_list|(
name|conflict
operator|.
name|getClassId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ClassAssignment
name|current
range|:
name|iChange
operator|.
name|getAssignments
argument_list|()
control|)
block|{
name|ClassAssignment
name|initial
init|=
name|iChange
operator|.
name|getInitial
argument_list|(
name|current
argument_list|)
decl_stmt|;
if|if
condition|(
name|initial
operator|!=
literal|null
operator|&&
name|initial
operator|.
name|hasRoom
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|&&
name|initial
operator|.
name|getTime
argument_list|()
operator|.
name|overlaps
argument_list|(
name|period
argument_list|)
condition|)
name|classIds
operator|.
name|remove
argument_list|(
name|initial
operator|.
name|getClassId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ClassAssignment
name|current
range|:
name|iChange
operator|.
name|getAssignments
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getClassId
argument_list|()
argument_list|)
operator|&&
name|current
operator|.
name|hasRoom
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|&&
name|current
operator|.
name|getTime
argument_list|()
operator|.
name|overlaps
argument_list|(
name|period
argument_list|)
condition|)
name|classIds
operator|.
name|add
argument_list|(
name|current
operator|.
name|getClassId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|allowConflicts
operator|&&
name|classIds
operator|!=
literal|null
operator|&&
operator|!
name|classIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Long
name|classId
init|=
operator|(
name|Long
operator|)
name|classIds
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|room
operator|.
name|getLabel
argument_list|()
operator|.
name|equals
argument_list|(
name|filter
argument_list|)
condition|)
name|iForm
operator|.
name|setMessage
argument_list|(
literal|"Room "
operator|+
name|room
operator|.
name|getLabel
argument_list|()
operator|+
literal|" is not available for "
operator|+
name|period
operator|.
name|getLongName
argument_list|()
operator|+
literal|" due to the class "
operator|+
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|classId
argument_list|)
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|classIds
operator|!=
literal|null
operator|&&
operator|!
name|classIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|prefInt
operator|+=
literal|10000
expr_stmt|;
name|note
operator|=
literal|"Conflicts with "
operator|+
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|classIds
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|getClassLabel
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|classIds
operator|!=
literal|null
operator|&&
name|iChange
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Long
name|classId
range|:
name|classIds
control|)
block|{
if|if
condition|(
name|iChange
operator|.
name|getCurrent
argument_list|(
name|classId
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|room
operator|.
name|getLabel
argument_list|()
operator|.
name|equals
argument_list|(
name|filter
argument_list|)
condition|)
name|iForm
operator|.
name|setMessage
argument_list|(
literal|"Room "
operator|+
name|room
operator|.
name|getLabel
argument_list|()
operator|+
literal|" is not available for "
operator|+
name|period
operator|.
name|getLongName
argument_list|()
operator|+
literal|" due to the class "
operator|+
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|classId
argument_list|)
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
continue|continue
name|rooms
continue|;
block|}
block|}
block|}
if|if
condition|(
name|room2events
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Event
argument_list|>
name|conflicts
init|=
name|room2events
operator|.
name|get
argument_list|(
name|room
operator|.
name|getPermanentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|conflicts
operator|!=
literal|null
operator|&&
operator|!
name|conflicts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|room
operator|.
name|getLabel
argument_list|()
operator|.
name|equals
argument_list|(
name|filter
argument_list|)
condition|)
name|iForm
operator|.
name|setMessage
argument_list|(
literal|"Room "
operator|+
name|room
operator|.
name|getLabel
argument_list|()
operator|+
literal|" is not available for "
operator|+
name|period
operator|.
name|getLongName
argument_list|()
operator|+
literal|" due to "
operator|+
name|conflicts
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Room "
operator|+
name|room
operator|.
name|getLabel
argument_list|()
operator|+
literal|" is not available for "
operator|+
name|period
operator|.
name|getLongName
argument_list|()
operator|+
literal|" due to "
operator|+
name|conflicts
argument_list|)
expr_stmt|;
continue|continue
name|rooms
continue|;
block|}
block|}
if|else if
condition|(
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Collection
argument_list|<
name|TimeBlock
argument_list|>
name|times
init|=
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|.
name|getRoomAvailability
argument_list|(
name|room
argument_list|,
name|bounds
index|[
literal|0
index|]
argument_list|,
name|bounds
index|[
literal|1
index|]
argument_list|,
name|RoomAvailabilityInterface
operator|.
name|sClassType
argument_list|)
decl_stmt|;
if|if
condition|(
name|times
operator|!=
literal|null
operator|&&
operator|!
name|times
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Collection
argument_list|<
name|TimeBlock
argument_list|>
name|timesToCheck
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|changePast
operator|||
name|ignorePast
condition|)
block|{
name|timesToCheck
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
for|for
control|(
name|TimeBlock
name|time
range|:
name|times
control|)
block|{
if|if
condition|(
operator|!
name|time
operator|.
name|getEndTime
argument_list|()
operator|.
name|before
argument_list|(
name|today
argument_list|)
condition|)
name|timesToCheck
operator|.
name|add
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|timesToCheck
operator|=
name|times
expr_stmt|;
block|}
name|TimeBlock
name|time
init|=
name|period
operator|.
name|overlaps
argument_list|(
name|timesToCheck
argument_list|)
decl_stmt|;
if|if
condition|(
name|time
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|room
operator|.
name|getLabel
argument_list|()
operator|.
name|equals
argument_list|(
name|filter
argument_list|)
condition|)
name|iForm
operator|.
name|setMessage
argument_list|(
literal|"Room "
operator|+
name|room
operator|.
name|getLabel
argument_list|()
operator|+
literal|" is not available for "
operator|+
name|period
operator|.
name|getLongName
argument_list|()
operator|+
literal|" due to "
operator|+
name|time
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Room "
operator|+
name|room
operator|.
name|getLabel
argument_list|()
operator|+
literal|" is not available for "
operator|+
name|period
operator|.
name|getLongName
argument_list|()
operator|+
literal|" due to "
operator|+
name|time
argument_list|)
expr_stmt|;
continue|continue
name|rooms
continue|;
block|}
block|}
block|}
name|rooms
operator|.
name|addElement
argument_list|(
operator|new
name|ClassRoomInfo
argument_list|(
name|room
argument_list|,
name|prefInt
argument_list|,
name|note
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rooms
return|;
block|}
specifier|public
name|String
name|getRoomTable
parameter_list|()
block|{
try|try
block|{
name|Vector
argument_list|<
name|ClassRoomInfo
argument_list|>
name|rooms
init|=
name|getRooms
argument_list|()
decl_stmt|;
name|ClassAssignment
name|ClassAssignment
init|=
operator|(
name|iChange
operator|==
literal|null
condition|?
literal|null
else|:
name|iChange
operator|.
name|getCurrent
argument_list|(
name|iClass
argument_list|)
operator|)
decl_stmt|;
name|Collection
argument_list|<
name|ClassRoomInfo
argument_list|>
name|assigned
init|=
operator|(
name|ClassAssignment
operator|!=
literal|null
condition|?
name|ClassAssignment
operator|.
name|getRooms
argument_list|()
else|:
name|isClassAssigned
argument_list|()
condition|?
name|getClassAssignment
argument_list|()
operator|.
name|getRooms
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
name|Collection
argument_list|<
name|ClassRoomInfo
argument_list|>
name|original
init|=
operator|(
name|getClassOldAssignment
argument_list|()
operator|!=
literal|null
condition|?
name|getClassOldAssignment
argument_list|()
operator|.
name|getRooms
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|rooms
operator|==
literal|null
operator|||
name|rooms
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|""
return|;
name|Collections
operator|.
name|sort
argument_list|(
name|rooms
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ClassRoomInfo
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|ClassRoomInfo
name|r1
parameter_list|,
name|ClassRoomInfo
name|r2
parameter_list|)
block|{
name|int
name|cmp
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|ClassInfoForm
operator|.
name|sRoomOrdNameAsc
operator|.
name|equals
argument_list|(
name|iForm
operator|.
name|getRoomOrder
argument_list|()
argument_list|)
condition|)
block|{
name|cmp
operator|=
name|r1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ClassInfoForm
operator|.
name|sRoomOrdNameDesc
operator|.
name|equals
argument_list|(
name|iForm
operator|.
name|getRoomOrder
argument_list|()
argument_list|)
condition|)
block|{
name|cmp
operator|=
operator|-
name|r1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ClassInfoForm
operator|.
name|sRoomOrdSizeAsc
operator|.
name|equals
argument_list|(
name|iForm
operator|.
name|getRoomOrder
argument_list|()
argument_list|)
condition|)
block|{
name|cmp
operator|=
name|Double
operator|.
name|compare
argument_list|(
name|r1
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|r2
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else  if
condition|(
name|ClassInfoForm
operator|.
name|sRoomOrdSizeDesc
operator|.
name|equals
argument_list|(
name|iForm
operator|.
name|getRoomOrder
argument_list|()
argument_list|)
condition|)
block|{
name|cmp
operator|=
operator|-
name|Double
operator|.
name|compare
argument_list|(
name|r1
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|r2
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cmp
operator|=
name|r1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|r1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
empty_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|r1
operator|.
name|getLocationId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getLocationId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|String
name|ret
init|=
literal|""
decl_stmt|;
name|ret
operator|+=
literal|"<script language='javascript'>"
expr_stmt|;
name|ret
operator|+=
literal|"function roomOver(source, id) { "
expr_stmt|;
name|ret
operator|+=
literal|"    document.getElementById('r'+id).style.backgroundColor='rgb(223,231,242)';"
expr_stmt|;
name|ret
operator|+=
literal|"    document.getElementById('c'+id).style.backgroundColor='rgb(223,231,242)';"
expr_stmt|;
name|ret
operator|+=
literal|"    source.style.cursor='hand';source.style.cursor='pointer';"
expr_stmt|;
name|ret
operator|+=
literal|"}"
expr_stmt|;
name|ret
operator|+=
literal|"var sCap = -1;"
expr_stmt|;
name|ret
operator|+=
literal|"var sRooms = '"
expr_stmt|;
if|if
condition|(
name|assigned
operator|!=
literal|null
operator|&&
name|assigned
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ClassRoomInfo
name|room
range|:
name|assigned
control|)
block|{
name|ret
operator|+=
literal|":"
operator|+
name|room
operator|.
name|getLocationId
argument_list|()
operator|+
literal|"@"
operator|+
name|room
operator|.
name|getCapacity
argument_list|()
expr_stmt|;
block|}
block|}
name|ret
operator|+=
literal|"';"
expr_stmt|;
name|ret
operator|+=
literal|"var sNrRooms = "
operator|+
operator|(
name|assigned
operator|!=
literal|null
condition|?
name|assigned
operator|.
name|size
argument_list|()
else|:
literal|0
operator|)
operator|+
literal|";"
expr_stmt|;
name|ret
operator|+=
literal|"function roomSelected(id) {"
expr_stmt|;
name|ret
operator|+=
literal|"    return sRooms.indexOf(':'+id+'@')>=0;"
expr_stmt|;
name|ret
operator|+=
literal|"}"
expr_stmt|;
name|ret
operator|+=
literal|"function roomOut(id) { "
expr_stmt|;
name|ret
operator|+=
literal|"    var bg = 'transparent';"
expr_stmt|;
name|ret
operator|+=
literal|"    if (roomSelected(id)) bg='rgb(168,187,225)';"
expr_stmt|;
name|ret
operator|+=
literal|"    document.getElementById('r'+id).style.backgroundColor=bg;"
expr_stmt|;
name|ret
operator|+=
literal|"    document.getElementById('c'+id).style.backgroundColor=bg;"
expr_stmt|;
name|ret
operator|+=
literal|"}"
expr_stmt|;
name|ret
operator|+=
literal|"function roomClick(source, id, cap) { "
expr_stmt|;
name|ret
operator|+=
literal|"    if (sCap<0) {"
expr_stmt|;
name|ret
operator|+=
literal|"        sCap = 0; sRooms=''; sNrRooms=0;"
expr_stmt|;
if|if
condition|(
name|assigned
operator|!=
literal|null
operator|&&
name|assigned
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ClassRoomInfo
name|room
range|:
name|assigned
control|)
name|ret
operator|+=
literal|"        roomOut("
operator|+
name|room
operator|.
name|getLocationId
argument_list|()
operator|+
literal|");"
expr_stmt|;
block|}
name|ret
operator|+=
literal|"    }"
expr_stmt|;
name|ret
operator|+=
literal|"    var i = sRooms.indexOf(':'+id+'@');"
expr_stmt|;
name|ret
operator|+=
literal|"    if (i>=0) {"
expr_stmt|;
name|ret
operator|+=
literal|"        var j = sRooms.indexOf(':',i+1);"
expr_stmt|;
name|ret
operator|+=
literal|"        sRooms = sRooms.substring(0, i)+(j>=0?sRooms.substring(j):'');"
expr_stmt|;
name|ret
operator|+=
literal|"        sCap -= cap; sNrRooms--;"
expr_stmt|;
name|ret
operator|+=
literal|"    } else {"
expr_stmt|;
name|ret
operator|+=
literal|"        sRooms = sRooms + ':' + id + '@' + cap;"
expr_stmt|;
name|ret
operator|+=
literal|"        sCap += cap; sNrRooms++;"
expr_stmt|;
name|ret
operator|+=
literal|"        if (sNrRooms>"
operator|+
name|getClazz
argument_list|()
operator|.
name|getNumberOfRooms
argument_list|()
operator|+
literal|") {"
expr_stmt|;
name|ret
operator|+=
literal|"            var fid = sRooms.substring(1, sRooms.indexOf('@'));"
expr_stmt|;
name|ret
operator|+=
literal|"            var fcap = sRooms.substring(sRooms.indexOf('@')+1, sRooms.indexOf(':',1));"
expr_stmt|;
name|ret
operator|+=
literal|"            sRooms = sRooms.substring(sRooms.indexOf(':',1));"
expr_stmt|;
name|ret
operator|+=
literal|"            sCap -= fcap; sNrRooms--; roomOut(fid);"
expr_stmt|;
name|ret
operator|+=
literal|"        };"
expr_stmt|;
name|ret
operator|+=
literal|"    }"
expr_stmt|;
name|ret
operator|+=
literal|"    roomOut(id);"
expr_stmt|;
name|ret
operator|+=
literal|"    if (sNrRooms=="
operator|+
name|getClazz
argument_list|()
operator|.
name|getNumberOfRooms
argument_list|()
operator|+
literal|") {displayLoading(); document.location='classInfo.do?op=Select&room='+sRooms+'&noCacheTS="
operator|+
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|+
literal|"';}"
expr_stmt|;
name|ret
operator|+=
literal|"    var c = document.getElementById('roomCapacityCounter');"
expr_stmt|;
name|ret
operator|+=
literal|"    if (c!=null) c.innerHTML = (sCap<"
operator|+
name|getClazz
argument_list|()
operator|.
name|getClassLimit
argument_list|()
operator|+
literal|"?'<font color=\"red\">'+sCap+'</font>':''+sCap);"
expr_stmt|;
name|ret
operator|+=
literal|"}"
expr_stmt|;
name|ret
operator|+=
literal|"</script>"
expr_stmt|;
name|ret
operator|+=
literal|"<table border='0' cellspacing='0' cellpadding='3'>"
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|int
name|step
init|=
literal|6
decl_stmt|;
for|for
control|(
name|ClassRoomInfo
name|room
range|:
name|rooms
control|)
block|{
if|if
condition|(
operator|(
name|idx
operator|%
name|step
operator|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
name|ret
operator|+=
literal|"</tr>"
expr_stmt|;
name|ret
operator|+=
literal|"<tr>"
expr_stmt|;
block|}
name|String
name|style
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|assigned
operator|!=
literal|null
operator|&&
name|assigned
operator|.
name|contains
argument_list|(
name|room
argument_list|)
condition|)
name|style
operator|+=
literal|"background-color:rgb(168,187,225);"
expr_stmt|;
if|if
condition|(
name|original
operator|!=
literal|null
operator|&&
name|original
operator|.
name|contains
argument_list|(
name|room
argument_list|)
condition|)
name|style
operator|+=
literal|"text-decoration:underline;"
expr_stmt|;
name|String
name|mouse
init|=
literal|"onMouseOver=\"roomOver(this,"
operator|+
name|room
operator|.
name|getLocationId
argument_list|()
operator|+
literal|");\" "
operator|+
literal|"onMouseOut=\"roomOut("
operator|+
name|room
operator|.
name|getLocationId
argument_list|()
operator|+
literal|");\" "
operator|+
literal|"onClick=\"roomClick(this,"
operator|+
name|room
operator|.
name|getLocationId
argument_list|()
operator|+
literal|","
operator|+
name|room
operator|.
name|getCapacity
argument_list|()
operator|+
literal|");\""
decl_stmt|;
name|ret
operator|+=
literal|"<td nowrap id='r"
operator|+
name|room
operator|.
name|getLocationId
argument_list|()
operator|+
literal|"' "
operator|+
operator|(
name|style
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
literal|"style='"
operator|+
name|style
operator|+
literal|"' "
else|:
literal|""
operator|)
operator|+
name|mouse
operator|+
literal|">"
operator|+
name|room
operator|.
name|toString
argument_list|()
operator|+
literal|"</td>"
expr_stmt|;
if|if
condition|(
operator|(
name|idx
operator|%
name|step
operator|)
operator|<
name|step
operator|-
literal|1
condition|)
name|style
operator|+=
literal|"border-right: #646464 1px dashed;"
expr_stmt|;
name|ret
operator|+=
literal|"<td id='c"
operator|+
name|room
operator|.
name|getLocationId
argument_list|()
operator|+
literal|"' "
operator|+
operator|(
name|style
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
literal|"style='"
operator|+
name|style
operator|+
literal|"' "
else|:
literal|""
operator|)
operator|+
name|mouse
operator|+
literal|">"
operator|+
name|room
operator|.
name|getCapacity
argument_list|()
operator|+
literal|"</td>"
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
while|while
condition|(
operator|(
name|idx
operator|%
name|step
operator|)
operator|!=
literal|0
condition|)
block|{
name|ret
operator|+=
literal|"<td colspan='2'>&nbsp;</td>"
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|ret
operator|+=
literal|"</tr>"
expr_stmt|;
name|ret
operator|+=
literal|"</table>"
expr_stmt|;
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iForm
operator|.
name|setMessage
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|""
return|;
block|}
block|}
specifier|public
name|Vector
argument_list|<
name|ClassRoomInfo
argument_list|>
name|getRooms
parameter_list|()
block|{
name|ClassTimeInfo
name|time
init|=
literal|null
decl_stmt|;
try|try
block|{
name|time
operator|=
operator|(
name|getSelectedAssignment
argument_list|()
operator|!=
literal|null
condition|?
name|getSelectedAssignment
argument_list|()
operator|.
name|getTime
argument_list|()
else|:
name|getClassAssignment
argument_list|()
operator|.
name|getTime
argument_list|()
operator|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|time
operator|==
literal|null
condition|)
return|return
literal|null
return|;
comment|// if (getClazz().getClassLimit()==0) return null;
name|int
name|minRoomSize
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|minRoomSize
operator|=
operator|(
name|iForm
operator|.
name|getMinRoomSize
argument_list|()
operator|==
literal|null
operator|||
name|iForm
operator|.
name|getMinRoomSize
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
operator|-
literal|1
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|iForm
operator|.
name|getMinRoomSize
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
operator|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|int
name|maxRoomSize
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|maxRoomSize
operator|=
operator|(
name|iForm
operator|.
name|getMaxRoomSize
argument_list|()
operator|==
literal|null
operator|||
name|iForm
operator|.
name|getMaxRoomSize
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
operator|-
literal|1
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|iForm
operator|.
name|getMaxRoomSize
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
operator|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
try|try
block|{
if|if
condition|(
name|getSelectedAssignment
argument_list|()
operator|==
literal|null
operator|&&
operator|!
name|isClassAssigned
argument_list|()
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|iRooms
operator|==
literal|null
condition|)
block|{
name|iRooms
operator|=
name|findRooms
argument_list|(
name|time
argument_list|,
name|minRoomSize
argument_list|,
name|maxRoomSize
argument_list|,
name|iForm
operator|.
name|getRoomFilter
argument_list|()
argument_list|,
name|iForm
operator|.
name|getAllowRoomConflict
argument_list|()
argument_list|,
name|iForm
operator|.
name|getAllRooms
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|iRooms
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|int
name|getRoomSize
parameter_list|()
block|{
name|ClassAssignment
name|classAssignment
init|=
operator|(
name|iChange
operator|==
literal|null
condition|?
literal|null
else|:
name|iChange
operator|.
name|getCurrent
argument_list|(
name|iClass
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|classAssignment
operator|!=
literal|null
condition|)
return|return
name|classAssignment
operator|.
name|getRoomSize
argument_list|()
return|;
if|if
condition|(
name|isClassAssigned
argument_list|()
condition|)
return|return
name|getClassAssignment
argument_list|()
operator|.
name|getRoomSize
argument_list|()
return|;
return|return
literal|0
return|;
block|}
specifier|public
name|ClassProposedChange
name|getChange
parameter_list|()
block|{
if|if
condition|(
name|iChange
operator|==
literal|null
operator|||
name|iChange
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
name|iChange
return|;
block|}
specifier|public
name|boolean
name|isHasChange
parameter_list|()
block|{
return|return
name|iChange
operator|!=
literal|null
operator|&&
operator|!
name|iChange
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getChangeHtmlTable
parameter_list|()
block|{
if|if
condition|(
name|iChange
operator|==
literal|null
operator|||
name|iChange
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
name|iChange
operator|.
name|getHtmlTable
argument_list|(
name|getSessionContext
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|match
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|filter
parameter_list|)
block|{
if|if
condition|(
name|filter
operator|==
literal|null
operator|||
name|filter
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|true
return|;
name|String
name|n
init|=
name|name
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|StringTokenizer
name|stk1
init|=
operator|new
name|StringTokenizer
argument_list|(
name|filter
operator|.
name|toUpperCase
argument_list|()
argument_list|,
literal|";"
argument_list|)
decl_stmt|;
while|while
condition|(
name|stk1
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|StringTokenizer
name|stk2
init|=
operator|new
name|StringTokenizer
argument_list|(
name|stk1
operator|.
name|nextToken
argument_list|()
argument_list|,
literal|" ,"
argument_list|)
decl_stmt|;
name|boolean
name|match
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|match
operator|&&
name|stk2
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|token
init|=
name|stk2
operator|.
name|nextToken
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
if|if
condition|(
name|token
operator|.
name|indexOf
argument_list|(
literal|'*'
argument_list|)
operator|>=
literal|0
operator|||
name|token
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
operator|>=
literal|0
condition|)
block|{
try|try
block|{
name|String
name|tokenRegExp
init|=
literal|"\\s+"
operator|+
name|token
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"\\."
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\?"
argument_list|,
literal|".+"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\*"
argument_list|,
literal|".*"
argument_list|)
operator|+
literal|"\\s"
decl_stmt|;
if|if
condition|(
operator|!
name|Pattern
operator|.
name|compile
argument_list|(
name|tokenRegExp
argument_list|)
operator|.
name|matcher
argument_list|(
literal|" "
operator|+
name|n
operator|+
literal|" "
argument_list|)
operator|.
name|find
argument_list|()
condition|)
name|match
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
name|e
parameter_list|)
block|{
name|match
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|n
operator|.
name|indexOf
argument_list|(
name|token
argument_list|)
operator|<
literal|0
condition|)
name|match
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|match
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isKeepConflictingAssignments
parameter_list|()
block|{
return|return
operator|!
name|iUnassignConflictingAssignments
return|;
block|}
specifier|public
name|void
name|setSessionContext
parameter_list|(
name|SessionContext
name|context
parameter_list|)
block|{
name|iContext
operator|=
name|context
expr_stmt|;
block|}
specifier|public
name|SessionContext
name|getSessionContext
parameter_list|()
block|{
return|return
name|iContext
return|;
block|}
block|}
end_class

end_unit

