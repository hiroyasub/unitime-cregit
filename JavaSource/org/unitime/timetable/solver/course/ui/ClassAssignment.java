begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|course
operator|.
name|ui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|AssignmentPreferenceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|duration
operator|.
name|DurationModel
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ClassAssignment
extends|extends
name|ClassInfo
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|5426079388298794551L
decl_stmt|;
specifier|protected
name|Vector
argument_list|<
name|ClassRoomInfo
argument_list|>
name|iRooms
init|=
operator|new
name|Vector
argument_list|<
name|ClassRoomInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|ClassTimeInfo
name|iTime
init|=
literal|null
decl_stmt|;
specifier|protected
name|ClassDateInfo
name|iDate
init|=
literal|null
decl_stmt|;
specifier|public
name|ClassAssignment
parameter_list|(
name|Assignment
name|assignment
parameter_list|)
block|{
name|super
argument_list|(
name|assignment
operator|.
name|getClazz
argument_list|()
argument_list|)
expr_stmt|;
name|AssignmentPreferenceInfo
name|info
init|=
literal|null
decl_stmt|;
try|try
block|{
name|info
operator|=
operator|(
name|AssignmentPreferenceInfo
operator|)
name|assignment
operator|.
name|getAssignmentInfo
argument_list|(
literal|"AssignmentInfo"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|info
argument_list|(
literal|"Unable to retrieve assignment info for "
operator|+
name|assignment
operator|.
name|getPlacement
argument_list|()
operator|.
name|getLongName
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|==
literal|null
condition|)
name|info
operator|=
operator|new
name|AssignmentPreferenceInfo
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|assignment
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|room
init|=
operator|(
name|Location
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|iRooms
operator|.
name|add
argument_list|(
operator|new
name|ClassRoomInfo
argument_list|(
name|room
argument_list|,
name|info
operator|.
name|getRoomPreference
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iDate
operator|=
operator|new
name|ClassDateInfo
argument_list|(
name|assignment
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|assignment
operator|.
name|getClassId
argument_list|()
argument_list|,
name|assignment
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|assignment
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getPatternBitSet
argument_list|()
argument_list|,
operator|(
name|info
operator|==
literal|null
condition|?
literal|0
else|:
name|info
operator|.
name|getDatePatternPref
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|DurationModel
name|dm
init|=
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getDurationModel
argument_list|()
decl_stmt|;
name|iTime
operator|=
operator|new
name|ClassTimeInfo
argument_list|(
name|assignment
operator|.
name|getClassId
argument_list|()
argument_list|,
name|assignment
operator|.
name|getDays
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|assignment
operator|.
name|getStartSlot
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|assignment
operator|.
name|getSlotPerMtg
argument_list|()
argument_list|,
name|assignment
operator|.
name|getMinutesPerMeeting
argument_list|()
argument_list|,
name|info
operator|.
name|getTimePreference
argument_list|()
argument_list|,
name|assignment
operator|.
name|getTimePattern
argument_list|()
argument_list|,
name|iDate
argument_list|,
name|assignment
operator|.
name|getBreakTime
argument_list|()
argument_list|,
name|dm
operator|.
name|getDates
argument_list|(
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|,
name|assignment
operator|.
name|getDatePattern
argument_list|()
argument_list|,
name|assignment
operator|.
name|getDays
argument_list|()
argument_list|,
name|assignment
operator|.
name|getMinutesPerMeeting
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ClassAssignment
parameter_list|(
name|Class_
name|clazz
parameter_list|,
name|ClassTimeInfo
name|time
parameter_list|,
name|ClassDateInfo
name|date
parameter_list|,
name|Collection
argument_list|<
name|ClassRoomInfo
argument_list|>
name|rooms
parameter_list|)
block|{
name|super
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|iTime
operator|=
name|time
expr_stmt|;
name|iDate
operator|=
name|date
expr_stmt|;
if|if
condition|(
name|rooms
operator|!=
literal|null
condition|)
name|iRooms
operator|.
name|addAll
argument_list|(
name|rooms
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasTime
parameter_list|()
block|{
return|return
name|iTime
operator|!=
literal|null
return|;
block|}
specifier|public
name|ClassTimeInfo
name|getTime
parameter_list|()
block|{
return|return
name|iTime
return|;
block|}
specifier|public
name|String
name|getTimeId
parameter_list|()
block|{
return|return
operator|(
name|hasTime
argument_list|()
condition|?
name|getTime
argument_list|()
operator|.
name|getId
argument_list|()
else|:
literal|null
operator|)
return|;
block|}
specifier|public
name|boolean
name|hasDate
parameter_list|()
block|{
return|return
name|iDate
operator|!=
literal|null
return|;
block|}
specifier|public
name|ClassDateInfo
name|getDate
parameter_list|()
block|{
return|return
name|iDate
return|;
block|}
specifier|public
name|String
name|getDateId
parameter_list|()
block|{
return|return
operator|(
name|iDate
operator|==
literal|null
condition|?
literal|null
else|:
name|iDate
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|ClassRoomInfo
argument_list|>
name|getRooms
parameter_list|()
block|{
return|return
name|iRooms
return|;
block|}
specifier|public
name|boolean
name|hasRoom
parameter_list|(
name|Long
name|roomId
parameter_list|)
block|{
if|if
condition|(
name|iRooms
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|ClassRoomInfo
name|room
range|:
name|iRooms
control|)
if|if
condition|(
name|room
operator|.
name|getLocationId
argument_list|()
operator|.
name|equals
argument_list|(
name|roomId
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|Long
argument_list|>
name|getRoomIds
parameter_list|()
block|{
name|Vector
argument_list|<
name|Long
argument_list|>
name|roomIds
init|=
operator|new
name|Vector
argument_list|<
name|Long
argument_list|>
argument_list|(
name|getNrRooms
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ClassRoomInfo
name|room
range|:
name|getRooms
argument_list|()
control|)
name|roomIds
operator|.
name|add
argument_list|(
name|room
operator|.
name|getLocationId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|roomIds
return|;
block|}
specifier|public
name|int
name|getNrRooms
parameter_list|()
block|{
return|return
name|iRooms
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|ClassRoomInfo
name|getRoom
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
return|return
name|iRooms
operator|.
name|elementAt
argument_list|(
name|idx
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|s
init|=
operator|new
name|StringBuffer
argument_list|(
name|super
operator|.
name|getClassName
argument_list|()
operator|+
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasDate
argument_list|()
condition|)
name|s
operator|.
name|append
argument_list|(
name|getDate
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasTime
argument_list|()
condition|)
name|s
operator|.
name|append
argument_list|(
name|getTime
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getNrRooms
argument_list|()
operator|>
literal|0
condition|)
name|s
operator|.
name|append
argument_list|(
operator|(
name|hasTime
argument_list|()
condition|?
literal|" "
else|:
literal|""
operator|)
operator|+
name|getRoomNames
argument_list|(
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|s
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|toString
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|ClassInfo
name|a
parameter_list|)
block|{
name|int
name|cmp
init|=
name|super
operator|.
name|compareTo
argument_list|(
name|a
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
if|if
condition|(
name|a
operator|instanceof
name|ClassAssignment
condition|)
block|{
name|ClassAssignment
name|ci
init|=
operator|(
name|ClassAssignment
operator|)
name|a
decl_stmt|;
if|if
condition|(
name|hasDate
argument_list|()
operator|&&
operator|!
name|ci
operator|.
name|hasDate
argument_list|()
condition|)
return|return
literal|1
return|;
if|if
condition|(
operator|!
name|hasDate
argument_list|()
operator|&&
name|ci
operator|.
name|hasDate
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|hasDate
argument_list|()
condition|)
block|{
name|cmp
operator|=
name|getDate
argument_list|()
operator|.
name|compareTo
argument_list|(
name|ci
operator|.
name|getDate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
if|if
condition|(
name|hasTime
argument_list|()
operator|&&
operator|!
name|ci
operator|.
name|hasTime
argument_list|()
condition|)
return|return
literal|1
return|;
if|if
condition|(
operator|!
name|hasTime
argument_list|()
operator|&&
name|ci
operator|.
name|hasTime
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|hasTime
argument_list|()
condition|)
block|{
name|cmp
operator|=
name|getTime
argument_list|()
operator|.
name|compareTo
argument_list|(
name|ci
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
name|cmp
operator|=
name|getRooms
argument_list|()
operator|.
name|size
argument_list|()
operator|-
name|ci
operator|.
name|getRooms
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getNrRooms
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|cmp
operator|=
name|getRoom
argument_list|(
name|i
argument_list|)
operator|.
name|compareTo
argument_list|(
name|ci
operator|.
name|getRoom
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
return|return
name|hashCode
argument_list|()
operator|-
name|ci
operator|.
name|hashCode
argument_list|()
return|;
block|}
else|else
return|return
literal|1
return|;
block|}
specifier|public
name|int
name|getValue
parameter_list|()
block|{
name|int
name|value
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|hasTime
argument_list|()
condition|)
name|value
operator|+=
name|getTime
argument_list|()
operator|.
name|getPreference
argument_list|()
expr_stmt|;
for|for
control|(
name|ClassRoomInfo
name|room
range|:
name|getRooms
argument_list|()
control|)
name|value
operator|+=
name|room
operator|.
name|getPreference
argument_list|()
expr_stmt|;
return|return
name|value
return|;
block|}
specifier|public
name|String
name|getRoomNames
parameter_list|(
name|String
name|delim
parameter_list|)
block|{
if|if
condition|(
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|""
return|;
name|StringBuffer
name|s
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ClassRoomInfo
argument_list|>
name|i
init|=
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|s
operator|.
name|append
argument_list|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|s
operator|.
name|append
argument_list|(
name|delim
argument_list|)
expr_stmt|;
block|}
return|return
name|s
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getRoomNamesHtml
parameter_list|(
name|String
name|delim
parameter_list|)
block|{
if|if
condition|(
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|""
return|;
name|StringBuffer
name|s
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ClassRoomInfo
argument_list|>
name|i
init|=
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|s
operator|.
name|append
argument_list|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|getNameHtml
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|s
operator|.
name|append
argument_list|(
name|delim
argument_list|)
expr_stmt|;
block|}
return|return
name|s
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isValid
parameter_list|()
block|{
return|return
name|hasTime
argument_list|()
operator|&&
name|getNrRooms
argument_list|()
operator|==
name|getNumberOfRooms
argument_list|()
return|;
block|}
specifier|public
name|String
name|getTimeNameHtml
parameter_list|()
block|{
return|return
operator|(
name|hasTime
argument_list|()
condition|?
name|getTime
argument_list|()
operator|.
name|getNameHtml
argument_list|()
else|:
literal|"<i>N/A</i>"
operator|)
return|;
block|}
specifier|public
name|String
name|getTimeLongNameHtml
parameter_list|()
block|{
return|return
operator|(
name|hasTime
argument_list|()
condition|?
name|getTime
argument_list|()
operator|.
name|getLongNameHtml
argument_list|()
else|:
literal|"<i>N/A</i>"
operator|)
return|;
block|}
specifier|public
name|int
name|getRoomSize
parameter_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ClassRoomInfo
name|room
range|:
name|getRooms
argument_list|()
control|)
name|count
operator|+=
name|room
operator|.
name|getCapacity
argument_list|()
expr_stmt|;
return|return
name|count
return|;
block|}
specifier|public
name|String
name|getDateNameHtml
parameter_list|()
block|{
return|return
operator|(
name|hasDate
argument_list|()
condition|?
name|getDate
argument_list|()
operator|.
name|toHtml
argument_list|()
else|:
literal|"<i>N/A</i>"
operator|)
return|;
block|}
specifier|public
name|String
name|getDateLongNameHtml
parameter_list|()
block|{
return|return
operator|(
name|hasDate
argument_list|()
condition|?
name|getDate
argument_list|()
operator|.
name|toLongHtml
argument_list|()
else|:
literal|"<i>N/A</i>"
operator|)
return|;
block|}
block|}
end_class

end_unit

