begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamCourseSection
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamInstructor
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamOwnerDAO
import|;
end_import

begin_class
specifier|public
class|class
name|ExamInfo
implements|implements
name|Serializable
implements|,
name|Comparable
block|{
specifier|protected
name|String
name|iExamLabel
init|=
literal|null
decl_stmt|;
specifier|protected
name|Long
name|iExamId
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|transient
name|Exam
name|iExam
init|=
literal|null
decl_stmt|;
specifier|protected
name|int
name|iNrStudents
decl_stmt|;
specifier|protected
name|int
name|iLength
decl_stmt|;
specifier|protected
name|int
name|iMaxRooms
decl_stmt|;
specifier|protected
name|int
name|iSeatingType
decl_stmt|;
specifier|protected
name|Vector
name|iSections
init|=
literal|null
decl_stmt|;
specifier|protected
name|Vector
name|iInstructors
init|=
literal|null
decl_stmt|;
specifier|public
name|ExamInfo
parameter_list|(
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|Exam
name|exam
parameter_list|)
block|{
name|iExamId
operator|=
name|exam
operator|.
name|getId
argument_list|()
expr_stmt|;
name|iExamLabel
operator|=
name|exam
operator|.
name|getName
argument_list|()
expr_stmt|;
name|iLength
operator|=
name|exam
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|iMaxRooms
operator|=
name|exam
operator|.
name|getMaxRooms
argument_list|()
expr_stmt|;
name|iNrStudents
operator|=
name|exam
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|iSeatingType
operator|=
operator|(
name|exam
operator|.
name|hasAltSeating
argument_list|()
condition|?
name|Exam
operator|.
name|sSeatingTypeExam
else|:
name|Exam
operator|.
name|sSeatingTypeNormal
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|exam
operator|.
name|getCourseSections
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iSections
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|exam
operator|.
name|getCourseSections
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamCourseSection
name|ecs
init|=
operator|(
name|ExamCourseSection
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|iSections
operator|.
name|add
argument_list|(
operator|new
name|ExamSectionInfo
argument_list|(
name|ecs
operator|.
name|getId
argument_list|()
argument_list|,
name|ecs
operator|.
name|getName
argument_list|()
argument_list|,
name|ecs
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|iInstructors
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|exam
operator|.
name|constraints
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Constraint
name|c
init|=
operator|(
name|Constraint
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|instanceof
name|ExamInstructor
condition|)
block|{
name|ExamInstructor
name|instructor
init|=
operator|(
name|ExamInstructor
operator|)
name|c
decl_stmt|;
name|iInstructors
operator|.
name|add
argument_list|(
operator|new
name|ExamInstructorInfo
argument_list|(
name|instructor
operator|.
name|getId
argument_list|()
argument_list|,
name|instructor
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|ExamInfo
parameter_list|(
name|Exam
name|exam
parameter_list|)
block|{
name|iExamId
operator|=
name|exam
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iExamLabel
operator|=
name|exam
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|iMaxRooms
operator|=
name|exam
operator|.
name|getMaxNbrRooms
argument_list|()
expr_stmt|;
name|iExam
operator|=
name|exam
expr_stmt|;
name|iLength
operator|=
name|exam
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|iNrStudents
operator|=
name|exam
operator|.
name|countStudents
argument_list|()
expr_stmt|;
name|iSeatingType
operator|=
name|exam
operator|.
name|getSeatingType
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Long
name|getExamId
parameter_list|()
block|{
return|return
name|iExamId
return|;
block|}
specifier|public
name|Exam
name|getExam
parameter_list|()
block|{
if|if
condition|(
name|iExam
operator|==
literal|null
condition|)
name|iExam
operator|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|get
argument_list|(
name|iExamId
argument_list|)
expr_stmt|;
return|return
name|iExam
return|;
block|}
specifier|public
name|String
name|getExamName
parameter_list|()
block|{
return|return
operator|(
name|iExamLabel
operator|==
literal|null
condition|?
name|getExam
argument_list|()
operator|.
name|getLabel
argument_list|()
else|:
name|iExamLabel
operator|)
return|;
block|}
specifier|public
name|int
name|getNrStudents
parameter_list|()
block|{
return|return
name|iNrStudents
return|;
block|}
specifier|public
name|int
name|getSeatingType
parameter_list|()
block|{
return|return
name|iSeatingType
return|;
block|}
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|iLength
return|;
block|}
specifier|public
name|int
name|getMaxRooms
parameter_list|()
block|{
return|return
name|iMaxRooms
return|;
block|}
specifier|public
name|Vector
name|getSections
parameter_list|()
block|{
if|if
condition|(
name|iSections
operator|==
literal|null
condition|)
block|{
name|iSections
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|TreeSet
argument_list|(
name|getExam
argument_list|()
operator|.
name|getOwners
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|iSections
operator|.
name|add
argument_list|(
operator|new
name|ExamSectionInfo
argument_list|(
operator|(
name|ExamOwner
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|iSections
return|;
block|}
specifier|public
name|String
name|getSectionName
parameter_list|(
name|String
name|delim
parameter_list|)
block|{
name|String
name|name
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|getSections
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamSectionInfo
name|info
init|=
operator|(
name|ExamSectionInfo
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|name
operator|+=
name|info
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
name|name
operator|+=
name|delim
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
specifier|public
name|Vector
name|getInstructors
parameter_list|()
block|{
if|if
condition|(
name|iInstructors
operator|==
literal|null
condition|)
block|{
name|iInstructors
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|TreeSet
argument_list|(
name|getExam
argument_list|()
operator|.
name|getInstructors
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|iInstructors
operator|.
name|add
argument_list|(
operator|new
name|ExamInstructorInfo
argument_list|(
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|iInstructors
return|;
block|}
specifier|public
name|String
name|getInstructorName
parameter_list|(
name|String
name|delim
parameter_list|,
name|String
name|instructorNameFormat
parameter_list|)
block|{
name|String
name|name
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|getInstructors
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamInstructorInfo
name|info
init|=
operator|(
name|ExamInstructorInfo
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|name
operator|+=
name|info
operator|.
name|getName
argument_list|(
name|instructorNameFormat
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
name|name
operator|+=
name|delim
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getExamId
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|ExamInfo
operator|)
condition|)
return|return
literal|false
return|;
return|return
operator|(
operator|(
name|ExamInfo
operator|)
name|o
operator|)
operator|.
name|getExamId
argument_list|()
operator|.
name|equals
argument_list|(
name|getExamId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|ExamInfo
operator|)
condition|)
return|return
operator|-
literal|1
return|;
name|ExamInfo
name|a
init|=
operator|(
name|ExamInfo
operator|)
name|o
decl_stmt|;
name|int
name|cmp
init|=
name|getExamName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|a
operator|.
name|getExamName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|getExamId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|a
operator|.
name|getExamId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getExamName
argument_list|()
return|;
block|}
specifier|public
class|class
name|ExamSectionInfo
implements|implements
name|Serializable
block|{
specifier|protected
name|Long
name|iId
decl_stmt|;
specifier|protected
name|String
name|iName
decl_stmt|;
specifier|protected
name|int
name|iNrStudents
init|=
operator|-
literal|1
decl_stmt|;
specifier|protected
specifier|transient
name|ExamOwner
name|iOwner
init|=
literal|null
decl_stmt|;
specifier|public
name|ExamSectionInfo
parameter_list|(
name|Long
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|nrStudents
parameter_list|)
block|{
name|iId
operator|=
name|id
expr_stmt|;
name|iName
operator|=
name|name
expr_stmt|;
name|iNrStudents
operator|=
name|nrStudents
expr_stmt|;
block|}
specifier|public
name|ExamSectionInfo
parameter_list|(
name|ExamOwner
name|owner
parameter_list|)
block|{
name|iOwner
operator|=
name|owner
expr_stmt|;
name|iId
operator|=
name|owner
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iName
operator|=
name|owner
operator|.
name|getLabel
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Long
name|getId
parameter_list|()
block|{
return|return
name|iId
return|;
block|}
specifier|public
name|Long
name|getOwnerId
parameter_list|()
block|{
return|return
name|getOwner
argument_list|()
operator|.
name|getOwnerId
argument_list|()
return|;
block|}
specifier|public
name|Integer
name|getOwnerType
parameter_list|()
block|{
return|return
name|getOwner
argument_list|()
operator|.
name|getOwnerType
argument_list|()
return|;
block|}
specifier|public
name|ExamOwner
name|getOwner
parameter_list|()
block|{
if|if
condition|(
name|iOwner
operator|==
literal|null
condition|)
name|iOwner
operator|=
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|get
argument_list|(
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|iOwner
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|int
name|getNrStudents
parameter_list|()
block|{
if|if
condition|(
name|iNrStudents
operator|<
literal|0
condition|)
name|iNrStudents
operator|=
name|getOwner
argument_list|()
operator|.
name|countStudents
argument_list|()
expr_stmt|;
return|return
name|iNrStudents
return|;
block|}
specifier|public
name|ExamInfo
name|getExam
parameter_list|()
block|{
return|return
name|ExamInfo
operator|.
name|this
return|;
block|}
block|}
specifier|public
class|class
name|ExamInstructorInfo
implements|implements
name|Serializable
block|{
specifier|protected
name|Long
name|iId
decl_stmt|;
specifier|protected
name|String
name|iName
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|transient
name|DepartmentalInstructor
name|iInstructor
decl_stmt|;
specifier|public
name|ExamInstructorInfo
parameter_list|(
name|Long
name|id
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|iId
operator|=
name|id
expr_stmt|;
name|iName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|ExamInstructorInfo
parameter_list|(
name|DepartmentalInstructor
name|instructor
parameter_list|)
block|{
name|iId
operator|=
name|instructor
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iInstructor
operator|=
name|instructor
expr_stmt|;
block|}
specifier|public
name|Long
name|getId
parameter_list|()
block|{
return|return
name|iId
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|(
name|String
name|format
parameter_list|)
block|{
if|if
condition|(
name|iName
operator|==
literal|null
condition|)
return|return
name|iInstructor
operator|.
name|getName
argument_list|(
name|format
argument_list|)
return|;
return|return
name|iName
return|;
block|}
specifier|public
name|DepartmentalInstructor
name|getInstructor
parameter_list|()
block|{
if|if
condition|(
name|iInstructor
operator|==
literal|null
condition|)
name|iInstructor
operator|=
operator|new
name|DepartmentalInstructorDAO
argument_list|()
operator|.
name|get
argument_list|(
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|iInstructor
return|;
block|}
specifier|public
name|ExamInfo
name|getExam
parameter_list|()
block|{
return|return
name|ExamInfo
operator|.
name|this
return|;
block|}
block|}
block|}
end_class

end_unit

