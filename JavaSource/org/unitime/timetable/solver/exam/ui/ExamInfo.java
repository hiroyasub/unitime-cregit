begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2008 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamOwnerDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamTypeDAO
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ExamInfo
implements|implements
name|Serializable
implements|,
name|Comparable
argument_list|<
name|ExamInfo
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|4407299089673481581L
decl_stmt|;
specifier|protected
name|String
name|iExamLabel
init|=
literal|null
decl_stmt|;
specifier|protected
name|Long
name|iExamId
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|transient
name|Exam
name|iExam
init|=
literal|null
decl_stmt|;
specifier|protected
name|Long
name|iExamTypeId
decl_stmt|;
specifier|protected
specifier|transient
name|ExamType
name|iExamType
init|=
literal|null
decl_stmt|;
specifier|protected
name|int
name|iNrStudents
decl_stmt|;
specifier|protected
name|int
name|iLength
decl_stmt|;
specifier|protected
name|int
name|iMaxRooms
decl_stmt|;
specifier|protected
name|int
name|iSeatingType
decl_stmt|;
specifier|protected
name|int
name|iPrintOffset
decl_stmt|;
specifier|protected
name|Vector
argument_list|<
name|ExamSectionInfo
argument_list|>
name|iSections
init|=
literal|null
decl_stmt|;
specifier|protected
name|Vector
argument_list|<
name|ExamInstructorInfo
argument_list|>
name|iInstructors
init|=
literal|null
decl_stmt|;
specifier|protected
name|Vector
argument_list|<
name|ExamSectionInfo
argument_list|>
name|iSectionsIncludeCrosslistedDummies
init|=
literal|null
decl_stmt|;
specifier|private
name|ExamInfo
parameter_list|()
block|{
block|}
specifier|public
name|ExamInfo
parameter_list|(
name|org
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|Exam
name|exam
parameter_list|)
block|{
name|iExamTypeId
operator|=
operator|(
operator|(
name|ExamModel
operator|)
name|exam
operator|.
name|getModel
argument_list|()
operator|)
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLong
argument_list|(
literal|"Exam.Type"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|iExamId
operator|=
name|exam
operator|.
name|getId
argument_list|()
expr_stmt|;
name|iExamLabel
operator|=
name|exam
operator|.
name|getName
argument_list|()
expr_stmt|;
name|iLength
operator|=
name|exam
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|iMaxRooms
operator|=
name|exam
operator|.
name|getMaxRooms
argument_list|()
expr_stmt|;
name|iNrStudents
operator|=
name|exam
operator|.
name|getSize
argument_list|()
expr_stmt|;
comment|//Students().size();
name|iSeatingType
operator|=
operator|(
name|exam
operator|.
name|hasAltSeating
argument_list|()
condition|?
name|Exam
operator|.
name|sSeatingTypeExam
else|:
name|Exam
operator|.
name|sSeatingTypeNormal
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|exam
operator|.
name|getOwners
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iSections
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
for|for
control|(
name|org
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamOwner
name|ecs
range|:
name|exam
operator|.
name|getOwners
argument_list|()
control|)
block|{
name|HashSet
argument_list|<
name|Long
argument_list|>
name|studentIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|ecs
operator|.
name|getStudents
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|studentIds
operator|.
name|add
argument_list|(
operator|(
operator|(
name|ExamStudent
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|iSections
operator|.
name|add
argument_list|(
operator|new
name|ExamSectionInfo
argument_list|(
name|ecs
operator|.
name|getId
argument_list|()
argument_list|,
name|ecs
operator|.
name|getName
argument_list|()
argument_list|,
name|studentIds
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|iInstructors
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
for|for
control|(
name|Constraint
name|c
range|:
name|exam
operator|.
name|constraints
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|instanceof
name|ExamInstructor
condition|)
block|{
name|ExamInstructor
name|instructor
init|=
operator|(
name|ExamInstructor
operator|)
name|c
decl_stmt|;
name|iInstructors
operator|.
name|add
argument_list|(
operator|new
name|ExamInstructorInfo
argument_list|(
name|instructor
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|instructor
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|iPrintOffset
operator|=
operator|(
name|exam
operator|.
name|getPrintOffset
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|exam
operator|.
name|getPrintOffset
argument_list|()
operator|)
expr_stmt|;
block|}
specifier|public
name|ExamInfo
parameter_list|(
name|Exam
name|exam
parameter_list|)
block|{
name|iExamType
operator|=
name|exam
operator|.
name|getExamType
argument_list|()
expr_stmt|;
name|iExamTypeId
operator|=
name|exam
operator|.
name|getExamType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iExamId
operator|=
name|exam
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iExamLabel
operator|=
name|exam
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|iMaxRooms
operator|=
name|exam
operator|.
name|getMaxNbrRooms
argument_list|()
expr_stmt|;
name|iExam
operator|=
name|exam
expr_stmt|;
name|iLength
operator|=
name|exam
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|iNrStudents
operator|=
operator|(
name|exam
operator|.
name|getExamSize
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|exam
operator|.
name|getExamSize
argument_list|()
operator|)
expr_stmt|;
name|iSeatingType
operator|=
name|exam
operator|.
name|getSeatingType
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|iPrintOffset
operator|=
name|exam
operator|.
name|examOffset
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Long
name|getExamTypeId
parameter_list|()
block|{
return|return
name|iExamTypeId
return|;
block|}
specifier|public
name|String
name|getExamTypeLabel
parameter_list|()
block|{
if|if
condition|(
name|iExamType
operator|==
literal|null
operator|&&
name|iExamTypeId
operator|!=
literal|null
condition|)
block|{
name|iExamType
operator|=
name|ExamTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|iExamTypeId
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|iExamType
operator|==
literal|null
condition|?
literal|"Unknown"
else|:
name|iExamType
operator|.
name|getLabel
argument_list|()
operator|)
return|;
block|}
specifier|public
name|ExamType
name|getExamType
parameter_list|()
block|{
if|if
condition|(
name|iExamType
operator|==
literal|null
operator|&&
name|iExamTypeId
operator|!=
literal|null
condition|)
block|{
name|iExamType
operator|=
name|ExamTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|iExamTypeId
argument_list|)
expr_stmt|;
block|}
return|return
name|iExamType
return|;
block|}
specifier|public
name|Long
name|getExamId
parameter_list|()
block|{
return|return
name|iExamId
return|;
block|}
specifier|public
name|int
name|getPrintOffset
parameter_list|()
block|{
return|return
name|iPrintOffset
return|;
block|}
specifier|public
name|Exam
name|getExam
parameter_list|()
block|{
if|if
condition|(
name|iExam
operator|==
literal|null
condition|)
name|iExam
operator|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|get
argument_list|(
name|iExamId
argument_list|)
expr_stmt|;
return|return
name|iExam
return|;
block|}
specifier|public
name|Exam
name|getExam
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
return|return
operator|new
name|ExamDAO
argument_list|()
operator|.
name|get
argument_list|(
name|iExamId
argument_list|,
name|hibSession
argument_list|)
return|;
block|}
specifier|public
name|String
name|getExamName
parameter_list|()
block|{
return|return
operator|(
name|iExamLabel
operator|==
literal|null
condition|?
name|getExam
argument_list|()
operator|.
name|getLabel
argument_list|()
else|:
name|iExamLabel
operator|)
return|;
block|}
specifier|public
name|String
name|getExamNameHtml
parameter_list|()
block|{
name|String
name|name
init|=
name|getExamName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|>
literal|50
condition|)
return|return
literal|"<span title='"
operator|+
name|name
operator|+
literal|"'>"
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|50
argument_list|)
operator|+
literal|"...</span>"
return|;
else|else
return|return
name|name
return|;
block|}
specifier|public
name|int
name|getNrStudents
parameter_list|()
block|{
if|if
condition|(
name|iNrStudents
operator|<
literal|0
condition|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|studentIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|getSections
argument_list|()
control|)
name|studentIds
operator|.
name|addAll
argument_list|(
name|section
operator|.
name|getStudentIds
argument_list|()
argument_list|)
expr_stmt|;
name|iNrStudents
operator|=
name|studentIds
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|iNrStudents
return|;
block|}
specifier|public
name|int
name|getSeatingType
parameter_list|()
block|{
return|return
name|iSeatingType
return|;
block|}
specifier|public
name|String
name|getSeatingTypeLabel
parameter_list|()
block|{
return|return
name|Exam
operator|.
name|sSeatingTypes
index|[
name|iSeatingType
index|]
return|;
block|}
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|iLength
return|;
block|}
specifier|public
name|int
name|getMaxRooms
parameter_list|()
block|{
return|return
name|iMaxRooms
return|;
block|}
specifier|public
name|void
name|createSections
parameter_list|(
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|students
parameter_list|)
block|{
name|iSections
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|TreeSet
argument_list|(
name|getExam
argument_list|()
operator|.
name|getOwners
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamSectionInfo
name|section
init|=
operator|new
name|ExamSectionInfo
argument_list|(
operator|(
name|ExamOwner
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|students
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsOfOwner
init|=
name|students
operator|.
name|get
argument_list|(
name|section
operator|.
name|getOwner
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|section
operator|.
name|setStudentIds
argument_list|(
name|studentsOfOwner
operator|==
literal|null
condition|?
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
else|:
name|studentsOfOwner
argument_list|)
expr_stmt|;
block|}
name|iSections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Vector
argument_list|<
name|ExamSectionInfo
argument_list|>
name|getSections
parameter_list|()
block|{
if|if
condition|(
name|iSections
operator|==
literal|null
condition|)
name|createSections
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|iSections
return|;
block|}
specifier|public
name|void
name|createSectionsIncludeCrosslistedDummies
parameter_list|(
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
name|students
parameter_list|)
block|{
name|iSectionsIncludeCrosslistedDummies
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
for|for
control|(
name|ExamSectionInfo
name|original
range|:
name|getSections
argument_list|()
control|)
block|{
name|ExamOwner
name|owner
init|=
name|original
operator|.
name|getOwner
argument_list|()
decl_stmt|;
if|if
condition|(
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|studentsOfOwner
init|=
operator|(
name|students
operator|==
literal|null
condition|?
literal|null
else|:
name|students
operator|.
name|get
argument_list|(
name|owner
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
name|ExamSectionInfo
name|section
init|=
operator|new
name|ExamSectionInfo
argument_list|(
name|owner
argument_list|)
decl_stmt|;
name|iSectionsIncludeCrosslistedDummies
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|course
init|=
operator|(
name|CourseOffering
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|isIsControl
argument_list|()
condition|)
continue|continue;
name|ExamOwner
name|dummy
init|=
operator|new
name|ExamOwner
argument_list|()
decl_stmt|;
name|dummy
operator|.
name|setOwnerId
argument_list|(
name|owner
operator|.
name|getOwnerId
argument_list|()
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setOwnerType
argument_list|(
name|owner
operator|.
name|getOwnerType
argument_list|()
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setCourse
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|ExamSectionInfo
name|dummySection
init|=
operator|new
name|ExamSectionInfo
argument_list|(
name|dummy
argument_list|)
decl_stmt|;
name|dummySection
operator|.
name|setMaster
argument_list|(
name|section
argument_list|)
expr_stmt|;
if|if
condition|(
name|students
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|studentsOfOwner
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsOfCourse
init|=
name|studentsOfOwner
operator|.
name|get
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|dummySection
operator|.
name|setStudentIds
argument_list|(
name|studentsOfCourse
operator|==
literal|null
condition|?
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
else|:
name|studentsOfCourse
argument_list|)
expr_stmt|;
block|}
else|else
name|dummySection
operator|.
name|setStudentIds
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iSectionsIncludeCrosslistedDummies
operator|.
name|add
argument_list|(
name|dummySection
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|students
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|studentsOfOwner
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsOfCourse
init|=
name|studentsOfOwner
operator|.
name|get
argument_list|(
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|section
operator|.
name|setStudentIds
argument_list|(
name|studentsOfCourse
operator|==
literal|null
condition|?
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
else|:
name|studentsOfCourse
argument_list|)
expr_stmt|;
block|}
else|else
name|section
operator|.
name|setStudentIds
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|section
operator|.
name|setMaster
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iSectionsIncludeCrosslistedDummies
operator|.
name|add
argument_list|(
name|original
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Vector
argument_list|<
name|ExamSectionInfo
argument_list|>
name|getSectionsIncludeCrosslistedDummies
parameter_list|()
block|{
if|if
condition|(
name|iSectionsIncludeCrosslistedDummies
operator|==
literal|null
condition|)
name|createSectionsIncludeCrosslistedDummies
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|iSectionsIncludeCrosslistedDummies
return|;
block|}
specifier|public
name|Set
argument_list|<
name|Long
argument_list|>
name|getStudentIds
parameter_list|()
block|{
name|HashSet
argument_list|<
name|Long
argument_list|>
name|studentIds
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|getSections
argument_list|()
control|)
block|{
name|studentIds
operator|.
name|addAll
argument_list|(
name|section
operator|.
name|getStudentIds
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|studentIds
return|;
block|}
specifier|public
name|String
name|getSectionName
parameter_list|(
name|String
name|delim
parameter_list|)
block|{
name|String
name|name
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|getSections
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamSectionInfo
name|info
init|=
operator|(
name|ExamSectionInfo
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|name
operator|+=
name|info
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
name|name
operator|+=
name|delim
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
specifier|public
name|Vector
argument_list|<
name|ExamInstructorInfo
argument_list|>
name|getInstructors
parameter_list|()
block|{
if|if
condition|(
name|iInstructors
operator|==
literal|null
condition|)
block|{
name|iInstructors
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|TreeSet
argument_list|(
name|getExam
argument_list|()
operator|.
name|getInstructors
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|iInstructors
operator|.
name|add
argument_list|(
operator|new
name|ExamInstructorInfo
argument_list|(
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|iInstructors
return|;
block|}
specifier|public
name|boolean
name|hasInstructor
parameter_list|(
name|Long
name|instructorId
parameter_list|)
block|{
if|if
condition|(
name|iInstructors
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExamInstructorInfo
name|instructor
range|:
name|iInstructors
control|)
if|if
condition|(
name|instructor
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|instructorId
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|getExam
argument_list|()
operator|.
name|getInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
if|if
condition|(
operator|(
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|instructorId
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|String
name|getInstructorName
parameter_list|(
name|String
name|delim
parameter_list|)
block|{
name|String
name|name
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|getInstructors
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamInstructorInfo
name|info
init|=
operator|(
name|ExamInstructorInfo
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|name
operator|+=
name|info
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
name|name
operator|+=
name|delim
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getExamId
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|ExamInfo
operator|)
condition|)
return|return
literal|false
return|;
return|return
operator|(
operator|(
name|ExamInfo
operator|)
name|o
operator|)
operator|.
name|getExamId
argument_list|()
operator|.
name|equals
argument_list|(
name|getExamId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|ExamInfo
name|info
parameter_list|)
block|{
name|int
name|cmp
init|=
name|getExamName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|info
operator|.
name|getExamName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|getExamId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|info
operator|.
name|getExamId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getExamName
argument_list|()
return|;
block|}
specifier|public
class|class
name|ExamSectionInfo
implements|implements
name|Serializable
implements|,
name|Comparable
argument_list|<
name|ExamSectionInfo
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|6052996415395186994L
decl_stmt|;
specifier|protected
name|Long
name|iId
decl_stmt|;
specifier|protected
name|String
name|iName
decl_stmt|;
specifier|protected
name|int
name|iNrStudents
init|=
operator|-
literal|1
decl_stmt|;
specifier|protected
specifier|transient
name|ExamOwner
name|iOwner
init|=
literal|null
decl_stmt|;
specifier|protected
name|Set
argument_list|<
name|Long
argument_list|>
name|iStudentIds
init|=
literal|null
decl_stmt|;
specifier|protected
name|ExamSectionInfo
name|iMaster
init|=
literal|null
decl_stmt|;
specifier|public
name|ExamSectionInfo
parameter_list|(
name|Long
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|studentIds
parameter_list|)
block|{
name|iId
operator|=
name|id
expr_stmt|;
name|iName
operator|=
name|name
expr_stmt|;
name|iNrStudents
operator|=
name|studentIds
operator|.
name|size
argument_list|()
expr_stmt|;
name|iStudentIds
operator|=
name|studentIds
expr_stmt|;
block|}
specifier|public
name|ExamSectionInfo
parameter_list|(
name|ExamOwner
name|owner
parameter_list|)
block|{
name|iOwner
operator|=
name|owner
expr_stmt|;
name|iId
operator|=
name|owner
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iName
operator|=
name|owner
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|iStudentIds
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|ExamSectionInfo
parameter_list|(
name|ExamOwner
name|owner
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|studentIds
parameter_list|)
block|{
name|this
argument_list|(
name|owner
argument_list|)
expr_stmt|;
if|if
condition|(
name|studentIds
operator|!=
literal|null
condition|)
block|{
name|iNrStudents
operator|=
name|studentIds
operator|.
name|size
argument_list|()
expr_stmt|;
name|iStudentIds
operator|=
name|studentIds
expr_stmt|;
block|}
block|}
specifier|public
name|Set
argument_list|<
name|Long
argument_list|>
name|getStudentIds
parameter_list|()
block|{
if|if
condition|(
name|iStudentIds
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|getMaster
argument_list|()
operator|!=
literal|null
condition|)
name|iStudentIds
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|(
name|getMaster
argument_list|()
operator|.
name|getOwner
argument_list|()
operator|.
name|getStudentIds
argument_list|(
name|getOwner
argument_list|()
operator|.
name|getCourse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|iStudentIds
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|(
name|getOwner
argument_list|()
operator|.
name|getStudentIds
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iNrStudents
operator|=
name|iStudentIds
operator|.
name|size
argument_list|()
expr_stmt|;
return|return
name|iStudentIds
return|;
block|}
specifier|public
name|void
name|setStudentIds
parameter_list|(
name|Set
argument_list|<
name|Long
argument_list|>
name|studentIds
parameter_list|)
block|{
name|iStudentIds
operator|=
name|studentIds
expr_stmt|;
name|iNrStudents
operator|=
name|studentIds
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Long
name|getId
parameter_list|()
block|{
return|return
name|iId
return|;
block|}
specifier|public
name|Long
name|getOwnerId
parameter_list|()
block|{
return|return
name|getOwner
argument_list|()
operator|.
name|getOwnerId
argument_list|()
return|;
block|}
specifier|public
name|Integer
name|getOwnerType
parameter_list|()
block|{
return|return
name|getOwner
argument_list|()
operator|.
name|getOwnerType
argument_list|()
return|;
block|}
specifier|public
name|ExamOwner
name|getOwner
parameter_list|()
block|{
if|if
condition|(
name|iOwner
operator|==
literal|null
condition|)
name|iOwner
operator|=
operator|new
name|ExamOwnerDAO
argument_list|()
operator|.
name|get
argument_list|(
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|iOwner
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|int
name|getNrStudents
parameter_list|()
block|{
if|if
condition|(
name|iNrStudents
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|getMaster
argument_list|()
operator|!=
literal|null
condition|)
name|iNrStudents
operator|=
name|getMaster
argument_list|()
operator|.
name|getOwner
argument_list|()
operator|.
name|getSize
argument_list|(
name|getOwner
argument_list|()
operator|.
name|getCourse
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|iNrStudents
operator|=
name|getOwner
argument_list|()
operator|.
name|getSize
argument_list|()
expr_stmt|;
block|}
return|return
name|iNrStudents
return|;
block|}
specifier|public
name|ExamInfo
name|getExam
parameter_list|()
block|{
return|return
name|ExamInfo
operator|.
name|this
return|;
block|}
specifier|public
name|ExamAssignment
name|getExamAssignment
parameter_list|()
block|{
if|if
condition|(
name|ExamInfo
operator|.
name|this
operator|instanceof
name|ExamAssignment
condition|)
return|return
operator|(
name|ExamAssignment
operator|)
name|ExamInfo
operator|.
name|this
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|ExamAssignmentInfo
name|getExamAssignmentInfo
parameter_list|()
block|{
if|if
condition|(
name|ExamInfo
operator|.
name|this
operator|instanceof
name|ExamAssignmentInfo
condition|)
return|return
operator|(
name|ExamAssignmentInfo
operator|)
name|ExamInfo
operator|.
name|this
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getSubject
parameter_list|()
block|{
return|return
name|getOwner
argument_list|()
operator|.
name|getSubject
argument_list|()
return|;
block|}
specifier|public
name|String
name|getCourseNbr
parameter_list|()
block|{
return|return
name|getOwner
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
return|;
block|}
specifier|public
name|String
name|getItype
parameter_list|()
block|{
return|return
name|getOwner
argument_list|()
operator|.
name|getItype
argument_list|()
return|;
block|}
specifier|public
name|String
name|getSection
parameter_list|()
block|{
return|return
name|getOwner
argument_list|()
operator|.
name|getSection
argument_list|()
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|ExamSectionInfo
name|info
parameter_list|)
block|{
name|int
name|cmp
init|=
name|getOwner
argument_list|()
operator|.
name|compareTo
argument_list|(
name|info
operator|.
name|getOwner
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|getExam
argument_list|()
operator|.
name|compareTo
argument_list|(
name|info
operator|.
name|getExam
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|hasCode
parameter_list|()
block|{
return|return
name|getId
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|ExamSectionInfo
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ExamSectionInfo
operator|)
name|o
operator|)
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
specifier|public
name|ExamSectionInfo
name|getMaster
parameter_list|()
block|{
return|return
name|iMaster
return|;
block|}
specifier|public
name|void
name|setMaster
parameter_list|(
name|ExamSectionInfo
name|master
parameter_list|)
block|{
name|iMaster
operator|=
name|master
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|ExamInstructorInfo
implements|implements
name|Serializable
implements|,
name|Comparable
argument_list|<
name|ExamInstructorInfo
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|6843290015053081071L
decl_stmt|;
specifier|protected
name|Long
name|iId
decl_stmt|;
specifier|protected
name|String
name|iExternalUniqueId
init|=
literal|null
decl_stmt|;
specifier|protected
name|String
name|iName
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|transient
name|DepartmentalInstructor
name|iInstructor
decl_stmt|;
specifier|public
name|ExamInstructorInfo
parameter_list|(
name|Long
name|id
parameter_list|,
name|String
name|externalUniqueId
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|iId
operator|=
name|id
expr_stmt|;
name|iExternalUniqueId
operator|=
name|externalUniqueId
expr_stmt|;
name|iName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|ExamInstructorInfo
parameter_list|(
name|DepartmentalInstructor
name|instructor
parameter_list|)
block|{
name|iId
operator|=
name|instructor
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iName
operator|=
name|instructor
operator|.
name|getNameLastFirst
argument_list|()
expr_stmt|;
name|iExternalUniqueId
operator|=
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
expr_stmt|;
name|iInstructor
operator|=
name|instructor
expr_stmt|;
block|}
specifier|public
name|Long
name|getId
parameter_list|()
block|{
return|return
name|iId
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|String
name|getExternalUniqueId
parameter_list|()
block|{
if|if
condition|(
name|iExternalUniqueId
operator|==
literal|null
operator|&&
name|iInstructor
operator|==
literal|null
condition|)
name|iExternalUniqueId
operator|=
name|getInstructor
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
expr_stmt|;
return|return
name|iExternalUniqueId
return|;
block|}
specifier|public
name|DepartmentalInstructor
name|getInstructor
parameter_list|()
block|{
if|if
condition|(
name|iInstructor
operator|==
literal|null
condition|)
name|iInstructor
operator|=
operator|new
name|DepartmentalInstructorDAO
argument_list|()
operator|.
name|get
argument_list|(
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|iInstructor
return|;
block|}
specifier|public
name|ExamInfo
name|getExam
parameter_list|()
block|{
return|return
name|ExamInfo
operator|.
name|this
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|ExamInstructorInfo
name|i
parameter_list|)
block|{
name|int
name|cmp
init|=
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|i
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|i
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|getExternalUniqueId
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
return|return
name|getId
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|ExamInstructorInfo
operator|)
condition|)
return|return
literal|false
return|;
name|ExamInstructorInfo
name|i
init|=
operator|(
name|ExamInstructorInfo
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|getExternalUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|i
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|i
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
name|ExamInstructorInfo
name|instructorInfo
parameter_list|(
name|DepartmentalInstructor
name|i
parameter_list|)
block|{
return|return
operator|new
name|ExamInstructorInfo
argument_list|(
name|i
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ExamInstructorInfo
name|createInstructorInfo
parameter_list|(
name|DepartmentalInstructor
name|i
parameter_list|)
block|{
return|return
operator|new
name|ExamInfo
argument_list|()
operator|.
name|instructorInfo
argument_list|(
name|i
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isOfSubjectArea
parameter_list|(
name|SubjectArea
name|subject
parameter_list|)
block|{
if|if
condition|(
name|subject
operator|==
literal|null
condition|)
return|return
literal|true
return|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|getSections
argument_list|()
control|)
if|if
condition|(
name|subject
operator|.
name|equals
argument_list|(
name|section
operator|.
name|getOwner
argument_list|()
operator|.
name|getCourse
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

