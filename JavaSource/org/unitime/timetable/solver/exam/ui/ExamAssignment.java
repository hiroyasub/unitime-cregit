begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriodPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamPeriodDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|preference
operator|.
name|MinMaxPreferenceCombination
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamDistributionConstraint
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamPlacement
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamRoomPlacement
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ExamAssignment
extends|extends
name|ExamInfo
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
name|SimpleDateFormat
name|sDateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE MM/dd"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DecimalFormat
name|s2Z
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"00"
argument_list|)
decl_stmt|;
specifier|protected
name|Long
name|iPeriodId
init|=
literal|null
decl_stmt|;
specifier|protected
name|TreeSet
argument_list|<
name|ExamRoomInfo
argument_list|>
name|iRooms
init|=
literal|null
decl_stmt|;
specifier|protected
name|String
name|iPeriodPref
init|=
literal|null
decl_stmt|;
specifier|protected
name|int
name|iPeriodIdx
init|=
operator|-
literal|1
decl_stmt|;
specifier|protected
specifier|transient
name|ExamPeriod
name|iPeriod
init|=
literal|null
decl_stmt|;
specifier|protected
name|ExamInfo
name|iExam
init|=
literal|null
decl_stmt|;
specifier|protected
name|String
name|iDistPref
init|=
literal|null
decl_stmt|;
specifier|protected
name|int
name|iNrDirectConflicts
init|=
literal|0
decl_stmt|;
specifier|protected
name|int
name|iNrMoreThanTwoADayConflicts
init|=
literal|0
decl_stmt|;
specifier|protected
name|int
name|iNrBackToBackConflicts
init|=
literal|0
decl_stmt|;
specifier|protected
name|int
name|iNrDistanceBackToBackConflicts
init|=
literal|0
decl_stmt|;
specifier|protected
name|int
name|iPeriodPenalty
init|=
literal|0
decl_stmt|;
specifier|protected
name|int
name|iRoomSizePenalty
init|=
literal|0
decl_stmt|;
specifier|protected
name|int
name|iRoomSplitPenalty
init|=
literal|0
decl_stmt|;
specifier|protected
name|int
name|iRotationPenalty
init|=
literal|0
decl_stmt|;
specifier|protected
name|int
name|iRoomPenalty
init|=
literal|0
decl_stmt|;
specifier|protected
name|int
name|iNrInstructorDirectConflicts
init|=
literal|0
decl_stmt|;
specifier|protected
name|int
name|iNrInstructorMoreThanTwoADayConflicts
init|=
literal|0
decl_stmt|;
specifier|protected
name|int
name|iNrInstructorBackToBackConflicts
init|=
literal|0
decl_stmt|;
specifier|protected
name|int
name|iNrInstructorDistanceBackToBackConflicts
init|=
literal|0
decl_stmt|;
specifier|protected
name|double
name|iValue
init|=
literal|0
decl_stmt|;
specifier|public
name|ExamAssignment
parameter_list|(
name|ExamPlacement
name|placement
parameter_list|)
block|{
name|this
argument_list|(
operator|(
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|Exam
operator|)
name|placement
operator|.
name|variable
argument_list|()
argument_list|,
name|placement
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ExamAssignment
parameter_list|(
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|Exam
name|exam
parameter_list|,
name|ExamPlacement
name|placement
parameter_list|)
block|{
name|super
argument_list|(
name|exam
argument_list|)
expr_stmt|;
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
block|{
name|iNrDirectConflicts
operator|=
name|placement
operator|.
name|getNrDirectConflicts
argument_list|()
expr_stmt|;
name|iNrMoreThanTwoADayConflicts
operator|=
name|placement
operator|.
name|getNrMoreThanTwoADayConflicts
argument_list|()
expr_stmt|;
name|iNrBackToBackConflicts
operator|=
name|placement
operator|.
name|getNrBackToBackConflicts
argument_list|()
expr_stmt|;
name|iNrDistanceBackToBackConflicts
operator|=
name|placement
operator|.
name|getNrDistanceBackToBackConflicts
argument_list|()
expr_stmt|;
name|iPeriodPenalty
operator|=
name|placement
operator|.
name|getPeriodPenalty
argument_list|()
expr_stmt|;
name|iRoomSizePenalty
operator|=
name|placement
operator|.
name|getRoomSizePenalty
argument_list|()
expr_stmt|;
name|iRoomSplitPenalty
operator|=
name|placement
operator|.
name|getRoomSplitPenalty
argument_list|()
expr_stmt|;
name|iRotationPenalty
operator|=
name|placement
operator|.
name|getRotationPenalty
argument_list|()
expr_stmt|;
name|iRoomPenalty
operator|=
name|placement
operator|.
name|getRoomPenalty
argument_list|()
expr_stmt|;
name|iNrInstructorDirectConflicts
operator|=
name|placement
operator|.
name|getNrInstructorDirectConflicts
argument_list|()
expr_stmt|;
name|iNrInstructorMoreThanTwoADayConflicts
operator|=
name|placement
operator|.
name|getNrInstructorMoreThanTwoADayConflicts
argument_list|()
expr_stmt|;
name|iNrInstructorBackToBackConflicts
operator|=
name|placement
operator|.
name|getNrInstructorBackToBackConflicts
argument_list|()
expr_stmt|;
name|iNrInstructorDistanceBackToBackConflicts
operator|=
name|placement
operator|.
name|getNrInstructorDistanceBackToBackConflicts
argument_list|()
expr_stmt|;
name|iValue
operator|=
name|placement
operator|.
name|toDouble
argument_list|()
expr_stmt|;
name|iPeriodId
operator|=
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|getId
argument_list|()
expr_stmt|;
name|iPeriodIdx
operator|=
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|getIndex
argument_list|()
expr_stmt|;
name|iRooms
operator|=
operator|new
name|TreeSet
argument_list|<
name|ExamRoomInfo
argument_list|>
argument_list|()
expr_stmt|;
name|iPeriodPref
operator|=
operator|(
name|exam
operator|.
name|getPeriodPlacements
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
name|PreferenceLevel
operator|.
name|sRequired
else|:
name|PreferenceLevel
operator|.
name|int2prolog
argument_list|(
name|placement
operator|.
name|getPeriodPenalty
argument_list|()
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
name|placement
operator|.
name|getRoomPlacements
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|boolean
name|reqRoom
init|=
name|placement
operator|.
name|getRoomPlacements
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|exam
operator|.
name|getRoomPlacements
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|placement
operator|.
name|getRoomPlacements
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamRoomPlacement
name|room
init|=
operator|(
name|ExamRoomPlacement
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|iRooms
operator|.
name|add
argument_list|(
operator|new
name|ExamRoomInfo
argument_list|(
name|room
operator|.
name|getRoom
argument_list|()
argument_list|,
operator|(
name|reqRoom
condition|?
name|PreferenceLevel
operator|.
name|sIntLevelRequired
else|:
name|room
operator|.
name|getPenalty
argument_list|(
name|placement
operator|.
name|getPeriod
argument_list|()
argument_list|)
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|MinMaxPreferenceCombination
name|pc
init|=
operator|new
name|MinMaxPreferenceCombination
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
operator|(
operator|(
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|Exam
operator|)
name|placement
operator|.
name|variable
argument_list|()
operator|)
operator|.
name|getDistributionConstraints
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamDistributionConstraint
name|dc
init|=
operator|(
name|ExamDistributionConstraint
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|dc
operator|.
name|isHard
argument_list|()
operator|||
name|dc
operator|.
name|isSatisfied
argument_list|()
condition|)
continue|continue;
name|pc
operator|.
name|addPreferenceInt
argument_list|(
name|dc
operator|.
name|getWeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iDistPref
operator|=
name|pc
operator|.
name|getPreferenceProlog
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|ExamAssignment
parameter_list|(
name|Exam
name|exam
parameter_list|)
block|{
name|super
argument_list|(
name|exam
argument_list|)
expr_stmt|;
if|if
condition|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|iPeriod
operator|=
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
expr_stmt|;
name|iPeriodId
operator|=
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iRooms
operator|=
operator|new
name|TreeSet
argument_list|<
name|ExamRoomInfo
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exam
operator|.
name|getAssignedRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|iRooms
operator|.
name|add
argument_list|(
operator|new
name|ExamRoomInfo
argument_list|(
name|location
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exam
operator|.
name|getAssignedPreference
argument_list|()
operator|!=
literal|null
operator|&&
name|exam
operator|.
name|getAssignedPreference
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|StringTokenizer
name|stk
init|=
operator|new
name|StringTokenizer
argument_list|(
name|exam
operator|.
name|getAssignedPreference
argument_list|()
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|)
name|iPeriodPref
operator|=
name|stk
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|)
name|iDistPref
operator|=
name|stk
operator|.
name|nextToken
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iRooms
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
operator|&&
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|ExamRoomInfo
name|room
init|=
operator|(
name|ExamRoomInfo
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|room
operator|.
name|setPreference
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|stk
operator|.
name|nextToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|ExamAssignment
parameter_list|(
name|Exam
name|exam
parameter_list|,
name|ExamPeriod
name|period
parameter_list|,
name|Collection
argument_list|<
name|ExamRoomInfo
argument_list|>
name|rooms
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|exam
argument_list|)
expr_stmt|;
if|if
condition|(
name|period
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|period
operator|.
name|getLength
argument_list|()
operator|<
name|exam
operator|.
name|getLength
argument_list|()
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Given period is two short."
argument_list|)
throw|;
name|String
name|iPeriodPref
init|=
name|period
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
decl_stmt|;
name|boolean
name|reqPeriod
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exam
operator|.
name|getPreferences
argument_list|(
name|ExamPeriodPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriodPref
name|periodPref
init|=
operator|(
name|ExamPeriodPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|periodPref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
name|reqPeriod
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|periodPref
operator|.
name|getExamPeriod
argument_list|()
operator|.
name|equals
argument_list|(
name|period
argument_list|)
condition|)
name|iPeriodPref
operator|=
name|periodPref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|iPeriodPref
argument_list|)
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Given period is prohibited."
argument_list|)
throw|;
if|if
condition|(
name|reqPeriod
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|iPeriodPref
argument_list|)
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Given period is not required."
argument_list|)
throw|;
name|iPeriod
operator|=
name|period
expr_stmt|;
name|iPeriodId
operator|=
name|period
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iRooms
operator|=
operator|new
name|TreeSet
argument_list|()
expr_stmt|;
if|if
condition|(
name|rooms
operator|!=
literal|null
condition|)
name|iRooms
operator|.
name|addAll
argument_list|(
name|rooms
argument_list|)
expr_stmt|;
comment|//TODO: distribution preference
block|}
specifier|public
name|String
name|getAssignedPreferenceString
parameter_list|()
block|{
name|String
name|ret
init|=
name|getPeriodPref
argument_list|()
operator|+
literal|":"
operator|+
name|getDistributionPref
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamRoomInfo
name|room
range|:
name|getRooms
argument_list|()
control|)
block|{
name|ret
operator|+=
literal|":"
operator|+
name|room
operator|.
name|getPreference
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|Long
name|getPeriodId
parameter_list|()
block|{
return|return
name|iPeriodId
return|;
block|}
specifier|public
name|ExamPeriod
name|getPeriod
parameter_list|()
block|{
if|if
condition|(
name|iPeriod
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|getPeriodId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|iPeriod
operator|=
operator|new
name|ExamPeriodDAO
argument_list|()
operator|.
name|get
argument_list|(
name|getPeriodId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|iPeriod
return|;
block|}
specifier|public
name|ExamPeriod
name|getPeriod
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
return|return
operator|new
name|ExamPeriodDAO
argument_list|()
operator|.
name|get
argument_list|(
name|getPeriodId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
return|;
block|}
specifier|public
name|Comparable
name|getPeriodOrd
parameter_list|()
block|{
if|if
condition|(
name|iPeriodIdx
operator|>=
literal|0
condition|)
return|return
operator|new
name|Integer
argument_list|(
name|iPeriodIdx
argument_list|)
return|;
else|else
return|return
name|iPeriod
return|;
block|}
specifier|public
name|String
name|getPeriodName
parameter_list|()
block|{
if|if
condition|(
name|getPeriod
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|""
return|;
name|int
name|min
init|=
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
decl_stmt|;
name|int
name|startHour
init|=
name|min
operator|/
literal|60
decl_stmt|;
name|int
name|startMin
init|=
name|min
operator|%
literal|60
decl_stmt|;
name|min
operator|+=
name|getLength
argument_list|()
expr_stmt|;
name|int
name|endHour
init|=
name|min
operator|/
literal|60
decl_stmt|;
name|int
name|endMin
init|=
name|min
operator|%
literal|60
decl_stmt|;
return|return
name|sDateFormat
operator|.
name|format
argument_list|(
name|getPeriod
argument_list|()
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|startHour
operator|>
literal|12
condition|?
name|startHour
operator|-
literal|12
else|:
name|startHour
operator|)
operator|+
literal|":"
operator|+
operator|(
name|startMin
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|startMin
operator|+
operator|(
name|startHour
operator|>=
literal|12
condition|?
literal|"p"
else|:
literal|"a"
operator|)
operator|+
literal|" - "
operator|+
operator|(
name|endHour
operator|>
literal|12
condition|?
name|endHour
operator|-
literal|12
else|:
name|endHour
operator|)
operator|+
literal|":"
operator|+
operator|(
name|endMin
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|endMin
operator|+
operator|(
name|endHour
operator|>=
literal|12
condition|?
literal|"p"
else|:
literal|"a"
operator|)
return|;
block|}
specifier|public
name|String
name|getPeriodNameFixedLength
parameter_list|()
block|{
if|if
condition|(
name|getPeriod
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|""
return|;
name|int
name|min
init|=
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
decl_stmt|;
name|int
name|startHour
init|=
name|min
operator|/
literal|60
decl_stmt|;
name|int
name|startMin
init|=
name|min
operator|%
literal|60
decl_stmt|;
name|min
operator|+=
name|getLength
argument_list|()
expr_stmt|;
name|int
name|endHour
init|=
name|min
operator|/
literal|60
decl_stmt|;
name|int
name|endMin
init|=
name|min
operator|%
literal|60
decl_stmt|;
return|return
name|sDateFormat
operator|.
name|format
argument_list|(
name|getPeriod
argument_list|()
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|s2Z
operator|.
name|format
argument_list|(
name|startHour
operator|>
literal|12
condition|?
name|startHour
operator|-
literal|12
else|:
name|startHour
argument_list|)
operator|+
literal|":"
operator|+
name|s2Z
operator|.
name|format
argument_list|(
name|startMin
argument_list|)
operator|+
operator|(
name|startHour
operator|>=
literal|12
condition|?
literal|"p"
else|:
literal|"a"
operator|)
operator|+
literal|" - "
operator|+
name|s2Z
operator|.
name|format
argument_list|(
name|endHour
operator|>
literal|12
condition|?
name|endHour
operator|-
literal|12
else|:
name|endHour
argument_list|)
operator|+
literal|":"
operator|+
name|s2Z
operator|.
name|format
argument_list|(
name|endMin
argument_list|)
operator|+
operator|(
name|endHour
operator|>=
literal|12
condition|?
literal|"p"
else|:
literal|"a"
operator|)
return|;
block|}
specifier|public
name|String
name|getPeriodAbbreviation
parameter_list|()
block|{
name|ExamPeriod
name|period
init|=
name|getPeriod
argument_list|()
decl_stmt|;
return|return
name|period
operator|==
literal|null
condition|?
literal|""
else|:
name|period
operator|.
name|getAbbreviation
argument_list|()
return|;
block|}
specifier|public
name|String
name|getPeriodNameWithPref
parameter_list|()
block|{
if|if
condition|(
name|iPeriodPref
operator|==
literal|null
operator|||
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|iPeriodPref
argument_list|)
condition|)
return|return
name|getPeriodName
argument_list|()
return|;
return|return
literal|"<span title='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2string
argument_list|(
name|iPeriodPref
argument_list|)
operator|+
literal|" "
operator|+
name|getPeriodName
argument_list|()
operator|+
literal|"' style='color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|iPeriodPref
argument_list|)
operator|+
literal|";'>"
operator|+
name|getPeriodName
argument_list|()
operator|+
literal|"</span>"
return|;
block|}
specifier|public
name|String
name|getPeriodAbbreviationWithPref
parameter_list|()
block|{
if|if
condition|(
name|iPeriodPref
operator|==
literal|null
operator|||
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|iPeriodPref
argument_list|)
condition|)
return|return
name|getPeriodAbbreviation
argument_list|()
return|;
return|return
literal|"<span title='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2string
argument_list|(
name|iPeriodPref
argument_list|)
operator|+
literal|" "
operator|+
name|getPeriodName
argument_list|()
operator|+
literal|"' style='color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|iPeriodPref
argument_list|)
operator|+
literal|";'>"
operator|+
name|getPeriodAbbreviation
argument_list|()
operator|+
literal|"</span>"
return|;
block|}
specifier|public
name|String
name|getDate
parameter_list|(
name|boolean
name|pref
parameter_list|)
block|{
if|if
condition|(
name|getPeriod
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|""
return|;
if|if
condition|(
operator|!
name|pref
operator|||
name|iPeriodPref
operator|==
literal|null
operator|||
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|iPeriodPref
argument_list|)
condition|)
return|return
name|sDateFormat
operator|.
name|format
argument_list|(
name|getPeriod
argument_list|()
operator|.
name|getStartDate
argument_list|()
argument_list|)
return|;
return|return
literal|"<span title='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2string
argument_list|(
name|iPeriodPref
argument_list|)
operator|+
literal|" "
operator|+
name|getPeriodName
argument_list|()
operator|+
literal|"' style='color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|iPeriodPref
argument_list|)
operator|+
literal|";'>"
operator|+
name|sDateFormat
operator|.
name|format
argument_list|(
name|getPeriod
argument_list|()
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|+
literal|"</span>"
return|;
block|}
specifier|public
name|String
name|getTime
parameter_list|(
name|boolean
name|pref
parameter_list|)
block|{
if|if
condition|(
name|getPeriod
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|""
return|;
name|int
name|min
init|=
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
decl_stmt|;
name|int
name|startHour
init|=
name|min
operator|/
literal|60
decl_stmt|;
name|int
name|startMin
init|=
name|min
operator|%
literal|60
decl_stmt|;
name|min
operator|+=
name|getLength
argument_list|()
expr_stmt|;
name|int
name|endHour
init|=
name|min
operator|/
literal|60
decl_stmt|;
name|int
name|endMin
init|=
name|min
operator|%
literal|60
decl_stmt|;
if|if
condition|(
operator|!
name|pref
operator|||
name|iPeriodPref
operator|==
literal|null
operator|||
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|iPeriodPref
argument_list|)
condition|)
return|return
operator|(
name|startHour
operator|>
literal|12
condition|?
name|startHour
operator|-
literal|12
else|:
name|startHour
operator|)
operator|+
literal|":"
operator|+
operator|(
name|startMin
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|startMin
operator|+
operator|(
name|startHour
operator|>=
literal|12
condition|?
literal|"p"
else|:
literal|"a"
operator|)
operator|+
literal|" - "
operator|+
operator|(
name|endHour
operator|>
literal|12
condition|?
name|endHour
operator|-
literal|12
else|:
name|endHour
operator|)
operator|+
literal|":"
operator|+
operator|(
name|endMin
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|endMin
operator|+
operator|(
name|endHour
operator|>=
literal|12
condition|?
literal|"p"
else|:
literal|"a"
operator|)
return|;
return|return
literal|"<span title='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2string
argument_list|(
name|iPeriodPref
argument_list|)
operator|+
literal|" "
operator|+
name|getPeriodName
argument_list|()
operator|+
literal|"' style='color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|iPeriodPref
argument_list|)
operator|+
literal|";'>"
operator|+
operator|(
name|startHour
operator|>
literal|12
condition|?
name|startHour
operator|-
literal|12
else|:
name|startHour
operator|)
operator|+
literal|":"
operator|+
operator|(
name|startMin
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|startMin
operator|+
operator|(
name|startHour
operator|>=
literal|12
condition|?
literal|"p"
else|:
literal|"a"
operator|)
operator|+
literal|" - "
operator|+
operator|(
name|endHour
operator|>
literal|12
condition|?
name|endHour
operator|-
literal|12
else|:
name|endHour
operator|)
operator|+
literal|":"
operator|+
operator|(
name|endMin
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|endMin
operator|+
operator|(
name|endHour
operator|>=
literal|12
condition|?
literal|"p"
else|:
literal|"a"
operator|)
operator|+
literal|"</span>"
return|;
block|}
specifier|public
name|String
name|getTimeFixedLength
parameter_list|()
block|{
if|if
condition|(
name|getPeriod
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|""
return|;
name|int
name|min
init|=
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
decl_stmt|;
name|int
name|startHour
init|=
name|min
operator|/
literal|60
decl_stmt|;
name|int
name|startMin
init|=
name|min
operator|%
literal|60
decl_stmt|;
name|min
operator|+=
name|getLength
argument_list|()
expr_stmt|;
name|int
name|endHour
init|=
name|min
operator|/
literal|60
decl_stmt|;
name|int
name|endMin
init|=
name|min
operator|%
literal|60
decl_stmt|;
return|return
name|s2Z
operator|.
name|format
argument_list|(
name|startHour
operator|>
literal|12
condition|?
name|startHour
operator|-
literal|12
else|:
name|startHour
argument_list|)
operator|+
literal|":"
operator|+
name|s2Z
operator|.
name|format
argument_list|(
name|startMin
argument_list|)
operator|+
operator|(
name|startHour
operator|>=
literal|12
condition|?
literal|"p"
else|:
literal|"a"
operator|)
operator|+
literal|" - "
operator|+
name|s2Z
operator|.
name|format
argument_list|(
name|endHour
operator|>
literal|12
condition|?
name|endHour
operator|-
literal|12
else|:
name|endHour
argument_list|)
operator|+
literal|":"
operator|+
name|s2Z
operator|.
name|format
argument_list|(
name|endMin
argument_list|)
operator|+
operator|(
name|endHour
operator|>=
literal|12
condition|?
literal|"p"
else|:
literal|"a"
operator|)
return|;
block|}
specifier|public
name|TreeSet
argument_list|<
name|ExamRoomInfo
argument_list|>
name|getRooms
parameter_list|()
block|{
return|return
name|iRooms
return|;
block|}
specifier|public
name|Vector
argument_list|<
name|Long
argument_list|>
name|getRoomIds
parameter_list|()
block|{
name|Vector
argument_list|<
name|Long
argument_list|>
name|roomIds
init|=
operator|new
name|Vector
argument_list|(
name|iRooms
operator|==
literal|null
condition|?
literal|0
else|:
name|iRooms
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|iRooms
operator|!=
literal|null
condition|)
for|for
control|(
name|ExamRoomInfo
name|room
range|:
name|iRooms
control|)
name|roomIds
operator|.
name|add
argument_list|(
name|room
operator|.
name|getLocationId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|roomIds
return|;
block|}
specifier|public
name|boolean
name|hasRoom
parameter_list|(
name|Long
name|locationId
parameter_list|)
block|{
if|if
condition|(
name|iRooms
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|ExamRoomInfo
name|room
range|:
name|getRooms
argument_list|()
control|)
if|if
condition|(
name|room
operator|.
name|getLocationId
argument_list|()
operator|.
name|equals
argument_list|(
name|locationId
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|String
name|getRoomsName
parameter_list|(
name|String
name|delim
parameter_list|)
block|{
return|return
name|getRoomsName
argument_list|(
literal|false
argument_list|,
name|delim
argument_list|)
return|;
block|}
specifier|public
name|String
name|getRoomsNameWithPref
parameter_list|(
name|String
name|delim
parameter_list|)
block|{
return|return
name|getRoomsName
argument_list|(
literal|true
argument_list|,
name|delim
argument_list|)
return|;
block|}
specifier|public
name|String
name|getRoomsName
parameter_list|(
name|boolean
name|pref
parameter_list|,
name|String
name|delim
parameter_list|)
block|{
if|if
condition|(
name|getPeriod
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|""
return|;
name|String
name|rooms
init|=
literal|""
decl_stmt|;
for|for
control|(
name|ExamRoomInfo
name|room
range|:
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
name|rooms
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|rooms
operator|+=
name|delim
expr_stmt|;
name|rooms
operator|+=
operator|(
name|pref
condition|?
name|room
operator|.
name|toString
argument_list|()
else|:
name|room
operator|.
name|getName
argument_list|()
operator|)
expr_stmt|;
block|}
return|return
name|rooms
return|;
block|}
specifier|public
name|String
name|getRoomsCapacity
parameter_list|(
name|boolean
name|pref
parameter_list|,
name|String
name|delim
parameter_list|)
block|{
if|if
condition|(
name|getPeriod
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|""
return|;
name|String
name|rooms
init|=
literal|""
decl_stmt|;
for|for
control|(
name|ExamRoomInfo
name|room
range|:
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
name|rooms
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|rooms
operator|+=
name|delim
expr_stmt|;
if|if
condition|(
operator|!
name|pref
condition|)
name|rooms
operator|+=
name|room
operator|.
name|getCapacity
argument_list|()
expr_stmt|;
else|else
name|rooms
operator|+=
literal|"<span style='color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|PreferenceLevel
operator|.
name|int2prolog
argument_list|(
name|room
operator|.
name|getPreference
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|";'>"
operator|+
name|room
operator|.
name|getCapacity
argument_list|()
operator|+
literal|"</span>"
expr_stmt|;
block|}
return|return
name|rooms
return|;
block|}
specifier|public
name|int
name|getRoomsCapacity
parameter_list|()
block|{
if|if
condition|(
name|getPeriod
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|0
return|;
name|int
name|cap
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ExamRoomInfo
name|room
range|:
name|getRooms
argument_list|()
control|)
name|cap
operator|+=
name|room
operator|.
name|getCapacity
argument_list|()
expr_stmt|;
return|return
name|cap
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getExamName
argument_list|()
operator|+
literal|" "
operator|+
name|getPeriodAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|getRoomsName
argument_list|(
literal|","
argument_list|)
return|;
block|}
specifier|public
name|String
name|getPeriodPref
parameter_list|()
block|{
return|return
operator|(
name|iPeriodPref
operator|==
literal|null
condition|?
name|PreferenceLevel
operator|.
name|sNeutral
else|:
name|iPeriodPref
operator|)
return|;
block|}
specifier|public
name|void
name|setPeriodPref
parameter_list|(
name|String
name|periodPref
parameter_list|)
block|{
name|iPeriodPref
operator|=
name|periodPref
expr_stmt|;
block|}
specifier|public
name|String
name|getDistributionPref
parameter_list|()
block|{
return|return
operator|(
name|iDistPref
operator|==
literal|null
condition|?
name|PreferenceLevel
operator|.
name|sNeutral
else|:
name|iDistPref
operator|)
return|;
block|}
specifier|public
name|String
name|getRoomPref
parameter_list|(
name|Long
name|locationId
parameter_list|)
block|{
for|for
control|(
name|ExamRoomInfo
name|room
range|:
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
name|room
operator|.
name|getLocationId
argument_list|()
operator|.
name|equals
argument_list|(
name|locationId
argument_list|)
condition|)
return|return
name|PreferenceLevel
operator|.
name|int2prolog
argument_list|(
name|room
operator|.
name|getPreference
argument_list|()
argument_list|)
return|;
block|}
return|return
name|PreferenceLevel
operator|.
name|sNeutral
return|;
block|}
specifier|public
name|String
name|getRoomPref
parameter_list|()
block|{
name|MinMaxPreferenceCombination
name|c
init|=
operator|new
name|MinMaxPreferenceCombination
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamRoomInfo
name|room
init|=
operator|(
name|ExamRoomInfo
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|c
operator|.
name|addPreferenceInt
argument_list|(
name|room
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|c
operator|.
name|getPreferenceProlog
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isValid
parameter_list|()
block|{
if|if
condition|(
name|getMaxRooms
argument_list|()
operator|>
literal|0
operator|&&
operator|(
name|getRooms
argument_list|()
operator|==
literal|null
operator|||
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|getRoomSize
parameter_list|()
block|{
if|if
condition|(
name|getRooms
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|0
return|;
name|int
name|roomSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ExamRoomInfo
name|room
range|:
name|getRooms
argument_list|()
control|)
name|roomSize
operator|+=
name|room
operator|.
name|getCapacity
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|roomSize
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|ExamInfo
name|info
parameter_list|)
block|{
name|int
name|cmp
init|=
name|getExamName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|info
operator|.
name|getExamName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|ExamPeriod
name|otherPeriod
init|=
operator|(
name|info
operator|instanceof
name|ExamAssignment
condition|?
operator|(
operator|(
name|ExamAssignment
operator|)
name|info
operator|)
operator|.
name|getPeriod
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|getPeriod
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|otherPeriod
operator|!=
literal|null
condition|)
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
if|if
condition|(
name|otherPeriod
operator|==
literal|null
condition|)
return|return
literal|1
return|;
name|cmp
operator|=
name|getPeriod
argument_list|()
operator|.
name|compareTo
argument_list|(
name|otherPeriod
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
return|return
name|getExamId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|info
operator|.
name|getExamId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|getPlacementNrDirectConflicts
parameter_list|()
block|{
return|return
name|iNrDirectConflicts
return|;
block|}
specifier|public
name|int
name|getPlacementNrMoreThanTwoADayConflicts
parameter_list|()
block|{
return|return
name|iNrMoreThanTwoADayConflicts
return|;
block|}
specifier|public
name|int
name|getPlacementNrBackToBackConflicts
parameter_list|()
block|{
return|return
name|iNrBackToBackConflicts
return|;
block|}
specifier|public
name|int
name|getPlacementNrDistanceBackToBackConflicts
parameter_list|()
block|{
return|return
name|iNrDistanceBackToBackConflicts
return|;
block|}
specifier|public
name|int
name|getPlacementPeriodPenalty
parameter_list|()
block|{
return|return
name|iPeriodPenalty
return|;
block|}
specifier|public
name|int
name|getPlacementRoomSizePenalty
parameter_list|()
block|{
return|return
name|iRoomSizePenalty
return|;
block|}
specifier|public
name|int
name|getPlacementRoomSplitPenalty
parameter_list|()
block|{
return|return
name|iRoomSplitPenalty
return|;
block|}
specifier|public
name|int
name|getPlacementRotationPenalty
parameter_list|()
block|{
return|return
name|iRotationPenalty
return|;
block|}
specifier|public
name|int
name|getPlacementRoomPenalty
parameter_list|()
block|{
return|return
name|iRoomPenalty
return|;
block|}
specifier|public
name|int
name|getPlacementNrInstructorDirectConflicts
parameter_list|()
block|{
return|return
name|iNrInstructorDirectConflicts
return|;
block|}
specifier|public
name|int
name|getPlacementNrInstructorMoreThanTwoADayConflicts
parameter_list|()
block|{
return|return
name|iNrInstructorMoreThanTwoADayConflicts
return|;
block|}
specifier|public
name|int
name|getPlacementNrInstructorBackToBackConflicts
parameter_list|()
block|{
return|return
name|iNrInstructorBackToBackConflicts
return|;
block|}
specifier|public
name|int
name|getPlacementNrInstructorDistanceBackToBackConflicts
parameter_list|()
block|{
return|return
name|iNrInstructorDistanceBackToBackConflicts
return|;
block|}
specifier|public
name|double
name|getPlacementValue
parameter_list|()
block|{
return|return
name|iValue
return|;
block|}
specifier|public
name|int
name|getNrRooms
parameter_list|()
block|{
return|return
operator|(
name|iRooms
operator|==
literal|null
condition|?
literal|0
else|:
name|iRooms
operator|.
name|size
argument_list|()
operator|)
return|;
block|}
specifier|public
name|boolean
name|assignmentEquals
parameter_list|(
name|ExamAssignment
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getExamId
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getExamId
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
name|ToolBox
operator|.
name|equals
argument_list|(
name|getPeriodId
argument_list|()
argument_list|,
name|other
operator|.
name|getPeriodId
argument_list|()
argument_list|)
operator|&&
name|ToolBox
operator|.
name|equals
argument_list|(
name|getRooms
argument_list|()
argument_list|,
name|other
operator|.
name|getRooms
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

