begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameterDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ExamModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ExamResourceUnavailability
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamDistributionConstraint
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamInstructor
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamPlacement
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamStudent
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ExamAssignmentInfo
extends|extends
name|ExamAssignment
implements|implements
name|Serializable
block|{
specifier|private
name|TreeSet
name|iDirects
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
specifier|private
name|TreeSet
name|iBackToBacks
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
specifier|private
name|TreeSet
name|iMoreThanTwoADays
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
specifier|private
name|TreeSet
name|iInstructorDirects
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
specifier|private
name|TreeSet
name|iInstructorBackToBacks
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
specifier|private
name|TreeSet
name|iInstructorMoreThanTwoADays
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
specifier|private
name|TreeSet
name|iDistributions
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
specifier|public
name|ExamAssignmentInfo
parameter_list|(
name|ExamPlacement
name|placement
parameter_list|)
block|{
name|this
argument_list|(
operator|(
name|Exam
operator|)
name|placement
operator|.
name|variable
argument_list|()
argument_list|,
name|placement
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ExamAssignmentInfo
parameter_list|(
name|Exam
name|exam
parameter_list|,
name|ExamPlacement
name|placement
parameter_list|)
block|{
name|super
argument_list|(
name|exam
argument_list|,
name|placement
argument_list|)
expr_stmt|;
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
block|{
name|ExamModel
name|model
init|=
operator|(
name|ExamModel
operator|)
name|exam
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|Hashtable
name|directs
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|exam
operator|.
name|getStudents
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamStudent
name|student
init|=
operator|(
name|ExamStudent
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|student
operator|.
name|getExams
argument_list|(
name|placement
operator|.
name|getPeriod
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|other
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|equals
argument_list|(
name|exam
argument_list|)
condition|)
continue|continue;
name|DirectConflict
name|dc
init|=
operator|(
name|DirectConflict
operator|)
name|directs
operator|.
name|get
argument_list|(
name|other
argument_list|)
decl_stmt|;
if|if
condition|(
name|dc
operator|==
literal|null
condition|)
block|{
name|dc
operator|=
operator|new
name|DirectConflict
argument_list|(
operator|new
name|ExamAssignment
argument_list|(
operator|(
name|ExamPlacement
operator|)
name|other
operator|.
name|getAssignment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|directs
operator|.
name|put
argument_list|(
name|other
argument_list|,
name|dc
argument_list|)
expr_stmt|;
block|}
else|else
name|dc
operator|.
name|incNrStudents
argument_list|()
expr_stmt|;
name|dc
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|iDirects
operator|.
name|addAll
argument_list|(
name|directs
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|btbDist
init|=
name|model
operator|.
name|getBackToBackDistance
argument_list|()
decl_stmt|;
name|Hashtable
name|backToBacks
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|exam
operator|.
name|getStudents
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamStudent
name|student
init|=
operator|(
name|ExamStudent
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|prev
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|model
operator|.
name|isDayBreakBackToBack
argument_list|()
operator|||
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|prev
argument_list|()
operator|.
name|getDay
argument_list|()
operator|==
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|getDay
argument_list|()
condition|)
block|{
name|Set
name|exams
init|=
name|student
operator|.
name|getExams
argument_list|(
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|prev
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|other
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|double
name|distance
init|=
name|placement
operator|.
name|getDistance
argument_list|(
operator|(
name|ExamPlacement
operator|)
name|other
operator|.
name|getAssignment
argument_list|()
argument_list|)
decl_stmt|;
name|BackToBackConflict
name|btb
init|=
operator|(
name|BackToBackConflict
operator|)
name|backToBacks
operator|.
name|get
argument_list|(
name|other
argument_list|)
decl_stmt|;
if|if
condition|(
name|btb
operator|==
literal|null
condition|)
block|{
name|btb
operator|=
operator|new
name|BackToBackConflict
argument_list|(
operator|new
name|ExamAssignment
argument_list|(
operator|(
name|ExamPlacement
operator|)
name|other
operator|.
name|getAssignment
argument_list|()
argument_list|)
argument_list|,
operator|(
name|btbDist
operator|<
literal|0
condition|?
literal|false
else|:
name|distance
operator|>
name|btbDist
operator|)
argument_list|,
name|distance
operator|/
literal|5.0
argument_list|)
expr_stmt|;
name|backToBacks
operator|.
name|put
argument_list|(
name|other
argument_list|,
name|btb
argument_list|)
expr_stmt|;
block|}
else|else
name|btb
operator|.
name|incNrStudents
argument_list|()
expr_stmt|;
name|btb
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|model
operator|.
name|isDayBreakBackToBack
argument_list|()
operator|||
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getDay
argument_list|()
operator|==
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|getDay
argument_list|()
condition|)
block|{
name|Set
name|exams
init|=
name|student
operator|.
name|getExams
argument_list|(
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|other
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|BackToBackConflict
name|btb
init|=
operator|(
name|BackToBackConflict
operator|)
name|backToBacks
operator|.
name|get
argument_list|(
name|other
argument_list|)
decl_stmt|;
name|double
name|distance
init|=
name|placement
operator|.
name|getDistance
argument_list|(
operator|(
name|ExamPlacement
operator|)
name|other
operator|.
name|getAssignment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|btb
operator|==
literal|null
condition|)
block|{
name|btb
operator|=
operator|new
name|BackToBackConflict
argument_list|(
operator|new
name|ExamAssignment
argument_list|(
operator|(
name|ExamPlacement
operator|)
name|other
operator|.
name|getAssignment
argument_list|()
argument_list|)
argument_list|,
operator|(
name|btbDist
operator|<
literal|0
condition|?
literal|false
else|:
name|distance
operator|>
name|btbDist
operator|)
argument_list|,
name|distance
argument_list|)
expr_stmt|;
name|backToBacks
operator|.
name|put
argument_list|(
name|other
argument_list|,
name|btb
argument_list|)
expr_stmt|;
block|}
else|else
name|btb
operator|.
name|incNrStudents
argument_list|()
expr_stmt|;
name|btb
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|iBackToBacks
operator|.
name|addAll
argument_list|(
name|backToBacks
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|Hashtable
name|m2ds
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|exam
operator|.
name|getStudents
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamStudent
name|student
init|=
operator|(
name|ExamStudent
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Set
name|exams
init|=
name|student
operator|.
name|getExamsADay
argument_list|(
name|placement
operator|.
name|getPeriod
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|nrExams
init|=
name|exams
operator|.
name|size
argument_list|()
operator|+
operator|(
name|exams
operator|.
name|contains
argument_list|(
name|exam
argument_list|)
condition|?
literal|0
else|:
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|nrExams
operator|<=
literal|2
condition|)
continue|continue;
name|TreeSet
name|examIds
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|TreeSet
name|otherExams
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|other
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|equals
argument_list|(
name|exam
argument_list|)
condition|)
continue|continue;
name|examIds
operator|.
name|add
argument_list|(
name|other
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|otherExams
operator|.
name|add
argument_list|(
operator|new
name|ExamAssignment
argument_list|(
operator|(
name|ExamPlacement
operator|)
name|other
operator|.
name|getAssignment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MoreThanTwoADayConflict
name|m2d
init|=
operator|(
name|MoreThanTwoADayConflict
operator|)
name|m2ds
operator|.
name|get
argument_list|(
name|examIds
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m2d
operator|==
literal|null
condition|)
block|{
name|m2d
operator|=
operator|new
name|MoreThanTwoADayConflict
argument_list|(
name|otherExams
argument_list|)
expr_stmt|;
name|m2ds
operator|.
name|put
argument_list|(
name|examIds
operator|.
name|toString
argument_list|()
argument_list|,
name|m2d
argument_list|)
expr_stmt|;
block|}
else|else
name|m2d
operator|.
name|incNrStudents
argument_list|()
expr_stmt|;
name|m2d
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iMoreThanTwoADays
operator|.
name|addAll
argument_list|(
name|m2ds
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|Hashtable
name|idirects
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|exam
operator|.
name|getInstructors
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamInstructor
name|instructor
init|=
operator|(
name|ExamInstructor
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|instructor
operator|.
name|getExams
argument_list|(
name|placement
operator|.
name|getPeriod
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|other
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|equals
argument_list|(
name|exam
argument_list|)
condition|)
continue|continue;
name|DirectConflict
name|dc
init|=
operator|(
name|DirectConflict
operator|)
name|idirects
operator|.
name|get
argument_list|(
name|other
argument_list|)
decl_stmt|;
if|if
condition|(
name|dc
operator|==
literal|null
condition|)
block|{
name|dc
operator|=
operator|new
name|DirectConflict
argument_list|(
operator|new
name|ExamAssignment
argument_list|(
operator|(
name|ExamPlacement
operator|)
name|other
operator|.
name|getAssignment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|idirects
operator|.
name|put
argument_list|(
name|other
argument_list|,
name|dc
argument_list|)
expr_stmt|;
block|}
else|else
name|dc
operator|.
name|incNrStudents
argument_list|()
expr_stmt|;
name|dc
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|instructor
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|iInstructorDirects
operator|.
name|addAll
argument_list|(
name|idirects
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|Hashtable
name|ibackToBacks
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|exam
operator|.
name|getInstructors
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamInstructor
name|instructor
init|=
operator|(
name|ExamInstructor
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|prev
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|model
operator|.
name|isDayBreakBackToBack
argument_list|()
operator|||
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|prev
argument_list|()
operator|.
name|getDay
argument_list|()
operator|==
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|getDay
argument_list|()
condition|)
block|{
name|Set
name|exams
init|=
name|instructor
operator|.
name|getExams
argument_list|(
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|prev
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|other
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|double
name|distance
init|=
name|placement
operator|.
name|getDistance
argument_list|(
operator|(
name|ExamPlacement
operator|)
name|other
operator|.
name|getAssignment
argument_list|()
argument_list|)
decl_stmt|;
name|BackToBackConflict
name|btb
init|=
operator|(
name|BackToBackConflict
operator|)
name|ibackToBacks
operator|.
name|get
argument_list|(
name|other
argument_list|)
decl_stmt|;
if|if
condition|(
name|btb
operator|==
literal|null
condition|)
block|{
name|btb
operator|=
operator|new
name|BackToBackConflict
argument_list|(
operator|new
name|ExamAssignment
argument_list|(
operator|(
name|ExamPlacement
operator|)
name|other
operator|.
name|getAssignment
argument_list|()
argument_list|)
argument_list|,
operator|(
name|btbDist
operator|<
literal|0
condition|?
literal|false
else|:
name|distance
operator|>
name|btbDist
operator|)
argument_list|,
name|distance
operator|/
literal|5.0
argument_list|)
expr_stmt|;
name|ibackToBacks
operator|.
name|put
argument_list|(
name|other
argument_list|,
name|btb
argument_list|)
expr_stmt|;
block|}
else|else
name|btb
operator|.
name|incNrStudents
argument_list|()
expr_stmt|;
name|btb
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|instructor
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|model
operator|.
name|isDayBreakBackToBack
argument_list|()
operator|||
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getDay
argument_list|()
operator|==
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|getDay
argument_list|()
condition|)
block|{
name|Set
name|exams
init|=
name|instructor
operator|.
name|getExams
argument_list|(
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|other
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|BackToBackConflict
name|btb
init|=
operator|(
name|BackToBackConflict
operator|)
name|ibackToBacks
operator|.
name|get
argument_list|(
name|other
argument_list|)
decl_stmt|;
name|double
name|distance
init|=
name|placement
operator|.
name|getDistance
argument_list|(
operator|(
name|ExamPlacement
operator|)
name|other
operator|.
name|getAssignment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|btb
operator|==
literal|null
condition|)
block|{
name|btb
operator|=
operator|new
name|BackToBackConflict
argument_list|(
operator|new
name|ExamAssignment
argument_list|(
operator|(
name|ExamPlacement
operator|)
name|other
operator|.
name|getAssignment
argument_list|()
argument_list|)
argument_list|,
operator|(
name|btbDist
operator|<
literal|0
condition|?
literal|false
else|:
name|distance
operator|>
name|btbDist
operator|)
argument_list|,
name|distance
argument_list|)
expr_stmt|;
name|ibackToBacks
operator|.
name|put
argument_list|(
name|other
argument_list|,
name|btb
argument_list|)
expr_stmt|;
block|}
else|else
name|btb
operator|.
name|incNrStudents
argument_list|()
expr_stmt|;
name|btb
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|instructor
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|iInstructorBackToBacks
operator|.
name|addAll
argument_list|(
name|ibackToBacks
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|Hashtable
name|im2ds
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|exam
operator|.
name|getInstructors
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamInstructor
name|instructor
init|=
operator|(
name|ExamInstructor
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Set
name|exams
init|=
name|instructor
operator|.
name|getExamsADay
argument_list|(
name|placement
operator|.
name|getPeriod
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|nrExams
init|=
name|exams
operator|.
name|size
argument_list|()
operator|+
operator|(
name|exams
operator|.
name|contains
argument_list|(
name|exam
argument_list|)
condition|?
literal|0
else|:
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|nrExams
operator|<=
literal|2
condition|)
continue|continue;
name|TreeSet
name|examIds
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|TreeSet
name|otherExams
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|other
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|equals
argument_list|(
name|exam
argument_list|)
condition|)
continue|continue;
name|examIds
operator|.
name|add
argument_list|(
name|other
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|otherExams
operator|.
name|add
argument_list|(
operator|new
name|ExamAssignment
argument_list|(
operator|(
name|ExamPlacement
operator|)
name|other
operator|.
name|getAssignment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MoreThanTwoADayConflict
name|m2d
init|=
operator|(
name|MoreThanTwoADayConflict
operator|)
name|im2ds
operator|.
name|get
argument_list|(
name|examIds
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m2d
operator|==
literal|null
condition|)
block|{
name|m2d
operator|=
operator|new
name|MoreThanTwoADayConflict
argument_list|(
name|otherExams
argument_list|)
expr_stmt|;
name|im2ds
operator|.
name|put
argument_list|(
name|examIds
operator|.
name|toString
argument_list|()
argument_list|,
name|m2d
argument_list|)
expr_stmt|;
block|}
else|else
name|m2d
operator|.
name|incNrStudents
argument_list|()
expr_stmt|;
name|m2d
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|instructor
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iInstructorMoreThanTwoADays
operator|.
name|addAll
argument_list|(
name|im2ds
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|computeUnavailablility
argument_list|(
name|exam
argument_list|,
name|model
operator|.
name|getUnavailabilities
argument_list|(
name|placement
operator|.
name|getPeriod
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|exam
operator|.
name|getDistributionConstraints
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamDistributionConstraint
name|dc
init|=
operator|(
name|ExamDistributionConstraint
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|dc
operator|.
name|isHard
argument_list|()
condition|)
block|{
if|if
condition|(
name|dc
operator|.
name|inConflict
argument_list|(
name|placement
argument_list|)
condition|)
name|iDistributions
operator|.
name|add
argument_list|(
operator|new
name|DistributionConflict
argument_list|(
name|dc
argument_list|,
name|exam
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|dc
operator|.
name|isSatisfied
argument_list|(
name|placement
argument_list|)
condition|)
name|iDistributions
operator|.
name|add
argument_list|(
operator|new
name|DistributionConflict
argument_list|(
name|dc
argument_list|,
name|exam
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|ExamAssignmentInfo
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
name|exam
parameter_list|)
block|{
name|super
argument_list|(
name|exam
argument_list|)
expr_stmt|;
if|if
condition|(
name|exam
operator|.
name|getConflicts
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|exam
operator|.
name|getConflicts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|exam
operator|.
name|getConflicts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamConflict
name|conf
init|=
operator|(
name|ExamConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|isDirectConflict
argument_list|()
condition|)
block|{
name|ExamAssignment
name|other
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|conf
operator|.
name|getExams
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
name|x
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|equals
argument_list|(
name|exam
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|x
operator|.
name|getAssignedPeriod
argument_list|()
operator|!=
literal|null
condition|)
name|other
operator|=
operator|new
name|ExamAssignment
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|.
name|getNrStudents
argument_list|()
operator|>
literal|0
condition|)
name|iDirects
operator|.
name|add
argument_list|(
operator|new
name|DirectConflict
argument_list|(
name|other
argument_list|,
name|conf
operator|.
name|getNrStudents
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|getNrInstructors
argument_list|()
operator|>
literal|0
condition|)
name|iInstructorDirects
operator|.
name|add
argument_list|(
operator|new
name|DirectConflict
argument_list|(
name|other
argument_list|,
name|conf
operator|.
name|getNrInstructors
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|conf
operator|.
name|isBackToBackConflict
argument_list|()
condition|)
block|{
name|ExamAssignment
name|other
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|conf
operator|.
name|getExams
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
name|x
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|equals
argument_list|(
name|exam
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|x
operator|.
name|getAssignedPeriod
argument_list|()
operator|!=
literal|null
condition|)
name|other
operator|=
operator|new
name|ExamAssignment
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|conf
operator|.
name|getNrStudents
argument_list|()
operator|>
literal|0
condition|)
name|iBackToBacks
operator|.
name|add
argument_list|(
operator|new
name|BackToBackConflict
argument_list|(
name|other
argument_list|,
name|conf
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|conf
operator|.
name|isDistanceBackToBackConflict
argument_list|()
argument_list|,
name|conf
operator|.
name|getDistance
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|getNrInstructors
argument_list|()
operator|>
literal|0
condition|)
name|iInstructorBackToBacks
operator|.
name|add
argument_list|(
operator|new
name|BackToBackConflict
argument_list|(
name|other
argument_list|,
name|conf
operator|.
name|getNrInstructors
argument_list|()
argument_list|,
name|conf
operator|.
name|isDistanceBackToBackConflict
argument_list|()
argument_list|,
name|conf
operator|.
name|getDistance
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|conf
operator|.
name|isMoreThanTwoADayConflict
argument_list|()
condition|)
block|{
name|TreeSet
name|other
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|conf
operator|.
name|getExams
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
name|x
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|equals
argument_list|(
name|exam
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|x
operator|.
name|getAssignedPeriod
argument_list|()
operator|!=
literal|null
condition|)
name|other
operator|.
name|add
argument_list|(
operator|new
name|ExamAssignment
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
continue|continue;
if|if
condition|(
name|conf
operator|.
name|getNrStudents
argument_list|()
operator|>
literal|0
condition|)
name|iMoreThanTwoADays
operator|.
name|add
argument_list|(
operator|new
name|MoreThanTwoADayConflict
argument_list|(
name|other
argument_list|,
name|conf
operator|.
name|getNrStudents
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|getNrInstructors
argument_list|()
operator|>
literal|0
condition|)
name|iInstructorMoreThanTwoADays
operator|.
name|add
argument_list|(
operator|new
name|MoreThanTwoADayConflict
argument_list|(
name|other
argument_list|,
name|conf
operator|.
name|getNrInstructors
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|exam
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|dObj
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|DistributionPref
name|pref
init|=
name|dObj
operator|.
name|getDistributionPref
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|check
argument_list|(
name|pref
argument_list|,
name|exam
argument_list|,
name|getPeriod
argument_list|()
argument_list|,
name|getRooms
argument_list|()
argument_list|)
condition|)
name|iDistributions
operator|.
name|add
argument_list|(
operator|new
name|DistributionConflict
argument_list|(
name|pref
argument_list|,
name|exam
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|.
name|sExamTypeEvening
operator|==
name|exam
operator|.
name|getExamType
argument_list|()
condition|)
block|{
name|computeUnavailablility
argument_list|(
name|exam
operator|.
name|getStudentAssignments
argument_list|()
argument_list|,
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exam
operator|.
name|getInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|computeUnavailablility
argument_list|(
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|,
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|computeUnavailablility
parameter_list|(
name|Exam
name|exam
parameter_list|,
name|Vector
argument_list|<
name|ExamResourceUnavailability
argument_list|>
name|unavailabilities
parameter_list|)
block|{
if|if
condition|(
name|unavailabilities
operator|==
literal|null
operator|||
name|unavailabilities
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
for|for
control|(
name|ExamResourceUnavailability
name|unavailability
range|:
name|unavailabilities
control|)
block|{
name|Vector
argument_list|<
name|Long
argument_list|>
name|commonStudents
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|exam
operator|.
name|getStudents
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamStudent
name|student
init|=
operator|(
name|ExamStudent
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|unavailability
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|commonStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|commonStudents
operator|.
name|isEmpty
argument_list|()
condition|)
name|iDirects
operator|.
name|add
argument_list|(
operator|new
name|DirectConflict
argument_list|(
name|unavailability
argument_list|,
name|commonStudents
argument_list|)
argument_list|)
expr_stmt|;
name|Vector
argument_list|<
name|Long
argument_list|>
name|commonInstructors
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|exam
operator|.
name|getInstructors
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamInstructor
name|instructor
init|=
operator|(
name|ExamInstructor
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|unavailability
operator|.
name|getInstructorIds
argument_list|()
operator|.
name|contains
argument_list|(
name|instructor
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|commonInstructors
operator|.
name|add
argument_list|(
name|instructor
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|commonInstructors
operator|.
name|isEmpty
argument_list|()
condition|)
name|iInstructorDirects
operator|.
name|add
argument_list|(
operator|new
name|DirectConflict
argument_list|(
name|unavailability
argument_list|,
name|commonInstructors
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|computeUnavailablility
parameter_list|(
name|Hashtable
argument_list|<
name|Assignment
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|studentAssignments
parameter_list|,
name|ExamPeriod
name|period
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Assignment
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|entry
range|:
name|studentAssignments
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|period
operator|.
name|overlap
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
continue|continue;
name|iDirects
operator|.
name|add
argument_list|(
operator|new
name|DirectConflict
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|computeUnavailablility
parameter_list|(
name|DepartmentalInstructor
name|instructor
parameter_list|,
name|ExamPeriod
name|period
parameter_list|)
block|{
name|Assignment
name|blockingAssignment
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|instructor
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|blockingAssignment
operator|==
literal|null
operator|&&
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ci
operator|.
name|isLead
argument_list|()
operator|&&
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getCommittedAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|period
operator|.
name|overlap
argument_list|(
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getCommittedAssignment
argument_list|()
argument_list|)
condition|)
name|blockingAssignment
operator|=
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getCommittedAssignment
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|blockingAssignment
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|Iterator
name|i
init|=
name|iInstructorDirects
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DirectConflict
name|dc
init|=
operator|(
name|DirectConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|blockingAssignment
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|dc
operator|.
name|getOtherAssignmentId
argument_list|()
argument_list|)
condition|)
block|{
name|dc
operator|.
name|incNrStudents
argument_list|()
expr_stmt|;
name|dc
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|DirectConflict
name|dc
init|=
operator|new
name|DirectConflict
argument_list|(
name|blockingAssignment
argument_list|)
decl_stmt|;
name|dc
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|iInstructorDirects
operator|.
name|add
argument_list|(
name|dc
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|check
parameter_list|(
name|DistributionPref
name|pref
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
name|exam
parameter_list|,
name|ExamPeriod
name|assignedPeriod
parameter_list|,
name|Collection
argument_list|<
name|ExamRoomInfo
argument_list|>
name|assignedRooms
parameter_list|)
block|{
if|if
condition|(
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
name|boolean
name|positive
init|=
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|||
name|PreferenceLevel
operator|.
name|sStronglyPreferred
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|||
name|PreferenceLevel
operator|.
name|sPreferred
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"EX_SAME_PER"
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|positive
condition|)
block|{
comment|//same period
name|ExamPeriod
name|period
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|pref
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
name|x
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|)
operator|(
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|ExamPeriod
name|p
init|=
name|x
operator|.
name|getAssignedPeriod
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|equals
argument_list|(
name|exam
argument_list|)
condition|)
name|p
operator|=
name|assignedPeriod
expr_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|period
operator|==
literal|null
condition|)
name|period
operator|=
name|p
expr_stmt|;
if|else if
condition|(
operator|!
name|period
operator|.
name|equals
argument_list|(
name|p
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
comment|//different period
name|HashSet
name|periods
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|pref
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
name|x
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|)
operator|(
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|ExamPeriod
name|p
init|=
name|x
operator|.
name|getAssignedPeriod
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|equals
argument_list|(
name|exam
argument_list|)
condition|)
name|p
operator|=
name|assignedPeriod
expr_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
operator|!
name|periods
operator|.
name|add
argument_list|(
name|p
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
if|else if
condition|(
literal|"EX_PRECEDENCE"
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
block|{
name|TreeSet
name|distObjects
init|=
operator|new
name|TreeSet
argument_list|(
name|positive
condition|?
operator|new
name|Comparator
argument_list|<
name|DistributionObject
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|DistributionObject
name|d1
parameter_list|,
name|DistributionObject
name|d2
parameter_list|)
block|{
return|return
name|d1
operator|.
name|getSequenceNumber
argument_list|()
operator|.
name|compareTo
argument_list|(
name|d2
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
return|;
block|}
block|}
else|:
operator|new
name|Comparator
argument_list|<
name|DistributionObject
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|DistributionObject
name|d1
parameter_list|,
name|DistributionObject
name|d2
parameter_list|)
block|{
return|return
name|d2
operator|.
name|getSequenceNumber
argument_list|()
operator|.
name|compareTo
argument_list|(
name|d1
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|distObjects
operator|.
name|addAll
argument_list|(
name|pref
operator|.
name|getDistributionObjects
argument_list|()
argument_list|)
expr_stmt|;
name|ExamPeriod
name|prev
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|distObjects
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
name|x
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|)
operator|(
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|ExamPeriod
name|p
init|=
name|x
operator|.
name|getAssignedPeriod
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|equals
argument_list|(
name|exam
argument_list|)
condition|)
name|p
operator|=
name|assignedPeriod
expr_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|prev
operator|!=
literal|null
operator|&&
name|prev
operator|.
name|compareTo
argument_list|(
name|p
argument_list|)
operator|>=
literal|0
condition|)
return|return
literal|false
return|;
name|prev
operator|=
name|p
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
if|else if
condition|(
literal|"EX_SAME_ROOM"
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|positive
condition|)
block|{
comment|//same room
name|Collection
argument_list|<
name|ExamRoomInfo
argument_list|>
name|rooms
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|pref
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
name|x
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|)
operator|(
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|ExamRoomInfo
argument_list|>
name|r
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|equals
argument_list|(
name|exam
argument_list|)
condition|)
block|{
name|r
operator|=
name|assignedRooms
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|x
operator|.
name|getAssignedPeriod
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|r
operator|=
operator|new
name|ExamAssignment
argument_list|(
name|x
argument_list|)
operator|.
name|getRooms
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|rooms
operator|==
literal|null
condition|)
name|rooms
operator|=
name|r
expr_stmt|;
if|else if
condition|(
operator|!
name|rooms
operator|.
name|containsAll
argument_list|(
name|r
argument_list|)
operator|||
operator|!
name|r
operator|.
name|containsAll
argument_list|(
name|rooms
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
comment|//different room
name|Collection
argument_list|<
name|ExamRoomInfo
argument_list|>
name|allRooms
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|pref
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
name|x
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|)
operator|(
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|ExamRoomInfo
argument_list|>
name|r
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|equals
argument_list|(
name|exam
argument_list|)
condition|)
block|{
name|r
operator|=
name|assignedRooms
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|x
operator|.
name|getAssignedPeriod
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|r
operator|=
operator|new
name|ExamAssignment
argument_list|(
name|x
argument_list|)
operator|.
name|getRooms
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|ExamRoomInfo
name|room
range|:
name|r
control|)
block|{
if|if
condition|(
operator|!
name|allRooms
operator|.
name|add
argument_list|(
name|room
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|ExamAssignmentInfo
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
name|exam
parameter_list|,
name|ExamPeriod
name|period
parameter_list|,
name|Collection
argument_list|<
name|ExamRoomInfo
argument_list|>
name|rooms
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
name|exam
argument_list|,
name|period
argument_list|,
name|rooms
argument_list|,
name|exam
operator|.
name|getStudentExams
argument_list|()
argument_list|,
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|.
name|sExamTypeEvening
operator|==
name|exam
operator|.
name|getExamType
argument_list|()
condition|?
name|exam
operator|.
name|getStudentAssignments
argument_list|()
else|:
literal|null
operator|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ExamAssignmentInfo
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
name|exam
parameter_list|,
name|ExamPeriod
name|period
parameter_list|,
name|Collection
argument_list|<
name|ExamRoomInfo
argument_list|>
name|rooms
parameter_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
argument_list|>
argument_list|>
name|examStudents
parameter_list|,
name|Hashtable
argument_list|<
name|Assignment
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|studentAssignments
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|exam
argument_list|,
name|period
argument_list|,
name|rooms
argument_list|)
expr_stmt|;
if|if
condition|(
name|period
operator|==
literal|null
condition|)
return|return;
name|int
name|btbDist
init|=
operator|-
literal|1
decl_stmt|;
name|boolean
name|btbDayBreak
init|=
literal|false
decl_stmt|;
name|SolverParameterDef
name|btbDistDef
init|=
name|SolverParameterDef
operator|.
name|findByName
argument_list|(
literal|"Exams.BackToBackDistance"
argument_list|)
decl_stmt|;
if|if
condition|(
name|btbDistDef
operator|!=
literal|null
operator|&&
name|btbDistDef
operator|.
name|getDefault
argument_list|()
operator|!=
literal|null
condition|)
name|btbDist
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|btbDistDef
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|SolverParameterDef
name|btbDayBreakDef
init|=
name|SolverParameterDef
operator|.
name|findByName
argument_list|(
literal|"Exams.IsDayBreakBackToBack"
argument_list|)
decl_stmt|;
if|if
condition|(
name|btbDayBreakDef
operator|!=
literal|null
operator|&&
name|btbDayBreakDef
operator|.
name|getDefault
argument_list|()
operator|!=
literal|null
condition|)
name|btbDayBreak
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|btbDayBreakDef
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|Hashtable
name|directs
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Hashtable
name|backToBacks
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Hashtable
name|m2ds
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
argument_list|>
argument_list|>
name|studentExams
range|:
name|examStudents
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TreeSet
name|sameDateExams
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
name|other
range|:
name|studentExams
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
name|other
operator|.
name|equals
argument_list|(
name|exam
argument_list|)
operator|||
name|other
operator|.
name|getAssignedPeriod
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|period
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getAssignedPeriod
argument_list|()
argument_list|)
condition|)
block|{
comment|//direct conflict
name|DirectConflict
name|dc
init|=
operator|(
name|DirectConflict
operator|)
name|directs
operator|.
name|get
argument_list|(
name|other
argument_list|)
decl_stmt|;
if|if
condition|(
name|dc
operator|==
literal|null
condition|)
block|{
name|dc
operator|=
operator|new
name|DirectConflict
argument_list|(
operator|new
name|ExamAssignment
argument_list|(
name|other
argument_list|)
argument_list|)
expr_stmt|;
name|directs
operator|.
name|put
argument_list|(
name|other
argument_list|,
name|dc
argument_list|)
expr_stmt|;
block|}
else|else
name|dc
operator|.
name|incNrStudents
argument_list|()
expr_stmt|;
name|dc
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|studentExams
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|period
operator|.
name|isBackToBack
argument_list|(
name|other
operator|.
name|getAssignedPeriod
argument_list|()
argument_list|,
name|btbDayBreak
argument_list|)
condition|)
block|{
name|BackToBackConflict
name|btb
init|=
operator|(
name|BackToBackConflict
operator|)
name|backToBacks
operator|.
name|get
argument_list|(
name|other
argument_list|)
decl_stmt|;
name|double
name|distance
init|=
name|Location
operator|.
name|getDistance
argument_list|(
name|rooms
argument_list|,
name|other
operator|.
name|getAssignedRooms
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|btb
operator|==
literal|null
condition|)
block|{
name|btb
operator|=
operator|new
name|BackToBackConflict
argument_list|(
operator|new
name|ExamAssignment
argument_list|(
name|other
argument_list|)
argument_list|,
operator|(
name|btbDist
operator|<
literal|0
condition|?
literal|false
else|:
name|distance
operator|>
name|btbDist
operator|)
argument_list|,
name|distance
argument_list|)
expr_stmt|;
name|backToBacks
operator|.
name|put
argument_list|(
name|other
argument_list|,
name|btb
argument_list|)
expr_stmt|;
block|}
else|else
name|btb
operator|.
name|incNrStudents
argument_list|()
expr_stmt|;
name|btb
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|studentExams
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|period
operator|.
name|getDateOffset
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getAssignedPeriod
argument_list|()
operator|.
name|getDateOffset
argument_list|()
argument_list|)
condition|)
name|sameDateExams
operator|.
name|add
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sameDateExams
operator|.
name|size
argument_list|()
operator|>=
literal|2
condition|)
block|{
name|TreeSet
name|examIds
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|TreeSet
name|otherExams
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|sameDateExams
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
name|other
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|examIds
operator|.
name|add
argument_list|(
name|other
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|otherExams
operator|.
name|add
argument_list|(
operator|new
name|ExamAssignment
argument_list|(
name|other
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MoreThanTwoADayConflict
name|m2d
init|=
operator|(
name|MoreThanTwoADayConflict
operator|)
name|m2ds
operator|.
name|get
argument_list|(
name|examIds
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m2d
operator|==
literal|null
condition|)
block|{
name|m2d
operator|=
operator|new
name|MoreThanTwoADayConflict
argument_list|(
name|otherExams
argument_list|)
expr_stmt|;
name|m2ds
operator|.
name|put
argument_list|(
name|examIds
operator|.
name|toString
argument_list|()
argument_list|,
name|m2d
argument_list|)
expr_stmt|;
block|}
else|else
name|m2d
operator|.
name|incNrStudents
argument_list|()
expr_stmt|;
name|m2d
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|studentExams
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|iDirects
operator|.
name|addAll
argument_list|(
name|directs
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|iBackToBacks
operator|.
name|addAll
argument_list|(
name|backToBacks
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|iMoreThanTwoADays
operator|.
name|addAll
argument_list|(
name|m2ds
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|studentAssignments
operator|!=
literal|null
condition|)
name|computeUnavailablility
argument_list|(
name|studentAssignments
argument_list|,
name|period
argument_list|)
expr_stmt|;
name|Hashtable
name|idirects
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Hashtable
name|ibackToBacks
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Hashtable
name|im2ds
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exam
operator|.
name|getInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|TreeSet
name|sameDateExams
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|instructor
operator|.
name|getExams
argument_list|(
name|exam
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
name|other
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|equals
argument_list|(
name|exam
argument_list|)
operator|||
name|other
operator|.
name|getAssignedPeriod
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|period
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getAssignedPeriod
argument_list|()
argument_list|)
condition|)
block|{
comment|//direct conflict
name|DirectConflict
name|dc
init|=
operator|(
name|DirectConflict
operator|)
name|idirects
operator|.
name|get
argument_list|(
name|other
argument_list|)
decl_stmt|;
if|if
condition|(
name|dc
operator|==
literal|null
condition|)
block|{
name|dc
operator|=
operator|new
name|DirectConflict
argument_list|(
operator|new
name|ExamAssignment
argument_list|(
name|other
argument_list|)
argument_list|)
expr_stmt|;
name|idirects
operator|.
name|put
argument_list|(
name|other
argument_list|,
name|dc
argument_list|)
expr_stmt|;
block|}
else|else
name|dc
operator|.
name|incNrStudents
argument_list|()
expr_stmt|;
name|dc
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|period
operator|.
name|isBackToBack
argument_list|(
name|other
operator|.
name|getAssignedPeriod
argument_list|()
argument_list|,
name|btbDayBreak
argument_list|)
condition|)
block|{
name|BackToBackConflict
name|btb
init|=
operator|(
name|BackToBackConflict
operator|)
name|ibackToBacks
operator|.
name|get
argument_list|(
name|other
argument_list|)
decl_stmt|;
name|double
name|distance
init|=
name|Location
operator|.
name|getDistance
argument_list|(
name|rooms
argument_list|,
name|other
operator|.
name|getAssignedRooms
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|btb
operator|==
literal|null
condition|)
block|{
name|btb
operator|=
operator|new
name|BackToBackConflict
argument_list|(
operator|new
name|ExamAssignment
argument_list|(
name|other
argument_list|)
argument_list|,
operator|(
name|btbDist
operator|<
literal|0
condition|?
literal|false
else|:
name|distance
operator|>
name|btbDist
operator|)
argument_list|,
name|distance
argument_list|)
expr_stmt|;
name|ibackToBacks
operator|.
name|put
argument_list|(
name|other
argument_list|,
name|btb
argument_list|)
expr_stmt|;
block|}
else|else
name|btb
operator|.
name|incNrStudents
argument_list|()
expr_stmt|;
name|btb
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|period
operator|.
name|getDateOffset
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getAssignedPeriod
argument_list|()
operator|.
name|getDateOffset
argument_list|()
argument_list|)
condition|)
name|sameDateExams
operator|.
name|add
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|.
name|sExamTypeEvening
operator|==
name|exam
operator|.
name|getExamType
argument_list|()
condition|)
name|computeUnavailablility
argument_list|(
name|instructor
argument_list|,
name|period
argument_list|)
expr_stmt|;
if|if
condition|(
name|sameDateExams
operator|.
name|size
argument_list|()
operator|>=
literal|2
condition|)
block|{
name|TreeSet
name|examIds
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|TreeSet
name|otherExams
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|sameDateExams
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
name|other
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|examIds
operator|.
name|add
argument_list|(
name|other
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|otherExams
operator|.
name|add
argument_list|(
operator|new
name|ExamAssignment
argument_list|(
name|other
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MoreThanTwoADayConflict
name|m2d
init|=
operator|(
name|MoreThanTwoADayConflict
operator|)
name|im2ds
operator|.
name|get
argument_list|(
name|examIds
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m2d
operator|==
literal|null
condition|)
block|{
name|m2d
operator|=
operator|new
name|MoreThanTwoADayConflict
argument_list|(
name|otherExams
argument_list|)
expr_stmt|;
name|im2ds
operator|.
name|put
argument_list|(
name|examIds
operator|.
name|toString
argument_list|()
argument_list|,
name|m2d
argument_list|)
expr_stmt|;
block|}
else|else
name|m2d
operator|.
name|incNrStudents
argument_list|()
expr_stmt|;
name|m2d
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|iInstructorDirects
operator|.
name|addAll
argument_list|(
name|idirects
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|iInstructorBackToBacks
operator|.
name|addAll
argument_list|(
name|ibackToBacks
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|iInstructorMoreThanTwoADays
operator|.
name|addAll
argument_list|(
name|im2ds
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exam
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|dObj
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|DistributionPref
name|pref
init|=
name|dObj
operator|.
name|getDistributionPref
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|check
argument_list|(
name|pref
argument_list|,
name|exam
argument_list|,
name|period
argument_list|,
name|rooms
argument_list|)
condition|)
name|iDistributions
operator|.
name|add
argument_list|(
operator|new
name|DistributionConflict
argument_list|(
name|pref
argument_list|,
name|exam
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|TreeSet
name|getDirectConflicts
parameter_list|()
block|{
return|return
name|iDirects
return|;
block|}
specifier|public
name|TreeSet
name|getBackToBackConflicts
parameter_list|()
block|{
return|return
name|iBackToBacks
return|;
block|}
specifier|public
name|TreeSet
name|getMoreThanTwoADaysConflicts
parameter_list|()
block|{
return|return
name|iMoreThanTwoADays
return|;
block|}
specifier|public
name|int
name|getNrDirectConflicts
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iDirects
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DirectConflict
name|dc
init|=
operator|(
name|DirectConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|+=
name|dc
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|getNrBackToBackConflicts
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iBackToBacks
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BackToBackConflict
name|btb
init|=
operator|(
name|BackToBackConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|+=
name|btb
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|getNrDistanceBackToBackConflicts
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iBackToBacks
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BackToBackConflict
name|btb
init|=
operator|(
name|BackToBackConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|btb
operator|.
name|isDistance
argument_list|()
condition|)
name|ret
operator|+=
name|btb
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|getNrMoreThanTwoConflicts
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iMoreThanTwoADays
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MoreThanTwoADayConflict
name|m2d
init|=
operator|(
name|MoreThanTwoADayConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|+=
name|m2d
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|getNrDirectConflicts
parameter_list|(
name|ExamSectionInfo
name|section
parameter_list|)
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iDirects
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DirectConflict
name|dc
init|=
operator|(
name|DirectConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|f
init|=
name|dc
operator|.
name|getStudents
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|f
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
if|if
condition|(
name|section
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|f
operator|.
name|nextElement
argument_list|()
argument_list|)
condition|)
name|ret
operator|++
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|getNrBackToBackConflicts
parameter_list|(
name|ExamSectionInfo
name|section
parameter_list|)
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iBackToBacks
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BackToBackConflict
name|btb
init|=
operator|(
name|BackToBackConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|f
init|=
name|btb
operator|.
name|getStudents
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|f
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
if|if
condition|(
name|section
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|f
operator|.
name|nextElement
argument_list|()
argument_list|)
condition|)
name|ret
operator|++
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|getNrDistanceBackToBackConflicts
parameter_list|(
name|ExamSectionInfo
name|section
parameter_list|)
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iBackToBacks
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BackToBackConflict
name|btb
init|=
operator|(
name|BackToBackConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|btb
operator|.
name|isDistance
argument_list|()
condition|)
for|for
control|(
name|Enumeration
name|f
init|=
name|btb
operator|.
name|getStudents
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|f
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
if|if
condition|(
name|section
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|f
operator|.
name|nextElement
argument_list|()
argument_list|)
condition|)
name|ret
operator|++
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|getNrMoreThanTwoConflicts
parameter_list|(
name|ExamSectionInfo
name|section
parameter_list|)
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iMoreThanTwoADays
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MoreThanTwoADayConflict
name|m2d
init|=
operator|(
name|MoreThanTwoADayConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|f
init|=
name|m2d
operator|.
name|getStudents
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|f
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
if|if
condition|(
name|section
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|f
operator|.
name|nextElement
argument_list|()
argument_list|)
condition|)
name|ret
operator|++
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|TreeSet
name|getDistributionConflicts
parameter_list|()
block|{
return|return
name|iDistributions
return|;
block|}
specifier|public
name|String
name|getDistributionConflictsHtml
parameter_list|(
name|String
name|delim
parameter_list|)
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iDistributions
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionConflict
name|dc
init|=
operator|(
name|DistributionConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ret
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|ret
operator|+=
name|delim
expr_stmt|;
name|ret
operator|+=
name|dc
operator|.
name|getTypeHtml
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|String
name|getDistributionConflictsList
parameter_list|(
name|String
name|delim
parameter_list|)
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iDistributions
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionConflict
name|dc
init|=
operator|(
name|DistributionConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ret
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|ret
operator|+=
name|delim
expr_stmt|;
name|ret
operator|+=
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|dc
operator|.
name|getPreference
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|dc
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|getNrDistributionConflicts
parameter_list|()
block|{
return|return
name|iDistributions
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|getHasConflicts
parameter_list|()
block|{
return|return
operator|!
name|getDirectConflicts
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|getBackToBackConflicts
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|getMoreThanTwoADaysConflicts
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getConflictTable
parameter_list|()
block|{
return|return
name|getConflictTable
argument_list|(
literal|true
argument_list|)
return|;
block|}
specifier|public
name|String
name|getConflictTable
parameter_list|(
name|boolean
name|header
parameter_list|)
block|{
name|String
name|ret
init|=
literal|"<table border='0' width='95%' cellspacing='0' cellpadding='3'>"
decl_stmt|;
if|if
condition|(
name|header
condition|)
block|{
name|ret
operator|+=
literal|"<tr>"
expr_stmt|;
name|ret
operator|+=
literal|"<td><i>Students</i></td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td><i>Conflict</i></td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td><i>Exam</i></td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td><i>Period</i></td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td><i>Room</i></td>"
expr_stmt|;
name|ret
operator|+=
literal|"</tr>"
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|getDirectConflicts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|ret
operator|+=
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getMoreThanTwoADaysConflicts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|ret
operator|+=
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getBackToBackConflicts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|ret
operator|+=
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|+=
literal|"</table>"
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|String
name|getDistributionConflictTable
parameter_list|()
block|{
return|return
name|getDistributionConflictTable
argument_list|(
literal|true
argument_list|)
return|;
block|}
specifier|public
name|String
name|getDistributionConflictTable
parameter_list|(
name|boolean
name|header
parameter_list|)
block|{
name|String
name|ret
init|=
literal|"<table border='0' width='95%' cellspacing='0' cellpadding='3'>"
decl_stmt|;
if|if
condition|(
name|header
condition|)
block|{
name|ret
operator|+=
literal|"<tr>"
expr_stmt|;
name|ret
operator|+=
literal|"<td><i>Preference</i></td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td><i>Distribution</i></td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td><i>Exam</i></td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td><i>Period</i></td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td><i>Room</i></td>"
expr_stmt|;
name|ret
operator|+=
literal|"</tr>"
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|getDistributionConflicts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|ret
operator|+=
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|+=
literal|"</table>"
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|TreeSet
name|getInstructorDirectConflicts
parameter_list|()
block|{
return|return
name|iInstructorDirects
return|;
block|}
specifier|public
name|TreeSet
name|getInstructorBackToBackConflicts
parameter_list|()
block|{
return|return
name|iInstructorBackToBacks
return|;
block|}
specifier|public
name|TreeSet
name|getInstructorMoreThanTwoADaysConflicts
parameter_list|()
block|{
return|return
name|iInstructorMoreThanTwoADays
return|;
block|}
specifier|public
name|int
name|getNrInstructorDirectConflicts
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iInstructorDirects
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DirectConflict
name|dc
init|=
operator|(
name|DirectConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|+=
name|dc
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|getNrInstructorBackToBackConflicts
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iInstructorBackToBacks
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BackToBackConflict
name|btb
init|=
operator|(
name|BackToBackConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|+=
name|btb
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|getNrInstructorDistanceBackToBackConflicts
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iInstructorBackToBacks
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BackToBackConflict
name|btb
init|=
operator|(
name|BackToBackConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|btb
operator|.
name|isDistance
argument_list|()
condition|)
name|ret
operator|+=
name|btb
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|getNrInstructorMoreThanTwoConflicts
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iInstructorMoreThanTwoADays
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MoreThanTwoADayConflict
name|m2d
init|=
operator|(
name|MoreThanTwoADayConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|+=
name|m2d
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|getNrInstructorDirectConflicts
parameter_list|(
name|ExamSectionInfo
name|section
parameter_list|)
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iInstructorDirects
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DirectConflict
name|dc
init|=
operator|(
name|DirectConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|f
init|=
name|dc
operator|.
name|getStudents
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|f
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
if|if
condition|(
name|section
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|f
operator|.
name|nextElement
argument_list|()
argument_list|)
condition|)
name|ret
operator|++
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|getNrInstructorBackToBackConflicts
parameter_list|(
name|ExamSectionInfo
name|section
parameter_list|)
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iInstructorBackToBacks
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BackToBackConflict
name|btb
init|=
operator|(
name|BackToBackConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|f
init|=
name|btb
operator|.
name|getStudents
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|f
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
if|if
condition|(
name|section
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|f
operator|.
name|nextElement
argument_list|()
argument_list|)
condition|)
name|ret
operator|++
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|getNrInstructorDistanceBackToBackConflicts
parameter_list|(
name|ExamSectionInfo
name|section
parameter_list|)
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iInstructorBackToBacks
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BackToBackConflict
name|btb
init|=
operator|(
name|BackToBackConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|btb
operator|.
name|isDistance
argument_list|()
condition|)
for|for
control|(
name|Enumeration
name|f
init|=
name|btb
operator|.
name|getStudents
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|f
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
if|if
condition|(
name|section
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|f
operator|.
name|nextElement
argument_list|()
argument_list|)
condition|)
name|ret
operator|++
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|getNrInstructorMoreThanTwoConflicts
parameter_list|(
name|ExamSectionInfo
name|section
parameter_list|)
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iInstructorMoreThanTwoADays
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MoreThanTwoADayConflict
name|m2d
init|=
operator|(
name|MoreThanTwoADayConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|f
init|=
name|m2d
operator|.
name|getStudents
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|f
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
if|if
condition|(
name|section
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|f
operator|.
name|nextElement
argument_list|()
argument_list|)
condition|)
name|ret
operator|++
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|boolean
name|getHasInstructorConflicts
parameter_list|()
block|{
return|return
operator|!
name|getInstructorDirectConflicts
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|getInstructorBackToBackConflicts
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|getInstructorMoreThanTwoADaysConflicts
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getInstructorConflictTable
parameter_list|()
block|{
return|return
name|getInstructorConflictTable
argument_list|(
literal|true
argument_list|)
return|;
block|}
specifier|public
name|String
name|getInstructorConflictTable
parameter_list|(
name|boolean
name|header
parameter_list|)
block|{
name|String
name|ret
init|=
literal|"<table border='0' width='95%' cellspacing='0' cellpadding='3'>"
decl_stmt|;
if|if
condition|(
name|header
condition|)
block|{
name|ret
operator|+=
literal|"<tr>"
expr_stmt|;
name|ret
operator|+=
literal|"<td><i>Instructors</i></td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td><i>Conflict</i></td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td><i>Exam</i></td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td><i>Period</i></td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td><i>Room</i></td>"
expr_stmt|;
name|ret
operator|+=
literal|"</tr>"
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|getInstructorDirectConflicts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|ret
operator|+=
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getInstructorMoreThanTwoADaysConflicts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|ret
operator|+=
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getInstructorBackToBackConflicts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|ret
operator|+=
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|+=
literal|"</table>"
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
class|class
name|DirectConflict
implements|implements
name|Serializable
implements|,
name|Comparable
block|{
specifier|protected
name|ExamAssignment
name|iOtherExam
init|=
literal|null
decl_stmt|;
specifier|protected
name|int
name|iNrStudents
init|=
literal|1
decl_stmt|;
specifier|protected
specifier|transient
name|Vector
name|iStudents
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
specifier|protected
name|String
name|iOtherAssignmentName
init|=
literal|null
decl_stmt|;
specifier|protected
name|String
name|iOtherAssignmentTime
init|=
literal|null
decl_stmt|;
specifier|protected
name|String
name|iOtherAssignmentRoom
init|=
literal|null
decl_stmt|;
specifier|protected
name|Long
name|iOtherAssignmentId
decl_stmt|;
specifier|protected
name|DirectConflict
parameter_list|(
name|ExamAssignment
name|otherExam
parameter_list|)
block|{
name|iOtherExam
operator|=
name|otherExam
expr_stmt|;
block|}
specifier|protected
name|DirectConflict
parameter_list|(
name|ExamAssignment
name|otherExam
parameter_list|,
name|int
name|nrStudents
parameter_list|)
block|{
name|iOtherExam
operator|=
name|otherExam
expr_stmt|;
name|iNrStudents
operator|=
name|nrStudents
expr_stmt|;
block|}
specifier|protected
name|DirectConflict
parameter_list|(
name|Assignment
name|otherAssignment
parameter_list|)
block|{
name|iOtherAssignmentId
operator|=
name|otherAssignment
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iOtherAssignmentName
operator|=
name|otherAssignment
operator|.
name|getClassName
argument_list|()
expr_stmt|;
name|iOtherAssignmentTime
operator|=
name|otherAssignment
operator|.
name|getPlacement
argument_list|()
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getLongName
argument_list|()
expr_stmt|;
name|iOtherAssignmentRoom
operator|=
name|otherAssignment
operator|.
name|getPlacement
argument_list|()
operator|.
name|getRoomName
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|DirectConflict
parameter_list|(
name|Assignment
name|otherAssignment
parameter_list|,
name|Collection
argument_list|<
name|Long
argument_list|>
name|studentIds
parameter_list|)
block|{
name|this
argument_list|(
name|otherAssignment
argument_list|)
expr_stmt|;
name|iNrStudents
operator|=
name|studentIds
operator|.
name|size
argument_list|()
expr_stmt|;
name|iStudents
operator|.
name|addAll
argument_list|(
name|studentIds
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|DirectConflict
parameter_list|(
name|ExamResourceUnavailability
name|unavailability
parameter_list|,
name|Vector
argument_list|<
name|Long
argument_list|>
name|studentIds
parameter_list|)
block|{
name|iOtherAssignmentId
operator|=
name|unavailability
operator|.
name|getId
argument_list|()
expr_stmt|;
name|iOtherAssignmentName
operator|=
name|unavailability
operator|.
name|getName
argument_list|()
expr_stmt|;
name|iOtherAssignmentTime
operator|=
name|unavailability
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|iOtherAssignmentRoom
operator|=
name|unavailability
operator|.
name|getRoom
argument_list|()
expr_stmt|;
name|iNrStudents
operator|=
name|studentIds
operator|.
name|size
argument_list|()
expr_stmt|;
name|iStudents
operator|=
name|studentIds
expr_stmt|;
block|}
specifier|protected
name|void
name|incNrStudents
parameter_list|()
block|{
name|iNrStudents
operator|++
expr_stmt|;
block|}
specifier|public
name|int
name|getNrStudents
parameter_list|()
block|{
return|return
name|iNrStudents
return|;
block|}
specifier|public
name|Vector
name|getStudents
parameter_list|()
block|{
return|return
name|iStudents
return|;
block|}
specifier|public
name|ExamAssignment
name|getOtherExam
parameter_list|()
block|{
return|return
name|iOtherExam
return|;
block|}
specifier|public
name|Long
name|getOtherAssignmentId
parameter_list|()
block|{
return|return
name|iOtherAssignmentId
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|DirectConflict
name|c
init|=
operator|(
name|DirectConflict
operator|)
name|o
decl_stmt|;
name|int
name|cmp
init|=
operator|-
name|Double
operator|.
name|compare
argument_list|(
name|getNrStudents
argument_list|()
argument_list|,
name|c
operator|.
name|getNrStudents
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
if|if
condition|(
name|getOtherExam
argument_list|()
operator|==
literal|null
condition|)
return|return
operator|(
name|c
operator|.
name|getOtherExam
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
operator|-
literal|1
operator|)
return|;
if|if
condition|(
name|c
operator|.
name|getOtherExam
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|1
return|;
return|return
name|getOtherExam
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c
operator|.
name|getOtherExam
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
name|ret
operator|+=
literal|"<tr onmouseover=\"this.style.backgroundColor='rgb(223,231,242)';\" onmouseout=\"this.style.backgroundColor='transparent';\">"
expr_stmt|;
name|ret
operator|+=
literal|"<td style='font-weight:bold;color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|";'>"
expr_stmt|;
name|ret
operator|+=
name|String
operator|.
name|valueOf
argument_list|(
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|+=
literal|"</td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td style='font-weight:bold;color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|";'>"
expr_stmt|;
name|ret
operator|+=
literal|"Direct"
expr_stmt|;
name|ret
operator|+=
literal|"</td>"
expr_stmt|;
if|if
condition|(
name|getOtherExam
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|iOtherAssignmentName
operator|!=
literal|null
condition|)
block|{
name|ret
operator|+=
literal|"<td>"
operator|+
name|iOtherAssignmentName
operator|+
literal|"</td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td>"
operator|+
name|iOtherAssignmentTime
operator|+
literal|"</td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td>"
operator|+
name|iOtherAssignmentRoom
operator|+
literal|"</td>"
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|+=
literal|"<td colspan='3'>Student/instructor not available for unknown reason.</td>"
expr_stmt|;
block|}
block|}
else|else
block|{
name|ret
operator|+=
literal|"<td>"
operator|+
name|getOtherExam
argument_list|()
operator|.
name|getExamNameHtml
argument_list|()
operator|+
literal|"</td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td>"
operator|+
name|getOtherExam
argument_list|()
operator|.
name|getPeriodAbbreviationWithPref
argument_list|()
operator|+
literal|"</td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td>"
operator|+
name|getOtherExam
argument_list|()
operator|.
name|getRoomsNameWithPref
argument_list|(
literal|", "
argument_list|)
operator|+
literal|"</td>"
expr_stmt|;
block|}
name|ret
operator|+=
literal|"</tr>"
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|BackToBackConflict
implements|implements
name|Serializable
implements|,
name|Comparable
block|{
specifier|protected
name|ExamAssignment
name|iOtherExam
decl_stmt|;
specifier|protected
name|int
name|iNrStudents
init|=
literal|1
decl_stmt|;
specifier|protected
name|boolean
name|iIsDistance
init|=
literal|false
decl_stmt|;
specifier|protected
specifier|transient
name|Vector
name|iStudents
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
specifier|protected
name|double
name|iDistance
init|=
literal|0
decl_stmt|;
specifier|protected
name|BackToBackConflict
parameter_list|(
name|ExamAssignment
name|otherExam
parameter_list|,
name|boolean
name|isDistance
parameter_list|,
name|double
name|distance
parameter_list|)
block|{
name|iOtherExam
operator|=
name|otherExam
expr_stmt|;
name|iIsDistance
operator|=
name|isDistance
expr_stmt|;
name|iDistance
operator|=
name|distance
expr_stmt|;
block|}
specifier|protected
name|BackToBackConflict
parameter_list|(
name|ExamAssignment
name|otherExam
parameter_list|,
name|int
name|nrStudents
parameter_list|,
name|boolean
name|isDistance
parameter_list|,
name|double
name|distance
parameter_list|)
block|{
name|iOtherExam
operator|=
name|otherExam
expr_stmt|;
name|iNrStudents
operator|=
name|nrStudents
expr_stmt|;
name|iIsDistance
operator|=
name|isDistance
expr_stmt|;
name|iDistance
operator|=
name|distance
expr_stmt|;
block|}
specifier|protected
name|void
name|incNrStudents
parameter_list|()
block|{
name|iNrStudents
operator|++
expr_stmt|;
block|}
specifier|public
name|int
name|getNrStudents
parameter_list|()
block|{
return|return
name|iNrStudents
return|;
block|}
specifier|public
name|boolean
name|isDistance
parameter_list|()
block|{
return|return
name|iIsDistance
return|;
block|}
specifier|public
name|ExamAssignment
name|getOtherExam
parameter_list|()
block|{
return|return
name|iOtherExam
return|;
block|}
specifier|public
name|Vector
name|getStudents
parameter_list|()
block|{
return|return
name|iStudents
return|;
block|}
specifier|public
name|double
name|getDistance
parameter_list|()
block|{
return|return
name|iDistance
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|BackToBackConflict
name|c
init|=
operator|(
name|BackToBackConflict
operator|)
name|o
decl_stmt|;
name|int
name|cmp
init|=
operator|-
name|Double
operator|.
name|compare
argument_list|(
name|getNrStudents
argument_list|()
argument_list|,
name|c
operator|.
name|getNrStudents
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
if|if
condition|(
name|isDistance
argument_list|()
operator|!=
name|c
operator|.
name|isDistance
argument_list|()
condition|)
return|return
operator|(
name|isDistance
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
return|return
name|getOtherExam
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c
operator|.
name|getOtherExam
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
name|ret
operator|+=
literal|"<tr onmouseover=\"this.style.backgroundColor='rgb(223,231,242)';\" onmouseout=\"this.style.backgroundColor='transparent';\">"
expr_stmt|;
name|ret
operator|+=
literal|"<td style='font-weight:bold;color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"1"
argument_list|)
operator|+
literal|";'>"
expr_stmt|;
name|ret
operator|+=
name|String
operator|.
name|valueOf
argument_list|(
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|+=
literal|"</td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td style='font-weight:bold;color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"1"
argument_list|)
operator|+
literal|";'>"
expr_stmt|;
name|ret
operator|+=
literal|"Back-To-Back"
expr_stmt|;
if|if
condition|(
name|isDistance
argument_list|()
condition|)
name|ret
operator|+=
literal|"<br>("
operator|+
name|Math
operator|.
name|round
argument_list|(
literal|10.0
operator|*
name|getDistance
argument_list|()
argument_list|)
operator|+
literal|" m)"
expr_stmt|;
name|ret
operator|+=
literal|"</td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td>"
operator|+
name|getOtherExam
argument_list|()
operator|.
name|getExamNameHtml
argument_list|()
operator|+
literal|"</td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td>"
operator|+
name|getOtherExam
argument_list|()
operator|.
name|getPeriodAbbreviationWithPref
argument_list|()
operator|+
literal|"</td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td>"
operator|+
name|getOtherExam
argument_list|()
operator|.
name|getRoomsNameWithPref
argument_list|(
literal|", "
argument_list|)
operator|+
literal|"</td>"
expr_stmt|;
name|ret
operator|+=
literal|"</tr>"
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MoreThanTwoADayConflict
implements|implements
name|Serializable
implements|,
name|Comparable
block|{
specifier|protected
name|TreeSet
name|iOtherExams
decl_stmt|;
specifier|protected
name|int
name|iNrStudents
init|=
literal|1
decl_stmt|;
specifier|protected
specifier|transient
name|Vector
name|iStudents
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
specifier|protected
name|MoreThanTwoADayConflict
parameter_list|(
name|TreeSet
name|otherExams
parameter_list|)
block|{
name|iOtherExams
operator|=
name|otherExams
expr_stmt|;
block|}
specifier|protected
name|MoreThanTwoADayConflict
parameter_list|(
name|TreeSet
name|otherExams
parameter_list|,
name|int
name|nrStudents
parameter_list|)
block|{
name|iOtherExams
operator|=
name|otherExams
expr_stmt|;
name|iNrStudents
operator|=
name|nrStudents
expr_stmt|;
block|}
specifier|protected
name|void
name|incNrStudents
parameter_list|()
block|{
name|iNrStudents
operator|++
expr_stmt|;
block|}
specifier|public
name|int
name|getNrStudents
parameter_list|()
block|{
return|return
name|iNrStudents
return|;
block|}
specifier|public
name|Vector
name|getStudents
parameter_list|()
block|{
return|return
name|iStudents
return|;
block|}
specifier|public
name|TreeSet
name|getOtherExams
parameter_list|()
block|{
return|return
name|iOtherExams
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|MoreThanTwoADayConflict
name|c
init|=
operator|(
name|MoreThanTwoADayConflict
operator|)
name|o
decl_stmt|;
name|int
name|cmp
init|=
operator|-
name|Double
operator|.
name|compare
argument_list|(
name|getNrStudents
argument_list|()
argument_list|,
name|c
operator|.
name|getNrStudents
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
operator|-
name|Double
operator|.
name|compare
argument_list|(
name|getOtherExams
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|c
operator|.
name|getOtherExams
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|Iterator
name|i1
init|=
name|getOtherExams
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|,
name|i2
init|=
name|c
operator|.
name|getOtherExams
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ExamAssignment
name|a1
init|=
operator|(
name|ExamAssignment
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExamAssignment
name|a2
init|=
operator|(
name|ExamAssignment
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|a1
operator|.
name|equals
argument_list|(
name|a2
argument_list|)
condition|)
return|return
name|a1
operator|.
name|compareTo
argument_list|(
name|a2
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
name|String
name|mouseOver
init|=
literal|""
decl_stmt|;
name|String
name|mouseOut
init|=
literal|""
decl_stmt|;
name|String
name|id
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getOtherExams
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamAssignment
name|a
init|=
operator|(
name|ExamAssignment
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|id
operator|+=
name|a
operator|.
name|getExamId
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|id
operator|+=
literal|":"
expr_stmt|;
block|}
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getOtherExams
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|ExamAssignment
name|a
init|=
operator|(
name|ExamAssignment
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|mouseOver
operator|+=
literal|"document.getElementById('"
operator|+
name|id
operator|+
literal|":"
operator|+
name|idx
operator|+
literal|"').style.backgroundColor='rgb(223,231,242)';"
expr_stmt|;
name|mouseOut
operator|+=
literal|"document.getElementById('"
operator|+
name|id
operator|+
literal|":"
operator|+
name|idx
operator|+
literal|"').style.backgroundColor='transparent';"
expr_stmt|;
block|}
name|idx
operator|=
literal|0
expr_stmt|;
name|ret
operator|+=
literal|"<tr id='"
operator|+
name|id
operator|+
literal|":"
operator|+
name|idx
operator|+
literal|"' onmouseover=\""
operator|+
name|mouseOver
operator|+
literal|"\" onmouseout=\""
operator|+
name|mouseOut
operator|+
literal|"\">"
expr_stmt|;
name|ret
operator|+=
literal|"<td valign='top' rowspan='"
operator|+
name|getOtherExams
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|"' style='font-weight:bold;color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"2"
argument_list|)
operator|+
literal|";'>"
expr_stmt|;
name|ret
operator|+=
name|String
operator|.
name|valueOf
argument_list|(
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|+=
literal|"</td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td valign='top' rowspan='"
operator|+
name|getOtherExams
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|"' style='font-weight:bold;color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"2"
argument_list|)
operator|+
literal|";'>"
expr_stmt|;
name|ret
operator|+=
literal|"&gt;2 A Day"
expr_stmt|;
name|ret
operator|+=
literal|"</td>"
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getOtherExams
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|ExamAssignment
name|a
init|=
operator|(
name|ExamAssignment
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|+=
literal|"<td>"
operator|+
name|a
operator|.
name|getExamNameHtml
argument_list|()
operator|+
literal|"</td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td>"
operator|+
name|a
operator|.
name|getPeriodAbbreviationWithPref
argument_list|()
operator|+
literal|"</td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td>"
operator|+
name|a
operator|.
name|getRoomsNameWithPref
argument_list|(
literal|", "
argument_list|)
operator|+
literal|"</td>"
expr_stmt|;
name|ret
operator|+=
literal|"</tr>"
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|ret
operator|+=
literal|"<tr id='"
operator|+
name|id
operator|+
literal|":"
operator|+
operator|(
literal|1
operator|+
name|idx
operator|)
operator|+
literal|"' onmouseover=\""
operator|+
name|mouseOver
operator|+
literal|"\" onmouseout=\""
operator|+
name|mouseOut
operator|+
literal|"\">"
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DistributionConflict
implements|implements
name|Serializable
implements|,
name|Comparable
block|{
specifier|protected
name|TreeSet
name|iOtherExams
decl_stmt|;
specifier|protected
name|String
name|iPreference
decl_stmt|;
specifier|protected
name|Long
name|iId
decl_stmt|;
specifier|protected
name|String
name|iType
decl_stmt|;
specifier|protected
specifier|transient
name|DistributionPref
name|iPref
init|=
literal|null
decl_stmt|;
specifier|protected
name|DistributionConflict
parameter_list|(
name|Long
name|id
parameter_list|,
name|String
name|type
parameter_list|,
name|TreeSet
name|otherExams
parameter_list|,
name|String
name|preference
parameter_list|)
block|{
name|iId
operator|=
name|id
expr_stmt|;
name|iType
operator|=
name|type
expr_stmt|;
name|iOtherExams
operator|=
name|otherExams
expr_stmt|;
name|iPreference
operator|=
name|preference
expr_stmt|;
block|}
specifier|protected
name|DistributionConflict
parameter_list|(
name|ExamDistributionConstraint
name|dc
parameter_list|,
name|Exam
name|exclude
parameter_list|)
block|{
name|iId
operator|=
name|dc
operator|.
name|getId
argument_list|()
expr_stmt|;
name|iType
operator|=
name|dc
operator|.
name|getTypeString
argument_list|()
expr_stmt|;
name|iOtherExams
operator|=
operator|new
name|TreeSet
argument_list|()
expr_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|dc
operator|.
name|variables
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|exam
operator|.
name|equals
argument_list|(
name|exclude
argument_list|)
condition|)
continue|continue;
name|iOtherExams
operator|.
name|add
argument_list|(
name|exam
operator|.
name|getAssignment
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|ExamInfo
argument_list|(
name|exam
argument_list|)
else|:
operator|new
name|ExamAssignment
argument_list|(
name|exam
argument_list|,
operator|(
name|ExamPlacement
operator|)
name|exam
operator|.
name|getAssignment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iPreference
operator|=
operator|(
name|dc
operator|.
name|isHard
argument_list|()
condition|?
literal|"R"
else|:
name|dc
operator|.
name|getWeight
argument_list|()
operator|>=
literal|2
condition|?
literal|"-2"
else|:
literal|"-1"
operator|)
expr_stmt|;
block|}
specifier|protected
name|DistributionConflict
parameter_list|(
name|DistributionPref
name|pref
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
name|exclude
parameter_list|)
block|{
name|iPref
operator|=
name|pref
expr_stmt|;
name|iId
operator|=
name|pref
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iType
operator|=
name|pref
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|iOtherExams
operator|=
operator|new
name|TreeSet
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|pref
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|dObj
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
name|exam
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|)
name|dObj
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
if|if
condition|(
name|exam
operator|.
name|equals
argument_list|(
name|exclude
argument_list|)
condition|)
continue|continue;
name|iOtherExams
operator|.
name|add
argument_list|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|ExamInfo
argument_list|(
name|exam
argument_list|)
else|:
operator|new
name|ExamAssignment
argument_list|(
name|exam
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iPreference
operator|=
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Long
name|getId
parameter_list|()
block|{
return|return
name|iId
return|;
block|}
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|iType
return|;
block|}
specifier|public
name|String
name|getTypeHtml
parameter_list|()
block|{
name|String
name|title
init|=
name|PreferenceLevel
operator|.
name|prolog2string
argument_list|(
name|getPreference
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|getType
argument_list|()
operator|+
literal|" with "
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getOtherExams
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamAssignment
name|a
init|=
operator|(
name|ExamAssignment
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|title
operator|+=
name|a
operator|.
name|getExamName
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|title
operator|+=
literal|" and "
expr_stmt|;
block|}
return|return
literal|"<span style='font-weight:bold;color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|getPreference
argument_list|()
argument_list|)
operator|+
literal|";' title='"
operator|+
name|title
operator|+
literal|"'>"
operator|+
name|iType
operator|+
literal|"</span>"
return|;
block|}
specifier|public
name|String
name|getPreference
parameter_list|()
block|{
return|return
name|iPreference
return|;
block|}
specifier|public
name|TreeSet
name|getOtherExams
parameter_list|()
block|{
return|return
name|iOtherExams
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|DistributionConflict
name|c
init|=
operator|(
name|DistributionConflict
operator|)
name|o
decl_stmt|;
name|Iterator
name|i1
init|=
name|getOtherExams
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|,
name|i2
init|=
name|c
operator|.
name|getOtherExams
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ExamAssignment
name|a1
init|=
operator|(
name|ExamAssignment
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExamAssignment
name|a2
init|=
operator|(
name|ExamAssignment
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|a1
operator|.
name|equals
argument_list|(
name|a2
argument_list|)
condition|)
return|return
name|a1
operator|.
name|compareTo
argument_list|(
name|a2
argument_list|)
return|;
block|}
return|return
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
name|String
name|mouseOver
init|=
literal|""
decl_stmt|;
name|String
name|mouseOut
init|=
literal|""
decl_stmt|;
name|String
name|id
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getOtherExams
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamAssignment
name|a
init|=
operator|(
name|ExamAssignment
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|id
operator|+=
name|a
operator|.
name|getExamId
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|id
operator|+=
literal|":"
expr_stmt|;
block|}
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getOtherExams
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|ExamAssignment
name|a
init|=
operator|(
name|ExamAssignment
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|mouseOver
operator|+=
literal|"document.getElementById('"
operator|+
name|id
operator|+
literal|":"
operator|+
name|idx
operator|+
literal|"').style.backgroundColor='rgb(223,231,242)';"
expr_stmt|;
name|mouseOut
operator|+=
literal|"document.getElementById('"
operator|+
name|id
operator|+
literal|":"
operator|+
name|idx
operator|+
literal|"').style.backgroundColor='transparent';"
expr_stmt|;
block|}
name|idx
operator|=
literal|0
expr_stmt|;
name|ret
operator|+=
literal|"<tr id='"
operator|+
name|id
operator|+
literal|":"
operator|+
name|idx
operator|+
literal|"' onmouseover=\""
operator|+
name|mouseOver
operator|+
literal|"\" onmouseout=\""
operator|+
name|mouseOut
operator|+
literal|"\">"
expr_stmt|;
name|ret
operator|+=
literal|"<td valign='top' rowspan='"
operator|+
name|getOtherExams
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|"' style='font-weight:bold;color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|getPreference
argument_list|()
argument_list|)
operator|+
literal|";'>"
expr_stmt|;
name|ret
operator|+=
name|PreferenceLevel
operator|.
name|prolog2string
argument_list|(
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|+=
literal|"</td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td valign='top' rowspan='"
operator|+
name|getOtherExams
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|"' style='font-weight:bold;color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|getPreference
argument_list|()
argument_list|)
operator|+
literal|";'>"
expr_stmt|;
name|ret
operator|+=
name|getType
argument_list|()
expr_stmt|;
name|ret
operator|+=
literal|"</td>"
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getOtherExams
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|ExamAssignment
name|a
init|=
operator|(
name|ExamAssignment
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|+=
literal|"<td>"
operator|+
name|a
operator|.
name|getExamNameHtml
argument_list|()
operator|+
literal|"</td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td>"
operator|+
name|a
operator|.
name|getPeriodAbbreviationWithPref
argument_list|()
operator|+
literal|"</td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td>"
operator|+
name|a
operator|.
name|getRoomsNameWithPref
argument_list|(
literal|", "
argument_list|)
operator|+
literal|"</td>"
expr_stmt|;
name|ret
operator|+=
literal|"</tr>"
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|ret
operator|+=
literal|"<tr id='"
operator|+
name|id
operator|+
literal|":"
operator|+
operator|(
literal|1
operator|+
name|idx
operator|)
operator|+
literal|"' onmouseover=\""
operator|+
name|mouseOver
operator|+
literal|"\" onmouseout=\""
operator|+
name|mouseOut
operator|+
literal|"\">"
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
block|}
end_class

end_unit

