begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamInstructor
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamModel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamPlacement
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamStudent
import|;
end_import

begin_class
specifier|public
class|class
name|ExamAssignmentInfo
extends|extends
name|ExamAssignment
implements|implements
name|Serializable
block|{
specifier|private
name|TreeSet
name|iDirects
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
specifier|private
name|TreeSet
name|iBackToBacks
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
specifier|private
name|TreeSet
name|iMoreThanTwoADays
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
specifier|private
name|TreeSet
name|iInstructorDirects
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
specifier|private
name|TreeSet
name|iInstructorBackToBacks
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
specifier|private
name|TreeSet
name|iInstructorMoreThanTwoADays
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
specifier|public
name|ExamAssignmentInfo
parameter_list|(
name|ExamPlacement
name|placement
parameter_list|)
block|{
name|super
argument_list|(
name|placement
argument_list|)
expr_stmt|;
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|placement
operator|.
name|variable
argument_list|()
decl_stmt|;
name|ExamModel
name|model
init|=
operator|(
name|ExamModel
operator|)
name|exam
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|Hashtable
name|directs
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|exam
operator|.
name|getStudents
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamStudent
name|student
init|=
operator|(
name|ExamStudent
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|student
operator|.
name|getExams
argument_list|(
name|placement
operator|.
name|getPeriod
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|other
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|equals
argument_list|(
name|exam
argument_list|)
condition|)
continue|continue;
name|DirectConflict
name|dc
init|=
operator|(
name|DirectConflict
operator|)
name|directs
operator|.
name|get
argument_list|(
name|other
argument_list|)
decl_stmt|;
if|if
condition|(
name|dc
operator|==
literal|null
condition|)
block|{
name|dc
operator|=
operator|new
name|DirectConflict
argument_list|(
operator|new
name|ExamAssignment
argument_list|(
operator|(
name|ExamPlacement
operator|)
name|other
operator|.
name|getAssignment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|directs
operator|.
name|put
argument_list|(
name|other
argument_list|,
name|dc
argument_list|)
expr_stmt|;
block|}
else|else
name|dc
operator|.
name|incNrStudents
argument_list|()
expr_stmt|;
name|dc
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|iDirects
operator|.
name|addAll
argument_list|(
name|directs
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|btbDist
init|=
name|model
operator|.
name|getBackToBackDistance
argument_list|()
decl_stmt|;
name|Hashtable
name|backToBacks
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|exam
operator|.
name|getStudents
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamStudent
name|student
init|=
operator|(
name|ExamStudent
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|prev
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|model
operator|.
name|isDayBreakBackToBack
argument_list|()
operator|||
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|prev
argument_list|()
operator|.
name|getDay
argument_list|()
operator|==
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|getDay
argument_list|()
condition|)
block|{
name|Set
name|exams
init|=
name|student
operator|.
name|getExams
argument_list|(
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|prev
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|other
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|double
name|distance
init|=
name|placement
operator|.
name|getDistance
argument_list|(
operator|(
name|ExamPlacement
operator|)
name|other
operator|.
name|getAssignment
argument_list|()
argument_list|)
decl_stmt|;
name|BackToBackConflict
name|btb
init|=
operator|(
name|BackToBackConflict
operator|)
name|backToBacks
operator|.
name|get
argument_list|(
name|other
argument_list|)
decl_stmt|;
if|if
condition|(
name|btb
operator|==
literal|null
condition|)
block|{
name|btb
operator|=
operator|new
name|BackToBackConflict
argument_list|(
operator|new
name|ExamAssignment
argument_list|(
operator|(
name|ExamPlacement
operator|)
name|other
operator|.
name|getAssignment
argument_list|()
argument_list|)
argument_list|,
operator|(
name|btbDist
operator|<
literal|0
condition|?
literal|false
else|:
name|distance
operator|>
name|btbDist
operator|)
argument_list|,
name|distance
operator|/
literal|5.0
argument_list|)
expr_stmt|;
name|backToBacks
operator|.
name|put
argument_list|(
name|other
argument_list|,
name|btb
argument_list|)
expr_stmt|;
block|}
else|else
name|btb
operator|.
name|incNrStudents
argument_list|()
expr_stmt|;
name|btb
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|model
operator|.
name|isDayBreakBackToBack
argument_list|()
operator|||
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getDay
argument_list|()
operator|==
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|getDay
argument_list|()
condition|)
block|{
name|Set
name|exams
init|=
name|student
operator|.
name|getExams
argument_list|(
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|other
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|BackToBackConflict
name|btb
init|=
operator|(
name|BackToBackConflict
operator|)
name|backToBacks
operator|.
name|get
argument_list|(
name|other
argument_list|)
decl_stmt|;
name|double
name|distance
init|=
name|placement
operator|.
name|getDistance
argument_list|(
operator|(
name|ExamPlacement
operator|)
name|other
operator|.
name|getAssignment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|btb
operator|==
literal|null
condition|)
block|{
name|btb
operator|=
operator|new
name|BackToBackConflict
argument_list|(
operator|new
name|ExamAssignment
argument_list|(
operator|(
name|ExamPlacement
operator|)
name|other
operator|.
name|getAssignment
argument_list|()
argument_list|)
argument_list|,
operator|(
name|btbDist
operator|<
literal|0
condition|?
literal|false
else|:
name|distance
operator|>
name|btbDist
operator|)
argument_list|,
name|distance
argument_list|)
expr_stmt|;
name|backToBacks
operator|.
name|put
argument_list|(
name|other
argument_list|,
name|btb
argument_list|)
expr_stmt|;
block|}
else|else
name|btb
operator|.
name|incNrStudents
argument_list|()
expr_stmt|;
name|btb
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|iBackToBacks
operator|.
name|addAll
argument_list|(
name|backToBacks
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|Hashtable
name|m2ds
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|exam
operator|.
name|getStudents
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamStudent
name|student
init|=
operator|(
name|ExamStudent
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Set
name|exams
init|=
name|student
operator|.
name|getExamsADay
argument_list|(
name|placement
operator|.
name|getPeriod
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|nrExams
init|=
name|exams
operator|.
name|size
argument_list|()
operator|+
operator|(
name|exams
operator|.
name|contains
argument_list|(
name|exam
argument_list|)
condition|?
literal|0
else|:
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|nrExams
operator|<=
literal|2
condition|)
continue|continue;
name|TreeSet
name|examIds
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|TreeSet
name|otherExams
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|other
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|equals
argument_list|(
name|exam
argument_list|)
condition|)
continue|continue;
name|examIds
operator|.
name|add
argument_list|(
name|other
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|otherExams
operator|.
name|add
argument_list|(
operator|new
name|ExamAssignment
argument_list|(
operator|(
name|ExamPlacement
operator|)
name|other
operator|.
name|getAssignment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MoreThanTwoADayConflict
name|m2d
init|=
operator|(
name|MoreThanTwoADayConflict
operator|)
name|m2ds
operator|.
name|get
argument_list|(
name|examIds
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m2d
operator|==
literal|null
condition|)
block|{
name|m2d
operator|=
operator|new
name|MoreThanTwoADayConflict
argument_list|(
name|otherExams
argument_list|)
expr_stmt|;
name|m2ds
operator|.
name|put
argument_list|(
name|examIds
operator|.
name|toString
argument_list|()
argument_list|,
name|m2d
argument_list|)
expr_stmt|;
block|}
else|else
name|m2d
operator|.
name|incNrStudents
argument_list|()
expr_stmt|;
name|m2d
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iMoreThanTwoADays
operator|.
name|addAll
argument_list|(
name|m2ds
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|Hashtable
name|idirects
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|exam
operator|.
name|getInstructors
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamInstructor
name|instructor
init|=
operator|(
name|ExamInstructor
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|instructor
operator|.
name|getExams
argument_list|(
name|placement
operator|.
name|getPeriod
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|other
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|equals
argument_list|(
name|exam
argument_list|)
condition|)
continue|continue;
name|DirectConflict
name|dc
init|=
operator|(
name|DirectConflict
operator|)
name|idirects
operator|.
name|get
argument_list|(
name|other
argument_list|)
decl_stmt|;
if|if
condition|(
name|dc
operator|==
literal|null
condition|)
block|{
name|dc
operator|=
operator|new
name|DirectConflict
argument_list|(
operator|new
name|ExamAssignment
argument_list|(
operator|(
name|ExamPlacement
operator|)
name|other
operator|.
name|getAssignment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|idirects
operator|.
name|put
argument_list|(
name|other
argument_list|,
name|dc
argument_list|)
expr_stmt|;
block|}
else|else
name|dc
operator|.
name|incNrStudents
argument_list|()
expr_stmt|;
name|dc
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|instructor
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|iInstructorDirects
operator|.
name|addAll
argument_list|(
name|idirects
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|Hashtable
name|ibackToBacks
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|exam
operator|.
name|getInstructors
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamInstructor
name|instructor
init|=
operator|(
name|ExamInstructor
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|prev
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|model
operator|.
name|isDayBreakBackToBack
argument_list|()
operator|||
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|prev
argument_list|()
operator|.
name|getDay
argument_list|()
operator|==
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|getDay
argument_list|()
condition|)
block|{
name|Set
name|exams
init|=
name|instructor
operator|.
name|getExams
argument_list|(
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|prev
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|other
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|double
name|distance
init|=
name|placement
operator|.
name|getDistance
argument_list|(
operator|(
name|ExamPlacement
operator|)
name|other
operator|.
name|getAssignment
argument_list|()
argument_list|)
decl_stmt|;
name|BackToBackConflict
name|btb
init|=
operator|(
name|BackToBackConflict
operator|)
name|ibackToBacks
operator|.
name|get
argument_list|(
name|other
argument_list|)
decl_stmt|;
if|if
condition|(
name|btb
operator|==
literal|null
condition|)
block|{
name|btb
operator|=
operator|new
name|BackToBackConflict
argument_list|(
operator|new
name|ExamAssignment
argument_list|(
operator|(
name|ExamPlacement
operator|)
name|other
operator|.
name|getAssignment
argument_list|()
argument_list|)
argument_list|,
operator|(
name|btbDist
operator|<
literal|0
condition|?
literal|false
else|:
name|distance
operator|>
name|btbDist
operator|)
argument_list|,
name|distance
operator|/
literal|5.0
argument_list|)
expr_stmt|;
name|ibackToBacks
operator|.
name|put
argument_list|(
name|other
argument_list|,
name|btb
argument_list|)
expr_stmt|;
block|}
else|else
name|btb
operator|.
name|incNrStudents
argument_list|()
expr_stmt|;
name|btb
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|instructor
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|model
operator|.
name|isDayBreakBackToBack
argument_list|()
operator|||
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getDay
argument_list|()
operator|==
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|getDay
argument_list|()
condition|)
block|{
name|Set
name|exams
init|=
name|instructor
operator|.
name|getExams
argument_list|(
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|other
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|BackToBackConflict
name|btb
init|=
operator|(
name|BackToBackConflict
operator|)
name|ibackToBacks
operator|.
name|get
argument_list|(
name|other
argument_list|)
decl_stmt|;
name|double
name|distance
init|=
name|placement
operator|.
name|getDistance
argument_list|(
operator|(
name|ExamPlacement
operator|)
name|other
operator|.
name|getAssignment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|btb
operator|==
literal|null
condition|)
block|{
name|btb
operator|=
operator|new
name|BackToBackConflict
argument_list|(
operator|new
name|ExamAssignment
argument_list|(
operator|(
name|ExamPlacement
operator|)
name|other
operator|.
name|getAssignment
argument_list|()
argument_list|)
argument_list|,
operator|(
name|btbDist
operator|<
literal|0
condition|?
literal|false
else|:
name|distance
operator|>
name|btbDist
operator|)
argument_list|,
name|distance
argument_list|)
expr_stmt|;
name|ibackToBacks
operator|.
name|put
argument_list|(
name|other
argument_list|,
name|btb
argument_list|)
expr_stmt|;
block|}
else|else
name|btb
operator|.
name|incNrStudents
argument_list|()
expr_stmt|;
name|btb
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|instructor
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|iInstructorBackToBacks
operator|.
name|addAll
argument_list|(
name|ibackToBacks
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|Hashtable
name|im2ds
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|exam
operator|.
name|getInstructors
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamInstructor
name|instructor
init|=
operator|(
name|ExamInstructor
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Set
name|exams
init|=
name|instructor
operator|.
name|getExamsADay
argument_list|(
name|placement
operator|.
name|getPeriod
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|nrExams
init|=
name|exams
operator|.
name|size
argument_list|()
operator|+
operator|(
name|exams
operator|.
name|contains
argument_list|(
name|exam
argument_list|)
condition|?
literal|0
else|:
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|nrExams
operator|<=
literal|2
condition|)
continue|continue;
name|TreeSet
name|examIds
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|TreeSet
name|otherExams
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|other
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|equals
argument_list|(
name|exam
argument_list|)
condition|)
continue|continue;
name|examIds
operator|.
name|add
argument_list|(
name|other
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|otherExams
operator|.
name|add
argument_list|(
operator|new
name|ExamAssignment
argument_list|(
operator|(
name|ExamPlacement
operator|)
name|other
operator|.
name|getAssignment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MoreThanTwoADayConflict
name|m2d
init|=
operator|(
name|MoreThanTwoADayConflict
operator|)
name|im2ds
operator|.
name|get
argument_list|(
name|examIds
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m2d
operator|==
literal|null
condition|)
block|{
name|m2d
operator|=
operator|new
name|MoreThanTwoADayConflict
argument_list|(
name|otherExams
argument_list|)
expr_stmt|;
name|im2ds
operator|.
name|put
argument_list|(
name|examIds
operator|.
name|toString
argument_list|()
argument_list|,
name|m2d
argument_list|)
expr_stmt|;
block|}
else|else
name|m2d
operator|.
name|incNrStudents
argument_list|()
expr_stmt|;
name|m2d
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|instructor
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iInstructorMoreThanTwoADays
operator|.
name|addAll
argument_list|(
name|im2ds
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ExamAssignmentInfo
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
name|exam
parameter_list|)
block|{
name|super
argument_list|(
name|exam
argument_list|)
expr_stmt|;
if|if
condition|(
name|exam
operator|.
name|getConflicts
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|exam
operator|.
name|getConflicts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamConflict
name|conf
init|=
operator|(
name|ExamConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|isDirectConflict
argument_list|()
condition|)
block|{
name|ExamAssignment
name|other
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|conf
operator|.
name|getExams
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
name|x
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|equals
argument_list|(
name|exam
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|x
operator|.
name|getAssignedPeriod
argument_list|()
operator|!=
literal|null
condition|)
name|other
operator|=
operator|new
name|ExamAssignment
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|conf
operator|.
name|getNrStudents
argument_list|()
operator|>
literal|0
condition|)
name|iDirects
operator|.
name|add
argument_list|(
operator|new
name|DirectConflict
argument_list|(
name|other
argument_list|,
name|conf
operator|.
name|getNrStudents
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|getNrInstructors
argument_list|()
operator|>
literal|0
condition|)
name|iInstructorDirects
operator|.
name|add
argument_list|(
operator|new
name|DirectConflict
argument_list|(
name|other
argument_list|,
name|conf
operator|.
name|getNrInstructors
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|conf
operator|.
name|isBackToBackConflict
argument_list|()
condition|)
block|{
name|ExamAssignment
name|other
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|conf
operator|.
name|getExams
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
name|x
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|equals
argument_list|(
name|exam
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|x
operator|.
name|getAssignedPeriod
argument_list|()
operator|!=
literal|null
condition|)
name|other
operator|=
operator|new
name|ExamAssignment
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|conf
operator|.
name|getNrStudents
argument_list|()
operator|>
literal|0
condition|)
name|iBackToBacks
operator|.
name|add
argument_list|(
operator|new
name|BackToBackConflict
argument_list|(
name|other
argument_list|,
name|conf
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|conf
operator|.
name|isDistanceBackToBackConflict
argument_list|()
argument_list|,
name|conf
operator|.
name|getDistance
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|getNrInstructors
argument_list|()
operator|>
literal|0
condition|)
name|iInstructorBackToBacks
operator|.
name|add
argument_list|(
operator|new
name|BackToBackConflict
argument_list|(
name|other
argument_list|,
name|conf
operator|.
name|getNrInstructors
argument_list|()
argument_list|,
name|conf
operator|.
name|isDistanceBackToBackConflict
argument_list|()
argument_list|,
name|conf
operator|.
name|getDistance
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|conf
operator|.
name|isMoreThanTwoADayConflict
argument_list|()
condition|)
block|{
name|TreeSet
name|other
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|conf
operator|.
name|getExams
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
name|x
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|equals
argument_list|(
name|exam
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|x
operator|.
name|getAssignedPeriod
argument_list|()
operator|!=
literal|null
condition|)
name|other
operator|.
name|add
argument_list|(
operator|new
name|ExamAssignment
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
continue|continue;
if|if
condition|(
name|conf
operator|.
name|getNrStudents
argument_list|()
operator|>
literal|0
condition|)
name|iMoreThanTwoADays
operator|.
name|add
argument_list|(
operator|new
name|MoreThanTwoADayConflict
argument_list|(
name|other
argument_list|,
name|conf
operator|.
name|getNrStudents
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|getNrInstructors
argument_list|()
operator|>
literal|0
condition|)
name|iInstructorMoreThanTwoADays
operator|.
name|add
argument_list|(
operator|new
name|MoreThanTwoADayConflict
argument_list|(
name|other
argument_list|,
name|conf
operator|.
name|getNrInstructors
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|TreeSet
name|getDirectConflicts
parameter_list|()
block|{
return|return
name|iDirects
return|;
block|}
specifier|public
name|TreeSet
name|getBackToBackConflicts
parameter_list|()
block|{
return|return
name|iBackToBacks
return|;
block|}
specifier|public
name|TreeSet
name|getMoreThanTwoADaysConflicts
parameter_list|()
block|{
return|return
name|iMoreThanTwoADays
return|;
block|}
specifier|public
name|int
name|countDirectConflicts
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iDirects
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DirectConflict
name|dc
init|=
operator|(
name|DirectConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|+=
name|dc
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|countBackToBackConflicts
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iBackToBacks
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BackToBackConflict
name|btb
init|=
operator|(
name|BackToBackConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|+=
name|btb
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|countDistanceBackToBackConflicts
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iBackToBacks
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BackToBackConflict
name|btb
init|=
operator|(
name|BackToBackConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|btb
operator|.
name|isDistance
argument_list|()
condition|)
name|ret
operator|+=
name|btb
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|countMoreThanTwoConflicts
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iMoreThanTwoADays
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MoreThanTwoADayConflict
name|m2d
init|=
operator|(
name|MoreThanTwoADayConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|+=
name|m2d
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|boolean
name|hasConflicts
parameter_list|()
block|{
return|return
operator|!
name|getDirectConflicts
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|getBackToBackConflicts
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|getMoreThanTwoADaysConflicts
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getConflictTable
parameter_list|(
name|boolean
name|header
parameter_list|)
block|{
name|String
name|ret
init|=
literal|"<table border='0' width='95%' cellspacing='0' cellpadding='3'>"
decl_stmt|;
if|if
condition|(
name|header
condition|)
block|{
name|ret
operator|+=
literal|"<tr>"
expr_stmt|;
name|ret
operator|+=
literal|"<td><i>Students</i></td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td><i>Conflict</i></td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td><i>Exam</i></td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td><i>Period</i></td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td><i>Room</i></td>"
expr_stmt|;
name|ret
operator|+=
literal|"</tr>"
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|getDirectConflicts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|ret
operator|+=
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getMoreThanTwoADaysConflicts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|ret
operator|+=
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getBackToBackConflicts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|ret
operator|+=
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|+=
literal|"</table>"
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|TreeSet
name|getInstructorDirectConflicts
parameter_list|()
block|{
return|return
name|iInstructorDirects
return|;
block|}
specifier|public
name|TreeSet
name|getInstructorBackToBackConflicts
parameter_list|()
block|{
return|return
name|iInstructorBackToBacks
return|;
block|}
specifier|public
name|TreeSet
name|getInstructorMoreThanTwoADaysConflicts
parameter_list|()
block|{
return|return
name|iInstructorMoreThanTwoADays
return|;
block|}
specifier|public
name|int
name|countInstructorDirectConflicts
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iInstructorDirects
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DirectConflict
name|dc
init|=
operator|(
name|DirectConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|+=
name|dc
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|countInstructorBackToBackConflicts
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iInstructorBackToBacks
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BackToBackConflict
name|btb
init|=
operator|(
name|BackToBackConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|+=
name|btb
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|countInstructorDistanceBackToBackConflicts
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iInstructorBackToBacks
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BackToBackConflict
name|btb
init|=
operator|(
name|BackToBackConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|btb
operator|.
name|isDistance
argument_list|()
condition|)
name|ret
operator|+=
name|btb
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|countInstructorMoreThanTwoConflicts
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iInstructorMoreThanTwoADays
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MoreThanTwoADayConflict
name|m2d
init|=
operator|(
name|MoreThanTwoADayConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|+=
name|m2d
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|boolean
name|hasInstructorConflicts
parameter_list|()
block|{
return|return
operator|!
name|getInstructorDirectConflicts
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|getInstructorBackToBackConflicts
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|getInstructorMoreThanTwoADaysConflicts
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getInstructorConflictTable
parameter_list|(
name|boolean
name|header
parameter_list|)
block|{
name|String
name|ret
init|=
literal|"<table border='0' width='95%' cellspacing='0' cellpadding='3'>"
decl_stmt|;
if|if
condition|(
name|header
condition|)
block|{
name|ret
operator|+=
literal|"<tr>"
expr_stmt|;
name|ret
operator|+=
literal|"<td><i>Instructors</i></td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td><i>Conflict</i></td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td><i>Exam</i></td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td><i>Period</i></td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td><i>Room</i></td>"
expr_stmt|;
name|ret
operator|+=
literal|"</tr>"
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|getInstructorDirectConflicts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|ret
operator|+=
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getInstructorMoreThanTwoADaysConflicts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|ret
operator|+=
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getInstructorBackToBackConflicts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|ret
operator|+=
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|+=
literal|"</table>"
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
class|class
name|DirectConflict
implements|implements
name|Serializable
implements|,
name|Comparable
block|{
specifier|protected
name|ExamAssignment
name|iOtherExam
decl_stmt|;
specifier|protected
name|int
name|iNrStudents
init|=
literal|1
decl_stmt|;
specifier|protected
specifier|transient
name|Vector
name|iStudents
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
specifier|protected
name|DirectConflict
parameter_list|(
name|ExamAssignment
name|otherExam
parameter_list|)
block|{
name|iOtherExam
operator|=
name|otherExam
expr_stmt|;
block|}
specifier|protected
name|DirectConflict
parameter_list|(
name|ExamAssignment
name|otherExam
parameter_list|,
name|int
name|nrStudents
parameter_list|)
block|{
name|iOtherExam
operator|=
name|otherExam
expr_stmt|;
name|iNrStudents
operator|=
name|nrStudents
expr_stmt|;
block|}
specifier|protected
name|void
name|incNrStudents
parameter_list|()
block|{
name|iNrStudents
operator|++
expr_stmt|;
block|}
specifier|public
name|int
name|getNrStudents
parameter_list|()
block|{
return|return
name|iNrStudents
return|;
block|}
specifier|public
name|Vector
name|getStudents
parameter_list|()
block|{
return|return
name|iStudents
return|;
block|}
specifier|public
name|ExamAssignment
name|getOtherExam
parameter_list|()
block|{
return|return
name|iOtherExam
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|DirectConflict
name|c
init|=
operator|(
name|DirectConflict
operator|)
name|o
decl_stmt|;
name|int
name|cmp
init|=
operator|-
name|Double
operator|.
name|compare
argument_list|(
name|getNrStudents
argument_list|()
argument_list|,
name|c
operator|.
name|getNrStudents
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|getOtherExam
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c
operator|.
name|getOtherExam
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
name|ret
operator|+=
literal|"<tr onmouseover=\"this.style.backgroundColor='rgb(223,231,242)';\" onmouseout=\"this.style.backgroundColor='transparent';\">"
expr_stmt|;
name|ret
operator|+=
literal|"<td style='font-weight:bold;color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|";'>"
expr_stmt|;
name|ret
operator|+=
name|String
operator|.
name|valueOf
argument_list|(
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|+=
literal|"</td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td style='font-weight:bold;color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|";'>"
expr_stmt|;
name|ret
operator|+=
literal|"Direct"
expr_stmt|;
name|ret
operator|+=
literal|"</td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td>"
operator|+
name|getOtherExam
argument_list|()
operator|.
name|getExamName
argument_list|()
operator|+
literal|"</td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td>"
operator|+
name|getOtherExam
argument_list|()
operator|.
name|getPeriodAbbreviationWithPref
argument_list|()
operator|+
literal|"</td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td>"
operator|+
name|getOtherExam
argument_list|()
operator|.
name|getRoomsNameWithPref
argument_list|(
literal|", "
argument_list|)
operator|+
literal|"</td>"
expr_stmt|;
name|ret
operator|+=
literal|"</tr>"
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|BackToBackConflict
implements|implements
name|Serializable
implements|,
name|Comparable
block|{
specifier|protected
name|ExamAssignment
name|iOtherExam
decl_stmt|;
specifier|protected
name|int
name|iNrStudents
init|=
literal|1
decl_stmt|;
specifier|protected
name|boolean
name|iIsDistance
init|=
literal|false
decl_stmt|;
specifier|protected
specifier|transient
name|Vector
name|iStudents
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
specifier|protected
name|double
name|iDistance
init|=
literal|0
decl_stmt|;
specifier|protected
name|BackToBackConflict
parameter_list|(
name|ExamAssignment
name|otherExam
parameter_list|,
name|boolean
name|isDistance
parameter_list|,
name|double
name|distance
parameter_list|)
block|{
name|iOtherExam
operator|=
name|otherExam
expr_stmt|;
name|iIsDistance
operator|=
name|isDistance
expr_stmt|;
name|iDistance
operator|=
name|distance
expr_stmt|;
block|}
specifier|protected
name|BackToBackConflict
parameter_list|(
name|ExamAssignment
name|otherExam
parameter_list|,
name|int
name|nrStudents
parameter_list|,
name|boolean
name|isDistance
parameter_list|,
name|double
name|distance
parameter_list|)
block|{
name|iOtherExam
operator|=
name|otherExam
expr_stmt|;
name|iNrStudents
operator|=
name|nrStudents
expr_stmt|;
name|iIsDistance
operator|=
name|isDistance
expr_stmt|;
name|iDistance
operator|=
name|distance
expr_stmt|;
block|}
specifier|protected
name|void
name|incNrStudents
parameter_list|()
block|{
name|iNrStudents
operator|++
expr_stmt|;
block|}
specifier|public
name|int
name|getNrStudents
parameter_list|()
block|{
return|return
name|iNrStudents
return|;
block|}
specifier|public
name|boolean
name|isDistance
parameter_list|()
block|{
return|return
name|iIsDistance
return|;
block|}
specifier|public
name|ExamAssignment
name|getOtherExam
parameter_list|()
block|{
return|return
name|iOtherExam
return|;
block|}
specifier|public
name|Vector
name|getStudents
parameter_list|()
block|{
return|return
name|iStudents
return|;
block|}
specifier|public
name|double
name|getDistance
parameter_list|()
block|{
return|return
name|iDistance
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|BackToBackConflict
name|c
init|=
operator|(
name|BackToBackConflict
operator|)
name|o
decl_stmt|;
name|int
name|cmp
init|=
operator|-
name|Double
operator|.
name|compare
argument_list|(
name|getNrStudents
argument_list|()
argument_list|,
name|c
operator|.
name|getNrStudents
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
if|if
condition|(
name|isDistance
argument_list|()
operator|!=
name|c
operator|.
name|isDistance
argument_list|()
condition|)
return|return
operator|(
name|isDistance
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
return|return
name|getOtherExam
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c
operator|.
name|getOtherExam
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
name|ret
operator|+=
literal|"<tr onmouseover=\"this.style.backgroundColor='rgb(223,231,242)';\" onmouseout=\"this.style.backgroundColor='transparent';\">"
expr_stmt|;
name|ret
operator|+=
literal|"<td style='font-weight:bold;color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"1"
argument_list|)
operator|+
literal|";'>"
expr_stmt|;
name|ret
operator|+=
name|String
operator|.
name|valueOf
argument_list|(
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|+=
literal|"</td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td style='font-weight:bold;color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"1"
argument_list|)
operator|+
literal|";'>"
expr_stmt|;
name|ret
operator|+=
literal|"Back-To-Back"
expr_stmt|;
if|if
condition|(
name|isDistance
argument_list|()
condition|)
name|ret
operator|+=
literal|"<br>("
operator|+
name|Math
operator|.
name|round
argument_list|(
literal|10.0
operator|*
name|getDistance
argument_list|()
argument_list|)
operator|+
literal|" m)"
expr_stmt|;
name|ret
operator|+=
literal|"</td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td>"
operator|+
name|getOtherExam
argument_list|()
operator|.
name|getExamName
argument_list|()
operator|+
literal|"</td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td>"
operator|+
name|getOtherExam
argument_list|()
operator|.
name|getPeriodAbbreviationWithPref
argument_list|()
operator|+
literal|"</td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td>"
operator|+
name|getOtherExam
argument_list|()
operator|.
name|getRoomsNameWithPref
argument_list|(
literal|", "
argument_list|)
operator|+
literal|"</td>"
expr_stmt|;
name|ret
operator|+=
literal|"</tr>"
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MoreThanTwoADayConflict
implements|implements
name|Serializable
implements|,
name|Comparable
block|{
specifier|protected
name|TreeSet
name|iOtherExams
decl_stmt|;
specifier|protected
name|int
name|iNrStudents
init|=
literal|1
decl_stmt|;
specifier|protected
specifier|transient
name|Vector
name|iStudents
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
specifier|protected
name|MoreThanTwoADayConflict
parameter_list|(
name|TreeSet
name|otherExams
parameter_list|)
block|{
name|iOtherExams
operator|=
name|otherExams
expr_stmt|;
block|}
specifier|protected
name|MoreThanTwoADayConflict
parameter_list|(
name|TreeSet
name|otherExams
parameter_list|,
name|int
name|nrStudents
parameter_list|)
block|{
name|iOtherExams
operator|=
name|otherExams
expr_stmt|;
name|iNrStudents
operator|=
name|nrStudents
expr_stmt|;
block|}
specifier|protected
name|void
name|incNrStudents
parameter_list|()
block|{
name|iNrStudents
operator|++
expr_stmt|;
block|}
specifier|public
name|int
name|getNrStudents
parameter_list|()
block|{
return|return
name|iNrStudents
return|;
block|}
specifier|public
name|Vector
name|getStudents
parameter_list|()
block|{
return|return
name|iStudents
return|;
block|}
specifier|public
name|TreeSet
name|getOtherExams
parameter_list|()
block|{
return|return
name|iOtherExams
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|MoreThanTwoADayConflict
name|c
init|=
operator|(
name|MoreThanTwoADayConflict
operator|)
name|o
decl_stmt|;
name|int
name|cmp
init|=
operator|-
name|Double
operator|.
name|compare
argument_list|(
name|getNrStudents
argument_list|()
argument_list|,
name|c
operator|.
name|getNrStudents
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
operator|-
name|Double
operator|.
name|compare
argument_list|(
name|getOtherExams
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|c
operator|.
name|getOtherExams
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|Iterator
name|i1
init|=
name|getOtherExams
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|,
name|i2
init|=
name|c
operator|.
name|getOtherExams
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ExamAssignment
name|a1
init|=
operator|(
name|ExamAssignment
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExamAssignment
name|a2
init|=
operator|(
name|ExamAssignment
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|a1
operator|.
name|equals
argument_list|(
name|a2
argument_list|)
condition|)
return|return
name|a1
operator|.
name|compareTo
argument_list|(
name|a2
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
name|String
name|mouseOver
init|=
literal|""
decl_stmt|;
name|String
name|mouseOut
init|=
literal|""
decl_stmt|;
name|String
name|id
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getOtherExams
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamAssignment
name|a
init|=
operator|(
name|ExamAssignment
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|id
operator|+=
name|a
operator|.
name|getExamId
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|id
operator|+=
literal|":"
expr_stmt|;
block|}
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getOtherExams
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|ExamAssignment
name|a
init|=
operator|(
name|ExamAssignment
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|mouseOver
operator|+=
literal|"document.getElementById('"
operator|+
name|id
operator|+
literal|":"
operator|+
name|idx
operator|+
literal|"').style.backgroundColor='rgb(223,231,242)';"
expr_stmt|;
name|mouseOut
operator|+=
literal|"document.getElementById('"
operator|+
name|id
operator|+
literal|":"
operator|+
name|idx
operator|+
literal|"').style.backgroundColor='transparent';"
expr_stmt|;
block|}
name|idx
operator|=
literal|0
expr_stmt|;
name|ret
operator|+=
literal|"<tr id='"
operator|+
name|id
operator|+
literal|":"
operator|+
name|idx
operator|+
literal|"' onmouseover=\""
operator|+
name|mouseOver
operator|+
literal|"\" onmouseout=\""
operator|+
name|mouseOut
operator|+
literal|"\">"
expr_stmt|;
name|ret
operator|+=
literal|"<td valign='top' rowspan='"
operator|+
name|getOtherExams
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|"' style='font-weight:bold;color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"2"
argument_list|)
operator|+
literal|";'>"
expr_stmt|;
name|ret
operator|+=
name|String
operator|.
name|valueOf
argument_list|(
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|+=
literal|"</td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td valign='top' rowspan='"
operator|+
name|getOtherExams
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|"' style='font-weight:bold;color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"2"
argument_list|)
operator|+
literal|";'>"
expr_stmt|;
name|ret
operator|+=
literal|"&gt;2 A Day"
expr_stmt|;
name|ret
operator|+=
literal|"</td>"
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getOtherExams
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|ExamAssignment
name|a
init|=
operator|(
name|ExamAssignment
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|+=
literal|"<td>"
operator|+
name|a
operator|.
name|getExamName
argument_list|()
operator|+
literal|"</td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td>"
operator|+
name|a
operator|.
name|getPeriodAbbreviationWithPref
argument_list|()
operator|+
literal|"</td>"
expr_stmt|;
name|ret
operator|+=
literal|"<td>"
operator|+
name|a
operator|.
name|getRoomsNameWithPref
argument_list|(
literal|", "
argument_list|)
operator|+
literal|"</td>"
expr_stmt|;
name|ret
operator|+=
literal|"</tr>"
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|ret
operator|+=
literal|"<tr id='"
operator|+
name|id
operator|+
literal|":"
operator|+
operator|(
literal|1
operator|+
name|idx
operator|)
operator|+
literal|"' onmouseover=\""
operator|+
name|mouseOver
operator|+
literal|"\" onmouseout=\""
operator|+
name|mouseOut
operator|+
literal|"\">"
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
block|}
end_class

end_unit

