begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|preference
operator|.
name|MinMaxPreferenceCombination
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|preference
operator|.
name|PreferenceCombination
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|preference
operator|.
name|SumPreferenceCombination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Building
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|BuildingPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeaturePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroupPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ExamSolverProxy
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ExamInfoModel
implements|implements
name|Serializable
block|{
specifier|private
specifier|transient
name|ExamSolverProxy
name|iSolver
init|=
literal|null
decl_stmt|;
specifier|private
name|ExamInfo
name|iExam
init|=
literal|null
decl_stmt|;
specifier|private
name|ExamAssignmentInfo
name|iExamAssignment
init|=
literal|null
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|iPeriods
init|=
literal|null
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|ExamRoomInfo
argument_list|>
name|iRooms
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iPeriodTableOrd
init|=
literal|0
decl_stmt|;
specifier|public
name|void
name|setSolver
parameter_list|(
name|ExamSolverProxy
name|solver
parameter_list|)
block|{
name|iSolver
operator|=
name|solver
expr_stmt|;
block|}
specifier|public
name|ExamSolverProxy
name|getSolver
parameter_list|()
block|{
return|return
name|iSolver
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|iExam
operator|=
literal|null
expr_stmt|;
name|iExamAssignment
operator|=
literal|null
expr_stmt|;
name|iRooms
operator|=
literal|null
expr_stmt|;
name|iPeriods
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|ExamInfo
name|getExam
parameter_list|()
block|{
return|return
name|iExam
return|;
block|}
specifier|public
name|ExamAssignmentInfo
name|getExamAssignment
parameter_list|()
block|{
if|if
condition|(
name|iExam
operator|instanceof
name|ExamAssignmentInfo
condition|)
return|return
operator|(
name|ExamAssignmentInfo
operator|)
name|iExam
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|isExamAssigned
parameter_list|()
block|{
return|return
name|getExamAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|getExamAssignment
argument_list|()
operator|.
name|getPeriodId
argument_list|()
operator|!=
literal|null
return|;
block|}
specifier|public
name|String
name|assign
parameter_list|()
block|{
if|if
condition|(
name|getSolver
argument_list|()
operator|!=
literal|null
operator|&&
name|getSolver
argument_list|()
operator|.
name|getExamType
argument_list|()
operator|==
name|getExam
argument_list|()
operator|.
name|getExamType
argument_list|()
condition|)
block|{
return|return
name|getSolver
argument_list|()
operator|.
name|assign
argument_list|(
name|iExamAssignment
argument_list|)
return|;
block|}
else|else
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
return|return
name|getExam
argument_list|()
operator|.
name|getExam
argument_list|(
name|hibSession
argument_list|)
operator|.
name|assign
argument_list|(
name|iExamAssignment
argument_list|,
name|hibSession
argument_list|)
return|;
block|}
block|}
specifier|public
name|boolean
name|getCanAssign
parameter_list|()
block|{
return|return
name|iExamAssignment
operator|!=
literal|null
operator|&&
name|iExamAssignment
operator|.
name|isValid
argument_list|()
return|;
block|}
specifier|public
name|String
name|getAssignConfirm
parameter_list|()
block|{
if|if
condition|(
name|getSolver
argument_list|()
operator|!=
literal|null
operator|&&
name|getSolver
argument_list|()
operator|.
name|getExamType
argument_list|()
operator|==
name|getExam
argument_list|()
operator|.
name|getExamType
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
else|else
block|{
return|return
literal|"The selected assignment will be done directly in the database. Are you sure?"
return|;
block|}
block|}
specifier|public
name|void
name|setExam
parameter_list|(
name|Exam
name|exam
parameter_list|)
block|{
name|iPeriods
operator|=
literal|null
expr_stmt|;
name|iRooms
operator|=
literal|null
expr_stmt|;
name|iExamAssignment
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|getSolver
argument_list|()
operator|!=
literal|null
operator|&&
name|getSolver
argument_list|()
operator|.
name|getExamType
argument_list|()
operator|==
name|exam
operator|.
name|getExamType
argument_list|()
condition|)
block|{
name|iExam
operator|=
name|getSolver
argument_list|()
operator|.
name|getAssignmentInfo
argument_list|(
name|exam
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iExam
operator|==
literal|null
condition|)
name|iExam
operator|=
name|getSolver
argument_list|()
operator|.
name|getInfo
argument_list|(
name|exam
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iExam
operator|==
literal|null
condition|)
name|iExam
operator|=
operator|new
name|ExamInfo
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|!=
literal|null
condition|)
name|iExam
operator|=
operator|new
name|ExamAssignmentInfo
argument_list|(
name|exam
argument_list|)
expr_stmt|;
else|else
name|iExam
operator|=
operator|new
name|ExamInfo
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ExamAssignmentInfo
name|getSelectedAssignment
parameter_list|()
block|{
return|return
name|iExamAssignment
return|;
block|}
specifier|public
name|void
name|setPeriod
parameter_list|(
name|long
name|periodId
parameter_list|)
block|{
name|iRooms
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|isExamAssigned
argument_list|()
operator|&&
name|getExamAssignment
argument_list|()
operator|.
name|getPeriodId
argument_list|()
operator|==
name|periodId
condition|)
block|{
name|iExamAssignment
operator|=
literal|null
expr_stmt|;
return|return;
block|}
for|for
control|(
name|ExamAssignmentInfo
name|period
range|:
name|getPeriods
argument_list|()
control|)
block|{
if|if
condition|(
name|periodId
operator|==
name|period
operator|.
name|getPeriodId
argument_list|()
condition|)
block|{
name|iExamAssignment
operator|=
name|period
expr_stmt|;
return|return;
block|}
block|}
name|iExamAssignment
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|setRooms
parameter_list|(
name|String
name|rooms
parameter_list|)
block|{
if|if
condition|(
name|iExamAssignment
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isExamAssigned
argument_list|()
condition|)
block|{
for|for
control|(
name|ExamAssignmentInfo
name|period
range|:
name|getPeriods
argument_list|()
control|)
block|{
if|if
condition|(
name|getExamAssignment
argument_list|()
operator|.
name|getPeriodId
argument_list|()
operator|.
name|equals
argument_list|(
name|period
operator|.
name|getPeriodId
argument_list|()
argument_list|)
condition|)
block|{
name|iExamAssignment
operator|=
name|period
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|iExamAssignment
operator|==
literal|null
condition|)
return|return;
name|iExamAssignment
operator|.
name|getRooms
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|StringTokenizer
name|stk
init|=
operator|new
name|StringTokenizer
argument_list|(
name|rooms
argument_list|,
literal|":"
argument_list|)
init|;
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|token
init|=
name|stk
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
name|Long
name|roomId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|token
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|token
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ExamRoomInfo
name|room
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ExamRoomInfo
name|r
range|:
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getLocationId
argument_list|()
operator|.
name|equals
argument_list|(
name|roomId
argument_list|)
condition|)
block|{
name|room
operator|=
name|r
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|room
operator|!=
literal|null
condition|)
name|iExamAssignment
operator|.
name|getRooms
argument_list|()
operator|.
name|add
argument_list|(
name|room
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|apply
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"pord"
argument_list|)
operator|!=
literal|null
condition|)
name|iPeriodTableOrd
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"pord"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|dc2html
parameter_list|(
name|boolean
name|html
parameter_list|,
name|int
name|conf
parameter_list|,
name|int
name|diff
parameter_list|)
block|{
name|String
name|ret
init|=
operator|(
name|conf
operator|<=
literal|0
condition|?
literal|""
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|"'>"
operator|+
name|conf
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|conf
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|html
operator|&&
name|diff
operator|<
literal|0
condition|)
name|ret
operator|+=
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"R"
argument_list|)
operator|+
literal|"'> ("
operator|+
name|diff
operator|+
literal|")</font>"
expr_stmt|;
if|if
condition|(
name|html
operator|&&
name|diff
operator|>
literal|0
condition|)
name|ret
operator|+=
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|"'> (+"
operator|+
name|diff
operator|+
literal|")</font>"
expr_stmt|;
if|if
condition|(
operator|!
name|html
operator|&&
name|diff
operator|<
literal|0
condition|)
name|ret
operator|+=
literal|" ("
operator|+
name|diff
operator|+
literal|")"
expr_stmt|;
if|if
condition|(
operator|!
name|html
operator|&&
name|diff
operator|>
literal|0
condition|)
name|ret
operator|+=
literal|" (+"
operator|+
name|diff
operator|+
literal|")"
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|String
name|m2d2html
parameter_list|(
name|boolean
name|html
parameter_list|,
name|int
name|conf
parameter_list|,
name|int
name|diff
parameter_list|)
block|{
name|String
name|ret
init|=
operator|(
name|conf
operator|<=
literal|0
condition|?
literal|""
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"2"
argument_list|)
operator|+
literal|"'>"
operator|+
name|conf
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|conf
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|html
operator|&&
name|diff
operator|<
literal|0
condition|)
name|ret
operator|+=
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"-2"
argument_list|)
operator|+
literal|"'> ("
operator|+
name|diff
operator|+
literal|")</font>"
expr_stmt|;
if|if
condition|(
name|html
operator|&&
name|diff
operator|>
literal|0
condition|)
name|ret
operator|+=
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"2"
argument_list|)
operator|+
literal|"'> (+"
operator|+
name|diff
operator|+
literal|")</font>"
expr_stmt|;
if|if
condition|(
operator|!
name|html
operator|&&
name|diff
operator|<
literal|0
condition|)
name|ret
operator|+=
literal|" ("
operator|+
name|diff
operator|+
literal|")"
expr_stmt|;
if|if
condition|(
operator|!
name|html
operator|&&
name|diff
operator|>
literal|0
condition|)
name|ret
operator|+=
literal|" (+"
operator|+
name|diff
operator|+
literal|")"
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|String
name|btb2html
parameter_list|(
name|boolean
name|html
parameter_list|,
name|int
name|conf
parameter_list|,
name|int
name|diff
parameter_list|,
name|int
name|dconf
parameter_list|,
name|int
name|ddiff
parameter_list|)
block|{
name|String
name|ret
init|=
operator|(
name|conf
operator|<=
literal|0
condition|?
literal|""
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"1"
argument_list|)
operator|+
literal|"'>"
operator|+
name|conf
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|conf
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|html
condition|)
block|{
if|if
condition|(
name|diff
operator|<
literal|0
condition|)
name|ret
operator|+=
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"-1"
argument_list|)
operator|+
literal|"'> ("
operator|+
name|diff
operator|+
literal|"</font>"
expr_stmt|;
if|else if
condition|(
name|diff
operator|>
literal|0
condition|)
name|ret
operator|+=
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"1"
argument_list|)
operator|+
literal|"'> (+"
operator|+
name|diff
operator|+
literal|"</font>"
expr_stmt|;
if|else if
condition|(
name|ddiff
operator|!=
literal|0
condition|)
name|ret
operator|+=
literal|" ("
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|diff
argument_list|)
expr_stmt|;
if|if
condition|(
name|ddiff
operator|<
literal|0
condition|)
name|ret
operator|+=
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"-1"
argument_list|)
operator|+
literal|"'> d:"
operator|+
name|ddiff
operator|+
literal|"</font>"
expr_stmt|;
if|if
condition|(
name|ddiff
operator|>
literal|0
condition|)
name|ret
operator|+=
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"1"
argument_list|)
operator|+
literal|"'> d:+"
operator|+
name|ddiff
operator|+
literal|"</font>"
expr_stmt|;
if|if
condition|(
name|diff
operator|<
literal|0
condition|)
name|ret
operator|+=
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"-1"
argument_list|)
operator|+
literal|"'>)</font>"
expr_stmt|;
if|else if
condition|(
name|diff
operator|>
literal|0
condition|)
name|ret
operator|+=
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"1"
argument_list|)
operator|+
literal|"'>)</font>"
expr_stmt|;
if|else if
condition|(
name|ddiff
operator|!=
literal|0
condition|)
name|ret
operator|+=
literal|")"
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|diff
operator|<
literal|0
condition|)
name|ret
operator|+=
literal|" ("
operator|+
name|diff
expr_stmt|;
if|else if
condition|(
name|diff
operator|>
literal|0
condition|)
name|ret
operator|+=
literal|" (+"
operator|+
name|diff
expr_stmt|;
if|else if
condition|(
name|ddiff
operator|!=
literal|0
condition|)
name|ret
operator|+=
literal|" ("
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|diff
argument_list|)
expr_stmt|;
if|if
condition|(
name|ddiff
operator|<
literal|0
condition|)
name|ret
operator|+=
literal|" d:"
operator|+
name|ddiff
expr_stmt|;
if|if
condition|(
name|ddiff
operator|>
literal|0
condition|)
name|ret
operator|+=
literal|" d:+"
operator|+
name|ddiff
expr_stmt|;
if|if
condition|(
name|diff
operator|<
literal|0
condition|)
name|ret
operator|+=
literal|")"
expr_stmt|;
if|else if
condition|(
name|diff
operator|>
literal|0
condition|)
name|ret
operator|+=
literal|")"
expr_stmt|;
if|else if
condition|(
name|ddiff
operator|!=
literal|0
condition|)
name|ret
operator|+=
literal|")"
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|String
name|getPeriodsTable
parameter_list|()
block|{
name|WebTable
name|table
init|=
operator|new
name|WebTable
argument_list|(
literal|7
argument_list|,
literal|"Available Periods"
argument_list|,
literal|"examInfo.do?op=Reorder&pord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Available<br>Period"
block|,
literal|"Student<br>Direct"
block|,
literal|"Student<br>&gt; 2 A Day"
block|,
literal|"Student<br>Back-To-Back"
block|,
literal|"Instructor<br>Direct"
block|,
literal|"Instructor<br>&gt; 2 A Day"
block|,
literal|"Instructor<br>Back-To-Back"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|ExamAssignmentInfo
name|current
init|=
name|getExamAssignment
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|period
range|:
name|getPeriods
argument_list|()
control|)
block|{
name|WebTable
operator|.
name|WebTableLine
name|line
init|=
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examInfo.do?op=Select&period="
operator|+
name|period
operator|.
name|getPeriodId
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
name|period
operator|.
name|getPeriodAbbreviationWithPref
argument_list|()
block|,
name|dc2html
argument_list|(
literal|true
argument_list|,
name|period
operator|.
name|getNrDirectConflicts
argument_list|()
argument_list|,
operator|(
name|current
operator|==
literal|null
condition|?
literal|0
else|:
name|period
operator|.
name|getNrDirectConflicts
argument_list|()
operator|-
name|current
operator|.
name|getNrDirectConflicts
argument_list|()
operator|)
argument_list|)
block|,
name|m2d2html
argument_list|(
literal|true
argument_list|,
name|period
operator|.
name|getNrMoreThanTwoConflicts
argument_list|()
argument_list|,
operator|(
name|current
operator|==
literal|null
condition|?
literal|0
else|:
name|period
operator|.
name|getNrMoreThanTwoConflicts
argument_list|()
operator|-
name|current
operator|.
name|getNrMoreThanTwoConflicts
argument_list|()
operator|)
argument_list|)
block|,
name|btb2html
argument_list|(
literal|true
argument_list|,
name|period
operator|.
name|getNrBackToBackConflicts
argument_list|()
argument_list|,
operator|(
name|current
operator|==
literal|null
condition|?
literal|0
else|:
name|period
operator|.
name|getNrBackToBackConflicts
argument_list|()
operator|-
name|current
operator|.
name|getNrBackToBackConflicts
argument_list|()
operator|)
argument_list|,
name|period
operator|.
name|getNrDistanceBackToBackConflicts
argument_list|()
argument_list|,
operator|(
name|current
operator|==
literal|null
condition|?
literal|0
else|:
name|period
operator|.
name|getNrDistanceBackToBackConflicts
argument_list|()
operator|-
name|current
operator|.
name|getNrDistanceBackToBackConflicts
argument_list|()
operator|)
argument_list|)
block|,
name|dc2html
argument_list|(
literal|true
argument_list|,
name|period
operator|.
name|getNrInstructorDirectConflicts
argument_list|()
argument_list|,
operator|(
name|current
operator|==
literal|null
condition|?
literal|0
else|:
name|period
operator|.
name|getNrInstructorDirectConflicts
argument_list|()
operator|-
name|current
operator|.
name|getNrInstructorDirectConflicts
argument_list|()
operator|)
argument_list|)
block|,
name|m2d2html
argument_list|(
literal|true
argument_list|,
name|period
operator|.
name|getNrInstructorMoreThanTwoConflicts
argument_list|()
argument_list|,
operator|(
name|current
operator|==
literal|null
condition|?
literal|0
else|:
name|period
operator|.
name|getNrInstructorMoreThanTwoConflicts
argument_list|()
operator|-
name|current
operator|.
name|getNrInstructorMoreThanTwoConflicts
argument_list|()
operator|)
argument_list|)
block|,
name|btb2html
argument_list|(
literal|true
argument_list|,
name|period
operator|.
name|getNrInstructorBackToBackConflicts
argument_list|()
argument_list|,
operator|(
name|current
operator|==
literal|null
condition|?
literal|0
else|:
name|period
operator|.
name|getNrInstructorBackToBackConflicts
argument_list|()
operator|-
name|current
operator|.
name|getNrInstructorBackToBackConflicts
argument_list|()
operator|)
argument_list|,
name|period
operator|.
name|getNrInstructorDistanceBackToBackConflicts
argument_list|()
argument_list|,
operator|(
name|current
operator|==
literal|null
condition|?
literal|0
else|:
name|period
operator|.
name|getNrInstructorDistanceBackToBackConflicts
argument_list|()
operator|-
name|current
operator|.
name|getNrInstructorDistanceBackToBackConflicts
argument_list|()
operator|)
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|period
operator|.
name|getPeriodOrd
argument_list|()
block|,
name|period
operator|.
name|getNrDirectConflicts
argument_list|()
block|,
name|period
operator|.
name|getNrMoreThanTwoConflicts
argument_list|()
block|,
name|period
operator|.
name|getNrBackToBackConflicts
argument_list|()
block|,
name|period
operator|.
name|getNrInstructorDirectConflicts
argument_list|()
block|,
name|period
operator|.
name|getNrInstructorMoreThanTwoConflicts
argument_list|()
block|,
name|period
operator|.
name|getNrInstructorBackToBackConflicts
argument_list|()
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|isExamAssigned
argument_list|()
operator|||
name|iExamAssignment
operator|!=
literal|null
operator|)
operator|&&
name|period
operator|.
name|getPeriodId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
name|iExamAssignment
operator|==
literal|null
condition|?
name|getExamAssignment
argument_list|()
else|:
name|iExamAssignment
operator|)
operator|.
name|getPeriodId
argument_list|()
argument_list|)
condition|)
block|{
name|line
operator|.
name|setBgColor
argument_list|(
literal|"rgb(168,187,225)"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|table
operator|.
name|printTable
argument_list|(
name|iPeriodTableOrd
argument_list|)
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|getPeriods
parameter_list|()
block|{
if|if
condition|(
name|iPeriods
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|getSolver
argument_list|()
operator|!=
literal|null
operator|&&
name|getSolver
argument_list|()
operator|.
name|getExamType
argument_list|()
operator|==
name|getExam
argument_list|()
operator|.
name|getExamType
argument_list|()
condition|)
block|{
name|iPeriods
operator|=
name|getSolver
argument_list|()
operator|.
name|getPeriods
argument_list|(
name|getExam
argument_list|()
operator|.
name|getExamId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iPeriods
operator|=
operator|new
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|ExamPeriod
operator|.
name|findAll
argument_list|(
name|getExam
argument_list|()
operator|.
name|getExam
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|getExam
argument_list|()
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|iPeriods
operator|.
name|add
argument_list|(
operator|new
name|ExamAssignmentInfo
argument_list|(
name|getExam
argument_list|()
operator|.
name|getExam
argument_list|()
argument_list|,
name|period
argument_list|,
operator|new
name|Vector
argument_list|<
name|ExamRoomInfo
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|iPeriods
return|;
block|}
specifier|protected
name|Collection
argument_list|<
name|ExamRoomInfo
argument_list|>
name|findRooms
parameter_list|(
name|ExamPeriod
name|period
parameter_list|)
block|{
name|Collection
argument_list|<
name|ExamRoomInfo
argument_list|>
name|rooms
init|=
operator|new
name|Vector
argument_list|<
name|ExamRoomInfo
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|reqRoom
init|=
literal|false
decl_stmt|;
name|boolean
name|reqBldg
init|=
literal|false
decl_stmt|;
name|boolean
name|reqGroup
init|=
literal|false
decl_stmt|;
name|Set
name|groupPrefs
init|=
name|getExam
argument_list|()
operator|.
name|getExam
argument_list|()
operator|.
name|getPreferences
argument_list|(
name|RoomGroupPref
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
name|roomPrefs
init|=
name|getExam
argument_list|()
operator|.
name|getExam
argument_list|()
operator|.
name|getPreferences
argument_list|(
name|RoomPref
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
name|bldgPrefs
init|=
name|getExam
argument_list|()
operator|.
name|getExam
argument_list|()
operator|.
name|getPreferences
argument_list|(
name|BuildingPref
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
name|featurePrefs
init|=
name|getExam
argument_list|()
operator|.
name|getExam
argument_list|()
operator|.
name|getPreferences
argument_list|(
name|RoomFeaturePref
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i1
init|=
name|Location
operator|.
name|findAllAvailableExamLocations
argument_list|(
name|period
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|room
init|=
operator|(
name|Location
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|cap
init|=
operator|(
name|getExam
argument_list|()
operator|.
name|getSeatingType
argument_list|()
operator|==
name|Exam
operator|.
name|sSeatingTypeExam
condition|?
name|room
operator|.
name|getExamCapacity
argument_list|()
else|:
name|room
operator|.
name|getCapacity
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|cap
operator|<
name|getExam
argument_list|()
operator|.
name|getNrStudents
argument_list|()
operator|/
name|getExam
argument_list|()
operator|.
name|getMaxRooms
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|cap
operator|>
literal|2
operator|*
name|getExam
argument_list|()
operator|.
name|getNrStudents
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|room
operator|.
name|getExamPreference
argument_list|(
name|period
argument_list|)
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
continue|continue;
name|boolean
name|add
init|=
literal|true
decl_stmt|;
name|PreferenceCombination
name|pref
init|=
operator|new
name|SumPreferenceCombination
argument_list|()
decl_stmt|;
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|room
operator|.
name|getExamPreference
argument_list|(
name|period
argument_list|)
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
comment|// --- group preference ----------
name|PreferenceCombination
name|groupPref
init|=
name|PreferenceCombination
operator|.
name|getDefault
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|groupPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomGroupPref
name|p
init|=
operator|(
name|RoomGroupPref
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|getRooms
argument_list|()
operator|.
name|contains
argument_list|(
name|room
argument_list|)
condition|)
name|groupPref
operator|.
name|addPreferenceProlog
argument_list|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|groupPref
operator|.
name|getPreferenceProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
condition|)
name|add
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|reqGroup
operator|&&
operator|!
name|groupPref
operator|.
name|getPreferenceProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
name|add
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|reqGroup
operator|&&
operator|(
name|groupPref
operator|.
name|getPreferenceProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|)
condition|)
block|{
name|reqGroup
operator|=
literal|true
expr_stmt|;
name|rooms
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|groupPref
operator|.
name|getPreferenceProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|&&
operator|!
name|groupPref
operator|.
name|getPreferenceProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|groupPref
operator|.
name|getPreferenceProlog
argument_list|()
argument_list|)
expr_stmt|;
comment|// --- room preference ------------
name|String
name|roomPref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|roomPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomPref
name|p
init|=
operator|(
name|RoomPref
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|room
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getRoom
argument_list|()
argument_list|)
condition|)
block|{
name|roomPref
operator|=
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|roomPref
operator|!=
literal|null
operator|&&
name|roomPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
condition|)
name|add
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|reqRoom
operator|&&
operator|(
name|roomPref
operator|==
literal|null
operator|||
operator|!
name|roomPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|)
condition|)
name|add
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|reqRoom
operator|&&
operator|(
name|roomPref
operator|!=
literal|null
operator|&&
name|roomPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|)
condition|)
block|{
name|reqRoom
operator|=
literal|true
expr_stmt|;
name|rooms
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|roomPref
operator|!=
literal|null
operator|&&
operator|!
name|roomPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|&&
operator|!
name|roomPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|roomPref
argument_list|)
expr_stmt|;
comment|// --- building preference ------------
name|Building
name|bldg
init|=
operator|(
name|room
operator|instanceof
name|Room
condition|?
operator|(
operator|(
name|Room
operator|)
name|room
operator|)
operator|.
name|getBuilding
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
name|String
name|bldgPref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|bldgPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BuildingPref
name|p
init|=
operator|(
name|BuildingPref
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|bldg
operator|!=
literal|null
operator|&&
name|bldg
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getBuilding
argument_list|()
argument_list|)
condition|)
block|{
name|bldgPref
operator|=
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|bldgPref
operator|!=
literal|null
operator|&&
name|bldgPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
condition|)
name|add
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|reqBldg
operator|&&
operator|(
name|bldgPref
operator|==
literal|null
operator|||
operator|!
name|bldgPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|)
condition|)
name|add
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|reqBldg
operator|&&
operator|(
name|bldgPref
operator|!=
literal|null
operator|&&
name|bldgPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|)
condition|)
block|{
name|reqBldg
operator|=
literal|true
expr_stmt|;
name|rooms
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|bldgPref
operator|!=
literal|null
operator|&&
operator|!
name|bldgPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|&&
operator|!
name|bldgPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|bldgPref
argument_list|)
expr_stmt|;
comment|// --- room features preference --------
name|boolean
name|acceptableFeatures
init|=
literal|true
decl_stmt|;
name|PreferenceCombination
name|featurePref
init|=
operator|new
name|MinMaxPreferenceCombination
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|featurePrefs
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomFeaturePref
name|roomFeaturePref
init|=
operator|(
name|RoomFeaturePref
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|RoomFeature
name|feature
init|=
name|roomFeaturePref
operator|.
name|getRoomFeature
argument_list|()
decl_stmt|;
name|String
name|p
init|=
name|roomFeaturePref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
decl_stmt|;
name|boolean
name|hasFeature
init|=
name|feature
operator|.
name|getRooms
argument_list|()
operator|.
name|contains
argument_list|(
name|room
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|&&
name|hasFeature
condition|)
block|{
name|acceptableFeatures
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|&&
operator|!
name|hasFeature
condition|)
block|{
name|acceptableFeatures
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|hasFeature
operator|&&
operator|!
name|p
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|&&
operator|!
name|p
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
name|featurePref
operator|.
name|addPreferenceProlog
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|pref
operator|.
name|addPreferenceInt
argument_list|(
name|featurePref
operator|.
name|getPreferenceInt
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|acceptableFeatures
condition|)
name|add
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|add
condition|)
continue|continue;
name|rooms
operator|.
name|add
argument_list|(
operator|new
name|ExamRoomInfo
argument_list|(
name|room
argument_list|,
name|pref
operator|.
name|getPreferenceInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isExamAssigned
argument_list|()
operator|&&
name|period
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|getExamAssignment
argument_list|()
operator|.
name|getPeriodId
argument_list|()
argument_list|)
operator|&&
name|getExamAssignment
argument_list|()
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
condition|)
name|rooms
operator|.
name|addAll
argument_list|(
name|getExamAssignment
argument_list|()
operator|.
name|getRooms
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rooms
return|;
block|}
specifier|public
name|String
name|getRoomTable
parameter_list|()
block|{
name|Collection
argument_list|<
name|ExamRoomInfo
argument_list|>
name|rooms
init|=
name|getRooms
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|ExamRoomInfo
argument_list|>
name|assigned
init|=
operator|(
name|getSelectedAssignment
argument_list|()
operator|!=
literal|null
condition|?
name|getSelectedAssignment
argument_list|()
operator|.
name|getRooms
argument_list|()
else|:
name|isExamAssigned
argument_list|()
condition|?
name|getExamAssignment
argument_list|()
operator|.
name|getRooms
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|rooms
operator|==
literal|null
operator|||
name|rooms
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|""
return|;
name|String
name|ret
init|=
literal|""
decl_stmt|;
name|ret
operator|+=
literal|"<script language='javascript'>"
expr_stmt|;
name|ret
operator|+=
literal|"function roomOver(source, id) { "
expr_stmt|;
name|ret
operator|+=
literal|"    document.getElementById('r'+id).style.backgroundColor='rgb(223,231,242)';"
expr_stmt|;
name|ret
operator|+=
literal|"    document.getElementById('c'+id).style.backgroundColor='rgb(223,231,242)';"
expr_stmt|;
name|ret
operator|+=
literal|"    source.style.cursor='hand';source.style.cursor='pointer';"
expr_stmt|;
name|ret
operator|+=
literal|"}"
expr_stmt|;
name|ret
operator|+=
literal|"var sCap = -1;"
expr_stmt|;
name|ret
operator|+=
literal|"var sRooms = ':"
expr_stmt|;
if|if
condition|(
name|assigned
operator|!=
literal|null
operator|&&
name|assigned
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ExamRoomInfo
name|room
range|:
name|assigned
control|)
block|{
name|ret
operator|+=
name|room
operator|.
name|getLocationId
argument_list|()
operator|+
literal|"@"
operator|+
name|room
operator|.
name|getCapacity
argument_list|(
name|getExam
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|ret
operator|+=
literal|"';"
expr_stmt|;
name|ret
operator|+=
literal|"var sNrRooms = "
operator|+
operator|(
name|assigned
operator|!=
literal|null
condition|?
name|assigned
operator|.
name|size
argument_list|()
else|:
literal|0
operator|)
operator|+
literal|";"
expr_stmt|;
name|ret
operator|+=
literal|"function roomSelected(id) {"
expr_stmt|;
name|ret
operator|+=
literal|"    return sRooms.indexOf(':'+id+'@')>=0;"
expr_stmt|;
name|ret
operator|+=
literal|"}"
expr_stmt|;
name|ret
operator|+=
literal|"function roomOut(id) { "
expr_stmt|;
name|ret
operator|+=
literal|"    var bg = 'transparent';"
expr_stmt|;
name|ret
operator|+=
literal|"    if (roomSelected(id)) bg='rgb(168,187,225)';"
expr_stmt|;
name|ret
operator|+=
literal|"    document.getElementById('r'+id).style.backgroundColor=bg;"
expr_stmt|;
name|ret
operator|+=
literal|"    document.getElementById('c'+id).style.backgroundColor=bg;"
expr_stmt|;
name|ret
operator|+=
literal|"}"
expr_stmt|;
name|ret
operator|+=
literal|"function roomClick(source, id, cap) { "
expr_stmt|;
name|ret
operator|+=
literal|"    if (sCap<0) {"
expr_stmt|;
name|ret
operator|+=
literal|"        sCap = 0; sRooms=''; sNrRooms=0;"
expr_stmt|;
if|if
condition|(
name|assigned
operator|!=
literal|null
operator|&&
name|assigned
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ExamRoomInfo
name|room
range|:
name|assigned
control|)
name|ret
operator|+=
literal|"        roomOut("
operator|+
name|room
operator|.
name|getLocationId
argument_list|()
operator|+
literal|");"
expr_stmt|;
block|}
name|ret
operator|+=
literal|"    }"
expr_stmt|;
name|ret
operator|+=
literal|"    var i = sRooms.indexOf(':'+id+'@');"
expr_stmt|;
name|ret
operator|+=
literal|"    if (i>=0) {"
expr_stmt|;
name|ret
operator|+=
literal|"        var j = sRooms.indexOf(':',i+1);"
expr_stmt|;
name|ret
operator|+=
literal|"        sRooms = sRooms.substring(0, i)+(j>=0?sRooms.substring(j):'');"
expr_stmt|;
name|ret
operator|+=
literal|"        sCap -= cap; sNrRooms--;"
expr_stmt|;
name|ret
operator|+=
literal|"    } else {"
expr_stmt|;
name|ret
operator|+=
literal|"        sRooms = sRooms + ':' + id + '@' + cap;"
expr_stmt|;
name|ret
operator|+=
literal|"        sCap += cap; sNrRooms++;"
expr_stmt|;
name|ret
operator|+=
literal|"        if (sNrRooms>"
operator|+
name|getExam
argument_list|()
operator|.
name|getMaxRooms
argument_list|()
operator|+
literal|") {"
expr_stmt|;
name|ret
operator|+=
literal|"            var fid = sRooms.substring(1, sRooms.indexOf('@'));"
expr_stmt|;
name|ret
operator|+=
literal|"            var fcap = sRooms.substring(sRooms.indexOf('@')+1, sRooms.indexOf(':',1));"
expr_stmt|;
name|ret
operator|+=
literal|"            sRooms = sRooms.substring(sRooms.indexOf(':',1));"
expr_stmt|;
name|ret
operator|+=
literal|"            sCap -= fcap; sNrRooms--; roomOut(fid);"
expr_stmt|;
name|ret
operator|+=
literal|"        };"
expr_stmt|;
name|ret
operator|+=
literal|"    }"
expr_stmt|;
name|ret
operator|+=
literal|"    roomOut(id);"
expr_stmt|;
name|ret
operator|+=
literal|"    if (sCap>="
operator|+
name|getExam
argument_list|()
operator|.
name|getNrStudents
argument_list|()
operator|+
literal|") document.location='examInfo.do?op=Select&room='+sRooms;"
expr_stmt|;
name|ret
operator|+=
literal|"    var c = document.getElementById('roomCapacityCounter');"
expr_stmt|;
name|ret
operator|+=
literal|"    if (c!=null) c.innerHtml = (sCap<"
operator|+
name|getExam
argument_list|()
operator|.
name|getNrStudents
argument_list|()
operator|+
literal|"?'<font color=\\\'red\\\'>'+sCap+'</font>':''+sCap);"
expr_stmt|;
name|ret
operator|+=
literal|"}"
expr_stmt|;
name|ret
operator|+=
literal|"</script>"
expr_stmt|;
name|ret
operator|+=
literal|"<table border='0' cellspacing='0' cellpadding='3'>"
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|int
name|step
init|=
literal|6
decl_stmt|;
for|for
control|(
name|ExamRoomInfo
name|room
range|:
name|rooms
control|)
block|{
if|if
condition|(
operator|(
name|idx
operator|%
name|step
operator|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
name|ret
operator|+=
literal|"</tr>"
expr_stmt|;
name|ret
operator|+=
literal|"<tr>"
expr_stmt|;
block|}
name|String
name|style
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|assigned
operator|!=
literal|null
operator|&&
name|assigned
operator|.
name|contains
argument_list|(
name|room
argument_list|)
condition|)
name|style
operator|+=
literal|"background-color:rgb(168,187,225);"
expr_stmt|;
name|String
name|mouse
init|=
literal|"onMouseOver=\"roomOver(this,"
operator|+
name|room
operator|.
name|getLocationId
argument_list|()
operator|+
literal|");\" "
operator|+
literal|"onMouseOut=\"roomOut("
operator|+
name|room
operator|.
name|getLocationId
argument_list|()
operator|+
literal|");\" "
operator|+
literal|"onClick=\"roomClick(this,"
operator|+
name|room
operator|.
name|getLocationId
argument_list|()
operator|+
literal|","
operator|+
name|room
operator|.
name|getCapacity
argument_list|(
name|getExam
argument_list|()
argument_list|)
operator|+
literal|");\""
decl_stmt|;
name|ret
operator|+=
literal|"<td nowrap id='r"
operator|+
name|room
operator|.
name|getLocationId
argument_list|()
operator|+
literal|"' "
operator|+
operator|(
name|style
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
literal|"style='"
operator|+
name|style
operator|+
literal|"' "
else|:
literal|""
operator|)
operator|+
name|mouse
operator|+
literal|">"
operator|+
name|room
operator|.
name|toString
argument_list|()
operator|+
literal|"</td>"
expr_stmt|;
if|if
condition|(
operator|(
name|idx
operator|%
name|step
operator|)
operator|<
name|step
operator|-
literal|1
condition|)
name|style
operator|+=
literal|"border-right: #646464 1px dashed;"
expr_stmt|;
name|ret
operator|+=
literal|"<td id='c"
operator|+
name|room
operator|.
name|getLocationId
argument_list|()
operator|+
literal|"' "
operator|+
operator|(
name|style
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
literal|"style='"
operator|+
name|style
operator|+
literal|"' "
else|:
literal|""
operator|)
operator|+
name|mouse
operator|+
literal|">"
operator|+
name|room
operator|.
name|getCapacity
argument_list|(
name|getExam
argument_list|()
argument_list|)
operator|+
literal|"</td>"
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
while|while
condition|(
operator|(
name|idx
operator|%
name|step
operator|)
operator|!=
literal|0
condition|)
block|{
name|ret
operator|+=
literal|"<td colspan='2'>&nbsp;</td>"
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|ret
operator|+=
literal|"</tr>"
expr_stmt|;
name|ret
operator|+=
literal|"</table>"
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|ExamRoomInfo
argument_list|>
name|getRooms
parameter_list|()
block|{
if|if
condition|(
name|getSelectedAssignment
argument_list|()
operator|==
literal|null
operator|&&
operator|!
name|isExamAssigned
argument_list|()
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|iRooms
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|getSolver
argument_list|()
operator|!=
literal|null
operator|&&
name|getSolver
argument_list|()
operator|.
name|getExamType
argument_list|()
operator|==
name|getExam
argument_list|()
operator|.
name|getExamType
argument_list|()
condition|)
block|{
name|iRooms
operator|=
name|getSolver
argument_list|()
operator|.
name|getRooms
argument_list|(
name|getExam
argument_list|()
operator|.
name|getExamId
argument_list|()
argument_list|,
name|getSelectedAssignment
argument_list|()
operator|!=
literal|null
condition|?
name|getSelectedAssignment
argument_list|()
operator|.
name|getPeriodId
argument_list|()
else|:
name|getExamAssignment
argument_list|()
operator|.
name|getPeriodId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iRooms
operator|=
name|findRooms
argument_list|(
name|getSelectedAssignment
argument_list|()
operator|!=
literal|null
condition|?
name|getSelectedAssignment
argument_list|()
operator|.
name|getPeriod
argument_list|()
else|:
name|getExamAssignment
argument_list|()
operator|.
name|getPeriod
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|iRooms
return|;
block|}
specifier|public
name|int
name|getRoomSize
parameter_list|()
block|{
if|if
condition|(
name|iExamAssignment
operator|!=
literal|null
condition|)
return|return
name|iExamAssignment
operator|.
name|getRoomSize
argument_list|()
return|;
if|if
condition|(
name|isExamAssigned
argument_list|()
condition|)
return|return
name|getExamAssignment
argument_list|()
operator|.
name|getRoomSize
argument_list|()
return|;
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

