begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2009, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|preference
operator|.
name|MinMaxPreferenceCombination
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|preference
operator|.
name|PreferenceCombination
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|preference
operator|.
name|SumPreferenceCombination
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamDistributionConstraint
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamInstructor
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamOwner
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamPeriodPlacement
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamPlacement
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamRoom
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamRoomPlacement
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamStudent
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|RoomAvailabilityInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|RoomAvailabilityInterface
operator|.
name|TimeBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Building
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|BuildingPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriodPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeaturePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroupPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DistributionPrefDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|EventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|remote
operator|.
name|core
operator|.
name|RemoteSolverServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|RoomAvailability
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ExamDatabaseLoader
extends|extends
name|ExamLoader
block|{
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ExamDatabaseLoader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Long
name|iSessionId
decl_stmt|;
specifier|private
name|int
name|iExamType
decl_stmt|;
specifier|private
name|boolean
name|iLoadSolution
decl_stmt|;
specifier|private
name|String
name|iInstructorFormat
decl_stmt|;
specifier|private
name|Progress
name|iProgress
init|=
literal|null
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|ExamPeriod
argument_list|>
name|iPeriods
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|ExamRoom
argument_list|>
name|iRooms
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|ExamRoom
argument_list|>
name|iPermId2Room
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
argument_list|>
name|iOwners
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
name|iExams
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
name|iInstructors
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
name|iStudents
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|private
name|Set
name|iAllRooms
init|=
literal|null
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|ExamPeriod
argument_list|>
name|iProhibitedPeriods
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|iLoadEventConflicts
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iMakeupSameRoom
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iRoomAvailabilityTimeStampIsSet
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
name|int
name|sMaxNbrRooms
init|=
literal|10
decl_stmt|;
specifier|public
name|ExamDatabaseLoader
parameter_list|(
name|ExamModel
name|model
parameter_list|)
block|{
name|super
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|iProgress
operator|=
name|Progress
operator|.
name|getInstance
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|iSessionId
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SessionId"
argument_list|,
operator|(
name|Long
operator|)
literal|null
argument_list|)
expr_stmt|;
name|iExamType
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyInt
argument_list|(
literal|"Exam.Type"
argument_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|.
name|sExamTypeFinal
argument_list|)
expr_stmt|;
name|iLoadSolution
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.LoadSolution"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iInstructorFormat
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.InstructorFormat"
argument_list|,
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFist
argument_list|)
expr_stmt|;
name|iLoadEventConflicts
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.eventConflicts."
operator|+
operator|(
name|iExamType
operator|==
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|.
name|sExamTypeFinal
condition|?
literal|"final"
else|:
literal|"midterm"
operator|)
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|iMakeupSameRoom
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.sameRoom."
operator|+
operator|(
name|iExamType
operator|==
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|.
name|sExamTypeFinal
condition|?
literal|"final"
else|:
literal|"midterm"
operator|)
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getExamLabel
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
name|exam
parameter_list|)
block|{
return|return
literal|"<A href='examDetail.do?examId="
operator|+
name|exam
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"'>"
operator|+
name|exam
operator|.
name|getLabel
argument_list|()
operator|+
literal|"</A>"
return|;
block|}
specifier|private
name|String
name|getExamLabel
parameter_list|(
name|Exam
name|exam
parameter_list|)
block|{
return|return
literal|"<A href='examDetail.do?examId="
operator|+
name|exam
operator|.
name|getId
argument_list|()
operator|+
literal|"'>"
operator|+
name|exam
operator|.
name|getName
argument_list|()
operator|+
literal|"</A>"
return|;
block|}
specifier|public
name|void
name|load
parameter_list|()
throws|throws
name|Exception
block|{
name|iProgress
operator|.
name|setStatus
argument_list|(
literal|"Loading input data ..."
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|loadPeriods
argument_list|()
expr_stmt|;
name|loadRooms
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasRoomAvailability
argument_list|()
condition|)
name|loadRoomAvailability
argument_list|(
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|loadExams
argument_list|()
expr_stmt|;
name|loadStudents
argument_list|()
expr_stmt|;
name|loadDistributions
argument_list|()
expr_stmt|;
if|if
condition|(
name|iLoadEventConflicts
condition|)
name|loadAvailabilitiesFromEvents
argument_list|()
expr_stmt|;
if|if
condition|(
name|iMakeupSameRoom
condition|)
name|makeupSameRoomConstraints
argument_list|()
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|init
argument_list|()
expr_stmt|;
name|checkConsistency
argument_list|()
expr_stmt|;
name|assignInitial
argument_list|()
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iProgress
operator|.
name|fatal
argument_list|(
literal|"Unable to load examination problem, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|int
name|pref2weight
parameter_list|(
name|String
name|pref
parameter_list|)
block|{
if|if
condition|(
name|pref
operator|==
literal|null
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
return|return
operator|-
literal|4
return|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sPreferred
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sDiscouraged
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
return|return
literal|4
return|;
return|return
literal|0
return|;
block|}
specifier|protected
name|void
name|loadPeriods
parameter_list|()
block|{
name|Set
name|periods
init|=
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
operator|.
name|findAll
argument_list|(
name|iSessionId
argument_list|,
name|iExamType
argument_list|)
decl_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Loading periods..."
argument_list|,
name|periods
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|periods
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
name|period
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|pref
init|=
name|period
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
decl_stmt|;
comment|//if (PreferenceLevel.sProhibited.equals(pref)) continue;
name|ExamPeriod
name|p
init|=
name|getModel
argument_list|()
operator|.
name|addPeriod
argument_list|(
name|period
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|period
operator|.
name|getStartDateLabel
argument_list|()
argument_list|,
name|period
operator|.
name|getStartTimeLabel
argument_list|()
operator|+
literal|" - "
operator|+
name|period
operator|.
name|getEndTimeLabel
argument_list|()
argument_list|,
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|period
operator|.
name|getLength
argument_list|()
argument_list|,
name|pref2weight
argument_list|(
name|pref
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
name|iProhibitedPeriods
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|iPeriods
operator|.
name|put
argument_list|(
name|period
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|loadRooms
parameter_list|()
block|{
name|iAllRooms
operator|=
name|Location
operator|.
name|findAllExamLocations
argument_list|(
name|iSessionId
argument_list|,
name|iExamType
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Loading rooms..."
argument_list|,
name|iAllRooms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iAllRooms
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExamRoom
name|room
init|=
operator|new
name|ExamRoom
argument_list|(
name|getModel
argument_list|()
argument_list|,
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|,
name|location
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|location
operator|.
name|getExamCapacity
argument_list|()
argument_list|,
name|location
operator|.
name|getCoordinateX
argument_list|()
argument_list|,
name|location
operator|.
name|getCoordinateY
argument_list|()
argument_list|)
decl_stmt|;
name|getModel
argument_list|()
operator|.
name|addConstraint
argument_list|(
name|room
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|getRooms
argument_list|()
operator|.
name|add
argument_list|(
name|room
argument_list|)
expr_stmt|;
name|iRooms
operator|.
name|put
argument_list|(
name|room
operator|.
name|getId
argument_list|()
argument_list|,
name|room
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|.
name|getPermanentId
argument_list|()
operator|!=
literal|null
condition|)
name|iPermId2Room
operator|.
name|put
argument_list|(
name|location
operator|.
name|getPermanentId
argument_list|()
argument_list|,
name|room
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|location
operator|.
name|getExamPreferences
argument_list|(
name|iExamType
argument_list|)
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExamPeriod
name|period
init|=
name|iPeriods
operator|.
name|get
argument_list|(
operator|(
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
operator|)
name|entry
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|pref
init|=
operator|(
operator|(
name|PreferenceLevel
operator|)
name|entry
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|getPrefProlog
argument_list|()
decl_stmt|;
if|if
condition|(
name|period
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
name|room
operator|.
name|setAvailable
argument_list|(
name|period
operator|.
name|getIndex
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
else|else
name|room
operator|.
name|setPenalty
argument_list|(
name|period
operator|.
name|getIndex
argument_list|()
argument_list|,
name|pref2weight
argument_list|(
name|pref
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|loadExams
parameter_list|()
block|{
if|if
condition|(
name|isRemote
argument_list|()
condition|)
name|HibernateUtil
operator|.
name|clearCache
argument_list|()
expr_stmt|;
name|Collection
name|exams
init|=
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|.
name|findAll
argument_list|(
name|iSessionId
argument_list|,
name|iExamType
argument_list|)
decl_stmt|;
name|boolean
name|considerLimit
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.useLimit."
operator|+
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|.
name|sExamTypes
index|[
name|iExamType
index|]
argument_list|,
operator|(
name|iExamType
operator|==
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|.
name|sExamTypeFinal
condition|?
literal|"false"
else|:
literal|"true"
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Loading exams..."
argument_list|,
name|exams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
name|exam
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExamPeriodPlacement
argument_list|>
name|periodPlacements
init|=
operator|new
name|ArrayList
argument_list|<
name|ExamPeriodPlacement
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|hasReqPeriod
init|=
literal|false
decl_stmt|;
name|Set
name|periodPrefs
init|=
name|exam
operator|.
name|getPreferences
argument_list|(
name|ExamPeriodPref
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|ExamPeriod
name|period
range|:
name|getModel
argument_list|()
operator|.
name|getPeriods
argument_list|()
control|)
block|{
if|if
condition|(
name|iProhibitedPeriods
operator|.
name|contains
argument_list|(
name|period
argument_list|)
operator|||
name|period
operator|.
name|getLength
argument_list|()
operator|<
name|exam
operator|.
name|getLength
argument_list|()
condition|)
continue|continue;
name|String
name|pref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|periodPrefs
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriodPref
name|periodPref
init|=
operator|(
name|ExamPeriodPref
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|period
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|periodPref
operator|.
name|getExamPeriod
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|pref
operator|=
name|periodPref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|iExamType
operator|==
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|.
name|sExamTypeMidterm
operator|&&
name|pref
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|hasReqPeriod
condition|)
name|periodPlacements
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hasReqPeriod
operator|=
literal|true
expr_stmt|;
name|periodPlacements
operator|.
name|add
argument_list|(
operator|new
name|ExamPeriodPlacement
argument_list|(
name|period
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|hasReqPeriod
condition|)
block|{
name|periodPlacements
operator|.
name|add
argument_list|(
operator|new
name|ExamPeriodPlacement
argument_list|(
name|period
argument_list|,
name|pref2weight
argument_list|(
name|pref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|periodPlacements
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Exam "
operator|+
name|getExamLabel
argument_list|(
name|exam
argument_list|)
operator|+
literal|" has no period available, it is not loaded."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Exam
name|x
init|=
operator|new
name|Exam
argument_list|(
name|exam
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|exam
operator|.
name|getLabel
argument_list|()
argument_list|,
name|exam
operator|.
name|getLength
argument_list|()
argument_list|,
operator|(
name|exam
operator|.
name|getSeatingType
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|.
name|sSeatingTypeExam
operator|)
argument_list|,
name|exam
operator|.
name|getMaxNbrRooms
argument_list|()
argument_list|,
literal|0
argument_list|,
name|periodPlacements
argument_list|,
name|findRooms
argument_list|(
name|exam
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|.
name|sExamTypeFinal
operator|==
name|iExamType
condition|)
block|{
if|if
condition|(
name|exam
operator|.
name|getAvgPeriod
argument_list|()
operator|!=
literal|null
condition|)
name|x
operator|.
name|setAveragePeriod
argument_list|(
name|exam
operator|.
name|getAvgPeriod
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|x
operator|.
name|setAveragePeriod
argument_list|(
name|getModel
argument_list|()
operator|.
name|getPeriods
argument_list|()
operator|.
name|size
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
name|x
operator|.
name|setModel
argument_list|(
name|getModel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|.
name|getMaxRooms
argument_list|()
operator|>
name|sMaxNbrRooms
condition|)
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"Exam "
operator|+
name|getExamLabel
argument_list|(
name|exam
argument_list|)
operator|+
literal|" has maximal number of rooms set to "
operator|+
name|x
operator|.
name|getMaxRooms
argument_list|()
operator|+
literal|" which exceeds the solver limit of "
operator|+
name|sMaxNbrRooms
operator|+
literal|" rooms."
argument_list|)
expr_stmt|;
name|x
operator|.
name|setMaxRooms
argument_list|(
name|sMaxNbrRooms
argument_list|)
expr_stmt|;
block|}
name|int
name|minSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
operator|new
name|TreeSet
argument_list|(
name|exam
operator|.
name|getOwners
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
name|owner
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExamOwner
name|cs
init|=
operator|new
name|ExamOwner
argument_list|(
name|x
argument_list|,
name|owner
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|owner
operator|.
name|getLabel
argument_list|()
argument_list|)
decl_stmt|;
name|iOwners
operator|.
name|put
argument_list|(
name|owner
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|owner
argument_list|)
expr_stmt|;
name|minSize
operator|+=
name|owner
operator|.
name|getLimit
argument_list|()
expr_stmt|;
name|x
operator|.
name|getOwners
argument_list|()
operator|.
name|add
argument_list|(
name|cs
argument_list|)
expr_stmt|;
block|}
name|x
operator|.
name|setSizeOverride
argument_list|(
name|exam
operator|.
name|getExamSize
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|setPrintOffset
argument_list|(
name|exam
operator|.
name|examOffset
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|considerLimit
operator|&&
name|minSize
operator|>
literal|0
condition|)
name|x
operator|.
name|setMinSize
argument_list|(
name|minSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|.
name|getMaxRooms
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|x
operator|.
name|getRoomPlacements
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Exam "
operator|+
name|getExamLabel
argument_list|(
name|exam
argument_list|)
operator|+
literal|" has no room available, it is not loaded."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|boolean
name|hasAssignment
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ExamPeriodPlacement
argument_list|>
name|ep
init|=
name|x
operator|.
name|getPeriodPlacements
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
operator|!
name|hasAssignment
operator|&&
name|ep
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriodPlacement
name|period
init|=
name|ep
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|findRoomsRandom
argument_list|(
name|period
argument_list|)
operator|!=
literal|null
condition|)
name|hasAssignment
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasAssignment
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Exam "
operator|+
name|getExamLabel
argument_list|(
name|exam
argument_list|)
operator|+
literal|" has no available assignment, it is not loaded."
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|iExams
operator|.
name|put
argument_list|(
name|exam
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|addVariable
argument_list|(
name|x
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|exam
operator|.
name|getInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|loadInstructor
argument_list|(
operator|(
name|DepartmentalInstructor
operator|)
name|j
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|addVariable
argument_list|(
name|x
argument_list|)
expr_stmt|;
if|if
condition|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|boolean
name|fail
init|=
literal|false
decl_stmt|;
name|ExamPeriod
name|period
init|=
name|iPeriods
operator|.
name|get
argument_list|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|period
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable assign exam "
operator|+
name|getExamLabel
argument_list|(
name|exam
argument_list|)
operator|+
literal|" to period "
operator|+
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": period not allowed."
argument_list|)
expr_stmt|;
name|fail
operator|=
literal|true
expr_stmt|;
block|}
name|ExamPeriodPlacement
name|periodPlacement
init|=
operator|(
name|period
operator|==
literal|null
condition|?
literal|null
else|:
name|x
operator|.
name|getPeriodPlacement
argument_list|(
name|period
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|fail
operator|&&
name|periodPlacement
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to assign exam "
operator|+
name|getExamLabel
argument_list|(
name|exam
argument_list|)
operator|+
literal|" to period "
operator|+
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": period prohibited."
argument_list|)
expr_stmt|;
name|fail
operator|=
literal|true
expr_stmt|;
block|}
name|HashSet
name|roomPlacements
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fail
operator|&&
name|x
operator|.
name|getMaxRooms
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Iterator
name|j
init|=
name|exam
operator|.
name|getAssignedRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExamRoom
name|room
init|=
name|iRooms
operator|.
name|get
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|room
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to assign exam "
operator|+
name|getExamLabel
argument_list|(
name|exam
argument_list|)
operator|+
literal|" to room "
operator|+
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|": not an examination room."
argument_list|)
expr_stmt|;
name|fail
operator|=
literal|true
expr_stmt|;
break|break;
block|}
else|else
block|{
name|ExamRoomPlacement
name|roomPlacement
init|=
name|x
operator|.
name|getRoomPlacement
argument_list|(
name|room
argument_list|)
decl_stmt|;
if|if
condition|(
name|roomPlacement
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to assign exam "
operator|+
name|getExamLabel
argument_list|(
name|exam
argument_list|)
operator|+
literal|" to room "
operator|+
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|": room not valid for this exam."
argument_list|)
expr_stmt|;
name|fail
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|else if
condition|(
operator|!
name|roomPlacement
operator|.
name|isAvailable
argument_list|(
name|period
argument_list|)
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to assign exam "
operator|+
name|getExamLabel
argument_list|(
name|exam
argument_list|)
operator|+
literal|" to room "
operator|+
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|": room not available at "
operator|+
name|period
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|fail
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|roomPlacements
operator|.
name|add
argument_list|(
name|roomPlacement
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|fail
operator|&&
name|roomPlacements
operator|.
name|size
argument_list|()
operator|>
name|x
operator|.
name|getMaxRooms
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to assign exam "
operator|+
name|getExamLabel
argument_list|(
name|exam
argument_list|)
operator|+
literal|" to room"
operator|+
operator|(
name|roomPlacements
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
literal|"s"
else|:
literal|""
operator|)
operator|+
literal|" "
operator|+
name|roomPlacements
operator|+
literal|": number of assigned rooms exceeds the current limit ("
operator|+
name|roomPlacements
operator|.
name|size
argument_list|()
operator|+
literal|">"
operator|+
name|x
operator|.
name|getMaxRooms
argument_list|()
operator|+
literal|")."
argument_list|)
expr_stmt|;
name|fail
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fail
condition|)
name|x
operator|.
name|setInitialAssignment
argument_list|(
operator|new
name|ExamPlacement
argument_list|(
name|x
argument_list|,
name|periodPlacement
argument_list|,
name|roomPlacements
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|ExamInstructor
name|loadInstructor
parameter_list|(
name|DepartmentalInstructor
name|instructor
parameter_list|)
block|{
if|if
condition|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExamInstructor
name|i
init|=
operator|(
name|ExamInstructor
operator|)
name|iInstructors
operator|.
name|get
argument_list|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|null
condition|)
block|{
name|i
operator|=
operator|new
name|ExamInstructor
argument_list|(
name|getModel
argument_list|()
argument_list|,
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|instructor
operator|.
name|getName
argument_list|(
name|iInstructorFormat
argument_list|)
argument_list|)
expr_stmt|;
name|iInstructors
operator|.
name|put
argument_list|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|addConstraint
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|getInstructors
argument_list|()
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
else|else
block|{
name|ExamInstructor
name|i
init|=
operator|(
name|ExamInstructor
operator|)
name|iInstructors
operator|.
name|get
argument_list|(
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|null
condition|)
block|{
name|i
operator|=
operator|new
name|ExamInstructor
argument_list|(
name|getModel
argument_list|()
argument_list|,
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|instructor
operator|.
name|getName
argument_list|(
name|iInstructorFormat
argument_list|)
argument_list|)
expr_stmt|;
name|iInstructors
operator|.
name|put
argument_list|(
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|addConstraint
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|getInstructors
argument_list|()
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
block|}
specifier|protected
name|ExamInstructor
name|getInstructor
parameter_list|(
name|DepartmentalInstructor
name|instructor
parameter_list|)
block|{
if|if
condition|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExamInstructor
name|i
init|=
operator|(
name|ExamInstructor
operator|)
name|iInstructors
operator|.
name|get
argument_list|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|null
condition|)
return|return
name|i
return|;
block|}
return|return
operator|(
name|ExamInstructor
operator|)
name|iInstructors
operator|.
name|get
argument_list|(
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|ExamRoomPlacement
argument_list|>
name|findRooms
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
name|exam
parameter_list|)
block|{
name|List
argument_list|<
name|ExamRoomPlacement
argument_list|>
name|rooms
init|=
operator|new
name|ArrayList
argument_list|<
name|ExamRoomPlacement
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|reqRoom
init|=
literal|false
decl_stmt|;
name|boolean
name|reqBldg
init|=
literal|false
decl_stmt|;
name|boolean
name|reqGroup
init|=
literal|false
decl_stmt|;
name|Set
name|groupPrefs
init|=
name|exam
operator|.
name|getPreferences
argument_list|(
name|RoomGroupPref
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
name|roomPrefs
init|=
name|exam
operator|.
name|getPreferences
argument_list|(
name|RoomPref
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
name|bldgPrefs
init|=
name|exam
operator|.
name|getPreferences
argument_list|(
name|BuildingPref
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
name|featurePrefs
init|=
name|exam
operator|.
name|getPreferences
argument_list|(
name|RoomFeaturePref
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i1
init|=
name|iAllRooms
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|room
init|=
operator|(
name|Location
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExamRoom
name|roomEx
init|=
name|iRooms
operator|.
name|get
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|roomEx
operator|==
literal|null
condition|)
continue|continue;
name|boolean
name|add
init|=
literal|true
decl_stmt|;
name|PreferenceCombination
name|pref
init|=
operator|new
name|SumPreferenceCombination
argument_list|()
decl_stmt|;
comment|// --- group preference ----------
name|PreferenceCombination
name|groupPref
init|=
name|PreferenceCombination
operator|.
name|getDefault
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|groupPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomGroupPref
name|p
init|=
operator|(
name|RoomGroupPref
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|getRooms
argument_list|()
operator|.
name|contains
argument_list|(
name|room
argument_list|)
condition|)
name|groupPref
operator|.
name|addPreferenceProlog
argument_list|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|groupPref
operator|.
name|getPreferenceProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
condition|)
name|add
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|reqGroup
operator|&&
operator|!
name|groupPref
operator|.
name|getPreferenceProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
name|add
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|reqGroup
operator|&&
operator|(
name|groupPref
operator|.
name|getPreferenceProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|)
condition|)
block|{
name|reqGroup
operator|=
literal|true
expr_stmt|;
name|rooms
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|groupPref
operator|.
name|getPreferenceProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|&&
operator|!
name|groupPref
operator|.
name|getPreferenceProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|groupPref
operator|.
name|getPreferenceProlog
argument_list|()
argument_list|)
expr_stmt|;
comment|// --- room preference ------------
name|String
name|roomPref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|roomPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomPref
name|p
init|=
operator|(
name|RoomPref
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|room
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getRoom
argument_list|()
argument_list|)
condition|)
block|{
name|roomPref
operator|=
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|roomPref
operator|!=
literal|null
operator|&&
name|roomPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
condition|)
name|add
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|reqRoom
operator|&&
operator|(
name|roomPref
operator|==
literal|null
operator|||
operator|!
name|roomPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|)
condition|)
name|add
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|reqRoom
operator|&&
operator|(
name|roomPref
operator|!=
literal|null
operator|&&
name|roomPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|)
condition|)
block|{
name|reqRoom
operator|=
literal|true
expr_stmt|;
name|rooms
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|roomPref
operator|!=
literal|null
operator|&&
operator|!
name|roomPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|&&
operator|!
name|roomPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|roomPref
argument_list|)
expr_stmt|;
comment|// --- building preference ------------
name|Building
name|bldg
init|=
operator|(
name|room
operator|instanceof
name|Room
condition|?
operator|(
operator|(
name|Room
operator|)
name|room
operator|)
operator|.
name|getBuilding
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
name|String
name|bldgPref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|bldgPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BuildingPref
name|p
init|=
operator|(
name|BuildingPref
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|bldg
operator|!=
literal|null
operator|&&
name|bldg
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getBuilding
argument_list|()
argument_list|)
condition|)
block|{
name|bldgPref
operator|=
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|bldgPref
operator|!=
literal|null
operator|&&
name|bldgPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
condition|)
name|add
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|reqBldg
operator|&&
operator|(
name|bldgPref
operator|==
literal|null
operator|||
operator|!
name|bldgPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|)
condition|)
name|add
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|reqBldg
operator|&&
operator|(
name|bldgPref
operator|!=
literal|null
operator|&&
name|bldgPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|)
condition|)
block|{
name|reqBldg
operator|=
literal|true
expr_stmt|;
name|rooms
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|bldgPref
operator|!=
literal|null
operator|&&
operator|!
name|bldgPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|&&
operator|!
name|bldgPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|bldgPref
argument_list|)
expr_stmt|;
comment|// --- room features preference --------
name|boolean
name|acceptableFeatures
init|=
literal|true
decl_stmt|;
name|PreferenceCombination
name|featurePref
init|=
operator|new
name|MinMaxPreferenceCombination
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|featurePrefs
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomFeaturePref
name|roomFeaturePref
init|=
operator|(
name|RoomFeaturePref
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|RoomFeature
name|feature
init|=
name|roomFeaturePref
operator|.
name|getRoomFeature
argument_list|()
decl_stmt|;
name|String
name|p
init|=
name|roomFeaturePref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
decl_stmt|;
name|boolean
name|hasFeature
init|=
name|feature
operator|.
name|getRooms
argument_list|()
operator|.
name|contains
argument_list|(
name|room
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|&&
name|hasFeature
condition|)
block|{
name|acceptableFeatures
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|&&
operator|!
name|hasFeature
condition|)
block|{
name|acceptableFeatures
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|hasFeature
operator|&&
operator|!
name|p
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|&&
operator|!
name|p
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
name|featurePref
operator|.
name|addPreferenceProlog
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|pref
operator|.
name|addPreferenceInt
argument_list|(
name|featurePref
operator|.
name|getPreferenceInt
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|acceptableFeatures
condition|)
name|add
operator|=
literal|false
expr_stmt|;
name|int
name|prefInt
init|=
name|pref
operator|.
name|getPreferenceInt
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|add
condition|)
continue|continue;
name|boolean
name|hasStrongDisc
init|=
literal|false
decl_stmt|,
name|allStrongDisc
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ExamPeriod
name|period
range|:
name|getModel
argument_list|()
operator|.
name|getPeriods
argument_list|()
control|)
block|{
if|if
condition|(
name|roomEx
operator|.
name|isAvailable
argument_list|(
name|period
argument_list|)
condition|)
if|if
condition|(
name|roomEx
operator|.
name|getPenalty
argument_list|(
name|period
argument_list|)
operator|==
literal|4
condition|)
name|hasStrongDisc
operator|=
literal|true
expr_stmt|;
else|else
name|allStrongDisc
operator|=
literal|false
expr_stmt|;
block|}
comment|//all strongly discouraged and not overridden by room preference -> do not use this room
if|if
condition|(
name|allStrongDisc
operator|&&
name|roomPref
operator|==
literal|null
condition|)
continue|continue;
comment|//has strongly discouraged and not overridden by room preference -> strongly discouraged periods are not available
name|rooms
operator|.
name|add
argument_list|(
operator|new
name|ExamRoomPlacement
argument_list|(
name|roomEx
argument_list|,
name|prefInt
argument_list|,
operator|(
name|hasStrongDisc
operator|&&
name|roomPref
operator|==
literal|null
condition|?
literal|3
else|:
literal|100
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rooms
return|;
block|}
specifier|protected
name|void
name|loadStudents
parameter_list|()
block|{
name|loadStudents
argument_list|(
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select x.uniqueId, o.uniqueId, e.student.uniqueId from "
operator|+
literal|"Exam x inner join x.owners o, "
operator|+
literal|"StudentClassEnrollment e inner join e.clazz c "
operator|+
literal|"where x.session.uniqueId=:sessionId and x.examType=:examType and "
operator|+
literal|"o.ownerType="
operator|+
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
operator|.
name|sOwnerTypeClass
operator|+
literal|" and "
operator|+
literal|"o.ownerId=c.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|iExamType
argument_list|)
operator|.
name|list
argument_list|()
argument_list|,
literal|"class"
argument_list|)
expr_stmt|;
name|loadStudents
argument_list|(
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select x.uniqueId, o.uniqueId, e.student.uniqueId from "
operator|+
literal|"Exam x inner join x.owners o, "
operator|+
literal|"StudentClassEnrollment e inner join e.clazz c "
operator|+
literal|"inner join c.schedulingSubpart.instrOfferingConfig ioc "
operator|+
literal|"where x.session.uniqueId=:sessionId and x.examType=:examType and "
operator|+
literal|"o.ownerType="
operator|+
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
operator|.
name|sOwnerTypeConfig
operator|+
literal|" and "
operator|+
literal|"o.ownerId=ioc.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|iExamType
argument_list|)
operator|.
name|list
argument_list|()
argument_list|,
literal|"config"
argument_list|)
expr_stmt|;
name|loadStudents
argument_list|(
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select x.uniqueId, o.uniqueId, e.student.uniqueId from "
operator|+
literal|"Exam x inner join x.owners o, "
operator|+
literal|"StudentClassEnrollment e inner join e.courseOffering co "
operator|+
literal|"where x.session.uniqueId=:sessionId and x.examType=:examType and "
operator|+
literal|"o.ownerType="
operator|+
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
operator|.
name|sOwnerTypeCourse
operator|+
literal|" and "
operator|+
literal|"o.ownerId=co.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|iExamType
argument_list|)
operator|.
name|list
argument_list|()
argument_list|,
literal|"course"
argument_list|)
expr_stmt|;
name|loadStudents
argument_list|(
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select x.uniqueId, o.uniqueId, e.student.uniqueId from "
operator|+
literal|"Exam x inner join x.owners o, "
operator|+
literal|"StudentClassEnrollment e inner join e.courseOffering.instructionalOffering io "
operator|+
literal|"where x.session.uniqueId=:sessionId and x.examType=:examType and "
operator|+
literal|"o.ownerType="
operator|+
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
operator|.
name|sOwnerTypeOffering
operator|+
literal|" and "
operator|+
literal|"o.ownerId=io.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|iExamType
argument_list|)
operator|.
name|list
argument_list|()
argument_list|,
literal|"offering"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|loadStudents
parameter_list|(
name|Collection
name|enrl
parameter_list|,
name|String
name|phase
parameter_list|)
block|{
name|HashSet
name|notLoaded
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Loading students ("
operator|+
name|phase
operator|+
literal|")..."
argument_list|,
name|enrl
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|enrl
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|examId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|ownerId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|ExamStudent
name|student
init|=
operator|(
name|ExamStudent
operator|)
name|iStudents
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
block|{
name|student
operator|=
operator|new
name|ExamStudent
argument_list|(
name|getModel
argument_list|()
argument_list|,
name|studentId
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|addConstraint
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|iStudents
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|student
argument_list|)
expr_stmt|;
block|}
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|iExams
operator|.
name|get
argument_list|(
name|examId
argument_list|)
decl_stmt|;
if|if
condition|(
name|exam
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|notLoaded
operator|.
name|add
argument_list|(
name|examId
argument_list|)
condition|)
name|iProgress
operator|.
name|info
argument_list|(
literal|"Exam "
operator|+
name|getExamLabel
argument_list|(
operator|new
name|ExamDAO
argument_list|()
operator|.
name|get
argument_list|(
name|examId
argument_list|)
argument_list|)
operator|+
literal|" not loaded."
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|student
operator|.
name|variables
argument_list|()
operator|.
name|contains
argument_list|(
name|exam
argument_list|)
condition|)
name|student
operator|.
name|addVariable
argument_list|(
name|exam
argument_list|)
expr_stmt|;
for|for
control|(
name|ExamOwner
name|owner
range|:
name|exam
operator|.
name|getOwners
argument_list|()
control|)
block|{
if|if
condition|(
name|owner
operator|.
name|getId
argument_list|()
operator|==
name|ownerId
condition|)
name|owner
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*     protected void loadAvailabilities() {         List committedAssignments = new ExamDAO().getSession().createQuery(                 "select a from Assignment a where a.solution.commited=true and " +                 "a.solution.owner.session.uniqueId=:sessionId").                 setLong("sessionId",iSessionId).list();         Set periods = org.unitime.timetable.model.ExamPeriod.findAll(iSessionId, iExamType);         iProgress.setPhase("Loading availabilities...", committedAssignments.size());         for (Iterator i=committedAssignments.iterator();i.hasNext();) {             iProgress.incProgress();             Assignment a = (Assignment)i.next();             List studentIds = null;             for (Iterator j=periods.iterator();j.hasNext();) {                 org.unitime.timetable.model.ExamPeriod period = (org.unitime.timetable.model.ExamPeriod)j.next();                 if (period.overlap(a)) {                     iProgress.debug("Class "+a.getClassName()+" "+a.getPlacement().getLongName()+" overlaps with period "+period.getName());                     ExamPeriod exPeriod = iPeriods.get(period.getUniqueId());                     ExamResourceUnavailability unavailability = new ExamResourceUnavailability(exPeriod, a.getUniqueId(), "class",                              a.getClassName(), a.getPlacement().getTimeLocation().getDatePatternName(),                             a.getPlacement().getTimeLocation().getDayHeader()+" "+a.getPlacement().getTimeLocation().getStartTimeHeader()+" - "+a.getPlacement().getTimeLocation().getEndTimeHeader(),                              a.getPlacement().getRoomName(", "), a.getClazz().getClassLimit());                     if (studentIds==null)                         studentIds = new ExamDAO().getSession().createQuery(                                 "select e.student.uniqueId from "+                                 "StudentClassEnrollment e where e.clazz.uniqueId=:classId").                                 setLong("classId", a.getClassId()).list();                      for (Iterator k=studentIds.iterator();k.hasNext();) {                         Long studentId = (Long)k.next();                         ExamStudent student = (ExamStudent)iStudents.get(studentId);                         if (student!=null) {                              student.setAvailable(exPeriod.getIndex(), false);                             unavailability.getStudentIds().add(student.getId());                         }                     }                     for (Iterator k=a.getClazz().getClassInstructors().iterator();k.hasNext();) {                         ClassInstructor ci = (ClassInstructor)k.next();                         if (!ci.isLead()) continue;                         ExamInstructor instructor = getInstructor(ci.getInstructor());                         if (instructor!=null) {                             instructor.setAvailable(exPeriod.getIndex(), false);                             unavailability.getInstructorIds().add(instructor.getId());                         }                     }                     getModel().addUnavailability(unavailability);                 }             }         }     }     */
specifier|protected
name|void
name|loadAvailabilitiesFromEvents
parameter_list|()
block|{
name|List
name|overlappingClassEvents
init|=
operator|new
name|EventDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct e.uniqueId, p.uniqueId, m from ClassEvent e inner join e.meetings m, ExamPeriod p where "
operator|+
literal|"p.session.uniqueId=:sessionId and p.examType=:examType and "
operator|+
literal|"p.startSlot - :travelTime< m.stopPeriod and m.startPeriod< p.startSlot + p.length + :travelTime and "
operator|+
name|HibernateUtil
operator|.
name|addDate
argument_list|(
literal|"p.session.examBeginDate"
argument_list|,
literal|"p.dateOffset"
argument_list|)
operator|+
literal|" = m.meetingDate and "
operator|+
literal|"(exists elements(e.clazz.studentEnrollments) or exists elements(e.clazz.classInstructors))"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"travelTime"
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.eventConflicts.travelTime.classEvent"
argument_list|,
literal|"6"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|iExamType
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|List
name|overlappingCourseEvents
init|=
operator|new
name|EventDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct e.uniqueId, p.uniqueId, m from CourseEvent e inner join e.meetings m, ExamPeriod p where "
operator|+
literal|"e.reqAttendance=true and p.session.uniqueId=:sessionId and p.examType=:examType and "
operator|+
literal|"p.startSlot - :travelTime< m.stopPeriod and m.startPeriod< p.startSlot + p.length + :travelTime and "
operator|+
name|HibernateUtil
operator|.
name|addDate
argument_list|(
literal|"p.session.examBeginDate"
argument_list|,
literal|"p.dateOffset"
argument_list|)
operator|+
literal|" = m.meetingDate"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"travelTime"
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.eventConflicts.travelTime.courseEvent"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|iExamType
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Loading availabilities..."
argument_list|,
name|overlappingClassEvents
operator|.
name|size
argument_list|()
operator|+
name|overlappingCourseEvents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|ExamStudent
argument_list|>
argument_list|>
name|students
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|EventDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e.uniqueId, s.student.uniqueId from ClassEvent e inner join e.meetings m inner join e.clazz.studentEnrollments s, ExamPeriod p where "
operator|+
literal|"p.session.uniqueId=:sessionId and p.examType=:examType and "
operator|+
literal|"p.startSlot - :travelTime< m.stopPeriod and m.startPeriod< p.startSlot + p.length + :travelTime and "
operator|+
name|HibernateUtil
operator|.
name|addDate
argument_list|(
literal|"p.session.examBeginDate"
argument_list|,
literal|"p.dateOffset"
argument_list|)
operator|+
literal|" = m.meetingDate"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"travelTime"
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.eventConflicts.travelTime.classEvent"
argument_list|,
literal|"6"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|iExamType
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|eventId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|ExamStudent
name|student
init|=
operator|(
name|ExamStudent
operator|)
name|iStudents
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
continue|continue;
name|Set
argument_list|<
name|ExamStudent
argument_list|>
name|studentsThisEvent
init|=
name|students
operator|.
name|get
argument_list|(
name|eventId
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentsThisEvent
operator|==
literal|null
condition|)
block|{
name|studentsThisEvent
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|students
operator|.
name|put
argument_list|(
name|eventId
argument_list|,
name|studentsThisEvent
argument_list|)
expr_stmt|;
block|}
name|studentsThisEvent
operator|.
name|add
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|ExamInstructor
argument_list|>
argument_list|>
name|instructors
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|EventDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e.uniqueId, i.instructor from ClassEvent e inner join e.meetings m inner join e.clazz.classInstructors i, ExamPeriod p where "
operator|+
literal|"p.session.uniqueId=:sessionId and p.examType=:examType and i.lead=true and "
operator|+
literal|"p.startSlot - :travelTime< m.stopPeriod and m.startPeriod< p.startSlot + p.length + :travelTime and "
operator|+
name|HibernateUtil
operator|.
name|addDate
argument_list|(
literal|"p.session.examBeginDate"
argument_list|,
literal|"p.dateOffset"
argument_list|)
operator|+
literal|" = m.meetingDate"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"travelTime"
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.eventConflicts.travelTime.classEvent"
argument_list|,
literal|"6"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|iExamType
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|eventId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|ExamInstructor
name|instructor
init|=
name|getInstructor
argument_list|(
operator|(
name|DepartmentalInstructor
operator|)
name|o
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructor
operator|==
literal|null
condition|)
continue|continue;
name|Set
argument_list|<
name|ExamInstructor
argument_list|>
name|instructorsThisEvent
init|=
name|instructors
operator|.
name|get
argument_list|(
name|eventId
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructorsThisEvent
operator|==
literal|null
condition|)
block|{
name|instructorsThisEvent
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|instructors
operator|.
name|put
argument_list|(
name|eventId
argument_list|,
name|instructorsThisEvent
argument_list|)
expr_stmt|;
block|}
name|instructorsThisEvent
operator|.
name|add
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|ExamPeriod
argument_list|,
name|ExamResourceUnavailability
argument_list|>
argument_list|>
name|unavailabilities
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|overlappingClassEvents
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|eventId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|ExamPeriod
name|period
init|=
name|iPeriods
operator|.
name|get
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
if|if
condition|(
name|period
operator|==
literal|null
condition|)
continue|continue;
name|Set
argument_list|<
name|ExamStudent
argument_list|>
name|studentsThisEvent
init|=
name|students
operator|.
name|get
argument_list|(
name|eventId
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ExamInstructor
argument_list|>
name|instructorsThisEvent
init|=
name|instructors
operator|.
name|get
argument_list|(
name|eventId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|studentsThisEvent
operator|==
literal|null
operator|||
name|studentsThisEvent
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
operator|(
name|instructorsThisEvent
operator|==
literal|null
operator|||
name|instructorsThisEvent
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
continue|continue;
name|Set
argument_list|<
name|Long
argument_list|>
name|studentIds
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|instructorIds
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|studentsThisEvent
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExamStudent
name|student
range|:
name|studentsThisEvent
control|)
block|{
name|student
operator|.
name|setAvailable
argument_list|(
name|period
operator|.
name|getIndex
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|studentIds
operator|.
name|add
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|instructorsThisEvent
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExamInstructor
name|instructor
range|:
name|instructorsThisEvent
control|)
block|{
name|instructor
operator|.
name|setAvailable
argument_list|(
name|period
operator|.
name|getIndex
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|instructorIds
operator|.
name|add
argument_list|(
name|instructor
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|studentIds
operator|.
name|isEmpty
argument_list|()
operator|&&
name|instructorIds
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|Hashtable
argument_list|<
name|ExamPeriod
argument_list|,
name|ExamResourceUnavailability
argument_list|>
name|unavailabilitiesThisEvent
init|=
name|unavailabilities
operator|.
name|get
argument_list|(
name|eventId
argument_list|)
decl_stmt|;
if|if
condition|(
name|unavailabilitiesThisEvent
operator|==
literal|null
condition|)
block|{
name|unavailabilitiesThisEvent
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|unavailabilities
operator|.
name|put
argument_list|(
name|eventId
argument_list|,
name|unavailabilitiesThisEvent
argument_list|)
expr_stmt|;
block|}
name|ExamRoom
name|room
init|=
operator|(
name|meeting
operator|.
name|getLocationPermanentId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|iPermId2Room
operator|.
name|get
argument_list|(
name|meeting
operator|.
name|getLocationPermanentId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
name|ExamResourceUnavailability
name|unavailability
init|=
name|unavailabilitiesThisEvent
operator|.
name|get
argument_list|(
name|period
argument_list|)
decl_stmt|;
if|if
condition|(
name|unavailability
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|room
operator|!=
literal|null
condition|)
name|unavailability
operator|.
name|addRoom
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|unavailability
operator|=
operator|new
name|ExamResourceUnavailability
argument_list|(
name|period
argument_list|,
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|"class"
argument_list|,
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventName
argument_list|()
argument_list|,
name|meeting
operator|.
name|dateStr
argument_list|()
argument_list|,
name|meeting
operator|.
name|startTime
argument_list|()
operator|+
literal|" - "
operator|+
name|meeting
operator|.
name|stopTime
argument_list|()
argument_list|,
operator|(
name|room
operator|==
literal|null
condition|?
literal|""
else|:
name|room
operator|.
name|getName
argument_list|()
operator|)
argument_list|,
operator|(
name|studentsThisEvent
operator|==
literal|null
condition|?
literal|0
else|:
name|studentsThisEvent
operator|.
name|size
argument_list|()
operator|)
argument_list|,
name|studentIds
argument_list|,
name|instructorIds
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|debug
argument_list|(
literal|"Class event "
operator|+
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventName
argument_list|()
operator|+
literal|" "
operator|+
name|meeting
operator|.
name|getTimeLabel
argument_list|()
operator|+
literal|" overlaps with period "
operator|+
name|period
operator|+
literal|" ("
operator|+
name|studentIds
operator|.
name|size
argument_list|()
operator|+
literal|" students, "
operator|+
name|instructorIds
operator|.
name|size
argument_list|()
operator|+
literal|" instructors)"
argument_list|)
expr_stmt|;
name|unavailabilitiesThisEvent
operator|.
name|put
argument_list|(
name|period
argument_list|,
name|unavailability
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|addUnavailability
argument_list|(
name|unavailability
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|overlappingCourseEvents
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|eventId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|ExamPeriod
name|period
init|=
name|iPeriods
operator|.
name|get
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
if|if
condition|(
name|period
operator|==
literal|null
condition|)
continue|continue;
name|Set
argument_list|<
name|ExamStudent
argument_list|>
name|studentsThisEvent
init|=
name|students
operator|.
name|get
argument_list|(
name|eventId
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentsThisEvent
operator|==
literal|null
condition|)
block|{
name|studentsThisEvent
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
for|for
control|(
name|Long
name|studentId
range|:
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getStudentIds
argument_list|()
control|)
block|{
name|ExamStudent
name|student
init|=
operator|(
name|ExamStudent
operator|)
name|iStudents
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|!=
literal|null
condition|)
name|studentsThisEvent
operator|.
name|add
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
name|students
operator|.
name|put
argument_list|(
name|eventId
argument_list|,
name|studentsThisEvent
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|ExamInstructor
argument_list|>
name|instructorsThisEvent
init|=
name|instructors
operator|.
name|get
argument_list|(
name|eventId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|studentsThisEvent
operator|==
literal|null
operator|||
name|studentsThisEvent
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
operator|(
name|instructorsThisEvent
operator|==
literal|null
operator|||
name|instructorsThisEvent
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
continue|continue;
name|Set
argument_list|<
name|Long
argument_list|>
name|studentIds
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|instructorIds
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|studentsThisEvent
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExamStudent
name|student
range|:
name|studentsThisEvent
control|)
block|{
name|student
operator|.
name|setAvailable
argument_list|(
name|period
operator|.
name|getIndex
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|studentIds
operator|.
name|add
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|instructorsThisEvent
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExamInstructor
name|instructor
range|:
name|instructorsThisEvent
control|)
block|{
name|instructor
operator|.
name|setAvailable
argument_list|(
name|period
operator|.
name|getIndex
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|instructorIds
operator|.
name|add
argument_list|(
name|instructor
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|studentIds
operator|.
name|isEmpty
argument_list|()
operator|&&
name|instructorIds
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|Hashtable
argument_list|<
name|ExamPeriod
argument_list|,
name|ExamResourceUnavailability
argument_list|>
name|unavailabilitiesThisEvent
init|=
name|unavailabilities
operator|.
name|get
argument_list|(
name|eventId
argument_list|)
decl_stmt|;
if|if
condition|(
name|unavailabilitiesThisEvent
operator|==
literal|null
condition|)
block|{
name|unavailabilitiesThisEvent
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|unavailabilities
operator|.
name|put
argument_list|(
name|eventId
argument_list|,
name|unavailabilitiesThisEvent
argument_list|)
expr_stmt|;
block|}
name|ExamRoom
name|room
init|=
operator|(
name|meeting
operator|.
name|getLocationPermanentId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|iPermId2Room
operator|.
name|get
argument_list|(
name|meeting
operator|.
name|getLocationPermanentId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
name|ExamResourceUnavailability
name|unavailability
init|=
name|unavailabilitiesThisEvent
operator|.
name|get
argument_list|(
name|period
argument_list|)
decl_stmt|;
if|if
condition|(
name|unavailability
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|room
operator|!=
literal|null
condition|)
name|unavailability
operator|.
name|addRoom
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|unavailability
operator|=
operator|new
name|ExamResourceUnavailability
argument_list|(
name|period
argument_list|,
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|"event"
argument_list|,
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventName
argument_list|()
argument_list|,
name|meeting
operator|.
name|dateStr
argument_list|()
argument_list|,
name|meeting
operator|.
name|startTime
argument_list|()
operator|+
literal|" - "
operator|+
name|meeting
operator|.
name|stopTime
argument_list|()
argument_list|,
operator|(
name|room
operator|==
literal|null
condition|?
literal|""
else|:
name|room
operator|.
name|getName
argument_list|()
operator|)
argument_list|,
operator|(
name|studentsThisEvent
operator|==
literal|null
condition|?
literal|0
else|:
name|studentsThisEvent
operator|.
name|size
argument_list|()
operator|)
argument_list|,
name|studentIds
argument_list|,
name|instructorIds
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|debug
argument_list|(
literal|"Class event "
operator|+
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventName
argument_list|()
operator|+
literal|"/"
operator|+
name|meeting
operator|.
name|getTimeLabel
argument_list|()
operator|+
literal|" overlaps with period "
operator|+
name|period
operator|+
literal|" ("
operator|+
name|studentIds
operator|.
name|size
argument_list|()
operator|+
literal|" students, "
operator|+
name|instructorIds
operator|.
name|size
argument_list|()
operator|+
literal|" instructors)"
argument_list|)
expr_stmt|;
name|unavailabilitiesThisEvent
operator|.
name|put
argument_list|(
name|period
argument_list|,
name|unavailability
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|addUnavailability
argument_list|(
name|unavailability
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|loadDistributions
parameter_list|()
block|{
name|List
name|distPrefs
init|=
operator|new
name|DistributionPrefDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct d from DistributionPref d inner join d.distributionObjects o, Exam x where "
operator|+
literal|"d.distributionType.examPref=true and "
operator|+
literal|"o.prefGroup=x and x.session.uniqueId=:sessionId and x.examType=:examType and "
operator|+
literal|"d.owner.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|iExamType
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Loading distributions..."
argument_list|,
name|distPrefs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|distPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|DistributionPref
name|pref
init|=
operator|(
name|DistributionPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExamDistributionConstraint
name|constraint
init|=
operator|new
name|ExamDistributionConstraint
argument_list|(
name|pref
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|pref
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|,
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
operator|new
name|TreeSet
argument_list|(
name|pref
operator|.
name|getDistributionObjects
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|distObj
init|=
operator|(
name|DistributionObject
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|iExams
operator|.
name|get
argument_list|(
name|distObj
operator|.
name|getPrefGroup
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|exam
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|info
argument_list|(
literal|"Exam "
operator|+
name|getExamLabel
argument_list|(
operator|new
name|ExamDAO
argument_list|()
operator|.
name|get
argument_list|(
name|distObj
operator|.
name|getPrefGroup
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|" not loaded."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|constraint
operator|.
name|addVariable
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|constraint
operator|.
name|variables
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getModel
argument_list|()
operator|.
name|addConstraint
argument_list|(
name|constraint
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|getDistributionConstraints
argument_list|()
operator|.
name|add
argument_list|(
name|constraint
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|assignInitial
parameter_list|()
block|{
if|if
condition|(
name|iLoadSolution
condition|)
block|{
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Assigning loaded solution..."
argument_list|,
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Exam
name|exam
range|:
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|ExamPlacement
name|placement
init|=
operator|(
name|ExamPlacement
operator|)
name|exam
operator|.
name|getInitialAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|placement
operator|==
literal|null
condition|)
continue|continue;
name|Set
name|conf
init|=
name|getModel
argument_list|()
operator|.
name|conflictValues
argument_list|(
name|placement
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|conf
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|getModel
argument_list|()
operator|.
name|conflictConstraints
argument_list|(
name|placement
argument_list|)
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Constraint
name|constraint
init|=
operator|(
name|Constraint
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Set
name|values
init|=
operator|(
name|Set
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|constraint
operator|instanceof
name|ExamStudent
condition|)
block|{
operator|(
operator|(
name|ExamStudent
operator|)
name|constraint
operator|)
operator|.
name|setAllowDirectConflicts
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|exam
operator|.
name|setAllowDirectConflicts
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|values
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
operator|(
operator|(
name|Exam
operator|)
operator|(
operator|(
name|ExamPlacement
operator|)
name|j
operator|.
name|next
argument_list|()
operator|)
operator|.
name|variable
argument_list|()
operator|)
operator|.
name|setAllowDirectConflicts
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|conf
operator|=
name|getModel
argument_list|()
operator|.
name|conflictValues
argument_list|(
name|placement
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|exam
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|placement
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to assign "
operator|+
name|exam
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" to exam "
operator|+
name|exam
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|info
argument_list|(
literal|"Conflicts:"
operator|+
name|ToolBox
operator|.
name|dict2string
argument_list|(
name|getModel
argument_list|()
operator|.
name|conflictConstraints
argument_list|(
name|exam
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|checkConsistency
parameter_list|()
block|{
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Checking consistency..."
argument_list|,
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Exam
name|exam
range|:
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
if|if
condition|(
name|exam
operator|.
name|getPeriodPlacements
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"Exam "
operator|+
name|getExamLabel
argument_list|(
name|exam
argument_list|)
operator|+
literal|" has no period available."
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|exam
operator|.
name|getMaxRooms
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|capacity
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Math
operator|.
name|min
argument_list|(
name|exam
operator|.
name|getMaxRooms
argument_list|()
argument_list|,
name|exam
operator|.
name|getRoomPlacements
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|ExamRoomPlacement
name|r
init|=
operator|(
name|ExamRoomPlacement
operator|)
name|exam
operator|.
name|getRoomPlacements
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|capacity
operator|+=
name|r
operator|.
name|getSize
argument_list|(
name|exam
operator|.
name|hasAltSeating
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|capacity
operator|<
name|exam
operator|.
name|getSize
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"Exam "
operator|+
name|getExamLabel
argument_list|(
name|exam
argument_list|)
operator|+
literal|" has no room placement available."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|boolean
name|hasValue
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ExamPeriodPlacement
argument_list|>
name|f
init|=
name|exam
operator|.
name|getPeriodPlacements
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
operator|!
name|hasValue
operator|&&
name|f
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriodPlacement
name|period
init|=
name|f
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|exam
operator|.
name|findBestAvailableRooms
argument_list|(
name|period
argument_list|)
operator|!=
literal|null
condition|)
name|hasValue
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasValue
condition|)
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"Exam "
operator|+
name|getExamLabel
argument_list|(
name|exam
argument_list|)
operator|+
literal|" has no assignment available."
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|loadRoomAvailability
parameter_list|(
name|RoomAvailabilityInterface
name|ra
parameter_list|)
block|{
name|Set
name|periods
init|=
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
operator|.
name|findAll
argument_list|(
name|iSessionId
argument_list|,
name|iExamType
argument_list|)
decl_stmt|;
name|Date
index|[]
name|bounds
init|=
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
operator|.
name|getBounds
argument_list|(
operator|new
name|SessionDAO
argument_list|()
operator|.
name|get
argument_list|(
name|iSessionId
argument_list|)
argument_list|,
name|iExamType
argument_list|)
decl_stmt|;
name|String
name|exclude
init|=
operator|(
name|iExamType
operator|==
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|.
name|sExamTypeFinal
condition|?
name|RoomAvailabilityInterface
operator|.
name|sFinalExamType
else|:
name|RoomAvailabilityInterface
operator|.
name|sMidtermExamType
operator|)
decl_stmt|;
name|roomAvailabilityActivate
argument_list|(
name|bounds
index|[
literal|0
index|]
argument_list|,
name|bounds
index|[
literal|1
index|]
argument_list|,
name|exclude
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Loading room availability..."
argument_list|,
name|iAllRooms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iAllRooms
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExamRoom
name|roomEx
init|=
name|iRooms
operator|.
name|get
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|roomEx
operator|==
literal|null
condition|)
continue|continue;
name|Collection
argument_list|<
name|TimeBlock
argument_list|>
name|times
init|=
name|getRoomAvailability
argument_list|(
name|location
argument_list|,
name|bounds
index|[
literal|0
index|]
argument_list|,
name|bounds
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|times
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|TimeBlock
name|time
range|:
name|times
control|)
block|{
for|for
control|(
name|Iterator
name|j
init|=
name|periods
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
name|period
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExamPeriod
name|periodEx
init|=
name|iPeriods
operator|.
name|get
argument_list|(
name|period
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|periodEx
operator|!=
literal|null
operator|&&
name|period
operator|.
name|overlap
argument_list|(
name|time
argument_list|)
condition|)
name|roomEx
operator|.
name|setAvailable
argument_list|(
name|periodEx
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|boolean
name|hasRoomAvailability
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|isRemote
argument_list|()
condition|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|RemoteSolverServer
operator|.
name|query
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"hasRoomAvailability"
block|}
argument_list|)
return|;
block|}
else|else
return|return
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|!=
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to access room availability service, reason:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|TimeBlock
argument_list|>
name|getRoomAvailability
parameter_list|(
name|Location
name|location
parameter_list|,
name|Date
name|startTime
parameter_list|,
name|Date
name|endTime
parameter_list|)
block|{
name|Collection
argument_list|<
name|TimeBlock
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
name|String
name|ts
init|=
literal|null
decl_stmt|;
name|String
name|exclude
init|=
operator|(
name|iExamType
operator|==
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|.
name|sExamTypeFinal
condition|?
name|RoomAvailabilityInterface
operator|.
name|sFinalExamType
else|:
name|RoomAvailabilityInterface
operator|.
name|sMidtermExamType
operator|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|isRemote
argument_list|()
condition|)
block|{
name|ret
operator|=
operator|(
name|Collection
argument_list|<
name|TimeBlock
argument_list|>
operator|)
name|RemoteSolverServer
operator|.
name|query
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"getRoomAvailability"
block|,
name|location
operator|.
name|getUniqueId
argument_list|()
block|,
name|startTime
block|,
name|endTime
block|,
name|exclude
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iRoomAvailabilityTimeStampIsSet
condition|)
name|ts
operator|=
operator|(
name|String
operator|)
name|RemoteSolverServer
operator|.
name|query
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"getRoomAvailabilityTimeStamp"
block|,
name|startTime
block|,
name|endTime
block|,
name|exclude
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|.
name|getRoomAvailability
argument_list|(
name|location
argument_list|,
name|startTime
argument_list|,
name|endTime
argument_list|,
name|exclude
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iRoomAvailabilityTimeStampIsSet
condition|)
name|ts
operator|=
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|.
name|getTimeStamp
argument_list|(
name|startTime
argument_list|,
name|endTime
argument_list|,
name|exclude
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to access room availability service, reason:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|iRoomAvailabilityTimeStampIsSet
condition|)
block|{
name|iRoomAvailabilityTimeStampIsSet
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|ts
operator|!=
literal|null
condition|)
block|{
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"RoomAvailability.TimeStamp"
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|info
argument_list|(
literal|"Using room availability that was updated on "
operator|+
name|ts
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"Room availability is not available."
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|void
name|roomAvailabilityActivate
parameter_list|(
name|Date
name|startTime
parameter_list|,
name|Date
name|endTime
parameter_list|,
name|String
name|exclude
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|isRemote
argument_list|()
condition|)
block|{
name|RemoteSolverServer
operator|.
name|query
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"activateRoomAvailability"
block|,
name|iSessionId
block|,
name|startTime
block|,
name|endTime
block|,
name|exclude
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|.
name|activate
argument_list|(
operator|new
name|SessionDAO
argument_list|()
operator|.
name|get
argument_list|(
name|iSessionId
argument_list|)
argument_list|,
name|startTime
argument_list|,
name|endTime
argument_list|,
name|exclude
argument_list|,
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.room.availability.solver.waitForSync"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to access room availability service, reason:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|sameOwners
parameter_list|(
name|Exam
name|x1
parameter_list|,
name|Exam
name|x2
parameter_list|)
block|{
if|if
condition|(
name|x1
operator|.
name|getOwners
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|x1
operator|.
name|getOwners
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
name|x2
operator|.
name|getOwners
argument_list|()
operator|.
name|size
argument_list|()
condition|)
return|return
literal|false
return|;
name|owners
label|:
for|for
control|(
name|ExamOwner
name|o1
range|:
name|x1
operator|.
name|getOwners
argument_list|()
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
name|w1
init|=
name|iOwners
operator|.
name|get
argument_list|(
name|o1
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ExamOwner
name|o2
range|:
name|x2
operator|.
name|getOwners
argument_list|()
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
name|w2
init|=
name|iOwners
operator|.
name|get
argument_list|(
name|o2
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|w1
operator|.
name|getOwnerType
argument_list|()
operator|.
name|equals
argument_list|(
name|w2
operator|.
name|getOwnerType
argument_list|()
argument_list|)
operator|&&
name|w1
operator|.
name|getOwnerId
argument_list|()
operator|.
name|equals
argument_list|(
name|w2
operator|.
name|getOwnerId
argument_list|()
argument_list|)
condition|)
continue|continue
name|owners
continue|;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|makeupSameRoomConstraints
parameter_list|()
block|{
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Posting same rooms..."
argument_list|,
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|dc
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Exam
name|first
range|:
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
for|for
control|(
name|Exam
name|second
range|:
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
if|if
condition|(
name|first
operator|.
name|getId
argument_list|()
operator|>=
name|second
operator|.
name|getId
argument_list|()
operator|||
operator|!
name|sameOwners
argument_list|(
name|first
argument_list|,
name|second
argument_list|)
condition|)
continue|continue;
name|iProgress
operator|.
name|debug
argument_list|(
literal|"Posting same room constraint between "
operator|+
name|first
operator|.
name|getName
argument_list|()
operator|+
literal|" and "
operator|+
name|second
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ExamDistributionConstraint
name|constraint
init|=
operator|new
name|ExamDistributionConstraint
argument_list|(
operator|--
name|dc
argument_list|,
name|ExamDistributionConstraint
operator|.
name|sDistSameRoom
argument_list|,
literal|false
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|constraint
operator|.
name|addVariable
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|constraint
operator|.
name|addVariable
argument_list|(
name|second
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|addConstraint
argument_list|(
name|constraint
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|getDistributionConstraints
argument_list|()
operator|.
name|add
argument_list|(
name|constraint
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

