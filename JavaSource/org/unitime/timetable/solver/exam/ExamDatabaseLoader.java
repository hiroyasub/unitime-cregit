begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Building
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|BuildingPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriodPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeaturePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroupPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DistributionPrefDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|preference
operator|.
name|MinMaxPreferenceCombination
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|preference
operator|.
name|PreferenceCombination
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|preference
operator|.
name|SumPreferenceCombination
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamCourseSection
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamDistributionConstraint
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamInstructor
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamModel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamPlacement
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamRoom
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamStudent
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_class
specifier|public
class|class
name|ExamDatabaseLoader
extends|extends
name|ExamLoader
block|{
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ExamDatabaseLoader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Long
name|iSessionId
decl_stmt|;
specifier|private
name|int
name|iExamType
decl_stmt|;
specifier|private
name|boolean
name|iLoadSolution
decl_stmt|;
specifier|private
name|String
name|iInstructorFormat
decl_stmt|;
specifier|private
name|Progress
name|iProgress
init|=
literal|null
decl_stmt|;
specifier|private
name|Hashtable
name|iPeriods
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
name|iRooms
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
name|iExams
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
name|iInstructors
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
name|iStudents
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|private
name|Set
name|iAllRooms
init|=
literal|null
decl_stmt|;
specifier|public
name|ExamDatabaseLoader
parameter_list|(
name|ExamModel
name|model
parameter_list|)
block|{
name|super
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|iProgress
operator|=
name|Progress
operator|.
name|getInstance
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|iSessionId
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SessionId"
argument_list|,
operator|(
name|Long
operator|)
literal|null
argument_list|)
expr_stmt|;
name|iExamType
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyInt
argument_list|(
literal|"Exam.Type"
argument_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|.
name|sExamTypeFinal
argument_list|)
expr_stmt|;
name|iLoadSolution
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.LoadSolution"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iInstructorFormat
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.InstructorFormat"
argument_list|,
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFist
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getExamLabel
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
name|exam
parameter_list|)
block|{
return|return
literal|"<A href='examDetail.do?examId="
operator|+
name|exam
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"'>"
operator|+
name|exam
operator|.
name|getLabel
argument_list|()
operator|+
literal|"</A>"
return|;
block|}
specifier|public
name|void
name|load
parameter_list|()
throws|throws
name|Exception
block|{
name|iProgress
operator|.
name|setStatus
argument_list|(
literal|"Loading input data ..."
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|loadPeriods
argument_list|()
expr_stmt|;
name|loadRooms
argument_list|()
expr_stmt|;
name|loadExams
argument_list|()
expr_stmt|;
name|loadStudents
argument_list|()
expr_stmt|;
name|loadDistributions
argument_list|()
expr_stmt|;
name|assignInitial
argument_list|()
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|iProgress
operator|.
name|fatal
argument_list|(
literal|"Unable to load examination problem, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|int
name|pref2weight
parameter_list|(
name|String
name|pref
parameter_list|)
block|{
if|if
condition|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
return|return
operator|-
literal|4
return|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sPreferred
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sDiscouraged
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
return|return
literal|4
return|;
return|return
literal|0
return|;
block|}
specifier|protected
name|void
name|loadPeriods
parameter_list|()
block|{
name|Set
name|periods
init|=
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
operator|.
name|findAll
argument_list|(
name|iSessionId
argument_list|,
name|iExamType
argument_list|)
decl_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Loading periods..."
argument_list|,
name|periods
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SimpleDateFormat
name|dateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE MM/dd"
argument_list|)
decl_stmt|;
name|SimpleDateFormat
name|timeFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"hh:mmaa"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|periods
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
name|period
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|pref
init|=
name|period
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
decl_stmt|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
continue|continue;
name|ExamPeriod
name|p
init|=
name|getModel
argument_list|()
operator|.
name|addPeriod
argument_list|(
name|period
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|dateFormat
operator|.
name|format
argument_list|(
name|period
operator|.
name|getStartDate
argument_list|()
argument_list|)
argument_list|,
name|timeFormat
operator|.
name|format
argument_list|(
name|period
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|,
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|period
operator|.
name|getLength
argument_list|()
argument_list|,
name|pref2weight
argument_list|(
name|pref
argument_list|)
argument_list|)
decl_stmt|;
name|iPeriods
operator|.
name|put
argument_list|(
name|period
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|loadRooms
parameter_list|()
block|{
name|iAllRooms
operator|=
name|Location
operator|.
name|findAllExamLocations
argument_list|(
name|iSessionId
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Loading rooms..."
argument_list|,
name|iAllRooms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iAllRooms
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExamRoom
name|room
init|=
operator|new
name|ExamRoom
argument_list|(
name|getModel
argument_list|()
argument_list|,
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|,
name|location
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|location
operator|.
name|getExamCapacity
argument_list|()
argument_list|,
operator|(
name|location
operator|.
name|getCoordinateX
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|location
operator|.
name|getCoordinateX
argument_list|()
operator|)
argument_list|,
operator|(
name|location
operator|.
name|getCoordinateY
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|location
operator|.
name|getCoordinateY
argument_list|()
operator|)
argument_list|)
decl_stmt|;
name|getModel
argument_list|()
operator|.
name|addConstraint
argument_list|(
name|room
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|getRooms
argument_list|()
operator|.
name|add
argument_list|(
name|room
argument_list|)
expr_stmt|;
name|iRooms
operator|.
name|put
argument_list|(
operator|new
name|Long
argument_list|(
name|room
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|room
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|location
operator|.
name|getExamPreferences
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|iPeriods
operator|.
name|get
argument_list|(
operator|(
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
operator|)
name|entry
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|pref
init|=
operator|(
operator|(
name|PreferenceLevel
operator|)
name|entry
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|getPrefProlog
argument_list|()
decl_stmt|;
if|if
condition|(
name|period
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
name|room
operator|.
name|setAvailable
argument_list|(
name|period
operator|.
name|getIndex
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
else|else
name|room
operator|.
name|setWeight
argument_list|(
name|period
operator|.
name|getIndex
argument_list|()
argument_list|,
name|pref2weight
argument_list|(
name|pref
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|loadExams
parameter_list|()
block|{
name|Collection
name|exams
init|=
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|.
name|findAll
argument_list|(
name|iSessionId
argument_list|,
name|iExamType
argument_list|)
decl_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Loading exams..."
argument_list|,
name|exams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
name|exam
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Exam
name|x
init|=
operator|new
name|Exam
argument_list|(
name|exam
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|exam
operator|.
name|getLabel
argument_list|()
argument_list|,
name|exam
operator|.
name|getLength
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|(
name|exam
operator|.
name|getSeatingType
argument_list|()
operator|==
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|.
name|sSeatingTypeExam
condition|?
literal|true
else|:
literal|false
operator|)
argument_list|,
name|exam
operator|.
name|getMaxNbrRooms
argument_list|()
argument_list|)
decl_stmt|;
name|iExams
operator|.
name|put
argument_list|(
name|exam
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|addVariable
argument_list|(
name|x
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
operator|new
name|TreeSet
argument_list|(
name|exam
operator|.
name|getOwners
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamOwner
name|owner
init|=
operator|(
name|ExamOwner
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|ownerObject
init|=
name|owner
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|ownerObject
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|ownerObject
decl_stmt|;
name|ExamCourseSection
name|cs
init|=
operator|new
name|ExamCourseSection
argument_list|(
name|x
argument_list|,
name|owner
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|clazz
operator|.
name|getClassLabel
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|x
operator|.
name|getCourseSections
argument_list|()
operator|.
name|add
argument_list|(
name|cs
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ownerObject
operator|instanceof
name|InstrOfferingConfig
condition|)
block|{
name|InstrOfferingConfig
name|config
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|ownerObject
decl_stmt|;
name|ExamCourseSection
name|cs
init|=
operator|new
name|ExamCourseSection
argument_list|(
name|x
argument_list|,
name|owner
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|config
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|x
operator|.
name|getCourseSections
argument_list|()
operator|.
name|add
argument_list|(
name|cs
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ownerObject
operator|instanceof
name|CourseOffering
condition|)
block|{
name|CourseOffering
name|course
init|=
operator|(
name|CourseOffering
operator|)
name|ownerObject
decl_stmt|;
name|ExamCourseSection
name|cs
init|=
operator|new
name|ExamCourseSection
argument_list|(
name|x
argument_list|,
name|owner
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|x
operator|.
name|getCourseSections
argument_list|()
operator|.
name|add
argument_list|(
name|cs
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ownerObject
operator|instanceof
name|InstructionalOffering
condition|)
block|{
name|InstructionalOffering
name|offering
init|=
operator|(
name|InstructionalOffering
operator|)
name|ownerObject
decl_stmt|;
name|ExamCourseSection
name|cs
init|=
operator|new
name|ExamCourseSection
argument_list|(
name|x
argument_list|,
name|owner
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|offering
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|x
operator|.
name|getCourseSections
argument_list|()
operator|.
name|add
argument_list|(
name|cs
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|hasReqPeriod
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|exam
operator|.
name|getPreferences
argument_list|(
name|ExamPeriodPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriodPref
name|periodPref
init|=
operator|(
name|ExamPeriodPref
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|iPeriods
operator|.
name|get
argument_list|(
name|periodPref
operator|.
name|getExamPeriod
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|period
operator|==
literal|null
condition|)
continue|continue;
name|String
name|pref
init|=
name|periodPref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
decl_stmt|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|hasReqPeriod
condition|)
for|for
control|(
name|Enumeration
name|e
init|=
name|getModel
argument_list|()
operator|.
name|getPeriods
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|p
init|=
operator|(
name|ExamPeriod
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|x
operator|.
name|setAvailable
argument_list|(
name|p
operator|.
name|getIndex
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|x
operator|.
name|setAvailable
argument_list|(
name|period
operator|.
name|getIndex
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hasReqPeriod
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasReqPeriod
condition|)
block|{
if|if
condition|(
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
block|{
name|x
operator|.
name|setAvailable
argument_list|(
name|period
operator|.
name|getIndex
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
name|x
operator|.
name|setWeight
argument_list|(
name|period
operator|.
name|getIndex
argument_list|()
argument_list|,
name|pref2weight
argument_list|(
name|pref
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|x
operator|.
name|setRoomWeights
argument_list|(
name|findRooms
argument_list|(
name|exam
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|exam
operator|.
name|getInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|loadInstructor
argument_list|(
operator|(
name|DepartmentalInstructor
operator|)
name|j
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|addVariable
argument_list|(
name|x
argument_list|)
expr_stmt|;
if|if
condition|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|boolean
name|fail
init|=
literal|false
decl_stmt|;
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|iPeriods
operator|.
name|get
argument_list|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|period
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to load assignment of "
operator|+
name|getExamLabel
argument_list|(
name|exam
argument_list|)
operator|+
literal|": "
operator|+
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" is not allowed."
argument_list|)
expr_stmt|;
name|fail
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fail
operator|&&
operator|!
name|x
operator|.
name|isAvailable
argument_list|(
name|period
argument_list|)
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to load assignment of "
operator|+
name|getExamLabel
argument_list|(
name|exam
argument_list|)
operator|+
literal|": "
operator|+
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" is prohibited."
argument_list|)
expr_stmt|;
name|fail
operator|=
literal|true
expr_stmt|;
block|}
name|HashSet
name|rooms
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fail
operator|&&
name|x
operator|.
name|getMaxRooms
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Iterator
name|j
init|=
name|exam
operator|.
name|getAssignedRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExamRoom
name|room
init|=
operator|(
name|ExamRoom
operator|)
name|iRooms
operator|.
name|get
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|room
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to load assignment of "
operator|+
name|getExamLabel
argument_list|(
name|exam
argument_list|)
operator|+
literal|": "
operator|+
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|" is no longer an examination room."
argument_list|)
expr_stmt|;
name|fail
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|x
operator|.
name|getRooms
argument_list|()
operator|.
name|contains
argument_list|(
name|room
argument_list|)
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to load assignment of "
operator|+
name|getExamLabel
argument_list|(
name|exam
argument_list|)
operator|+
literal|": location "
operator|+
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|" is no longer valid for this exam."
argument_list|)
expr_stmt|;
name|fail
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|rooms
operator|.
name|add
argument_list|(
name|room
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|fail
operator|&&
name|rooms
operator|.
name|size
argument_list|()
operator|>
name|x
operator|.
name|getMaxRooms
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to load assignment of "
operator|+
name|getExamLabel
argument_list|(
name|exam
argument_list|)
operator|+
literal|": number of assigned rooms exceeds the current limit ("
operator|+
name|rooms
operator|.
name|size
argument_list|()
operator|+
literal|">"
operator|+
name|x
operator|.
name|getMaxRooms
argument_list|()
operator|+
literal|")."
argument_list|)
expr_stmt|;
name|fail
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fail
operator|&&
operator|!
name|x
operator|.
name|isAvailable
argument_list|(
name|period
argument_list|,
name|rooms
argument_list|)
condition|)
block|{
if|if
condition|(
name|rooms
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to load assignment of "
operator|+
name|getExamLabel
argument_list|(
name|exam
argument_list|)
operator|+
literal|": location "
operator|+
name|rooms
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|+
literal|" cannot be used at "
operator|+
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
else|else
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to load assignment of "
operator|+
name|getExamLabel
argument_list|(
name|exam
argument_list|)
operator|+
literal|": one or more locations "
operator|+
name|rooms
operator|+
literal|" cannot be used at "
operator|+
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|fail
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fail
condition|)
name|x
operator|.
name|setInitialAssignment
argument_list|(
operator|new
name|ExamPlacement
argument_list|(
name|x
argument_list|,
name|period
argument_list|,
name|rooms
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|ExamInstructor
name|loadInstructor
parameter_list|(
name|DepartmentalInstructor
name|instructor
parameter_list|)
block|{
if|if
condition|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExamInstructor
name|i
init|=
operator|(
name|ExamInstructor
operator|)
name|iInstructors
operator|.
name|get
argument_list|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|null
condition|)
block|{
name|i
operator|=
operator|new
name|ExamInstructor
argument_list|(
name|getModel
argument_list|()
argument_list|,
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|instructor
operator|.
name|getName
argument_list|(
name|iInstructorFormat
argument_list|)
argument_list|)
expr_stmt|;
name|iInstructors
operator|.
name|put
argument_list|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|addConstraint
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|getInstructors
argument_list|()
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
else|else
block|{
name|ExamInstructor
name|i
init|=
operator|(
name|ExamInstructor
operator|)
name|iInstructors
operator|.
name|get
argument_list|(
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|null
condition|)
block|{
name|i
operator|=
operator|new
name|ExamInstructor
argument_list|(
name|getModel
argument_list|()
argument_list|,
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|instructor
operator|.
name|getName
argument_list|(
name|iInstructorFormat
argument_list|)
argument_list|)
expr_stmt|;
name|iInstructors
operator|.
name|put
argument_list|(
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|addConstraint
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|getInstructors
argument_list|()
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
block|}
specifier|protected
name|Hashtable
name|findRooms
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
name|exam
parameter_list|,
name|boolean
name|interactiveMode
parameter_list|)
block|{
name|Hashtable
name|rooms
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|boolean
name|reqRoom
init|=
literal|false
decl_stmt|;
name|boolean
name|reqBldg
init|=
literal|false
decl_stmt|;
name|boolean
name|reqGroup
init|=
literal|false
decl_stmt|;
name|Set
name|groupPrefs
init|=
name|exam
operator|.
name|getPreferences
argument_list|(
name|RoomGroupPref
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
name|roomPrefs
init|=
name|exam
operator|.
name|getPreferences
argument_list|(
name|RoomPref
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
name|bldgPrefs
init|=
name|exam
operator|.
name|getPreferences
argument_list|(
name|BuildingPref
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
name|featurePrefs
init|=
name|exam
operator|.
name|getPreferences
argument_list|(
name|RoomFeaturePref
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i1
init|=
name|iAllRooms
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|room
init|=
operator|(
name|Location
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExamRoom
name|roomEx
init|=
operator|(
name|ExamRoom
operator|)
name|iRooms
operator|.
name|get
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|roomEx
operator|==
literal|null
condition|)
continue|continue;
name|boolean
name|add
init|=
literal|true
decl_stmt|;
name|PreferenceCombination
name|pref
init|=
operator|new
name|SumPreferenceCombination
argument_list|()
decl_stmt|;
comment|// --- group preference ----------
name|PreferenceCombination
name|groupPref
init|=
name|PreferenceCombination
operator|.
name|getDefault
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|groupPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomGroupPref
name|p
init|=
operator|(
name|RoomGroupPref
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|getRooms
argument_list|()
operator|.
name|contains
argument_list|(
name|room
argument_list|)
condition|)
name|groupPref
operator|.
name|addPreferenceProlog
argument_list|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|groupPref
operator|.
name|getPreferenceProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
condition|)
block|{
if|if
condition|(
name|interactiveMode
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
else|else
name|add
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|reqGroup
operator|&&
operator|!
name|groupPref
operator|.
name|getPreferenceProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
block|{
if|if
condition|(
name|interactiveMode
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
else|else
name|add
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|reqGroup
operator|&&
operator|(
name|groupPref
operator|.
name|getPreferenceProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|)
condition|)
block|{
name|reqGroup
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|interactiveMode
condition|)
block|{
for|for
control|(
name|Iterator
name|i2
init|=
operator|new
name|Vector
argument_list|(
name|rooms
operator|.
name|entrySet
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExamRoom
name|r
init|=
operator|(
name|ExamRoom
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Integer
name|weight
init|=
operator|(
name|Integer
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|rooms
operator|.
name|put
argument_list|(
name|r
argument_list|,
name|weight
operator|+
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|rooms
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|groupPref
operator|.
name|getPreferenceProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|&&
operator|!
name|groupPref
operator|.
name|getPreferenceProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|groupPref
operator|.
name|getPreferenceProlog
argument_list|()
argument_list|)
expr_stmt|;
comment|// --- room preference ------------
name|String
name|roomPref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|roomPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomPref
name|p
init|=
operator|(
name|RoomPref
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|room
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getRoom
argument_list|()
argument_list|)
condition|)
block|{
name|roomPref
operator|=
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|roomPref
operator|!=
literal|null
operator|&&
name|roomPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
condition|)
block|{
if|if
condition|(
name|interactiveMode
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
else|else
name|add
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|reqRoom
operator|&&
operator|(
name|roomPref
operator|==
literal|null
operator|||
operator|!
name|roomPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|interactiveMode
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
else|else
name|add
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|reqRoom
operator|&&
operator|(
name|roomPref
operator|!=
literal|null
operator|&&
name|roomPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|)
condition|)
block|{
name|reqRoom
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|interactiveMode
condition|)
block|{
for|for
control|(
name|Iterator
name|i2
init|=
operator|new
name|Vector
argument_list|(
name|rooms
operator|.
name|entrySet
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExamRoom
name|r
init|=
operator|(
name|ExamRoom
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Integer
name|weight
init|=
operator|(
name|Integer
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|rooms
operator|.
name|put
argument_list|(
name|r
argument_list|,
name|weight
operator|+
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|rooms
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|roomPref
operator|!=
literal|null
operator|&&
operator|!
name|roomPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|&&
operator|!
name|roomPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|roomPref
argument_list|)
expr_stmt|;
comment|// --- building preference ------------
name|Building
name|bldg
init|=
operator|(
name|room
operator|instanceof
name|Room
condition|?
operator|(
operator|(
name|Room
operator|)
name|room
operator|)
operator|.
name|getBuilding
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
name|String
name|bldgPref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|bldgPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BuildingPref
name|p
init|=
operator|(
name|BuildingPref
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|bldg
operator|!=
literal|null
operator|&&
name|bldg
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getBuilding
argument_list|()
argument_list|)
condition|)
block|{
name|bldgPref
operator|=
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|bldgPref
operator|!=
literal|null
operator|&&
name|bldgPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
condition|)
block|{
if|if
condition|(
name|interactiveMode
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
else|else
name|add
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|reqBldg
operator|&&
operator|(
name|bldgPref
operator|==
literal|null
operator|||
operator|!
name|bldgPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|interactiveMode
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
else|else
name|add
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|reqBldg
operator|&&
operator|(
name|bldgPref
operator|!=
literal|null
operator|&&
name|bldgPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|)
condition|)
block|{
name|reqBldg
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|interactiveMode
condition|)
block|{
for|for
control|(
name|Iterator
name|i2
init|=
operator|new
name|Vector
argument_list|(
name|rooms
operator|.
name|entrySet
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExamRoom
name|r
init|=
operator|(
name|ExamRoom
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Integer
name|weight
init|=
operator|(
name|Integer
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|rooms
operator|.
name|put
argument_list|(
name|r
argument_list|,
name|weight
operator|+
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|rooms
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|bldgPref
operator|!=
literal|null
operator|&&
operator|!
name|bldgPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|&&
operator|!
name|bldgPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|bldgPref
argument_list|)
expr_stmt|;
comment|// --- room features preference --------
name|boolean
name|acceptableFeatures
init|=
literal|true
decl_stmt|;
name|PreferenceCombination
name|featurePref
init|=
operator|new
name|MinMaxPreferenceCombination
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|featurePrefs
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomFeaturePref
name|roomFeaturePref
init|=
operator|(
name|RoomFeaturePref
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|RoomFeature
name|feature
init|=
name|roomFeaturePref
operator|.
name|getRoomFeature
argument_list|()
decl_stmt|;
name|String
name|p
init|=
name|roomFeaturePref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
decl_stmt|;
name|boolean
name|hasFeature
init|=
name|feature
operator|.
name|getRooms
argument_list|()
operator|.
name|contains
argument_list|(
name|room
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|&&
name|hasFeature
condition|)
block|{
name|acceptableFeatures
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|&&
operator|!
name|hasFeature
condition|)
block|{
name|acceptableFeatures
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|hasFeature
operator|&&
operator|!
name|p
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|&&
operator|!
name|p
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
name|featurePref
operator|.
name|addPreferenceProlog
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|pref
operator|.
name|addPreferenceInt
argument_list|(
name|featurePref
operator|.
name|getPreferenceInt
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|acceptableFeatures
condition|)
block|{
if|if
condition|(
name|interactiveMode
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
else|else
name|add
operator|=
literal|false
expr_stmt|;
block|}
name|int
name|prefInt
init|=
name|pref
operator|.
name|getPreferenceInt
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|add
condition|)
continue|continue;
name|rooms
operator|.
name|put
argument_list|(
name|roomEx
argument_list|,
name|prefInt
argument_list|)
expr_stmt|;
block|}
return|return
name|rooms
return|;
block|}
specifier|protected
name|void
name|loadStudents
parameter_list|()
block|{
name|loadStudents
argument_list|(
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select x.uniqueId, e.student.uniqueId from "
operator|+
literal|"Exam x inner join x.owners o, "
operator|+
literal|"StudentClassEnrollment e inner join e.clazz c "
operator|+
literal|"where x.session.uniqueId=:sessionId and "
operator|+
literal|"o.ownerType="
operator|+
name|ExamOwner
operator|.
name|sOwnerTypeClass
operator|+
literal|" and "
operator|+
literal|"o.ownerId=c.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|list
argument_list|()
argument_list|,
literal|"class"
argument_list|)
expr_stmt|;
name|loadStudents
argument_list|(
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select x.uniqueId, e.student.uniqueId from "
operator|+
literal|"Exam x inner join x.owners o, "
operator|+
literal|"StudentClassEnrollment e inner join e.clazz c "
operator|+
literal|"inner join c.schedulingSubpart.instrOfferingConfig ioc "
operator|+
literal|"where x.session.uniqueId=:sessionId and "
operator|+
literal|"o.ownerType="
operator|+
name|ExamOwner
operator|.
name|sOwnerTypeConfig
operator|+
literal|" and "
operator|+
literal|"o.ownerId=ioc.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|list
argument_list|()
argument_list|,
literal|"config"
argument_list|)
expr_stmt|;
name|loadStudents
argument_list|(
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select x.uniqueId, e.student.uniqueId from "
operator|+
literal|"Exam x inner join x.owners o, "
operator|+
literal|"StudentClassEnrollment e inner join e.courseOffering co "
operator|+
literal|"where x.session.uniqueId=:sessionId and "
operator|+
literal|"o.ownerType="
operator|+
name|ExamOwner
operator|.
name|sOwnerTypeCourse
operator|+
literal|" and "
operator|+
literal|"o.ownerId=co.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|list
argument_list|()
argument_list|,
literal|"course"
argument_list|)
expr_stmt|;
name|loadStudents
argument_list|(
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select x.uniqueId, e.student.uniqueId from "
operator|+
literal|"Exam x inner join x.owners o, "
operator|+
literal|"StudentClassEnrollment e inner join e.courseOffering.instructionalOffering io "
operator|+
literal|"where x.session.uniqueId=:sessionId and "
operator|+
literal|"o.ownerType="
operator|+
name|ExamOwner
operator|.
name|sOwnerTypeOffering
operator|+
literal|" and "
operator|+
literal|"o.ownerId=io.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|list
argument_list|()
argument_list|,
literal|"offering"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|loadStudents
parameter_list|(
name|Collection
name|enrl
parameter_list|,
name|String
name|phase
parameter_list|)
block|{
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Loading students ("
operator|+
name|phase
operator|+
literal|")..."
argument_list|,
name|enrl
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|enrl
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|examId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|ExamStudent
name|student
init|=
operator|(
name|ExamStudent
operator|)
name|iStudents
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
block|{
name|student
operator|=
operator|new
name|ExamStudent
argument_list|(
name|getModel
argument_list|()
argument_list|,
name|studentId
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|addConstraint
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|iStudents
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|student
argument_list|)
expr_stmt|;
block|}
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|iExams
operator|.
name|get
argument_list|(
name|examId
argument_list|)
decl_stmt|;
if|if
condition|(
name|exam
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Exam "
operator|+
name|getExamLabel
argument_list|(
operator|new
name|ExamDAO
argument_list|()
operator|.
name|get
argument_list|(
name|examId
argument_list|)
argument_list|)
operator|+
literal|" not loaded."
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|student
operator|.
name|variables
argument_list|()
operator|.
name|contains
argument_list|(
name|exam
argument_list|)
condition|)
name|student
operator|.
name|addVariable
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|loadDistributions
parameter_list|()
block|{
name|List
name|distPrefs
init|=
operator|new
name|DistributionPrefDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select d from DistributionPref d where "
operator|+
literal|"d.distributionType.examPref=true and "
operator|+
literal|"d.owner.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Loading distributions..."
argument_list|,
name|distPrefs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|distPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|DistributionPref
name|pref
init|=
operator|(
name|DistributionPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExamDistributionConstraint
name|constraint
init|=
operator|new
name|ExamDistributionConstraint
argument_list|(
name|pref
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|pref
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|,
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
operator|new
name|TreeSet
argument_list|(
name|pref
operator|.
name|getDistributionObjects
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|distObj
init|=
operator|(
name|DistributionObject
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|iExams
operator|.
name|get
argument_list|(
name|distObj
operator|.
name|getPrefGroup
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|exam
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Exam "
operator|+
name|getExamLabel
argument_list|(
operator|new
name|ExamDAO
argument_list|()
operator|.
name|get
argument_list|(
name|distObj
operator|.
name|getPrefGroup
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|" not loaded."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|constraint
operator|.
name|addVariable
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|constraint
operator|.
name|variables
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getModel
argument_list|()
operator|.
name|addConstraint
argument_list|(
name|constraint
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|getDistributionConstraints
argument_list|()
operator|.
name|add
argument_list|(
name|constraint
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|assignInitial
parameter_list|()
block|{
if|if
condition|(
name|iLoadSolution
condition|)
block|{
for|for
control|(
name|Enumeration
name|e
init|=
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|ExamPlacement
name|placement
init|=
operator|(
name|ExamPlacement
operator|)
name|exam
operator|.
name|getInitialAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|placement
operator|==
literal|null
condition|)
continue|continue;
name|Set
name|conf
init|=
name|getModel
argument_list|()
operator|.
name|conflictValues
argument_list|(
name|placement
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|conf
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|getModel
argument_list|()
operator|.
name|conflictConstraints
argument_list|(
name|placement
argument_list|)
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Constraint
name|constraint
init|=
operator|(
name|Constraint
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Set
name|values
init|=
operator|(
name|Set
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|constraint
operator|instanceof
name|ExamStudent
condition|)
block|{
operator|(
operator|(
name|ExamStudent
operator|)
name|constraint
operator|)
operator|.
name|setAllowDirectConflicts
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|exam
operator|.
name|setAllowDirectConflicts
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|values
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
operator|(
operator|(
name|Exam
operator|)
operator|(
operator|(
name|ExamPlacement
operator|)
name|j
operator|.
name|next
argument_list|()
operator|)
operator|.
name|variable
argument_list|()
operator|)
operator|.
name|setAllowDirectConflicts
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|conf
operator|=
name|getModel
argument_list|()
operator|.
name|conflictValues
argument_list|(
name|placement
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|exam
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|placement
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to assign "
operator|+
name|exam
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" to exam "
operator|+
name|exam
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|info
argument_list|(
literal|"Conflicts:"
operator|+
name|ToolBox
operator|.
name|dict2string
argument_list|(
name|getModel
argument_list|()
operator|.
name|conflictConstraints
argument_list|(
name|exam
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Enumeration
name|e
init|=
operator|new
name|Vector
argument_list|(
name|getModel
argument_list|()
operator|.
name|unassignedVariables
argument_list|()
argument_list|)
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|exam
operator|.
name|hasPreAssignedPeriod
argument_list|()
condition|)
continue|continue;
name|ExamPlacement
name|placement
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|exam
operator|.
name|hasPreAssignedRooms
argument_list|()
condition|)
block|{
name|placement
operator|=
operator|new
name|ExamPlacement
argument_list|(
name|exam
argument_list|,
name|exam
operator|.
name|getPreAssignedPeriod
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|(
name|exam
operator|.
name|getPreassignedRooms
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Set
name|bestRooms
init|=
name|exam
operator|.
name|findBestAvailableRooms
argument_list|(
name|exam
operator|.
name|getPreAssignedPeriod
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|bestRooms
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to assign "
operator|+
name|exam
operator|.
name|getPreAssignedPeriod
argument_list|()
operator|+
literal|" to exam "
operator|+
name|exam
operator|.
name|getName
argument_list|()
operator|+
literal|" -- no suitable room found."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|placement
operator|=
operator|new
name|ExamPlacement
argument_list|(
name|exam
argument_list|,
name|exam
operator|.
name|getPreAssignedPeriod
argument_list|()
argument_list|,
name|bestRooms
argument_list|)
expr_stmt|;
block|}
name|Set
name|conflicts
init|=
name|getModel
argument_list|()
operator|.
name|conflictValues
argument_list|(
name|placement
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|conflicts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|getModel
argument_list|()
operator|.
name|conflictConstraints
argument_list|(
name|placement
argument_list|)
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Constraint
name|constraint
init|=
operator|(
name|Constraint
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Set
name|values
init|=
operator|(
name|Set
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|constraint
operator|instanceof
name|ExamStudent
condition|)
block|{
operator|(
operator|(
name|ExamStudent
operator|)
name|constraint
operator|)
operator|.
name|setAllowDirectConflicts
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|exam
operator|.
name|setAllowDirectConflicts
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|values
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
operator|(
operator|(
name|Exam
operator|)
operator|(
operator|(
name|ExamPlacement
operator|)
name|j
operator|.
name|next
argument_list|()
operator|)
operator|.
name|variable
argument_list|()
operator|)
operator|.
name|setAllowDirectConflicts
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|conflicts
operator|=
name|getModel
argument_list|()
operator|.
name|conflictValues
argument_list|(
name|placement
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conflicts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|exam
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|placement
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to assign "
operator|+
name|placement
operator|.
name|getName
argument_list|()
operator|+
literal|" to exam "
operator|+
name|exam
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|info
argument_list|(
literal|"Conflicts:"
operator|+
name|ToolBox
operator|.
name|dict2string
argument_list|(
name|getModel
argument_list|()
operator|.
name|conflictConstraints
argument_list|(
name|exam
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

